(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/dave/lh2/angular2/test/trjournal/client/app/dropdown.ts":[function(require,module,exports){
/// <reference path="../../typings/angular2/angular2.d.ts" />
/// <reference path="../../typings/firebase/firebase.d.ts" />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var angular2_1 = require('angular2/angular2');
var Dropdown = (function () {
    function Dropdown() {
        // Only initialize locally instatiated data here 
        // (angular2-dependent data has not yet been fully initialized)
        this.initevent = new angular2_1.EventEmitter();
        this.current = "-1";
    }
    Dropdown.prototype.onInit = function () {
        // onInit() is a angular2 lifecycle method called 
        // automatically after angular2 has completed initialization
        console.log("Dropdown options", this.options);
        this.initevent.next(this); // send initevent to parent component
    };
    Dropdown.prototype.handleSelect = function ($event) {
        this.current = $event.target.value;
        console.log("Dropdown selected", this.current);
    };
    Dropdown.prototype.currentValue = function () {
        if (this.current === "-1") {
            return "";
        }
        else {
            return this.current;
        }
    };
    Dropdown = __decorate([
        angular2_1.Component({
            selector: 'dropdown',
            properties: ['options', 'id', 'name'],
            events: ['initevent'] // NOTE that event names must be all lower case
        }),
        angular2_1.View({
            template: "\n        <select class=\"form-control\"  (change)=\"handleSelect($event)\" id=\"{{id}}\">\n          <option value=\"-1\">Select {{name}}</option>\n          <option *ng-for=\"#opt of options\" value=\"{{opt}}\">{{opt}}</option>\n        </select>\n        ",
            directives: [angular2_1.NgFor]
        }), 
        __metadata('design:paramtypes', [])
    ], Dropdown);
    return Dropdown;
})();
exports.Dropdown = Dropdown;

},{"angular2/angular2":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/angular2.js"}],"/Users/dave/lh2/angular2/test/trjournal/client/app/jentries.ts":[function(require,module,exports){
/// <reference path="../../typings/angular2/angular2.d.ts" />
/// <reference path="../../typings/firebase/firebase.d.ts" />
/// <reference path="../../typings/requirejs/require.d.ts" />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var angular2_1 = require('angular2/angular2');
var formatDate = require('../assets/js/utils').formatDate;
var JournalEntries = (function () {
    function JournalEntries() {
        this.otherEntries = [];
        this.todayDate = formatDate();
        this.todayNote = '';
        // Only initialize locally instatiated data here 
        // (angular2-dependent data has not yet been fully initialized)
        this.initevent = new angular2_1.EventEmitter();
        this.parent = null;
        this.dbJournalRef = null;
    }
    JournalEntries.prototype.onInit = function () {
        // onInit() is a angular2 lifecycle method called 
        // automatically after angular2 has completed initialization
        console.log("onInit: for JournalEntries", this.journalIdStr);
        this.initevent.next(this); // send initevent to parent component
    };
    JournalEntries.prototype.registerParent = function (parent, fbRef) {
        console.log("registerParent: for JournalEntries", parent, this.journalIdStr);
        this.parent = parent;
        //
        // Complete initialization, now that everything is ready
        //
        var dbUserId = this.parent.parent.dbUserId();
        this.dbJournalRef = fbRef.child(dbUserId).child('entries').child(this.journalIdStr);
        var self = this;
        var journalRef = this.dbJournalRef.on('child_added', function (snapshot, prevChildKey) {
            var entryData = { note: snapshot.val(), noteDate: snapshot.key() };
            console.log("registering new journal entry", entryData);
            self.handleEntryDisplay(entryData);
        });
        // Watch for (remote) changes on todayNote
        this.dbJournalRef.on("child_changed", function (snapshot, prevChildKey) {
            if (snapshot.key() != self.todayDate) {
                // ignore, at least for now
                return;
            }
            if (self.todayNote != snapshot.val()) {
                self.todayNote = snapshot.val();
                console.log("Remote update of today's note to", self.todayNote);
            }
        });
    };
    JournalEntries.prototype.handleEntryDisplay = function (entryData) {
        if (entryData.noteDate == this.todayDate) {
            this.todayNote = entryData.note;
        }
        else {
            // Insert into list according to noteDate descending
            var i = 0;
            while (i < this.otherEntries.length && entryData.noteDate < this.otherEntries[i].noteDate) {
                i += 1;
            }
            // Insert into list
            this.otherEntries.splice(i, 0, entryData);
        }
    };
    JournalEntries.prototype.updateTodayNote = function (value) {
        console.log("Updating today's note to:", value);
        var updateObj = {};
        updateObj[this.todayDate] = value;
        var self = this;
        this.dbJournalRef.update(updateObj, function () {
            self.parent.parent.flashSaved();
        });
    };
    JournalEntries = __decorate([
        angular2_1.Component({
            selector: 'journal-entries',
            properties: ['journalIdStr : journal-id-str'],
            events: ['initevent'] // NOTE that event names must be all lower case
        }),
        angular2_1.View({
            template: "\n        <table style=\"width:100%\">\n          <tr>\n            <td style=\"width:100px\"> {{todayDate}} </td>\n            <td> \n              <input type=\"text\" class=\"form-control input-sm\" #entryinput\n                     value=\"{{todayNote}}\" (change)=\"updateTodayNote(entryinput.value)\">\n            </td>\n          </tr>\n\n          <tr *ng-for=\"#entry of otherEntries\">\n            <td style=\"width:100px\"> {{entry.noteDate}} </td>\n            <td> {{entry.note}} </td>\n          </tr>\n        </table>\n        ",
            directives: [angular2_1.NgFor, angular2_1.NgIf]
        }), 
        __metadata('design:paramtypes', [])
    ], JournalEntries);
    return JournalEntries;
})();
exports.JournalEntries = JournalEntries;

},{"../assets/js/utils":"/Users/dave/lh2/angular2/test/trjournal/client/assets/js/utils.ts","angular2/angular2":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/angular2.js"}],"/Users/dave/lh2/angular2/test/trjournal/client/app/main.ts":[function(require,module,exports){
/// <reference path="../../typings/angular2/angular2.d.ts" />
/// <reference path="../../typings/firebase/firebase.d.ts" />
/// <reference path="../../typings/requirejs/require.d.ts" />
/// <reference path="./tradesview.ts" />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
require("firebase");
require("bootstrap");
var angular2_1 = require('angular2/angular2');
var OpenTrades = require('./tradesview').OpenTrades;
var Firebase = require('firebase/lib/firebase-web.js');
var TradeJournal = (function () {
    function TradeJournal() {
        console.log("main.ts: in TradeJournal constructor");
        this.fbRef = new Firebase('https://trjournal.firebaseio.com');
        this.openTrades = null;
    }
    // Called via 'initevent' event from OpenTrades component
    TradeJournal.prototype.registerOpenTrades = function (openTradesComp) {
        var self = this;
        self.openTrades = openTradesComp;
        self.prepareDB(function () {
            // Register parent (and other initialization) after DB is ready
            self.openTrades.registerParent(self, self.fbRef);
        });
    };
    // Current user, fixed to Ed for now
    TradeJournal.prototype.userId = function () {
        return "eactracker@gmail.com";
    };
    TradeJournal.prototype.dbUserId = function () {
        // Assume userId is an email address and replace with valid ID chars
        var res = this.userId().replace('@', '-at-').replace('.', '_');
        res = this.validIdChars(res);
        res = res.toLowerCase();
        return res;
    };
    TradeJournal.prototype.prepareDB = function (doneCB) {
        var self = this;
        self.fbRef.once('value', function (data) {
            if (data.child('vocabs').exists()) {
                self.prepareDBForUser(doneCB);
            }
            else {
                var dbSetup = {
                    vocabs: {
                        accounts: {
                            Schwab: 'Schwab',
                            TD: 'TD Ameritrade'
                        },
                        strategies: {
                            MM: 'what MM stands for',
                            CC: 'what CC stands for',
                            'CC-a': 'what CC-a stands for'
                        }
                    }
                };
                self.fbRef.update(dbSetup, function () {
                    self.prepareDBForUser(doneCB);
                });
            }
        });
    };
    TradeJournal.prototype.prepareDBForUser = function (doneCB) {
        var self = this;
        var userIdStr = self.dbUserId();
        self.fbRef.once('value', function (data) {
            if (data.child(userIdStr).exists()) {
                doneCB();
            }
            else {
                var userSetup = {};
                userSetup[userIdStr] = {
                    trades: {
                        'dummy_dummy_dummy': {
                            strategy: 'dummy',
                            expiration: 'dummy',
                            account: 'dummy',
                            openDate: '1900-01-01',
                            status: 'dummy'
                        }
                    },
                    entries: {
                        'dummy_dummy_dummy': {
                            '1900-01-01': 'dummy'
                        },
                    },
                };
                // use set rather than update to init DB
                self.fbRef.update(userSetup, function () {
                    doneCB();
                });
            }
        });
    };
    //
    // Valid ID string helper methods
    //
    // Only allow letters, numbers, underscore and dash characters, so it can 
    // be used for HTML ids, jquery, and Firebase keys
    //
    TradeJournal.prototype.invalidIdChars = function (value) {
        var result = value.replace(/[a-zA-Z0-9_-]/g, '');
        return result;
    };
    TradeJournal.prototype.validIdChars = function (value) {
        var result = value.replace(/[^a-zA-Z0-9_-]/g, '');
        return result;
    };
    //
    // Flash "saved" to inform user of successful save
    //
    TradeJournal.prototype.flashSaved = function () {
        // using jquery
        var $saved = jQuery("#save-indicator");
        $saved.stop(true, true).show();
        $saved.fadeOut(2500);
    };
    TradeJournal = __decorate([
        angular2_1.Component({
            selector: 'my-app'
        }),
        angular2_1.View({
            template: "\n\n        <!-- For now, just show open-trades page -->\n\n        <!-- Later, might switch between different views, \n             like open trades, history/archive, login page -->\n\n        <open-trades (initevent)=\"registerOpenTrades($event)\"> </open-trades>\n\n        <h4 id=\"save-indicator\" class=\"bg-success\" style=\"position:fixed; padding:10px 20px; right:5px; top:5px; display:none\">\n          Saved\n        </h4>\n\n        ",
            directives: [OpenTrades]
        }), 
        __metadata('design:paramtypes', [])
    ], TradeJournal);
    return TradeJournal;
})();
// similar to jQuery(document).ready(), but doesn't work in old IE browsers
document.addEventListener('DOMContentLoaded', function () {
    angular2_1.bootstrap(TradeJournal);
});

},{"./tradesview":"/Users/dave/lh2/angular2/test/trjournal/client/app/tradesview.ts","angular2/angular2":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/angular2.js","bootstrap":"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/dist/js/npm.js","firebase":"/Users/dave/lh2/angular2/test/trjournal/node_modules/firebase/lib/firebase-web.js","firebase/lib/firebase-web.js":"/Users/dave/lh2/angular2/test/trjournal/node_modules/firebase/lib/firebase-web.js"}],"/Users/dave/lh2/angular2/test/trjournal/client/app/tradesview.ts":[function(require,module,exports){
/// <reference path="../../typings/angular2/angular2.d.ts" />
/// <reference path="../../typings/firebase/firebase.d.ts" />
/// <reference path="../../typings/requirejs/require.d.ts" />
/// <reference path="./main.ts" />
/// <reference path="./jentries.ts" />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var angular2_1 = require('angular2/angular2');
var Dropdown = require('./dropdown').Dropdown;
var JournalEntries = require('./jentries').JournalEntries;
var formatDatetime = require('../assets/js/utils').formatDatetime;
var OpenTrades = (function () {
    function OpenTrades() {
        // Only initialize locally instatiated data here 
        // (angular2-dependent data has not yet been fully initialized)
        this.initevent = new angular2_1.EventEmitter();
        this.parent = null; // will be set by the parent
        this.fbRef = null;
        this.trades = [];
        this.userId = '';
        this.jEntryComps = {};
        this.dropdowns = {};
        this.strategyVocab = [];
        this.accountVocab = [];
        this.newTradeErr = "";
    }
    OpenTrades.prototype.onInit = function () {
        // onInit() is a angular2 lifecycle method called 
        // automatically after angular2 has completed initialization
        console.log("onInit: for OpenTrades", this);
        this.initevent.next(this); // send initevent to parent component
    };
    OpenTrades.prototype.registerParent = function (parent, fbRef) {
        this.parent = parent;
        this.fbRef = fbRef;
        this.userId = parent.userId();
        var self = this;
        // Init vocabs for dropdown lists
        self.fbRef.child('vocabs').once('value', function (snapshot) {
            var data = snapshot.val();
            var value;
            var invalidChars;
            for (value in data.accounts) {
                invalidChars = self.invalidIdCharsFriendly(value);
                if (invalidChars) {
                    alert("Warning, invalid characters (" + invalidChars + ") will be removed for 'accounts' vocabulary entry \"" + value + ".\"");
                    value = self.validIdChars(value);
                }
                self.accountVocab.push(value);
            }
            for (value in data.strategies) {
                self.strategyVocab.push(value);
            }
        });
        //
        // Watch for new trades.
        //
        // NOTE, contrary to the event name ("child_added"), this will also
        // trigger once for each child present initially (not JUST when new children are added).
        //
        var dbUserId = self.parent.dbUserId();
        self.fbRef.child(dbUserId).child('trades').on('child_added', function (tradeData, prevChildKey) {
            console.log("registering new trade", tradeData);
            self.handleTradeDisplay(tradeData.val());
        });
    };
    OpenTrades.prototype.handleTradeDisplay = function (tradeObj) {
        if (tradeObj.status !== 'open') {
            return; // ignore, closed trade
        }
        // Insert into list according to openDate
        var i = 0;
        while (i < this.trades.length && tradeObj.openDate >= this.trades[i].openDate) {
            i += 1;
        }
        // Insert into list
        this.trades.splice(i, 0, tradeObj);
    };
    //
    // Track Dropdown child components
    // 
    OpenTrades.prototype.registerDropdown = function (dropdownComp) {
        this.dropdowns[dropdownComp.name] = dropdownComp;
    };
    //
    // Handling creation of new trades
    //
    OpenTrades.prototype.newTrade = function (expiration) {
        var dateStr = formatDatetime(); // uses current date/time by default
        var strategy = this.dropdowns.strategy.currentValue();
        var account = this.dropdowns.account.currentValue();
        //
        // First, validate information for new trade
        //
        this.newTradeErr = "";
        if (!strategy) {
            this.newTradeErr = "Must select a strategy";
        }
        if (!account) {
            if (this.newTradeErr) {
                this.newTradeErr += ", and an account";
            }
            else {
                this.newTradeErr = "Must select an account";
            }
        }
        expiration = jQuery.trim(expiration);
        if (!expiration) {
            if (this.newTradeErr) {
                this.newTradeErr += ", and an expiration";
            }
            else {
                this.newTradeErr = "Must enter an expiration";
            }
        }
        else {
            var invalidChars = this.invalidIdCharsFriendly(expiration);
            if (invalidChars) {
                if (this.newTradeErr) {
                    this.newTradeErr += ", and expiration contains invalid chars (" + invalidChars + ")";
                }
                else {
                    this.newTradeErr = "Expiration contains invalid chars (" + invalidChars + ")";
                }
            }
        }
        if (this.newTradeErr) {
            this.newTradeErr += '.';
            return;
        }
        //
        // Finally, check to be sure this key isn't already being used
        //
        var newTradeObj = {
            strategy: strategy,
            expiration: expiration,
            account: account,
            openDate: dateStr,
            status: 'open'
        };
        var dbUserId = this.parent.dbUserId();
        var tradeIdStr = this.tradeIdStr(newTradeObj);
        var self = this;
        this.fbRef.child(dbUserId).child('trades').once('value', function (data) {
            if (data.child(tradeIdStr).exists()) {
                self.newTradeErr = "Sorry, you have already used this combination of strategy_expiration_account (" + tradeIdStr + ").";
            }
            else {
                //
                // Proceed with adding new trade to DB
                //
                console.log("New trade:", newTradeObj);
                var dbObj = {};
                dbObj[tradeIdStr] = newTradeObj;
                self.fbRef.child(dbUserId).child('trades').update(dbObj, function () {
                    self.parent.flashSaved();
                });
            }
        });
    };
    //
    // Methods to support JournalEntries child components
    //
    OpenTrades.prototype.registerJournalEntries = function (jEntryComp) {
        this.jEntryComps[this.tradeIdStr(jEntryComp)] = jEntryComp;
        jEntryComp.registerParent(this, this.fbRef);
        console.log("registerJournalEntries: JournalEntries info", jEntryComp);
    };
    OpenTrades.prototype.toggleEntries = function (tradeObj) {
        // using jquery to toggle visibility of associated journal entries
        // Unfortunately, can't use slideUp/Down animations on table rows
        var $obj = jQuery('#' + this.journalId(tradeObj));
        if ($obj.is(":visible")) {
            $obj.fadeOut();
        }
        else {
            $obj.fadeIn();
        }
    };
    //
    // Trade ID & journal ID 
    //
    OpenTrades.prototype.tradeId = function (tradeObj) {
        return "trade-" + this.tradeIdStr(tradeObj);
    };
    OpenTrades.prototype.journalId = function (tradeObj) {
        return "journal-" + this.tradeIdStr(tradeObj);
    };
    OpenTrades.prototype.tradeIdStr = function (tradeObj) {
        return jQuery.trim(tradeObj.strategy).toLowerCase() + '_' +
            jQuery.trim(tradeObj.expiration).toLowerCase() + '_' +
            jQuery.trim(tradeObj.account).toLowerCase();
    };
    OpenTrades.prototype.invalidIdCharsFriendly = function (value) {
        var invalidChars = this.parent.invalidIdChars(value);
        var res = '';
        for (var i = 0; i < invalidChars.length; i++) {
            if (i > 0) {
                res += ', ';
            }
            switch (invalidChars[i]) {
                case ' ':
                    res += '<SPACE>';
                    break;
                default:
                    res += invalidChars[i];
            }
        }
        return res;
    };
    OpenTrades.prototype.validIdChars = function (value) {
        return this.parent.validIdChars(value);
    };
    OpenTrades = __decorate([
        angular2_1.Component({
            selector: 'open-trades',
            events: ['initevent'] // NOTE that event names must be all lower case
        }),
        angular2_1.View({
            template: "\n        <div class=\"container\">\n\n          <h2>Open Trades - {{userId}}</h2>\n\n          <div id=\"open-trades\">\n            <table class=\"table-striped table-hover\" style=\"width:100%\">\n              <tr>\n                <th> Strategy   </th>\n                <th> Expiration </th>\n                <th> Opened     </th>\n                <th> Account    </th>\n              </tr>\n              <tbody *ng-for=\"#trade of trades\">\n                <tr style=\"cursor:pointer\" (click)=\"toggleEntries(trade)\">\n                  <td> {{trade.strategy}}   </td>\n                  <td> {{trade.expiration}} </td>\n                  <td> {{trade.openDate}}   </td>\n                  <td> {{trade.account}}    </td>\n                </tr>\n                <tr [id]=\"journalId(trade)\" style=\"display:none\">\n                  <td colspan=\"4\" style=\"padding:10px 0px 10px 30px\">\n                    <!-- \"$event\" parameter name appears to be special here -->\n                    <journal-entries (initevent)=\"registerJournalEntries($event)\" [journal-id-str]=\"tradeIdStr(trade)\">\n                    </journal-entries>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <div id=\"new-trade\">\n            <h3>New Trade:</h3>\n\n            <form class=\"form-horizontal\">\n\n              <div class=\"form-group\">\n                <label class=\"col-sm-2 control-label\" for=\"new-strat\">Strategy</label>\n                <div class=\"col-sm-10\">\n                  <dropdown [options]=\"strategyVocab\" (initevent)=\"registerDropdown($event)\" id=\"new-strat\" name=\"strategy\">\n                  </dropdown>   \n                </div>\n              </div>\n\n              <div class=\"form-group\">\n                <label class=\"col-sm-2 control-label\" for=\"new-exp\">Expiration</label>\n                <div class=\"col-sm-10\">\n                  <input type=\"text\" class=\"form-control input-sm\" id=\"new-exp\" #newexp placeholder=\"Dec14, Jan15-a, ...\">\n                </div>\n              </div>\n\n              <div class=\"form-group\">\n                <label class=\"col-sm-2 control-label\" for=\"new-account\">Account</label>\n                <div class=\"col-sm-10\">\n                  <dropdown [options]=\"accountVocab\" (initevent)=\"registerDropdown($event)\" id=\"new-account\" name=\"account\">\n                  </dropdown>   \n                </div>\n              </div>\n\n              <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                  <button type=\"button\" (click)=\"newTrade(newexp.value)\" class=\"btn btn-default\">\n                    Save New Trade\n                  </button>\n                  <p [hidden]=\"newTradeErr.length === 0\" class=\"text-warning\">{{newTradeErr}}</p>\n                </div>\n              </div>\n\n            </form>\n\n          </div>\n        </div>\n        ",
            directives: [angular2_1.NgFor, Dropdown, JournalEntries]
        }), 
        __metadata('design:paramtypes', [])
    ], OpenTrades);
    return OpenTrades;
})();
exports.OpenTrades = OpenTrades;

},{"../assets/js/utils":"/Users/dave/lh2/angular2/test/trjournal/client/assets/js/utils.ts","./dropdown":"/Users/dave/lh2/angular2/test/trjournal/client/app/dropdown.ts","./jentries":"/Users/dave/lh2/angular2/test/trjournal/client/app/jentries.ts","angular2/angular2":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/angular2.js"}],"/Users/dave/lh2/angular2/test/trjournal/client/assets/js/utils.ts":[function(require,module,exports){
/// <reference path="../../../typings/angular2/angular2.d.ts" />
////////////////////////////////////////////////////////////////////////
//
// String & formatting utilities
//
// Also see underscore.string module
// http://epeli.github.io/underscore.string/#api
//
function formatDatetime(dt) {
    if (dt === undefined) {
        dt = new Date();
    }
    var res = dt.toISOString().slice(0, 19);
    res = res.replace('T', ' ');
    return res;
}
exports.formatDatetime = formatDatetime;
function formatDate(dt) {
    if (dt === undefined) {
        dt = new Date();
    }
    var res = dt.toISOString().slice(0, 10);
    return res;
}
exports.formatDate = formatDate;
function camelCase(s) {
    var parts = s.split('_');
    if (parts.length <= 1) {
        return s;
    }
    var res = parts.shift();
    while (parts.length > 0) {
        res += capitalize(parts.shift());
    }
    return res;
}
exports.camelCase = camelCase;
function capitalize(s) {
    return s[0].toUpperCase() + s.slice(1);
}
exports.capitalize = capitalize;
function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}
exports.endsWith = endsWith;
//
// Format number with comma separators
//
function formatNumber(x) {
    try {
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    }
    catch (err) {
        console.error("GVUtils.formatNumber: %s", err);
        return x;
    }
    // Browser support unclear & may truncate decimal points?
    // return x.toLocaleString();
}
exports.formatNumber = formatNumber;
////////////////////////////////////////////////////////////////////////
//
// Object conversion utilities
//
function convertObjOfObjsToList(obj, options) {
    if (!options) {
        options = {};
    }
    if (!options.keyFieldName) {
        options.keyFieldName = "_object_key_index_";
    }
    var objList = [];
    var indexes = Object.keys(obj);
    var index;
    for (var i = 0; i < indexes.length; i++) {
        index = indexes[i];
        // set the key field on the object too
        obj[index][options.keyFieldName] = index;
        // Add to list
        objList.push(obj[index]);
    }
    // Sort objList by options.keyFieldName
    objList.sort(function (x, y) {
        var v1, v2;
        if (isNumber(x[options.keyFieldName]) && isNumber(y[options.keyFieldName])) {
            v1 = parseFloat(x[options.keyFieldName]);
            v2 = parseFloat(y[options.keyFieldName]);
        }
        else {
            v1 = x[options.keyFieldName];
            v2 = y[options.keyFieldName];
        }
        if (v1 < v2) {
            return -1;
        }
        else {
            return 1;
        }
    });
    return objList;
}
exports.convertObjOfObjsToList = convertObjOfObjsToList;
//
// We have an object full of objects to be listed in CSV file
//
function convertObjOfObjsToCSVStr(obj, options) {
    if (!options) {
        options = {};
    }
    var objList = convertObjOfObjsToList(obj, options);
    var fieldList = options.fieldList;
    if (!fieldList) {
        var fields = {};
        var indexes = Object.keys(obj);
        var index;
        var newFields;
        for (var i = 0; i < indexes.length; i++) {
            index = indexes[i];
            // Check for new fields
            newFields = Object.keys(obj[index]);
            for (var j = 0; j < newFields.length; j++) {
                if (!(newFields[j] in fields)) {
                    fields[newFields[j]] = newFields[j];
                }
            }
        }
        // Convert to fields to list
        var fieldProps = Object.keys(fields);
        fieldList = [];
        for (i = 0; i < fieldProps.length; i++) {
            fieldList.push({ 'prop': fieldProps[i], 'name': fields[fieldProps[i]] });
        }
        // Sort by field title
        fieldList.sort(function (x, y) {
            if (x.name < y.name) {
                return -1;
            }
            else {
                return 1;
            }
        });
    }
    return convertListOfObjsToCSVStr(objList, { fieldList: fieldList });
}
exports.convertObjOfObjsToCSVStr = convertObjOfObjsToCSVStr;
function convertListOfObjsToCSVStr(objList, options) {
    if (!options) {
        options = {};
    }
    if (!options.fieldList) {
        console.error("GVUtils:convertListOfObjsToCSVStr - currently must include fieldList");
        return '';
    }
    function newValue(rowStr, value, type) {
        var res = '';
        if (rowStr.length > 0) {
            res += ','; // be sure not to add spaces... can confuse Excel with commas in quoted fields 
        }
        if (value === undefined || value === null) {
            if (type === 'int') {
                return res + '0';
            }
            else {
                return res + '';
            }
        }
        else if (isNumber(value)) {
            return res + value;
        }
        else {
            value = value.replace(/"/g, '""'); // escape double-quotes with two double-quotes
            return res + '"' + value + '"';
        }
    }
    function newRow(rowStr) {
        return rowStr + '\n';
    }
    var fields = options.fieldList;
    var res = '';
    var row;
    var propName;
    // Header
    row = '';
    for (var i = 0; i < fields.length; i++) {
        row += newValue(row, fields[i].name);
    }
    res += newRow(row);
    // Each record
    for (var j = 0; j < objList.length; j++) {
        row = '';
        for (var i = 0; i < fields.length; i++) {
            propName = fields[i].prop;
            row += newValue(row, objList[j][propName], fields[i].type);
        }
        res += newRow(row);
    }
    return res;
}
exports.convertListOfObjsToCSVStr = convertListOfObjsToCSVStr;
////////////////////////////////////////////////////////////////////////
//
// Object utilities
//
//
// Clone object, avoiding inherited properties
//
// BTW, an alternate simple method is: JSON.parse(JSON.stringify(obj));
//
function clone(obj, ignores) {
    var copy;
    var newItem;
    var props;
    var prop;
    var i;
    // Always set function values to null across api
    if (typeof (obj) == "function") {
        return null; //  null rather than undefined so, e.g., objects are set with keys but values set to null
    }
    // Simple types
    if (null == obj || "object" != typeof obj) {
        return obj;
    }
    // Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }
    // Arrays
    if (Array.isArray(obj)) {
        copy = [];
        for (i = 0; i < obj.length; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }
    // Plain objects
    if (obj instanceof Object) {
        copy = {};
        props = Object.keys(obj);
        for (i = 0; i < props.length; i++) {
            prop = props[i];
            if (!ignores || ignores.indexOf(prop) === -1) {
                newItem = clone(obj[prop]);
                if (newItem !== undefined) {
                    copy[prop] = newItem;
                }
            }
        }
        return copy;
    }
    throw new Error("Unable to copy obj! Its type isn't supported.");
}
exports.clone = clone;
////////////////////////////////////////////////////////////////////////
//
// Miscellaneous
//
//
// check whether a valid number
//
function isNumber(n) {
    if (isNaN(parseFloat(n))) {
        return false;
    }
    if (!isFinite(n)) {
        return false;
    }
    return true;
}
exports.isNumber = isNumber;
//
// Random integer
//
function randomInt(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
}
exports.randomInt = randomInt;
function random(min, max) {
    return (Math.random() * (max - min)) + min;
}
exports.random = random;
//
// Beep sound
// 
// Alternatively, for a beep, make a sound file and play that!
//   (new Audio("file.wav")).play();
function beep() {
    var snd = new Audio("data:audio/wav;base64,//uQRAAAAWMSLwUIYAAsYkXgoQwAEaYLWfkWgAI0wWs/ItAAAGDgYtAgAyN+QWaAAihwMWm4G8QQRDiMcCBcH3Cc+CDv/7xA4Tvh9Rz/y8QADBwMWgQAZG/ILNAARQ4GLTcDeIIIhxGOBAuD7hOfBB3/94gcJ3w+o5/5eIAIAAAVwWgQAVQ2ORaIQwEMAJiDg95G4nQL7mQVWI6GwRcfsZAcsKkJvxgxEjzFUgfHoSQ9Qq7KNwqHwuB13MA4a1q/DmBrHgPcmjiGoh//EwC5nGPEmS4RcfkVKOhJf+WOgoxJclFz3kgn//dBA+ya1GhurNn8zb//9NNutNuhz31f////9vt///z+IdAEAAAK4LQIAKobHItEIYCGAExBwe8jcToF9zIKrEdDYIuP2MgOWFSE34wYiR5iqQPj0JIeoVdlG4VD4XA67mAcNa1fhzA1jwHuTRxDUQ//iYBczjHiTJcIuPyKlHQkv/LHQUYkuSi57yQT//uggfZNajQ3Vmz+Zt//+mm3Wm3Q576v////+32///5/EOgAAADVghQAAAAA//uQZAUAB1WI0PZugAAAAAoQwAAAEk3nRd2qAAAAACiDgAAAAAAABCqEEQRLCgwpBGMlJkIz8jKhGvj4k6jzRnqasNKIeoh5gI7BJaC1A1AoNBjJgbyApVS4IDlZgDU5WUAxEKDNmmALHzZp0Fkz1FMTmGFl1FMEyodIavcCAUHDWrKAIA4aa2oCgILEBupZgHvAhEBcZ6joQBxS76AgccrFlczBvKLC0QI2cBoCFvfTDAo7eoOQInqDPBtvrDEZBNYN5xwNwxQRfw8ZQ5wQVLvO8OYU+mHvFLlDh05Mdg7BT6YrRPpCBznMB2r//xKJjyyOh+cImr2/4doscwD6neZjuZR4AgAABYAAAABy1xcdQtxYBYYZdifkUDgzzXaXn98Z0oi9ILU5mBjFANmRwlVJ3/6jYDAmxaiDG3/6xjQQCCKkRb/6kg/wW+kSJ5//rLobkLSiKmqP/0ikJuDaSaSf/6JiLYLEYnW/+kXg1WRVJL/9EmQ1YZIsv/6Qzwy5qk7/+tEU0nkls3/zIUMPKNX/6yZLf+kFgAfgGyLFAUwY//uQZAUABcd5UiNPVXAAAApAAAAAE0VZQKw9ISAAACgAAAAAVQIygIElVrFkBS+Jhi+EAuu+lKAkYUEIsmEAEoMeDmCETMvfSHTGkF5RWH7kz/ESHWPAq/kcCRhqBtMdokPdM7vil7RG98A2sc7zO6ZvTdM7pmOUAZTnJW+NXxqmd41dqJ6mLTXxrPpnV8avaIf5SvL7pndPvPpndJR9Kuu8fePvuiuhorgWjp7Mf/PRjxcFCPDkW31srioCExivv9lcwKEaHsf/7ow2Fl1T/9RkXgEhYElAoCLFtMArxwivDJJ+bR1HTKJdlEoTELCIqgEwVGSQ+hIm0NbK8WXcTEI0UPoa2NbG4y2K00JEWbZavJXkYaqo9CRHS55FcZTjKEk3NKoCYUnSQ0rWxrZbFKbKIhOKPZe1cJKzZSaQrIyULHDZmV5K4xySsDRKWOruanGtjLJXFEmwaIbDLX0hIPBUQPVFVkQkDoUNfSoDgQGKPekoxeGzA4DUvnn4bxzcZrtJyipKfPNy5w+9lnXwgqsiyHNeSVpemw4bWb9psYeq//uQZBoABQt4yMVxYAIAAAkQoAAAHvYpL5m6AAgAACXDAAAAD59jblTirQe9upFsmZbpMudy7Lz1X1DYsxOOSWpfPqNX2WqktK0DMvuGwlbNj44TleLPQ+Gsfb+GOWOKJoIrWb3cIMeeON6lz2umTqMXV8Mj30yWPpjoSa9ujK8SyeJP5y5mOW1D6hvLepeveEAEDo0mgCRClOEgANv3B9a6fikgUSu/DmAMATrGx7nng5p5iimPNZsfQLYB2sDLIkzRKZOHGAaUyDcpFBSLG9MCQALgAIgQs2YunOszLSAyQYPVC2YdGGeHD2dTdJk1pAHGAWDjnkcLKFymS3RQZTInzySoBwMG0QueC3gMsCEYxUqlrcxK6k1LQQcsmyYeQPdC2YfuGPASCBkcVMQQqpVJshui1tkXQJQV0OXGAZMXSOEEBRirXbVRQW7ugq7IM7rPWSZyDlM3IuNEkxzCOJ0ny2ThNkyRai1b6ev//3dzNGzNb//4uAvHT5sURcZCFcuKLhOFs8mLAAEAt4UWAAIABAAAAAB4qbHo0tIjVkUU//uQZAwABfSFz3ZqQAAAAAngwAAAE1HjMp2qAAAAACZDgAAAD5UkTE1UgZEUExqYynN1qZvqIOREEFmBcJQkwdxiFtw0qEOkGYfRDifBui9MQg4QAHAqWtAWHoCxu1Yf4VfWLPIM2mHDFsbQEVGwyqQoQcwnfHeIkNt9YnkiaS1oizycqJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=");
    snd.play();
}
exports.beep = beep;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/angular2.js":[function(require,module,exports){
'use strict';function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(require('./core'));
__export(require('./profile'));
__export(require('./lifecycle_hooks'));
__export(require('./bootstrap'));

},{"./bootstrap":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/bootstrap.js","./core":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/core.js","./lifecycle_hooks":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/lifecycle_hooks.js","./profile":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/profile.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/bootstrap.js":[function(require,module,exports){
'use strict';/**
 * This file is only used for dart applications and for internal examples
 * that compile with both JavaScript and Dart.
 */
var bootstrap_1 = require('angular2/src/core/bootstrap');
exports.bootstrap = bootstrap_1.bootstrap;

},{"angular2/src/core/bootstrap":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/bootstrap.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/core.js":[function(require,module,exports){
'use strict';function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
/**
 * @module
 * @description
 * Starting point to import all public core APIs.
 */
__export(require('./src/core/metadata'));
__export(require('./src/core/util'));
__export(require('./src/core/di'));
__export(require('./src/core/pipes'));
__export(require('./src/core/facade'));
__export(require('./src/core/application'));
__export(require('./src/core/bootstrap'));
__export(require('./src/core/services'));
__export(require('./src/core/linker'));
__export(require('./src/core/lifecycle'));
__export(require('./src/core/zone'));
__export(require('./src/core/render'));
__export(require('./src/core/directives'));
__export(require('./src/core/forms'));
__export(require('./src/core/debug'));
__export(require('./src/core/change_detection'));

},{"./src/core/application":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/application.js","./src/core/bootstrap":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/bootstrap.js","./src/core/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection.js","./src/core/debug":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/debug.js","./src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","./src/core/directives":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/directives.js","./src/core/facade":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade.js","./src/core/forms":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms.js","./src/core/lifecycle":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/lifecycle.js","./src/core/linker":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker.js","./src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js","./src/core/pipes":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes.js","./src/core/render":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render.js","./src/core/services":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/services.js","./src/core/util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/util.js","./src/core/zone":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/zone.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/lifecycle_hooks.js":[function(require,module,exports){
'use strict';/**
 * @module
 * @description
 * Defines interfaces to be implemented by directives when they need to hook into the change
 * detection mechanism.
 */

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/Observable.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _Subscriber = require('./Subscriber');

var _Subscriber2 = _interopRequireDefault(_Subscriber);

var _utilRoot = require('./util/root');

var _utilSymbol_observable = require('./util/Symbol_observable');

var _utilSymbol_observable2 = _interopRequireDefault(_utilSymbol_observable);

/**
 * A representation of any set of values over any amount of time. This the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */

var Observable = (function () {
    /**
     * @constructor
     * @param {Function} subscribe the function that is
     * called when the Observable is initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or `complete` can be called to notify
     * of a successful completion.
     */

    function Observable(subscribe) {
        _classCallCheck(this, Observable);

        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }

    // HACK: Since TypeScript inherits static properties too, we have to
    // fight against TypeScript here so Subject can have a different static create signature
    /**
     * @static
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @returns {Observable} a new cold observable
     * @description creates a new cold Observable by calling the Observable constructor
     */

    /**
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @returns {Observable} a new observable with the Operator applied
     * @description creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     */

    Observable.prototype.lift = function lift(operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };

    /**
     * @method Symbol.observable
     * @returns {Observable} this instance of the observable
     * @description an interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     */

    Observable.prototype[_utilSymbol_observable2['default']] = function () {
        return this;
    };

    /**
     * @method subscribe
     * @param {Observer|Function} observerOrNext (optional) either an observer defining all functions to be called,
     *  or the first of three possible handlers, which is the handler for each value emitted from the observable.
     * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,
     *  the error will be thrown as unhandled
     * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.
     * @returns {Subscription} a subscription reference to the registered handlers
     * @description registers handlers for handling emitted values, error and completions from the observable, and
     *  executes the observable's subscriber function, which will take action to set up the underlying data stream
     */

    Observable.prototype.subscribe = function subscribe(observerOrNext, error, complete) {
        var subscriber = undefined;
        if (observerOrNext && typeof observerOrNext === "object") {
            if (observerOrNext instanceof _Subscriber2['default']) {
                subscriber = observerOrNext;
            } else {
                subscriber = new _Subscriber2['default'](observerOrNext);
            }
        } else {
            var next = observerOrNext;
            subscriber = _Subscriber2['default'].create(next, error, complete);
        }
        subscriber.add(this._subscribe(subscriber));
        return subscriber;
    };

    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} PromiseCtor? a constructor function used to instantiate the Promise
     * @returns {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */

    Observable.prototype.forEach = function forEach(next, PromiseCtor) {
        var _this = this;

        if (!PromiseCtor) {
            if (_utilRoot.root.Rx && _utilRoot.root.Rx.config && _utilRoot.root.Rx.config.Promise) {
                PromiseCtor = _utilRoot.root.Rx.config.Promise;
            } else if (_utilRoot.root.Promise) {
                PromiseCtor = _utilRoot.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            _this.subscribe(next, reject, resolve);
        });
    };

    Observable.prototype._subscribe = function _subscribe(subscriber) {
        return this.source._subscribe(this.operator.call(subscriber));
    };

    return Observable;
})();

exports['default'] = Observable;
Observable.create = function (subscribe) {
    return new Observable(subscribe);
};
module.exports = exports['default'];
},{"./Subscriber":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/Subscriber.js","./util/Symbol_observable":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/util/Symbol_observable.js","./util/root":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/util/root.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/Subject.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Observable2 = require('./Observable');

var _Observable3 = _interopRequireDefault(_Observable2);

var _Subscriber = require('./Subscriber');

var _Subscriber2 = _interopRequireDefault(_Subscriber);

var _Subscription = require('./Subscription');

var _Subscription2 = _interopRequireDefault(_Subscription);

var _subjectsSubjectSubscription = require('./subjects/SubjectSubscription');

var _subjectsSubjectSubscription2 = _interopRequireDefault(_subjectsSubjectSubscription);

var subscriptionAdd = _Subscription2['default'].prototype.add;
var subscriptionRemove = _Subscription2['default'].prototype.remove;
var subscriptionUnsubscribe = _Subscription2['default'].prototype.unsubscribe;
var subscriberNext = _Subscriber2['default'].prototype.next;
var subscriberError = _Subscriber2['default'].prototype.error;
var subscriberComplete = _Subscriber2['default'].prototype.complete;
var _subscriberNext = _Subscriber2['default'].prototype._next;
var _subscriberError = _Subscriber2['default'].prototype._error;
var _subscriberComplete = _Subscriber2['default'].prototype._complete;

var Subject = (function (_Observable) {
    _inherits(Subject, _Observable);

    function Subject() {
        _classCallCheck(this, Subject);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        _Observable.call.apply(_Observable, [this].concat(args));
        this.observers = [];
        this.isUnsubscribed = false;
        this.dispatching = false;
        this.errorSignal = false;
        this.completeSignal = false;
    }

    Subject.create = function create(source, destination) {
        return new BidirectionalSubject(source, destination);
    };

    Subject.prototype.lift = function lift(operator) {
        var subject = new BidirectionalSubject(this, this.destination || this);
        subject.operator = operator;
        return subject;
    };

    Subject.prototype._subscribe = function _subscribe(subscriber) {
        if (subscriber.isUnsubscribed) {
            return;
        } else if (this.errorSignal) {
            subscriber.error(this.errorInstance);
            return;
        } else if (this.completeSignal) {
            subscriber.complete();
            return;
        } else if (this.isUnsubscribed) {
            throw new Error("Cannot subscribe to a disposed Subject.");
        }
        this.observers.push(subscriber);
        return new _subjectsSubjectSubscription2['default'](this, subscriber);
    };

    Subject.prototype.add = function add(subscription) {
        subscriptionAdd.call(this, subscription);
    };

    Subject.prototype.remove = function remove(subscription) {
        subscriptionRemove.call(this, subscription);
    };

    Subject.prototype.unsubscribe = function unsubscribe() {
        this.observers = void 0;
        subscriptionUnsubscribe.call(this);
    };

    Subject.prototype.next = function next(value) {
        if (this.isUnsubscribed) {
            return;
        }
        this.dispatching = true;
        this._next(value);
        this.dispatching = false;
        if (this.errorSignal) {
            this.error(this.errorInstance);
        } else if (this.completeSignal) {
            this.complete();
        }
    };

    Subject.prototype.error = function error(_error) {
        if (this.isUnsubscribed || this.completeSignal) {
            return;
        }
        this.errorSignal = true;
        this.errorInstance = _error;
        if (this.dispatching) {
            return;
        }
        this._error(_error);
        this.unsubscribe();
    };

    Subject.prototype.complete = function complete() {
        if (this.isUnsubscribed || this.errorSignal) {
            return;
        }
        this.completeSignal = true;
        if (this.dispatching) {
            return;
        }
        this._complete();
        this.unsubscribe();
    };

    Subject.prototype._next = function _next(value) {
        var index = -1;
        var observers = this.observers.slice(0);
        var len = observers.length;
        while (++index < len) {
            observers[index].next(value);
        }
    };

    Subject.prototype._error = function _error(error) {
        var index = -1;
        var observers = this.observers;
        var len = observers.length;
        // optimization -- block next, complete, and unsubscribe while dispatching
        this.observers = void 0;
        this.isUnsubscribed = true;
        while (++index < len) {
            observers[index].error(error);
        }
        this.isUnsubscribed = false;
    };

    Subject.prototype._complete = function _complete() {
        var index = -1;
        var observers = this.observers;
        var len = observers.length;
        // optimization -- block next, complete, and unsubscribe while dispatching
        this.observers = void 0; // optimization
        this.isUnsubscribed = true;
        while (++index < len) {
            observers[index].complete();
        }
        this.isUnsubscribed = false;
    };

    return Subject;
})(_Observable3['default']);

exports['default'] = Subject;

var BidirectionalSubject = (function (_Subject) {
    _inherits(BidirectionalSubject, _Subject);

    function BidirectionalSubject(source, destination) {
        _classCallCheck(this, BidirectionalSubject);

        _Subject.call(this);
        this.source = source;
        this.destination = destination;
    }

    BidirectionalSubject.prototype._subscribe = function _subscribe(subscriber) {
        var operator = this.operator;
        return this.source._subscribe.call(this.source, operator ? operator.call(subscriber) : subscriber);
    };

    BidirectionalSubject.prototype.next = function next(x) {
        subscriberNext.call(this, x);
    };

    BidirectionalSubject.prototype.error = function error(e) {
        subscriberError.call(this, e);
    };

    BidirectionalSubject.prototype.complete = function complete() {
        subscriberComplete.call(this);
    };

    BidirectionalSubject.prototype._next = function _next(x) {
        _subscriberNext.call(this, x);
    };

    BidirectionalSubject.prototype._error = function _error(e) {
        _subscriberError.call(this, e);
    };

    BidirectionalSubject.prototype._complete = function _complete() {
        _subscriberComplete.call(this);
    };

    return BidirectionalSubject;
})(Subject);

module.exports = exports['default'];
},{"./Observable":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/Observable.js","./Subscriber":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/Subscriber.js","./Subscription":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/Subscription.js","./subjects/SubjectSubscription":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/subjects/SubjectSubscription.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/Subscriber.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _utilNoop = require('./util/noop');

var _utilNoop2 = _interopRequireDefault(_utilNoop);

var _utilThrowError = require('./util/throwError');

var _utilThrowError2 = _interopRequireDefault(_utilThrowError);

var _utilTryOrOnError = require('./util/tryOrOnError');

var _utilTryOrOnError2 = _interopRequireDefault(_utilTryOrOnError);

var _Subscription2 = require('./Subscription');

var _Subscription3 = _interopRequireDefault(_Subscription2);

var Subscriber = (function (_Subscription) {
    _inherits(Subscriber, _Subscription);

    function Subscriber(destination) {
        _classCallCheck(this, Subscriber);

        _Subscription.call(this);
        this._isUnsubscribed = false;
        this.destination = destination;
        if (!destination) {
            return;
        }
        var subscription = destination._subscription;
        if (subscription) {
            this._subscription = subscription;
        } else if (destination instanceof Subscriber) {
            this._subscription = destination;
        }
    }

    Subscriber.create = function create(next, error, complete) {
        var subscriber = new Subscriber();
        subscriber._next = typeof next === "function" && _utilTryOrOnError2['default'](next) || _utilNoop2['default'];
        subscriber._error = typeof error === "function" && error || _utilThrowError2['default'];
        subscriber._complete = typeof complete === "function" && complete || _utilNoop2['default'];
        return subscriber;
    };

    Subscriber.prototype._next = function _next(value) {
        this.destination.next(value);
    };

    Subscriber.prototype._error = function _error(err) {
        this.destination.error(err);
    };

    Subscriber.prototype._complete = function _complete() {
        this.destination.complete();
    };

    Subscriber.prototype.add = function add(sub) {
        // route add to the shared Subscription if it exists
        var _subscription = this._subscription;
        if (_subscription) {
            _subscription.add(sub);
        } else {
            _Subscription.prototype.add.call(this, sub);
        }
    };

    Subscriber.prototype.remove = function remove(sub) {
        // route remove to the shared Subscription if it exists
        if (this._subscription) {
            this._subscription.remove(sub);
        } else {
            _Subscription.prototype.remove.call(this, sub);
        }
    };

    Subscriber.prototype.unsubscribe = function unsubscribe() {
        if (this._isUnsubscribed) {
            return;
        } else if (this._subscription) {
            this._isUnsubscribed = true;
        } else {
            _Subscription.prototype.unsubscribe.call(this);
        }
    };

    Subscriber.prototype.next = function next(value) {
        if (!this.isUnsubscribed) {
            this._next(value);
        }
    };

    Subscriber.prototype.error = function error(_error2) {
        if (!this.isUnsubscribed) {
            this._error(_error2);
            this.unsubscribe();
        }
    };

    Subscriber.prototype.complete = function complete() {
        if (!this.isUnsubscribed) {
            this._complete();
            this.unsubscribe();
        }
    };

    _createClass(Subscriber, [{
        key: 'isUnsubscribed',
        get: function get() {
            var subscription = this._subscription;
            if (subscription) {
                // route to the shared Subscription if it exists
                return this._isUnsubscribed || subscription.isUnsubscribed;
            } else {
                return this._isUnsubscribed;
            }
        },
        set: function set(value) {
            var subscription = this._subscription;
            if (subscription) {
                // route to the shared Subscription if it exists
                subscription.isUnsubscribed = Boolean(value);
            } else {
                this._isUnsubscribed = Boolean(value);
            }
        }
    }]);

    return Subscriber;
})(_Subscription3['default']);

exports['default'] = Subscriber;
module.exports = exports['default'];
},{"./Subscription":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/Subscription.js","./util/noop":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/util/noop.js","./util/throwError":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/util/throwError.js","./util/tryOrOnError":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/util/tryOrOnError.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/Subscription.js":[function(require,module,exports){
"use strict";

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Subscription = (function () {
    function Subscription(_unsubscribe) {
        _classCallCheck(this, Subscription);

        this.isUnsubscribed = false;
        if (_unsubscribe) {
            this._unsubscribe = _unsubscribe;
        }
    }

    Subscription.prototype._unsubscribe = function _unsubscribe() {};

    Subscription.prototype.unsubscribe = function unsubscribe() {
        if (this.isUnsubscribed) {
            return;
        }
        this.isUnsubscribed = true;
        var unsubscribe = this._unsubscribe;
        var subscriptions = this._subscriptions;
        this._subscriptions = void 0;
        if (unsubscribe) {
            unsubscribe.call(this);
        }
        if (subscriptions != null) {
            var index = -1;
            var len = subscriptions.length;
            while (++index < len) {
                subscriptions[index].unsubscribe();
            }
        }
    };

    Subscription.prototype.add = function add(subscription) {
        // return early if:
        //  1. the subscription is null
        //  2. we're attempting to add our this
        //  3. we're attempting to add the static `empty` Subscription
        if (!subscription || subscription === this || subscription === Subscription.EMPTY) {
            return;
        }
        var sub = subscription;
        switch (typeof subscription) {
            case "function":
                sub = new Subscription(subscription);
            case "object":
                if (sub.isUnsubscribed || typeof sub.unsubscribe !== "function") {
                    break;
                } else if (this.isUnsubscribed) {
                    sub.unsubscribe();
                } else {
                    var subscriptions = this._subscriptions || (this._subscriptions = []);
                    subscriptions.push(sub);
                }
                break;
            default:
                throw new Error('Unrecognized subscription ' + subscription + ' added to Subscription.');
        }
    };

    Subscription.prototype.remove = function remove(subscription) {
        // return early if:
        //  1. the subscription is null
        //  2. we're attempting to remove ourthis
        //  3. we're attempting to remove the static `empty` Subscription
        if (subscription == null || subscription === this || subscription === Subscription.EMPTY) {
            return;
        }
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };

    return Subscription;
})();

exports["default"] = Subscription;

Subscription.EMPTY = (function (empty) {
    empty.isUnsubscribed = true;
    return empty;
})(new Subscription());
module.exports = exports["default"];
},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/subjects/SubjectSubscription.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Subscription2 = require('../Subscription');

var _Subscription3 = _interopRequireDefault(_Subscription2);

var _Subscriber = require('../Subscriber');

var _Subscriber2 = _interopRequireDefault(_Subscriber);

var SubjectSubscription = (function (_Subscription) {
    _inherits(SubjectSubscription, _Subscription);

    function SubjectSubscription(subject, observer) {
        _classCallCheck(this, SubjectSubscription);

        _Subscription.call(this);
        this.subject = subject;
        this.observer = observer;
        this.isUnsubscribed = false;
    }

    SubjectSubscription.prototype.unsubscribe = function unsubscribe() {
        if (this.isUnsubscribed) {
            return;
        }
        this.isUnsubscribed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = void 0;
        if (!observers || observers.length === 0 || subject.isUnsubscribed) {
            return;
        }
        if (this.observer instanceof _Subscriber2['default']) {
            this.observer.unsubscribe();
        }
        var subscriberIndex = observers.indexOf(this.observer);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };

    return SubjectSubscription;
})(_Subscription3['default']);

exports['default'] = SubjectSubscription;
module.exports = exports['default'];
},{"../Subscriber":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/Subscriber.js","../Subscription":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/Subscription.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/util/Symbol_observable.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _root = require('./root');

if (!_root.root.Symbol) {
    _root.root.Symbol = {};
}
if (!_root.root.Symbol.observable) {
    if (typeof _root.root.Symbol['for'] === 'function') {
        _root.root.Symbol.observable = _root.root.Symbol['for']('observable');
    } else {
        _root.root.Symbol.observable = '@@observable';
    }
}
exports['default'] = _root.root.Symbol.observable;
module.exports = exports['default'];
},{"./root":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/util/root.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/util/noop.js":[function(require,module,exports){
"use strict";

exports.__esModule = true;
exports["default"] = noop;

function noop() {}

module.exports = exports["default"];
},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/util/root.js":[function(require,module,exports){
(function (global){
'use strict';

exports.__esModule = true;
var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
};
var root = objectTypes[typeof self] && self || objectTypes[typeof window] && window;
exports.root = root;
var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
var freeGlobal = objectTypes[typeof global] && global;
if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    exports.root = root = freeGlobal;
}
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/util/throwError.js":[function(require,module,exports){
"use strict";

exports.__esModule = true;
exports["default"] = throwError;

function throwError(e) {
  throw e;
}

module.exports = exports["default"];
},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/util/tryOrOnError.js":[function(require,module,exports){
"use strict";

exports.__esModule = true;
exports["default"] = tryOrOnError;

function tryOrOnError(target) {
    function tryCatcher() {
        try {
            tryCatcher.target.apply(this, arguments);
        } catch (e) {
            this.error(e);
        }
    }
    tryCatcher.target = target;
    return tryCatcher;
}

module.exports = exports["default"];
},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/profile.js":[function(require,module,exports){
'use strict';var profile_1 = require('./src/core/profile/profile');
exports.wtfCreateScope = profile_1.wtfCreateScope;
exports.wtfLeave = profile_1.wtfLeave;
exports.wtfStartTimeRange = profile_1.wtfStartTimeRange;
exports.wtfEndTimeRange = profile_1.wtfEndTimeRange;

},{"./src/core/profile/profile":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/profile/profile.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/render.js":[function(require,module,exports){
'use strict';function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
/**
 * This file is only used for dart applications and for internal examples
 * that compile with both JavaScript and Dart.
 *
 * JavaScript users should import from angular2/core.
 */
__export(require('./src/core/render'));

},{"./src/core/render":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/animate/animation.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var math_1 = require('angular2/src/core/facade/math');
var util_1 = require('angular2/src/core/render/dom/util');
var collection_1 = require('angular2/src/core/facade/collection');
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var Animation = (function () {
    /**
     * Stores the start time and starts the animation
     * @param element
     * @param data
     * @param browserDetails
     */
    function Animation(element, data, browserDetails) {
        var _this = this;
        this.element = element;
        this.data = data;
        this.browserDetails = browserDetails;
        /** functions to be called upon completion */
        this.callbacks = [];
        /** functions for removing event listeners */
        this.eventClearFunctions = [];
        /** flag used to track whether or not the animation has finished */
        this.completed = false;
        this._stringPrefix = '';
        this.startTime = lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now());
        this._stringPrefix = dom_adapter_1.DOM.getAnimationPrefix();
        this.setup();
        this.wait(function (timestamp) { return _this.start(); });
    }
    Object.defineProperty(Animation.prototype, "totalTime", {
        /** total amount of time that the animation should take including delay */
        get: function () {
            var delay = this.computedDelay != null ? this.computedDelay : 0;
            var duration = this.computedDuration != null ? this.computedDuration : 0;
            return delay + duration;
        },
        enumerable: true,
        configurable: true
    });
    Animation.prototype.wait = function (callback) {
        // Firefox requires 2 frames for some reason
        this.browserDetails.raf(callback, 2);
    };
    /**
     * Sets up the initial styles before the animation is started
     */
    Animation.prototype.setup = function () {
        if (this.data.fromStyles != null)
            this.applyStyles(this.data.fromStyles);
        if (this.data.duration != null)
            this.applyStyles({ 'transitionDuration': this.data.duration.toString() + 'ms' });
        if (this.data.delay != null)
            this.applyStyles({ 'transitionDelay': this.data.delay.toString() + 'ms' });
    };
    /**
     * After the initial setup has occurred, this method adds the animation styles
     */
    Animation.prototype.start = function () {
        this.addClasses(this.data.classesToAdd);
        this.addClasses(this.data.animationClasses);
        this.removeClasses(this.data.classesToRemove);
        if (this.data.toStyles != null)
            this.applyStyles(this.data.toStyles);
        var computedStyles = dom_adapter_1.DOM.getComputedStyle(this.element);
        this.computedDelay =
            math_1.Math.max(this.parseDurationString(computedStyles.getPropertyValue(this._stringPrefix + 'transition-delay')), this.parseDurationString(this.element.style.getPropertyValue(this._stringPrefix + 'transition-delay')));
        this.computedDuration = math_1.Math.max(this.parseDurationString(computedStyles.getPropertyValue(this._stringPrefix + 'transition-duration')), this.parseDurationString(this.element.style.getPropertyValue(this._stringPrefix + 'transition-duration')));
        this.addEvents();
    };
    /**
     * Applies the provided styles to the element
     * @param styles
     */
    Animation.prototype.applyStyles = function (styles) {
        var _this = this;
        collection_1.StringMapWrapper.forEach(styles, function (value, key) {
            var dashCaseKey = util_1.camelCaseToDashCase(key);
            if (lang_1.isPresent(dom_adapter_1.DOM.getStyle(_this.element, dashCaseKey))) {
                dom_adapter_1.DOM.setStyle(_this.element, dashCaseKey, value.toString());
            }
            else {
                dom_adapter_1.DOM.setStyle(_this.element, _this._stringPrefix + dashCaseKey, value.toString());
            }
        });
    };
    /**
     * Adds the provided classes to the element
     * @param classes
     */
    Animation.prototype.addClasses = function (classes) {
        for (var i = 0, len = classes.length; i < len; i++)
            dom_adapter_1.DOM.addClass(this.element, classes[i]);
    };
    /**
     * Removes the provided classes from the element
     * @param classes
     */
    Animation.prototype.removeClasses = function (classes) {
        for (var i = 0, len = classes.length; i < len; i++)
            dom_adapter_1.DOM.removeClass(this.element, classes[i]);
    };
    /**
     * Adds events to track when animations have finished
     */
    Animation.prototype.addEvents = function () {
        var _this = this;
        if (this.totalTime > 0) {
            this.eventClearFunctions.push(dom_adapter_1.DOM.onAndCancel(this.element, dom_adapter_1.DOM.getTransitionEnd(), function (event) { return _this.handleAnimationEvent(event); }));
        }
        else {
            this.handleAnimationCompleted();
        }
    };
    Animation.prototype.handleAnimationEvent = function (event) {
        var elapsedTime = math_1.Math.round(event.elapsedTime * 1000);
        if (!this.browserDetails.elapsedTimeIncludesDelay)
            elapsedTime += this.computedDelay;
        event.stopPropagation();
        if (elapsedTime >= this.totalTime)
            this.handleAnimationCompleted();
    };
    /**
     * Runs all animation callbacks and removes temporary classes
     */
    Animation.prototype.handleAnimationCompleted = function () {
        this.removeClasses(this.data.animationClasses);
        this.callbacks.forEach(function (callback) { return callback(); });
        this.callbacks = [];
        this.eventClearFunctions.forEach(function (fn) { return fn(); });
        this.eventClearFunctions = [];
        this.completed = true;
    };
    /**
     * Adds animation callbacks to be called upon completion
     * @param callback
     * @returns {Animation}
     */
    Animation.prototype.onComplete = function (callback) {
        if (this.completed) {
            callback();
        }
        else {
            this.callbacks.push(callback);
        }
        return this;
    };
    /**
     * Converts the duration string to the number of milliseconds
     * @param duration
     * @returns {number}
     */
    Animation.prototype.parseDurationString = function (duration) {
        var maxValue = 0;
        // duration must have at least 2 characters to be valid. (number + type)
        if (duration == null || duration.length < 2) {
            return maxValue;
        }
        else if (duration.substring(duration.length - 2) == 'ms') {
            var value = lang_1.NumberWrapper.parseInt(this.stripLetters(duration), 10);
            if (value > maxValue)
                maxValue = value;
        }
        else if (duration.substring(duration.length - 1) == 's') {
            var ms = lang_1.NumberWrapper.parseFloat(this.stripLetters(duration)) * 1000;
            var value = math_1.Math.floor(ms);
            if (value > maxValue)
                maxValue = value;
        }
        return maxValue;
    };
    /**
     * Strips the letters from the duration string
     * @param str
     * @returns {string}
     */
    Animation.prototype.stripLetters = function (str) {
        return lang_1.StringWrapper.replaceAll(str, lang_1.RegExpWrapper.create('[^0-9]+$', ''), '');
    };
    return Animation;
})();
exports.Animation = Animation;

},{"angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/facade/math":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/math.js","angular2/src/core/render/dom/util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/util.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/animate/animation_builder.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
var css_animation_builder_1 = require('./css_animation_builder');
var browser_details_1 = require('./browser_details');
var AnimationBuilder = (function () {
    /**
     * Used for DI
     * @param browserDetails
     */
    function AnimationBuilder(browserDetails) {
        this.browserDetails = browserDetails;
    }
    /**
     * Creates a new CSS Animation
     * @returns {CssAnimationBuilder}
     */
    AnimationBuilder.prototype.css = function () { return new css_animation_builder_1.CssAnimationBuilder(this.browserDetails); };
    AnimationBuilder = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [browser_details_1.BrowserDetails])
    ], AnimationBuilder);
    return AnimationBuilder;
})();
exports.AnimationBuilder = AnimationBuilder;

},{"./browser_details":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/animate/browser_details.js","./css_animation_builder":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/animate/css_animation_builder.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/animate/browser_details.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
var math_1 = require('angular2/src/core/facade/math');
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var BrowserDetails = (function () {
    function BrowserDetails() {
        this.elapsedTimeIncludesDelay = false;
        this.doesElapsedTimeIncludesDelay();
    }
    /**
     * Determines if `event.elapsedTime` includes transition delay in the current browser.  At this
     * time, Chrome and Opera seem to be the only browsers that include this.
     */
    BrowserDetails.prototype.doesElapsedTimeIncludesDelay = function () {
        var _this = this;
        var div = dom_adapter_1.DOM.createElement('div');
        dom_adapter_1.DOM.setAttribute(div, 'style', "position: absolute; top: -9999px; left: -9999px; width: 1px;\n      height: 1px; transition: all 1ms linear 1ms;");
        // Firefox requires that we wait for 2 frames for some reason
        this.raf(function (timestamp) {
            dom_adapter_1.DOM.on(div, 'transitionend', function (event) {
                var elapsed = math_1.Math.round(event.elapsedTime * 1000);
                _this.elapsedTimeIncludesDelay = elapsed == 2;
                dom_adapter_1.DOM.remove(div);
            });
            dom_adapter_1.DOM.setStyle(div, 'width', '2px');
        }, 2);
    };
    BrowserDetails.prototype.raf = function (callback, frames) {
        if (frames === void 0) { frames = 1; }
        var queue = new RafQueue(callback, frames);
        return function () { return queue.cancel(); };
    };
    BrowserDetails = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], BrowserDetails);
    return BrowserDetails;
})();
exports.BrowserDetails = BrowserDetails;
var RafQueue = (function () {
    function RafQueue(callback, frames) {
        this.callback = callback;
        this.frames = frames;
        this._raf();
    }
    RafQueue.prototype._raf = function () {
        var _this = this;
        this.currentFrameId = dom_adapter_1.DOM.requestAnimationFrame(function (timestamp) { return _this._nextFrame(timestamp); });
    };
    RafQueue.prototype._nextFrame = function (timestamp) {
        this.frames--;
        if (this.frames > 0) {
            this._raf();
        }
        else {
            this.callback(timestamp);
        }
    };
    RafQueue.prototype.cancel = function () {
        dom_adapter_1.DOM.cancelAnimationFrame(this.currentFrameId);
        this.currentFrameId = null;
    };
    return RafQueue;
})();

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/math":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/math.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/animate/css_animation_builder.js":[function(require,module,exports){
'use strict';var css_animation_options_1 = require('./css_animation_options');
var animation_1 = require('./animation');
var CssAnimationBuilder = (function () {
    /**
     * Accepts public properties for CssAnimationBuilder
     */
    function CssAnimationBuilder(browserDetails) {
        this.browserDetails = browserDetails;
        /** @type {CssAnimationOptions} */
        this.data = new css_animation_options_1.CssAnimationOptions();
    }
    /**
     * Adds a temporary class that will be removed at the end of the animation
     * @param className
     */
    CssAnimationBuilder.prototype.addAnimationClass = function (className) {
        this.data.animationClasses.push(className);
        return this;
    };
    /**
     * Adds a class that will remain on the element after the animation has finished
     * @param className
     */
    CssAnimationBuilder.prototype.addClass = function (className) {
        this.data.classesToAdd.push(className);
        return this;
    };
    /**
     * Removes a class from the element
     * @param className
     */
    CssAnimationBuilder.prototype.removeClass = function (className) {
        this.data.classesToRemove.push(className);
        return this;
    };
    /**
     * Sets the animation duration (and overrides any defined through CSS)
     * @param duration
     */
    CssAnimationBuilder.prototype.setDuration = function (duration) {
        this.data.duration = duration;
        return this;
    };
    /**
     * Sets the animation delay (and overrides any defined through CSS)
     * @param delay
     */
    CssAnimationBuilder.prototype.setDelay = function (delay) {
        this.data.delay = delay;
        return this;
    };
    /**
     * Sets styles for both the initial state and the destination state
     * @param from
     * @param to
     */
    CssAnimationBuilder.prototype.setStyles = function (from, to) {
        return this.setFromStyles(from).setToStyles(to);
    };
    /**
     * Sets the initial styles for the animation
     * @param from
     */
    CssAnimationBuilder.prototype.setFromStyles = function (from) {
        this.data.fromStyles = from;
        return this;
    };
    /**
     * Sets the destination styles for the animation
     * @param to
     */
    CssAnimationBuilder.prototype.setToStyles = function (to) {
        this.data.toStyles = to;
        return this;
    };
    /**
     * Starts the animation and returns a promise
     * @param element
     */
    CssAnimationBuilder.prototype.start = function (element) {
        return new animation_1.Animation(element, this.data, this.browserDetails);
    };
    return CssAnimationBuilder;
})();
exports.CssAnimationBuilder = CssAnimationBuilder;

},{"./animation":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/animate/animation.js","./css_animation_options":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/animate/css_animation_options.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/animate/css_animation_options.js":[function(require,module,exports){
'use strict';var CssAnimationOptions = (function () {
    function CssAnimationOptions() {
        /** classes to be added to the element */
        this.classesToAdd = [];
        /** classes to be removed from the element */
        this.classesToRemove = [];
        /** classes to be added for the duration of the animation */
        this.animationClasses = [];
    }
    return CssAnimationOptions;
})();
exports.CssAnimationOptions = CssAnimationOptions;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/application.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var compiler_1 = require('angular2/src/core/compiler/compiler');
var application_common_1 = require('./application_common');
var application_tokens_1 = require('./application_tokens');
exports.APP_COMPONENT = application_tokens_1.APP_COMPONENT;
exports.APP_ID = application_tokens_1.APP_ID;
var application_common_2 = require('./application_common');
exports.platform = application_common_2.platform;
var application_ref_1 = require('./application_ref');
exports.PlatformRef = application_ref_1.PlatformRef;
exports.ApplicationRef = application_ref_1.ApplicationRef;
exports.applicationCommonBindings = application_ref_1.applicationCommonBindings;
exports.createNgZone = application_ref_1.createNgZone;
exports.platformCommon = application_ref_1.platformCommon;
exports.platformBindings = application_ref_1.platformBindings;
/// See [commonBootstrap] for detailed documentation.
function bootstrap(appComponentType, appBindings) {
    if (appBindings === void 0) { appBindings = null; }
    var bindings = [compiler_1.compilerProviders()];
    if (lang_1.isPresent(appBindings)) {
        bindings.push(appBindings);
    }
    return application_common_1.commonBootstrap(appComponentType, bindings);
}
exports.bootstrap = bootstrap;

},{"./application_common":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/application_common.js","./application_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/application_ref.js","./application_tokens":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/application_tokens.js","angular2/src/core/compiler/compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/compiler.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/application_common.js":[function(require,module,exports){
'use strict';var forms_1 = require('angular2/src/core/forms');
var di_1 = require('angular2/src/core/di');
var lang_1 = require('angular2/src/core/facade/lang');
var browser_adapter_1 = require('angular2/src/core/dom/browser_adapter');
var browser_testability_1 = require('angular2/src/core/testability/browser_testability');
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var xhr_1 = require('angular2/src/core/compiler/xhr');
var xhr_impl_1 = require('angular2/src/core/compiler/xhr_impl');
var event_manager_1 = require('angular2/src/core/render/dom/events/event_manager');
var key_events_1 = require('angular2/src/core/render/dom/events/key_events');
var hammer_gestures_1 = require('angular2/src/core/render/dom/events/hammer_gestures');
var testability_1 = require('angular2/src/core/testability/testability');
var api_1 = require('angular2/src/core/render/api');
var render_1 = require('angular2/src/core/render/render');
var shared_styles_host_1 = require('angular2/src/core/render/dom/shared_styles_host');
var platform_bindings_1 = require('./platform_bindings');
var animation_builder_1 = require('angular2/src/animate/animation_builder');
var browser_details_1 = require('angular2/src/animate/browser_details');
var wtf_init_1 = require('./profile/wtf_init');
var application_ref_1 = require('./application_ref');
/**
 * A default set of providers which apply only to an Angular application running on
 * the UI thread.
 */
function applicationDomBindings() {
    if (lang_1.isBlank(dom_adapter_1.DOM)) {
        throw "Must set a root DOM adapter first.";
    }
    return [
        di_1.provide(render_1.DOCUMENT, { useValue: dom_adapter_1.DOM.defaultDoc() }),
        event_manager_1.EventManager,
        new di_1.Provider(event_manager_1.EVENT_MANAGER_PLUGINS, { useClass: event_manager_1.DomEventsPlugin, multi: true }),
        new di_1.Provider(event_manager_1.EVENT_MANAGER_PLUGINS, { useClass: key_events_1.KeyEventsPlugin, multi: true }),
        new di_1.Provider(event_manager_1.EVENT_MANAGER_PLUGINS, { useClass: hammer_gestures_1.HammerGesturesPlugin, multi: true }),
        di_1.provide(render_1.DomRenderer, { useClass: render_1.DomRenderer_ }),
        di_1.provide(api_1.Renderer, { useExisting: render_1.DomRenderer }),
        shared_styles_host_1.DomSharedStylesHost,
        di_1.provide(shared_styles_host_1.SharedStylesHost, { useExisting: shared_styles_host_1.DomSharedStylesHost }),
        platform_bindings_1.EXCEPTION_PROVIDER,
        di_1.provide(xhr_1.XHR, { useValue: new xhr_impl_1.XHRImpl() }),
        testability_1.Testability,
        browser_details_1.BrowserDetails,
        animation_builder_1.AnimationBuilder,
        forms_1.FORM_PROVIDERS
    ];
}
exports.applicationDomBindings = applicationDomBindings;
/**
 * Initialize the Angular 'platform' on the page.
 *
 * See {@link PlatformRef} for details on the Angular platform.
 *
 * # Without specified providers
 *
 * If no providers are specified, `platform`'s behavior depends on whether an existing
 * platform exists:
 *
 * If no platform exists, a new one will be created with the default {@link platformBindings}.
 *
 * If a platform already exists, it will be returned (regardless of what providers it
 * was created with). This is a convenience feature, allowing for multiple applications
 * to be loaded into the same platform without awareness of each other.
 *
 * # With specified providers
 *
 * It is also possible to specify providers to be made in the new platform. These providers
 * will be shared between all applications on the page. For example, an abstraction for
 * the browser cookie jar should be bound at the platform level, because there is only one
 * cookie jar regardless of how many applications on the age will be accessing it.
 *
 * If providers are specified directly, `platform` will create the Angular platform with
 * them if a platform did not exist already. If it did exist, however, an error will be
 * thrown.
 *
 * # DOM Applications
 *
 * This version of `platform` initializes Angular to run in the UI thread, with direct
 * DOM access. Web-worker applications should call `platform` from
 * `src/web_workers/worker/application_common` instead.
 */
function platform(bindings) {
    return application_ref_1.platformCommon(bindings, function () {
        browser_adapter_1.BrowserDomAdapter.makeCurrent();
        wtf_init_1.wtfInit();
        browser_testability_1.BrowserGetTestability.init();
    });
}
exports.platform = platform;
/**
 * Bootstrapping for Angular applications.
 *
 * You instantiate an Angular application by explicitly specifying a component to use
 * as the root component for your application via the `bootstrap()` method.
 *
 * ## Simple Example
 *
 * Assuming this `index.html`:
 *
 * ```html
 * <html>
 *   <!-- load Angular script tags here. -->
 *   <body>
 *     <my-app>loading...</my-app>
 *   </body>
 * </html>
 * ```
 *
 * An application is bootstrapped inside an existing browser DOM, typically `index.html`.
 * Unlike Angular 1, Angular 2 does not compile/process providers in `index.html`. This is
 * mainly for security reasons, as well as architectural changes in Angular 2. This means
 * that `index.html` can safely be processed using server-side technologies such as
 * providers. Bindings can thus use double-curly `{{ syntax }}` without collision from
 * Angular 2 component double-curly `{{ syntax }}`.
 *
 * We can use this script code:
 *
 * ```
 * @Component({
 *    selector: 'my-app',
 *    template: 'Hello {{ name }}!'
 * })
 * class MyApp {
 *   name:string;
 *
 *   constructor() {
 *     this.name = 'World';
 *   }
 * }
 *
 * main() {
 *   return bootstrap(MyApp);
 * }
 * ```
 *
 * When the app developer invokes `bootstrap()` with the root component `MyApp` as its
 * argument, Angular performs the following tasks:
 *
 *  1. It uses the component's `selector` property to locate the DOM element which needs
 *     to be upgraded into the angular component.
 *  2. It creates a new child injector (from the platform injector). Optionally, you can
 *     also override the injector configuration for an app by invoking `bootstrap` with the
 *     `componentInjectableBindings` argument.
 *  3. It creates a new `Zone` and connects it to the angular application's change detection
 *     domain instance.
 *  4. It creates a shadow DOM on the selected component's host element and loads the
 *     template into it.
 *  5. It instantiates the specified component.
 *  6. Finally, Angular performs change detection to apply the initial data providers for the
 *     application.
 *
 *
 * ## Instantiating Multiple Applications on a Single Page
 *
 * There are two ways to do this.
 *
 * ### Isolated Applications
 *
 * Angular creates a new application each time that the `bootstrap()` method is invoked.
 * When multiple applications are created for a page, Angular treats each application as
 * independent within an isolated change detection and `Zone` domain. If you need to share
 * data between applications, use the strategy described in the next section, "Applications
 * That Share Change Detection."
 *
 *
 * ### Applications That Share Change Detection
 *
 * If you need to bootstrap multiple applications that share common data, the applications
 * must share a common change detection and zone. To do that, create a meta-component that
 * lists the application components in its template.
 *
 * By only invoking the `bootstrap()` method once, with the meta-component as its argument,
 * you ensure that only a single change detection zone is created and therefore data can be
 * shared across the applications.
 *
 *
 * ## Platform Injector
 *
 * When working within a browser window, there are many singleton resources: cookies, title,
 * location, and others. Angular services that represent these resources must likewise be
 * shared across all Angular applications that occupy the same browser window. For this
 * reason, Angular creates exactly one global platform injector which stores all shared
 * services, and each angular application injector has the platform injector as its parent.
 *
 * Each application has its own private injector as well. When there are multiple
 * applications on a page, Angular treats each application injector's services as private
 * to that application.
 *
 *
 * # API
 * - `appComponentType`: The root component which should act as the application. This is
 *   a reference to a `Type` which is annotated with `@Component(...)`.
 * - `componentInjectableBindings`: An additional set of providers that can be added to the
 *   app injector to override default injection behavior.
 * - `errorReporter`: `function(exception:any, stackTrace:string)` a default error reporter
 *   for unhandled exceptions.
 *
 * Returns a `Promise` of {@link ComponentRef}.
 */
function commonBootstrap(appComponentType, appBindings) {
    if (appBindings === void 0) { appBindings = null; }
    var p = platform();
    var bindings = [application_ref_1.applicationCommonBindings(), applicationDomBindings()];
    if (lang_1.isPresent(appBindings)) {
        bindings.push(appBindings);
    }
    return p.application(bindings).bootstrap(appComponentType);
}
exports.commonBootstrap = commonBootstrap;

},{"./application_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/application_ref.js","./platform_bindings":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/platform_bindings.js","./profile/wtf_init":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/profile/wtf_init.js","angular2/src/animate/animation_builder":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/animate/animation_builder.js","angular2/src/animate/browser_details":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/animate/browser_details.js","angular2/src/core/compiler/xhr":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/xhr.js","angular2/src/core/compiler/xhr_impl":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/xhr_impl.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/dom/browser_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/browser_adapter.js","angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/forms":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms.js","angular2/src/core/render/api":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/api.js","angular2/src/core/render/dom/events/event_manager":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/events/event_manager.js","angular2/src/core/render/dom/events/hammer_gestures":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/events/hammer_gestures.js","angular2/src/core/render/dom/events/key_events":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/events/key_events.js","angular2/src/core/render/dom/shared_styles_host":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/shared_styles_host.js","angular2/src/core/render/render":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/render.js","angular2/src/core/testability/browser_testability":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/testability/browser_testability.js","angular2/src/core/testability/testability":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/testability/testability.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/application_ref.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ng_zone_1 = require('angular2/src/core/zone/ng_zone');
var lang_1 = require('angular2/src/core/facade/lang');
var di_1 = require('angular2/src/core/di');
var application_tokens_1 = require('./application_tokens');
var async_1 = require('angular2/src/core/facade/async');
var collection_1 = require('angular2/src/core/facade/collection');
var reflection_1 = require('angular2/src/core/reflection/reflection');
var testability_1 = require('angular2/src/core/testability/testability');
var dynamic_component_loader_1 = require('angular2/src/core/linker/dynamic_component_loader');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var view_ref_1 = require('angular2/src/core/linker/view_ref');
var life_cycle_1 = require('angular2/src/core/life_cycle/life_cycle');
var change_detection_1 = require('angular2/src/core/change_detection/change_detection');
var view_pool_1 = require('angular2/src/core/linker/view_pool');
var view_manager_1 = require('angular2/src/core/linker/view_manager');
var view_manager_utils_1 = require('angular2/src/core/linker/view_manager_utils');
var view_listener_1 = require('angular2/src/core/linker/view_listener');
var proto_view_factory_1 = require('./linker/proto_view_factory');
var pipes_1 = require('angular2/src/core/pipes');
var view_resolver_1 = require('./linker/view_resolver');
var directive_resolver_1 = require('./linker/directive_resolver');
var pipe_resolver_1 = require('./linker/pipe_resolver');
var compiler_1 = require('angular2/src/core/linker/compiler');
var dynamic_component_loader_2 = require("./linker/dynamic_component_loader");
var view_manager_2 = require("./linker/view_manager");
var compiler_2 = require("./linker/compiler");
/**
 * Constructs the set of providers meant for use at the platform level.
 *
 * These are providers that should be singletons shared among all Angular applications
 * running on the page.
 */
function platformBindings() {
    return [di_1.provide(reflection_1.Reflector, { useValue: reflection_1.reflector }), testability_1.TestabilityRegistry];
}
exports.platformBindings = platformBindings;
/**
 * Construct providers specific to an individual root component.
 */
function _componentProviders(appComponentType) {
    return [
        di_1.provide(application_tokens_1.APP_COMPONENT, { useValue: appComponentType }),
        di_1.provide(application_tokens_1.APP_COMPONENT_REF_PROMISE, {
            useFactory: function (dynamicComponentLoader, injector) {
                // TODO(rado): investigate whether to support bindings on root component.
                return dynamicComponentLoader.loadAsRoot(appComponentType, null, injector)
                    .then(function (componentRef) {
                    if (lang_1.isPresent(componentRef.location.nativeElement)) {
                        injector.get(testability_1.TestabilityRegistry)
                            .registerApplication(componentRef.location.nativeElement, injector.get(testability_1.Testability));
                    }
                    return componentRef;
                });
            },
            deps: [dynamic_component_loader_1.DynamicComponentLoader, di_1.Injector]
        }),
        di_1.provide(appComponentType, {
            useFactory: function (p) { return p.then(function (ref) { return ref.instance; }); },
            deps: [application_tokens_1.APP_COMPONENT_REF_PROMISE]
        }),
    ];
}
/**
 * Construct a default set of providers which should be included in any Angular
 * application, regardless of whether it runs on the UI thread or in a web worker.
 */
function applicationCommonBindings() {
    return [
        di_1.provide(compiler_1.Compiler, { useClass: compiler_2.Compiler_ }),
        application_tokens_1.APP_ID_RANDOM_PROVIDER,
        view_pool_1.AppViewPool,
        di_1.provide(view_pool_1.APP_VIEW_POOL_CAPACITY, { useValue: 10000 }),
        di_1.provide(view_manager_1.AppViewManager, { useClass: view_manager_2.AppViewManager_ }),
        view_manager_utils_1.AppViewManagerUtils,
        view_listener_1.AppViewListener,
        proto_view_factory_1.ProtoViewFactory,
        view_resolver_1.ViewResolver,
        pipes_1.DEFAULT_PIPES,
        di_1.provide(change_detection_1.IterableDiffers, { useValue: change_detection_1.defaultIterableDiffers }),
        di_1.provide(change_detection_1.KeyValueDiffers, { useValue: change_detection_1.defaultKeyValueDiffers }),
        directive_resolver_1.DirectiveResolver,
        pipe_resolver_1.PipeResolver,
        di_1.provide(dynamic_component_loader_1.DynamicComponentLoader, { useClass: dynamic_component_loader_2.DynamicComponentLoader_ }),
        di_1.provide(life_cycle_1.LifeCycle, {
            useFactory: function (exceptionHandler) { return new life_cycle_1.LifeCycle_(null, lang_1.assertionsEnabled()); },
            deps: [exceptions_1.ExceptionHandler]
        })
    ];
}
exports.applicationCommonBindings = applicationCommonBindings;
/**
 * Create an Angular zone.
 */
function createNgZone() {
    return new ng_zone_1.NgZone({ enableLongStackTrace: lang_1.assertionsEnabled() });
}
exports.createNgZone = createNgZone;
var _platform;
function platformCommon(bindings, initializer) {
    if (lang_1.isPresent(_platform)) {
        if (lang_1.isBlank(bindings)) {
            return _platform;
        }
        throw "platform() can only be called once per page";
    }
    if (lang_1.isPresent(initializer)) {
        initializer();
    }
    if (lang_1.isBlank(bindings)) {
        bindings = platformBindings();
    }
    _platform = new PlatformRef_(di_1.Injector.resolveAndCreate(bindings), function () { _platform = null; });
    return _platform;
}
exports.platformCommon = platformCommon;
/**
 * The Angular platform is the entry point for Angular on a web page. Each page
 * has exactly one platform, and services (such as reflection) which are common
 * to every Angular application running on the page are bound in its scope.
 *
 * A page's platform is initialized implicitly when {@link bootstrap}() is called, or
 * explicitly by calling {@link platform}().
 */
var PlatformRef = (function () {
    function PlatformRef() {
    }
    Object.defineProperty(PlatformRef.prototype, "injector", {
        /**
         * Retrieve the platform {@link Injector}, which is the parent injector for
         * every Angular application on the page and provides singleton providers.
         */
        get: function () { return exceptions_1.unimplemented(); },
        enumerable: true,
        configurable: true
    });
    ;
    return PlatformRef;
})();
exports.PlatformRef = PlatformRef;
var PlatformRef_ = (function (_super) {
    __extends(PlatformRef_, _super);
    function PlatformRef_(_injector, _dispose) {
        _super.call(this);
        this._injector = _injector;
        this._dispose = _dispose;
        /** @internal */
        this._applications = [];
    }
    Object.defineProperty(PlatformRef_.prototype, "injector", {
        get: function () { return this._injector; },
        enumerable: true,
        configurable: true
    });
    PlatformRef_.prototype.application = function (bindings) {
        var app = this._initApp(createNgZone(), bindings);
        return app;
    };
    PlatformRef_.prototype.asyncApplication = function (bindingFn) {
        var _this = this;
        var zone = createNgZone();
        var completer = async_1.PromiseWrapper.completer();
        zone.run(function () {
            async_1.PromiseWrapper.then(bindingFn(zone), function (bindings) {
                completer.resolve(_this._initApp(zone, bindings));
            });
        });
        return completer.promise;
    };
    PlatformRef_.prototype._initApp = function (zone, providers) {
        var _this = this;
        var injector;
        var app;
        zone.run(function () {
            providers.push(di_1.provide(ng_zone_1.NgZone, { useValue: zone }));
            providers.push(di_1.provide(ApplicationRef, { useFactory: function () { return app; }, deps: [] }));
            var exceptionHandler;
            try {
                injector = _this.injector.resolveAndCreateChild(providers);
                exceptionHandler = injector.get(exceptions_1.ExceptionHandler);
                zone.overrideOnErrorHandler(function (e, s) { return exceptionHandler.call(e, s); });
            }
            catch (e) {
                if (lang_1.isPresent(exceptionHandler)) {
                    exceptionHandler.call(e, e.stack);
                }
                else {
                    dom_adapter_1.DOM.logError(e);
                }
            }
        });
        app = new ApplicationRef_(this, zone, injector);
        this._applications.push(app);
        return app;
    };
    PlatformRef_.prototype.dispose = function () {
        this._applications.forEach(function (app) { return app.dispose(); });
        this._dispose();
    };
    /** @internal */
    PlatformRef_.prototype._applicationDisposed = function (app) { collection_1.ListWrapper.remove(this._applications, app); };
    return PlatformRef_;
})(PlatformRef);
exports.PlatformRef_ = PlatformRef_;
/**
 * A reference to an Angular application running on a page.
 *
 * For more about Angular applications, see the documentation for {@link bootstrap}.
 */
var ApplicationRef = (function () {
    function ApplicationRef() {
    }
    Object.defineProperty(ApplicationRef.prototype, "injector", {
        /**
         * Retrieve the application {@link Injector}.
         */
        get: function () { return exceptions_1.unimplemented(); },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(ApplicationRef.prototype, "zone", {
        /**
         * Retrieve the application {@link NgZone}.
         */
        get: function () { return exceptions_1.unimplemented(); },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
        /**
         * Get a list of component types registered to this application.
         */
        get: function () { return exceptions_1.unimplemented(); },
        enumerable: true,
        configurable: true
    });
    ;
    return ApplicationRef;
})();
exports.ApplicationRef = ApplicationRef;
var ApplicationRef_ = (function (_super) {
    __extends(ApplicationRef_, _super);
    function ApplicationRef_(_platform, _zone, _injector) {
        _super.call(this);
        this._platform = _platform;
        this._zone = _zone;
        this._injector = _injector;
        this._bootstrapListeners = [];
        this._rootComponents = [];
        this._rootComponentTypes = [];
    }
    ApplicationRef_.prototype.registerBootstrapListener = function (listener) {
        this._bootstrapListeners.push(listener);
    };
    ApplicationRef_.prototype.bootstrap = function (componentType, providers) {
        var _this = this;
        var completer = async_1.PromiseWrapper.completer();
        this._zone.run(function () {
            var componentProviders = _componentProviders(componentType);
            if (lang_1.isPresent(providers)) {
                componentProviders.push(providers);
            }
            var exceptionHandler = _this._injector.get(exceptions_1.ExceptionHandler);
            _this._rootComponentTypes.push(componentType);
            try {
                var injector = _this._injector.resolveAndCreateChild(componentProviders);
                var compRefToken = injector.get(application_tokens_1.APP_COMPONENT_REF_PROMISE);
                var tick = function (componentRef) {
                    var appChangeDetector = view_ref_1.internalView(componentRef.hostView).changeDetector;
                    var lc = injector.get(life_cycle_1.LifeCycle);
                    lc.registerWith(_this._zone, appChangeDetector);
                    lc.tick();
                    completer.resolve(componentRef);
                    _this._rootComponents.push(componentRef);
                    _this._bootstrapListeners.forEach(function (listener) { return listener(componentRef); });
                };
                var tickResult = async_1.PromiseWrapper.then(compRefToken, tick);
                async_1.PromiseWrapper.then(tickResult, function (_) { });
                async_1.PromiseWrapper.then(tickResult, null, function (err, stackTrace) { return completer.reject(err, stackTrace); });
            }
            catch (e) {
                exceptionHandler.call(e, e.stack);
                completer.reject(e, e.stack);
            }
        });
        return completer.promise;
    };
    Object.defineProperty(ApplicationRef_.prototype, "injector", {
        get: function () { return this._injector; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationRef_.prototype, "zone", {
        get: function () { return this._zone; },
        enumerable: true,
        configurable: true
    });
    ApplicationRef_.prototype.dispose = function () {
        // TODO(alxhub): Dispose of the NgZone.
        this._rootComponents.forEach(function (ref) { return ref.dispose(); });
        this._platform._applicationDisposed(this);
    };
    Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
        get: function () { return this._rootComponentTypes; },
        enumerable: true,
        configurable: true
    });
    return ApplicationRef_;
})(ApplicationRef);
exports.ApplicationRef_ = ApplicationRef_;

},{"./application_tokens":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/application_tokens.js","./linker/compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/compiler.js","./linker/directive_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/directive_resolver.js","./linker/dynamic_component_loader":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/dynamic_component_loader.js","./linker/pipe_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/pipe_resolver.js","./linker/proto_view_factory":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/proto_view_factory.js","./linker/view_manager":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_manager.js","./linker/view_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_resolver.js","angular2/src/core/change_detection/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/life_cycle/life_cycle":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/life_cycle/life_cycle.js","angular2/src/core/linker/compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/compiler.js","angular2/src/core/linker/dynamic_component_loader":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/dynamic_component_loader.js","angular2/src/core/linker/view_listener":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_listener.js","angular2/src/core/linker/view_manager":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_manager.js","angular2/src/core/linker/view_manager_utils":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_manager_utils.js","angular2/src/core/linker/view_pool":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_pool.js","angular2/src/core/linker/view_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_ref.js","angular2/src/core/pipes":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes.js","angular2/src/core/reflection/reflection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflection.js","angular2/src/core/testability/testability":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/testability/testability.js","angular2/src/core/zone/ng_zone":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/zone/ng_zone.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/application_tokens.js":[function(require,module,exports){
'use strict';var di_1 = require('angular2/src/core/di');
var lang_1 = require('angular2/src/core/facade/lang');
/**
 *  @internal
 */
exports.APP_COMPONENT_REF_PROMISE = lang_1.CONST_EXPR(new di_1.OpaqueToken('Promise<ComponentRef>'));
/**
 * An {@link angular2/di/OpaqueToken} representing the application root type in the {@link
 * Injector}.
 *
 * ```
 * @Component(...)
 * class MyApp {
 *   ...
 * }
 *
 * bootstrap(MyApp).then((appRef:ApplicationRef) {
 *   expect(appRef.injector.get(appComponentTypeToken)).toEqual(MyApp);
 * });
 *
 * ```
 */
exports.APP_COMPONENT = lang_1.CONST_EXPR(new di_1.OpaqueToken('AppComponent'));
/**
 * A DI Token representing a unique string id assigned to the application by Angular and used
 * primarily for prefixing application attributes and CSS styles when
 * {@link ViewEncapsulation#Emulated} is being used.
 *
 * If you need to avoid randomly generated value to be used as an application id, you can provide
 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
 * using this token.
 */
exports.APP_ID = lang_1.CONST_EXPR(new di_1.OpaqueToken('AppId'));
function _appIdRandomProviderFactory() {
    return "" + _randomChar() + _randomChar() + _randomChar();
}
/**
 * Bindings that will generate a random APP_ID_TOKEN.
 */
exports.APP_ID_RANDOM_PROVIDER = lang_1.CONST_EXPR(new di_1.Provider(exports.APP_ID, { useFactory: _appIdRandomProviderFactory, deps: [] }));
function _randomChar() {
    return lang_1.StringWrapper.fromCharCode(97 + lang_1.Math.floor(lang_1.Math.random() * 25));
}

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/bootstrap.js":[function(require,module,exports){
'use strict';// Note: This file only exists so that Dart users can import
// bootstrap from angular2/bootstrap. JS users should import
// from angular2/core.
var application_1 = require('./application');
exports.bootstrap = application_1.bootstrap;

},{"./application":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/application.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection.js":[function(require,module,exports){
'use strict';/**
 * @module
 * @description
 * Change detection enables data binding in Angular.
 */
var change_detection_1 = require('./change_detection/change_detection');
exports.ChangeDetectionStrategy = change_detection_1.ChangeDetectionStrategy;
exports.ExpressionChangedAfterItHasBeenCheckedException = change_detection_1.ExpressionChangedAfterItHasBeenCheckedException;
exports.ChangeDetectionError = change_detection_1.ChangeDetectionError;
exports.ChangeDetectorRef = change_detection_1.ChangeDetectorRef;
exports.WrappedValue = change_detection_1.WrappedValue;
exports.SimpleChange = change_detection_1.SimpleChange;
exports.IterableDiffers = change_detection_1.IterableDiffers;
exports.KeyValueDiffers = change_detection_1.KeyValueDiffers;

},{"./change_detection/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/abstract_change_detector.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var change_detection_util_1 = require('./change_detection_util');
var change_detector_ref_1 = require('./change_detector_ref');
var exceptions_2 = require('./exceptions');
var constants_1 = require('./constants');
var profile_1 = require('../profile/profile');
var observable_facade_1 = require('./observable_facade');
var _scope_check = profile_1.wtfCreateScope("ChangeDetector#check(ascii id, bool throwOnChange)");
var _Context = (function () {
    function _Context(element, componentElement, context, locals, injector, expression) {
        this.element = element;
        this.componentElement = componentElement;
        this.context = context;
        this.locals = locals;
        this.injector = injector;
        this.expression = expression;
    }
    return _Context;
})();
var AbstractChangeDetector = (function () {
    function AbstractChangeDetector(id, dispatcher, numberOfPropertyProtoRecords, bindingTargets, directiveIndices, strategy) {
        this.id = id;
        this.dispatcher = dispatcher;
        this.numberOfPropertyProtoRecords = numberOfPropertyProtoRecords;
        this.bindingTargets = bindingTargets;
        this.directiveIndices = directiveIndices;
        this.strategy = strategy;
        this.lightDomChildren = [];
        this.shadowDomChildren = [];
        // The names of the below fields must be kept in sync with codegen_name_util.ts or
        // change detection will fail.
        this.alreadyChecked = false;
        this.locals = null;
        this.mode = null;
        this.pipes = null;
        this.ref = new change_detector_ref_1.ChangeDetectorRef_(this);
    }
    AbstractChangeDetector.prototype.addChild = function (cd) {
        this.lightDomChildren.push(cd);
        cd.parent = this;
    };
    AbstractChangeDetector.prototype.removeChild = function (cd) { collection_1.ListWrapper.remove(this.lightDomChildren, cd); };
    AbstractChangeDetector.prototype.addShadowDomChild = function (cd) {
        this.shadowDomChildren.push(cd);
        cd.parent = this;
    };
    AbstractChangeDetector.prototype.removeShadowDomChild = function (cd) { collection_1.ListWrapper.remove(this.shadowDomChildren, cd); };
    AbstractChangeDetector.prototype.remove = function () { this.parent.removeChild(this); };
    AbstractChangeDetector.prototype.handleEvent = function (eventName, elIndex, locals) {
        var res = this.handleEventInternal(eventName, elIndex, locals);
        this.markPathToRootAsCheckOnce();
        return res;
    };
    AbstractChangeDetector.prototype.handleEventInternal = function (eventName, elIndex, locals) { return false; };
    AbstractChangeDetector.prototype.detectChanges = function () { this.runDetectChanges(false); };
    AbstractChangeDetector.prototype.checkNoChanges = function () { throw new exceptions_1.BaseException("Not implemented"); };
    AbstractChangeDetector.prototype.runDetectChanges = function (throwOnChange) {
        if (this.mode === constants_1.ChangeDetectionStrategy.Detached ||
            this.mode === constants_1.ChangeDetectionStrategy.Checked)
            return;
        var s = _scope_check(this.id, throwOnChange);
        this.detectChangesInRecords(throwOnChange);
        this._detectChangesInLightDomChildren(throwOnChange);
        if (!throwOnChange)
            this.afterContentLifecycleCallbacks();
        this._detectChangesInShadowDomChildren(throwOnChange);
        if (!throwOnChange)
            this.afterViewLifecycleCallbacks();
        if (this.mode === constants_1.ChangeDetectionStrategy.CheckOnce)
            this.mode = constants_1.ChangeDetectionStrategy.Checked;
        this.alreadyChecked = true;
        profile_1.wtfLeave(s);
    };
    // This method is not intended to be overridden. Subclasses should instead provide an
    // implementation of `detectChangesInRecordsInternal` which does the work of detecting changes
    // and which this method will call.
    // This method expects that `detectChangesInRecordsInternal` will set the property
    // `this.propertyBindingIndex` to the propertyBindingIndex of the first proto record. This is to
    // facilitate error reporting.
    AbstractChangeDetector.prototype.detectChangesInRecords = function (throwOnChange) {
        if (!this.hydrated()) {
            this.throwDehydratedError();
        }
        try {
            this.detectChangesInRecordsInternal(throwOnChange);
        }
        catch (e) {
            this._throwError(e, e.stack);
        }
    };
    // Subclasses should override this method to perform any work necessary to detect and report
    // changes. For example, changes should be reported via `ChangeDetectionUtil.addChange`, lifecycle
    // methods should be called, etc.
    // This implementation should also set `this.propertyBindingIndex` to the propertyBindingIndex of
    // the
    // first proto record to facilitate error reporting. See {@link #detectChangesInRecords}.
    AbstractChangeDetector.prototype.detectChangesInRecordsInternal = function (throwOnChange) { };
    // This method is not intended to be overridden. Subclasses should instead provide an
    // implementation of `hydrateDirectives`.
    AbstractChangeDetector.prototype.hydrate = function (context, locals, directives, pipes) {
        this.mode = change_detection_util_1.ChangeDetectionUtil.changeDetectionMode(this.strategy);
        this.context = context;
        if (this.strategy === constants_1.ChangeDetectionStrategy.OnPushObserve) {
            this.observeComponent(context);
        }
        this.locals = locals;
        this.pipes = pipes;
        this.hydrateDirectives(directives);
        this.alreadyChecked = false;
    };
    // Subclasses should override this method to hydrate any directives.
    AbstractChangeDetector.prototype.hydrateDirectives = function (directives) { };
    // This method is not intended to be overridden. Subclasses should instead provide an
    // implementation of `dehydrateDirectives`.
    AbstractChangeDetector.prototype.dehydrate = function () {
        this.dehydrateDirectives(true);
        // This is an experimental feature. Works only in Dart.
        if (this.strategy === constants_1.ChangeDetectionStrategy.OnPushObserve) {
            this._unsubsribeFromObservables();
        }
        this.context = null;
        this.locals = null;
        this.pipes = null;
    };
    // Subclasses should override this method to dehydrate any directives. This method should reverse
    // any work done in `hydrateDirectives`.
    AbstractChangeDetector.prototype.dehydrateDirectives = function (destroyPipes) { };
    AbstractChangeDetector.prototype.hydrated = function () { return this.context !== null; };
    AbstractChangeDetector.prototype.afterContentLifecycleCallbacks = function () {
        this.dispatcher.notifyAfterContentChecked();
        this.afterContentLifecycleCallbacksInternal();
    };
    AbstractChangeDetector.prototype.afterContentLifecycleCallbacksInternal = function () { };
    AbstractChangeDetector.prototype.afterViewLifecycleCallbacks = function () {
        this.dispatcher.notifyAfterViewChecked();
        this.afterViewLifecycleCallbacksInternal();
    };
    AbstractChangeDetector.prototype.afterViewLifecycleCallbacksInternal = function () { };
    /** @internal */
    AbstractChangeDetector.prototype._detectChangesInLightDomChildren = function (throwOnChange) {
        var c = this.lightDomChildren;
        for (var i = 0; i < c.length; ++i) {
            c[i].runDetectChanges(throwOnChange);
        }
    };
    /** @internal */
    AbstractChangeDetector.prototype._detectChangesInShadowDomChildren = function (throwOnChange) {
        var c = this.shadowDomChildren;
        for (var i = 0; i < c.length; ++i) {
            c[i].runDetectChanges(throwOnChange);
        }
    };
    AbstractChangeDetector.prototype.markAsCheckOnce = function () { this.mode = constants_1.ChangeDetectionStrategy.CheckOnce; };
    AbstractChangeDetector.prototype.markPathToRootAsCheckOnce = function () {
        var c = this;
        while (lang_1.isPresent(c) && c.mode !== constants_1.ChangeDetectionStrategy.Detached) {
            if (c.mode === constants_1.ChangeDetectionStrategy.Checked)
                c.mode = constants_1.ChangeDetectionStrategy.CheckOnce;
            c = c.parent;
        }
    };
    // This is an experimental feature. Works only in Dart.
    AbstractChangeDetector.prototype._unsubsribeFromObservables = function () {
        if (lang_1.isPresent(this.subscriptions)) {
            for (var i = 0; i < this.subscriptions.length; ++i) {
                var s = this.subscriptions[i];
                if (lang_1.isPresent(this.subscriptions[i])) {
                    s.cancel();
                    this.subscriptions[i] = null;
                }
            }
        }
    };
    // This is an experimental feature. Works only in Dart.
    AbstractChangeDetector.prototype.observeValue = function (value, index) {
        var _this = this;
        if (observable_facade_1.isObservable(value)) {
            this._createArrayToStoreObservables();
            if (lang_1.isBlank(this.subscriptions[index])) {
                this.streams[index] = value.changes;
                this.subscriptions[index] = value.changes.listen(function (_) { return _this.ref.markForCheck(); });
            }
            else if (this.streams[index] !== value.changes) {
                this.subscriptions[index].cancel();
                this.streams[index] = value.changes;
                this.subscriptions[index] = value.changes.listen(function (_) { return _this.ref.markForCheck(); });
            }
        }
        return value;
    };
    // This is an experimental feature. Works only in Dart.
    AbstractChangeDetector.prototype.observeDirective = function (value, index) {
        var _this = this;
        if (observable_facade_1.isObservable(value)) {
            this._createArrayToStoreObservables();
            var arrayIndex = this.numberOfPropertyProtoRecords + index + 2; // +1 is component
            this.streams[arrayIndex] = value.changes;
            this.subscriptions[arrayIndex] = value.changes.listen(function (_) { return _this.ref.markForCheck(); });
        }
        return value;
    };
    // This is an experimental feature. Works only in Dart.
    AbstractChangeDetector.prototype.observeComponent = function (value) {
        var _this = this;
        if (observable_facade_1.isObservable(value)) {
            this._createArrayToStoreObservables();
            var index = this.numberOfPropertyProtoRecords + 1;
            this.streams[index] = value.changes;
            this.subscriptions[index] = value.changes.listen(function (_) { return _this.ref.markForCheck(); });
        }
        return value;
    };
    AbstractChangeDetector.prototype._createArrayToStoreObservables = function () {
        if (lang_1.isBlank(this.subscriptions)) {
            this.subscriptions = collection_1.ListWrapper.createFixedSize(this.numberOfPropertyProtoRecords +
                this.directiveIndices.length + 2);
            this.streams = collection_1.ListWrapper.createFixedSize(this.numberOfPropertyProtoRecords +
                this.directiveIndices.length + 2);
        }
    };
    AbstractChangeDetector.prototype.getDirectiveFor = function (directives, index) {
        return directives.getDirectiveFor(this.directiveIndices[index]);
    };
    AbstractChangeDetector.prototype.getDetectorFor = function (directives, index) {
        return directives.getDetectorFor(this.directiveIndices[index]);
    };
    AbstractChangeDetector.prototype.notifyDispatcher = function (value) {
        this.dispatcher.notifyOnBinding(this._currentBinding(), value);
    };
    AbstractChangeDetector.prototype.logBindingUpdate = function (value) {
        this.dispatcher.logBindingUpdate(this._currentBinding(), value);
    };
    AbstractChangeDetector.prototype.addChange = function (changes, oldValue, newValue) {
        if (lang_1.isBlank(changes)) {
            changes = {};
        }
        changes[this._currentBinding().name] = change_detection_util_1.ChangeDetectionUtil.simpleChange(oldValue, newValue);
        return changes;
    };
    AbstractChangeDetector.prototype._throwError = function (exception, stack) {
        var error;
        try {
            var c = this.dispatcher.getDebugContext(this._currentBinding().elementIndex, null);
            var context = lang_1.isPresent(c) ? new _Context(c.element, c.componentElement, c.context, c.locals, c.injector, this._currentBinding().debug) :
                null;
            error = new exceptions_2.ChangeDetectionError(this._currentBinding().debug, exception, stack, context);
        }
        catch (e) {
            // if an error happens during getting the debug context, we throw a ChangeDetectionError
            // without the extra information.
            error = new exceptions_2.ChangeDetectionError(null, exception, stack, null);
        }
        throw error;
    };
    AbstractChangeDetector.prototype.throwOnChangeError = function (oldValue, newValue) {
        throw new exceptions_2.ExpressionChangedAfterItHasBeenCheckedException(this._currentBinding().debug, oldValue, newValue, null);
    };
    AbstractChangeDetector.prototype.throwDehydratedError = function () { throw new exceptions_2.DehydratedException(); };
    AbstractChangeDetector.prototype._currentBinding = function () {
        return this.bindingTargets[this.propertyBindingIndex];
    };
    return AbstractChangeDetector;
})();
exports.AbstractChangeDetector = AbstractChangeDetector;

},{"../profile/profile":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/profile/profile.js","./change_detection_util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection_util.js","./change_detector_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detector_ref.js","./constants":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/constants.js","./exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/exceptions.js","./observable_facade":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/observable_facade.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/binding_record.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var DIRECTIVE_LIFECYCLE = "directiveLifecycle";
var BINDING = "native";
var DIRECTIVE = "directive";
var ELEMENT_PROPERTY = "elementProperty";
var ELEMENT_ATTRIBUTE = "elementAttribute";
var ELEMENT_CLASS = "elementClass";
var ELEMENT_STYLE = "elementStyle";
var TEXT_NODE = "textNode";
var EVENT = "event";
var HOST_EVENT = "hostEvent";
var BindingTarget = (function () {
    function BindingTarget(mode, elementIndex, name, unit, debug) {
        this.mode = mode;
        this.elementIndex = elementIndex;
        this.name = name;
        this.unit = unit;
        this.debug = debug;
    }
    BindingTarget.prototype.isDirective = function () { return this.mode === DIRECTIVE; };
    BindingTarget.prototype.isElementProperty = function () { return this.mode === ELEMENT_PROPERTY; };
    BindingTarget.prototype.isElementAttribute = function () { return this.mode === ELEMENT_ATTRIBUTE; };
    BindingTarget.prototype.isElementClass = function () { return this.mode === ELEMENT_CLASS; };
    BindingTarget.prototype.isElementStyle = function () { return this.mode === ELEMENT_STYLE; };
    BindingTarget.prototype.isTextNode = function () { return this.mode === TEXT_NODE; };
    return BindingTarget;
})();
exports.BindingTarget = BindingTarget;
var BindingRecord = (function () {
    function BindingRecord(mode, target, implicitReceiver, ast, setter, lifecycleEvent, directiveRecord) {
        this.mode = mode;
        this.target = target;
        this.implicitReceiver = implicitReceiver;
        this.ast = ast;
        this.setter = setter;
        this.lifecycleEvent = lifecycleEvent;
        this.directiveRecord = directiveRecord;
    }
    BindingRecord.prototype.isDirectiveLifecycle = function () { return this.mode === DIRECTIVE_LIFECYCLE; };
    BindingRecord.prototype.callOnChanges = function () {
        return lang_1.isPresent(this.directiveRecord) && this.directiveRecord.callOnChanges;
    };
    BindingRecord.prototype.isDefaultChangeDetection = function () {
        return lang_1.isBlank(this.directiveRecord) || this.directiveRecord.isDefaultChangeDetection();
    };
    BindingRecord.createDirectiveDoCheck = function (directiveRecord) {
        return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "DoCheck", directiveRecord);
    };
    BindingRecord.createDirectiveOnInit = function (directiveRecord) {
        return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "OnInit", directiveRecord);
    };
    BindingRecord.createDirectiveOnChanges = function (directiveRecord) {
        return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "OnChanges", directiveRecord);
    };
    BindingRecord.createForDirective = function (ast, propertyName, setter, directiveRecord) {
        var elementIndex = directiveRecord.directiveIndex.elementIndex;
        var t = new BindingTarget(DIRECTIVE, elementIndex, propertyName, null, ast.toString());
        return new BindingRecord(DIRECTIVE, t, 0, ast, setter, null, directiveRecord);
    };
    BindingRecord.createForElementProperty = function (ast, elementIndex, propertyName) {
        var t = new BindingTarget(ELEMENT_PROPERTY, elementIndex, propertyName, null, ast.toString());
        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
    };
    BindingRecord.createForElementAttribute = function (ast, elementIndex, attributeName) {
        var t = new BindingTarget(ELEMENT_ATTRIBUTE, elementIndex, attributeName, null, ast.toString());
        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
    };
    BindingRecord.createForElementClass = function (ast, elementIndex, className) {
        var t = new BindingTarget(ELEMENT_CLASS, elementIndex, className, null, ast.toString());
        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
    };
    BindingRecord.createForElementStyle = function (ast, elementIndex, styleName, unit) {
        var t = new BindingTarget(ELEMENT_STYLE, elementIndex, styleName, unit, ast.toString());
        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
    };
    BindingRecord.createForHostProperty = function (directiveIndex, ast, propertyName) {
        var t = new BindingTarget(ELEMENT_PROPERTY, directiveIndex.elementIndex, propertyName, null, ast.toString());
        return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
    };
    BindingRecord.createForHostAttribute = function (directiveIndex, ast, attributeName) {
        var t = new BindingTarget(ELEMENT_ATTRIBUTE, directiveIndex.elementIndex, attributeName, null, ast.toString());
        return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
    };
    BindingRecord.createForHostClass = function (directiveIndex, ast, className) {
        var t = new BindingTarget(ELEMENT_CLASS, directiveIndex.elementIndex, className, null, ast.toString());
        return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
    };
    BindingRecord.createForHostStyle = function (directiveIndex, ast, styleName, unit) {
        var t = new BindingTarget(ELEMENT_STYLE, directiveIndex.elementIndex, styleName, unit, ast.toString());
        return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
    };
    BindingRecord.createForTextNode = function (ast, elementIndex) {
        var t = new BindingTarget(TEXT_NODE, elementIndex, null, null, ast.toString());
        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
    };
    BindingRecord.createForEvent = function (ast, eventName, elementIndex) {
        var t = new BindingTarget(EVENT, elementIndex, eventName, null, ast.toString());
        return new BindingRecord(EVENT, t, 0, ast, null, null, null);
    };
    BindingRecord.createForHostEvent = function (ast, eventName, directiveRecord) {
        var directiveIndex = directiveRecord.directiveIndex;
        var t = new BindingTarget(HOST_EVENT, directiveIndex.elementIndex, eventName, null, ast.toString());
        return new BindingRecord(HOST_EVENT, t, directiveIndex, ast, null, null, directiveRecord);
    };
    return BindingRecord;
})();
exports.BindingRecord = BindingRecord;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection.js":[function(require,module,exports){
'use strict';var iterable_differs_1 = require('./differs/iterable_differs');
var default_iterable_differ_1 = require('./differs/default_iterable_differ');
var keyvalue_differs_1 = require('./differs/keyvalue_differs');
var default_keyvalue_differ_1 = require('./differs/default_keyvalue_differ');
var lang_1 = require('angular2/src/core/facade/lang');
var ast_1 = require('./parser/ast');
exports.ASTWithSource = ast_1.ASTWithSource;
exports.AST = ast_1.AST;
exports.AstTransformer = ast_1.AstTransformer;
exports.PropertyRead = ast_1.PropertyRead;
exports.LiteralArray = ast_1.LiteralArray;
exports.ImplicitReceiver = ast_1.ImplicitReceiver;
var lexer_1 = require('./parser/lexer');
exports.Lexer = lexer_1.Lexer;
var parser_1 = require('./parser/parser');
exports.Parser = parser_1.Parser;
var locals_1 = require('./parser/locals');
exports.Locals = locals_1.Locals;
var exceptions_1 = require('./exceptions');
exports.DehydratedException = exceptions_1.DehydratedException;
exports.ExpressionChangedAfterItHasBeenCheckedException = exceptions_1.ExpressionChangedAfterItHasBeenCheckedException;
exports.ChangeDetectionError = exceptions_1.ChangeDetectionError;
var interfaces_1 = require('./interfaces');
exports.ChangeDetectorDefinition = interfaces_1.ChangeDetectorDefinition;
exports.DebugContext = interfaces_1.DebugContext;
exports.ChangeDetectorGenConfig = interfaces_1.ChangeDetectorGenConfig;
var constants_1 = require('./constants');
exports.ChangeDetectionStrategy = constants_1.ChangeDetectionStrategy;
exports.CHANGE_DECTION_STRATEGY_VALUES = constants_1.CHANGE_DECTION_STRATEGY_VALUES;
var proto_change_detector_1 = require('./proto_change_detector');
exports.DynamicProtoChangeDetector = proto_change_detector_1.DynamicProtoChangeDetector;
var jit_proto_change_detector_1 = require('./jit_proto_change_detector');
exports.JitProtoChangeDetector = jit_proto_change_detector_1.JitProtoChangeDetector;
var binding_record_1 = require('./binding_record');
exports.BindingRecord = binding_record_1.BindingRecord;
exports.BindingTarget = binding_record_1.BindingTarget;
var directive_record_1 = require('./directive_record');
exports.DirectiveIndex = directive_record_1.DirectiveIndex;
exports.DirectiveRecord = directive_record_1.DirectiveRecord;
var dynamic_change_detector_1 = require('./dynamic_change_detector');
exports.DynamicChangeDetector = dynamic_change_detector_1.DynamicChangeDetector;
var change_detector_ref_1 = require('./change_detector_ref');
exports.ChangeDetectorRef = change_detector_ref_1.ChangeDetectorRef;
var iterable_differs_2 = require('./differs/iterable_differs');
exports.IterableDiffers = iterable_differs_2.IterableDiffers;
var keyvalue_differs_2 = require('./differs/keyvalue_differs');
exports.KeyValueDiffers = keyvalue_differs_2.KeyValueDiffers;
var change_detection_util_1 = require('./change_detection_util');
exports.WrappedValue = change_detection_util_1.WrappedValue;
exports.SimpleChange = change_detection_util_1.SimpleChange;
/**
 * Structural diffing for `Object`s and `Map`s.
 */
exports.keyValDiff = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new default_keyvalue_differ_1.DefaultKeyValueDifferFactory())]);
/**
 * Structural diffing for `Iterable` types such as `Array`s.
 */
exports.iterableDiff = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new default_iterable_differ_1.DefaultIterableDifferFactory())]);
exports.defaultIterableDiffers = lang_1.CONST_EXPR(new iterable_differs_1.IterableDiffers(exports.iterableDiff));
exports.defaultKeyValueDiffers = lang_1.CONST_EXPR(new keyvalue_differs_1.KeyValueDiffers(exports.keyValDiff));

},{"./binding_record":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/binding_record.js","./change_detection_util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection_util.js","./change_detector_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detector_ref.js","./constants":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/constants.js","./differs/default_iterable_differ":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/differs/default_iterable_differ.js","./differs/default_keyvalue_differ":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/differs/default_keyvalue_differ.js","./differs/iterable_differs":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/differs/iterable_differs.js","./differs/keyvalue_differs":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/differs/keyvalue_differs.js","./directive_record":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/directive_record.js","./dynamic_change_detector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/dynamic_change_detector.js","./exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/exceptions.js","./interfaces":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/interfaces.js","./jit_proto_change_detector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/jit_proto_change_detector.js","./parser/ast":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/parser/ast.js","./parser/lexer":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/parser/lexer.js","./parser/locals":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/parser/locals.js","./parser/parser":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/parser/parser.js","./proto_change_detector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/proto_change_detector.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection_jit_generator.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var abstract_change_detector_1 = require('./abstract_change_detector');
var change_detection_util_1 = require('./change_detection_util');
var codegen_name_util_1 = require('./codegen_name_util');
var codegen_logic_util_1 = require('./codegen_logic_util');
var codegen_facade_1 = require('./codegen_facade');
var proto_change_detector_1 = require('./proto_change_detector');
/**
 * The code generator takes a list of proto records and creates a function/class
 * that "emulates" what the developer would write by hand to implement the same
 * kind of behaviour.
 *
 * This code should be kept in sync with the Dart transformer's
 * `angular2.transform.template_compiler.change_detector_codegen` library. If you make updates
 * here, please make equivalent changes there.
*/
var IS_CHANGED_LOCAL = "isChanged";
var CHANGES_LOCAL = "changes";
var ChangeDetectorJITGenerator = (function () {
    function ChangeDetectorJITGenerator(definition, changeDetectionUtilVarName, abstractChangeDetectorVarName) {
        this.changeDetectionUtilVarName = changeDetectionUtilVarName;
        this.abstractChangeDetectorVarName = abstractChangeDetectorVarName;
        var propertyBindingRecords = proto_change_detector_1.createPropertyRecords(definition);
        var eventBindingRecords = proto_change_detector_1.createEventRecords(definition);
        var propertyBindingTargets = definition.bindingRecords.map(function (b) { return b.target; });
        this.id = definition.id;
        this.changeDetectionStrategy = definition.strategy;
        this.genConfig = definition.genConfig;
        this.records = propertyBindingRecords;
        this.propertyBindingTargets = propertyBindingTargets;
        this.eventBindings = eventBindingRecords;
        this.directiveRecords = definition.directiveRecords;
        this._names = new codegen_name_util_1.CodegenNameUtil(this.records, this.eventBindings, this.directiveRecords, this.changeDetectionUtilVarName);
        this._logic = new codegen_logic_util_1.CodegenLogicUtil(this._names, this.changeDetectionUtilVarName, this.changeDetectionStrategy);
        this.typeName = codegen_name_util_1.sanitizeName("ChangeDetector_" + this.id);
    }
    ChangeDetectorJITGenerator.prototype.generate = function () {
        var factorySource = "\n      " + this.generateSource() + "\n      return function(dispatcher) {\n        return new " + this.typeName + "(dispatcher);\n      }\n    ";
        return new Function(this.abstractChangeDetectorVarName, this.changeDetectionUtilVarName, factorySource)(abstract_change_detector_1.AbstractChangeDetector, change_detection_util_1.ChangeDetectionUtil);
    };
    ChangeDetectorJITGenerator.prototype.generateSource = function () {
        var _this = this;
        return "\n      var " + this.typeName + " = function " + this.typeName + "(dispatcher) {\n        " + this.abstractChangeDetectorVarName + ".call(\n            this, " + JSON.stringify(this.id) + ", dispatcher, " + this.records.length + ",\n            " + this.typeName + ".gen_propertyBindingTargets, " + this.typeName + ".gen_directiveIndices,\n            " + codegen_facade_1.codify(this.changeDetectionStrategy) + ");\n        this.dehydrateDirectives(false);\n      }\n\n      " + this.typeName + ".prototype = Object.create(" + this.abstractChangeDetectorVarName + ".prototype);\n\n      " + this.typeName + ".prototype.detectChangesInRecordsInternal = function(throwOnChange) {\n        " + this._names.genInitLocals() + "\n        var " + IS_CHANGED_LOCAL + " = false;\n        var " + CHANGES_LOCAL + " = null;\n\n        " + this.records.map(function (r) { return _this._genRecord(r); }).join("\n") + "\n      }\n\n      " + this._maybeGenHandleEventInternal() + "\n\n      " + this._genCheckNoChanges() + "\n\n      " + this._maybeGenAfterContentLifecycleCallbacks() + "\n\n      " + this._maybeGenAfterViewLifecycleCallbacks() + "\n\n      " + this._maybeGenHydrateDirectives() + "\n\n      " + this._maybeGenDehydrateDirectives() + "\n\n      " + this._genPropertyBindingTargets() + "\n\n      " + this._genDirectiveIndices() + "\n    ";
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genPropertyBindingTargets = function () {
        var targets = this._logic.genPropertyBindingTargets(this.propertyBindingTargets, this.genConfig.genDebugInfo);
        return this.typeName + ".gen_propertyBindingTargets = " + targets + ";";
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genDirectiveIndices = function () {
        var indices = this._logic.genDirectiveIndices(this.directiveRecords);
        return this.typeName + ".gen_directiveIndices = " + indices + ";";
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._maybeGenHandleEventInternal = function () {
        var _this = this;
        if (this.eventBindings.length > 0) {
            var handlers = this.eventBindings.map(function (eb) { return _this._genEventBinding(eb); }).join("\n");
            return "\n        " + this.typeName + ".prototype.handleEventInternal = function(eventName, elIndex, locals) {\n          var " + this._names.getPreventDefaultAccesor() + " = false;\n          " + this._names.genInitEventLocals() + "\n          " + handlers + "\n          return " + this._names.getPreventDefaultAccesor() + ";\n        }\n      ";
        }
        else {
            return '';
        }
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genEventBinding = function (eb) {
        var _this = this;
        var recs = eb.records.map(function (r) { return _this._genEventBindingEval(eb, r); }).join("\n");
        return "\n    if (eventName === \"" + eb.eventName + "\" && elIndex === " + eb.elIndex + ") {\n      " + recs + "\n    }";
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genEventBindingEval = function (eb, r) {
        if (r.lastInBinding) {
            var evalRecord = this._logic.genEventBindingEvalValue(eb, r);
            var markPath = this._genMarkPathToRootAsCheckOnce(r);
            var prevDefault = this._genUpdatePreventDefault(eb, r);
            return evalRecord + "\n" + markPath + "\n" + prevDefault;
        }
        else {
            return this._logic.genEventBindingEvalValue(eb, r);
        }
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genMarkPathToRootAsCheckOnce = function (r) {
        var br = r.bindingRecord;
        if (br.isDefaultChangeDetection()) {
            return "";
        }
        else {
            return this._names.getDetectorName(br.directiveRecord.directiveIndex) + ".markPathToRootAsCheckOnce();";
        }
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genUpdatePreventDefault = function (eb, r) {
        var local = this._names.getEventLocalName(eb, r.selfIndex);
        return "if (" + local + " === false) { " + this._names.getPreventDefaultAccesor() + " = true};";
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._maybeGenDehydrateDirectives = function () {
        var destroyPipesCode = this._names.genPipeOnDestroy();
        if (destroyPipesCode) {
            destroyPipesCode = "if (destroyPipes) { " + destroyPipesCode + " }";
        }
        var dehydrateFieldsCode = this._names.genDehydrateFields();
        if (!destroyPipesCode && !dehydrateFieldsCode)
            return '';
        return this.typeName + ".prototype.dehydrateDirectives = function(destroyPipes) {\n        " + destroyPipesCode + "\n        " + dehydrateFieldsCode + "\n    }";
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._maybeGenHydrateDirectives = function () {
        var hydrateDirectivesCode = this._logic.genHydrateDirectives(this.directiveRecords);
        var hydrateDetectorsCode = this._logic.genHydrateDetectors(this.directiveRecords);
        if (!hydrateDirectivesCode && !hydrateDetectorsCode)
            return '';
        return this.typeName + ".prototype.hydrateDirectives = function(directives) {\n      " + hydrateDirectivesCode + "\n      " + hydrateDetectorsCode + "\n    }";
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._maybeGenAfterContentLifecycleCallbacks = function () {
        var notifications = this._logic.genContentLifecycleCallbacks(this.directiveRecords);
        if (notifications.length > 0) {
            var directiveNotifications = notifications.join("\n");
            return "\n        " + this.typeName + ".prototype.afterContentLifecycleCallbacksInternal = function() {\n          " + directiveNotifications + "\n        }\n      ";
        }
        else {
            return '';
        }
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._maybeGenAfterViewLifecycleCallbacks = function () {
        var notifications = this._logic.genViewLifecycleCallbacks(this.directiveRecords);
        if (notifications.length > 0) {
            var directiveNotifications = notifications.join("\n");
            return "\n        " + this.typeName + ".prototype.afterViewLifecycleCallbacksInternal = function() {\n          " + directiveNotifications + "\n        }\n      ";
        }
        else {
            return '';
        }
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genRecord = function (r) {
        var rec;
        if (r.isLifeCycleRecord()) {
            rec = this._genDirectiveLifecycle(r);
        }
        else if (r.isPipeRecord()) {
            rec = this._genPipeCheck(r);
        }
        else {
            rec = this._genReferenceCheck(r);
        }
        return "\n      " + this._maybeFirstInBinding(r) + "\n      " + rec + "\n      " + this._maybeGenLastInDirective(r) + "\n    ";
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genDirectiveLifecycle = function (r) {
        if (r.name === "DoCheck") {
            return this._genOnCheck(r);
        }
        else if (r.name === "OnInit") {
            return this._genOnInit(r);
        }
        else if (r.name === "OnChanges") {
            return this._genOnChange(r);
        }
        else {
            throw new exceptions_1.BaseException("Unknown lifecycle event '" + r.name + "'");
        }
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genPipeCheck = function (r) {
        var _this = this;
        var context = this._names.getLocalName(r.contextIndex);
        var argString = r.args.map(function (arg) { return _this._names.getLocalName(arg); }).join(", ");
        var oldValue = this._names.getFieldName(r.selfIndex);
        var newValue = this._names.getLocalName(r.selfIndex);
        var pipe = this._names.getPipeName(r.selfIndex);
        var pipeName = r.name;
        var init = "\n      if (" + pipe + " === " + this.changeDetectionUtilVarName + ".uninitialized) {\n        " + pipe + " = " + this._names.getPipesAccessorName() + ".get('" + pipeName + "');\n      }\n    ";
        var read = newValue + " = " + pipe + ".pipe.transform(" + context + ", [" + argString + "]);";
        var contexOrArgCheck = r.args.map(function (a) { return _this._names.getChangeName(a); });
        contexOrArgCheck.push(this._names.getChangeName(r.contextIndex));
        var condition = "!" + pipe + ".pure || (" + contexOrArgCheck.join(" || ") + ")";
        var check = "\n      if (" + oldValue + " !== " + newValue + ") {\n        " + newValue + " = " + this.changeDetectionUtilVarName + ".unwrapValue(" + newValue + ")\n        " + this._genChangeMarker(r) + "\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
        var genCode = r.shouldBeChecked() ? "" + read + check : read;
        if (r.isUsedByOtherRecord()) {
            return init + " if (" + condition + ") { " + genCode + " } else { " + newValue + " = " + oldValue + "; }";
        }
        else {
            return init + " if (" + condition + ") { " + genCode + " }";
        }
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genReferenceCheck = function (r) {
        var _this = this;
        var oldValue = this._names.getFieldName(r.selfIndex);
        var newValue = this._names.getLocalName(r.selfIndex);
        var read = "\n      " + this._logic.genPropertyBindingEvalValue(r) + "\n    ";
        var check = "\n      if (" + newValue + " !== " + oldValue + ") {\n        " + this._genChangeMarker(r) + "\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
        var genCode = r.shouldBeChecked() ? "" + read + check : read;
        if (r.isPureFunction()) {
            var condition = r.args.map(function (a) { return _this._names.getChangeName(a); }).join(" || ");
            if (r.isUsedByOtherRecord()) {
                return "if (" + condition + ") { " + genCode + " } else { " + newValue + " = " + oldValue + "; }";
            }
            else {
                return "if (" + condition + ") { " + genCode + " }";
            }
        }
        else {
            return genCode;
        }
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genChangeMarker = function (r) {
        return r.argumentToPureFunction ? this._names.getChangeName(r.selfIndex) + " = true" : "";
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genUpdateDirectiveOrElement = function (r) {
        if (!r.lastInBinding)
            return "";
        var newValue = this._names.getLocalName(r.selfIndex);
        var oldValue = this._names.getFieldName(r.selfIndex);
        var notifyDebug = this.genConfig.logBindingUpdate ? "this.logBindingUpdate(" + newValue + ");" : "";
        var br = r.bindingRecord;
        if (br.target.isDirective()) {
            var directiveProperty = this._names.getDirectiveName(br.directiveRecord.directiveIndex) + "." + br.target.name;
            return "\n        " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n        " + directiveProperty + " = " + newValue + ";\n        " + notifyDebug + "\n        " + IS_CHANGED_LOCAL + " = true;\n      ";
        }
        else {
            return "\n        " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n        this.notifyDispatcher(" + newValue + ");\n        " + notifyDebug + "\n      ";
        }
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genThrowOnChangeCheck = function (oldValue, newValue) {
        if (this.genConfig.genCheckNoChanges) {
            return "\n        if(throwOnChange) {\n          this.throwOnChangeError(" + oldValue + ", " + newValue + ");\n        }\n        ";
        }
        else {
            return '';
        }
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genCheckNoChanges = function () {
        if (this.genConfig.genCheckNoChanges) {
            return this.typeName + ".prototype.checkNoChanges = function() { this.runDetectChanges(true); }";
        }
        else {
            return '';
        }
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genAddToChanges = function (r) {
        var newValue = this._names.getLocalName(r.selfIndex);
        var oldValue = this._names.getFieldName(r.selfIndex);
        if (!r.bindingRecord.callOnChanges())
            return "";
        return CHANGES_LOCAL + " = this.addChange(" + CHANGES_LOCAL + ", " + oldValue + ", " + newValue + ");";
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._maybeFirstInBinding = function (r) {
        var prev = change_detection_util_1.ChangeDetectionUtil.protoByIndex(this.records, r.selfIndex - 1);
        var firstInBindng = lang_1.isBlank(prev) || prev.bindingRecord !== r.bindingRecord;
        return firstInBindng && !r.bindingRecord.isDirectiveLifecycle() ?
            this._names.getPropertyBindingIndex() + " = " + r.propertyBindingIndex + ";" :
            '';
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._maybeGenLastInDirective = function (r) {
        if (!r.lastInDirective)
            return "";
        return "\n      " + CHANGES_LOCAL + " = null;\n      " + this._genNotifyOnPushDetectors(r) + "\n      " + IS_CHANGED_LOCAL + " = false;\n    ";
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genOnCheck = function (r) {
        var br = r.bindingRecord;
        return "if (!throwOnChange) " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".doCheck();";
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genOnInit = function (r) {
        var br = r.bindingRecord;
        return "if (!throwOnChange && !" + this._names.getAlreadyCheckedName() + ") " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".onInit();";
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genOnChange = function (r) {
        var br = r.bindingRecord;
        return "if (!throwOnChange && " + CHANGES_LOCAL + ") " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".onChanges(" + CHANGES_LOCAL + ");";
    };
    /** @internal */
    ChangeDetectorJITGenerator.prototype._genNotifyOnPushDetectors = function (r) {
        var br = r.bindingRecord;
        if (!r.lastInDirective || br.isDefaultChangeDetection())
            return "";
        var retVal = "\n      if(" + IS_CHANGED_LOCAL + ") {\n        " + this._names.getDetectorName(br.directiveRecord.directiveIndex) + ".markAsCheckOnce();\n      }\n    ";
        return retVal;
    };
    return ChangeDetectorJITGenerator;
})();
exports.ChangeDetectorJITGenerator = ChangeDetectorJITGenerator;

},{"./abstract_change_detector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/abstract_change_detector.js","./change_detection_util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection_util.js","./codegen_facade":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/codegen_facade.js","./codegen_logic_util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/codegen_logic_util.js","./codegen_name_util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/codegen_name_util.js","./proto_change_detector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/proto_change_detector.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection_util.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var constants_1 = require('./constants');
var pipe_lifecycle_reflector_1 = require('./pipe_lifecycle_reflector');
var binding_record_1 = require('./binding_record');
var directive_record_1 = require('./directive_record');
/**
 * Indicates that the result of a {@link PipeMetadata} transformation has changed even though the
 * reference
 * has not changed.
 *
 * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
 *
 * Example:
 *
 * ```
 * if (this._latestValue === this._latestReturnedValue) {
 *    return this._latestReturnedValue;
 *  } else {
 *    this._latestReturnedValue = this._latestValue;
 *    return WrappedValue.wrap(this._latestValue); // this will force update
 *  }
 * ```
 */
var WrappedValue = (function () {
    function WrappedValue(wrapped) {
        this.wrapped = wrapped;
    }
    WrappedValue.wrap = function (value) {
        var w = _wrappedValues[_wrappedIndex++ % 5];
        w.wrapped = value;
        return w;
    };
    return WrappedValue;
})();
exports.WrappedValue = WrappedValue;
var _wrappedValues = [
    new WrappedValue(null),
    new WrappedValue(null),
    new WrappedValue(null),
    new WrappedValue(null),
    new WrappedValue(null)
];
var _wrappedIndex = 0;
var SimpleChange = (function () {
    function SimpleChange(previousValue, currentValue) {
        this.previousValue = previousValue;
        this.currentValue = currentValue;
    }
    SimpleChange.prototype.isFirstChange = function () { return this.previousValue === ChangeDetectionUtil.uninitialized; };
    return SimpleChange;
})();
exports.SimpleChange = SimpleChange;
var _simpleChangesIndex = 0;
var _simpleChanges = [
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null),
    new SimpleChange(null, null)
];
function _simpleChange(previousValue, currentValue) {
    var index = _simpleChangesIndex++ % 20;
    var s = _simpleChanges[index];
    s.previousValue = previousValue;
    s.currentValue = currentValue;
    return s;
}
/* tslint:disable:requireParameterType */
var ChangeDetectionUtil = (function () {
    function ChangeDetectionUtil() {
    }
    ChangeDetectionUtil.arrayFn0 = function () { return []; };
    ChangeDetectionUtil.arrayFn1 = function (a1) { return [a1]; };
    ChangeDetectionUtil.arrayFn2 = function (a1, a2) { return [a1, a2]; };
    ChangeDetectionUtil.arrayFn3 = function (a1, a2, a3) { return [a1, a2, a3]; };
    ChangeDetectionUtil.arrayFn4 = function (a1, a2, a3, a4) { return [a1, a2, a3, a4]; };
    ChangeDetectionUtil.arrayFn5 = function (a1, a2, a3, a4, a5) { return [a1, a2, a3, a4, a5]; };
    ChangeDetectionUtil.arrayFn6 = function (a1, a2, a3, a4, a5, a6) { return [a1, a2, a3, a4, a5, a6]; };
    ChangeDetectionUtil.arrayFn7 = function (a1, a2, a3, a4, a5, a6, a7) { return [a1, a2, a3, a4, a5, a6, a7]; };
    ChangeDetectionUtil.arrayFn8 = function (a1, a2, a3, a4, a5, a6, a7, a8) {
        return [a1, a2, a3, a4, a5, a6, a7, a8];
    };
    ChangeDetectionUtil.arrayFn9 = function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return [a1, a2, a3, a4, a5, a6, a7, a8, a9];
    };
    ChangeDetectionUtil.operation_negate = function (value) { return !value; };
    ChangeDetectionUtil.operation_add = function (left, right) { return left + right; };
    ChangeDetectionUtil.operation_subtract = function (left, right) { return left - right; };
    ChangeDetectionUtil.operation_multiply = function (left, right) { return left * right; };
    ChangeDetectionUtil.operation_divide = function (left, right) { return left / right; };
    ChangeDetectionUtil.operation_remainder = function (left, right) { return left % right; };
    ChangeDetectionUtil.operation_equals = function (left, right) { return left == right; };
    ChangeDetectionUtil.operation_not_equals = function (left, right) { return left != right; };
    ChangeDetectionUtil.operation_identical = function (left, right) { return left === right; };
    ChangeDetectionUtil.operation_not_identical = function (left, right) { return left !== right; };
    ChangeDetectionUtil.operation_less_then = function (left, right) { return left < right; };
    ChangeDetectionUtil.operation_greater_then = function (left, right) { return left > right; };
    ChangeDetectionUtil.operation_less_or_equals_then = function (left, right) { return left <= right; };
    ChangeDetectionUtil.operation_greater_or_equals_then = function (left, right) { return left >= right; };
    ChangeDetectionUtil.operation_logical_and = function (left, right) { return left && right; };
    ChangeDetectionUtil.operation_logical_or = function (left, right) { return left || right; };
    ChangeDetectionUtil.cond = function (cond, trueVal, falseVal) { return cond ? trueVal : falseVal; };
    ChangeDetectionUtil.mapFn = function (keys) {
        function buildMap(values) {
            var res = collection_1.StringMapWrapper.create();
            for (var i = 0; i < keys.length; ++i) {
                collection_1.StringMapWrapper.set(res, keys[i], values[i]);
            }
            return res;
        }
        switch (keys.length) {
            case 0:
                return function () { return []; };
            case 1:
                return function (a1) { return buildMap([a1]); };
            case 2:
                return function (a1, a2) { return buildMap([a1, a2]); };
            case 3:
                return function (a1, a2, a3) { return buildMap([a1, a2, a3]); };
            case 4:
                return function (a1, a2, a3, a4) { return buildMap([a1, a2, a3, a4]); };
            case 5:
                return function (a1, a2, a3, a4, a5) { return buildMap([a1, a2, a3, a4, a5]); };
            case 6:
                return function (a1, a2, a3, a4, a5, a6) { return buildMap([a1, a2, a3, a4, a5, a6]); };
            case 7:
                return function (a1, a2, a3, a4, a5, a6, a7) { return buildMap([a1, a2, a3, a4, a5, a6, a7]); };
            case 8:
                return function (a1, a2, a3, a4, a5, a6, a7, a8) { return buildMap([a1, a2, a3, a4, a5, a6, a7, a8]); };
            case 9:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
                    return buildMap([a1, a2, a3, a4, a5, a6, a7, a8, a9]);
                };
            default:
                throw new exceptions_1.BaseException("Does not support literal maps with more than 9 elements");
        }
    };
    ChangeDetectionUtil.keyedAccess = function (obj, args) { return obj[args[0]]; };
    ChangeDetectionUtil.unwrapValue = function (value) {
        if (value instanceof WrappedValue) {
            return value.wrapped;
        }
        else {
            return value;
        }
    };
    ChangeDetectionUtil.changeDetectionMode = function (strategy) {
        return constants_1.isDefaultChangeDetectionStrategy(strategy) ? constants_1.ChangeDetectionStrategy.CheckAlways :
            constants_1.ChangeDetectionStrategy.CheckOnce;
    };
    ChangeDetectionUtil.simpleChange = function (previousValue, currentValue) {
        return _simpleChange(previousValue, currentValue);
    };
    ChangeDetectionUtil.isValueBlank = function (value) { return lang_1.isBlank(value); };
    ChangeDetectionUtil.s = function (value) { return lang_1.isPresent(value) ? "" + value : ''; };
    ChangeDetectionUtil.protoByIndex = function (protos, selfIndex) {
        return selfIndex < 1 ?
            null :
            protos[selfIndex - 1]; // self index is shifted by one because of context
    };
    ChangeDetectionUtil.callPipeOnDestroy = function (selectedPipe) {
        if (pipe_lifecycle_reflector_1.implementsOnDestroy(selectedPipe.pipe)) {
            selectedPipe.pipe.onDestroy();
        }
    };
    ChangeDetectionUtil.bindingTarget = function (mode, elementIndex, name, unit, debug) {
        return new binding_record_1.BindingTarget(mode, elementIndex, name, unit, debug);
    };
    ChangeDetectionUtil.directiveIndex = function (elementIndex, directiveIndex) {
        return new directive_record_1.DirectiveIndex(elementIndex, directiveIndex);
    };
    ChangeDetectionUtil.uninitialized = lang_1.CONST_EXPR(new Object());
    return ChangeDetectionUtil;
})();
exports.ChangeDetectionUtil = ChangeDetectionUtil;

},{"./binding_record":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/binding_record.js","./constants":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/constants.js","./directive_record":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/directive_record.js","./pipe_lifecycle_reflector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/pipe_lifecycle_reflector.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detector_ref.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var constants_1 = require('./constants');
var ChangeDetectorRef = (function () {
    function ChangeDetectorRef() {
    }
    return ChangeDetectorRef;
})();
exports.ChangeDetectorRef = ChangeDetectorRef;
var ChangeDetectorRef_ = (function (_super) {
    __extends(ChangeDetectorRef_, _super);
    function ChangeDetectorRef_(_cd) {
        _super.call(this);
        this._cd = _cd;
    }
    ChangeDetectorRef_.prototype.markForCheck = function () { this._cd.markPathToRootAsCheckOnce(); };
    ChangeDetectorRef_.prototype.detach = function () { this._cd.mode = constants_1.ChangeDetectionStrategy.Detached; };
    ChangeDetectorRef_.prototype.detectChanges = function () { this._cd.detectChanges(); };
    ChangeDetectorRef_.prototype.reattach = function () {
        this._cd.mode = constants_1.ChangeDetectionStrategy.CheckAlways;
        this.markForCheck();
    };
    return ChangeDetectorRef_;
})(ChangeDetectorRef);
exports.ChangeDetectorRef_ = ChangeDetectorRef_;

},{"./constants":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/constants.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/coalesce.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var collection_1 = require('angular2/src/core/facade/collection');
var proto_record_1 = require('./proto_record');
/**
 * Removes "duplicate" records. It assuming that record evaluation does not
 * have side-effects.
 *
 * Records that are not last in bindings are removed and all the indices
 * of the records that depend on them are updated.
 *
 * Records that are last in bindings CANNOT be removed, and instead are
 * replaced with very cheap SELF records.
 */
function coalesce(records) {
    var res = [];
    var indexMap = new collection_1.Map();
    for (var i = 0; i < records.length; ++i) {
        var r = records[i];
        var record = _replaceIndices(r, res.length + 1, indexMap);
        var matchingRecord = _findMatching(record, res);
        if (lang_1.isPresent(matchingRecord) && record.lastInBinding) {
            res.push(_selfRecord(record, matchingRecord.selfIndex, res.length + 1));
            indexMap.set(r.selfIndex, matchingRecord.selfIndex);
            matchingRecord.referencedBySelf = true;
        }
        else if (lang_1.isPresent(matchingRecord) && !record.lastInBinding) {
            if (record.argumentToPureFunction) {
                matchingRecord.argumentToPureFunction = true;
            }
            indexMap.set(r.selfIndex, matchingRecord.selfIndex);
        }
        else {
            res.push(record);
            indexMap.set(r.selfIndex, record.selfIndex);
        }
    }
    return res;
}
exports.coalesce = coalesce;
function _selfRecord(r, contextIndex, selfIndex) {
    return new proto_record_1.ProtoRecord(proto_record_1.RecordType.Self, "self", null, [], r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.lastInBinding, r.lastInDirective, false, false, r.propertyBindingIndex);
}
function _findMatching(r, rs) {
    return collection_1.ListWrapper.find(rs, function (rr) { return rr.mode !== proto_record_1.RecordType.DirectiveLifecycle && _sameDirIndex(rr, r) &&
        rr.mode === r.mode && lang_1.looseIdentical(rr.funcOrValue, r.funcOrValue) &&
        rr.contextIndex === r.contextIndex && lang_1.looseIdentical(rr.name, r.name) &&
        collection_1.ListWrapper.equals(rr.args, r.args); });
}
function _sameDirIndex(a, b) {
    var di1 = lang_1.isBlank(a.directiveIndex) ? null : a.directiveIndex.directiveIndex;
    var ei1 = lang_1.isBlank(a.directiveIndex) ? null : a.directiveIndex.elementIndex;
    var di2 = lang_1.isBlank(b.directiveIndex) ? null : b.directiveIndex.directiveIndex;
    var ei2 = lang_1.isBlank(b.directiveIndex) ? null : b.directiveIndex.elementIndex;
    return di1 === di2 && ei1 === ei2;
}
function _replaceIndices(r, selfIndex, indexMap) {
    var args = r.args.map(function (a) { return _map(indexMap, a); });
    var contextIndex = _map(indexMap, r.contextIndex);
    return new proto_record_1.ProtoRecord(r.mode, r.name, r.funcOrValue, args, r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.lastInBinding, r.lastInDirective, r.argumentToPureFunction, r.referencedBySelf, r.propertyBindingIndex);
}
function _map(indexMap, value) {
    var r = indexMap.get(value);
    return lang_1.isPresent(r) ? r : value;
}

},{"./proto_record":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/proto_record.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/codegen_facade.js":[function(require,module,exports){
'use strict';/**
 * Converts `funcOrValue` to a string which can be used in generated code.
 */
function codify(obj) {
    return JSON.stringify(obj);
}
exports.codify = codify;
function rawString(str) {
    return "'" + str + "'";
}
exports.rawString = rawString;
/**
 * Combine the strings of generated code into a single interpolated string.
 * Each element of `vals` is expected to be a string literal or a codegen'd
 * call to a method returning a string.
 */
function combineGeneratedStrings(vals) {
    return vals.join(' + ');
}
exports.combineGeneratedStrings = combineGeneratedStrings;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/codegen_logic_util.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var codegen_facade_1 = require('./codegen_facade');
var proto_record_1 = require('./proto_record');
var constants_1 = require('./constants');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
/**
 * Class responsible for providing change detection logic for change detector classes.
 */
var CodegenLogicUtil = (function () {
    function CodegenLogicUtil(_names, _utilName, _changeDetection) {
        this._names = _names;
        this._utilName = _utilName;
        this._changeDetection = _changeDetection;
    }
    /**
     * Generates a statement which updates the local variable representing `protoRec` with the current
     * value of the record. Used by property bindings.
     */
    CodegenLogicUtil.prototype.genPropertyBindingEvalValue = function (protoRec) {
        var _this = this;
        return this._genEvalValue(protoRec, function (idx) { return _this._names.getLocalName(idx); }, this._names.getLocalsAccessorName());
    };
    /**
     * Generates a statement which updates the local variable representing `protoRec` with the current
     * value of the record. Used by event bindings.
     */
    CodegenLogicUtil.prototype.genEventBindingEvalValue = function (eventRecord, protoRec) {
        var _this = this;
        return this._genEvalValue(protoRec, function (idx) { return _this._names.getEventLocalName(eventRecord, idx); }, "locals");
    };
    CodegenLogicUtil.prototype._genEvalValue = function (protoRec, getLocalName, localsAccessor) {
        var context = (protoRec.contextIndex == -1) ?
            this._names.getDirectiveName(protoRec.directiveIndex) :
            getLocalName(protoRec.contextIndex);
        var argString = protoRec.args.map(function (arg) { return getLocalName(arg); }).join(", ");
        var rhs;
        switch (protoRec.mode) {
            case proto_record_1.RecordType.Self:
                rhs = context;
                break;
            case proto_record_1.RecordType.Const:
                rhs = codegen_facade_1.codify(protoRec.funcOrValue);
                break;
            case proto_record_1.RecordType.PropertyRead:
                rhs = this._observe(context + "." + protoRec.name, protoRec);
                break;
            case proto_record_1.RecordType.SafeProperty:
                var read = this._observe(context + "." + protoRec.name, protoRec);
                rhs =
                    this._utilName + ".isValueBlank(" + context + ") ? null : " + this._observe(read, protoRec);
                break;
            case proto_record_1.RecordType.PropertyWrite:
                rhs = context + "." + protoRec.name + " = " + getLocalName(protoRec.args[0]);
                break;
            case proto_record_1.RecordType.Local:
                rhs = this._observe(localsAccessor + ".get(" + codegen_facade_1.rawString(protoRec.name) + ")", protoRec);
                break;
            case proto_record_1.RecordType.InvokeMethod:
                rhs = this._observe(context + "." + protoRec.name + "(" + argString + ")", protoRec);
                break;
            case proto_record_1.RecordType.SafeMethodInvoke:
                var invoke = context + "." + protoRec.name + "(" + argString + ")";
                rhs =
                    this._utilName + ".isValueBlank(" + context + ") ? null : " + this._observe(invoke, protoRec);
                break;
            case proto_record_1.RecordType.InvokeClosure:
                rhs = context + "(" + argString + ")";
                break;
            case proto_record_1.RecordType.PrimitiveOp:
                rhs = this._utilName + "." + protoRec.name + "(" + argString + ")";
                break;
            case proto_record_1.RecordType.CollectionLiteral:
                rhs = this._utilName + "." + protoRec.name + "(" + argString + ")";
                break;
            case proto_record_1.RecordType.Interpolate:
                rhs = this._genInterpolation(protoRec);
                break;
            case proto_record_1.RecordType.KeyedRead:
                rhs = this._observe(context + "[" + getLocalName(protoRec.args[0]) + "]", protoRec);
                break;
            case proto_record_1.RecordType.KeyedWrite:
                rhs = context + "[" + getLocalName(protoRec.args[0]) + "] = " + getLocalName(protoRec.args[1]);
                break;
            case proto_record_1.RecordType.Chain:
                rhs = 'null';
                break;
            default:
                throw new exceptions_1.BaseException("Unknown operation " + protoRec.mode);
        }
        return getLocalName(protoRec.selfIndex) + " = " + rhs + ";";
    };
    /** @internal */
    CodegenLogicUtil.prototype._observe = function (exp, rec) {
        // This is an experimental feature. Works only in Dart.
        if (this._changeDetection === constants_1.ChangeDetectionStrategy.OnPushObserve) {
            return "this.observeValue(" + exp + ", " + rec.selfIndex + ")";
        }
        else {
            return exp;
        }
    };
    CodegenLogicUtil.prototype.genPropertyBindingTargets = function (propertyBindingTargets, genDebugInfo) {
        var _this = this;
        var bs = propertyBindingTargets.map(function (b) {
            if (lang_1.isBlank(b))
                return "null";
            var debug = genDebugInfo ? codegen_facade_1.codify(b.debug) : "null";
            return _this._utilName + ".bindingTarget(" + codegen_facade_1.codify(b.mode) + ", " + b.elementIndex + ", " + codegen_facade_1.codify(b.name) + ", " + codegen_facade_1.codify(b.unit) + ", " + debug + ")";
        });
        return "[" + bs.join(", ") + "]";
    };
    CodegenLogicUtil.prototype.genDirectiveIndices = function (directiveRecords) {
        var _this = this;
        var bs = directiveRecords.map(function (b) {
            return (_this._utilName + ".directiveIndex(" + b.directiveIndex.elementIndex + ", " + b.directiveIndex.directiveIndex + ")");
        });
        return "[" + bs.join(", ") + "]";
    };
    /** @internal */
    CodegenLogicUtil.prototype._genInterpolation = function (protoRec) {
        var iVals = [];
        for (var i = 0; i < protoRec.args.length; ++i) {
            iVals.push(codegen_facade_1.codify(protoRec.fixedArgs[i]));
            iVals.push(this._utilName + ".s(" + this._names.getLocalName(protoRec.args[i]) + ")");
        }
        iVals.push(codegen_facade_1.codify(protoRec.fixedArgs[protoRec.args.length]));
        return codegen_facade_1.combineGeneratedStrings(iVals);
    };
    CodegenLogicUtil.prototype.genHydrateDirectives = function (directiveRecords) {
        var res = [];
        for (var i = 0; i < directiveRecords.length; ++i) {
            var r = directiveRecords[i];
            res.push(this._names.getDirectiveName(r.directiveIndex) + " = " + this._genReadDirective(i) + ";");
        }
        return res.join("\n");
    };
    CodegenLogicUtil.prototype._genReadDirective = function (index) {
        // This is an experimental feature. Works only in Dart.
        if (this._changeDetection === constants_1.ChangeDetectionStrategy.OnPushObserve) {
            return "this.observeDirective(this.getDirectiveFor(directives, " + index + "), " + index + ")";
        }
        else {
            return "this.getDirectiveFor(directives, " + index + ")";
        }
    };
    CodegenLogicUtil.prototype.genHydrateDetectors = function (directiveRecords) {
        var res = [];
        for (var i = 0; i < directiveRecords.length; ++i) {
            var r = directiveRecords[i];
            if (!r.isDefaultChangeDetection()) {
                res.push(this._names.getDetectorName(r.directiveIndex) + " = this.getDetectorFor(directives, " + i + ");");
            }
        }
        return res.join("\n");
    };
    CodegenLogicUtil.prototype.genContentLifecycleCallbacks = function (directiveRecords) {
        var res = [];
        // NOTE(kegluneq): Order is important!
        for (var i = directiveRecords.length - 1; i >= 0; --i) {
            var dir = directiveRecords[i];
            if (dir.callAfterContentInit) {
                res.push("if(! " + this._names.getAlreadyCheckedName() + ") " + this._names.getDirectiveName(dir.directiveIndex) + ".afterContentInit();");
            }
            if (dir.callAfterContentChecked) {
                res.push(this._names.getDirectiveName(dir.directiveIndex) + ".afterContentChecked();");
            }
        }
        return res;
    };
    CodegenLogicUtil.prototype.genViewLifecycleCallbacks = function (directiveRecords) {
        var res = [];
        // NOTE(kegluneq): Order is important!
        for (var i = directiveRecords.length - 1; i >= 0; --i) {
            var dir = directiveRecords[i];
            if (dir.callAfterViewInit) {
                res.push("if(! " + this._names.getAlreadyCheckedName() + ") " + this._names.getDirectiveName(dir.directiveIndex) + ".afterViewInit();");
            }
            if (dir.callAfterViewChecked) {
                res.push(this._names.getDirectiveName(dir.directiveIndex) + ".afterViewChecked();");
            }
        }
        return res;
    };
    return CodegenLogicUtil;
})();
exports.CodegenLogicUtil = CodegenLogicUtil;

},{"./codegen_facade":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/codegen_facade.js","./constants":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/constants.js","./proto_record":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/proto_record.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/codegen_name_util.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var collection_1 = require('angular2/src/core/facade/collection');
// The names of these fields must be kept in sync with abstract_change_detector.ts or change
// detection will fail.
var _ALREADY_CHECKED_ACCESSOR = "alreadyChecked";
var _CONTEXT_ACCESSOR = "context";
var _PROP_BINDING_INDEX = "propertyBindingIndex";
var _DIRECTIVES_ACCESSOR = "directiveIndices";
var _DISPATCHER_ACCESSOR = "dispatcher";
var _LOCALS_ACCESSOR = "locals";
var _MODE_ACCESSOR = "mode";
var _PIPES_ACCESSOR = "pipes";
var _PROTOS_ACCESSOR = "protos";
// `context` is always first.
exports.CONTEXT_INDEX = 0;
var _FIELD_PREFIX = 'this.';
var _whiteSpaceRegExp = lang_1.RegExpWrapper.create("\\W", "g");
/**
 * Returns `s` with all non-identifier characters removed.
 */
function sanitizeName(s) {
    return lang_1.StringWrapper.replaceAll(s, _whiteSpaceRegExp, '');
}
exports.sanitizeName = sanitizeName;
/**
 * Class responsible for providing field and local variable names for change detector classes.
 * Also provides some convenience functions, for example, declaring variables, destroying pipes,
 * and dehydrating the detector.
 */
var CodegenNameUtil = (function () {
    function CodegenNameUtil(_records, _eventBindings, _directiveRecords, _utilName) {
        this._records = _records;
        this._eventBindings = _eventBindings;
        this._directiveRecords = _directiveRecords;
        this._utilName = _utilName;
        /** @internal */
        this._sanitizedEventNames = new collection_1.Map();
        this._sanitizedNames = collection_1.ListWrapper.createFixedSize(this._records.length + 1);
        this._sanitizedNames[exports.CONTEXT_INDEX] = _CONTEXT_ACCESSOR;
        for (var i = 0, iLen = this._records.length; i < iLen; ++i) {
            this._sanitizedNames[i + 1] = sanitizeName("" + this._records[i].name + i);
        }
        for (var ebIndex = 0; ebIndex < _eventBindings.length; ++ebIndex) {
            var eb = _eventBindings[ebIndex];
            var names = [_CONTEXT_ACCESSOR];
            for (var i = 0, iLen = eb.records.length; i < iLen; ++i) {
                names.push(sanitizeName("" + eb.records[i].name + i + "_" + ebIndex));
            }
            this._sanitizedEventNames.set(eb, names);
        }
    }
    /** @internal */
    CodegenNameUtil.prototype._addFieldPrefix = function (name) { return "" + _FIELD_PREFIX + name; };
    CodegenNameUtil.prototype.getDispatcherName = function () { return this._addFieldPrefix(_DISPATCHER_ACCESSOR); };
    CodegenNameUtil.prototype.getPipesAccessorName = function () { return this._addFieldPrefix(_PIPES_ACCESSOR); };
    CodegenNameUtil.prototype.getProtosName = function () { return this._addFieldPrefix(_PROTOS_ACCESSOR); };
    CodegenNameUtil.prototype.getDirectivesAccessorName = function () { return this._addFieldPrefix(_DIRECTIVES_ACCESSOR); };
    CodegenNameUtil.prototype.getLocalsAccessorName = function () { return this._addFieldPrefix(_LOCALS_ACCESSOR); };
    CodegenNameUtil.prototype.getAlreadyCheckedName = function () { return this._addFieldPrefix(_ALREADY_CHECKED_ACCESSOR); };
    CodegenNameUtil.prototype.getModeName = function () { return this._addFieldPrefix(_MODE_ACCESSOR); };
    CodegenNameUtil.prototype.getPropertyBindingIndex = function () { return this._addFieldPrefix(_PROP_BINDING_INDEX); };
    CodegenNameUtil.prototype.getLocalName = function (idx) { return "l_" + this._sanitizedNames[idx]; };
    CodegenNameUtil.prototype.getEventLocalName = function (eb, idx) {
        return "l_" + this._sanitizedEventNames.get(eb)[idx];
    };
    CodegenNameUtil.prototype.getChangeName = function (idx) { return "c_" + this._sanitizedNames[idx]; };
    /**
     * Generate a statement initializing local variables used when detecting changes.
     */
    CodegenNameUtil.prototype.genInitLocals = function () {
        var declarations = [];
        var assignments = [];
        for (var i = 0, iLen = this.getFieldCount(); i < iLen; ++i) {
            if (i == exports.CONTEXT_INDEX) {
                declarations.push(this.getLocalName(i) + " = " + this.getFieldName(i));
            }
            else {
                var rec = this._records[i - 1];
                if (rec.argumentToPureFunction) {
                    var changeName = this.getChangeName(i);
                    declarations.push(this.getLocalName(i) + "," + changeName);
                    assignments.push(changeName);
                }
                else {
                    declarations.push("" + this.getLocalName(i));
                }
            }
        }
        var assignmentsCode = collection_1.ListWrapper.isEmpty(assignments) ? '' : assignments.join('=') + " = false;";
        return "var " + declarations.join(',') + ";" + assignmentsCode;
    };
    /**
     * Generate a statement initializing local variables for event handlers.
     */
    CodegenNameUtil.prototype.genInitEventLocals = function () {
        var _this = this;
        var res = [(this.getLocalName(exports.CONTEXT_INDEX) + " = " + this.getFieldName(exports.CONTEXT_INDEX))];
        this._sanitizedEventNames.forEach(function (names, eb) {
            for (var i = 0; i < names.length; ++i) {
                if (i !== exports.CONTEXT_INDEX) {
                    res.push("" + _this.getEventLocalName(eb, i));
                }
            }
        });
        return res.length > 1 ? "var " + res.join(',') + ";" : '';
    };
    CodegenNameUtil.prototype.getPreventDefaultAccesor = function () { return "preventDefault"; };
    CodegenNameUtil.prototype.getFieldCount = function () { return this._sanitizedNames.length; };
    CodegenNameUtil.prototype.getFieldName = function (idx) { return this._addFieldPrefix(this._sanitizedNames[idx]); };
    CodegenNameUtil.prototype.getAllFieldNames = function () {
        var fieldList = [];
        for (var k = 0, kLen = this.getFieldCount(); k < kLen; ++k) {
            if (k === 0 || this._records[k - 1].shouldBeChecked()) {
                fieldList.push(this.getFieldName(k));
            }
        }
        for (var i = 0, iLen = this._records.length; i < iLen; ++i) {
            var rec = this._records[i];
            if (rec.isPipeRecord()) {
                fieldList.push(this.getPipeName(rec.selfIndex));
            }
        }
        for (var j = 0, jLen = this._directiveRecords.length; j < jLen; ++j) {
            var dRec = this._directiveRecords[j];
            fieldList.push(this.getDirectiveName(dRec.directiveIndex));
            if (!dRec.isDefaultChangeDetection()) {
                fieldList.push(this.getDetectorName(dRec.directiveIndex));
            }
        }
        return fieldList;
    };
    /**
     * Generates statements which clear all fields so that the change detector is dehydrated.
     */
    CodegenNameUtil.prototype.genDehydrateFields = function () {
        var fields = this.getAllFieldNames();
        collection_1.ListWrapper.removeAt(fields, exports.CONTEXT_INDEX);
        if (collection_1.ListWrapper.isEmpty(fields))
            return '';
        // At least one assignment.
        fields.push(this._utilName + ".uninitialized;");
        return fields.join(' = ');
    };
    /**
     * Generates statements destroying all pipe variables.
     */
    CodegenNameUtil.prototype.genPipeOnDestroy = function () {
        var _this = this;
        return collection_1.ListWrapper.filter(this._records, function (r) { return r.isPipeRecord(); })
            .map(function (r) { return (_this._utilName + ".callPipeOnDestroy(" + _this.getPipeName(r.selfIndex) + ");"); })
            .join('\n');
    };
    CodegenNameUtil.prototype.getPipeName = function (idx) {
        return this._addFieldPrefix(this._sanitizedNames[idx] + "_pipe");
    };
    CodegenNameUtil.prototype.getDirectiveName = function (d) {
        return this._addFieldPrefix("directive_" + d.name);
    };
    CodegenNameUtil.prototype.getDetectorName = function (d) { return this._addFieldPrefix("detector_" + d.name); };
    return CodegenNameUtil;
})();
exports.CodegenNameUtil = CodegenNameUtil;

},{"angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/constants.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
(function (ChangeDetectionStrategy) {
    /**
     * `CheckedOnce` means that after calling detectChanges the mode of the change detector
     * will become `Checked`.
     */
    ChangeDetectionStrategy[ChangeDetectionStrategy["CheckOnce"] = 0] = "CheckOnce";
    /**
     * `Checked` means that the change detector should be skipped until its mode changes to
     * `CheckOnce`.
     */
    ChangeDetectionStrategy[ChangeDetectionStrategy["Checked"] = 1] = "Checked";
    /**
     * `CheckAlways` means that after calling detectChanges the mode of the change detector
     * will remain `CheckAlways`.
     */
    ChangeDetectionStrategy[ChangeDetectionStrategy["CheckAlways"] = 2] = "CheckAlways";
    /**
     * `Detached` means that the change detector sub tree is not a part of the main tree and
     * should be skipped.
     */
    ChangeDetectionStrategy[ChangeDetectionStrategy["Detached"] = 3] = "Detached";
    /**
     * `OnPush` means that the change detector's mode will be set to `CheckOnce` during hydration.
     */
    ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 4] = "OnPush";
    /**
     * `Default` means that the change detector's mode will be set to `CheckAlways` during hydration.
     */
    ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 5] = "Default";
    /**
     * This is an experimental feature. Works only in Dart.
     */
    ChangeDetectionStrategy[ChangeDetectionStrategy["OnPushObserve"] = 6] = "OnPushObserve";
})(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
var ChangeDetectionStrategy = exports.ChangeDetectionStrategy;
exports.CHANGE_DECTION_STRATEGY_VALUES = [
    ChangeDetectionStrategy.CheckOnce,
    ChangeDetectionStrategy.Checked,
    ChangeDetectionStrategy.CheckAlways,
    ChangeDetectionStrategy.Detached,
    ChangeDetectionStrategy.OnPush,
    ChangeDetectionStrategy.Default,
    ChangeDetectionStrategy.OnPushObserve
];
function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return lang_1.isBlank(changeDetectionStrategy) ||
        changeDetectionStrategy === ChangeDetectionStrategy.Default;
}
exports.isDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/differs/default_iterable_differ.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var lang_2 = require('angular2/src/core/facade/lang');
var DefaultIterableDifferFactory = (function () {
    function DefaultIterableDifferFactory() {
    }
    DefaultIterableDifferFactory.prototype.supports = function (obj) { return collection_1.isListLikeIterable(obj); };
    DefaultIterableDifferFactory.prototype.create = function (cdRef) { return new DefaultIterableDiffer(); };
    DefaultIterableDifferFactory = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [])
    ], DefaultIterableDifferFactory);
    return DefaultIterableDifferFactory;
})();
exports.DefaultIterableDifferFactory = DefaultIterableDifferFactory;
var DefaultIterableDiffer = (function () {
    function DefaultIterableDiffer() {
        this._collection = null;
        this._length = null;
        // Keeps track of the used records at any point in time (during & across `_check()` calls)
        this._linkedRecords = null;
        // Keeps track of the removed records at any point in time during `_check()` calls.
        this._unlinkedRecords = null;
        this._previousItHead = null;
        this._itHead = null;
        this._itTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._movesHead = null;
        this._movesTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
    }
    Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
        get: function () { return this._collection; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
        get: function () { return this._length; },
        enumerable: true,
        configurable: true
    });
    DefaultIterableDiffer.prototype.forEachItem = function (fn) {
        var record;
        for (record = this._itHead; record !== null; record = record._next) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
        var record;
        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
        var record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
        var record;
        for (record = this._movesHead; record !== null; record = record._nextMoved) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
        var record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.diff = function (collection) {
        if (lang_2.isBlank(collection))
            collection = [];
        if (!collection_1.isListLikeIterable(collection)) {
            throw new exceptions_1.BaseException("Error trying to diff '" + collection + "'");
        }
        if (this.check(collection)) {
            return this;
        }
        else {
            return null;
        }
    };
    DefaultIterableDiffer.prototype.onDestroy = function () { };
    // todo(vicb): optim for UnmodifiableListView (frozen arrays)
    DefaultIterableDiffer.prototype.check = function (collection) {
        var _this = this;
        this._reset();
        var record = this._itHead;
        var mayBeDirty = false;
        var index;
        var item;
        if (lang_2.isArray(collection)) {
            var list = collection;
            this._length = collection.length;
            for (index = 0; index < this._length; index++) {
                item = list[index];
                if (record === null || !lang_2.looseIdentical(record.item, item)) {
                    record = this._mismatch(record, item, index);
                    mayBeDirty = true;
                }
                else if (mayBeDirty) {
                    // TODO(misko): can we limit this to duplicates only?
                    record = this._verifyReinsertion(record, item, index);
                }
                record = record._next;
            }
        }
        else {
            index = 0;
            collection_1.iterateListLike(collection, function (item) {
                if (record === null || !lang_2.looseIdentical(record.item, item)) {
                    record = _this._mismatch(record, item, index);
                    mayBeDirty = true;
                }
                else if (mayBeDirty) {
                    // TODO(misko): can we limit this to duplicates only?
                    record = _this._verifyReinsertion(record, item, index);
                }
                record = record._next;
                index++;
            });
            this._length = index;
        }
        this._truncate(record);
        this._collection = collection;
        return this.isDirty;
    };
    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
        // CollectionChanges is considered dirty if it has any additions, moves or removals.
        get: function () {
            return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Reset the state of the change objects to show no changes. This means set previousKey to
     * currentKey, and clear all of the queues (additions, moves, removals).
     * Set the previousIndexes of moved and added items to their currentIndexes
     * Reset the list of additions, moves and removals
     *
     * @internal
     */
    DefaultIterableDiffer.prototype._reset = function () {
        if (this.isDirty) {
            var record;
            var nextRecord;
            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
            }
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                record.previousIndex = record.currentIndex;
            }
            this._additionsHead = this._additionsTail = null;
            for (record = this._movesHead; record !== null; record = nextRecord) {
                record.previousIndex = record.currentIndex;
                nextRecord = record._nextMoved;
            }
            this._movesHead = this._movesTail = null;
            this._removalsHead = this._removalsTail = null;
        }
    };
    /**
     * This is the core function which handles differences between collections.
     *
     * - `record` is the record which we saw at this position last time. If null then it is a new
     *   item.
     * - `item` is the current item in the collection
     * - `index` is the position of the item in the collection
     *
     * @internal
     */
    DefaultIterableDiffer.prototype._mismatch = function (record, item, index) {
        // The previous record after which we will append the current one.
        var previousRecord;
        if (record === null) {
            previousRecord = this._itTail;
        }
        else {
            previousRecord = record._prev;
            // Remove the record from the collection since we know it does not match the item.
            this._remove(record);
        }
        // Attempt to see if we have seen the item before.
        record = this._linkedRecords === null ? null : this._linkedRecords.get(item, index);
        if (record !== null) {
            // We have seen this before, we need to move it forward in the collection.
            this._moveAfter(record, previousRecord, index);
        }
        else {
            // Never seen it, check evicted list.
            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
            if (record !== null) {
                // It is an item which we have evicted earlier: reinsert it back into the list.
                this._reinsertAfter(record, previousRecord, index);
            }
            else {
                // It is a new item: add it.
                record = this._addAfter(new CollectionChangeRecord(item), previousRecord, index);
            }
        }
        return record;
    };
    /**
     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
     *
     * Use case: `[a, a]` => `[b, a, a]`
     *
     * If we did not have this check then the insertion of `b` would:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) leave `a` at index `1` as is. <-- this is wrong!
     *   3) reinsert `a` at index 2. <-- this is wrong!
     *
     * The correct behavior is:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) reinsert `a` at index 1.
     *   3) move `a` at from `1` to `2`.
     *
     *
     * Double check that we have not evicted a duplicate item. We need to check if the item type may
     * have already been removed:
     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
     * at the end.
     *
     * @internal
     */
    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, index) {
        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
        if (reinsertRecord !== null) {
            record = this._reinsertAfter(reinsertRecord, record._prev, index);
        }
        else if (record.currentIndex != index) {
            record.currentIndex = index;
            this._addToMoves(record, index);
        }
        return record;
    };
    /**
     * Get rid of any excess {@link CollectionChangeRecord}s from the previous collection
     *
     * - `record` The first excess {@link CollectionChangeRecord}.
     *
     * @internal
     */
    DefaultIterableDiffer.prototype._truncate = function (record) {
        // Anything after that needs to be removed;
        while (record !== null) {
            var nextRecord = record._next;
            this._addToRemovals(this._unlink(record));
            record = nextRecord;
        }
        if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.clear();
        }
        if (this._additionsTail !== null) {
            this._additionsTail._nextAdded = null;
        }
        if (this._movesTail !== null) {
            this._movesTail._nextMoved = null;
        }
        if (this._itTail !== null) {
            this._itTail._next = null;
        }
        if (this._removalsTail !== null) {
            this._removalsTail._nextRemoved = null;
        }
    };
    /** @internal */
    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
        if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.remove(record);
        }
        var prev = record._prevRemoved;
        var next = record._nextRemoved;
        if (prev === null) {
            this._removalsHead = next;
        }
        else {
            prev._nextRemoved = next;
        }
        if (next === null) {
            this._removalsTail = prev;
        }
        else {
            next._prevRemoved = prev;
        }
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
    };
    /** @internal */
    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
        this._unlink(record);
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
    };
    /** @internal */
    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
        this._insertAfter(record, prevRecord, index);
        if (this._additionsTail === null) {
            // todo(vicb)
            // assert(this._additionsHead === null);
            this._additionsTail = this._additionsHead = record;
        }
        else {
            // todo(vicb)
            // assert(_additionsTail._nextAdded === null);
            // assert(record._nextAdded === null);
            this._additionsTail = this._additionsTail._nextAdded = record;
        }
        return record;
    };
    /** @internal */
    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
        // todo(vicb)
        // assert(record != prevRecord);
        // assert(record._next === null);
        // assert(record._prev === null);
        var next = prevRecord === null ? this._itHead : prevRecord._next;
        // todo(vicb)
        // assert(next != record);
        // assert(prevRecord != record);
        record._next = next;
        record._prev = prevRecord;
        if (next === null) {
            this._itTail = record;
        }
        else {
            next._prev = record;
        }
        if (prevRecord === null) {
            this._itHead = record;
        }
        else {
            prevRecord._next = record;
        }
        if (this._linkedRecords === null) {
            this._linkedRecords = new _DuplicateMap();
        }
        this._linkedRecords.put(record);
        record.currentIndex = index;
        return record;
    };
    /** @internal */
    DefaultIterableDiffer.prototype._remove = function (record) {
        return this._addToRemovals(this._unlink(record));
    };
    /** @internal */
    DefaultIterableDiffer.prototype._unlink = function (record) {
        if (this._linkedRecords !== null) {
            this._linkedRecords.remove(record);
        }
        var prev = record._prev;
        var next = record._next;
        // todo(vicb)
        // assert((record._prev = null) === null);
        // assert((record._next = null) === null);
        if (prev === null) {
            this._itHead = next;
        }
        else {
            prev._next = next;
        }
        if (next === null) {
            this._itTail = prev;
        }
        else {
            next._prev = prev;
        }
        return record;
    };
    /** @internal */
    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
        // todo(vicb)
        // assert(record._nextMoved === null);
        if (record.previousIndex === toIndex) {
            return record;
        }
        if (this._movesTail === null) {
            // todo(vicb)
            // assert(_movesHead === null);
            this._movesTail = this._movesHead = record;
        }
        else {
            // todo(vicb)
            // assert(_movesTail._nextMoved === null);
            this._movesTail = this._movesTail._nextMoved = record;
        }
        return record;
    };
    /** @internal */
    DefaultIterableDiffer.prototype._addToRemovals = function (record) {
        if (this._unlinkedRecords === null) {
            this._unlinkedRecords = new _DuplicateMap();
        }
        this._unlinkedRecords.put(record);
        record.currentIndex = null;
        record._nextRemoved = null;
        if (this._removalsTail === null) {
            // todo(vicb)
            // assert(_removalsHead === null);
            this._removalsTail = this._removalsHead = record;
            record._prevRemoved = null;
        }
        else {
            // todo(vicb)
            // assert(_removalsTail._nextRemoved === null);
            // assert(record._nextRemoved === null);
            record._prevRemoved = this._removalsTail;
            this._removalsTail = this._removalsTail._nextRemoved = record;
        }
        return record;
    };
    DefaultIterableDiffer.prototype.toString = function () {
        var record;
        var list = [];
        for (record = this._itHead; record !== null; record = record._next) {
            list.push(record);
        }
        var previous = [];
        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
            previous.push(record);
        }
        var additions = [];
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            additions.push(record);
        }
        var moves = [];
        for (record = this._movesHead; record !== null; record = record._nextMoved) {
            moves.push(record);
        }
        var removals = [];
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            removals.push(record);
        }
        return "collection: " + list.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" +
            "additions: " + additions.join(', ') + "\n" + "moves: " + moves.join(', ') + "\n" +
            "removals: " + removals.join(', ') + "\n";
    };
    return DefaultIterableDiffer;
})();
exports.DefaultIterableDiffer = DefaultIterableDiffer;
var CollectionChangeRecord = (function () {
    function CollectionChangeRecord(item) {
        this.item = item;
        this.currentIndex = null;
        this.previousIndex = null;
        /** @internal */
        this._nextPrevious = null;
        /** @internal */
        this._prev = null;
        /** @internal */
        this._next = null;
        /** @internal */
        this._prevDup = null;
        /** @internal */
        this._nextDup = null;
        /** @internal */
        this._prevRemoved = null;
        /** @internal */
        this._nextRemoved = null;
        /** @internal */
        this._nextAdded = null;
        /** @internal */
        this._nextMoved = null;
    }
    CollectionChangeRecord.prototype.toString = function () {
        return this.previousIndex === this.currentIndex ?
            lang_2.stringify(this.item) :
            lang_2.stringify(this.item) + '[' + lang_2.stringify(this.previousIndex) + '->' +
                lang_2.stringify(this.currentIndex) + ']';
    };
    return CollectionChangeRecord;
})();
exports.CollectionChangeRecord = CollectionChangeRecord;
// A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item
var _DuplicateItemRecordList = (function () {
    function _DuplicateItemRecordList() {
        /** @internal */
        this._head = null;
        /** @internal */
        this._tail = null;
    }
    /**
     * Append the record to the list of duplicates.
     *
     * Note: by design all records in the list of duplicates hold the same value in record.item.
     */
    _DuplicateItemRecordList.prototype.add = function (record) {
        if (this._head === null) {
            this._head = this._tail = record;
            record._nextDup = null;
            record._prevDup = null;
        }
        else {
            // todo(vicb)
            // assert(record.item ==  _head.item ||
            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
            this._tail._nextDup = record;
            record._prevDup = this._tail;
            record._nextDup = null;
            this._tail = record;
        }
    };
    // Returns a CollectionChangeRecord having CollectionChangeRecord.item == item and
    // CollectionChangeRecord.currentIndex >= afterIndex
    _DuplicateItemRecordList.prototype.get = function (item, afterIndex) {
        var record;
        for (record = this._head; record !== null; record = record._nextDup) {
            if ((afterIndex === null || afterIndex < record.currentIndex) &&
                lang_2.looseIdentical(record.item, item)) {
                return record;
            }
        }
        return null;
    };
    /**
     * Remove one {@link CollectionChangeRecord} from the list of duplicates.
     *
     * Returns whether the list of duplicates is empty.
     */
    _DuplicateItemRecordList.prototype.remove = function (record) {
        // todo(vicb)
        // assert(() {
        //  // verify that the record being removed is in the list.
        //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
        //    if (identical(cursor, record)) return true;
        //  }
        //  return false;
        //});
        var prev = record._prevDup;
        var next = record._nextDup;
        if (prev === null) {
            this._head = next;
        }
        else {
            prev._nextDup = next;
        }
        if (next === null) {
            this._tail = prev;
        }
        else {
            next._prevDup = prev;
        }
        return this._head === null;
    };
    return _DuplicateItemRecordList;
})();
var _DuplicateMap = (function () {
    function _DuplicateMap() {
        this.map = new Map();
    }
    _DuplicateMap.prototype.put = function (record) {
        // todo(vicb) handle corner cases
        var key = lang_2.getMapKey(record.item);
        var duplicates = this.map.get(key);
        if (!lang_2.isPresent(duplicates)) {
            duplicates = new _DuplicateItemRecordList();
            this.map.set(key, duplicates);
        }
        duplicates.add(record);
    };
    /**
     * Retrieve the `value` using key. Because the CollectionChangeRecord value maybe one which we
     * have already iterated over, we use the afterIndex to pretend it is not there.
     *
     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
     * have any more `a`s needs to return the last `a` not the first or second.
     */
    _DuplicateMap.prototype.get = function (value, afterIndex) {
        if (afterIndex === void 0) { afterIndex = null; }
        var key = lang_2.getMapKey(value);
        var recordList = this.map.get(key);
        return lang_2.isBlank(recordList) ? null : recordList.get(value, afterIndex);
    };
    /**
     * Removes a {@link CollectionChangeRecord} from the list of duplicates.
     *
     * The list of duplicates also is removed from the map if it gets empty.
     */
    _DuplicateMap.prototype.remove = function (record) {
        var key = lang_2.getMapKey(record.item);
        // todo(vicb)
        // assert(this.map.containsKey(key));
        var recordList = this.map.get(key);
        // Remove the list of duplicates when it gets empty
        if (recordList.remove(record)) {
            this.map.delete(key);
        }
        return record;
    };
    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
        get: function () { return this.map.size === 0; },
        enumerable: true,
        configurable: true
    });
    _DuplicateMap.prototype.clear = function () { this.map.clear(); };
    _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + lang_2.stringify(this.map) + ')'; };
    return _DuplicateMap;
})();

},{"angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/differs/default_keyvalue_differ.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var DefaultKeyValueDifferFactory = (function () {
    function DefaultKeyValueDifferFactory() {
    }
    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || lang_1.isJsObject(obj); };
    DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };
    DefaultKeyValueDifferFactory = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [])
    ], DefaultKeyValueDifferFactory);
    return DefaultKeyValueDifferFactory;
})();
exports.DefaultKeyValueDifferFactory = DefaultKeyValueDifferFactory;
var DefaultKeyValueDiffer = (function () {
    function DefaultKeyValueDiffer() {
        this._records = new Map();
        this._mapHead = null;
        this._previousMapHead = null;
        this._changesHead = null;
        this._changesTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
    }
    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
        get: function () {
            return this._additionsHead !== null || this._changesHead !== null ||
                this._removalsHead !== null;
        },
        enumerable: true,
        configurable: true
    });
    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
        var record;
        for (record = this._mapHead; record !== null; record = record._next) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
        var record;
        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
        var record;
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
        var record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
        var record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.diff = function (map) {
        if (lang_1.isBlank(map))
            map = collection_1.MapWrapper.createFromPairs([]);
        if (!(map instanceof Map || lang_1.isJsObject(map))) {
            throw new exceptions_1.BaseException("Error trying to diff '" + map + "'");
        }
        if (this.check(map)) {
            return this;
        }
        else {
            return null;
        }
    };
    DefaultKeyValueDiffer.prototype.onDestroy = function () { };
    DefaultKeyValueDiffer.prototype.check = function (map) {
        var _this = this;
        this._reset();
        var records = this._records;
        var oldSeqRecord = this._mapHead;
        var lastOldSeqRecord = null;
        var lastNewSeqRecord = null;
        var seqChanged = false;
        this._forEach(map, function (value, key) {
            var newSeqRecord;
            if (oldSeqRecord !== null && key === oldSeqRecord.key) {
                newSeqRecord = oldSeqRecord;
                if (!lang_1.looseIdentical(value, oldSeqRecord.currentValue)) {
                    oldSeqRecord.previousValue = oldSeqRecord.currentValue;
                    oldSeqRecord.currentValue = value;
                    _this._addToChanges(oldSeqRecord);
                }
            }
            else {
                seqChanged = true;
                if (oldSeqRecord !== null) {
                    oldSeqRecord._next = null;
                    _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
                    _this._addToRemovals(oldSeqRecord);
                }
                if (records.has(key)) {
                    newSeqRecord = records.get(key);
                }
                else {
                    newSeqRecord = new KVChangeRecord(key);
                    records.set(key, newSeqRecord);
                    newSeqRecord.currentValue = value;
                    _this._addToAdditions(newSeqRecord);
                }
            }
            if (seqChanged) {
                if (_this._isInRemovals(newSeqRecord)) {
                    _this._removeFromRemovals(newSeqRecord);
                }
                if (lastNewSeqRecord == null) {
                    _this._mapHead = newSeqRecord;
                }
                else {
                    lastNewSeqRecord._next = newSeqRecord;
                }
            }
            lastOldSeqRecord = oldSeqRecord;
            lastNewSeqRecord = newSeqRecord;
            oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;
        });
        this._truncate(lastOldSeqRecord, oldSeqRecord);
        return this.isDirty;
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._reset = function () {
        if (this.isDirty) {
            var record;
            // Record the state of the mapping
            for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
            }
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
                record.previousValue = record.currentValue;
            }
            for (record = this._additionsHead; record != null; record = record._nextAdded) {
                record.previousValue = record.currentValue;
            }
            // todo(vicb) once assert is supported
            // assert(() {
            //  var r = _changesHead;
            //  while (r != null) {
            //    var nextRecord = r._nextChanged;
            //    r._nextChanged = null;
            //    r = nextRecord;
            //  }
            //
            //  r = _additionsHead;
            //  while (r != null) {
            //    var nextRecord = r._nextAdded;
            //    r._nextAdded = null;
            //    r = nextRecord;
            //  }
            //
            //  r = _removalsHead;
            //  while (r != null) {
            //    var nextRecord = r._nextRemoved;
            //    r._nextRemoved = null;
            //    r = nextRecord;
            //  }
            //
            //  return true;
            //});
            this._changesHead = this._changesTail = null;
            this._additionsHead = this._additionsTail = null;
            this._removalsHead = this._removalsTail = null;
        }
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
        while (record !== null) {
            if (lastRecord === null) {
                this._mapHead = null;
            }
            else {
                lastRecord._next = null;
            }
            var nextRecord = record._next;
            // todo(vicb) assert
            // assert((() {
            //  record._next = null;
            //  return true;
            //}));
            this._addToRemovals(record);
            lastRecord = record;
            record = nextRecord;
        }
        for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
            rec.previousValue = rec.currentValue;
            rec.currentValue = null;
            this._records.delete(rec.key);
        }
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
        return record === this._removalsHead || record._nextRemoved !== null ||
            record._prevRemoved !== null;
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
        // todo(vicb) assert
        // assert(record._next == null);
        // assert(record._nextAdded == null);
        // assert(record._nextChanged == null);
        // assert(record._nextRemoved == null);
        // assert(record._prevRemoved == null);
        if (this._removalsHead === null) {
            this._removalsHead = this._removalsTail = record;
        }
        else {
            this._removalsTail._nextRemoved = record;
            record._prevRemoved = this._removalsTail;
            this._removalsTail = record;
        }
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
        var next = record._next;
        if (prev === null) {
            this._mapHead = next;
        }
        else {
            prev._next = next;
        }
        // todo(vicb) assert
        // assert((() {
        //  record._next = null;
        //  return true;
        //})());
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
        // todo(vicb) assert
        // assert(record._next == null);
        // assert(record._nextAdded == null);
        // assert(record._nextChanged == null);
        var prev = record._prevRemoved;
        var next = record._nextRemoved;
        if (prev === null) {
            this._removalsHead = next;
        }
        else {
            prev._nextRemoved = next;
        }
        if (next === null) {
            this._removalsTail = prev;
        }
        else {
            next._prevRemoved = prev;
        }
        record._prevRemoved = record._nextRemoved = null;
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
        // todo(vicb): assert
        // assert(record._next == null);
        // assert(record._nextAdded == null);
        // assert(record._nextChanged == null);
        // assert(record._nextRemoved == null);
        // assert(record._prevRemoved == null);
        if (this._additionsHead === null) {
            this._additionsHead = this._additionsTail = record;
        }
        else {
            this._additionsTail._nextAdded = record;
            this._additionsTail = record;
        }
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
        // todo(vicb) assert
        // assert(record._nextAdded == null);
        // assert(record._nextChanged == null);
        // assert(record._nextRemoved == null);
        // assert(record._prevRemoved == null);
        if (this._changesHead === null) {
            this._changesHead = this._changesTail = record;
        }
        else {
            this._changesTail._nextChanged = record;
            this._changesTail = record;
        }
    };
    DefaultKeyValueDiffer.prototype.toString = function () {
        var items = [];
        var previous = [];
        var changes = [];
        var additions = [];
        var removals = [];
        var record;
        for (record = this._mapHead; record !== null; record = record._next) {
            items.push(lang_1.stringify(record));
        }
        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            previous.push(lang_1.stringify(record));
        }
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
            changes.push(lang_1.stringify(record));
        }
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            additions.push(lang_1.stringify(record));
        }
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            removals.push(lang_1.stringify(record));
        }
        return "map: " + items.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" +
            "additions: " + additions.join(', ') + "\n" + "changes: " + changes.join(', ') + "\n" +
            "removals: " + removals.join(', ') + "\n";
    };
    /** @internal */
    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
        if (obj instanceof Map) {
            obj.forEach(fn);
        }
        else {
            collection_1.StringMapWrapper.forEach(obj, fn);
        }
    };
    return DefaultKeyValueDiffer;
})();
exports.DefaultKeyValueDiffer = DefaultKeyValueDiffer;
var KVChangeRecord = (function () {
    function KVChangeRecord(key) {
        this.key = key;
        this.previousValue = null;
        this.currentValue = null;
        /** @internal */
        this._nextPrevious = null;
        /** @internal */
        this._next = null;
        /** @internal */
        this._nextAdded = null;
        /** @internal */
        this._nextRemoved = null;
        /** @internal */
        this._prevRemoved = null;
        /** @internal */
        this._nextChanged = null;
    }
    KVChangeRecord.prototype.toString = function () {
        return lang_1.looseIdentical(this.previousValue, this.currentValue) ?
            lang_1.stringify(this.key) :
            (lang_1.stringify(this.key) + '[' + lang_1.stringify(this.previousValue) + '->' +
                lang_1.stringify(this.currentValue) + ']');
    };
    return KVChangeRecord;
})();
exports.KVChangeRecord = KVChangeRecord;

},{"angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/differs/iterable_differs.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var di_1 = require('angular2/src/core/di');
/**
 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
 */
var IterableDiffers = (function () {
    function IterableDiffers(factories) {
        this.factories = factories;
    }
    IterableDiffers.create = function (factories, parent) {
        if (lang_1.isPresent(parent)) {
            var copied = collection_1.ListWrapper.clone(parent.factories);
            factories = factories.concat(copied);
            return new IterableDiffers(factories);
        }
        else {
            return new IterableDiffers(factories);
        }
    };
    /**
     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
     * inherited {@link IterableDiffers} instance with the provided factories and return a new
     * {@link IterableDiffers} instance.
     *
     * The following example shows how to extend an existing list of factories,
           * which will only be applied to the injector for this component and its children.
           * This step is all that's required to make a new {@link IterableDiffer} available.
     *
     * # Example
     *
     * ```
     * @Component({
     *   viewProviders: [
     *     IterableDiffers.extend([new ImmutableListDiffer()])
     *   ]
     * })
     * ```
     */
    IterableDiffers.extend = function (factories) {
        return new di_1.Provider(IterableDiffers, {
            useFactory: function (parent) {
                if (lang_1.isBlank(parent)) {
                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
                    // to
                    // bootstrap(), which would override default pipes instead of extending them.
                    throw new exceptions_1.BaseException('Cannot extend IterableDiffers without a parent injector');
                }
                return IterableDiffers.create(factories, parent);
            },
            // Dependency technically isn't optional, but we can provide a better error message this way.
            deps: [[IterableDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata()]]
        });
    };
    IterableDiffers.prototype.find = function (iterable) {
        var factory = collection_1.ListWrapper.find(this.factories, function (f) { return f.supports(iterable); });
        if (lang_1.isPresent(factory)) {
            return factory;
        }
        else {
            throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + iterable + "'");
        }
    };
    IterableDiffers = __decorate([
        di_1.Injectable(),
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Array])
    ], IterableDiffers);
    return IterableDiffers;
})();
exports.IterableDiffers = IterableDiffers;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/differs/keyvalue_differs.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var di_1 = require('angular2/src/core/di');
/**
 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
 */
var KeyValueDiffers = (function () {
    function KeyValueDiffers(factories) {
        this.factories = factories;
    }
    KeyValueDiffers.create = function (factories, parent) {
        if (lang_1.isPresent(parent)) {
            var copied = collection_1.ListWrapper.clone(parent.factories);
            factories = factories.concat(copied);
            return new KeyValueDiffers(factories);
        }
        else {
            return new KeyValueDiffers(factories);
        }
    };
    /**
     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
     * {@link KeyValueDiffers} instance.
     *
     * The following example shows how to extend an existing list of factories,
           * which will only be applied to the injector for this component and its children.
           * This step is all that's required to make a new {@link KeyValueDiffer} available.
     *
     * # Example
     *
     * ```
     * @Component({
     *   viewProviders: [
     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
     *   ]
     * })
     * ```
     */
    KeyValueDiffers.extend = function (factories) {
        return new di_1.Provider(KeyValueDiffers, {
            useFactory: function (parent) {
                if (lang_1.isBlank(parent)) {
                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
                    // to
                    // bootstrap(), which would override default pipes instead of extending them.
                    throw new exceptions_1.BaseException('Cannot extend KeyValueDiffers without a parent injector');
                }
                return KeyValueDiffers.create(factories, parent);
            },
            // Dependency technically isn't optional, but we can provide a better error message this way.
            deps: [[KeyValueDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata()]]
        });
    };
    KeyValueDiffers.prototype.find = function (kv) {
        var factory = collection_1.ListWrapper.find(this.factories, function (f) { return f.supports(kv); });
        if (lang_1.isPresent(factory)) {
            return factory;
        }
        else {
            throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + kv + "'");
        }
    };
    KeyValueDiffers = __decorate([
        di_1.Injectable(),
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Array])
    ], KeyValueDiffers);
    return KeyValueDiffers;
})();
exports.KeyValueDiffers = KeyValueDiffers;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/directive_record.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var constants_1 = require('./constants');
var DirectiveIndex = (function () {
    function DirectiveIndex(elementIndex, directiveIndex) {
        this.elementIndex = elementIndex;
        this.directiveIndex = directiveIndex;
    }
    Object.defineProperty(DirectiveIndex.prototype, "name", {
        get: function () { return this.elementIndex + "_" + this.directiveIndex; },
        enumerable: true,
        configurable: true
    });
    return DirectiveIndex;
})();
exports.DirectiveIndex = DirectiveIndex;
var DirectiveRecord = (function () {
    function DirectiveRecord(_a) {
        var _b = _a === void 0 ? {} : _a, directiveIndex = _b.directiveIndex, callAfterContentInit = _b.callAfterContentInit, callAfterContentChecked = _b.callAfterContentChecked, callAfterViewInit = _b.callAfterViewInit, callAfterViewChecked = _b.callAfterViewChecked, callOnChanges = _b.callOnChanges, callDoCheck = _b.callDoCheck, callOnInit = _b.callOnInit, changeDetection = _b.changeDetection;
        this.directiveIndex = directiveIndex;
        this.callAfterContentInit = lang_1.normalizeBool(callAfterContentInit);
        this.callAfterContentChecked = lang_1.normalizeBool(callAfterContentChecked);
        this.callOnChanges = lang_1.normalizeBool(callOnChanges);
        this.callAfterViewInit = lang_1.normalizeBool(callAfterViewInit);
        this.callAfterViewChecked = lang_1.normalizeBool(callAfterViewChecked);
        this.callDoCheck = lang_1.normalizeBool(callDoCheck);
        this.callOnInit = lang_1.normalizeBool(callOnInit);
        this.changeDetection = changeDetection;
    }
    DirectiveRecord.prototype.isDefaultChangeDetection = function () {
        return constants_1.isDefaultChangeDetectionStrategy(this.changeDetection);
    };
    return DirectiveRecord;
})();
exports.DirectiveRecord = DirectiveRecord;

},{"./constants":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/constants.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/dynamic_change_detector.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var abstract_change_detector_1 = require('./abstract_change_detector');
var change_detection_util_1 = require('./change_detection_util');
var constants_1 = require('./constants');
var proto_record_1 = require('./proto_record');
var DynamicChangeDetector = (function (_super) {
    __extends(DynamicChangeDetector, _super);
    function DynamicChangeDetector(id, dispatcher, numberOfPropertyProtoRecords, propertyBindingTargets, directiveIndices, strategy, _records, _eventBindings, _directiveRecords, _genConfig) {
        _super.call(this, id, dispatcher, numberOfPropertyProtoRecords, propertyBindingTargets, directiveIndices, strategy);
        this._records = _records;
        this._eventBindings = _eventBindings;
        this._directiveRecords = _directiveRecords;
        this._genConfig = _genConfig;
        this.directives = null;
        var len = _records.length + 1;
        this.values = collection_1.ListWrapper.createFixedSize(len);
        this.localPipes = collection_1.ListWrapper.createFixedSize(len);
        this.prevContexts = collection_1.ListWrapper.createFixedSize(len);
        this.changes = collection_1.ListWrapper.createFixedSize(len);
        this.dehydrateDirectives(false);
    }
    DynamicChangeDetector.prototype.handleEventInternal = function (eventName, elIndex, locals) {
        var _this = this;
        var preventDefault = false;
        this._matchingEventBindings(eventName, elIndex)
            .forEach(function (rec) {
            var res = _this._processEventBinding(rec, locals);
            if (res === false) {
                preventDefault = true;
            }
        });
        return preventDefault;
    };
    /** @internal */
    DynamicChangeDetector.prototype._processEventBinding = function (eb, locals) {
        var values = collection_1.ListWrapper.createFixedSize(eb.records.length);
        values[0] = this.values[0];
        for (var i = 0; i < eb.records.length; ++i) {
            var proto = eb.records[i];
            var res = this._calculateCurrValue(proto, values, locals);
            if (proto.lastInBinding) {
                this._markPathAsCheckOnce(proto);
                return res;
            }
            else {
                this._writeSelf(proto, res, values);
            }
        }
        throw new exceptions_1.BaseException("Cannot be reached");
    };
    /** @internal */
    DynamicChangeDetector.prototype._markPathAsCheckOnce = function (proto) {
        if (!proto.bindingRecord.isDefaultChangeDetection()) {
            var dir = proto.bindingRecord.directiveRecord;
            this._getDetectorFor(dir.directiveIndex).markPathToRootAsCheckOnce();
        }
    };
    /** @internal */
    DynamicChangeDetector.prototype._matchingEventBindings = function (eventName, elIndex) {
        return collection_1.ListWrapper.filter(this._eventBindings, function (eb) { return eb.eventName == eventName && eb.elIndex === elIndex; });
    };
    DynamicChangeDetector.prototype.hydrateDirectives = function (directives) {
        this.values[0] = this.context;
        this.directives = directives;
        if (this.strategy === constants_1.ChangeDetectionStrategy.OnPushObserve) {
            for (var i = 0; i < this.directiveIndices.length; ++i) {
                var index = this.directiveIndices[i];
                _super.prototype.observeDirective.call(this, directives.getDirectiveFor(index), i);
            }
        }
    };
    DynamicChangeDetector.prototype.dehydrateDirectives = function (destroyPipes) {
        if (destroyPipes) {
            this._destroyPipes();
        }
        this.values[0] = null;
        this.directives = null;
        collection_1.ListWrapper.fill(this.values, change_detection_util_1.ChangeDetectionUtil.uninitialized, 1);
        collection_1.ListWrapper.fill(this.changes, false);
        collection_1.ListWrapper.fill(this.localPipes, null);
        collection_1.ListWrapper.fill(this.prevContexts, change_detection_util_1.ChangeDetectionUtil.uninitialized);
    };
    /** @internal */
    DynamicChangeDetector.prototype._destroyPipes = function () {
        for (var i = 0; i < this.localPipes.length; ++i) {
            if (lang_1.isPresent(this.localPipes[i])) {
                change_detection_util_1.ChangeDetectionUtil.callPipeOnDestroy(this.localPipes[i]);
            }
        }
    };
    DynamicChangeDetector.prototype.checkNoChanges = function () { this.runDetectChanges(true); };
    DynamicChangeDetector.prototype.detectChangesInRecordsInternal = function (throwOnChange) {
        var protos = this._records;
        var changes = null;
        var isChanged = false;
        for (var i = 0; i < protos.length; ++i) {
            var proto = protos[i];
            var bindingRecord = proto.bindingRecord;
            var directiveRecord = bindingRecord.directiveRecord;
            if (this._firstInBinding(proto)) {
                this.propertyBindingIndex = proto.propertyBindingIndex;
            }
            if (proto.isLifeCycleRecord()) {
                if (proto.name === "DoCheck" && !throwOnChange) {
                    this._getDirectiveFor(directiveRecord.directiveIndex).doCheck();
                }
                else if (proto.name === "OnInit" && !throwOnChange && !this.alreadyChecked) {
                    this._getDirectiveFor(directiveRecord.directiveIndex).onInit();
                }
                else if (proto.name === "OnChanges" && lang_1.isPresent(changes) && !throwOnChange) {
                    this._getDirectiveFor(directiveRecord.directiveIndex).onChanges(changes);
                }
            }
            else {
                var change = this._check(proto, throwOnChange, this.values, this.locals);
                if (lang_1.isPresent(change)) {
                    this._updateDirectiveOrElement(change, bindingRecord);
                    isChanged = true;
                    changes = this._addChange(bindingRecord, change, changes);
                }
            }
            if (proto.lastInDirective) {
                changes = null;
                if (isChanged && !bindingRecord.isDefaultChangeDetection()) {
                    this._getDetectorFor(directiveRecord.directiveIndex).markAsCheckOnce();
                }
                isChanged = false;
            }
        }
    };
    /** @internal */
    DynamicChangeDetector.prototype._firstInBinding = function (r) {
        var prev = change_detection_util_1.ChangeDetectionUtil.protoByIndex(this._records, r.selfIndex - 1);
        return lang_1.isBlank(prev) || prev.bindingRecord !== r.bindingRecord;
    };
    DynamicChangeDetector.prototype.afterContentLifecycleCallbacksInternal = function () {
        var dirs = this._directiveRecords;
        for (var i = dirs.length - 1; i >= 0; --i) {
            var dir = dirs[i];
            if (dir.callAfterContentInit && !this.alreadyChecked) {
                this._getDirectiveFor(dir.directiveIndex).afterContentInit();
            }
            if (dir.callAfterContentChecked) {
                this._getDirectiveFor(dir.directiveIndex).afterContentChecked();
            }
        }
    };
    DynamicChangeDetector.prototype.afterViewLifecycleCallbacksInternal = function () {
        var dirs = this._directiveRecords;
        for (var i = dirs.length - 1; i >= 0; --i) {
            var dir = dirs[i];
            if (dir.callAfterViewInit && !this.alreadyChecked) {
                this._getDirectiveFor(dir.directiveIndex).afterViewInit();
            }
            if (dir.callAfterViewChecked) {
                this._getDirectiveFor(dir.directiveIndex).afterViewChecked();
            }
        }
    };
    /** @internal */
    DynamicChangeDetector.prototype._updateDirectiveOrElement = function (change, bindingRecord) {
        if (lang_1.isBlank(bindingRecord.directiveRecord)) {
            _super.prototype.notifyDispatcher.call(this, change.currentValue);
        }
        else {
            var directiveIndex = bindingRecord.directiveRecord.directiveIndex;
            bindingRecord.setter(this._getDirectiveFor(directiveIndex), change.currentValue);
        }
        if (this._genConfig.logBindingUpdate) {
            _super.prototype.logBindingUpdate.call(this, change.currentValue);
        }
    };
    /** @internal */
    DynamicChangeDetector.prototype._addChange = function (bindingRecord, change, changes) {
        if (bindingRecord.callOnChanges()) {
            return _super.prototype.addChange.call(this, changes, change.previousValue, change.currentValue);
        }
        else {
            return changes;
        }
    };
    /** @internal */
    DynamicChangeDetector.prototype._getDirectiveFor = function (directiveIndex) { return this.directives.getDirectiveFor(directiveIndex); };
    /** @internal */
    DynamicChangeDetector.prototype._getDetectorFor = function (directiveIndex) { return this.directives.getDetectorFor(directiveIndex); };
    /** @internal */
    DynamicChangeDetector.prototype._check = function (proto, throwOnChange, values, locals) {
        if (proto.isPipeRecord()) {
            return this._pipeCheck(proto, throwOnChange, values);
        }
        else {
            return this._referenceCheck(proto, throwOnChange, values, locals);
        }
    };
    /** @internal */
    DynamicChangeDetector.prototype._referenceCheck = function (proto, throwOnChange, values, locals) {
        if (this._pureFuncAndArgsDidNotChange(proto)) {
            this._setChanged(proto, false);
            return null;
        }
        var currValue = this._calculateCurrValue(proto, values, locals);
        if (this.strategy === constants_1.ChangeDetectionStrategy.OnPushObserve) {
            _super.prototype.observeValue.call(this, currValue, proto.selfIndex);
        }
        if (proto.shouldBeChecked()) {
            var prevValue = this._readSelf(proto, values);
            if (!isSame(prevValue, currValue)) {
                if (proto.lastInBinding) {
                    var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
                    if (throwOnChange)
                        this.throwOnChangeError(prevValue, currValue);
                    this._writeSelf(proto, currValue, values);
                    this._setChanged(proto, true);
                    return change;
                }
                else {
                    this._writeSelf(proto, currValue, values);
                    this._setChanged(proto, true);
                    return null;
                }
            }
            else {
                this._setChanged(proto, false);
                return null;
            }
        }
        else {
            this._writeSelf(proto, currValue, values);
            this._setChanged(proto, true);
            return null;
        }
    };
    /** @internal */
    DynamicChangeDetector.prototype._calculateCurrValue = function (proto, values, locals) {
        switch (proto.mode) {
            case proto_record_1.RecordType.Self:
                return this._readContext(proto, values);
            case proto_record_1.RecordType.Const:
                return proto.funcOrValue;
            case proto_record_1.RecordType.PropertyRead:
                var context = this._readContext(proto, values);
                return proto.funcOrValue(context);
            case proto_record_1.RecordType.SafeProperty:
                var context = this._readContext(proto, values);
                return lang_1.isBlank(context) ? null : proto.funcOrValue(context);
            case proto_record_1.RecordType.PropertyWrite:
                var context = this._readContext(proto, values);
                var value = this._readArgs(proto, values)[0];
                proto.funcOrValue(context, value);
                return value;
            case proto_record_1.RecordType.KeyedWrite:
                var context = this._readContext(proto, values);
                var key = this._readArgs(proto, values)[0];
                var value = this._readArgs(proto, values)[1];
                context[key] = value;
                return value;
            case proto_record_1.RecordType.Local:
                return locals.get(proto.name);
            case proto_record_1.RecordType.InvokeMethod:
                var context = this._readContext(proto, values);
                var args = this._readArgs(proto, values);
                return proto.funcOrValue(context, args);
            case proto_record_1.RecordType.SafeMethodInvoke:
                var context = this._readContext(proto, values);
                if (lang_1.isBlank(context)) {
                    return null;
                }
                var args = this._readArgs(proto, values);
                return proto.funcOrValue(context, args);
            case proto_record_1.RecordType.KeyedRead:
                var arg = this._readArgs(proto, values)[0];
                return this._readContext(proto, values)[arg];
            case proto_record_1.RecordType.Chain:
                var args = this._readArgs(proto, values);
                return args[args.length - 1];
            case proto_record_1.RecordType.InvokeClosure:
                return lang_1.FunctionWrapper.apply(this._readContext(proto, values), this._readArgs(proto, values));
            case proto_record_1.RecordType.Interpolate:
            case proto_record_1.RecordType.PrimitiveOp:
            case proto_record_1.RecordType.CollectionLiteral:
                return lang_1.FunctionWrapper.apply(proto.funcOrValue, this._readArgs(proto, values));
            default:
                throw new exceptions_1.BaseException("Unknown operation " + proto.mode);
        }
    };
    /** @internal */
    DynamicChangeDetector.prototype._pipeCheck = function (proto, throwOnChange, values) {
        var context = this._readContext(proto, values);
        var selectedPipe = this._pipeFor(proto, context);
        if (!selectedPipe.pure || this._argsOrContextChanged(proto)) {
            var args = this._readArgs(proto, values);
            var currValue = selectedPipe.pipe.transform(context, args);
            if (proto.shouldBeChecked()) {
                var prevValue = this._readSelf(proto, values);
                if (!isSame(prevValue, currValue)) {
                    currValue = change_detection_util_1.ChangeDetectionUtil.unwrapValue(currValue);
                    if (proto.lastInBinding) {
                        var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
                        if (throwOnChange)
                            this.throwOnChangeError(prevValue, currValue);
                        this._writeSelf(proto, currValue, values);
                        this._setChanged(proto, true);
                        return change;
                    }
                    else {
                        this._writeSelf(proto, currValue, values);
                        this._setChanged(proto, true);
                        return null;
                    }
                }
                else {
                    this._setChanged(proto, false);
                    return null;
                }
            }
            else {
                this._writeSelf(proto, currValue, values);
                this._setChanged(proto, true);
                return null;
            }
        }
    };
    /** @internal */
    DynamicChangeDetector.prototype._pipeFor = function (proto, context) {
        var storedPipe = this._readPipe(proto);
        if (lang_1.isPresent(storedPipe))
            return storedPipe;
        var pipe = this.pipes.get(proto.name);
        this._writePipe(proto, pipe);
        return pipe;
    };
    /** @internal */
    DynamicChangeDetector.prototype._readContext = function (proto, values) {
        if (proto.contextIndex == -1) {
            return this._getDirectiveFor(proto.directiveIndex);
        }
        else {
            return values[proto.contextIndex];
        }
        return values[proto.contextIndex];
    };
    /** @internal */
    DynamicChangeDetector.prototype._readSelf = function (proto, values) { return values[proto.selfIndex]; };
    /** @internal */
    DynamicChangeDetector.prototype._writeSelf = function (proto, value, values) { values[proto.selfIndex] = value; };
    /** @internal */
    DynamicChangeDetector.prototype._readPipe = function (proto) { return this.localPipes[proto.selfIndex]; };
    /** @internal */
    DynamicChangeDetector.prototype._writePipe = function (proto, value) { this.localPipes[proto.selfIndex] = value; };
    /** @internal */
    DynamicChangeDetector.prototype._setChanged = function (proto, value) {
        if (proto.argumentToPureFunction)
            this.changes[proto.selfIndex] = value;
    };
    /** @internal */
    DynamicChangeDetector.prototype._pureFuncAndArgsDidNotChange = function (proto) {
        return proto.isPureFunction() && !this._argsChanged(proto);
    };
    /** @internal */
    DynamicChangeDetector.prototype._argsChanged = function (proto) {
        var args = proto.args;
        for (var i = 0; i < args.length; ++i) {
            if (this.changes[args[i]]) {
                return true;
            }
        }
        return false;
    };
    /** @internal */
    DynamicChangeDetector.prototype._argsOrContextChanged = function (proto) {
        return this._argsChanged(proto) || this.changes[proto.contextIndex];
    };
    /** @internal */
    DynamicChangeDetector.prototype._readArgs = function (proto, values) {
        var res = collection_1.ListWrapper.createFixedSize(proto.args.length);
        var args = proto.args;
        for (var i = 0; i < args.length; ++i) {
            res[i] = values[args[i]];
        }
        return res;
    };
    return DynamicChangeDetector;
})(abstract_change_detector_1.AbstractChangeDetector);
exports.DynamicChangeDetector = DynamicChangeDetector;
function isSame(a, b) {
    if (a === b)
        return true;
    if (a instanceof String && b instanceof String && a == b)
        return true;
    if ((a !== a) && (b !== b))
        return true;
    return false;
}

},{"./abstract_change_detector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/abstract_change_detector.js","./change_detection_util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection_util.js","./constants":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/constants.js","./proto_record":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/proto_record.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/event_binding.js":[function(require,module,exports){
'use strict';var EventBinding = (function () {
    function EventBinding(eventName, elIndex, dirIndex, records) {
        this.eventName = eventName;
        this.elIndex = elIndex;
        this.dirIndex = dirIndex;
        this.records = records;
    }
    return EventBinding;
})();
exports.EventBinding = EventBinding;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/exceptions.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var exceptions_1 = require("angular2/src/core/facade/exceptions");
/**
 * An error thrown if application changes model breaking the top-down data flow.
 *
 * This exception is only thrown in dev mode.
 *
 * <!-- TODO: Add a link once the dev mode option is configurable -->
 *
 * ### Example
 *
 * ```typescript
 * @Component({
 *   selector: 'parent',
 *   template: `
 *     <child [prop]="parentProp"></child>
 *   `,
 *   directives: [forwardRef(() => Child)]
 * })
 * class Parent {
 *   parentProp = "init";
 * }
 *
 * @Directive({selector: 'child', inputs: ['prop']})
 * class Child {
 *   constructor(public parent: Parent) {}
 *
 *   set prop(v) {
 *     // this updates the parent property, which is disallowed during change detection
 *     // this will result in ExpressionChangedAfterItHasBeenCheckedException
 *     this.parent.parentProp = "updated";
 *   }
 * }
 * ```
 */
var ExpressionChangedAfterItHasBeenCheckedException = (function (_super) {
    __extends(ExpressionChangedAfterItHasBeenCheckedException, _super);
    function ExpressionChangedAfterItHasBeenCheckedException(exp, oldValue, currValue, context) {
        _super.call(this, ("Expression '" + exp + "' has changed after it was checked. ") +
            ("Previous value: '" + oldValue + "'. Current value: '" + currValue + "'"));
    }
    return ExpressionChangedAfterItHasBeenCheckedException;
})(exceptions_1.BaseException);
exports.ExpressionChangedAfterItHasBeenCheckedException = ExpressionChangedAfterItHasBeenCheckedException;
/**
 * Thrown when an expression evaluation raises an exception.
 *
 * This error wraps the original exception to attach additional contextual information that can
 * be useful for debugging.
 *
 * ### Example ([live demo](http://plnkr.co/edit/2Kywoz?p=preview))
 *
 * ```typescript
 * @Directive({selector: 'child', inputs: ['prop']})
 * class Child {
 *   prop;
 * }
 *
 * @Component({
 *   selector: 'app',
 *   template: `
 *     <child [prop]="field.first"></child>
 *   `,
 *   directives: [Child]
 * })
 * class App {
 *   field = null;
 * }
 *
 * bootstrap(App);
 * ```
 *
 * You can access the original exception and stack through the `originalException` and
 * `originalStack` properties.
 */
var ChangeDetectionError = (function (_super) {
    __extends(ChangeDetectionError, _super);
    function ChangeDetectionError(exp, originalException, originalStack, context) {
        _super.call(this, originalException + " in [" + exp + "]", originalException, originalStack, context);
        this.location = exp;
    }
    return ChangeDetectionError;
})(exceptions_1.WrappedException);
exports.ChangeDetectionError = ChangeDetectionError;
/**
 * Thrown when change detector executes on dehydrated view.
 *
 * This error indicates a bug in the framework.
 *
 * This is an internal Angular error.
 */
var DehydratedException = (function (_super) {
    __extends(DehydratedException, _super);
    function DehydratedException() {
        _super.call(this, 'Attempt to detect changes on a dehydrated detector.');
    }
    return DehydratedException;
})(exceptions_1.BaseException);
exports.DehydratedException = DehydratedException;

},{"angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/interfaces.js":[function(require,module,exports){
'use strict';var DebugContext = (function () {
    function DebugContext(element, componentElement, directive, context, locals, injector) {
        this.element = element;
        this.componentElement = componentElement;
        this.directive = directive;
        this.context = context;
        this.locals = locals;
        this.injector = injector;
    }
    return DebugContext;
})();
exports.DebugContext = DebugContext;
var ChangeDetectorGenConfig = (function () {
    function ChangeDetectorGenConfig(genCheckNoChanges, genDebugInfo, logBindingUpdate, useJit) {
        this.genCheckNoChanges = genCheckNoChanges;
        this.genDebugInfo = genDebugInfo;
        this.logBindingUpdate = logBindingUpdate;
        this.useJit = useJit;
    }
    return ChangeDetectorGenConfig;
})();
exports.ChangeDetectorGenConfig = ChangeDetectorGenConfig;
var ChangeDetectorDefinition = (function () {
    function ChangeDetectorDefinition(id, strategy, variableNames, bindingRecords, eventRecords, directiveRecords, genConfig) {
        this.id = id;
        this.strategy = strategy;
        this.variableNames = variableNames;
        this.bindingRecords = bindingRecords;
        this.eventRecords = eventRecords;
        this.directiveRecords = directiveRecords;
        this.genConfig = genConfig;
    }
    return ChangeDetectorDefinition;
})();
exports.ChangeDetectorDefinition = ChangeDetectorDefinition;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/jit_proto_change_detector.js":[function(require,module,exports){
'use strict';var change_detection_jit_generator_1 = require('./change_detection_jit_generator');
var JitProtoChangeDetector = (function () {
    function JitProtoChangeDetector(definition) {
        this.definition = definition;
        this._factory = this._createFactory(definition);
    }
    JitProtoChangeDetector.isSupported = function () { return true; };
    JitProtoChangeDetector.prototype.instantiate = function (dispatcher) { return this._factory(dispatcher); };
    /** @internal */
    JitProtoChangeDetector.prototype._createFactory = function (definition) {
        return new change_detection_jit_generator_1.ChangeDetectorJITGenerator(definition, 'util', 'AbstractChangeDetector').generate();
    };
    return JitProtoChangeDetector;
})();
exports.JitProtoChangeDetector = JitProtoChangeDetector;

},{"./change_detection_jit_generator":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection_jit_generator.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/observable_facade.js":[function(require,module,exports){
'use strict';function isObservable(value) {
    return false;
}
exports.isObservable = isObservable;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/parser/ast.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = require("angular2/src/core/facade/lang");
var collection_1 = require("angular2/src/core/facade/collection");
var AST = (function () {
    function AST() {
    }
    AST.prototype.visit = function (visitor) { return null; };
    AST.prototype.toString = function () { return "AST"; };
    return AST;
})();
exports.AST = AST;
var EmptyExpr = (function (_super) {
    __extends(EmptyExpr, _super);
    function EmptyExpr() {
        _super.apply(this, arguments);
    }
    EmptyExpr.prototype.visit = function (visitor) {
        // do nothing
    };
    return EmptyExpr;
})(AST);
exports.EmptyExpr = EmptyExpr;
var ImplicitReceiver = (function (_super) {
    __extends(ImplicitReceiver, _super);
    function ImplicitReceiver() {
        _super.apply(this, arguments);
    }
    ImplicitReceiver.prototype.visit = function (visitor) { return visitor.visitImplicitReceiver(this); };
    return ImplicitReceiver;
})(AST);
exports.ImplicitReceiver = ImplicitReceiver;
/**
 * Multiple expressions separated by a semicolon.
 */
var Chain = (function (_super) {
    __extends(Chain, _super);
    function Chain(expressions) {
        _super.call(this);
        this.expressions = expressions;
    }
    Chain.prototype.visit = function (visitor) { return visitor.visitChain(this); };
    return Chain;
})(AST);
exports.Chain = Chain;
var Conditional = (function (_super) {
    __extends(Conditional, _super);
    function Conditional(condition, trueExp, falseExp) {
        _super.call(this);
        this.condition = condition;
        this.trueExp = trueExp;
        this.falseExp = falseExp;
    }
    Conditional.prototype.visit = function (visitor) { return visitor.visitConditional(this); };
    return Conditional;
})(AST);
exports.Conditional = Conditional;
var If = (function (_super) {
    __extends(If, _super);
    function If(condition, trueExp, falseExp) {
        _super.call(this);
        this.condition = condition;
        this.trueExp = trueExp;
        this.falseExp = falseExp;
    }
    If.prototype.visit = function (visitor) { return visitor.visitIf(this); };
    return If;
})(AST);
exports.If = If;
var PropertyRead = (function (_super) {
    __extends(PropertyRead, _super);
    function PropertyRead(receiver, name, getter) {
        _super.call(this);
        this.receiver = receiver;
        this.name = name;
        this.getter = getter;
    }
    PropertyRead.prototype.visit = function (visitor) { return visitor.visitPropertyRead(this); };
    return PropertyRead;
})(AST);
exports.PropertyRead = PropertyRead;
var PropertyWrite = (function (_super) {
    __extends(PropertyWrite, _super);
    function PropertyWrite(receiver, name, setter, value) {
        _super.call(this);
        this.receiver = receiver;
        this.name = name;
        this.setter = setter;
        this.value = value;
    }
    PropertyWrite.prototype.visit = function (visitor) { return visitor.visitPropertyWrite(this); };
    return PropertyWrite;
})(AST);
exports.PropertyWrite = PropertyWrite;
var SafePropertyRead = (function (_super) {
    __extends(SafePropertyRead, _super);
    function SafePropertyRead(receiver, name, getter) {
        _super.call(this);
        this.receiver = receiver;
        this.name = name;
        this.getter = getter;
    }
    SafePropertyRead.prototype.visit = function (visitor) { return visitor.visitSafePropertyRead(this); };
    return SafePropertyRead;
})(AST);
exports.SafePropertyRead = SafePropertyRead;
var KeyedRead = (function (_super) {
    __extends(KeyedRead, _super);
    function KeyedRead(obj, key) {
        _super.call(this);
        this.obj = obj;
        this.key = key;
    }
    KeyedRead.prototype.visit = function (visitor) { return visitor.visitKeyedRead(this); };
    return KeyedRead;
})(AST);
exports.KeyedRead = KeyedRead;
var KeyedWrite = (function (_super) {
    __extends(KeyedWrite, _super);
    function KeyedWrite(obj, key, value) {
        _super.call(this);
        this.obj = obj;
        this.key = key;
        this.value = value;
    }
    KeyedWrite.prototype.visit = function (visitor) { return visitor.visitKeyedWrite(this); };
    return KeyedWrite;
})(AST);
exports.KeyedWrite = KeyedWrite;
var BindingPipe = (function (_super) {
    __extends(BindingPipe, _super);
    function BindingPipe(exp, name, args) {
        _super.call(this);
        this.exp = exp;
        this.name = name;
        this.args = args;
    }
    BindingPipe.prototype.visit = function (visitor) { return visitor.visitPipe(this); };
    return BindingPipe;
})(AST);
exports.BindingPipe = BindingPipe;
var LiteralPrimitive = (function (_super) {
    __extends(LiteralPrimitive, _super);
    function LiteralPrimitive(value) {
        _super.call(this);
        this.value = value;
    }
    LiteralPrimitive.prototype.visit = function (visitor) { return visitor.visitLiteralPrimitive(this); };
    return LiteralPrimitive;
})(AST);
exports.LiteralPrimitive = LiteralPrimitive;
var LiteralArray = (function (_super) {
    __extends(LiteralArray, _super);
    function LiteralArray(expressions) {
        _super.call(this);
        this.expressions = expressions;
    }
    LiteralArray.prototype.visit = function (visitor) { return visitor.visitLiteralArray(this); };
    return LiteralArray;
})(AST);
exports.LiteralArray = LiteralArray;
var LiteralMap = (function (_super) {
    __extends(LiteralMap, _super);
    function LiteralMap(keys, values) {
        _super.call(this);
        this.keys = keys;
        this.values = values;
    }
    LiteralMap.prototype.visit = function (visitor) { return visitor.visitLiteralMap(this); };
    return LiteralMap;
})(AST);
exports.LiteralMap = LiteralMap;
var Interpolation = (function (_super) {
    __extends(Interpolation, _super);
    function Interpolation(strings, expressions) {
        _super.call(this);
        this.strings = strings;
        this.expressions = expressions;
    }
    Interpolation.prototype.visit = function (visitor) { visitor.visitInterpolation(this); };
    return Interpolation;
})(AST);
exports.Interpolation = Interpolation;
var Binary = (function (_super) {
    __extends(Binary, _super);
    function Binary(operation, left, right) {
        _super.call(this);
        this.operation = operation;
        this.left = left;
        this.right = right;
    }
    Binary.prototype.visit = function (visitor) { return visitor.visitBinary(this); };
    return Binary;
})(AST);
exports.Binary = Binary;
var PrefixNot = (function (_super) {
    __extends(PrefixNot, _super);
    function PrefixNot(expression) {
        _super.call(this);
        this.expression = expression;
    }
    PrefixNot.prototype.visit = function (visitor) { return visitor.visitPrefixNot(this); };
    return PrefixNot;
})(AST);
exports.PrefixNot = PrefixNot;
var MethodCall = (function (_super) {
    __extends(MethodCall, _super);
    function MethodCall(receiver, name, fn, args) {
        _super.call(this);
        this.receiver = receiver;
        this.name = name;
        this.fn = fn;
        this.args = args;
    }
    MethodCall.prototype.visit = function (visitor) { return visitor.visitMethodCall(this); };
    return MethodCall;
})(AST);
exports.MethodCall = MethodCall;
var SafeMethodCall = (function (_super) {
    __extends(SafeMethodCall, _super);
    function SafeMethodCall(receiver, name, fn, args) {
        _super.call(this);
        this.receiver = receiver;
        this.name = name;
        this.fn = fn;
        this.args = args;
    }
    SafeMethodCall.prototype.visit = function (visitor) { return visitor.visitSafeMethodCall(this); };
    return SafeMethodCall;
})(AST);
exports.SafeMethodCall = SafeMethodCall;
var FunctionCall = (function (_super) {
    __extends(FunctionCall, _super);
    function FunctionCall(target, args) {
        _super.call(this);
        this.target = target;
        this.args = args;
    }
    FunctionCall.prototype.visit = function (visitor) { return visitor.visitFunctionCall(this); };
    return FunctionCall;
})(AST);
exports.FunctionCall = FunctionCall;
var ASTWithSource = (function (_super) {
    __extends(ASTWithSource, _super);
    function ASTWithSource(ast, source, location) {
        _super.call(this);
        this.ast = ast;
        this.source = source;
        this.location = location;
    }
    ASTWithSource.prototype.visit = function (visitor) { return this.ast.visit(visitor); };
    ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location; };
    return ASTWithSource;
})(AST);
exports.ASTWithSource = ASTWithSource;
var TemplateBinding = (function () {
    function TemplateBinding(key, keyIsVar, name, expression) {
        this.key = key;
        this.keyIsVar = keyIsVar;
        this.name = name;
        this.expression = expression;
    }
    return TemplateBinding;
})();
exports.TemplateBinding = TemplateBinding;
var RecursiveAstVisitor = (function () {
    function RecursiveAstVisitor() {
    }
    RecursiveAstVisitor.prototype.visitBinary = function (ast) {
        ast.left.visit(this);
        ast.right.visit(this);
        return null;
    };
    RecursiveAstVisitor.prototype.visitChain = function (ast) { return this.visitAll(ast.expressions); };
    RecursiveAstVisitor.prototype.visitConditional = function (ast) {
        ast.condition.visit(this);
        ast.trueExp.visit(this);
        ast.falseExp.visit(this);
        return null;
    };
    RecursiveAstVisitor.prototype.visitIf = function (ast) {
        ast.condition.visit(this);
        ast.trueExp.visit(this);
        ast.falseExp.visit(this);
        return null;
    };
    RecursiveAstVisitor.prototype.visitPipe = function (ast) {
        ast.exp.visit(this);
        this.visitAll(ast.args);
        return null;
    };
    RecursiveAstVisitor.prototype.visitFunctionCall = function (ast) {
        ast.target.visit(this);
        this.visitAll(ast.args);
        return null;
    };
    RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast) { return null; };
    RecursiveAstVisitor.prototype.visitInterpolation = function (ast) { return this.visitAll(ast.expressions); };
    RecursiveAstVisitor.prototype.visitKeyedRead = function (ast) {
        ast.obj.visit(this);
        ast.key.visit(this);
        return null;
    };
    RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast) {
        ast.obj.visit(this);
        ast.key.visit(this);
        ast.value.visit(this);
        return null;
    };
    RecursiveAstVisitor.prototype.visitLiteralArray = function (ast) { return this.visitAll(ast.expressions); };
    RecursiveAstVisitor.prototype.visitLiteralMap = function (ast) { return this.visitAll(ast.values); };
    RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast) { return null; };
    RecursiveAstVisitor.prototype.visitMethodCall = function (ast) {
        ast.receiver.visit(this);
        return this.visitAll(ast.args);
    };
    RecursiveAstVisitor.prototype.visitPrefixNot = function (ast) {
        ast.expression.visit(this);
        return null;
    };
    RecursiveAstVisitor.prototype.visitPropertyRead = function (ast) {
        ast.receiver.visit(this);
        return null;
    };
    RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast) {
        ast.receiver.visit(this);
        ast.value.visit(this);
        return null;
    };
    RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast) {
        ast.receiver.visit(this);
        return null;
    };
    RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast) {
        ast.receiver.visit(this);
        return this.visitAll(ast.args);
    };
    RecursiveAstVisitor.prototype.visitAll = function (asts) {
        var _this = this;
        asts.forEach(function (ast) { return ast.visit(_this); });
        return null;
    };
    return RecursiveAstVisitor;
})();
exports.RecursiveAstVisitor = RecursiveAstVisitor;
var AstTransformer = (function () {
    function AstTransformer() {
    }
    AstTransformer.prototype.visitImplicitReceiver = function (ast) { return ast; };
    AstTransformer.prototype.visitInterpolation = function (ast) {
        return new Interpolation(ast.strings, this.visitAll(ast.expressions));
    };
    AstTransformer.prototype.visitLiteralPrimitive = function (ast) {
        return new LiteralPrimitive(ast.value);
    };
    AstTransformer.prototype.visitPropertyRead = function (ast) {
        return new PropertyRead(ast.receiver.visit(this), ast.name, ast.getter);
    };
    AstTransformer.prototype.visitPropertyWrite = function (ast) {
        return new PropertyWrite(ast.receiver.visit(this), ast.name, ast.setter, ast.value);
    };
    AstTransformer.prototype.visitSafePropertyRead = function (ast) {
        return new SafePropertyRead(ast.receiver.visit(this), ast.name, ast.getter);
    };
    AstTransformer.prototype.visitMethodCall = function (ast) {
        return new MethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
    };
    AstTransformer.prototype.visitSafeMethodCall = function (ast) {
        return new SafeMethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
    };
    AstTransformer.prototype.visitFunctionCall = function (ast) {
        return new FunctionCall(ast.target.visit(this), this.visitAll(ast.args));
    };
    AstTransformer.prototype.visitLiteralArray = function (ast) {
        return new LiteralArray(this.visitAll(ast.expressions));
    };
    AstTransformer.prototype.visitLiteralMap = function (ast) {
        return new LiteralMap(ast.keys, this.visitAll(ast.values));
    };
    AstTransformer.prototype.visitBinary = function (ast) {
        return new Binary(ast.operation, ast.left.visit(this), ast.right.visit(this));
    };
    AstTransformer.prototype.visitPrefixNot = function (ast) { return new PrefixNot(ast.expression.visit(this)); };
    AstTransformer.prototype.visitConditional = function (ast) {
        return new Conditional(ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
    };
    AstTransformer.prototype.visitPipe = function (ast) {
        return new BindingPipe(ast.exp.visit(this), ast.name, this.visitAll(ast.args));
    };
    AstTransformer.prototype.visitKeyedRead = function (ast) {
        return new KeyedRead(ast.obj.visit(this), ast.key.visit(this));
    };
    AstTransformer.prototype.visitKeyedWrite = function (ast) {
        return new KeyedWrite(ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
    };
    AstTransformer.prototype.visitAll = function (asts) {
        var res = collection_1.ListWrapper.createFixedSize(asts.length);
        for (var i = 0; i < asts.length; ++i) {
            res[i] = asts[i].visit(this);
        }
        return res;
    };
    AstTransformer.prototype.visitChain = function (ast) { return new Chain(this.visitAll(ast.expressions)); };
    AstTransformer.prototype.visitIf = function (ast) {
        var falseExp = lang_1.isPresent(ast.falseExp) ? ast.falseExp.visit(this) : null;
        return new If(ast.condition.visit(this), ast.trueExp.visit(this), falseExp);
    };
    return AstTransformer;
})();
exports.AstTransformer = AstTransformer;

},{"angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/parser/lexer.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var decorators_1 = require('angular2/src/core/di/decorators');
var collection_1 = require("angular2/src/core/facade/collection");
var lang_1 = require("angular2/src/core/facade/lang");
var exceptions_1 = require('angular2/src/core/facade/exceptions');
(function (TokenType) {
    TokenType[TokenType["Character"] = 0] = "Character";
    TokenType[TokenType["Identifier"] = 1] = "Identifier";
    TokenType[TokenType["Keyword"] = 2] = "Keyword";
    TokenType[TokenType["String"] = 3] = "String";
    TokenType[TokenType["Operator"] = 4] = "Operator";
    TokenType[TokenType["Number"] = 5] = "Number";
})(exports.TokenType || (exports.TokenType = {}));
var TokenType = exports.TokenType;
var Lexer = (function () {
    function Lexer() {
    }
    Lexer.prototype.tokenize = function (text) {
        var scanner = new _Scanner(text);
        var tokens = [];
        var token = scanner.scanToken();
        while (token != null) {
            tokens.push(token);
            token = scanner.scanToken();
        }
        return tokens;
    };
    Lexer = __decorate([
        decorators_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Lexer);
    return Lexer;
})();
exports.Lexer = Lexer;
var Token = (function () {
    function Token(index, type, numValue, strValue) {
        this.index = index;
        this.type = type;
        this.numValue = numValue;
        this.strValue = strValue;
    }
    Token.prototype.isCharacter = function (code) {
        return (this.type == TokenType.Character && this.numValue == code);
    };
    Token.prototype.isNumber = function () { return (this.type == TokenType.Number); };
    Token.prototype.isString = function () { return (this.type == TokenType.String); };
    Token.prototype.isOperator = function (operater) {
        return (this.type == TokenType.Operator && this.strValue == operater);
    };
    Token.prototype.isIdentifier = function () { return (this.type == TokenType.Identifier); };
    Token.prototype.isKeyword = function () { return (this.type == TokenType.Keyword); };
    Token.prototype.isKeywordVar = function () { return (this.type == TokenType.Keyword && this.strValue == "var"); };
    Token.prototype.isKeywordNull = function () { return (this.type == TokenType.Keyword && this.strValue == "null"); };
    Token.prototype.isKeywordUndefined = function () {
        return (this.type == TokenType.Keyword && this.strValue == "undefined");
    };
    Token.prototype.isKeywordTrue = function () { return (this.type == TokenType.Keyword && this.strValue == "true"); };
    Token.prototype.isKeywordIf = function () { return (this.type == TokenType.Keyword && this.strValue == "if"); };
    Token.prototype.isKeywordElse = function () { return (this.type == TokenType.Keyword && this.strValue == "else"); };
    Token.prototype.isKeywordFalse = function () { return (this.type == TokenType.Keyword && this.strValue == "false"); };
    Token.prototype.toNumber = function () {
        // -1 instead of NULL ok?
        return (this.type == TokenType.Number) ? this.numValue : -1;
    };
    Token.prototype.toString = function () {
        switch (this.type) {
            case TokenType.Character:
            case TokenType.Identifier:
            case TokenType.Keyword:
            case TokenType.Operator:
            case TokenType.String:
                return this.strValue;
            case TokenType.Number:
                return this.numValue.toString();
            default:
                return null;
        }
    };
    return Token;
})();
exports.Token = Token;
function newCharacterToken(index, code) {
    return new Token(index, TokenType.Character, code, lang_1.StringWrapper.fromCharCode(code));
}
function newIdentifierToken(index, text) {
    return new Token(index, TokenType.Identifier, 0, text);
}
function newKeywordToken(index, text) {
    return new Token(index, TokenType.Keyword, 0, text);
}
function newOperatorToken(index, text) {
    return new Token(index, TokenType.Operator, 0, text);
}
function newStringToken(index, text) {
    return new Token(index, TokenType.String, 0, text);
}
function newNumberToken(index, n) {
    return new Token(index, TokenType.Number, n, "");
}
exports.EOF = new Token(-1, TokenType.Character, 0, "");
exports.$EOF = 0;
exports.$TAB = 9;
exports.$LF = 10;
exports.$VTAB = 11;
exports.$FF = 12;
exports.$CR = 13;
exports.$SPACE = 32;
exports.$BANG = 33;
exports.$DQ = 34;
exports.$HASH = 35;
exports.$$ = 36;
exports.$PERCENT = 37;
exports.$AMPERSAND = 38;
exports.$SQ = 39;
exports.$LPAREN = 40;
exports.$RPAREN = 41;
exports.$STAR = 42;
exports.$PLUS = 43;
exports.$COMMA = 44;
exports.$MINUS = 45;
exports.$PERIOD = 46;
exports.$SLASH = 47;
exports.$COLON = 58;
exports.$SEMICOLON = 59;
exports.$LT = 60;
exports.$EQ = 61;
exports.$GT = 62;
exports.$QUESTION = 63;
var $0 = 48;
var $9 = 57;
var $A = 65, $E = 69, $Z = 90;
exports.$LBRACKET = 91;
exports.$BACKSLASH = 92;
exports.$RBRACKET = 93;
var $CARET = 94;
var $_ = 95;
var $a = 97, $e = 101, $f = 102, $n = 110, $r = 114, $t = 116, $u = 117, $v = 118, $z = 122;
exports.$LBRACE = 123;
exports.$BAR = 124;
exports.$RBRACE = 125;
var $NBSP = 160;
var ScannerError = (function (_super) {
    __extends(ScannerError, _super);
    function ScannerError(message) {
        _super.call(this);
        this.message = message;
    }
    ScannerError.prototype.toString = function () { return this.message; };
    return ScannerError;
})(exceptions_1.BaseException);
exports.ScannerError = ScannerError;
var _Scanner = (function () {
    function _Scanner(input) {
        this.input = input;
        this.peek = 0;
        this.index = -1;
        this.length = input.length;
        this.advance();
    }
    _Scanner.prototype.advance = function () {
        this.peek =
            ++this.index >= this.length ? exports.$EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
    };
    _Scanner.prototype.scanToken = function () {
        var input = this.input, length = this.length, peek = this.peek, index = this.index;
        // Skip whitespace.
        while (peek <= exports.$SPACE) {
            if (++index >= length) {
                peek = exports.$EOF;
                break;
            }
            else {
                peek = lang_1.StringWrapper.charCodeAt(input, index);
            }
        }
        this.peek = peek;
        this.index = index;
        if (index >= length) {
            return null;
        }
        // Handle identifiers and numbers.
        if (isIdentifierStart(peek))
            return this.scanIdentifier();
        if (isDigit(peek))
            return this.scanNumber(index);
        var start = index;
        switch (peek) {
            case exports.$PERIOD:
                this.advance();
                return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, exports.$PERIOD);
            case exports.$LPAREN:
            case exports.$RPAREN:
            case exports.$LBRACE:
            case exports.$RBRACE:
            case exports.$LBRACKET:
            case exports.$RBRACKET:
            case exports.$COMMA:
            case exports.$COLON:
            case exports.$SEMICOLON:
                return this.scanCharacter(start, peek);
            case exports.$SQ:
            case exports.$DQ:
                return this.scanString();
            case exports.$HASH:
            case exports.$PLUS:
            case exports.$MINUS:
            case exports.$STAR:
            case exports.$SLASH:
            case exports.$PERCENT:
            case $CARET:
                return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));
            case exports.$QUESTION:
                return this.scanComplexOperator(start, '?', exports.$PERIOD, '.');
            case exports.$LT:
            case exports.$GT:
                return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, '=');
            case exports.$BANG:
            case exports.$EQ:
                return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, '=', exports.$EQ, '=');
            case exports.$AMPERSAND:
                return this.scanComplexOperator(start, '&', exports.$AMPERSAND, '&');
            case exports.$BAR:
                return this.scanComplexOperator(start, '|', exports.$BAR, '|');
            case $NBSP:
                while (isWhitespace(this.peek))
                    this.advance();
                return this.scanToken();
        }
        this.error("Unexpected character [" + lang_1.StringWrapper.fromCharCode(peek) + "]", 0);
        return null;
    };
    _Scanner.prototype.scanCharacter = function (start, code) {
        assert(this.peek == code);
        this.advance();
        return newCharacterToken(start, code);
    };
    _Scanner.prototype.scanOperator = function (start, str) {
        assert(this.peek == lang_1.StringWrapper.charCodeAt(str, 0));
        assert(collection_1.SetWrapper.has(OPERATORS, str));
        this.advance();
        return newOperatorToken(start, str);
    };
    /**
     * Tokenize a 2/3 char long operator
     *
     * @param start start index in the expression
     * @param one first symbol (always part of the operator)
     * @param twoCode code point for the second symbol
     * @param two second symbol (part of the operator when the second code point matches)
     * @param threeCode code point for the third symbol
     * @param three third symbol (part of the operator when provided and matches source expression)
     * @returns {Token}
     */
    _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
        assert(this.peek == lang_1.StringWrapper.charCodeAt(one, 0));
        this.advance();
        var str = one;
        if (this.peek == twoCode) {
            this.advance();
            str += two;
        }
        if (lang_1.isPresent(threeCode) && this.peek == threeCode) {
            this.advance();
            str += three;
        }
        assert(collection_1.SetWrapper.has(OPERATORS, str));
        return newOperatorToken(start, str);
    };
    _Scanner.prototype.scanIdentifier = function () {
        assert(isIdentifierStart(this.peek));
        var start = this.index;
        this.advance();
        while (isIdentifierPart(this.peek))
            this.advance();
        var str = this.input.substring(start, this.index);
        if (collection_1.SetWrapper.has(KEYWORDS, str)) {
            return newKeywordToken(start, str);
        }
        else {
            return newIdentifierToken(start, str);
        }
    };
    _Scanner.prototype.scanNumber = function (start) {
        assert(isDigit(this.peek));
        var simple = (this.index === start);
        this.advance(); // Skip initial digit.
        while (true) {
            if (isDigit(this.peek)) {
            }
            else if (this.peek == exports.$PERIOD) {
                simple = false;
            }
            else if (isExponentStart(this.peek)) {
                this.advance();
                if (isExponentSign(this.peek))
                    this.advance();
                if (!isDigit(this.peek))
                    this.error('Invalid exponent', -1);
                simple = false;
            }
            else {
                break;
            }
            this.advance();
        }
        var str = this.input.substring(start, this.index);
        // TODO
        var value = simple ? lang_1.NumberWrapper.parseIntAutoRadix(str) : lang_1.NumberWrapper.parseFloat(str);
        return newNumberToken(start, value);
    };
    _Scanner.prototype.scanString = function () {
        assert(this.peek == exports.$SQ || this.peek == exports.$DQ);
        var start = this.index;
        var quote = this.peek;
        this.advance(); // Skip initial quote.
        var buffer;
        var marker = this.index;
        var input = this.input;
        while (this.peek != quote) {
            if (this.peek == exports.$BACKSLASH) {
                if (buffer == null)
                    buffer = new lang_1.StringJoiner();
                buffer.add(input.substring(marker, this.index));
                this.advance();
                var unescapedCode;
                if (this.peek == $u) {
                    // 4 character hex code for unicode character.
                    var hex = input.substring(this.index + 1, this.index + 5);
                    try {
                        unescapedCode = lang_1.NumberWrapper.parseInt(hex, 16);
                    }
                    catch (e) {
                        this.error("Invalid unicode escape [\\u" + hex + "]", 0);
                    }
                    for (var i = 0; i < 5; i++) {
                        this.advance();
                    }
                }
                else {
                    unescapedCode = unescape(this.peek);
                    this.advance();
                }
                buffer.add(lang_1.StringWrapper.fromCharCode(unescapedCode));
                marker = this.index;
            }
            else if (this.peek == exports.$EOF) {
                this.error('Unterminated quote', 0);
            }
            else {
                this.advance();
            }
        }
        var last = input.substring(marker, this.index);
        this.advance(); // Skip terminating quote.
        // Compute the unescaped string value.
        var unescaped = last;
        if (buffer != null) {
            buffer.add(last);
            unescaped = buffer.toString();
        }
        return newStringToken(start, unescaped);
    };
    _Scanner.prototype.error = function (message, offset) {
        var position = this.index + offset;
        throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
    };
    return _Scanner;
})();
function isWhitespace(code) {
    return (code >= exports.$TAB && code <= exports.$SPACE) || (code == $NBSP);
}
function isIdentifierStart(code) {
    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == exports.$$);
}
function isIdentifierPart(code) {
    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || ($0 <= code && code <= $9) ||
        (code == $_) || (code == exports.$$);
}
function isDigit(code) {
    return $0 <= code && code <= $9;
}
function isExponentStart(code) {
    return code == $e || code == $E;
}
function isExponentSign(code) {
    return code == exports.$MINUS || code == exports.$PLUS;
}
function unescape(code) {
    switch (code) {
        case $n:
            return exports.$LF;
        case $f:
            return exports.$FF;
        case $r:
            return exports.$CR;
        case $t:
            return exports.$TAB;
        case $v:
            return exports.$VTAB;
        default:
            return code;
    }
}
var OPERATORS = collection_1.SetWrapper.createFromList([
    '+',
    '-',
    '*',
    '/',
    '%',
    '^',
    '=',
    '==',
    '!=',
    '===',
    '!==',
    '<',
    '>',
    '<=',
    '>=',
    '&&',
    '||',
    '&',
    '|',
    '!',
    '?',
    '#',
    '?.'
]);
var KEYWORDS = collection_1.SetWrapper.createFromList(['var', 'null', 'undefined', 'true', 'false', 'if', 'else']);

},{"angular2/src/core/di/decorators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/decorators.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/parser/locals.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var Locals = (function () {
    function Locals(parent, current) {
        this.parent = parent;
        this.current = current;
    }
    Locals.prototype.contains = function (name) {
        if (this.current.has(name)) {
            return true;
        }
        if (lang_1.isPresent(this.parent)) {
            return this.parent.contains(name);
        }
        return false;
    };
    Locals.prototype.get = function (name) {
        if (this.current.has(name)) {
            return this.current.get(name);
        }
        if (lang_1.isPresent(this.parent)) {
            return this.parent.get(name);
        }
        throw new exceptions_1.BaseException("Cannot find '" + name + "'");
    };
    Locals.prototype.set = function (name, value) {
        // TODO(rado): consider removing this check if we can guarantee this is not
        // exposed to the public API.
        // TODO: vsavkin maybe it should check only the local map
        if (this.current.has(name)) {
            this.current.set(name, value);
        }
        else {
            throw new exceptions_1.BaseException("Setting of new keys post-construction is not supported. Key: " + name + ".");
        }
    };
    Locals.prototype.clearValues = function () { collection_1.MapWrapper.clearValues(this.current); };
    return Locals;
})();
exports.Locals = Locals;

},{"angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/parser/parser.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var decorators_1 = require('angular2/src/core/di/decorators');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var lexer_1 = require('./lexer');
var reflection_1 = require('angular2/src/core/reflection/reflection');
var ast_1 = require('./ast');
var _implicitReceiver = new ast_1.ImplicitReceiver();
// TODO(tbosch): Cannot make this const/final right now because of the transpiler...
var INTERPOLATION_REGEXP = /\{\{(.*?)\}\}/g;
var ParseException = (function (_super) {
    __extends(ParseException, _super);
    function ParseException(message, input, errLocation, ctxLocation) {
        _super.call(this, "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation);
    }
    return ParseException;
})(exceptions_1.BaseException);
var Parser = (function () {
    function Parser(/** @internal */ _lexer, providedReflector) {
        if (providedReflector === void 0) { providedReflector = null; }
        this._lexer = _lexer;
        this._reflector = lang_1.isPresent(providedReflector) ? providedReflector : reflection_1.reflector;
    }
    Parser.prototype.parseAction = function (input, location) {
        this._checkNoInterpolation(input, location);
        var tokens = this._lexer.tokenize(input);
        var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();
        return new ast_1.ASTWithSource(ast, input, location);
    };
    Parser.prototype.parseBinding = function (input, location) {
        this._checkNoInterpolation(input, location);
        var tokens = this._lexer.tokenize(input);
        var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
        return new ast_1.ASTWithSource(ast, input, location);
    };
    Parser.prototype.parseSimpleBinding = function (input, location) {
        this._checkNoInterpolation(input, location);
        var tokens = this._lexer.tokenize(input);
        var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseSimpleBinding();
        return new ast_1.ASTWithSource(ast, input, location);
    };
    Parser.prototype.parseTemplateBindings = function (input, location) {
        var tokens = this._lexer.tokenize(input);
        return new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings();
    };
    Parser.prototype.parseInterpolation = function (input, location) {
        var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
        if (parts.length <= 1) {
            return null;
        }
        var strings = [];
        var expressions = [];
        for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            if (i % 2 === 0) {
                // fixed string
                strings.push(part);
            }
            else if (part.trim().length > 0) {
                var tokens = this._lexer.tokenize(part);
                var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
                expressions.push(ast);
            }
            else {
                throw new ParseException('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i) + " in", location);
            }
        }
        return new ast_1.ASTWithSource(new ast_1.Interpolation(strings, expressions), input, location);
    };
    Parser.prototype.wrapLiteralPrimitive = function (input, location) {
        return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(input), input, location);
    };
    Parser.prototype._checkNoInterpolation = function (input, location) {
        var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
        if (parts.length > 1) {
            throw new ParseException('Got interpolation ({{}}) where expression was expected', input, "at column " + this._findInterpolationErrorColumn(parts, 1) + " in", location);
        }
    };
    Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx) {
        var errLocation = '';
        for (var j = 0; j < partInErrIdx; j++) {
            errLocation += j % 2 === 0 ? parts[j] : "{{" + parts[j] + "}}";
        }
        return errLocation.length;
    };
    Parser = __decorate([
        decorators_1.Injectable(), 
        __metadata('design:paramtypes', [lexer_1.Lexer, reflection_1.Reflector])
    ], Parser);
    return Parser;
})();
exports.Parser = Parser;
var _ParseAST = (function () {
    function _ParseAST(input, location, tokens, reflector, parseAction) {
        this.input = input;
        this.location = location;
        this.tokens = tokens;
        this.reflector = reflector;
        this.parseAction = parseAction;
        this.index = 0;
    }
    _ParseAST.prototype.peek = function (offset) {
        var i = this.index + offset;
        return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;
    };
    Object.defineProperty(_ParseAST.prototype, "next", {
        get: function () { return this.peek(0); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
        get: function () {
            return (this.index < this.tokens.length) ? this.next.index : this.input.length;
        },
        enumerable: true,
        configurable: true
    });
    _ParseAST.prototype.advance = function () { this.index++; };
    _ParseAST.prototype.optionalCharacter = function (code) {
        if (this.next.isCharacter(code)) {
            this.advance();
            return true;
        }
        else {
            return false;
        }
    };
    _ParseAST.prototype.optionalKeywordVar = function () {
        if (this.peekKeywordVar()) {
            this.advance();
            return true;
        }
        else {
            return false;
        }
    };
    _ParseAST.prototype.peekKeywordVar = function () { return this.next.isKeywordVar() || this.next.isOperator('#'); };
    _ParseAST.prototype.expectCharacter = function (code) {
        if (this.optionalCharacter(code))
            return;
        this.error("Missing expected " + lang_1.StringWrapper.fromCharCode(code));
    };
    _ParseAST.prototype.optionalOperator = function (op) {
        if (this.next.isOperator(op)) {
            this.advance();
            return true;
        }
        else {
            return false;
        }
    };
    _ParseAST.prototype.expectOperator = function (operator) {
        if (this.optionalOperator(operator))
            return;
        this.error("Missing expected operator " + operator);
    };
    _ParseAST.prototype.expectIdentifierOrKeyword = function () {
        var n = this.next;
        if (!n.isIdentifier() && !n.isKeyword()) {
            this.error("Unexpected token " + n + ", expected identifier or keyword");
        }
        this.advance();
        return n.toString();
    };
    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
        var n = this.next;
        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
            this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
        }
        this.advance();
        return n.toString();
    };
    _ParseAST.prototype.parseChain = function () {
        var exprs = [];
        while (this.index < this.tokens.length) {
            var expr = this.parsePipe();
            exprs.push(expr);
            if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
                if (!this.parseAction) {
                    this.error("Binding expression cannot contain chained expression");
                }
                while (this.optionalCharacter(lexer_1.$SEMICOLON)) {
                } // read all semicolons
            }
            else if (this.index < this.tokens.length) {
                this.error("Unexpected token '" + this.next + "'");
            }
        }
        if (exprs.length == 0)
            return new ast_1.EmptyExpr();
        if (exprs.length == 1)
            return exprs[0];
        return new ast_1.Chain(exprs);
    };
    _ParseAST.prototype.parseSimpleBinding = function () {
        var ast = this.parseChain();
        if (!SimpleExpressionChecker.check(ast)) {
            this.error("Simple binding expression can only contain field access and constants'");
        }
        return ast;
    };
    _ParseAST.prototype.parsePipe = function () {
        var result = this.parseExpression();
        if (this.optionalOperator("|")) {
            if (this.parseAction) {
                this.error("Cannot have a pipe in an action expression");
            }
            do {
                var name = this.expectIdentifierOrKeyword();
                var args = [];
                while (this.optionalCharacter(lexer_1.$COLON)) {
                    args.push(this.parsePipe());
                }
                result = new ast_1.BindingPipe(result, name, args);
            } while (this.optionalOperator("|"));
        }
        return result;
    };
    _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };
    _ParseAST.prototype.parseConditional = function () {
        var start = this.inputIndex;
        var result = this.parseLogicalOr();
        if (this.optionalOperator('?')) {
            var yes = this.parsePipe();
            if (!this.optionalCharacter(lexer_1.$COLON)) {
                var end = this.inputIndex;
                var expression = this.input.substring(start, end);
                this.error("Conditional expression " + expression + " requires all 3 expressions");
            }
            var no = this.parsePipe();
            return new ast_1.Conditional(result, yes, no);
        }
        else {
            return result;
        }
    };
    _ParseAST.prototype.parseLogicalOr = function () {
        // '||'
        var result = this.parseLogicalAnd();
        while (this.optionalOperator('||')) {
            result = new ast_1.Binary('||', result, this.parseLogicalAnd());
        }
        return result;
    };
    _ParseAST.prototype.parseLogicalAnd = function () {
        // '&&'
        var result = this.parseEquality();
        while (this.optionalOperator('&&')) {
            result = new ast_1.Binary('&&', result, this.parseEquality());
        }
        return result;
    };
    _ParseAST.prototype.parseEquality = function () {
        // '==','!=','===','!=='
        var result = this.parseRelational();
        while (true) {
            if (this.optionalOperator('==')) {
                result = new ast_1.Binary('==', result, this.parseRelational());
            }
            else if (this.optionalOperator('===')) {
                result = new ast_1.Binary('===', result, this.parseRelational());
            }
            else if (this.optionalOperator('!=')) {
                result = new ast_1.Binary('!=', result, this.parseRelational());
            }
            else if (this.optionalOperator('!==')) {
                result = new ast_1.Binary('!==', result, this.parseRelational());
            }
            else {
                return result;
            }
        }
    };
    _ParseAST.prototype.parseRelational = function () {
        // '<', '>', '<=', '>='
        var result = this.parseAdditive();
        while (true) {
            if (this.optionalOperator('<')) {
                result = new ast_1.Binary('<', result, this.parseAdditive());
            }
            else if (this.optionalOperator('>')) {
                result = new ast_1.Binary('>', result, this.parseAdditive());
            }
            else if (this.optionalOperator('<=')) {
                result = new ast_1.Binary('<=', result, this.parseAdditive());
            }
            else if (this.optionalOperator('>=')) {
                result = new ast_1.Binary('>=', result, this.parseAdditive());
            }
            else {
                return result;
            }
        }
    };
    _ParseAST.prototype.parseAdditive = function () {
        // '+', '-'
        var result = this.parseMultiplicative();
        while (true) {
            if (this.optionalOperator('+')) {
                result = new ast_1.Binary('+', result, this.parseMultiplicative());
            }
            else if (this.optionalOperator('-')) {
                result = new ast_1.Binary('-', result, this.parseMultiplicative());
            }
            else {
                return result;
            }
        }
    };
    _ParseAST.prototype.parseMultiplicative = function () {
        // '*', '%', '/'
        var result = this.parsePrefix();
        while (true) {
            if (this.optionalOperator('*')) {
                result = new ast_1.Binary('*', result, this.parsePrefix());
            }
            else if (this.optionalOperator('%')) {
                result = new ast_1.Binary('%', result, this.parsePrefix());
            }
            else if (this.optionalOperator('/')) {
                result = new ast_1.Binary('/', result, this.parsePrefix());
            }
            else {
                return result;
            }
        }
    };
    _ParseAST.prototype.parsePrefix = function () {
        if (this.optionalOperator('+')) {
            return this.parsePrefix();
        }
        else if (this.optionalOperator('-')) {
            return new ast_1.Binary('-', new ast_1.LiteralPrimitive(0), this.parsePrefix());
        }
        else if (this.optionalOperator('!')) {
            return new ast_1.PrefixNot(this.parsePrefix());
        }
        else {
            return this.parseCallChain();
        }
    };
    _ParseAST.prototype.parseCallChain = function () {
        var result = this.parsePrimary();
        while (true) {
            if (this.optionalCharacter(lexer_1.$PERIOD)) {
                result = this.parseAccessMemberOrMethodCall(result, false);
            }
            else if (this.optionalOperator('?.')) {
                result = this.parseAccessMemberOrMethodCall(result, true);
            }
            else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
                var key = this.parsePipe();
                this.expectCharacter(lexer_1.$RBRACKET);
                if (this.optionalOperator("=")) {
                    var value = this.parseConditional();
                    result = new ast_1.KeyedWrite(result, key, value);
                }
                else {
                    result = new ast_1.KeyedRead(result, key);
                }
            }
            else if (this.optionalCharacter(lexer_1.$LPAREN)) {
                var args = this.parseCallArguments();
                this.expectCharacter(lexer_1.$RPAREN);
                result = new ast_1.FunctionCall(result, args);
            }
            else {
                return result;
            }
        }
    };
    _ParseAST.prototype.parsePrimary = function () {
        if (this.optionalCharacter(lexer_1.$LPAREN)) {
            var result = this.parsePipe();
            this.expectCharacter(lexer_1.$RPAREN);
            return result;
        }
        else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
            this.advance();
            return new ast_1.LiteralPrimitive(null);
        }
        else if (this.next.isKeywordTrue()) {
            this.advance();
            return new ast_1.LiteralPrimitive(true);
        }
        else if (this.next.isKeywordFalse()) {
            this.advance();
            return new ast_1.LiteralPrimitive(false);
        }
        else if (this.parseAction && this.next.isKeywordIf()) {
            this.advance();
            this.expectCharacter(lexer_1.$LPAREN);
            var condition = this.parseExpression();
            this.expectCharacter(lexer_1.$RPAREN);
            var ifExp = this.parseExpressionOrBlock();
            var elseExp;
            if (this.next.isKeywordElse()) {
                this.advance();
                elseExp = this.parseExpressionOrBlock();
            }
            return new ast_1.If(condition, ifExp, elseExp);
        }
        else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
            var elements = this.parseExpressionList(lexer_1.$RBRACKET);
            this.expectCharacter(lexer_1.$RBRACKET);
            return new ast_1.LiteralArray(elements);
        }
        else if (this.next.isCharacter(lexer_1.$LBRACE)) {
            return this.parseLiteralMap();
        }
        else if (this.next.isIdentifier()) {
            return this.parseAccessMemberOrMethodCall(_implicitReceiver, false);
        }
        else if (this.next.isNumber()) {
            var value = this.next.toNumber();
            this.advance();
            return new ast_1.LiteralPrimitive(value);
        }
        else if (this.next.isString()) {
            var literalValue = this.next.toString();
            this.advance();
            return new ast_1.LiteralPrimitive(literalValue);
        }
        else if (this.index >= this.tokens.length) {
            this.error("Unexpected end of expression: " + this.input);
        }
        else {
            this.error("Unexpected token " + this.next);
        }
        // error() throws, so we don't reach here.
        throw new exceptions_1.BaseException("Fell through all cases in parsePrimary");
    };
    _ParseAST.prototype.parseExpressionList = function (terminator) {
        var result = [];
        if (!this.next.isCharacter(terminator)) {
            do {
                result.push(this.parsePipe());
            } while (this.optionalCharacter(lexer_1.$COMMA));
        }
        return result;
    };
    _ParseAST.prototype.parseLiteralMap = function () {
        var keys = [];
        var values = [];
        this.expectCharacter(lexer_1.$LBRACE);
        if (!this.optionalCharacter(lexer_1.$RBRACE)) {
            do {
                var key = this.expectIdentifierOrKeywordOrString();
                keys.push(key);
                this.expectCharacter(lexer_1.$COLON);
                values.push(this.parsePipe());
            } while (this.optionalCharacter(lexer_1.$COMMA));
            this.expectCharacter(lexer_1.$RBRACE);
        }
        return new ast_1.LiteralMap(keys, values);
    };
    _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
        if (isSafe === void 0) { isSafe = false; }
        var id = this.expectIdentifierOrKeyword();
        if (this.optionalCharacter(lexer_1.$LPAREN)) {
            var args = this.parseCallArguments();
            this.expectCharacter(lexer_1.$RPAREN);
            var fn = this.reflector.method(id);
            return isSafe ? new ast_1.SafeMethodCall(receiver, id, fn, args) :
                new ast_1.MethodCall(receiver, id, fn, args);
        }
        else {
            if (isSafe) {
                if (this.optionalOperator("=")) {
                    this.error("The '?.' operator cannot be used in the assignment");
                }
                else {
                    return new ast_1.SafePropertyRead(receiver, id, this.reflector.getter(id));
                }
            }
            else {
                if (this.optionalOperator("=")) {
                    if (!this.parseAction) {
                        this.error("Bindings cannot contain assignments");
                    }
                    var value = this.parseConditional();
                    return new ast_1.PropertyWrite(receiver, id, this.reflector.setter(id), value);
                }
                else {
                    return new ast_1.PropertyRead(receiver, id, this.reflector.getter(id));
                }
            }
        }
        return null;
    };
    _ParseAST.prototype.parseCallArguments = function () {
        if (this.next.isCharacter(lexer_1.$RPAREN))
            return [];
        var positionals = [];
        do {
            positionals.push(this.parsePipe());
        } while (this.optionalCharacter(lexer_1.$COMMA));
        return positionals;
    };
    _ParseAST.prototype.parseExpressionOrBlock = function () {
        if (this.optionalCharacter(lexer_1.$LBRACE)) {
            var block = this.parseBlockContent();
            this.expectCharacter(lexer_1.$RBRACE);
            return block;
        }
        return this.parseExpression();
    };
    _ParseAST.prototype.parseBlockContent = function () {
        if (!this.parseAction) {
            this.error("Binding expression cannot contain chained expression");
        }
        var exprs = [];
        while (this.index < this.tokens.length && !this.next.isCharacter(lexer_1.$RBRACE)) {
            var expr = this.parseExpression();
            exprs.push(expr);
            if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
                while (this.optionalCharacter(lexer_1.$SEMICOLON)) {
                } // read all semicolons
            }
        }
        if (exprs.length == 0)
            return new ast_1.EmptyExpr();
        if (exprs.length == 1)
            return exprs[0];
        return new ast_1.Chain(exprs);
    };
    /**
     * An identifier, a keyword, a string with an optional `-` inbetween.
     */
    _ParseAST.prototype.expectTemplateBindingKey = function () {
        var result = '';
        var operatorFound = false;
        do {
            result += this.expectIdentifierOrKeywordOrString();
            operatorFound = this.optionalOperator('-');
            if (operatorFound) {
                result += '-';
            }
        } while (operatorFound);
        return result.toString();
    };
    _ParseAST.prototype.parseTemplateBindings = function () {
        var bindings = [];
        var prefix = null;
        while (this.index < this.tokens.length) {
            var keyIsVar = this.optionalKeywordVar();
            var key = this.expectTemplateBindingKey();
            if (!keyIsVar) {
                if (prefix == null) {
                    prefix = key;
                }
                else {
                    key = prefix + '-' + key;
                }
            }
            this.optionalCharacter(lexer_1.$COLON);
            var name = null;
            var expression = null;
            if (keyIsVar) {
                if (this.optionalOperator("=")) {
                    name = this.expectTemplateBindingKey();
                }
                else {
                    name = '\$implicit';
                }
            }
            else if (this.next !== lexer_1.EOF && !this.peekKeywordVar()) {
                var start = this.inputIndex;
                var ast = this.parsePipe();
                var source = this.input.substring(start, this.inputIndex);
                expression = new ast_1.ASTWithSource(ast, source, this.location);
            }
            bindings.push(new ast_1.TemplateBinding(key, keyIsVar, name, expression));
            if (!this.optionalCharacter(lexer_1.$SEMICOLON)) {
                this.optionalCharacter(lexer_1.$COMMA);
            }
        }
        return bindings;
    };
    _ParseAST.prototype.error = function (message, index) {
        if (index === void 0) { index = null; }
        if (lang_1.isBlank(index))
            index = this.index;
        var location = (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
            "at the end of the expression";
        throw new ParseException(message, this.input, location, this.location);
    };
    return _ParseAST;
})();
exports._ParseAST = _ParseAST;
var SimpleExpressionChecker = (function () {
    function SimpleExpressionChecker() {
        this.simple = true;
    }
    SimpleExpressionChecker.check = function (ast) {
        var s = new SimpleExpressionChecker();
        ast.visit(s);
        return s.simple;
    };
    SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast) { };
    SimpleExpressionChecker.prototype.visitInterpolation = function (ast) { this.simple = false; };
    SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast) { };
    SimpleExpressionChecker.prototype.visitPropertyRead = function (ast) { };
    SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast) { this.simple = false; };
    SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast) { this.simple = false; };
    SimpleExpressionChecker.prototype.visitMethodCall = function (ast) { this.simple = false; };
    SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast) { this.simple = false; };
    SimpleExpressionChecker.prototype.visitFunctionCall = function (ast) { this.simple = false; };
    SimpleExpressionChecker.prototype.visitLiteralArray = function (ast) { this.visitAll(ast.expressions); };
    SimpleExpressionChecker.prototype.visitLiteralMap = function (ast) { this.visitAll(ast.values); };
    SimpleExpressionChecker.prototype.visitBinary = function (ast) { this.simple = false; };
    SimpleExpressionChecker.prototype.visitPrefixNot = function (ast) { this.simple = false; };
    SimpleExpressionChecker.prototype.visitConditional = function (ast) { this.simple = false; };
    SimpleExpressionChecker.prototype.visitPipe = function (ast) { this.simple = false; };
    SimpleExpressionChecker.prototype.visitKeyedRead = function (ast) { this.simple = false; };
    SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast) { this.simple = false; };
    SimpleExpressionChecker.prototype.visitAll = function (asts) {
        var res = collection_1.ListWrapper.createFixedSize(asts.length);
        for (var i = 0; i < asts.length; ++i) {
            res[i] = asts[i].visit(this);
        }
        return res;
    };
    SimpleExpressionChecker.prototype.visitChain = function (ast) { this.simple = false; };
    SimpleExpressionChecker.prototype.visitIf = function (ast) { this.simple = false; };
    return SimpleExpressionChecker;
})();

},{"./ast":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/parser/ast.js","./lexer":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/parser/lexer.js","angular2/src/core/di/decorators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/decorators.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/reflection/reflection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflection.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/pipe_lifecycle_reflector.js":[function(require,module,exports){
'use strict';function implementsOnDestroy(pipe) {
    return pipe.constructor.prototype.onDestroy;
}
exports.implementsOnDestroy = implementsOnDestroy;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/pipes.js":[function(require,module,exports){
'use strict';var SelectedPipe = (function () {
    function SelectedPipe(pipe, pure) {
        this.pipe = pipe;
        this.pure = pure;
    }
    return SelectedPipe;
})();
exports.SelectedPipe = SelectedPipe;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/proto_change_detector.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var ast_1 = require('./parser/ast');
var change_detection_util_1 = require('./change_detection_util');
var dynamic_change_detector_1 = require('./dynamic_change_detector');
var directive_record_1 = require('./directive_record');
var event_binding_1 = require('./event_binding');
var coalesce_1 = require('./coalesce');
var proto_record_1 = require('./proto_record');
var DynamicProtoChangeDetector = (function () {
    function DynamicProtoChangeDetector(_definition) {
        this._definition = _definition;
        this._propertyBindingRecords = createPropertyRecords(_definition);
        this._eventBindingRecords = createEventRecords(_definition);
        this._propertyBindingTargets = this._definition.bindingRecords.map(function (b) { return b.target; });
        this._directiveIndices = this._definition.directiveRecords.map(function (d) { return d.directiveIndex; });
    }
    DynamicProtoChangeDetector.prototype.instantiate = function (dispatcher) {
        return new dynamic_change_detector_1.DynamicChangeDetector(this._definition.id, dispatcher, this._propertyBindingRecords.length, this._propertyBindingTargets, this._directiveIndices, this._definition.strategy, this._propertyBindingRecords, this._eventBindingRecords, this._definition.directiveRecords, this._definition.genConfig);
    };
    return DynamicProtoChangeDetector;
})();
exports.DynamicProtoChangeDetector = DynamicProtoChangeDetector;
function createPropertyRecords(definition) {
    var recordBuilder = new ProtoRecordBuilder();
    collection_1.ListWrapper.forEachWithIndex(definition.bindingRecords, function (b, index) { return recordBuilder.add(b, definition.variableNames, index); });
    return coalesce_1.coalesce(recordBuilder.records);
}
exports.createPropertyRecords = createPropertyRecords;
function createEventRecords(definition) {
    // TODO: vsavkin: remove $event when the compiler handles render-side variables properly
    var varNames = collection_1.ListWrapper.concat(['$event'], definition.variableNames);
    return definition.eventRecords.map(function (er) {
        var records = _ConvertAstIntoProtoRecords.create(er, varNames);
        var dirIndex = er.implicitReceiver instanceof directive_record_1.DirectiveIndex ? er.implicitReceiver : null;
        return new event_binding_1.EventBinding(er.target.name, er.target.elementIndex, dirIndex, records);
    });
}
exports.createEventRecords = createEventRecords;
var ProtoRecordBuilder = (function () {
    function ProtoRecordBuilder() {
        this.records = [];
    }
    ProtoRecordBuilder.prototype.add = function (b, variableNames, bindingIndex) {
        var oldLast = collection_1.ListWrapper.last(this.records);
        if (lang_1.isPresent(oldLast) && oldLast.bindingRecord.directiveRecord == b.directiveRecord) {
            oldLast.lastInDirective = false;
        }
        var numberOfRecordsBefore = this.records.length;
        this._appendRecords(b, variableNames, bindingIndex);
        var newLast = collection_1.ListWrapper.last(this.records);
        if (lang_1.isPresent(newLast) && newLast !== oldLast) {
            newLast.lastInBinding = true;
            newLast.lastInDirective = true;
            this._setArgumentToPureFunction(numberOfRecordsBefore);
        }
    };
    /** @internal */
    ProtoRecordBuilder.prototype._setArgumentToPureFunction = function (startIndex) {
        var _this = this;
        for (var i = startIndex; i < this.records.length; ++i) {
            var rec = this.records[i];
            if (rec.isPureFunction()) {
                rec.args.forEach(function (recordIndex) { return _this.records[recordIndex - 1].argumentToPureFunction =
                    true; });
            }
            if (rec.mode === proto_record_1.RecordType.Pipe) {
                rec.args.forEach(function (recordIndex) { return _this.records[recordIndex - 1].argumentToPureFunction =
                    true; });
                this.records[rec.contextIndex - 1].argumentToPureFunction = true;
            }
        }
    };
    /** @internal */
    ProtoRecordBuilder.prototype._appendRecords = function (b, variableNames, bindingIndex) {
        if (b.isDirectiveLifecycle()) {
            this.records.push(new proto_record_1.ProtoRecord(proto_record_1.RecordType.DirectiveLifecycle, b.lifecycleEvent, null, [], [], -1, null, this.records.length + 1, b, false, false, false, false, null));
        }
        else {
            _ConvertAstIntoProtoRecords.append(this.records, b, variableNames, bindingIndex);
        }
    };
    return ProtoRecordBuilder;
})();
exports.ProtoRecordBuilder = ProtoRecordBuilder;
var _ConvertAstIntoProtoRecords = (function () {
    function _ConvertAstIntoProtoRecords(_records, _bindingRecord, _variableNames, _bindingIndex) {
        this._records = _records;
        this._bindingRecord = _bindingRecord;
        this._variableNames = _variableNames;
        this._bindingIndex = _bindingIndex;
    }
    _ConvertAstIntoProtoRecords.append = function (records, b, variableNames, bindingIndex) {
        var c = new _ConvertAstIntoProtoRecords(records, b, variableNames, bindingIndex);
        b.ast.visit(c);
    };
    _ConvertAstIntoProtoRecords.create = function (b, variableNames) {
        var rec = [];
        _ConvertAstIntoProtoRecords.append(rec, b, variableNames, null);
        rec[rec.length - 1].lastInBinding = true;
        return rec;
    };
    _ConvertAstIntoProtoRecords.prototype.visitImplicitReceiver = function (ast) { return this._bindingRecord.implicitReceiver; };
    _ConvertAstIntoProtoRecords.prototype.visitInterpolation = function (ast) {
        var args = this._visitAll(ast.expressions);
        return this._addRecord(proto_record_1.RecordType.Interpolate, "interpolate", _interpolationFn(ast.strings), args, ast.strings, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitLiteralPrimitive = function (ast) {
        return this._addRecord(proto_record_1.RecordType.Const, "literal", ast.value, [], null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitPropertyRead = function (ast) {
        var receiver = ast.receiver.visit(this);
        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name) &&
            ast.receiver instanceof ast_1.ImplicitReceiver) {
            return this._addRecord(proto_record_1.RecordType.Local, ast.name, ast.name, [], null, receiver);
        }
        else {
            return this._addRecord(proto_record_1.RecordType.PropertyRead, ast.name, ast.getter, [], null, receiver);
        }
    };
    _ConvertAstIntoProtoRecords.prototype.visitPropertyWrite = function (ast) {
        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name) &&
            ast.receiver instanceof ast_1.ImplicitReceiver) {
            throw new exceptions_1.BaseException("Cannot reassign a variable binding " + ast.name);
        }
        else {
            var receiver = ast.receiver.visit(this);
            var value = ast.value.visit(this);
            return this._addRecord(proto_record_1.RecordType.PropertyWrite, ast.name, ast.setter, [value], null, receiver);
        }
    };
    _ConvertAstIntoProtoRecords.prototype.visitKeyedWrite = function (ast) {
        var obj = ast.obj.visit(this);
        var key = ast.key.visit(this);
        var value = ast.value.visit(this);
        return this._addRecord(proto_record_1.RecordType.KeyedWrite, null, null, [key, value], null, obj);
    };
    _ConvertAstIntoProtoRecords.prototype.visitSafePropertyRead = function (ast) {
        var receiver = ast.receiver.visit(this);
        return this._addRecord(proto_record_1.RecordType.SafeProperty, ast.name, ast.getter, [], null, receiver);
    };
    _ConvertAstIntoProtoRecords.prototype.visitMethodCall = function (ast) {
        var receiver = ast.receiver.visit(this);
        var args = this._visitAll(ast.args);
        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name)) {
            var target = this._addRecord(proto_record_1.RecordType.Local, ast.name, ast.name, [], null, receiver);
            return this._addRecord(proto_record_1.RecordType.InvokeClosure, "closure", null, args, null, target);
        }
        else {
            return this._addRecord(proto_record_1.RecordType.InvokeMethod, ast.name, ast.fn, args, null, receiver);
        }
    };
    _ConvertAstIntoProtoRecords.prototype.visitSafeMethodCall = function (ast) {
        var receiver = ast.receiver.visit(this);
        var args = this._visitAll(ast.args);
        return this._addRecord(proto_record_1.RecordType.SafeMethodInvoke, ast.name, ast.fn, args, null, receiver);
    };
    _ConvertAstIntoProtoRecords.prototype.visitFunctionCall = function (ast) {
        var target = ast.target.visit(this);
        var args = this._visitAll(ast.args);
        return this._addRecord(proto_record_1.RecordType.InvokeClosure, "closure", null, args, null, target);
    };
    _ConvertAstIntoProtoRecords.prototype.visitLiteralArray = function (ast) {
        var primitiveName = "arrayFn" + ast.expressions.length;
        return this._addRecord(proto_record_1.RecordType.CollectionLiteral, primitiveName, _arrayFn(ast.expressions.length), this._visitAll(ast.expressions), null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitLiteralMap = function (ast) {
        return this._addRecord(proto_record_1.RecordType.CollectionLiteral, _mapPrimitiveName(ast.keys), change_detection_util_1.ChangeDetectionUtil.mapFn(ast.keys), this._visitAll(ast.values), null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitBinary = function (ast) {
        var left = ast.left.visit(this);
        var right = ast.right.visit(this);
        return this._addRecord(proto_record_1.RecordType.PrimitiveOp, _operationToPrimitiveName(ast.operation), _operationToFunction(ast.operation), [left, right], null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitPrefixNot = function (ast) {
        var exp = ast.expression.visit(this);
        return this._addRecord(proto_record_1.RecordType.PrimitiveOp, "operation_negate", change_detection_util_1.ChangeDetectionUtil.operation_negate, [exp], null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitConditional = function (ast) {
        var c = ast.condition.visit(this);
        var t = ast.trueExp.visit(this);
        var f = ast.falseExp.visit(this);
        return this._addRecord(proto_record_1.RecordType.PrimitiveOp, "cond", change_detection_util_1.ChangeDetectionUtil.cond, [c, t, f], null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitPipe = function (ast) {
        var value = ast.exp.visit(this);
        var args = this._visitAll(ast.args);
        return this._addRecord(proto_record_1.RecordType.Pipe, ast.name, ast.name, args, null, value);
    };
    _ConvertAstIntoProtoRecords.prototype.visitKeyedRead = function (ast) {
        var obj = ast.obj.visit(this);
        var key = ast.key.visit(this);
        return this._addRecord(proto_record_1.RecordType.KeyedRead, "keyedAccess", change_detection_util_1.ChangeDetectionUtil.keyedAccess, [key], null, obj);
    };
    _ConvertAstIntoProtoRecords.prototype.visitChain = function (ast) {
        var _this = this;
        var args = ast.expressions.map(function (e) { return e.visit(_this); });
        return this._addRecord(proto_record_1.RecordType.Chain, "chain", null, args, null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitIf = function (ast) { throw new exceptions_1.BaseException('Not supported'); };
    _ConvertAstIntoProtoRecords.prototype._visitAll = function (asts) {
        var res = collection_1.ListWrapper.createFixedSize(asts.length);
        for (var i = 0; i < asts.length; ++i) {
            res[i] = asts[i].visit(this);
        }
        return res;
    };
    _ConvertAstIntoProtoRecords.prototype._addRecord = function (type, name, funcOrValue, args, fixedArgs, context) {
        var selfIndex = this._records.length + 1;
        if (context instanceof directive_record_1.DirectiveIndex) {
            this._records.push(new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, -1, context, selfIndex, this._bindingRecord, false, false, false, false, this._bindingIndex));
        }
        else {
            this._records.push(new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, context, null, selfIndex, this._bindingRecord, false, false, false, false, this._bindingIndex));
        }
        return selfIndex;
    };
    return _ConvertAstIntoProtoRecords;
})();
function _arrayFn(length) {
    switch (length) {
        case 0:
            return change_detection_util_1.ChangeDetectionUtil.arrayFn0;
        case 1:
            return change_detection_util_1.ChangeDetectionUtil.arrayFn1;
        case 2:
            return change_detection_util_1.ChangeDetectionUtil.arrayFn2;
        case 3:
            return change_detection_util_1.ChangeDetectionUtil.arrayFn3;
        case 4:
            return change_detection_util_1.ChangeDetectionUtil.arrayFn4;
        case 5:
            return change_detection_util_1.ChangeDetectionUtil.arrayFn5;
        case 6:
            return change_detection_util_1.ChangeDetectionUtil.arrayFn6;
        case 7:
            return change_detection_util_1.ChangeDetectionUtil.arrayFn7;
        case 8:
            return change_detection_util_1.ChangeDetectionUtil.arrayFn8;
        case 9:
            return change_detection_util_1.ChangeDetectionUtil.arrayFn9;
        default:
            throw new exceptions_1.BaseException("Does not support literal maps with more than 9 elements");
    }
}
function _mapPrimitiveName(keys) {
    var stringifiedKeys = keys.map(function (k) { return lang_1.isString(k) ? "\"" + k + "\"" : "" + k; }).join(', ');
    return "mapFn([" + stringifiedKeys + "])";
}
function _operationToPrimitiveName(operation) {
    switch (operation) {
        case '+':
            return "operation_add";
        case '-':
            return "operation_subtract";
        case '*':
            return "operation_multiply";
        case '/':
            return "operation_divide";
        case '%':
            return "operation_remainder";
        case '==':
            return "operation_equals";
        case '!=':
            return "operation_not_equals";
        case '===':
            return "operation_identical";
        case '!==':
            return "operation_not_identical";
        case '<':
            return "operation_less_then";
        case '>':
            return "operation_greater_then";
        case '<=':
            return "operation_less_or_equals_then";
        case '>=':
            return "operation_greater_or_equals_then";
        case '&&':
            return "operation_logical_and";
        case '||':
            return "operation_logical_or";
        default:
            throw new exceptions_1.BaseException("Unsupported operation " + operation);
    }
}
function _operationToFunction(operation) {
    switch (operation) {
        case '+':
            return change_detection_util_1.ChangeDetectionUtil.operation_add;
        case '-':
            return change_detection_util_1.ChangeDetectionUtil.operation_subtract;
        case '*':
            return change_detection_util_1.ChangeDetectionUtil.operation_multiply;
        case '/':
            return change_detection_util_1.ChangeDetectionUtil.operation_divide;
        case '%':
            return change_detection_util_1.ChangeDetectionUtil.operation_remainder;
        case '==':
            return change_detection_util_1.ChangeDetectionUtil.operation_equals;
        case '!=':
            return change_detection_util_1.ChangeDetectionUtil.operation_not_equals;
        case '===':
            return change_detection_util_1.ChangeDetectionUtil.operation_identical;
        case '!==':
            return change_detection_util_1.ChangeDetectionUtil.operation_not_identical;
        case '<':
            return change_detection_util_1.ChangeDetectionUtil.operation_less_then;
        case '>':
            return change_detection_util_1.ChangeDetectionUtil.operation_greater_then;
        case '<=':
            return change_detection_util_1.ChangeDetectionUtil.operation_less_or_equals_then;
        case '>=':
            return change_detection_util_1.ChangeDetectionUtil.operation_greater_or_equals_then;
        case '&&':
            return change_detection_util_1.ChangeDetectionUtil.operation_logical_and;
        case '||':
            return change_detection_util_1.ChangeDetectionUtil.operation_logical_or;
        default:
            throw new exceptions_1.BaseException("Unsupported operation " + operation);
    }
}
function s(v) {
    return lang_1.isPresent(v) ? "" + v : '';
}
function _interpolationFn(strings) {
    var length = strings.length;
    var c0 = length > 0 ? strings[0] : null;
    var c1 = length > 1 ? strings[1] : null;
    var c2 = length > 2 ? strings[2] : null;
    var c3 = length > 3 ? strings[3] : null;
    var c4 = length > 4 ? strings[4] : null;
    var c5 = length > 5 ? strings[5] : null;
    var c6 = length > 6 ? strings[6] : null;
    var c7 = length > 7 ? strings[7] : null;
    var c8 = length > 8 ? strings[8] : null;
    var c9 = length > 9 ? strings[9] : null;
    switch (length - 1) {
        case 1:
            return function (a1) { return c0 + s(a1) + c1; };
        case 2:
            return function (a1, a2) { return c0 + s(a1) + c1 + s(a2) + c2; };
        case 3:
            return function (a1, a2, a3) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3; };
        case 4:
            return function (a1, a2, a3, a4) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4; };
        case 5:
            return function (a1, a2, a3, a4, a5) {
                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5;
            };
        case 6:
            return function (a1, a2, a3, a4, a5, a6) {
                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6;
            };
        case 7:
            return function (a1, a2, a3, a4, a5, a6, a7) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) +
                c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7; };
        case 8:
            return function (a1, a2, a3, a4, a5, a6, a7, a8) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) +
                c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) +
                c8; };
        case 9:
            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 +
                s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) +
                c7 + s(a8) + c8 + s(a9) + c9; };
        default:
            throw new exceptions_1.BaseException("Does not support more than 9 expressions");
    }
}

},{"./change_detection_util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection_util.js","./coalesce":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/coalesce.js","./directive_record":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/directive_record.js","./dynamic_change_detector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/dynamic_change_detector.js","./event_binding":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/event_binding.js","./parser/ast":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/parser/ast.js","./proto_record":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/proto_record.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/proto_record.js":[function(require,module,exports){
'use strict';(function (RecordType) {
    RecordType[RecordType["Self"] = 0] = "Self";
    RecordType[RecordType["Const"] = 1] = "Const";
    RecordType[RecordType["PrimitiveOp"] = 2] = "PrimitiveOp";
    RecordType[RecordType["PropertyRead"] = 3] = "PropertyRead";
    RecordType[RecordType["PropertyWrite"] = 4] = "PropertyWrite";
    RecordType[RecordType["Local"] = 5] = "Local";
    RecordType[RecordType["InvokeMethod"] = 6] = "InvokeMethod";
    RecordType[RecordType["InvokeClosure"] = 7] = "InvokeClosure";
    RecordType[RecordType["KeyedRead"] = 8] = "KeyedRead";
    RecordType[RecordType["KeyedWrite"] = 9] = "KeyedWrite";
    RecordType[RecordType["Pipe"] = 10] = "Pipe";
    RecordType[RecordType["Interpolate"] = 11] = "Interpolate";
    RecordType[RecordType["SafeProperty"] = 12] = "SafeProperty";
    RecordType[RecordType["CollectionLiteral"] = 13] = "CollectionLiteral";
    RecordType[RecordType["SafeMethodInvoke"] = 14] = "SafeMethodInvoke";
    RecordType[RecordType["DirectiveLifecycle"] = 15] = "DirectiveLifecycle";
    RecordType[RecordType["Chain"] = 16] = "Chain";
})(exports.RecordType || (exports.RecordType = {}));
var RecordType = exports.RecordType;
var ProtoRecord = (function () {
    function ProtoRecord(mode, name, funcOrValue, args, fixedArgs, contextIndex, directiveIndex, selfIndex, bindingRecord, lastInBinding, lastInDirective, argumentToPureFunction, referencedBySelf, propertyBindingIndex) {
        this.mode = mode;
        this.name = name;
        this.funcOrValue = funcOrValue;
        this.args = args;
        this.fixedArgs = fixedArgs;
        this.contextIndex = contextIndex;
        this.directiveIndex = directiveIndex;
        this.selfIndex = selfIndex;
        this.bindingRecord = bindingRecord;
        this.lastInBinding = lastInBinding;
        this.lastInDirective = lastInDirective;
        this.argumentToPureFunction = argumentToPureFunction;
        this.referencedBySelf = referencedBySelf;
        this.propertyBindingIndex = propertyBindingIndex;
    }
    ProtoRecord.prototype.isPureFunction = function () {
        return this.mode === RecordType.Interpolate || this.mode === RecordType.CollectionLiteral;
    };
    ProtoRecord.prototype.isUsedByOtherRecord = function () { return !this.lastInBinding || this.referencedBySelf; };
    ProtoRecord.prototype.shouldBeChecked = function () {
        return this.argumentToPureFunction || this.lastInBinding || this.isPureFunction() ||
            this.isPipeRecord();
    };
    ProtoRecord.prototype.isPipeRecord = function () { return this.mode === RecordType.Pipe; };
    ProtoRecord.prototype.isLifeCycleRecord = function () { return this.mode === RecordType.DirectiveLifecycle; };
    return ProtoRecord;
})();
exports.ProtoRecord = ProtoRecord;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/anchor_based_app_root_url.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var app_root_url_1 = require("angular2/src/core/compiler/app_root_url");
var dom_adapter_1 = require("angular2/src/core/dom/dom_adapter");
var di_1 = require("angular2/src/core/di");
/**
 * Extension of {@link AppRootUrl} that uses a DOM anchor tag to set the root url to
 * the current page's url.
 */
var AnchorBasedAppRootUrl = (function (_super) {
    __extends(AnchorBasedAppRootUrl, _super);
    function AnchorBasedAppRootUrl() {
        _super.call(this, "");
        // compute the root url to pass to AppRootUrl
        var a = dom_adapter_1.DOM.createElement('a');
        dom_adapter_1.DOM.resolveAndSetHref(a, './', null);
        this.value = dom_adapter_1.DOM.getHref(a);
    }
    AnchorBasedAppRootUrl = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], AnchorBasedAppRootUrl);
    return AnchorBasedAppRootUrl;
})(app_root_url_1.AppRootUrl);
exports.AnchorBasedAppRootUrl = AnchorBasedAppRootUrl;

},{"angular2/src/core/compiler/app_root_url":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/app_root_url.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/app_root_url.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
/**
 * Specifies app root url for the application.
 *
 * Used by the {@link Compiler} when resolving HTML and CSS template URLs.
 *
 * This interface can be overridden by the application developer to create custom behavior.
 *
 * See {@link Compiler}
 */
var AppRootUrl = (function () {
    function AppRootUrl(value) {
        this.value = value;
    }
    AppRootUrl = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [String])
    ], AppRootUrl);
    return AppRootUrl;
})();
exports.AppRootUrl = AppRootUrl;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/change_definition_factory.js":[function(require,module,exports){
'use strict';var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var reflection_1 = require('angular2/src/core/reflection/reflection');
var change_detection_1 = require('angular2/src/core/change_detection/change_detection');
var template_ast_1 = require('./template_ast');
var interfaces_1 = require('angular2/src/core/linker/interfaces');
function createChangeDetectorDefinitions(componentType, componentStrategy, genConfig, parsedTemplate) {
    var pvVisitors = [];
    var visitor = new ProtoViewVisitor(null, pvVisitors, componentStrategy);
    template_ast_1.templateVisitAll(visitor, parsedTemplate);
    return createChangeDefinitions(pvVisitors, componentType, genConfig);
}
exports.createChangeDetectorDefinitions = createChangeDetectorDefinitions;
var ProtoViewVisitor = (function () {
    function ProtoViewVisitor(parent, allVisitors, strategy) {
        this.parent = parent;
        this.allVisitors = allVisitors;
        this.strategy = strategy;
        this.boundTextCount = 0;
        this.boundElementCount = 0;
        this.variableNames = [];
        this.bindingRecords = [];
        this.eventRecords = [];
        this.directiveRecords = [];
        this.viewIndex = allVisitors.length;
        allVisitors.push(this);
    }
    ProtoViewVisitor.prototype.visitEmbeddedTemplate = function (ast, context) {
        this.boundElementCount++;
        for (var i = 0; i < ast.directives.length; i++) {
            ast.directives[i].visit(this, i);
        }
        var childVisitor = new ProtoViewVisitor(this, this.allVisitors, change_detection_1.ChangeDetectionStrategy.Default);
        // Attention: variables present on an embedded template count towards
        // the embedded template and not the template anchor!
        template_ast_1.templateVisitAll(childVisitor, ast.vars);
        template_ast_1.templateVisitAll(childVisitor, ast.children);
        return null;
    };
    ProtoViewVisitor.prototype.visitElement = function (ast, context) {
        if (ast.isBound()) {
            this.boundElementCount++;
        }
        template_ast_1.templateVisitAll(this, ast.inputs, null);
        template_ast_1.templateVisitAll(this, ast.outputs);
        template_ast_1.templateVisitAll(this, ast.exportAsVars);
        for (var i = 0; i < ast.directives.length; i++) {
            ast.directives[i].visit(this, i);
        }
        template_ast_1.templateVisitAll(this, ast.children);
        return null;
    };
    ProtoViewVisitor.prototype.visitNgContent = function (ast, context) { return null; };
    ProtoViewVisitor.prototype.visitVariable = function (ast, context) {
        this.variableNames.push(ast.name);
        return null;
    };
    ProtoViewVisitor.prototype.visitEvent = function (ast, directiveRecord) {
        var bindingRecord = lang_1.isPresent(directiveRecord) ?
            change_detection_1.BindingRecord.createForHostEvent(ast.handler, ast.fullName, directiveRecord) :
            change_detection_1.BindingRecord.createForEvent(ast.handler, ast.fullName, this.boundElementCount - 1);
        this.eventRecords.push(bindingRecord);
        return null;
    };
    ProtoViewVisitor.prototype.visitElementProperty = function (ast, directiveRecord) {
        var boundElementIndex = this.boundElementCount - 1;
        var dirIndex = lang_1.isPresent(directiveRecord) ? directiveRecord.directiveIndex : null;
        var bindingRecord;
        if (ast.type === template_ast_1.PropertyBindingType.Property) {
            bindingRecord =
                lang_1.isPresent(dirIndex) ?
                    change_detection_1.BindingRecord.createForHostProperty(dirIndex, ast.value, ast.name) :
                    change_detection_1.BindingRecord.createForElementProperty(ast.value, boundElementIndex, ast.name);
        }
        else if (ast.type === template_ast_1.PropertyBindingType.Attribute) {
            bindingRecord =
                lang_1.isPresent(dirIndex) ?
                    change_detection_1.BindingRecord.createForHostAttribute(dirIndex, ast.value, ast.name) :
                    change_detection_1.BindingRecord.createForElementAttribute(ast.value, boundElementIndex, ast.name);
        }
        else if (ast.type === template_ast_1.PropertyBindingType.Class) {
            bindingRecord =
                lang_1.isPresent(dirIndex) ?
                    change_detection_1.BindingRecord.createForHostClass(dirIndex, ast.value, ast.name) :
                    change_detection_1.BindingRecord.createForElementClass(ast.value, boundElementIndex, ast.name);
        }
        else if (ast.type === template_ast_1.PropertyBindingType.Style) {
            bindingRecord =
                lang_1.isPresent(dirIndex) ?
                    change_detection_1.BindingRecord.createForHostStyle(dirIndex, ast.value, ast.name, ast.unit) :
                    change_detection_1.BindingRecord.createForElementStyle(ast.value, boundElementIndex, ast.name, ast.unit);
        }
        this.bindingRecords.push(bindingRecord);
        return null;
    };
    ProtoViewVisitor.prototype.visitAttr = function (ast, context) { return null; };
    ProtoViewVisitor.prototype.visitBoundText = function (ast, context) {
        var boundTextIndex = this.boundTextCount++;
        this.bindingRecords.push(change_detection_1.BindingRecord.createForTextNode(ast.value, boundTextIndex));
        return null;
    };
    ProtoViewVisitor.prototype.visitText = function (ast, context) { return null; };
    ProtoViewVisitor.prototype.visitDirective = function (ast, directiveIndexAsNumber) {
        var directiveIndex = new change_detection_1.DirectiveIndex(this.boundElementCount - 1, directiveIndexAsNumber);
        var directiveMetadata = ast.directive;
        var directiveRecord = new change_detection_1.DirectiveRecord({
            directiveIndex: directiveIndex,
            callAfterContentInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterContentInit) !== -1,
            callAfterContentChecked: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterContentChecked) !== -1,
            callAfterViewInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterViewInit) !== -1,
            callAfterViewChecked: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterViewChecked) !== -1,
            callOnChanges: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.OnChanges) !== -1,
            callDoCheck: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.DoCheck) !== -1,
            callOnInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.OnInit) !== -1,
            changeDetection: directiveMetadata.changeDetection
        });
        this.directiveRecords.push(directiveRecord);
        template_ast_1.templateVisitAll(this, ast.inputs, directiveRecord);
        var bindingRecords = this.bindingRecords;
        if (directiveRecord.callOnChanges) {
            bindingRecords.push(change_detection_1.BindingRecord.createDirectiveOnChanges(directiveRecord));
        }
        if (directiveRecord.callOnInit) {
            bindingRecords.push(change_detection_1.BindingRecord.createDirectiveOnInit(directiveRecord));
        }
        if (directiveRecord.callDoCheck) {
            bindingRecords.push(change_detection_1.BindingRecord.createDirectiveDoCheck(directiveRecord));
        }
        template_ast_1.templateVisitAll(this, ast.hostProperties, directiveRecord);
        template_ast_1.templateVisitAll(this, ast.hostEvents, directiveRecord);
        template_ast_1.templateVisitAll(this, ast.exportAsVars);
        return null;
    };
    ProtoViewVisitor.prototype.visitDirectiveProperty = function (ast, directiveRecord) {
        // TODO: these setters should eventually be created by change detection, to make
        // it monomorphic!
        var setter = reflection_1.reflector.setter(ast.directiveName);
        this.bindingRecords.push(change_detection_1.BindingRecord.createForDirective(ast.value, ast.directiveName, setter, directiveRecord));
        return null;
    };
    return ProtoViewVisitor;
})();
function createChangeDefinitions(pvVisitors, componentType, genConfig) {
    var pvVariableNames = _collectNestedProtoViewsVariableNames(pvVisitors);
    return pvVisitors.map(function (pvVisitor) {
        var id = componentType.name + "_" + pvVisitor.viewIndex;
        return new change_detection_1.ChangeDetectorDefinition(id, pvVisitor.strategy, pvVariableNames[pvVisitor.viewIndex], pvVisitor.bindingRecords, pvVisitor.eventRecords, pvVisitor.directiveRecords, genConfig);
    });
}
function _collectNestedProtoViewsVariableNames(pvVisitors) {
    var nestedPvVariableNames = collection_1.ListWrapper.createFixedSize(pvVisitors.length);
    pvVisitors.forEach(function (pv) {
        var parentVariableNames = lang_1.isPresent(pv.parent) ? nestedPvVariableNames[pv.parent.viewIndex] : [];
        nestedPvVariableNames[pv.viewIndex] = parentVariableNames.concat(pv.variableNames);
    });
    return nestedPvVariableNames;
}

},{"./template_ast":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_ast.js","angular2/src/core/change_detection/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker/interfaces":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/interfaces.js","angular2/src/core/reflection/reflection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflection.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/change_detector_compiler.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var source_module_1 = require('./source_module');
var change_detection_jit_generator_1 = require('angular2/src/core/change_detection/change_detection_jit_generator');
var change_definition_factory_1 = require('./change_definition_factory');
var change_detection_1 = require('angular2/src/core/change_detection/change_detection');
var change_detector_codegen_1 = require('angular2/src/transform/template_compiler/change_detector_codegen');
var util_1 = require('./util');
var di_1 = require('angular2/src/core/di');
var ABSTRACT_CHANGE_DETECTOR = "AbstractChangeDetector";
var UTIL = "ChangeDetectionUtil";
var ABSTRACT_CHANGE_DETECTOR_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/abstract_change_detector" + util_1.MODULE_SUFFIX);
var UTIL_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/change_detection_util" + util_1.MODULE_SUFFIX);
var PREGEN_PROTO_CHANGE_DETECTOR_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/pregen_proto_change_detector" + util_1.MODULE_SUFFIX);
var ChangeDetectionCompiler = (function () {
    function ChangeDetectionCompiler(_genConfig) {
        this._genConfig = _genConfig;
    }
    ChangeDetectionCompiler.prototype.compileComponentRuntime = function (componentType, strategy, parsedTemplate) {
        var _this = this;
        var changeDetectorDefinitions = change_definition_factory_1.createChangeDetectorDefinitions(componentType, strategy, this._genConfig, parsedTemplate);
        return changeDetectorDefinitions.map(function (definition) {
            return _this._createChangeDetectorFactory(definition);
        });
    };
    ChangeDetectionCompiler.prototype._createChangeDetectorFactory = function (definition) {
        if (util_1.IS_DART || !this._genConfig.useJit) {
            var proto = new change_detection_1.DynamicProtoChangeDetector(definition);
            return function (dispatcher) { return proto.instantiate(dispatcher); };
        }
        else {
            return new change_detection_jit_generator_1.ChangeDetectorJITGenerator(definition, UTIL, ABSTRACT_CHANGE_DETECTOR).generate();
        }
    };
    ChangeDetectionCompiler.prototype.compileComponentCodeGen = function (componentType, strategy, parsedTemplate) {
        var changeDetectorDefinitions = change_definition_factory_1.createChangeDetectorDefinitions(componentType, strategy, this._genConfig, parsedTemplate);
        var factories = [];
        var index = 0;
        var sourceParts = changeDetectorDefinitions.map(function (definition) {
            var codegen;
            var sourcePart;
            // TODO(tbosch): move the 2 code generators to the same place, one with .dart and one with .ts
            // suffix
            // and have the same API for calling them!
            if (util_1.IS_DART) {
                codegen = new change_detector_codegen_1.Codegen(PREGEN_PROTO_CHANGE_DETECTOR_MODULE);
                var className = definition.id;
                var typeRef = (index === 0 && componentType.isHost) ?
                    'dynamic' :
                    "" + source_module_1.moduleRef(componentType.moduleUrl) + componentType.name;
                codegen.generate(typeRef, className, definition);
                factories.push("(dispatcher) => new " + className + "(dispatcher)");
                sourcePart = codegen.toString();
            }
            else {
                codegen = new change_detection_jit_generator_1.ChangeDetectorJITGenerator(definition, "" + UTIL_MODULE + UTIL, "" + ABSTRACT_CHANGE_DETECTOR_MODULE + ABSTRACT_CHANGE_DETECTOR);
                factories.push("function(dispatcher) { return new " + codegen.typeName + "(dispatcher); }");
                sourcePart = codegen.generateSource();
            }
            index++;
            return sourcePart;
        });
        return new source_module_1.SourceExpressions(sourceParts, factories);
    };
    ChangeDetectionCompiler = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [change_detection_1.ChangeDetectorGenConfig])
    ], ChangeDetectionCompiler);
    return ChangeDetectionCompiler;
})();
exports.ChangeDetectionCompiler = ChangeDetectionCompiler;

},{"./change_definition_factory":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/change_definition_factory.js","./source_module":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/source_module.js","./util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/util.js","angular2/src/core/change_detection/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection.js","angular2/src/core/change_detection/change_detection_jit_generator":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection_jit_generator.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/transform/template_compiler/change_detector_codegen":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/transform/template_compiler/change_detector_codegen.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/command_compiler.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var collection_1 = require('angular2/src/core/facade/collection');
var template_commands_1 = require('angular2/src/core/linker/template_commands');
var template_ast_1 = require('./template_ast');
var source_module_1 = require('./source_module');
var view_1 = require('angular2/src/core/metadata/view');
var style_compiler_1 = require('./style_compiler');
var util_1 = require('./util');
var di_1 = require('angular2/src/core/di');
exports.TEMPLATE_COMMANDS_MODULE_REF = source_module_1.moduleRef("package:angular2/src/core/linker/template_commands" + util_1.MODULE_SUFFIX);
var IMPLICIT_TEMPLATE_VAR = '\$implicit';
var CLASS_ATTR = 'class';
var STYLE_ATTR = 'style';
var CommandCompiler = (function () {
    function CommandCompiler() {
    }
    CommandCompiler.prototype.compileComponentRuntime = function (component, appId, templateId, template, changeDetectorFactories, componentTemplateFactory) {
        var visitor = new CommandBuilderVisitor(new RuntimeCommandFactory(component, appId, templateId, componentTemplateFactory, changeDetectorFactories), 0);
        template_ast_1.templateVisitAll(visitor, template);
        return visitor.result;
    };
    CommandCompiler.prototype.compileComponentCodeGen = function (component, appIdExpr, templateIdExpr, template, changeDetectorFactoryExpressions, componentTemplateFactory) {
        var visitor = new CommandBuilderVisitor(new CodegenCommandFactory(component, appIdExpr, templateIdExpr, componentTemplateFactory, changeDetectorFactoryExpressions), 0);
        template_ast_1.templateVisitAll(visitor, template);
        var source = "[" + visitor.result.join(',') + "]";
        return new source_module_1.SourceExpression([], source);
    };
    CommandCompiler = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], CommandCompiler);
    return CommandCompiler;
})();
exports.CommandCompiler = CommandCompiler;
var RuntimeCommandFactory = (function () {
    function RuntimeCommandFactory(component, appId, templateId, componentTemplateFactory, changeDetectorFactories) {
        this.component = component;
        this.appId = appId;
        this.templateId = templateId;
        this.componentTemplateFactory = componentTemplateFactory;
        this.changeDetectorFactories = changeDetectorFactories;
    }
    RuntimeCommandFactory.prototype._mapDirectives = function (directives) {
        return directives.map(function (directive) { return directive.type.runtime; });
    };
    RuntimeCommandFactory.prototype._addStyleShimAttributes = function (attrNameAndValues, localComponent, localTemplateId) {
        var additionalStyles = [];
        if (lang_1.isPresent(localComponent) &&
            localComponent.template.encapsulation === view_1.ViewEncapsulation.Emulated) {
            additionalStyles.push(style_compiler_1.shimHostAttribute(this.appId, localTemplateId));
            additionalStyles.push('');
        }
        if (this.component.template.encapsulation === view_1.ViewEncapsulation.Emulated) {
            additionalStyles.push(style_compiler_1.shimContentAttribute(this.appId, this.templateId));
            additionalStyles.push('');
        }
        return additionalStyles.concat(attrNameAndValues);
    };
    RuntimeCommandFactory.prototype.createText = function (value, isBound, ngContentIndex) {
        return template_commands_1.text(value, isBound, ngContentIndex);
    };
    RuntimeCommandFactory.prototype.createNgContent = function (index, ngContentIndex) {
        return template_commands_1.ngContent(index, ngContentIndex);
    };
    RuntimeCommandFactory.prototype.createBeginElement = function (name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, isBound, ngContentIndex) {
        return template_commands_1.beginElement(name, this._addStyleShimAttributes(attrNameAndValues, null, null), eventTargetAndNames, variableNameAndValues, this._mapDirectives(directives), isBound, ngContentIndex);
    };
    RuntimeCommandFactory.prototype.createEndElement = function () { return template_commands_1.endElement(); };
    RuntimeCommandFactory.prototype.createBeginComponent = function (name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, nativeShadow, ngContentIndex) {
        var nestedTemplate = this.componentTemplateFactory(directives[0]);
        return template_commands_1.beginComponent(name, this._addStyleShimAttributes(attrNameAndValues, directives[0], nestedTemplate.id), eventTargetAndNames, variableNameAndValues, this._mapDirectives(directives), nativeShadow, ngContentIndex, nestedTemplate);
    };
    RuntimeCommandFactory.prototype.createEndComponent = function () { return template_commands_1.endComponent(); };
    RuntimeCommandFactory.prototype.createEmbeddedTemplate = function (embeddedTemplateIndex, attrNameAndValues, variableNameAndValues, directives, isMerged, ngContentIndex, children) {
        return template_commands_1.embeddedTemplate(attrNameAndValues, variableNameAndValues, this._mapDirectives(directives), isMerged, ngContentIndex, this.changeDetectorFactories[embeddedTemplateIndex], children);
    };
    return RuntimeCommandFactory;
})();
var CodegenCommandFactory = (function () {
    function CodegenCommandFactory(component, appIdExpr, templateIdExpr, componentTemplateFactory, changeDetectorFactoryExpressions) {
        this.component = component;
        this.appIdExpr = appIdExpr;
        this.templateIdExpr = templateIdExpr;
        this.componentTemplateFactory = componentTemplateFactory;
        this.changeDetectorFactoryExpressions = changeDetectorFactoryExpressions;
    }
    CodegenCommandFactory.prototype._addStyleShimAttributes = function (attrNameAndValues, localComponent, localTemplateIdExpr) {
        var additionalStlyes = [];
        if (lang_1.isPresent(localComponent) &&
            localComponent.template.encapsulation === view_1.ViewEncapsulation.Emulated) {
            additionalStlyes.push(new Expression(style_compiler_1.shimHostAttributeExpr(this.appIdExpr, localTemplateIdExpr)));
            additionalStlyes.push('');
        }
        if (this.component.template.encapsulation === view_1.ViewEncapsulation.Emulated) {
            additionalStlyes.push(new Expression(style_compiler_1.shimContentAttributeExpr(this.appIdExpr, this.templateIdExpr)));
            additionalStlyes.push('');
        }
        return additionalStlyes.concat(attrNameAndValues);
    };
    CodegenCommandFactory.prototype.createText = function (value, isBound, ngContentIndex) {
        return exports.TEMPLATE_COMMANDS_MODULE_REF + "text(" + util_1.escapeSingleQuoteString(value) + ", " + isBound + ", " + ngContentIndex + ")";
    };
    CodegenCommandFactory.prototype.createNgContent = function (index, ngContentIndex) {
        return exports.TEMPLATE_COMMANDS_MODULE_REF + "ngContent(" + index + ", " + ngContentIndex + ")";
    };
    CodegenCommandFactory.prototype.createBeginElement = function (name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, isBound, ngContentIndex) {
        var attrsExpression = codeGenArray(this._addStyleShimAttributes(attrNameAndValues, null, null));
        return exports.TEMPLATE_COMMANDS_MODULE_REF + "beginElement(" + util_1.escapeSingleQuoteString(name) + ", " + attrsExpression + ", " + codeGenArray(eventTargetAndNames) + ", " + codeGenArray(variableNameAndValues) + ", " + codeGenDirectivesArray(directives) + ", " + isBound + ", " + ngContentIndex + ")";
    };
    CodegenCommandFactory.prototype.createEndElement = function () { return exports.TEMPLATE_COMMANDS_MODULE_REF + "endElement()"; };
    CodegenCommandFactory.prototype.createBeginComponent = function (name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, nativeShadow, ngContentIndex) {
        var nestedCompExpr = this.componentTemplateFactory(directives[0]);
        var attrsExpression = codeGenArray(this._addStyleShimAttributes(attrNameAndValues, directives[0], nestedCompExpr + ".id"));
        return exports.TEMPLATE_COMMANDS_MODULE_REF + "beginComponent(" + util_1.escapeSingleQuoteString(name) + ", " + attrsExpression + ", " + codeGenArray(eventTargetAndNames) + ", " + codeGenArray(variableNameAndValues) + ", " + codeGenDirectivesArray(directives) + ", " + nativeShadow + ", " + ngContentIndex + ", " + nestedCompExpr + ")";
    };
    CodegenCommandFactory.prototype.createEndComponent = function () { return exports.TEMPLATE_COMMANDS_MODULE_REF + "endComponent()"; };
    CodegenCommandFactory.prototype.createEmbeddedTemplate = function (embeddedTemplateIndex, attrNameAndValues, variableNameAndValues, directives, isMerged, ngContentIndex, children) {
        return (exports.TEMPLATE_COMMANDS_MODULE_REF + "embeddedTemplate(" + codeGenArray(attrNameAndValues) + ", " + codeGenArray(variableNameAndValues) + ", ") +
            (codeGenDirectivesArray(directives) + ", " + isMerged + ", " + ngContentIndex + ", " + this.changeDetectorFactoryExpressions[embeddedTemplateIndex] + ", [" + children.join(',') + "])");
    };
    return CodegenCommandFactory;
})();
function visitAndReturnContext(visitor, asts, context) {
    template_ast_1.templateVisitAll(visitor, asts, context);
    return context;
}
var CommandBuilderVisitor = (function () {
    function CommandBuilderVisitor(commandFactory, embeddedTemplateIndex) {
        this.commandFactory = commandFactory;
        this.embeddedTemplateIndex = embeddedTemplateIndex;
        this.result = [];
        this.transitiveNgContentCount = 0;
    }
    CommandBuilderVisitor.prototype._readAttrNameAndValues = function (directives, attrAsts) {
        var attrs = keyValueArrayToMap(visitAndReturnContext(this, attrAsts, []));
        directives.forEach(function (directiveMeta) {
            collection_1.StringMapWrapper.forEach(directiveMeta.hostAttributes, function (value, name) {
                var prevValue = attrs[name];
                attrs[name] = lang_1.isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
            });
        });
        return mapToKeyValueArray(attrs);
    };
    CommandBuilderVisitor.prototype.visitNgContent = function (ast, context) {
        this.transitiveNgContentCount++;
        this.result.push(this.commandFactory.createNgContent(ast.index, ast.ngContentIndex));
        return null;
    };
    CommandBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, context) {
        var _this = this;
        this.embeddedTemplateIndex++;
        var childVisitor = new CommandBuilderVisitor(this.commandFactory, this.embeddedTemplateIndex);
        template_ast_1.templateVisitAll(childVisitor, ast.children);
        var isMerged = childVisitor.transitiveNgContentCount > 0;
        var variableNameAndValues = [];
        ast.vars.forEach(function (varAst) {
            variableNameAndValues.push(varAst.name);
            variableNameAndValues.push(varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR);
        });
        var directives = [];
        collection_1.ListWrapper.forEachWithIndex(ast.directives, function (directiveAst, index) {
            directiveAst.visit(_this, new DirectiveContext(index, [], [], directives));
        });
        this.result.push(this.commandFactory.createEmbeddedTemplate(this.embeddedTemplateIndex, this._readAttrNameAndValues(directives, ast.attrs), variableNameAndValues, directives, isMerged, ast.ngContentIndex, childVisitor.result));
        this.transitiveNgContentCount += childVisitor.transitiveNgContentCount;
        this.embeddedTemplateIndex = childVisitor.embeddedTemplateIndex;
        return null;
    };
    CommandBuilderVisitor.prototype.visitElement = function (ast, context) {
        var _this = this;
        var component = ast.getComponent();
        var eventTargetAndNames = visitAndReturnContext(this, ast.outputs, []);
        var variableNameAndValues = [];
        if (lang_1.isBlank(component)) {
            ast.exportAsVars.forEach(function (varAst) {
                variableNameAndValues.push(varAst.name);
                variableNameAndValues.push(null);
            });
        }
        var directives = [];
        collection_1.ListWrapper.forEachWithIndex(ast.directives, function (directiveAst, index) {
            directiveAst.visit(_this, new DirectiveContext(index, eventTargetAndNames, variableNameAndValues, directives));
        });
        eventTargetAndNames = removeKeyValueArrayDuplicates(eventTargetAndNames);
        var attrNameAndValues = this._readAttrNameAndValues(directives, ast.attrs);
        if (lang_1.isPresent(component)) {
            this.result.push(this.commandFactory.createBeginComponent(ast.name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, component.template.encapsulation === view_1.ViewEncapsulation.Native, ast.ngContentIndex));
            template_ast_1.templateVisitAll(this, ast.children);
            this.result.push(this.commandFactory.createEndComponent());
        }
        else {
            this.result.push(this.commandFactory.createBeginElement(ast.name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, ast.isBound(), ast.ngContentIndex));
            template_ast_1.templateVisitAll(this, ast.children);
            this.result.push(this.commandFactory.createEndElement());
        }
        return null;
    };
    CommandBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
    CommandBuilderVisitor.prototype.visitAttr = function (ast, attrNameAndValues) {
        attrNameAndValues.push(ast.name);
        attrNameAndValues.push(ast.value);
        return null;
    };
    CommandBuilderVisitor.prototype.visitBoundText = function (ast, context) {
        this.result.push(this.commandFactory.createText(null, true, ast.ngContentIndex));
        return null;
    };
    CommandBuilderVisitor.prototype.visitText = function (ast, context) {
        this.result.push(this.commandFactory.createText(ast.value, false, ast.ngContentIndex));
        return null;
    };
    CommandBuilderVisitor.prototype.visitDirective = function (ast, ctx) {
        ctx.targetDirectives.push(ast.directive);
        template_ast_1.templateVisitAll(this, ast.hostEvents, ctx.eventTargetAndNames);
        ast.exportAsVars.forEach(function (varAst) {
            ctx.targetVariableNameAndValues.push(varAst.name);
            ctx.targetVariableNameAndValues.push(ctx.index);
        });
        return null;
    };
    CommandBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
        eventTargetAndNames.push(ast.target);
        eventTargetAndNames.push(ast.name);
        return null;
    };
    CommandBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
    CommandBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
    return CommandBuilderVisitor;
})();
function removeKeyValueArrayDuplicates(keyValueArray) {
    var knownPairs = new Set();
    var resultKeyValueArray = [];
    for (var i = 0; i < keyValueArray.length; i += 2) {
        var key = keyValueArray[i];
        var value = keyValueArray[i + 1];
        var pairId = key + ":" + value;
        if (!collection_1.SetWrapper.has(knownPairs, pairId)) {
            resultKeyValueArray.push(key);
            resultKeyValueArray.push(value);
            knownPairs.add(pairId);
        }
    }
    return resultKeyValueArray;
}
function keyValueArrayToMap(keyValueArr) {
    var data = {};
    for (var i = 0; i < keyValueArr.length; i += 2) {
        data[keyValueArr[i]] = keyValueArr[i + 1];
    }
    return data;
}
function mapToKeyValueArray(data) {
    var entryArray = [];
    collection_1.StringMapWrapper.forEach(data, function (value, name) { entryArray.push([name, value]); });
    // We need to sort to get a defined output order
    // for tests and for caching generated artifacts...
    collection_1.ListWrapper.sort(entryArray, function (entry1, entry2) { return lang_1.StringWrapper.compare(entry1[0], entry2[0]); });
    var keyValueArray = [];
    entryArray.forEach(function (entry) {
        keyValueArray.push(entry[0]);
        keyValueArray.push(entry[1]);
    });
    return keyValueArray;
}
function mergeAttributeValue(attrName, attrValue1, attrValue2) {
    if (attrName == CLASS_ATTR || attrName == STYLE_ATTR) {
        return attrValue1 + " " + attrValue2;
    }
    else {
        return attrValue2;
    }
}
var DirectiveContext = (function () {
    function DirectiveContext(index, eventTargetAndNames, targetVariableNameAndValues, targetDirectives) {
        this.index = index;
        this.eventTargetAndNames = eventTargetAndNames;
        this.targetVariableNameAndValues = targetVariableNameAndValues;
        this.targetDirectives = targetDirectives;
    }
    return DirectiveContext;
})();
var Expression = (function () {
    function Expression(value) {
        this.value = value;
    }
    return Expression;
})();
function escapeValue(value) {
    if (value instanceof Expression) {
        return value.value;
    }
    else if (lang_1.isString(value)) {
        return util_1.escapeSingleQuoteString(value);
    }
    else if (lang_1.isBlank(value)) {
        return 'null';
    }
    else {
        return "" + value;
    }
}
function codeGenArray(data) {
    return "[" + data.map(escapeValue).join(',') + "]";
}
function codeGenDirectivesArray(directives) {
    var expressions = directives.map(function (directiveType) { return ("" + source_module_1.moduleRef(directiveType.type.moduleUrl) + directiveType.type.name); });
    return "[" + expressions.join(',') + "]";
}

},{"./source_module":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/source_module.js","./style_compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/style_compiler.js","./template_ast":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_ast.js","./util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/util.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker/template_commands":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/template_commands.js","angular2/src/core/metadata/view":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/view.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/compiler.js":[function(require,module,exports){
'use strict';var runtime_compiler_1 = require("./runtime_compiler");
var template_compiler_1 = require('./template_compiler');
exports.TemplateCompiler = template_compiler_1.TemplateCompiler;
var directive_metadata_1 = require('./directive_metadata');
exports.CompileDirectiveMetadata = directive_metadata_1.CompileDirectiveMetadata;
exports.CompileTypeMetadata = directive_metadata_1.CompileTypeMetadata;
exports.CompileTemplateMetadata = directive_metadata_1.CompileTemplateMetadata;
var source_module_1 = require('./source_module');
exports.SourceModule = source_module_1.SourceModule;
exports.SourceWithImports = source_module_1.SourceWithImports;
var lang_1 = require('angular2/src/core/facade/lang');
var di_1 = require('angular2/src/core/di');
var template_parser_1 = require('angular2/src/core/compiler/template_parser');
var html_parser_1 = require('angular2/src/core/compiler/html_parser');
var template_normalizer_1 = require('angular2/src/core/compiler/template_normalizer');
var runtime_metadata_1 = require('angular2/src/core/compiler/runtime_metadata');
var change_detector_compiler_1 = require('angular2/src/core/compiler/change_detector_compiler');
var style_compiler_1 = require('angular2/src/core/compiler/style_compiler');
var command_compiler_1 = require('angular2/src/core/compiler/command_compiler');
var template_compiler_2 = require('angular2/src/core/compiler/template_compiler');
var change_detection_1 = require('angular2/src/core/change_detection/change_detection');
var compiler_1 = require('angular2/src/core/linker/compiler');
var runtime_compiler_2 = require('angular2/src/core/compiler/runtime_compiler');
var element_schema_registry_1 = require('angular2/src/core/compiler/schema/element_schema_registry');
var dom_element_schema_registry_1 = require('angular2/src/core/compiler/schema/dom_element_schema_registry');
var url_resolver_1 = require('angular2/src/core/compiler/url_resolver');
var app_root_url_1 = require('angular2/src/core/compiler/app_root_url');
var anchor_based_app_root_url_1 = require('angular2/src/core/compiler/anchor_based_app_root_url');
var change_detection_2 = require('angular2/src/core/change_detection/change_detection');
function compilerProviders() {
    return [
        change_detection_2.Lexer,
        change_detection_2.Parser,
        html_parser_1.HtmlParser,
        template_parser_1.TemplateParser,
        template_normalizer_1.TemplateNormalizer,
        runtime_metadata_1.RuntimeMetadataResolver,
        style_compiler_1.StyleCompiler,
        command_compiler_1.CommandCompiler,
        change_detector_compiler_1.ChangeDetectionCompiler,
        di_1.provide(change_detection_1.ChangeDetectorGenConfig, {
            useValue: new change_detection_1.ChangeDetectorGenConfig(lang_1.assertionsEnabled(), lang_1.assertionsEnabled(), false, true)
        }),
        template_compiler_2.TemplateCompiler,
        di_1.provide(runtime_compiler_2.RuntimeCompiler, { useClass: runtime_compiler_1.RuntimeCompiler_ }),
        di_1.provide(compiler_1.Compiler, { useExisting: runtime_compiler_2.RuntimeCompiler }),
        dom_element_schema_registry_1.DomElementSchemaRegistry,
        di_1.provide(element_schema_registry_1.ElementSchemaRegistry, { useExisting: dom_element_schema_registry_1.DomElementSchemaRegistry }),
        anchor_based_app_root_url_1.AnchorBasedAppRootUrl,
        di_1.provide(app_root_url_1.AppRootUrl, { useExisting: anchor_based_app_root_url_1.AnchorBasedAppRootUrl }),
        url_resolver_1.UrlResolver
    ];
}
exports.compilerProviders = compilerProviders;

},{"./directive_metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/directive_metadata.js","./runtime_compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/runtime_compiler.js","./source_module":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/source_module.js","./template_compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_compiler.js","angular2/src/core/change_detection/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection.js","angular2/src/core/compiler/anchor_based_app_root_url":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/anchor_based_app_root_url.js","angular2/src/core/compiler/app_root_url":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/app_root_url.js","angular2/src/core/compiler/change_detector_compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/change_detector_compiler.js","angular2/src/core/compiler/command_compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/command_compiler.js","angular2/src/core/compiler/html_parser":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/html_parser.js","angular2/src/core/compiler/runtime_compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/runtime_compiler.js","angular2/src/core/compiler/runtime_metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/runtime_metadata.js","angular2/src/core/compiler/schema/dom_element_schema_registry":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/schema/dom_element_schema_registry.js","angular2/src/core/compiler/schema/element_schema_registry":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/schema/element_schema_registry.js","angular2/src/core/compiler/style_compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/style_compiler.js","angular2/src/core/compiler/template_compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_compiler.js","angular2/src/core/compiler/template_normalizer":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_normalizer.js","angular2/src/core/compiler/template_parser":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_parser.js","angular2/src/core/compiler/url_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/url_resolver.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker/compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/compiler.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/directive_metadata.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var collection_1 = require('angular2/src/core/facade/collection');
var change_detection_1 = require('angular2/src/core/change_detection/change_detection');
var view_1 = require('angular2/src/core/metadata/view');
var selector_1 = require('angular2/src/core/compiler/selector');
var util_1 = require('./util');
var interfaces_1 = require('angular2/src/core/linker/interfaces');
// group 1: "property" from "[property]"
// group 2: "event" from "(event)"
var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))$/g;
var CompileTypeMetadata = (function () {
    function CompileTypeMetadata(_a) {
        var _b = _a === void 0 ? {} : _a, runtime = _b.runtime, name = _b.name, moduleUrl = _b.moduleUrl, isHost = _b.isHost;
        this.runtime = runtime;
        this.name = name;
        this.moduleUrl = moduleUrl;
        this.isHost = lang_1.normalizeBool(isHost);
    }
    CompileTypeMetadata.fromJson = function (data) {
        return new CompileTypeMetadata({ name: data['name'], moduleUrl: data['moduleUrl'], isHost: data['isHost'] });
    };
    CompileTypeMetadata.prototype.toJson = function () {
        return {
            // Note: Runtime type can't be serialized...
            'name': this.name,
            'moduleUrl': this.moduleUrl,
            'isHost': this.isHost
        };
    };
    return CompileTypeMetadata;
})();
exports.CompileTypeMetadata = CompileTypeMetadata;
var CompileTemplateMetadata = (function () {
    function CompileTemplateMetadata(_a) {
        var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, ngContentSelectors = _b.ngContentSelectors;
        this.encapsulation = lang_1.isPresent(encapsulation) ? encapsulation : view_1.ViewEncapsulation.Emulated;
        this.template = template;
        this.templateUrl = templateUrl;
        this.styles = lang_1.isPresent(styles) ? styles : [];
        this.styleUrls = lang_1.isPresent(styleUrls) ? styleUrls : [];
        this.ngContentSelectors = lang_1.isPresent(ngContentSelectors) ? ngContentSelectors : [];
    }
    CompileTemplateMetadata.fromJson = function (data) {
        return new CompileTemplateMetadata({
            encapsulation: lang_1.isPresent(data['encapsulation']) ?
                view_1.VIEW_ENCAPSULATION_VALUES[data['encapsulation']] :
                data['encapsulation'],
            template: data['template'],
            templateUrl: data['templateUrl'],
            styles: data['styles'],
            styleUrls: data['styleUrls'],
            ngContentSelectors: data['ngContentSelectors']
        });
    };
    CompileTemplateMetadata.prototype.toJson = function () {
        return {
            'encapsulation': lang_1.isPresent(this.encapsulation) ? lang_1.serializeEnum(this.encapsulation) : this.encapsulation,
            'template': this.template,
            'templateUrl': this.templateUrl,
            'styles': this.styles,
            'styleUrls': this.styleUrls,
            'ngContentSelectors': this.ngContentSelectors
        };
    };
    return CompileTemplateMetadata;
})();
exports.CompileTemplateMetadata = CompileTemplateMetadata;
var CompileDirectiveMetadata = (function () {
    function CompileDirectiveMetadata(_a) {
        var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, dynamicLoadable = _b.dynamicLoadable, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, lifecycleHooks = _b.lifecycleHooks, template = _b.template;
        this.type = type;
        this.isComponent = isComponent;
        this.dynamicLoadable = dynamicLoadable;
        this.selector = selector;
        this.exportAs = exportAs;
        this.changeDetection = changeDetection;
        this.inputs = inputs;
        this.outputs = outputs;
        this.hostListeners = hostListeners;
        this.hostProperties = hostProperties;
        this.hostAttributes = hostAttributes;
        this.lifecycleHooks = lifecycleHooks;
        this.template = template;
    }
    CompileDirectiveMetadata.create = function (_a) {
        var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, dynamicLoadable = _b.dynamicLoadable, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, lifecycleHooks = _b.lifecycleHooks, template = _b.template;
        var hostListeners = {};
        var hostProperties = {};
        var hostAttributes = {};
        if (lang_1.isPresent(host)) {
            collection_1.StringMapWrapper.forEach(host, function (value, key) {
                var matches = lang_1.RegExpWrapper.firstMatch(HOST_REG_EXP, key);
                if (lang_1.isBlank(matches)) {
                    hostAttributes[key] = value;
                }
                else if (lang_1.isPresent(matches[1])) {
                    hostProperties[matches[1]] = value;
                }
                else if (lang_1.isPresent(matches[2])) {
                    hostListeners[matches[2]] = value;
                }
            });
        }
        var inputsMap = {};
        if (lang_1.isPresent(inputs)) {
            inputs.forEach(function (bindConfig) {
                // canonical syntax: `dirProp: elProp`
                // if there is no `:`, use dirProp = elProp
                var parts = util_1.splitAtColon(bindConfig, [bindConfig, bindConfig]);
                inputsMap[parts[0]] = parts[1];
            });
        }
        var outputsMap = {};
        if (lang_1.isPresent(outputs)) {
            outputs.forEach(function (bindConfig) {
                // canonical syntax: `dirProp: elProp`
                // if there is no `:`, use dirProp = elProp
                var parts = util_1.splitAtColon(bindConfig, [bindConfig, bindConfig]);
                outputsMap[parts[0]] = parts[1];
            });
        }
        return new CompileDirectiveMetadata({
            type: type,
            isComponent: lang_1.normalizeBool(isComponent),
            dynamicLoadable: lang_1.normalizeBool(dynamicLoadable),
            selector: selector,
            exportAs: exportAs,
            changeDetection: changeDetection,
            inputs: inputsMap,
            outputs: outputsMap,
            hostListeners: hostListeners,
            hostProperties: hostProperties,
            hostAttributes: hostAttributes,
            lifecycleHooks: lang_1.isPresent(lifecycleHooks) ? lifecycleHooks : [], template: template
        });
    };
    CompileDirectiveMetadata.fromJson = function (data) {
        return new CompileDirectiveMetadata({
            isComponent: data['isComponent'],
            dynamicLoadable: data['dynamicLoadable'],
            selector: data['selector'],
            exportAs: data['exportAs'],
            type: lang_1.isPresent(data['type']) ? CompileTypeMetadata.fromJson(data['type']) : data['type'],
            changeDetection: lang_1.isPresent(data['changeDetection']) ?
                change_detection_1.CHANGE_DECTION_STRATEGY_VALUES[data['changeDetection']] :
                data['changeDetection'],
            inputs: data['inputs'],
            outputs: data['outputs'],
            hostListeners: data['hostListeners'],
            hostProperties: data['hostProperties'],
            hostAttributes: data['hostAttributes'],
            lifecycleHooks: data['lifecycleHooks'].map(function (hookValue) { return interfaces_1.LIFECYCLE_HOOKS_VALUES[hookValue]; }),
            template: lang_1.isPresent(data['template']) ? CompileTemplateMetadata.fromJson(data['template']) :
                data['template']
        });
    };
    CompileDirectiveMetadata.prototype.toJson = function () {
        return {
            'isComponent': this.isComponent,
            'dynamicLoadable': this.dynamicLoadable,
            'selector': this.selector,
            'exportAs': this.exportAs,
            'type': lang_1.isPresent(this.type) ? this.type.toJson() : this.type,
            'changeDetection': lang_1.isPresent(this.changeDetection) ? lang_1.serializeEnum(this.changeDetection) :
                this.changeDetection,
            'inputs': this.inputs,
            'outputs': this.outputs,
            'hostListeners': this.hostListeners,
            'hostProperties': this.hostProperties,
            'hostAttributes': this.hostAttributes,
            'lifecycleHooks': this.lifecycleHooks.map(function (hook) { return lang_1.serializeEnum(hook); }),
            'template': lang_1.isPresent(this.template) ? this.template.toJson() : this.template
        };
    };
    return CompileDirectiveMetadata;
})();
exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
function createHostComponentMeta(componentType, componentSelector) {
    var template = selector_1.CssSelector.parse(componentSelector)[0].getMatchingElementTemplate();
    return CompileDirectiveMetadata.create({
        type: new CompileTypeMetadata({
            runtime: Object,
            name: "Host" + componentType.name,
            moduleUrl: componentType.moduleUrl,
            isHost: true
        }),
        template: new CompileTemplateMetadata({ template: template, templateUrl: '', styles: [], styleUrls: [], ngContentSelectors: [] }),
        changeDetection: change_detection_1.ChangeDetectionStrategy.Default,
        inputs: [],
        outputs: [],
        host: {},
        lifecycleHooks: [],
        isComponent: true,
        dynamicLoadable: false,
        selector: '*'
    });
}
exports.createHostComponentMeta = createHostComponentMeta;

},{"./util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/util.js","angular2/src/core/change_detection/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection.js","angular2/src/core/compiler/selector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/selector.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker/interfaces":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/interfaces.js","angular2/src/core/metadata/view":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/view.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/html_ast.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var HtmlTextAst = (function () {
    function HtmlTextAst(value, sourceInfo) {
        this.value = value;
        this.sourceInfo = sourceInfo;
    }
    HtmlTextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
    return HtmlTextAst;
})();
exports.HtmlTextAst = HtmlTextAst;
var HtmlAttrAst = (function () {
    function HtmlAttrAst(name, value, sourceInfo) {
        this.name = name;
        this.value = value;
        this.sourceInfo = sourceInfo;
    }
    HtmlAttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
    return HtmlAttrAst;
})();
exports.HtmlAttrAst = HtmlAttrAst;
var HtmlElementAst = (function () {
    function HtmlElementAst(name, attrs, children, sourceInfo) {
        this.name = name;
        this.attrs = attrs;
        this.children = children;
        this.sourceInfo = sourceInfo;
    }
    HtmlElementAst.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context); };
    return HtmlElementAst;
})();
exports.HtmlElementAst = HtmlElementAst;
function htmlVisitAll(visitor, asts, context) {
    if (context === void 0) { context = null; }
    var result = [];
    asts.forEach(function (ast) {
        var astResult = ast.visit(visitor, context);
        if (lang_1.isPresent(astResult)) {
            result.push(astResult);
        }
    });
    return result;
}
exports.htmlVisitAll = htmlVisitAll;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/html_parser.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var html_ast_1 = require('./html_ast');
var util_1 = require('./util');
var di_1 = require('angular2/src/core/di');
var NG_NON_BINDABLE = 'ng-non-bindable';
var HtmlParser = (function () {
    function HtmlParser() {
    }
    HtmlParser.prototype.parse = function (template, sourceInfo) {
        var root = dom_adapter_1.DOM.createTemplate(template);
        return parseChildNodes(root, sourceInfo);
    };
    HtmlParser.prototype.unparse = function (nodes) {
        var visitor = new UnparseVisitor();
        var parts = [];
        html_ast_1.htmlVisitAll(visitor, nodes, parts);
        return parts.join('');
    };
    HtmlParser = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], HtmlParser);
    return HtmlParser;
})();
exports.HtmlParser = HtmlParser;
function parseText(text, indexInParent, parentSourceInfo) {
    // TODO(tbosch): add source row/column source info from parse5 / package:html
    var value = dom_adapter_1.DOM.getText(text);
    return new html_ast_1.HtmlTextAst(value, parentSourceInfo + " > #text(" + value + "):nth-child(" + indexInParent + ")");
}
function parseAttr(element, parentSourceInfo, attrName, attrValue) {
    // TODO(tbosch): add source row/column source info from parse5 / package:html
    var lowerCaseAttrName = attrName.toLowerCase();
    return new html_ast_1.HtmlAttrAst(lowerCaseAttrName, attrValue, parentSourceInfo + "[" + lowerCaseAttrName + "=" + attrValue + "]");
}
function parseElement(element, indexInParent, parentSourceInfo) {
    // normalize nodename always as lower case so that following build steps
    // can rely on this
    var nodeName = dom_adapter_1.DOM.nodeName(element).toLowerCase();
    // TODO(tbosch): add source row/column source info from parse5 / package:html
    var sourceInfo = parentSourceInfo + " > " + nodeName + ":nth-child(" + indexInParent + ")";
    var attrs = parseAttrs(element, sourceInfo);
    var childNodes = parseChildNodes(element, sourceInfo);
    return new html_ast_1.HtmlElementAst(nodeName, attrs, childNodes, sourceInfo);
}
function parseAttrs(element, elementSourceInfo) {
    // Note: sort the attributes early in the pipeline to get
    // consistent results throughout the pipeline, as attribute order is not defined
    // in DOM parsers!
    var attrMap = dom_adapter_1.DOM.attributeMap(element);
    var attrList = [];
    attrMap.forEach(function (value, name) { return attrList.push([name, value]); });
    attrList.sort(function (entry1, entry2) { return lang_1.StringWrapper.compare(entry1[0], entry2[0]); });
    return attrList.map(function (entry) { return parseAttr(element, elementSourceInfo, entry[0], entry[1]); });
}
function parseChildNodes(element, parentSourceInfo) {
    var root = dom_adapter_1.DOM.templateAwareRoot(element);
    var childNodes = dom_adapter_1.DOM.childNodesAsList(root);
    var result = [];
    var index = 0;
    childNodes.forEach(function (childNode) {
        var childResult = null;
        if (dom_adapter_1.DOM.isTextNode(childNode)) {
            var text = childNode;
            childResult = parseText(text, index, parentSourceInfo);
        }
        else if (dom_adapter_1.DOM.isElementNode(childNode)) {
            var el = childNode;
            childResult = parseElement(el, index, parentSourceInfo);
        }
        if (lang_1.isPresent(childResult)) {
            // Won't have a childResult for e.g. comment nodes
            result.push(childResult);
        }
        index++;
    });
    return result;
}
var UnparseVisitor = (function () {
    function UnparseVisitor() {
    }
    UnparseVisitor.prototype.visitElement = function (ast, parts) {
        parts.push("<" + ast.name);
        var attrs = [];
        html_ast_1.htmlVisitAll(this, ast.attrs, attrs);
        if (ast.attrs.length > 0) {
            parts.push(' ');
            parts.push(attrs.join(' '));
        }
        parts.push(">");
        html_ast_1.htmlVisitAll(this, ast.children, parts);
        parts.push("</" + ast.name + ">");
        return null;
    };
    UnparseVisitor.prototype.visitAttr = function (ast, parts) {
        parts.push(ast.name + "=" + util_1.escapeDoubleQuoteString(ast.value));
        return null;
    };
    UnparseVisitor.prototype.visitText = function (ast, parts) {
        parts.push(ast.value);
        return null;
    };
    return UnparseVisitor;
})();

},{"./html_ast":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/html_ast.js","./util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/util.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/runtime_compiler.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var compiler_1 = require('angular2/src/core/linker/compiler');
var proto_view_factory_1 = require('angular2/src/core/linker/proto_view_factory');
var template_compiler_1 = require('./template_compiler');
var di_1 = require('angular2/src/core/di');
var RuntimeCompiler = (function (_super) {
    __extends(RuntimeCompiler, _super);
    function RuntimeCompiler() {
        _super.apply(this, arguments);
    }
    return RuntimeCompiler;
})(compiler_1.Compiler);
exports.RuntimeCompiler = RuntimeCompiler;
var RuntimeCompiler_ = (function (_super) {
    __extends(RuntimeCompiler_, _super);
    function RuntimeCompiler_(_protoViewFactory, _templateCompiler) {
        _super.call(this, _protoViewFactory);
        this._templateCompiler = _templateCompiler;
    }
    RuntimeCompiler_.prototype.compileInHost = function (componentType) {
        var _this = this;
        return this._templateCompiler.compileHostComponentRuntime(componentType)
            .then(function (compiledHostTemplate) { return compiler_1.internalCreateProtoView(_this, compiledHostTemplate); });
    };
    RuntimeCompiler_.prototype.clearCache = function () {
        _super.prototype.clearCache.call(this);
        this._templateCompiler.clearCache();
    };
    RuntimeCompiler_ = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [proto_view_factory_1.ProtoViewFactory, template_compiler_1.TemplateCompiler])
    ], RuntimeCompiler_);
    return RuntimeCompiler_;
})(compiler_1.Compiler_);
exports.RuntimeCompiler_ = RuntimeCompiler_;

},{"./template_compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_compiler.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/linker/compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/compiler.js","angular2/src/core/linker/proto_view_factory":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/proto_view_factory.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/runtime_metadata.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var cpl = require('./directive_metadata');
var dirAnn = require('angular2/src/core/metadata/directives');
var directive_resolver_1 = require('angular2/src/core/linker/directive_resolver');
var view_resolver_1 = require('angular2/src/core/linker/view_resolver');
var directive_lifecycle_reflector_1 = require('angular2/src/core/linker/directive_lifecycle_reflector');
var interfaces_1 = require('angular2/src/core/linker/interfaces');
var reflection_1 = require('angular2/src/core/reflection/reflection');
var di_2 = require('angular2/src/core/di');
var util_1 = require('./util');
// group 1: "property" from "[property]"
// group 2: "event" from "(event)"
var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))$/g;
var RuntimeMetadataResolver = (function () {
    function RuntimeMetadataResolver(_directiveResolver, _viewResolver) {
        this._directiveResolver = _directiveResolver;
        this._viewResolver = _viewResolver;
        this._cache = new Map();
    }
    RuntimeMetadataResolver.prototype.getMetadata = function (directiveType) {
        var meta = this._cache.get(directiveType);
        if (lang_1.isBlank(meta)) {
            var directiveAnnotation = this._directiveResolver.resolve(directiveType);
            var moduleUrl = calcModuleUrl(directiveType, directiveAnnotation);
            var templateMeta = null;
            var changeDetectionStrategy = null;
            if (directiveAnnotation instanceof dirAnn.ComponentMetadata) {
                var compAnnotation = directiveAnnotation;
                var viewAnnotation = this._viewResolver.resolve(directiveType);
                templateMeta = new cpl.CompileTemplateMetadata({
                    encapsulation: viewAnnotation.encapsulation,
                    template: viewAnnotation.template,
                    templateUrl: viewAnnotation.templateUrl,
                    styles: viewAnnotation.styles,
                    styleUrls: viewAnnotation.styleUrls
                });
                changeDetectionStrategy = compAnnotation.changeDetection;
            }
            meta = cpl.CompileDirectiveMetadata.create({
                selector: directiveAnnotation.selector,
                exportAs: directiveAnnotation.exportAs,
                isComponent: lang_1.isPresent(templateMeta),
                dynamicLoadable: true,
                type: new cpl.CompileTypeMetadata({ name: lang_1.stringify(directiveType), moduleUrl: moduleUrl, runtime: directiveType }),
                template: templateMeta,
                changeDetection: changeDetectionStrategy,
                inputs: directiveAnnotation.inputs,
                outputs: directiveAnnotation.outputs,
                host: directiveAnnotation.host,
                lifecycleHooks: collection_1.ListWrapper.filter(interfaces_1.LIFECYCLE_HOOKS_VALUES, function (hook) { return directive_lifecycle_reflector_1.hasLifecycleHook(hook, directiveType); })
            });
            this._cache.set(directiveType, meta);
        }
        return meta;
    };
    RuntimeMetadataResolver.prototype.getViewDirectivesMetadata = function (component) {
        var _this = this;
        var view = this._viewResolver.resolve(component);
        var directives = flattenDirectives(view);
        for (var i = 0; i < directives.length; i++) {
            if (!isValidDirective(directives[i])) {
                throw new exceptions_1.BaseException("Unexpected directive value '" + lang_1.stringify(directives[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
            }
        }
        return removeDuplicatedDirectives(directives.map(function (type) { return _this.getMetadata(type); }));
    };
    RuntimeMetadataResolver = __decorate([
        di_2.Injectable(), 
        __metadata('design:paramtypes', [directive_resolver_1.DirectiveResolver, view_resolver_1.ViewResolver])
    ], RuntimeMetadataResolver);
    return RuntimeMetadataResolver;
})();
exports.RuntimeMetadataResolver = RuntimeMetadataResolver;
function removeDuplicatedDirectives(directives) {
    var directivesMap = new Map();
    directives.forEach(function (dirMeta) { directivesMap.set(dirMeta.type.runtime, dirMeta); });
    return collection_1.MapWrapper.values(directivesMap);
}
function flattenDirectives(view) {
    if (lang_1.isBlank(view.directives))
        return [];
    var directives = [];
    flattenList(view.directives, directives);
    return directives;
}
function flattenList(tree, out) {
    for (var i = 0; i < tree.length; i++) {
        var item = di_1.resolveForwardRef(tree[i]);
        if (lang_1.isArray(item)) {
            flattenList(item, out);
        }
        else {
            out.push(item);
        }
    }
}
function isValidDirective(value) {
    return lang_1.isPresent(value) && (value instanceof lang_1.Type);
}
function calcModuleUrl(type, directiveAnnotation) {
    if (lang_1.isPresent(directiveAnnotation.moduleId)) {
        return "package:" + directiveAnnotation.moduleId + util_1.MODULE_SUFFIX;
    }
    else {
        return reflection_1.reflector.importUri(type);
    }
}

},{"./directive_metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/directive_metadata.js","./util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/util.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker/directive_lifecycle_reflector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/directive_lifecycle_reflector.js","angular2/src/core/linker/directive_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/directive_resolver.js","angular2/src/core/linker/interfaces":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/interfaces.js","angular2/src/core/linker/view_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_resolver.js","angular2/src/core/metadata/directives":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/directives.js","angular2/src/core/reflection/reflection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflection.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/schema/dom_element_schema_registry.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
var lang_1 = require('angular2/src/core/facade/lang');
var collection_1 = require('angular2/src/core/facade/collection');
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var element_schema_registry_1 = require('./element_schema_registry');
var DomElementSchemaRegistry = (function (_super) {
    __extends(DomElementSchemaRegistry, _super);
    function DomElementSchemaRegistry() {
        _super.apply(this, arguments);
        this._protoElements = new Map();
    }
    DomElementSchemaRegistry.prototype._getProtoElement = function (tagName) {
        var element = this._protoElements.get(tagName);
        if (lang_1.isBlank(element)) {
            element = dom_adapter_1.DOM.createElement(tagName);
            this._protoElements.set(tagName, element);
        }
        return element;
    };
    DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName) {
        if (tagName.indexOf('-') !== -1) {
            // can't tell now as we don't know which properties a custom element will get
            // once it is instantiated
            return true;
        }
        else {
            var elm = this._getProtoElement(tagName);
            return dom_adapter_1.DOM.hasProperty(elm, propName);
        }
    };
    DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) {
        var mappedPropName = collection_1.StringMapWrapper.get(dom_adapter_1.DOM.attrToPropMap, propName);
        return lang_1.isPresent(mappedPropName) ? mappedPropName : propName;
    };
    DomElementSchemaRegistry = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], DomElementSchemaRegistry);
    return DomElementSchemaRegistry;
})(element_schema_registry_1.ElementSchemaRegistry);
exports.DomElementSchemaRegistry = DomElementSchemaRegistry;

},{"./element_schema_registry":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/schema/element_schema_registry.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/schema/element_schema_registry.js":[function(require,module,exports){
'use strict';var ElementSchemaRegistry = (function () {
    function ElementSchemaRegistry() {
    }
    ElementSchemaRegistry.prototype.hasProperty = function (tagName, propName) { return true; };
    ElementSchemaRegistry.prototype.getMappedPropName = function (propName) { return propName; };
    return ElementSchemaRegistry;
})();
exports.ElementSchemaRegistry = ElementSchemaRegistry;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/selector.js":[function(require,module,exports){
'use strict';var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var _EMPTY_ATTR_VALUE = '';
// TODO: Can't use `const` here as
// in Dart this is not transpiled into `final` yet...
var _SELECTOR_REGEXP = lang_1.RegExpWrapper.create('(\\:not\\()|' +
    '([-\\w]+)|' +
    '(?:\\.([-\\w]+))|' +
    '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' +
    '(\\))|' +
    '(\\s*,\\s*)'); // ","
/**
 * A css selector contains an element name,
 * css classes and attribute/value pairs with the purpose
 * of selecting subsets out of them.
 */
var CssSelector = (function () {
    function CssSelector() {
        this.element = null;
        this.classNames = [];
        this.attrs = [];
        this.notSelectors = [];
    }
    CssSelector.parse = function (selector) {
        var results = [];
        var _addResult = function (res, cssSel) {
            if (cssSel.notSelectors.length > 0 && lang_1.isBlank(cssSel.element) &&
                collection_1.ListWrapper.isEmpty(cssSel.classNames) && collection_1.ListWrapper.isEmpty(cssSel.attrs)) {
                cssSel.element = "*";
            }
            res.push(cssSel);
        };
        var cssSelector = new CssSelector();
        var matcher = lang_1.RegExpWrapper.matcher(_SELECTOR_REGEXP, selector);
        var match;
        var current = cssSelector;
        var inNot = false;
        while (lang_1.isPresent(match = lang_1.RegExpMatcherWrapper.next(matcher))) {
            if (lang_1.isPresent(match[1])) {
                if (inNot) {
                    throw new exceptions_1.BaseException('Nesting :not is not allowed in a selector');
                }
                inNot = true;
                current = new CssSelector();
                cssSelector.notSelectors.push(current);
            }
            if (lang_1.isPresent(match[2])) {
                current.setElement(match[2]);
            }
            if (lang_1.isPresent(match[3])) {
                current.addClassName(match[3]);
            }
            if (lang_1.isPresent(match[4])) {
                current.addAttribute(match[4], match[5]);
            }
            if (lang_1.isPresent(match[6])) {
                inNot = false;
                current = cssSelector;
            }
            if (lang_1.isPresent(match[7])) {
                if (inNot) {
                    throw new exceptions_1.BaseException('Multiple selectors in :not are not supported');
                }
                _addResult(results, cssSelector);
                cssSelector = current = new CssSelector();
            }
        }
        _addResult(results, cssSelector);
        return results;
    };
    CssSelector.prototype.isElementSelector = function () {
        return lang_1.isPresent(this.element) && collection_1.ListWrapper.isEmpty(this.classNames) &&
            collection_1.ListWrapper.isEmpty(this.attrs) && this.notSelectors.length === 0;
    };
    CssSelector.prototype.setElement = function (element) {
        if (element === void 0) { element = null; }
        if (lang_1.isPresent(element)) {
            element = element.toLowerCase();
        }
        this.element = element;
    };
    /** Gets a template string for an element that matches the selector. */
    CssSelector.prototype.getMatchingElementTemplate = function () {
        var tagName = lang_1.isPresent(this.element) ? this.element : 'div';
        var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
        var attrs = '';
        for (var i = 0; i < this.attrs.length; i += 2) {
            var attrName = this.attrs[i];
            var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
            attrs += " " + attrName + attrValue;
        }
        return "<" + tagName + classAttr + attrs + "></" + tagName + ">";
    };
    CssSelector.prototype.addAttribute = function (name, value) {
        if (value === void 0) { value = _EMPTY_ATTR_VALUE; }
        this.attrs.push(name.toLowerCase());
        if (lang_1.isPresent(value)) {
            value = value.toLowerCase();
        }
        else {
            value = _EMPTY_ATTR_VALUE;
        }
        this.attrs.push(value);
    };
    CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };
    CssSelector.prototype.toString = function () {
        var res = '';
        if (lang_1.isPresent(this.element)) {
            res += this.element;
        }
        if (lang_1.isPresent(this.classNames)) {
            for (var i = 0; i < this.classNames.length; i++) {
                res += '.' + this.classNames[i];
            }
        }
        if (lang_1.isPresent(this.attrs)) {
            for (var i = 0; i < this.attrs.length;) {
                var attrName = this.attrs[i++];
                var attrValue = this.attrs[i++];
                res += '[' + attrName;
                if (attrValue.length > 0) {
                    res += '=' + attrValue;
                }
                res += ']';
            }
        }
        this.notSelectors.forEach(function (notSelector) { return res += ":not(" + notSelector + ")"; });
        return res;
    };
    return CssSelector;
})();
exports.CssSelector = CssSelector;
/**
 * Reads a list of CssSelectors and allows to calculate which ones
 * are contained in a given CssSelector.
 */
var SelectorMatcher = (function () {
    function SelectorMatcher() {
        this._elementMap = new collection_1.Map();
        this._elementPartialMap = new collection_1.Map();
        this._classMap = new collection_1.Map();
        this._classPartialMap = new collection_1.Map();
        this._attrValueMap = new collection_1.Map();
        this._attrValuePartialMap = new collection_1.Map();
        this._listContexts = [];
    }
    SelectorMatcher.createNotMatcher = function (notSelectors) {
        var notMatcher = new SelectorMatcher();
        notMatcher.addSelectables(notSelectors, null);
        return notMatcher;
    };
    SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
        var listContext = null;
        if (cssSelectors.length > 1) {
            listContext = new SelectorListContext(cssSelectors);
            this._listContexts.push(listContext);
        }
        for (var i = 0; i < cssSelectors.length; i++) {
            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
        }
    };
    /**
     * Add an object that can be found later on by calling `match`.
     * @param cssSelector A css selector
     * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
     */
    SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
        var matcher = this;
        var element = cssSelector.element;
        var classNames = cssSelector.classNames;
        var attrs = cssSelector.attrs;
        var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
        if (lang_1.isPresent(element)) {
            var isTerminal = attrs.length === 0 && classNames.length === 0;
            if (isTerminal) {
                this._addTerminal(matcher._elementMap, element, selectable);
            }
            else {
                matcher = this._addPartial(matcher._elementPartialMap, element);
            }
        }
        if (lang_1.isPresent(classNames)) {
            for (var index = 0; index < classNames.length; index++) {
                var isTerminal = attrs.length === 0 && index === classNames.length - 1;
                var className = classNames[index];
                if (isTerminal) {
                    this._addTerminal(matcher._classMap, className, selectable);
                }
                else {
                    matcher = this._addPartial(matcher._classPartialMap, className);
                }
            }
        }
        if (lang_1.isPresent(attrs)) {
            for (var index = 0; index < attrs.length;) {
                var isTerminal = index === attrs.length - 2;
                var attrName = attrs[index++];
                var attrValue = attrs[index++];
                if (isTerminal) {
                    var terminalMap = matcher._attrValueMap;
                    var terminalValuesMap = terminalMap.get(attrName);
                    if (lang_1.isBlank(terminalValuesMap)) {
                        terminalValuesMap = new collection_1.Map();
                        terminalMap.set(attrName, terminalValuesMap);
                    }
                    this._addTerminal(terminalValuesMap, attrValue, selectable);
                }
                else {
                    var parttialMap = matcher._attrValuePartialMap;
                    var partialValuesMap = parttialMap.get(attrName);
                    if (lang_1.isBlank(partialValuesMap)) {
                        partialValuesMap = new collection_1.Map();
                        parttialMap.set(attrName, partialValuesMap);
                    }
                    matcher = this._addPartial(partialValuesMap, attrValue);
                }
            }
        }
    };
    SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
        var terminalList = map.get(name);
        if (lang_1.isBlank(terminalList)) {
            terminalList = [];
            map.set(name, terminalList);
        }
        terminalList.push(selectable);
    };
    SelectorMatcher.prototype._addPartial = function (map, name) {
        var matcher = map.get(name);
        if (lang_1.isBlank(matcher)) {
            matcher = new SelectorMatcher();
            map.set(name, matcher);
        }
        return matcher;
    };
    /**
     * Find the objects that have been added via `addSelectable`
     * whose css selector is contained in the given css selector.
     * @param cssSelector A css selector
     * @param matchedCallback This callback will be called with the object handed into `addSelectable`
     * @return boolean true if a match was found
    */
    SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
        var result = false;
        var element = cssSelector.element;
        var classNames = cssSelector.classNames;
        var attrs = cssSelector.attrs;
        for (var i = 0; i < this._listContexts.length; i++) {
            this._listContexts[i].alreadyMatched = false;
        }
        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
            result;
        if (lang_1.isPresent(classNames)) {
            for (var index = 0; index < classNames.length; index++) {
                var className = classNames[index];
                result =
                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
                result =
                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
                        result;
            }
        }
        if (lang_1.isPresent(attrs)) {
            for (var index = 0; index < attrs.length;) {
                var attrName = attrs[index++];
                var attrValue = attrs[index++];
                var terminalValuesMap = this._attrValueMap.get(attrName);
                if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
                    result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
                        result;
                }
                result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) ||
                    result;
                var partialValuesMap = this._attrValuePartialMap.get(attrName);
                if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
                    result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
                        result;
                }
                result =
                    this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
            }
        }
        return result;
    };
    /** @internal */
    SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
            return false;
        }
        var selectables = map.get(name);
        var starSelectables = map.get("*");
        if (lang_1.isPresent(starSelectables)) {
            selectables = selectables.concat(starSelectables);
        }
        if (lang_1.isBlank(selectables)) {
            return false;
        }
        var selectable;
        var result = false;
        for (var index = 0; index < selectables.length; index++) {
            selectable = selectables[index];
            result = selectable.finalize(cssSelector, matchedCallback) || result;
        }
        return result;
    };
    /** @internal */
    SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback /*: (c: CssSelector, a: any) => void*/) {
        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
            return false;
        }
        var nestedSelector = map.get(name);
        if (lang_1.isBlank(nestedSelector)) {
            return false;
        }
        // TODO(perf): get rid of recursion and measure again
        // TODO(perf): don't pass the whole selector into the recursion,
        // but only the not processed parts
        return nestedSelector.match(cssSelector, matchedCallback);
    };
    return SelectorMatcher;
})();
exports.SelectorMatcher = SelectorMatcher;
var SelectorListContext = (function () {
    function SelectorListContext(selectors) {
        this.selectors = selectors;
        this.alreadyMatched = false;
    }
    return SelectorListContext;
})();
exports.SelectorListContext = SelectorListContext;
// Store context to pass back selector and context when a selector is matched
var SelectorContext = (function () {
    function SelectorContext(selector, cbContext, listContext) {
        this.selector = selector;
        this.cbContext = cbContext;
        this.listContext = listContext;
        this.notSelectors = selector.notSelectors;
    }
    SelectorContext.prototype.finalize = function (cssSelector, callback) {
        var result = true;
        if (this.notSelectors.length > 0 &&
            (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
            var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
            result = !notMatcher.match(cssSelector, null);
        }
        if (result && lang_1.isPresent(callback) &&
            (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
            if (lang_1.isPresent(this.listContext)) {
                this.listContext.alreadyMatched = true;
            }
            callback(this.selector, this.cbContext);
        }
        return result;
    };
    return SelectorContext;
})();
exports.SelectorContext = SelectorContext;

},{"angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/shadow_css.js":[function(require,module,exports){
'use strict';var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
/**
 * This file is a port of shadowCSS from webcomponents.js to TypeScript.
 *
 * Please make sure to keep to edits in sync with the source file.
 *
 * Source:
 * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
 *
 * The original file level comment is reproduced below
 */
/*
  This is a limited shim for ShadowDOM css styling.
  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

  The intention here is to support only the styling features which can be
  relatively simply implemented. The goal is to allow users to avoid the
  most obvious pitfalls and do so without compromising performance significantly.
  For ShadowDOM styling that's not covered here, a set of best practices
  can be provided that should allow users to accomplish more complex styling.

  The following is a list of specific ShadowDOM styling features and a brief
  discussion of the approach used to shim.

  Shimmed features:

  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
  element using the :host rule. To shim this feature, the :host styles are
  reformatted and prefixed with a given scope name and promoted to a
  document level stylesheet.
  For example, given a scope name of .foo, a rule like this:

    :host {
        background: red;
      }
    }

  becomes:

    .foo {
      background: red;
    }

  * encapsultion: Styles defined within ShadowDOM, apply only to
  dom inside the ShadowDOM. Polymer uses one of two techniques to imlement
  this feature.

  By default, rules are prefixed with the host element tag name
  as a descendant selector. This ensures styling does not leak out of the 'top'
  of the element's ShadowDOM. For example,

  div {
      font-weight: bold;
    }

  becomes:

  x-foo div {
      font-weight: bold;
    }

  becomes:


  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
  selectors are scoped by adding an attribute selector suffix to each
  simple selector that contains the host element tag name. Each element
  in the element's ShadowDOM template is also given the scope attribute.
  Thus, these rules match only elements that have the scope attribute.
  For example, given a scope name of x-foo, a rule like this:

    div {
      font-weight: bold;
    }

  becomes:

    div[x-foo] {
      font-weight: bold;
    }

  Note that elements that are dynamically added to a scope must have the scope
  selector added to them manually.

  * upper/lower bound encapsulation: Styles which are defined outside a
  shadowRoot should not cross the ShadowDOM boundary and should not apply
  inside a shadowRoot.

  This styling behavior is not emulated. Some possible ways to do this that
  were rejected due to complexity and/or performance concerns include: (1) reset
  every possible property for every possible selector for a given scope name;
  (2) re-implement css in javascript.

  As an alternative, users should make sure to use selectors
  specific to the scope in which they are working.

  * ::distributed: This behavior is not emulated. It's often not necessary
  to style the contents of a specific insertion point and instead, descendants
  of the host element can be styled selectively. Users can also create an
  extra node around an insertion point and style that node's contents
  via descendent selectors. For example, with a shadowRoot like this:

    <style>
      ::content(div) {
        background: red;
      }
    </style>
    <content></content>

  could become:

    <style>
      / *@polyfill .content-container div * /
      ::content(div) {
        background: red;
      }
    </style>
    <div class="content-container">
      <content></content>
    </div>

  Note the use of @polyfill in the comment above a ShadowDOM specific style
  declaration. This is a directive to the styling shim to use the selector
  in comments in lieu of the next selector when running under polyfill.
*/
var ShadowCss = (function () {
    function ShadowCss() {
        this.strictStyling = true;
    }
    /*
    * Shim a style element with the given selector. Returns cssText that can
    * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
    */
    ShadowCss.prototype.shimStyle = function (style, selector, hostSelector) {
        if (hostSelector === void 0) { hostSelector = ''; }
        var cssText = dom_adapter_1.DOM.getText(style);
        return this.shimCssText(cssText, selector, hostSelector);
    };
    /*
    * Shim some cssText with the given selector. Returns cssText that can
    * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
    *
    * When strictStyling is true:
    * - selector is the attribute added to all elements inside the host,
    * - hostSelector is the attribute added to the host itself.
    */
    ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
        if (hostSelector === void 0) { hostSelector = ''; }
        cssText = this._insertDirectives(cssText);
        return this._scopeCssText(cssText, selector, hostSelector);
    };
    /** @internal */
    ShadowCss.prototype._insertDirectives = function (cssText) {
        cssText = this._insertPolyfillDirectivesInCssText(cssText);
        return this._insertPolyfillRulesInCssText(cssText);
    };
    /*
     * Process styles to convert native ShadowDOM rules that will trip
     * up the css parser; we rely on decorating the stylesheet with inert rules.
     *
     * For example, we convert this rule:
     *
     * polyfill-next-selector { content: ':host menu-item'; }
     * ::content menu-item {
     *
     * to this:
     *
     * scopeName menu-item {
     *
    **/
    /** @internal */
    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
        // Difference with webcomponents.js: does not handle comments
        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function (m) { return m[1] + '{'; });
    };
    /*
     * Process styles to add rules which will only apply under the polyfill
     *
     * For example, we convert this rule:
     *
     * polyfill-rule {
     *   content: ':host menu-item';
     * ...
     * }
     *
     * to this:
     *
     * scopeName menu-item {...}
     *
    **/
    /** @internal */
    ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
        // Difference with webcomponents.js: does not handle comments
        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function (m) {
            var rule = m[0];
            rule = lang_1.StringWrapper.replace(rule, m[1], '');
            rule = lang_1.StringWrapper.replace(rule, m[2], '');
            return m[3] + rule;
        });
    };
    /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
     *
     *  .foo {... }
     *
     *  and converts this to
     *
     *  scopeName .foo { ... }
    */
    /** @internal */
    ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
        var _this = this;
        var unscoped = this._extractUnscopedRulesFromCssText(cssText);
        cssText = this._insertPolyfillHostInCssText(cssText);
        cssText = this._convertColonHost(cssText);
        cssText = this._convertColonHostContext(cssText);
        cssText = this._convertShadowDOMSelectors(cssText);
        if (lang_1.isPresent(scopeSelector)) {
            _withCssRules(cssText, function (rules) { cssText = _this._scopeRules(rules, scopeSelector, hostSelector); });
        }
        cssText = cssText + '\n' + unscoped;
        return cssText.trim();
    };
    /*
     * Process styles to add rules which will only apply under the polyfill
     * and do not process via CSSOM. (CSSOM is destructive to rules on rare
     * occasions, e.g. -webkit-calc on Safari.)
     * For example, we convert this rule:
     *
     * @polyfill-unscoped-rule {
     *   content: 'menu-item';
     * ... }
     *
     * to this:
     *
     * menu-item {...}
     *
    **/
    /** @internal */
    ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
        // Difference with webcomponents.js: does not handle comments
        var r = '', m;
        var matcher = lang_1.RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText);
        while (lang_1.isPresent(m = lang_1.RegExpMatcherWrapper.next(matcher))) {
            var rule = m[0];
            rule = lang_1.StringWrapper.replace(rule, m[2], '');
            rule = lang_1.StringWrapper.replace(rule, m[1], m[3]);
            r += rule + '\n\n';
        }
        return r;
    };
    /*
     * convert a rule like :host(.foo) > .bar { }
     *
     * to
     *
     * scopeName.foo > .bar
    */
    /** @internal */
    ShadowCss.prototype._convertColonHost = function (cssText) {
        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
    };
    /*
     * convert a rule like :host-context(.foo) > .bar { }
     *
     * to
     *
     * scopeName.foo > .bar, .foo scopeName > .bar { }
     *
     * and
     *
     * :host-context(.foo:host) .bar { ... }
     *
     * to
     *
     * scopeName.foo .bar { ... }
    */
    /** @internal */
    ShadowCss.prototype._convertColonHostContext = function (cssText) {
        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
    };
    /** @internal */
    ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
        // p1 = :host, p2 = contents of (), p3 rest of rule
        return lang_1.StringWrapper.replaceAllMapped(cssText, regExp, function (m) {
            if (lang_1.isPresent(m[2])) {
                var parts = m[2].split(','), r = [];
                for (var i = 0; i < parts.length; i++) {
                    var p = parts[i];
                    if (lang_1.isBlank(p))
                        break;
                    p = p.trim();
                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
                }
                return r.join(',');
            }
            else {
                return _polyfillHostNoCombinator + m[3];
            }
        });
    };
    /** @internal */
    ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
        if (lang_1.StringWrapper.contains(part, _polyfillHost)) {
            return this._colonHostPartReplacer(host, part, suffix);
        }
        else {
            return host + part + suffix + ', ' + part + ' ' + host + suffix;
        }
    };
    /** @internal */
    ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
        return host + lang_1.StringWrapper.replace(part, _polyfillHost, '') + suffix;
    };
    /*
     * Convert combinators like ::shadow and pseudo-elements like ::content
     * by replacing with space.
    */
    /** @internal */
    ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
        for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
            cssText = lang_1.StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], ' ');
        }
        return cssText;
    };
    // change a selector like 'div' to 'name div'
    /** @internal */
    ShadowCss.prototype._scopeRules = function (cssRules, scopeSelector, hostSelector) {
        var cssText = '';
        if (lang_1.isPresent(cssRules)) {
            for (var i = 0; i < cssRules.length; i++) {
                var rule = cssRules[i];
                if (dom_adapter_1.DOM.isStyleRule(rule) || dom_adapter_1.DOM.isPageRule(rule)) {
                    cssText += this._scopeSelector(rule.selectorText, scopeSelector, hostSelector, this.strictStyling) +
                        ' {\n';
                    cssText += this._propertiesFromRule(rule) + '\n}\n\n';
                }
                else if (dom_adapter_1.DOM.isMediaRule(rule)) {
                    cssText += '@media ' + rule.media.mediaText + ' {\n';
                    cssText += this._scopeRules(rule.cssRules, scopeSelector, hostSelector);
                    cssText += '\n}\n\n';
                }
                else {
                    // KEYFRAMES_RULE in IE throws when we query cssText
                    // when it contains a -webkit- property.
                    // if this happens, we fallback to constructing the rule
                    // from the CSSRuleSet
                    // https://connect.microsoft.com/IE/feedbackdetail/view/955703/accessing-csstext-of-a-keyframe-rule-that-contains-a-webkit-property-via-cssom-generates-exception
                    try {
                        if (lang_1.isPresent(rule.cssText)) {
                            cssText += rule.cssText + '\n\n';
                        }
                    }
                    catch (x) {
                        if (dom_adapter_1.DOM.isKeyframesRule(rule) && lang_1.isPresent(rule.cssRules)) {
                            cssText += this._ieSafeCssTextFromKeyFrameRule(rule);
                        }
                    }
                }
            }
        }
        return cssText;
    };
    /** @internal */
    ShadowCss.prototype._ieSafeCssTextFromKeyFrameRule = function (rule) {
        var cssText = '@keyframes ' + rule.name + ' {';
        for (var i = 0; i < rule.cssRules.length; i++) {
            var r = rule.cssRules[i];
            cssText += ' ' + r.keyText + ' {' + r.style.cssText + '}';
        }
        cssText += ' }';
        return cssText;
    };
    /** @internal */
    ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
        var r = [], parts = selector.split(',');
        for (var i = 0; i < parts.length; i++) {
            var p = parts[i];
            p = p.trim();
            if (this._selectorNeedsScoping(p, scopeSelector)) {
                p = strict && !lang_1.StringWrapper.contains(p, _polyfillHostNoCombinator) ?
                    this._applyStrictSelectorScope(p, scopeSelector) :
                    this._applySelectorScope(p, scopeSelector, hostSelector);
            }
            r.push(p);
        }
        return r.join(', ');
    };
    /** @internal */
    ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
        var re = this._makeScopeMatcher(scopeSelector);
        return !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(re, selector));
    };
    /** @internal */
    ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
        var lre = /\[/g;
        var rre = /\]/g;
        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, lre, '\\[');
        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, rre, '\\]');
        return lang_1.RegExpWrapper.create('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
    };
    /** @internal */
    ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
        // Difference from webcomponentsjs: scopeSelector could not be an array
        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
    };
    // scope via name and [is=name]
    /** @internal */
    ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
        if (lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
            var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
            selector = lang_1.StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
            return lang_1.StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' ');
        }
        else {
            return scopeSelector + ' ' + selector;
        }
    };
    // return a selector with [name] suffix on each simple selector
    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]
    /** @internal */
    ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector) {
        var isRe = /\[is=([^\]]*)\]/g;
        scopeSelector = lang_1.StringWrapper.replaceAllMapped(scopeSelector, isRe, function (m) { return m[1]; });
        var splits = [' ', '>', '+', '~'], scoped = selector, attrName = '[' + scopeSelector + ']';
        for (var i = 0; i < splits.length; i++) {
            var sep = splits[i];
            var parts = scoped.split(sep);
            scoped = parts.map(function (p) {
                // remove :host since it should be unnecessary
                var t = lang_1.StringWrapper.replaceAll(p.trim(), _polyfillHostRe, '');
                if (t.length > 0 && !collection_1.ListWrapper.contains(splits, t) &&
                    !lang_1.StringWrapper.contains(t, attrName)) {
                    var re = /([^:]*)(:*)(.*)/g;
                    var m = lang_1.RegExpWrapper.firstMatch(re, t);
                    if (lang_1.isPresent(m)) {
                        p = m[1] + attrName + m[2] + m[3];
                    }
                }
                return p;
            })
                .join(sep);
        }
        return scoped;
    };
    /** @internal */
    ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
        return selector;
    };
    /** @internal */
    ShadowCss.prototype._propertiesFromRule = function (rule) {
        var cssText = rule.style.cssText;
        // TODO(sorvell): Safari cssom incorrectly removes quotes from the content
        // property. (https://bugs.webkit.org/show_bug.cgi?id=118045)
        // don't replace attr rules
        var attrRe = /['"]+|attr/g;
        if (rule.style.content.length > 0 &&
            !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(attrRe, rule.style.content))) {
            var contentRe = /content:[^;]*;/g;
            cssText =
                lang_1.StringWrapper.replaceAll(cssText, contentRe, 'content: \'' + rule.style.content + '\';');
        }
        // TODO(sorvell): we can workaround this issue here, but we need a list
        // of troublesome properties to fix https://github.com/Polymer/platform/issues/53
        //
        // inherit rules can be omitted from cssText
        // TODO(sorvell): remove when Blink bug is fixed:
        // https://code.google.com/p/chromium/issues/detail?id=358273
        // var style = rule.style;
        // for (var i = 0; i < style.length; i++) {
        //  var name = style.item(i);
        //  var value = style.getPropertyValue(name);
        //  if (value == 'initial') {
        //    cssText += name + ': initial; ';
        //  }
        //}
        return cssText;
    };
    return ShadowCss;
})();
exports.ShadowCss = ShadowCss;
var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim;
var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
var _polyfillHost = '-shadowcsshost';
// note: :host-context pre-processed to -shadowcsshostcontext.
var _polyfillHostContext = '-shadowcsscontext';
var _parenSuffix = ')(?:\\((' +
    '(?:\\([^)(]*\\)|[^)(]*)+?' +
    ')\\))?([^,{]*)';
var _cssColonHostRe = lang_1.RegExpWrapper.create('(' + _polyfillHost + _parenSuffix, 'im');
var _cssColonHostContextRe = lang_1.RegExpWrapper.create('(' + _polyfillHostContext + _parenSuffix, 'im');
var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
var _shadowDOMSelectorsRe = [
    />>>/g,
    /::shadow/g,
    /::content/g,
    // Deprecated selectors
    // TODO(vicb): see https://github.com/angular/clang-format/issues/16
    // clang-format off
    /\/deep\//g,
    /\/shadow-deep\//g,
    /\/shadow\//g,
];
var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
var _polyfillHostRe = lang_1.RegExpWrapper.create(_polyfillHost, 'im');
var _colonHostRe = /:host/gim;
var _colonHostContextRe = /:host-context/gim;
function _cssToRules(cssText) {
    return dom_adapter_1.DOM.cssToRules(cssText);
}
function _withCssRules(cssText, callback) {
    // Difference from webcomponentjs: remove the workaround for an old bug in Chrome
    if (lang_1.isBlank(callback))
        return;
    var rules = _cssToRules(cssText);
    callback(rules);
}

},{"angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/source_module.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var MODULE_REGEXP = /#MODULE\[([^\]]*)\]/g;
function moduleRef(moduleUrl) {
    return "#MODULE[" + moduleUrl + "]";
}
exports.moduleRef = moduleRef;
var SourceModule = (function () {
    function SourceModule(moduleUrl, sourceWithModuleRefs) {
        this.moduleUrl = moduleUrl;
        this.sourceWithModuleRefs = sourceWithModuleRefs;
    }
    SourceModule.prototype.getSourceWithImports = function () {
        var _this = this;
        var moduleAliases = {};
        var imports = [];
        var newSource = lang_1.StringWrapper.replaceAllMapped(this.sourceWithModuleRefs, MODULE_REGEXP, function (match) {
            var moduleUrl = match[1];
            var alias = moduleAliases[moduleUrl];
            if (lang_1.isBlank(alias)) {
                if (moduleUrl == _this.moduleUrl) {
                    alias = '';
                }
                else {
                    alias = "import" + imports.length;
                    imports.push([moduleUrl, alias]);
                }
                moduleAliases[moduleUrl] = alias;
            }
            return alias.length > 0 ? alias + "." : '';
        });
        return new SourceWithImports(newSource, imports);
    };
    return SourceModule;
})();
exports.SourceModule = SourceModule;
var SourceExpression = (function () {
    function SourceExpression(declarations, expression) {
        this.declarations = declarations;
        this.expression = expression;
    }
    return SourceExpression;
})();
exports.SourceExpression = SourceExpression;
var SourceExpressions = (function () {
    function SourceExpressions(declarations, expressions) {
        this.declarations = declarations;
        this.expressions = expressions;
    }
    return SourceExpressions;
})();
exports.SourceExpressions = SourceExpressions;
var SourceWithImports = (function () {
    function SourceWithImports(source, imports) {
        this.source = source;
        this.imports = imports;
    }
    return SourceWithImports;
})();
exports.SourceWithImports = SourceWithImports;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/style_compiler.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var source_module_1 = require('./source_module');
var view_1 = require('angular2/src/core/metadata/view');
var xhr_1 = require('angular2/src/core/compiler/xhr');
var lang_1 = require('angular2/src/core/facade/lang');
var async_1 = require('angular2/src/core/facade/async');
var shadow_css_1 = require('angular2/src/core/compiler/shadow_css');
var url_resolver_1 = require('angular2/src/core/compiler/url_resolver');
var style_url_resolver_1 = require('./style_url_resolver');
var util_1 = require('./util');
var di_1 = require('angular2/src/core/di');
var COMPONENT_VARIABLE = '%COMP%';
var COMPONENT_REGEX = /%COMP%/g;
var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
var HOST_ATTR_EXPR = "'_nghost-'+" + COMPONENT_VARIABLE;
var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
var CONTENT_ATTR_EXPR = "'_ngcontent-'+" + COMPONENT_VARIABLE;
var StyleCompiler = (function () {
    function StyleCompiler(_xhr, _urlResolver) {
        this._xhr = _xhr;
        this._urlResolver = _urlResolver;
        this._styleCache = new Map();
        this._shadowCss = new shadow_css_1.ShadowCss();
    }
    StyleCompiler.prototype.compileComponentRuntime = function (appId, templateId, template) {
        var styles = template.styles;
        var styleAbsUrls = template.styleUrls;
        return this._loadStyles(styles, styleAbsUrls, template.encapsulation === view_1.ViewEncapsulation.Emulated)
            .then(function (styles) { return styles.map(function (style) { return lang_1.StringWrapper.replaceAll(style, COMPONENT_REGEX, componentId(appId, templateId)); }); });
    };
    StyleCompiler.prototype.compileComponentCodeGen = function (appIdExpression, templateIdExpression, template) {
        var shim = template.encapsulation === view_1.ViewEncapsulation.Emulated;
        var suffix;
        if (shim) {
            suffix = util_1.codeGenMapArray(['style'], "style" + util_1.codeGenReplaceAll(COMPONENT_VARIABLE, componentIdExpression(appIdExpression, templateIdExpression)));
        }
        else {
            suffix = '';
        }
        return this._styleCodeGen(template.styles, template.styleUrls, shim, suffix);
    };
    StyleCompiler.prototype.compileStylesheetCodeGen = function (stylesheetUrl, cssText) {
        var styleWithImports = style_url_resolver_1.extractStyleUrls(this._urlResolver, stylesheetUrl, cssText);
        return [
            this._styleModule(stylesheetUrl, false, this._styleCodeGen([styleWithImports.style], styleWithImports.styleUrls, false, '')),
            this._styleModule(stylesheetUrl, true, this._styleCodeGen([styleWithImports.style], styleWithImports.styleUrls, true, ''))
        ];
    };
    StyleCompiler.prototype.clearCache = function () { this._styleCache.clear(); };
    StyleCompiler.prototype._loadStyles = function (plainStyles, absUrls, encapsulate) {
        var _this = this;
        var promises = absUrls.map(function (absUrl) {
            var cacheKey = "" + absUrl + (encapsulate ? '.shim' : '');
            var result = _this._styleCache.get(cacheKey);
            if (lang_1.isBlank(result)) {
                result = _this._xhr.get(absUrl).then(function (style) {
                    var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, absUrl, style);
                    return _this._loadStyles([styleWithImports.style], styleWithImports.styleUrls, encapsulate);
                });
                _this._styleCache.set(cacheKey, result);
            }
            return result;
        });
        return async_1.PromiseWrapper.all(promises).then(function (nestedStyles) {
            var result = plainStyles.map(function (plainStyle) { return _this._shimIfNeeded(plainStyle, encapsulate); });
            nestedStyles.forEach(function (styles) { return styles.forEach(function (style) { return result.push(style); }); });
            return result;
        });
    };
    StyleCompiler.prototype._styleCodeGen = function (plainStyles, absUrls, shim, suffix) {
        var _this = this;
        var expressionSource = "(";
        expressionSource +=
            "[" + plainStyles.map(function (plainStyle) { return util_1.escapeSingleQuoteString(_this._shimIfNeeded(plainStyle, shim)); }).join(',') + "]";
        for (var i = 0; i < absUrls.length; i++) {
            var moduleUrl = this._createModuleUrl(absUrls[i], shim);
            expressionSource += util_1.codeGenConcatArray(source_module_1.moduleRef(moduleUrl) + "STYLES");
        }
        expressionSource += ")" + suffix;
        return new source_module_1.SourceExpression([], expressionSource);
    };
    StyleCompiler.prototype._styleModule = function (stylesheetUrl, shim, expression) {
        var moduleSource = "\n      " + expression.declarations.join('\n') + "\n      " + util_1.codeGenExportVariable('STYLES') + expression.expression + ";\n    ";
        return new source_module_1.SourceModule(this._createModuleUrl(stylesheetUrl, shim), moduleSource);
    };
    StyleCompiler.prototype._shimIfNeeded = function (style, shim) {
        return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
    };
    StyleCompiler.prototype._createModuleUrl = function (stylesheetUrl, shim) {
        return shim ? stylesheetUrl + ".shim" + util_1.MODULE_SUFFIX : "" + stylesheetUrl + util_1.MODULE_SUFFIX;
    };
    StyleCompiler = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [xhr_1.XHR, url_resolver_1.UrlResolver])
    ], StyleCompiler);
    return StyleCompiler;
})();
exports.StyleCompiler = StyleCompiler;
function shimContentAttribute(appId, templateId) {
    return lang_1.StringWrapper.replaceAll(CONTENT_ATTR, COMPONENT_REGEX, componentId(appId, templateId));
}
exports.shimContentAttribute = shimContentAttribute;
function shimContentAttributeExpr(appIdExpr, templateIdExpr) {
    return lang_1.StringWrapper.replaceAll(CONTENT_ATTR_EXPR, COMPONENT_REGEX, componentIdExpression(appIdExpr, templateIdExpr));
}
exports.shimContentAttributeExpr = shimContentAttributeExpr;
function shimHostAttribute(appId, templateId) {
    return lang_1.StringWrapper.replaceAll(HOST_ATTR, COMPONENT_REGEX, componentId(appId, templateId));
}
exports.shimHostAttribute = shimHostAttribute;
function shimHostAttributeExpr(appIdExpr, templateIdExpr) {
    return lang_1.StringWrapper.replaceAll(HOST_ATTR_EXPR, COMPONENT_REGEX, componentIdExpression(appIdExpr, templateIdExpr));
}
exports.shimHostAttributeExpr = shimHostAttributeExpr;
function componentId(appId, templateId) {
    return appId + "-" + templateId;
}
function componentIdExpression(appIdExpression, templateIdExpression) {
    return appIdExpression + "+'-'+" + util_1.codeGenToString(templateIdExpression);
}

},{"./source_module":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/source_module.js","./style_url_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/style_url_resolver.js","./util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/util.js","angular2/src/core/compiler/shadow_css":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/shadow_css.js","angular2/src/core/compiler/url_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/url_resolver.js","angular2/src/core/compiler/xhr":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/xhr.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata/view":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/view.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/style_url_resolver.js":[function(require,module,exports){
'use strict';// Some of the code comes from WebComponents.JS
// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js
var lang_1 = require('angular2/src/core/facade/lang');
var StyleWithImports = (function () {
    function StyleWithImports(style, styleUrls) {
        this.style = style;
        this.styleUrls = styleUrls;
    }
    return StyleWithImports;
})();
exports.StyleWithImports = StyleWithImports;
function isStyleUrlResolvable(url) {
    if (lang_1.isBlank(url) || url.length === 0 || url[0] == '/')
        return false;
    var schemeMatch = lang_1.RegExpWrapper.firstMatch(_urlWithSchemaRe, url);
    return lang_1.isBlank(schemeMatch) || schemeMatch[1] == 'package';
}
exports.isStyleUrlResolvable = isStyleUrlResolvable;
/**
 * Rewrites stylesheets by resolving and removing the @import urls that
 * are either relative or don't have a `package:` scheme
 */
function extractStyleUrls(resolver, baseUrl, cssText) {
    var foundUrls = [];
    var modifiedCssText = lang_1.StringWrapper.replaceAllMapped(cssText, _cssImportRe, function (m) {
        var url = lang_1.isPresent(m[1]) ? m[1] : m[2];
        if (!isStyleUrlResolvable(url)) {
            // Do not attempt to resolve non-package absolute URLs with URI scheme
            return m[0];
        }
        foundUrls.push(resolver.resolve(baseUrl, url));
        return '';
    });
    return new StyleWithImports(modifiedCssText, foundUrls);
}
exports.extractStyleUrls = extractStyleUrls;
var _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
// TODO: can't use /^[^:/?#.]+:/g due to clang-format bug:
//       https://github.com/angular/angular/issues/4596
var _urlWithSchemaRe = /^([a-zA-Z\-\+\.]+):/g;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_ast.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var TextAst = (function () {
    function TextAst(value, ngContentIndex, sourceInfo) {
        this.value = value;
        this.ngContentIndex = ngContentIndex;
        this.sourceInfo = sourceInfo;
    }
    TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
    return TextAst;
})();
exports.TextAst = TextAst;
var BoundTextAst = (function () {
    function BoundTextAst(value, ngContentIndex, sourceInfo) {
        this.value = value;
        this.ngContentIndex = ngContentIndex;
        this.sourceInfo = sourceInfo;
    }
    BoundTextAst.prototype.visit = function (visitor, context) {
        return visitor.visitBoundText(this, context);
    };
    return BoundTextAst;
})();
exports.BoundTextAst = BoundTextAst;
var AttrAst = (function () {
    function AttrAst(name, value, sourceInfo) {
        this.name = name;
        this.value = value;
        this.sourceInfo = sourceInfo;
    }
    AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
    return AttrAst;
})();
exports.AttrAst = AttrAst;
var BoundElementPropertyAst = (function () {
    function BoundElementPropertyAst(name, type, value, unit, sourceInfo) {
        this.name = name;
        this.type = type;
        this.value = value;
        this.unit = unit;
        this.sourceInfo = sourceInfo;
    }
    BoundElementPropertyAst.prototype.visit = function (visitor, context) {
        return visitor.visitElementProperty(this, context);
    };
    return BoundElementPropertyAst;
})();
exports.BoundElementPropertyAst = BoundElementPropertyAst;
var BoundEventAst = (function () {
    function BoundEventAst(name, target, handler, sourceInfo) {
        this.name = name;
        this.target = target;
        this.handler = handler;
        this.sourceInfo = sourceInfo;
    }
    BoundEventAst.prototype.visit = function (visitor, context) {
        return visitor.visitEvent(this, context);
    };
    Object.defineProperty(BoundEventAst.prototype, "fullName", {
        get: function () {
            if (lang_1.isPresent(this.target)) {
                return this.target + ":" + this.name;
            }
            else {
                return this.name;
            }
        },
        enumerable: true,
        configurable: true
    });
    return BoundEventAst;
})();
exports.BoundEventAst = BoundEventAst;
var VariableAst = (function () {
    function VariableAst(name, value, sourceInfo) {
        this.name = name;
        this.value = value;
        this.sourceInfo = sourceInfo;
    }
    VariableAst.prototype.visit = function (visitor, context) {
        return visitor.visitVariable(this, context);
    };
    return VariableAst;
})();
exports.VariableAst = VariableAst;
var ElementAst = (function () {
    function ElementAst(name, attrs, inputs, outputs, exportAsVars, directives, children, ngContentIndex, sourceInfo) {
        this.name = name;
        this.attrs = attrs;
        this.inputs = inputs;
        this.outputs = outputs;
        this.exportAsVars = exportAsVars;
        this.directives = directives;
        this.children = children;
        this.ngContentIndex = ngContentIndex;
        this.sourceInfo = sourceInfo;
    }
    ElementAst.prototype.visit = function (visitor, context) {
        return visitor.visitElement(this, context);
    };
    ElementAst.prototype.isBound = function () {
        return (this.inputs.length > 0 || this.outputs.length > 0 || this.exportAsVars.length > 0 ||
            this.directives.length > 0);
    };
    ElementAst.prototype.getComponent = function () {
        return this.directives.length > 0 && this.directives[0].directive.isComponent ?
            this.directives[0].directive :
            null;
    };
    return ElementAst;
})();
exports.ElementAst = ElementAst;
var EmbeddedTemplateAst = (function () {
    function EmbeddedTemplateAst(attrs, vars, directives, children, ngContentIndex, sourceInfo) {
        this.attrs = attrs;
        this.vars = vars;
        this.directives = directives;
        this.children = children;
        this.ngContentIndex = ngContentIndex;
        this.sourceInfo = sourceInfo;
    }
    EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
        return visitor.visitEmbeddedTemplate(this, context);
    };
    return EmbeddedTemplateAst;
})();
exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
var BoundDirectivePropertyAst = (function () {
    function BoundDirectivePropertyAst(directiveName, templateName, value, sourceInfo) {
        this.directiveName = directiveName;
        this.templateName = templateName;
        this.value = value;
        this.sourceInfo = sourceInfo;
    }
    BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
        return visitor.visitDirectiveProperty(this, context);
    };
    return BoundDirectivePropertyAst;
})();
exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
var DirectiveAst = (function () {
    function DirectiveAst(directive, inputs, hostProperties, hostEvents, exportAsVars, sourceInfo) {
        this.directive = directive;
        this.inputs = inputs;
        this.hostProperties = hostProperties;
        this.hostEvents = hostEvents;
        this.exportAsVars = exportAsVars;
        this.sourceInfo = sourceInfo;
    }
    DirectiveAst.prototype.visit = function (visitor, context) {
        return visitor.visitDirective(this, context);
    };
    return DirectiveAst;
})();
exports.DirectiveAst = DirectiveAst;
var NgContentAst = (function () {
    function NgContentAst(index, ngContentIndex, sourceInfo) {
        this.index = index;
        this.ngContentIndex = ngContentIndex;
        this.sourceInfo = sourceInfo;
    }
    NgContentAst.prototype.visit = function (visitor, context) {
        return visitor.visitNgContent(this, context);
    };
    return NgContentAst;
})();
exports.NgContentAst = NgContentAst;
(function (PropertyBindingType) {
    PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
    PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
    PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
    PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
})(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
var PropertyBindingType = exports.PropertyBindingType;
function templateVisitAll(visitor, asts, context) {
    if (context === void 0) { context = null; }
    var result = [];
    asts.forEach(function (ast) {
        var astResult = ast.visit(visitor, context);
        if (lang_1.isPresent(astResult)) {
            result.push(astResult);
        }
    });
    return result;
}
exports.templateVisitAll = templateVisitAll;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_compiler.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var async_1 = require('angular2/src/core/facade/async');
var template_commands_1 = require('angular2/src/core/linker/template_commands');
var directive_metadata_1 = require('./directive_metadata');
var di_1 = require('angular2/src/core/di');
var source_module_1 = require('./source_module');
var change_detector_compiler_1 = require('./change_detector_compiler');
var style_compiler_1 = require('./style_compiler');
var command_compiler_1 = require('./command_compiler');
var template_parser_1 = require('./template_parser');
var template_normalizer_1 = require('./template_normalizer');
var runtime_metadata_1 = require('./runtime_metadata');
var application_tokens_1 = require('angular2/src/core/application_tokens');
var command_compiler_2 = require('./command_compiler');
var util_1 = require('./util');
var di_2 = require('angular2/src/core/di');
var TemplateCompiler = (function () {
    function TemplateCompiler(_runtimeMetadataResolver, _templateNormalizer, _templateParser, _styleCompiler, _commandCompiler, _cdCompiler, appId) {
        this._runtimeMetadataResolver = _runtimeMetadataResolver;
        this._templateNormalizer = _templateNormalizer;
        this._templateParser = _templateParser;
        this._styleCompiler = _styleCompiler;
        this._commandCompiler = _commandCompiler;
        this._cdCompiler = _cdCompiler;
        this._hostCacheKeys = new Map();
        this._compiledTemplateCache = new Map();
        this._compiledTemplateDone = new Map();
        this._appId = appId;
    }
    TemplateCompiler.prototype.normalizeDirectiveMetadata = function (directive) {
        if (!directive.isComponent) {
            // For non components there is nothing to be normalized yet.
            return async_1.PromiseWrapper.resolve(directive);
        }
        var normalizedTemplatePromise;
        if (directive.isComponent) {
            normalizedTemplatePromise =
                this._templateNormalizer.normalizeTemplate(directive.type, directive.template);
        }
        else {
            normalizedTemplatePromise = async_1.PromiseWrapper.resolve(null);
        }
        return normalizedTemplatePromise.then(function (normalizedTemplate) { return new directive_metadata_1.CompileDirectiveMetadata({
            type: directive.type,
            isComponent: directive.isComponent,
            dynamicLoadable: directive.dynamicLoadable,
            selector: directive.selector,
            exportAs: directive.exportAs,
            changeDetection: directive.changeDetection,
            inputs: directive.inputs,
            outputs: directive.outputs,
            hostListeners: directive.hostListeners,
            hostProperties: directive.hostProperties,
            hostAttributes: directive.hostAttributes,
            lifecycleHooks: directive.lifecycleHooks, template: normalizedTemplate
        }); });
    };
    TemplateCompiler.prototype.compileHostComponentRuntime = function (type) {
        var hostCacheKey = this._hostCacheKeys.get(type);
        if (lang_1.isBlank(hostCacheKey)) {
            hostCacheKey = new Object();
            this._hostCacheKeys.set(type, hostCacheKey);
            var compMeta = this._runtimeMetadataResolver.getMetadata(type);
            assertComponent(compMeta);
            var hostMeta = directive_metadata_1.createHostComponentMeta(compMeta.type, compMeta.selector);
            this._compileComponentRuntime(hostCacheKey, hostMeta, [compMeta], new Set());
        }
        return this._compiledTemplateDone.get(hostCacheKey)
            .then(function (compiledTemplate) { return new template_commands_1.CompiledHostTemplate(function () { return compiledTemplate; }); });
    };
    TemplateCompiler.prototype.clearCache = function () {
        this._hostCacheKeys.clear();
        this._styleCompiler.clearCache();
        this._compiledTemplateCache.clear();
        this._compiledTemplateDone.clear();
    };
    TemplateCompiler.prototype._compileComponentRuntime = function (cacheKey, compMeta, viewDirectives, compilingComponentCacheKeys) {
        var _this = this;
        var compiledTemplate = this._compiledTemplateCache.get(cacheKey);
        var done = this._compiledTemplateDone.get(cacheKey);
        if (lang_1.isBlank(compiledTemplate)) {
            var styles;
            var changeDetectorFactory;
            var commands;
            var templateId = template_commands_1.nextTemplateId();
            compiledTemplate =
                new template_commands_1.CompiledTemplate(templateId, function (_a, _b) { return [changeDetectorFactory, commands, styles]; });
            this._compiledTemplateCache.set(cacheKey, compiledTemplate);
            compilingComponentCacheKeys.add(cacheKey);
            done =
                async_1.PromiseWrapper.all([
                    this._styleCompiler.compileComponentRuntime(this._appId, templateId, compMeta.template)
                ].concat(viewDirectives.map(function (dirMeta) {
                    return _this.normalizeDirectiveMetadata(dirMeta);
                })))
                    .then(function (stylesAndNormalizedViewDirMetas) {
                    var childPromises = [];
                    var normalizedViewDirMetas = stylesAndNormalizedViewDirMetas.slice(1);
                    var parsedTemplate = _this._templateParser.parse(compMeta.template.template, normalizedViewDirMetas, compMeta.type.name);
                    var changeDetectorFactories = _this._cdCompiler.compileComponentRuntime(compMeta.type, compMeta.changeDetection, parsedTemplate);
                    changeDetectorFactory = changeDetectorFactories[0];
                    styles = stylesAndNormalizedViewDirMetas[0];
                    commands = _this._compileCommandsRuntime(compMeta, templateId, parsedTemplate, changeDetectorFactories, compilingComponentCacheKeys, childPromises);
                    return async_1.PromiseWrapper.all(childPromises);
                })
                    .then(function (_) {
                    collection_1.SetWrapper.delete(compilingComponentCacheKeys, cacheKey);
                    return compiledTemplate;
                });
            this._compiledTemplateDone.set(cacheKey, done);
        }
        return compiledTemplate;
    };
    TemplateCompiler.prototype._compileCommandsRuntime = function (compMeta, templateId, parsedTemplate, changeDetectorFactories, compilingComponentCacheKeys, childPromises) {
        var _this = this;
        return this._commandCompiler.compileComponentRuntime(compMeta, this._appId, templateId, parsedTemplate, changeDetectorFactories, function (childComponentDir) {
            var childCacheKey = childComponentDir.type.runtime;
            var childViewDirectives = _this._runtimeMetadataResolver.getViewDirectivesMetadata(childComponentDir.type.runtime);
            var childIsRecursive = collection_1.SetWrapper.has(compilingComponentCacheKeys, childCacheKey);
            var childTemplate = _this._compileComponentRuntime(childCacheKey, childComponentDir, childViewDirectives, compilingComponentCacheKeys);
            if (!childIsRecursive) {
                // Only wait for a child if it is not a cycle
                childPromises.push(_this._compiledTemplateDone.get(childCacheKey));
            }
            return childTemplate;
        });
    };
    TemplateCompiler.prototype.compileTemplatesCodeGen = function (components) {
        var _this = this;
        if (components.length === 0) {
            throw new exceptions_1.BaseException('No components given');
        }
        var declarations = [];
        var templateArguments = [];
        var componentMetas = [];
        var templateIdVariable = 'templateId';
        var appIdVariable = 'appId';
        components.forEach(function (componentWithDirs) {
            var compMeta = componentWithDirs.component;
            assertComponent(compMeta);
            componentMetas.push(compMeta);
            _this._processTemplateCodeGen(compMeta, appIdVariable, templateIdVariable, componentWithDirs.directives, declarations, templateArguments);
            if (compMeta.dynamicLoadable) {
                var hostMeta = directive_metadata_1.createHostComponentMeta(compMeta.type, compMeta.selector);
                componentMetas.push(hostMeta);
                _this._processTemplateCodeGen(hostMeta, appIdVariable, templateIdVariable, [compMeta], declarations, templateArguments);
            }
        });
        collection_1.ListWrapper.forEachWithIndex(componentMetas, function (compMeta, index) {
            var templateDataFn = util_1.codeGenValueFn([appIdVariable, templateIdVariable], "[" + templateArguments[index].join(',') + "]");
            var compiledTemplateExpr = "new " + command_compiler_2.TEMPLATE_COMMANDS_MODULE_REF + "CompiledTemplate(" + command_compiler_2.TEMPLATE_COMMANDS_MODULE_REF + "nextTemplateId()," + templateDataFn + ")";
            var variableValueExpr;
            if (compMeta.type.isHost) {
                var factoryName = "_hostTemplateFactory" + index;
                declarations.push(util_1.codeGenValueFn([], compiledTemplateExpr, factoryName) + ";");
                var constructionKeyword = util_1.IS_DART ? 'const' : 'new';
                variableValueExpr =
                    constructionKeyword + " " + command_compiler_2.TEMPLATE_COMMANDS_MODULE_REF + "CompiledHostTemplate(" + factoryName + ")";
            }
            else {
                variableValueExpr = compiledTemplateExpr;
            }
            declarations.push("" + util_1.codeGenExportVariable(templateVariableName(compMeta.type), compMeta.type.isHost) + variableValueExpr + ";");
        });
        var moduleUrl = components[0].component.type.moduleUrl;
        return new source_module_1.SourceModule("" + templateModuleUrl(moduleUrl), declarations.join('\n'));
    };
    TemplateCompiler.prototype.compileStylesheetCodeGen = function (stylesheetUrl, cssText) {
        return this._styleCompiler.compileStylesheetCodeGen(stylesheetUrl, cssText);
    };
    TemplateCompiler.prototype._processTemplateCodeGen = function (compMeta, appIdExpr, templateIdExpr, directives, targetDeclarations, targetTemplateArguments) {
        var styleExpr = this._styleCompiler.compileComponentCodeGen(appIdExpr, templateIdExpr, compMeta.template);
        var parsedTemplate = this._templateParser.parse(compMeta.template.template, directives, compMeta.type.name);
        var changeDetectorsExprs = this._cdCompiler.compileComponentCodeGen(compMeta.type, compMeta.changeDetection, parsedTemplate);
        var commandsExpr = this._commandCompiler.compileComponentCodeGen(compMeta, appIdExpr, templateIdExpr, parsedTemplate, changeDetectorsExprs.expressions, codeGenComponentTemplateFactory);
        addAll(styleExpr.declarations, targetDeclarations);
        addAll(changeDetectorsExprs.declarations, targetDeclarations);
        addAll(commandsExpr.declarations, targetDeclarations);
        targetTemplateArguments.push([changeDetectorsExprs.expressions[0], commandsExpr.expression, styleExpr.expression]);
    };
    TemplateCompiler = __decorate([
        di_1.Injectable(),
        __param(6, di_2.Inject(application_tokens_1.APP_ID)), 
        __metadata('design:paramtypes', [runtime_metadata_1.RuntimeMetadataResolver, template_normalizer_1.TemplateNormalizer, template_parser_1.TemplateParser, style_compiler_1.StyleCompiler, command_compiler_1.CommandCompiler, change_detector_compiler_1.ChangeDetectionCompiler, String])
    ], TemplateCompiler);
    return TemplateCompiler;
})();
exports.TemplateCompiler = TemplateCompiler;
var NormalizedComponentWithViewDirectives = (function () {
    function NormalizedComponentWithViewDirectives(component, directives) {
        this.component = component;
        this.directives = directives;
    }
    return NormalizedComponentWithViewDirectives;
})();
exports.NormalizedComponentWithViewDirectives = NormalizedComponentWithViewDirectives;
function assertComponent(meta) {
    if (!meta.isComponent) {
        throw new exceptions_1.BaseException("Could not compile '" + meta.type.name + "' because it is not a component.");
    }
}
function templateVariableName(type) {
    return type.name + "Template";
}
function templateModuleUrl(moduleUrl) {
    var urlWithoutSuffix = moduleUrl.substring(0, moduleUrl.length - util_1.MODULE_SUFFIX.length);
    return urlWithoutSuffix + ".template" + util_1.MODULE_SUFFIX;
}
function addAll(source, target) {
    for (var i = 0; i < source.length; i++) {
        target.push(source[i]);
    }
}
function codeGenComponentTemplateFactory(nestedCompType) {
    return "" + source_module_1.moduleRef(templateModuleUrl(nestedCompType.type.moduleUrl)) + templateVariableName(nestedCompType.type);
}

},{"./change_detector_compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/change_detector_compiler.js","./command_compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/command_compiler.js","./directive_metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/directive_metadata.js","./runtime_metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/runtime_metadata.js","./source_module":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/source_module.js","./style_compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/style_compiler.js","./template_normalizer":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_normalizer.js","./template_parser":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_parser.js","./util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/util.js","angular2/src/core/application_tokens":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/application_tokens.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker/template_commands":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/template_commands.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_normalizer.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var directive_metadata_1 = require('./directive_metadata');
var lang_1 = require('angular2/src/core/facade/lang');
var collection_1 = require('angular2/src/core/facade/collection');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var async_1 = require('angular2/src/core/facade/async');
var xhr_1 = require('angular2/src/core/compiler/xhr');
var url_resolver_1 = require('angular2/src/core/compiler/url_resolver');
var style_url_resolver_1 = require('./style_url_resolver');
var di_1 = require('angular2/src/core/di');
var view_1 = require('angular2/src/core/metadata/view');
var html_ast_1 = require('./html_ast');
var html_parser_1 = require('./html_parser');
var template_preparser_1 = require('./template_preparser');
var TemplateNormalizer = (function () {
    function TemplateNormalizer(_xhr, _urlResolver, _domParser) {
        this._xhr = _xhr;
        this._urlResolver = _urlResolver;
        this._domParser = _domParser;
    }
    TemplateNormalizer.prototype.normalizeTemplate = function (directiveType, template) {
        var _this = this;
        if (lang_1.isPresent(template.template)) {
            return async_1.PromiseWrapper.resolve(this.normalizeLoadedTemplate(directiveType, template, template.template, directiveType.moduleUrl));
        }
        else if (lang_1.isPresent(template.templateUrl)) {
            var sourceAbsUrl = this._urlResolver.resolve(directiveType.moduleUrl, template.templateUrl);
            return this._xhr.get(sourceAbsUrl)
                .then(function (templateContent) { return _this.normalizeLoadedTemplate(directiveType, template, templateContent, sourceAbsUrl); });
        }
        else {
            throw new exceptions_1.BaseException("No template specified for component " + directiveType.name);
        }
    };
    TemplateNormalizer.prototype.normalizeLoadedTemplate = function (directiveType, templateMeta, template, templateAbsUrl) {
        var _this = this;
        var domNodes = this._domParser.parse(template, directiveType.name);
        var visitor = new TemplatePreparseVisitor();
        html_ast_1.htmlVisitAll(visitor, domNodes);
        var allStyles = templateMeta.styles.concat(visitor.styles);
        var allStyleAbsUrls = visitor.styleUrls.map(function (url) { return _this._urlResolver.resolve(templateAbsUrl, url); })
            .concat(templateMeta.styleUrls.map(function (url) { return _this._urlResolver.resolve(directiveType.moduleUrl, url); }));
        allStyleAbsUrls = collection_1.ListWrapper.filter(allStyleAbsUrls, style_url_resolver_1.isStyleUrlResolvable);
        var allResolvedStyles = allStyles.map(function (style) {
            var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, templateAbsUrl, style);
            styleWithImports.styleUrls.forEach(function (styleUrl) { return allStyleAbsUrls.push(styleUrl); });
            return styleWithImports.style;
        });
        var encapsulation = templateMeta.encapsulation;
        if (encapsulation === view_1.ViewEncapsulation.Emulated && allResolvedStyles.length === 0 &&
            allStyleAbsUrls.length === 0) {
            encapsulation = view_1.ViewEncapsulation.None;
        }
        return new directive_metadata_1.CompileTemplateMetadata({
            encapsulation: encapsulation,
            template: template,
            templateUrl: templateAbsUrl,
            styles: allResolvedStyles,
            styleUrls: allStyleAbsUrls,
            ngContentSelectors: visitor.ngContentSelectors
        });
    };
    TemplateNormalizer = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [xhr_1.XHR, url_resolver_1.UrlResolver, html_parser_1.HtmlParser])
    ], TemplateNormalizer);
    return TemplateNormalizer;
})();
exports.TemplateNormalizer = TemplateNormalizer;
var TemplatePreparseVisitor = (function () {
    function TemplatePreparseVisitor() {
        this.ngContentSelectors = [];
        this.styles = [];
        this.styleUrls = [];
        this.ngNonBindableStackCount = 0;
    }
    TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
        var preparsedElement = template_preparser_1.preparseElement(ast);
        switch (preparsedElement.type) {
            case template_preparser_1.PreparsedElementType.NG_CONTENT:
                if (this.ngNonBindableStackCount === 0) {
                    this.ngContentSelectors.push(preparsedElement.selectAttr);
                }
                break;
            case template_preparser_1.PreparsedElementType.STYLE:
                var textContent = '';
                ast.children.forEach(function (child) {
                    if (child instanceof html_ast_1.HtmlTextAst) {
                        textContent += child.value;
                    }
                });
                this.styles.push(textContent);
                break;
            case template_preparser_1.PreparsedElementType.STYLESHEET:
                this.styleUrls.push(preparsedElement.hrefAttr);
                break;
        }
        if (preparsedElement.nonBindable) {
            this.ngNonBindableStackCount++;
        }
        html_ast_1.htmlVisitAll(this, ast.children);
        if (preparsedElement.nonBindable) {
            this.ngNonBindableStackCount--;
        }
        return null;
    };
    TemplatePreparseVisitor.prototype.visitAttr = function (ast, context) { return null; };
    TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null; };
    return TemplatePreparseVisitor;
})();

},{"./directive_metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/directive_metadata.js","./html_ast":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/html_ast.js","./html_parser":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/html_parser.js","./style_url_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/style_url_resolver.js","./template_preparser":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_preparser.js","angular2/src/core/compiler/url_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/url_resolver.js","angular2/src/core/compiler/xhr":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/xhr.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata/view":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/view.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_parser.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var di_1 = require('angular2/src/core/di');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var change_detection_1 = require('angular2/src/core/change_detection/change_detection');
var html_parser_1 = require('./html_parser');
var template_ast_1 = require('./template_ast');
var selector_1 = require('angular2/src/core/compiler/selector');
var element_schema_registry_1 = require('angular2/src/core/compiler/schema/element_schema_registry');
var template_preparser_1 = require('./template_preparser');
var style_url_resolver_1 = require('./style_url_resolver');
var html_ast_1 = require('./html_ast');
var util_1 = require('./util');
// Group 1 = "bind-"
// Group 2 = "var-" or "#"
// Group 3 = "on-"
// Group 4 = "bindon-"
// Group 5 = the identifier after "bind-", "var-/#", or "on-"
// Group 6 = idenitifer inside [()]
// Group 7 = idenitifer inside []
// Group 8 = identifier inside ()
var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(var-|#)|(on-)|(bindon-))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/g;
var TEMPLATE_ELEMENT = 'template';
var TEMPLATE_ATTR = 'template';
var TEMPLATE_ATTR_PREFIX = '*';
var CLASS_ATTR = 'class';
var PROPERTY_PARTS_SEPARATOR = new RegExp('\\.');
var ATTRIBUTE_PREFIX = 'attr';
var CLASS_PREFIX = 'class';
var STYLE_PREFIX = 'style';
var TEXT_CSS_SELECTOR = selector_1.CssSelector.parse('*')[0];
var TemplateParser = (function () {
    function TemplateParser(_exprParser, _schemaRegistry, _htmlParser) {
        this._exprParser = _exprParser;
        this._schemaRegistry = _schemaRegistry;
        this._htmlParser = _htmlParser;
    }
    TemplateParser.prototype.parse = function (template, directives, sourceInfo) {
        var parseVisitor = new TemplateParseVisitor(directives, this._exprParser, this._schemaRegistry);
        var result = html_ast_1.htmlVisitAll(parseVisitor, this._htmlParser.parse(template, sourceInfo), EMPTY_COMPONENT);
        if (parseVisitor.errors.length > 0) {
            var errorString = parseVisitor.errors.join('\n');
            throw new exceptions_1.BaseException("Template parse errors:\n" + errorString);
        }
        return result;
    };
    TemplateParser = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [change_detection_1.Parser, element_schema_registry_1.ElementSchemaRegistry, html_parser_1.HtmlParser])
    ], TemplateParser);
    return TemplateParser;
})();
exports.TemplateParser = TemplateParser;
var TemplateParseVisitor = (function () {
    function TemplateParseVisitor(directives, _exprParser, _schemaRegistry) {
        var _this = this;
        this._exprParser = _exprParser;
        this._schemaRegistry = _schemaRegistry;
        this.errors = [];
        this.directivesIndex = new Map();
        this.ngContentCount = 0;
        this.selectorMatcher = new selector_1.SelectorMatcher();
        collection_1.ListWrapper.forEachWithIndex(directives, function (directive, index) {
            var selector = selector_1.CssSelector.parse(directive.selector);
            _this.selectorMatcher.addSelectables(selector, directive);
            _this.directivesIndex.set(directive, index);
        });
    }
    TemplateParseVisitor.prototype._reportError = function (message) { this.errors.push(message); };
    TemplateParseVisitor.prototype._parseInterpolation = function (value, sourceInfo) {
        try {
            return this._exprParser.parseInterpolation(value, sourceInfo);
        }
        catch (e) {
            this._reportError("" + e); // sourceInfo is already contained in the AST
            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
        }
    };
    TemplateParseVisitor.prototype._parseAction = function (value, sourceInfo) {
        try {
            return this._exprParser.parseAction(value, sourceInfo);
        }
        catch (e) {
            this._reportError("" + e); // sourceInfo is already contained in the AST
            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
        }
    };
    TemplateParseVisitor.prototype._parseBinding = function (value, sourceInfo) {
        try {
            return this._exprParser.parseBinding(value, sourceInfo);
        }
        catch (e) {
            this._reportError("" + e); // sourceInfo is already contained in the AST
            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
        }
    };
    TemplateParseVisitor.prototype._parseTemplateBindings = function (value, sourceInfo) {
        try {
            return this._exprParser.parseTemplateBindings(value, sourceInfo);
        }
        catch (e) {
            this._reportError("" + e); // sourceInfo is already contained in the AST
            return [];
        }
    };
    TemplateParseVisitor.prototype.visitText = function (ast, component) {
        var ngContentIndex = component.findNgContentIndex(TEXT_CSS_SELECTOR);
        var expr = this._parseInterpolation(ast.value, ast.sourceInfo);
        if (lang_1.isPresent(expr)) {
            return new template_ast_1.BoundTextAst(expr, ngContentIndex, ast.sourceInfo);
        }
        else {
            return new template_ast_1.TextAst(ast.value, ngContentIndex, ast.sourceInfo);
        }
    };
    TemplateParseVisitor.prototype.visitAttr = function (ast, contex) {
        return new template_ast_1.AttrAst(ast.name, ast.value, ast.sourceInfo);
    };
    TemplateParseVisitor.prototype.visitElement = function (element, component) {
        var _this = this;
        var nodeName = element.name;
        var preparsedElement = template_preparser_1.preparseElement(element);
        if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT ||
            preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE) {
            // Skipping <script> for security reasons
            // Skipping <style> as we already processed them
            // in the StyleCompiler
            return null;
        }
        if (preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET &&
            style_url_resolver_1.isStyleUrlResolvable(preparsedElement.hrefAttr)) {
            // Skipping stylesheets with either relative urls or package scheme as we already processed
            // them
            // in the StyleCompiler
            return null;
        }
        var matchableAttrs = [];
        var elementOrDirectiveProps = [];
        var vars = [];
        var events = [];
        var templateElementOrDirectiveProps = [];
        var templateVars = [];
        var templateMatchableAttrs = [];
        var hasInlineTemplates = false;
        var attrs = [];
        element.attrs.forEach(function (attr) {
            matchableAttrs.push([attr.name, attr.value]);
            var hasBinding = _this._parseAttr(attr, matchableAttrs, elementOrDirectiveProps, events, vars);
            var hasTemplateBinding = _this._parseInlineTemplateBinding(attr, templateMatchableAttrs, templateElementOrDirectiveProps, templateVars);
            if (!hasBinding && !hasTemplateBinding) {
                // don't include the bindings as attributes as well in the AST
                attrs.push(_this.visitAttr(attr, null));
            }
            if (hasTemplateBinding) {
                hasInlineTemplates = true;
            }
        });
        var isTemplateElement = nodeName == TEMPLATE_ELEMENT;
        var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
        var directives = this._createDirectiveAsts(element.name, this._parseDirectives(this.selectorMatcher, elementCssSelector), elementOrDirectiveProps, isTemplateElement ? [] : vars, element.sourceInfo);
        var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directives);
        var children = html_ast_1.htmlVisitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, Component.create(directives));
        var elementNgContentIndex = hasInlineTemplates ? null : component.findNgContentIndex(elementCssSelector);
        var parsedElement;
        if (preparsedElement.type === template_preparser_1.PreparsedElementType.NG_CONTENT) {
            parsedElement =
                new template_ast_1.NgContentAst(this.ngContentCount++, elementNgContentIndex, element.sourceInfo);
        }
        else if (isTemplateElement) {
            this._assertAllEventsPublishedByDirectives(directives, events, element.sourceInfo);
            this._assertNoComponentsNorElementBindingsOnTemplate(directives, elementProps, element.sourceInfo);
            parsedElement = new template_ast_1.EmbeddedTemplateAst(attrs, vars, directives, children, elementNgContentIndex, element.sourceInfo);
        }
        else {
            this._assertOnlyOneComponent(directives, element.sourceInfo);
            var elementExportAsVars = collection_1.ListWrapper.filter(vars, function (varAst) { return varAst.value.length === 0; });
            parsedElement =
                new template_ast_1.ElementAst(nodeName, attrs, elementProps, events, elementExportAsVars, directives, children, elementNgContentIndex, element.sourceInfo);
        }
        if (hasInlineTemplates) {
            var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
            var templateDirectives = this._createDirectiveAsts(element.name, this._parseDirectives(this.selectorMatcher, templateCssSelector), templateElementOrDirectiveProps, [], element.sourceInfo);
            var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectives);
            this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectives, templateElementProps, element.sourceInfo);
            parsedElement = new template_ast_1.EmbeddedTemplateAst([], templateVars, templateDirectives, [parsedElement], component.findNgContentIndex(templateCssSelector), element.sourceInfo);
        }
        return parsedElement;
    };
    TemplateParseVisitor.prototype._parseInlineTemplateBinding = function (attr, targetMatchableAttrs, targetProps, targetVars) {
        var templateBindingsSource = null;
        if (attr.name == TEMPLATE_ATTR) {
            templateBindingsSource = attr.value;
        }
        else if (lang_1.StringWrapper.startsWith(attr.name, TEMPLATE_ATTR_PREFIX)) {
            var key = lang_1.StringWrapper.substring(attr.name, TEMPLATE_ATTR_PREFIX.length); // remove the star
            templateBindingsSource = (attr.value.length == 0) ? key : key + ' ' + attr.value;
        }
        if (lang_1.isPresent(templateBindingsSource)) {
            var bindings = this._parseTemplateBindings(templateBindingsSource, attr.sourceInfo);
            for (var i = 0; i < bindings.length; i++) {
                var binding = bindings[i];
                var dashCaseKey = util_1.camelCaseToDashCase(binding.key);
                if (binding.keyIsVar) {
                    targetVars.push(new template_ast_1.VariableAst(util_1.dashCaseToCamelCase(binding.key), binding.name, attr.sourceInfo));
                    targetMatchableAttrs.push([dashCaseKey, binding.name]);
                }
                else if (lang_1.isPresent(binding.expression)) {
                    this._parsePropertyAst(dashCaseKey, binding.expression, attr.sourceInfo, targetMatchableAttrs, targetProps);
                }
                else {
                    targetMatchableAttrs.push([dashCaseKey, '']);
                }
            }
            return true;
        }
        return false;
    };
    TemplateParseVisitor.prototype._parseAttr = function (attr, targetMatchableAttrs, targetProps, targetEvents, targetVars) {
        var attrName = this._normalizeAttributeName(attr.name);
        var attrValue = attr.value;
        var bindParts = lang_1.RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName);
        var hasBinding = false;
        if (lang_1.isPresent(bindParts)) {
            hasBinding = true;
            if (lang_1.isPresent(bindParts[1])) {
                this._parseProperty(bindParts[5], attrValue, attr.sourceInfo, targetMatchableAttrs, targetProps);
            }
            else if (lang_1.isPresent(bindParts[2])) {
                var identifier = bindParts[5];
                this._parseVariable(identifier, attrValue, attr.sourceInfo, targetMatchableAttrs, targetVars);
            }
            else if (lang_1.isPresent(bindParts[3])) {
                this._parseEvent(bindParts[5], attrValue, attr.sourceInfo, targetMatchableAttrs, targetEvents);
            }
            else if (lang_1.isPresent(bindParts[4])) {
                this._parseProperty(bindParts[5], attrValue, attr.sourceInfo, targetMatchableAttrs, targetProps);
                this._parseAssignmentEvent(bindParts[5], attrValue, attr.sourceInfo, targetMatchableAttrs, targetEvents);
            }
            else if (lang_1.isPresent(bindParts[6])) {
                this._parseProperty(bindParts[6], attrValue, attr.sourceInfo, targetMatchableAttrs, targetProps);
                this._parseAssignmentEvent(bindParts[6], attrValue, attr.sourceInfo, targetMatchableAttrs, targetEvents);
            }
            else if (lang_1.isPresent(bindParts[7])) {
                this._parseProperty(bindParts[7], attrValue, attr.sourceInfo, targetMatchableAttrs, targetProps);
            }
            else if (lang_1.isPresent(bindParts[8])) {
                this._parseEvent(bindParts[8], attrValue, attr.sourceInfo, targetMatchableAttrs, targetEvents);
            }
        }
        else {
            hasBinding = this._parsePropertyInterpolation(attrName, attrValue, attr.sourceInfo, targetMatchableAttrs, targetProps);
        }
        if (!hasBinding) {
            this._parseLiteralAttr(attrName, attrValue, attr.sourceInfo, targetProps);
        }
        return hasBinding;
    };
    TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
        return lang_1.StringWrapper.startsWith(attrName, 'data-') ? lang_1.StringWrapper.substring(attrName, 5) :
            attrName;
    };
    TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceInfo, targetMatchableAttrs, targetVars) {
        targetVars.push(new template_ast_1.VariableAst(util_1.dashCaseToCamelCase(identifier), value, sourceInfo));
        targetMatchableAttrs.push([identifier, value]);
    };
    TemplateParseVisitor.prototype._parseProperty = function (name, expression, sourceInfo, targetMatchableAttrs, targetProps) {
        this._parsePropertyAst(name, this._parseBinding(expression, sourceInfo), sourceInfo, targetMatchableAttrs, targetProps);
    };
    TemplateParseVisitor.prototype._parsePropertyInterpolation = function (name, value, sourceInfo, targetMatchableAttrs, targetProps) {
        var expr = this._parseInterpolation(value, sourceInfo);
        if (lang_1.isPresent(expr)) {
            this._parsePropertyAst(name, expr, sourceInfo, targetMatchableAttrs, targetProps);
            return true;
        }
        return false;
    };
    TemplateParseVisitor.prototype._parsePropertyAst = function (name, ast, sourceInfo, targetMatchableAttrs, targetProps) {
        targetMatchableAttrs.push([name, ast.source]);
        targetProps.push(new BoundElementOrDirectiveProperty(name, ast, false, sourceInfo));
    };
    TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceInfo, targetMatchableAttrs, targetEvents) {
        this._parseEvent(name + "-change", expression + "=$event", sourceInfo, targetMatchableAttrs, targetEvents);
    };
    TemplateParseVisitor.prototype._parseEvent = function (name, expression, sourceInfo, targetMatchableAttrs, targetEvents) {
        // long format: 'target: eventName'
        var parts = util_1.splitAtColon(name, [null, name]);
        var target = parts[0];
        var eventName = parts[1];
        targetEvents.push(new template_ast_1.BoundEventAst(util_1.dashCaseToCamelCase(eventName), target, this._parseAction(expression, sourceInfo), sourceInfo));
        // Don't detect directives for event names for now,
        // so don't add the event name to the matchableAttrs
    };
    TemplateParseVisitor.prototype._parseLiteralAttr = function (name, value, sourceInfo, targetProps) {
        targetProps.push(new BoundElementOrDirectiveProperty(util_1.dashCaseToCamelCase(name), this._exprParser.wrapLiteralPrimitive(value, sourceInfo), true, sourceInfo));
    };
    TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
        var _this = this;
        var directives = [];
        selectorMatcher.match(elementCssSelector, function (selector, directive) { directives.push(directive); });
        // Need to sort the directives so that we get consistent results throughout,
        // as selectorMatcher uses Maps inside.
        // Also need to make components the first directive in the array
        collection_1.ListWrapper.sort(directives, function (dir1, dir2) {
            var dir1Comp = dir1.isComponent;
            var dir2Comp = dir2.isComponent;
            if (dir1Comp && !dir2Comp) {
                return -1;
            }
            else if (!dir1Comp && dir2Comp) {
                return 1;
            }
            else {
                return _this.directivesIndex.get(dir1) - _this.directivesIndex.get(dir2);
            }
        });
        return directives;
    };
    TemplateParseVisitor.prototype._createDirectiveAsts = function (elementName, directives, props, possibleExportAsVars, sourceInfo) {
        var _this = this;
        var matchedVariables = new Set();
        var directiveAsts = directives.map(function (directive) {
            var hostProperties = [];
            var hostEvents = [];
            var directiveProperties = [];
            _this._createDirectiveHostPropertyAsts(elementName, directive.hostProperties, sourceInfo, hostProperties);
            _this._createDirectiveHostEventAsts(directive.hostListeners, sourceInfo, hostEvents);
            _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
            var exportAsVars = [];
            possibleExportAsVars.forEach(function (varAst) {
                if ((varAst.value.length === 0 && directive.isComponent) ||
                    (directive.exportAs == varAst.value)) {
                    exportAsVars.push(varAst);
                    matchedVariables.add(varAst.name);
                }
            });
            return new template_ast_1.DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, exportAsVars, sourceInfo);
        });
        possibleExportAsVars.forEach(function (varAst) {
            if (varAst.value.length > 0 && !collection_1.SetWrapper.has(matchedVariables, varAst.name)) {
                _this._reportError("There is no directive with \"exportAs\" set to \"" + varAst.value + "\" at " + varAst.sourceInfo);
            }
        });
        return directiveAsts;
    };
    TemplateParseVisitor.prototype._createDirectiveHostPropertyAsts = function (elementName, hostProps, sourceInfo, targetPropertyAsts) {
        var _this = this;
        if (lang_1.isPresent(hostProps)) {
            collection_1.StringMapWrapper.forEach(hostProps, function (expression, propName) {
                var exprAst = _this._parseBinding(expression, sourceInfo);
                targetPropertyAsts.push(_this._createElementPropertyAst(elementName, propName, exprAst, sourceInfo));
            });
        }
    };
    TemplateParseVisitor.prototype._createDirectiveHostEventAsts = function (hostListeners, sourceInfo, targetEventAsts) {
        var _this = this;
        if (lang_1.isPresent(hostListeners)) {
            collection_1.StringMapWrapper.forEach(hostListeners, function (expression, propName) {
                _this._parseEvent(propName, expression, sourceInfo, [], targetEventAsts);
            });
        }
    };
    TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps) {
        if (lang_1.isPresent(directiveProperties)) {
            var boundPropsByName = new Map();
            boundProps.forEach(function (boundProp) {
                var key = util_1.dashCaseToCamelCase(boundProp.name);
                var prevValue = boundPropsByName.get(boundProp.name);
                if (lang_1.isBlank(prevValue) || prevValue.isLiteral) {
                    // give [a]="b" a higher precedence thatn a="b" on the same element
                    boundPropsByName.set(key, boundProp);
                }
            });
            collection_1.StringMapWrapper.forEach(directiveProperties, function (elProp, dirProp) {
                elProp = util_1.dashCaseToCamelCase(elProp);
                var boundProp = boundPropsByName.get(elProp);
                // Bindings are optional, so this binding only needs to be set up if an expression is given.
                if (lang_1.isPresent(boundProp)) {
                    targetBoundDirectiveProps.push(new template_ast_1.BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceInfo));
                }
            });
        }
    };
    TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, directives) {
        var _this = this;
        var boundElementProps = [];
        var boundDirectivePropsIndex = new Map();
        directives.forEach(function (directive) {
            directive.inputs.forEach(function (prop) {
                boundDirectivePropsIndex.set(prop.templateName, prop);
            });
        });
        props.forEach(function (prop) {
            if (!prop.isLiteral && lang_1.isBlank(boundDirectivePropsIndex.get(prop.name))) {
                boundElementProps.push(_this._createElementPropertyAst(elementName, prop.name, prop.expression, prop.sourceInfo));
            }
        });
        return boundElementProps;
    };
    TemplateParseVisitor.prototype._createElementPropertyAst = function (elementName, name, ast, sourceInfo) {
        var unit = null;
        var bindingType;
        var boundPropertyName;
        var parts = lang_1.StringWrapper.split(name, PROPERTY_PARTS_SEPARATOR);
        if (parts.length === 1) {
            boundPropertyName = this._schemaRegistry.getMappedPropName(util_1.dashCaseToCamelCase(parts[0]));
            bindingType = template_ast_1.PropertyBindingType.Property;
            if (!this._schemaRegistry.hasProperty(elementName, boundPropertyName)) {
                this._reportError("Can't bind to '" + boundPropertyName + "' since it isn't a known native property in " + sourceInfo);
            }
        }
        else if (parts[0] == ATTRIBUTE_PREFIX) {
            boundPropertyName = util_1.dashCaseToCamelCase(parts[1]);
            bindingType = template_ast_1.PropertyBindingType.Attribute;
        }
        else if (parts[0] == CLASS_PREFIX) {
            // keep original case!
            boundPropertyName = parts[1];
            bindingType = template_ast_1.PropertyBindingType.Class;
        }
        else if (parts[0] == STYLE_PREFIX) {
            unit = parts.length > 2 ? parts[2] : null;
            boundPropertyName = util_1.dashCaseToCamelCase(parts[1]);
            bindingType = template_ast_1.PropertyBindingType.Style;
        }
        else {
            this._reportError("Invalid property name " + name + " in " + sourceInfo);
            bindingType = null;
        }
        return new template_ast_1.BoundElementPropertyAst(boundPropertyName, bindingType, ast, unit, sourceInfo);
    };
    TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
        var componentTypeNames = [];
        directives.forEach(function (directive) {
            var typeName = directive.directive.type.name;
            if (directive.directive.isComponent) {
                componentTypeNames.push(typeName);
            }
        });
        return componentTypeNames;
    };
    TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceInfo) {
        var componentTypeNames = this._findComponentDirectiveNames(directives);
        if (componentTypeNames.length > 1) {
            this._reportError("More than one component: " + componentTypeNames.join(',') + " in " + sourceInfo);
        }
    };
    TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceInfo) {
        var _this = this;
        var componentTypeNames = this._findComponentDirectiveNames(directives);
        if (componentTypeNames.length > 0) {
            this._reportError("Components on an embedded template: " + componentTypeNames.join(',') + " in " + sourceInfo);
        }
        elementProps.forEach(function (prop) {
            _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template in " + prop.sourceInfo);
        });
    };
    TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events, sourceInfo) {
        var _this = this;
        var allDirectiveEvents = new Set();
        directives.forEach(function (directive) {
            collection_1.StringMapWrapper.forEach(directive.directive.outputs, function (eventName, _) { allDirectiveEvents.add(eventName); });
        });
        events.forEach(function (event) {
            if (lang_1.isPresent(event.target) || !collection_1.SetWrapper.has(allDirectiveEvents, event.name)) {
                _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template in " + sourceInfo);
            }
        });
    };
    return TemplateParseVisitor;
})();
var NonBindableVisitor = (function () {
    function NonBindableVisitor() {
    }
    NonBindableVisitor.prototype.visitElement = function (ast, component) {
        var preparsedElement = template_preparser_1.preparseElement(ast);
        if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT ||
            preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE ||
            preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET) {
            // Skipping <script> for security reasons
            // Skipping <style> and stylesheets as we already processed them
            // in the StyleCompiler
            return null;
        }
        var attrNameAndValues = ast.attrs.map(function (attrAst) { return [attrAst.name, attrAst.value]; });
        var selector = createElementCssSelector(ast.name, attrNameAndValues);
        var ngContentIndex = component.findNgContentIndex(selector);
        var children = html_ast_1.htmlVisitAll(this, ast.children, EMPTY_COMPONENT);
        return new template_ast_1.ElementAst(ast.name, html_ast_1.htmlVisitAll(this, ast.attrs), [], [], [], [], children, ngContentIndex, ast.sourceInfo);
    };
    NonBindableVisitor.prototype.visitAttr = function (ast, context) {
        return new template_ast_1.AttrAst(ast.name, ast.value, ast.sourceInfo);
    };
    NonBindableVisitor.prototype.visitText = function (ast, component) {
        var ngContentIndex = component.findNgContentIndex(TEXT_CSS_SELECTOR);
        return new template_ast_1.TextAst(ast.value, ngContentIndex, ast.sourceInfo);
    };
    return NonBindableVisitor;
})();
var BoundElementOrDirectiveProperty = (function () {
    function BoundElementOrDirectiveProperty(name, expression, isLiteral, sourceInfo) {
        this.name = name;
        this.expression = expression;
        this.isLiteral = isLiteral;
        this.sourceInfo = sourceInfo;
    }
    return BoundElementOrDirectiveProperty;
})();
var ParseError = (function () {
    function ParseError(message, sourceInfo) {
        this.message = message;
        this.sourceInfo = sourceInfo;
    }
    return ParseError;
})();
function splitClasses(classAttrValue) {
    return lang_1.StringWrapper.split(classAttrValue.trim(), /\s+/g);
}
exports.splitClasses = splitClasses;
var Component = (function () {
    function Component(ngContentIndexMatcher, wildcardNgContentIndex) {
        this.ngContentIndexMatcher = ngContentIndexMatcher;
        this.wildcardNgContentIndex = wildcardNgContentIndex;
    }
    Component.create = function (directives) {
        if (directives.length === 0 || !directives[0].directive.isComponent) {
            return EMPTY_COMPONENT;
        }
        var matcher = new selector_1.SelectorMatcher();
        var ngContentSelectors = directives[0].directive.template.ngContentSelectors;
        var wildcardNgContentIndex = null;
        for (var i = 0; i < ngContentSelectors.length; i++) {
            var selector = ngContentSelectors[i];
            if (lang_1.StringWrapper.equals(selector, '*')) {
                wildcardNgContentIndex = i;
            }
            else {
                matcher.addSelectables(selector_1.CssSelector.parse(ngContentSelectors[i]), i);
            }
        }
        return new Component(matcher, wildcardNgContentIndex);
    };
    Component.prototype.findNgContentIndex = function (selector) {
        var ngContentIndices = [];
        if (lang_1.isPresent(this.wildcardNgContentIndex)) {
            ngContentIndices.push(this.wildcardNgContentIndex);
        }
        this.ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });
        collection_1.ListWrapper.sort(ngContentIndices);
        return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
    };
    return Component;
})();
function createElementCssSelector(elementName, matchableAttrs) {
    var cssSelector = new selector_1.CssSelector();
    cssSelector.setElement(elementName);
    for (var i = 0; i < matchableAttrs.length; i++) {
        var attrName = matchableAttrs[i][0].toLowerCase();
        var attrValue = matchableAttrs[i][1];
        cssSelector.addAttribute(attrName, attrValue);
        if (attrName == CLASS_ATTR) {
            var classes = splitClasses(attrValue);
            classes.forEach(function (className) { return cssSelector.addClassName(className); });
        }
    }
    return cssSelector;
}
var EMPTY_COMPONENT = new Component(new selector_1.SelectorMatcher(), null);
var NON_BINDABLE_VISITOR = new NonBindableVisitor();

},{"./html_ast":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/html_ast.js","./html_parser":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/html_parser.js","./style_url_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/style_url_resolver.js","./template_ast":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_ast.js","./template_preparser":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_preparser.js","./util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/util.js","angular2/src/core/change_detection/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection.js","angular2/src/core/compiler/schema/element_schema_registry":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/schema/element_schema_registry.js","angular2/src/core/compiler/selector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/selector.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/template_preparser.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var NG_CONTENT_SELECT_ATTR = 'select';
var NG_CONTENT_ELEMENT = 'ng-content';
var LINK_ELEMENT = 'link';
var LINK_STYLE_REL_ATTR = 'rel';
var LINK_STYLE_HREF_ATTR = 'href';
var LINK_STYLE_REL_VALUE = 'stylesheet';
var STYLE_ELEMENT = 'style';
var SCRIPT_ELEMENT = 'script';
var NG_NON_BINDABLE_ATTR = 'ng-non-bindable';
function preparseElement(ast) {
    var selectAttr = null;
    var hrefAttr = null;
    var relAttr = null;
    var nonBindable = false;
    ast.attrs.forEach(function (attr) {
        if (attr.name == NG_CONTENT_SELECT_ATTR) {
            selectAttr = attr.value;
        }
        else if (attr.name == LINK_STYLE_HREF_ATTR) {
            hrefAttr = attr.value;
        }
        else if (attr.name == LINK_STYLE_REL_ATTR) {
            relAttr = attr.value;
        }
        else if (attr.name == NG_NON_BINDABLE_ATTR) {
            nonBindable = true;
        }
    });
    selectAttr = normalizeNgContentSelect(selectAttr);
    var nodeName = ast.name;
    var type = PreparsedElementType.OTHER;
    if (nodeName == NG_CONTENT_ELEMENT) {
        type = PreparsedElementType.NG_CONTENT;
    }
    else if (nodeName == STYLE_ELEMENT) {
        type = PreparsedElementType.STYLE;
    }
    else if (nodeName == SCRIPT_ELEMENT) {
        type = PreparsedElementType.SCRIPT;
    }
    else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
        type = PreparsedElementType.STYLESHEET;
    }
    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable);
}
exports.preparseElement = preparseElement;
(function (PreparsedElementType) {
    PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
    PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
    PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
    PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
    PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
})(exports.PreparsedElementType || (exports.PreparsedElementType = {}));
var PreparsedElementType = exports.PreparsedElementType;
var PreparsedElement = (function () {
    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable) {
        this.type = type;
        this.selectAttr = selectAttr;
        this.hrefAttr = hrefAttr;
        this.nonBindable = nonBindable;
    }
    return PreparsedElement;
})();
exports.PreparsedElement = PreparsedElement;
function normalizeNgContentSelect(selectAttr) {
    if (lang_1.isBlank(selectAttr) || selectAttr.length === 0) {
        return '*';
    }
    return selectAttr;
}

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/url_resolver.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
var lang_1 = require('angular2/src/core/facade/lang');
/**
 * Used by the {@link Compiler} when resolving HTML and CSS template URLs.
 *
 * This interface can be overridden by the application developer to create custom behavior.
 *
 * See {@link Compiler}
 */
var UrlResolver = (function () {
    function UrlResolver() {
    }
    /**
     * Resolves the `url` given the `baseUrl`:
     * - when the `url` is null, the `baseUrl` is returned,
     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
     * `baseUrl` and `url`,
     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
     * returned as is (ignoring the `baseUrl`)
     *
     * @param {string} baseUrl
     * @param {string} url
     * @returns {string} the resolved URL
     */
    UrlResolver.prototype.resolve = function (baseUrl, url) { return _resolveUrl(baseUrl, url); };
    UrlResolver = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], UrlResolver);
    return UrlResolver;
})();
exports.UrlResolver = UrlResolver;
// The code below is adapted from Traceur:
// https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js
/**
 * Builds a URI string from already-encoded parts.
 *
 * No encoding is performed.  Any component may be omitted as either null or
 * undefined.
 *
 * @param {?string=} opt_scheme The scheme such as 'http'.
 * @param {?string=} opt_userInfo The user name before the '@'.
 * @param {?string=} opt_domain The domain such as 'www.google.com', already
 *     URI-encoded.
 * @param {(string|null)=} opt_port The port number.
 * @param {?string=} opt_path The path, already URI-encoded.  If it is not
 *     empty, it must begin with a slash.
 * @param {?string=} opt_queryData The URI-encoded query data.
 * @param {?string=} opt_fragment The URI-encoded fragment identifier.
 * @return {string} The fully combined URI.
 */
function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
    var out = [];
    if (lang_1.isPresent(opt_scheme)) {
        out.push(opt_scheme + ':');
    }
    if (lang_1.isPresent(opt_domain)) {
        out.push('//');
        if (lang_1.isPresent(opt_userInfo)) {
            out.push(opt_userInfo + '@');
        }
        out.push(opt_domain);
        if (lang_1.isPresent(opt_port)) {
            out.push(':' + opt_port);
        }
    }
    if (lang_1.isPresent(opt_path)) {
        out.push(opt_path);
    }
    if (lang_1.isPresent(opt_queryData)) {
        out.push('?' + opt_queryData);
    }
    if (lang_1.isPresent(opt_fragment)) {
        out.push('#' + opt_fragment);
    }
    return out.join('');
}
/**
 * A regular expression for breaking a URI into its component parts.
 *
 * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
 * As the "first-match-wins" algorithm is identical to the "greedy"
 * disambiguation method used by POSIX regular expressions, it is natural and
 * commonplace to use a regular expression for parsing the potential five
 * components of a URI reference.
 *
 * The following line is the regular expression for breaking-down a
 * well-formed URI reference into its components.
 *
 * <pre>
 * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
 *  12            3  4          5       6  7        8 9
 * </pre>
 *
 * The numbers in the second line above are only to assist readability; they
 * indicate the reference points for each subexpression (i.e., each paired
 * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
 * For example, matching the above expression to
 * <pre>
 *     http://www.ics.uci.edu/pub/ietf/uri/#Related
 * </pre>
 * results in the following subexpression matches:
 * <pre>
 *    $1 = http:
 *    $2 = http
 *    $3 = //www.ics.uci.edu
 *    $4 = www.ics.uci.edu
 *    $5 = /pub/ietf/uri/
 *    $6 = <undefined>
 *    $7 = <undefined>
 *    $8 = #Related
 *    $9 = Related
 * </pre>
 * where <undefined> indicates that the component is not present, as is the
 * case for the query component in the above example. Therefore, we can
 * determine the value of the five components as
 * <pre>
 *    scheme    = $2
 *    authority = $4
 *    path      = $5
 *    query     = $7
 *    fragment  = $9
 * </pre>
 *
 * The regular expression has been modified slightly to expose the
 * userInfo, domain, and port separately from the authority.
 * The modified version yields
 * <pre>
 *    $1 = http              scheme
 *    $2 = <undefined>       userInfo -\
 *    $3 = www.ics.uci.edu   domain     | authority
 *    $4 = <undefined>       port     -/
 *    $5 = /pub/ietf/uri/    path
 *    $6 = <undefined>       query without ?
 *    $7 = Related           fragment without #
 * </pre>
 * @type {!RegExp}
 * @internal
 */
var _splitRe = lang_1.RegExpWrapper.create('^' +
    '(?:' +
    '([^:/?#.]+)' +
    // used by other URL parts such as :,
    // ?, /, #, and .
    ':)?' +
    '(?://' +
    '(?:([^/?#]*)@)?' +
    '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
    // digits, dashes, dots, percent
    // escapes, and unicode characters.
    '(?::([0-9]+))?' +
    ')?' +
    '([^?#]+)?' +
    '(?:\\?([^#]*))?' +
    '(?:#(.*))?' +
    '$');
/**
 * The index of each URI component in the return value of goog.uri.utils.split.
 * @enum {number}
 */
var _ComponentIndex;
(function (_ComponentIndex) {
    _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
    _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
    _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
    _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
    _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
    _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
    _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
})(_ComponentIndex || (_ComponentIndex = {}));
/**
 * Splits a URI into its component parts.
 *
 * Each component can be accessed via the component indices; for example:
 * <pre>
 * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
 * </pre>
 *
 * @param {string} uri The URI string to examine.
 * @return {!Array.<string|undefined>} Each component still URI-encoded.
 *     Each component that is present will contain the encoded value, whereas
 *     components that are not present will be undefined or empty, depending
 *     on the browser's regular expression implementation.  Never null, since
 *     arbitrary strings may still look like path names.
 */
function _split(uri) {
    return lang_1.RegExpWrapper.firstMatch(_splitRe, uri);
}
/**
  * Removes dot segments in given path component, as described in
  * RFC 3986, section 5.2.4.
  *
  * @param {string} path A non-empty path component.
  * @return {string} Path component with removed dot segments.
  */
function _removeDotSegments(path) {
    if (path == '/')
        return '/';
    var leadingSlash = path[0] == '/' ? '/' : '';
    var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
    var segments = path.split('/');
    var out = [];
    var up = 0;
    for (var pos = 0; pos < segments.length; pos++) {
        var segment = segments[pos];
        switch (segment) {
            case '':
            case '.':
                break;
            case '..':
                if (out.length > 0) {
                    out.pop();
                }
                else {
                    up++;
                }
                break;
            default:
                out.push(segment);
        }
    }
    if (leadingSlash == '') {
        while (up-- > 0) {
            out.unshift('..');
        }
        if (out.length === 0)
            out.push('.');
    }
    return leadingSlash + out.join('/') + trailingSlash;
}
/**
 * Takes an array of the parts from split and canonicalizes the path part
 * and then joins all the parts.
 * @param {Array.<string?>} parts
 * @return {string}
 */
function _joinAndCanonicalizePath(parts) {
    var path = parts[_ComponentIndex.Path];
    path = lang_1.isBlank(path) ? '' : _removeDotSegments(path);
    parts[_ComponentIndex.Path] = path;
    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
}
/**
 * Resolves a URL.
 * @param {string} base The URL acting as the base URL.
 * @param {string} to The URL to resolve.
 * @return {string}
 */
function _resolveUrl(base, url) {
    var parts = _split(encodeURI(url));
    var baseParts = _split(base);
    if (lang_1.isPresent(parts[_ComponentIndex.Scheme])) {
        return _joinAndCanonicalizePath(parts);
    }
    else {
        parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
    }
    for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
        if (lang_1.isBlank(parts[i])) {
            parts[i] = baseParts[i];
        }
    }
    if (parts[_ComponentIndex.Path][0] == '/') {
        return _joinAndCanonicalizePath(parts);
    }
    var path = baseParts[_ComponentIndex.Path];
    if (lang_1.isBlank(path))
        path = '/';
    var index = path.lastIndexOf('/');
    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
    parts[_ComponentIndex.Path] = path;
    return _joinAndCanonicalizePath(parts);
}

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/util.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var CAMEL_CASE_REGEXP = /([A-Z])/g;
var DASH_CASE_REGEXP = /-([a-z])/g;
var SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\$/g;
var DOUBLE_QUOTE_ESCAPE_STRING_RE = /"|\\|\n|\$/g;
exports.IS_DART = !lang_1.isJsObject({});
exports.MODULE_SUFFIX = exports.IS_DART ? '.dart' : '.js';
function camelCaseToDashCase(input) {
    return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
}
exports.camelCaseToDashCase = camelCaseToDashCase;
function dashCaseToCamelCase(input) {
    return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) { return m[1].toUpperCase(); });
}
exports.dashCaseToCamelCase = dashCaseToCamelCase;
function escapeSingleQuoteString(input) {
    if (lang_1.isBlank(input)) {
        return null;
    }
    return "'" + escapeString(input, SINGLE_QUOTE_ESCAPE_STRING_RE) + "'";
}
exports.escapeSingleQuoteString = escapeSingleQuoteString;
function escapeDoubleQuoteString(input) {
    if (lang_1.isBlank(input)) {
        return null;
    }
    return "\"" + escapeString(input, DOUBLE_QUOTE_ESCAPE_STRING_RE) + "\"";
}
exports.escapeDoubleQuoteString = escapeDoubleQuoteString;
function escapeString(input, re) {
    return lang_1.StringWrapper.replaceAllMapped(input, re, function (match) {
        if (match[0] == '$') {
            return exports.IS_DART ? '\\$' : '$';
        }
        else if (match[0] == '\n') {
            return '\\n';
        }
        else {
            return "\\" + match[0];
        }
    });
}
function codeGenExportVariable(name, isConst) {
    if (isConst === void 0) { isConst = false; }
    var declaration = exports.IS_DART && isConst ? "const " + name : "var " + name;
    return exports.IS_DART ? declaration + " = " : declaration + " = exports['" + name + "'] = ";
}
exports.codeGenExportVariable = codeGenExportVariable;
function codeGenConcatArray(expression) {
    return (exports.IS_DART ? '..addAll' : '.concat') + "(" + expression + ")";
}
exports.codeGenConcatArray = codeGenConcatArray;
function codeGenMapArray(argNames, callback) {
    if (exports.IS_DART) {
        return ".map( (" + argNames.join(',') + ") => " + callback + " ).toList()";
    }
    else {
        return ".map(function(" + argNames.join(',') + ") { return " + callback + "; })";
    }
}
exports.codeGenMapArray = codeGenMapArray;
function codeGenReplaceAll(pattern, expression) {
    if (exports.IS_DART) {
        return ".replaceAll('" + pattern + "', " + expression + ")";
    }
    else {
        return ".replace(/" + pattern + "/g, " + expression + ")";
    }
}
exports.codeGenReplaceAll = codeGenReplaceAll;
function codeGenValueFn(params, value, fnName) {
    if (fnName === void 0) { fnName = ''; }
    if (exports.IS_DART) {
        return fnName + "(" + params.join(',') + ") => " + value;
    }
    else {
        return "function " + fnName + "(" + params.join(',') + ") { return " + value + "; }";
    }
}
exports.codeGenValueFn = codeGenValueFn;
function codeGenToString(expr) {
    if (exports.IS_DART) {
        return "'${" + expr + "}'";
    }
    else {
        // JS automatically convets to string...
        return expr;
    }
}
exports.codeGenToString = codeGenToString;
function splitAtColon(input, defaultValues) {
    var parts = lang_1.StringWrapper.split(input.trim(), /\s*:\s*/g);
    if (parts.length > 1) {
        return parts;
    }
    else {
        return defaultValues;
    }
}
exports.splitAtColon = splitAtColon;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/xhr.js":[function(require,module,exports){
'use strict';var XHR = (function () {
    function XHR() {
    }
    XHR.prototype.get = function (url) { return null; };
    return XHR;
})();
exports.XHR = XHR;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/xhr_impl.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var promise_1 = require('angular2/src/core/facade/promise');
var lang_1 = require('angular2/src/core/facade/lang');
var xhr_1 = require('./xhr');
var XHRImpl = (function (_super) {
    __extends(XHRImpl, _super);
    function XHRImpl() {
        _super.apply(this, arguments);
    }
    XHRImpl.prototype.get = function (url) {
        var completer = promise_1.PromiseWrapper.completer();
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'text';
        xhr.onload = function () {
            // responseText is the old-school way of retrieving response (supported by IE8 & 9)
            // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
            var response = lang_1.isPresent(xhr.response) ? xhr.response : xhr.responseText;
            // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
            var status = xhr.status === 1223 ? 204 : xhr.status;
            // fix status code when it is 0 (0 status is undocumented).
            // Occurs when accessing file resources or on Android 4.1 stock browser
            // while retrieving files from application cache.
            if (status === 0) {
                status = response ? 200 : 0;
            }
            if (200 <= status && status <= 300) {
                completer.resolve(response);
            }
            else {
                completer.reject("Failed to load " + url, null);
            }
        };
        xhr.onerror = function () { completer.reject("Failed to load " + url, null); };
        xhr.send();
        return completer.promise;
    };
    return XHRImpl;
})(xhr_1.XHR);
exports.XHRImpl = XHRImpl;

},{"./xhr":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/xhr.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/facade/promise":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/promise.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/debug.js":[function(require,module,exports){
'use strict';var debug_element_1 = require('./debug/debug_element');
exports.DebugElement = debug_element_1.DebugElement;
exports.asNativeElements = debug_element_1.asNativeElements;
exports.By = debug_element_1.By;
exports.Scope = debug_element_1.Scope;
exports.inspectElement = debug_element_1.inspectElement;
var debug_element_view_listener_1 = require('./debug/debug_element_view_listener');
exports.inspectNativeElement = debug_element_view_listener_1.inspectNativeElement;
exports.ELEMENT_PROBE_PROVIDERS = debug_element_view_listener_1.ELEMENT_PROBE_PROVIDERS;
exports.ELEMENT_PROBE_BINDINGS = debug_element_view_listener_1.ELEMENT_PROBE_BINDINGS;

},{"./debug/debug_element":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/debug/debug_element.js","./debug/debug_element_view_listener":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/debug/debug_element_view_listener.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/debug/debug_element.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = require('angular2/src/core/facade/lang');
var collection_1 = require('angular2/src/core/facade/collection');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var view_ref_1 = require('angular2/src/core/linker/view_ref');
/**
 * A DebugElement contains information from the Angular compiler about an
 * element and provides access to the corresponding ElementInjector and
 * underlying DOM Element, as well as a way to query for children.
 */
var DebugElement = (function () {
    function DebugElement() {
    }
    Object.defineProperty(DebugElement.prototype, "componentInstance", {
        get: function () { return exceptions_1.unimplemented(); },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(DebugElement.prototype, "nativeElement", {
        get: function () { return exceptions_1.unimplemented(); },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(DebugElement.prototype, "elementRef", {
        get: function () { return exceptions_1.unimplemented(); },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(DebugElement.prototype, "children", {
        /**
         * Get child DebugElements from within the Light DOM.
         *
         * @return {DebugElement[]}
         */
        get: function () { return exceptions_1.unimplemented(); },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(DebugElement.prototype, "componentViewChildren", {
        /**
         * Get the root DebugElement children of a component. Returns an empty
         * list if the current DebugElement is not a component root.
         *
         * @return {DebugElement[]}
         */
        get: function () { return exceptions_1.unimplemented(); },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * Return the first descendant TestElement matching the given predicate
     * and scope.
     *
     * @param {Function: boolean} predicate
     * @param {Scope} scope
     *
     * @return {DebugElement}
     */
    DebugElement.prototype.query = function (predicate, scope) {
        if (scope === void 0) { scope = Scope.all; }
        var results = this.queryAll(predicate, scope);
        return results.length > 0 ? results[0] : null;
    };
    /**
     * Return descendant TestElememts matching the given predicate
     * and scope.
     *
     * @param {Function: boolean} predicate
     * @param {Scope} scope
     *
     * @return {DebugElement[]}
     */
    DebugElement.prototype.queryAll = function (predicate, scope) {
        if (scope === void 0) { scope = Scope.all; }
        var elementsInScope = scope(this);
        return collection_1.ListWrapper.filter(elementsInScope, predicate);
    };
    return DebugElement;
})();
exports.DebugElement = DebugElement;
var DebugElement_ = (function (_super) {
    __extends(DebugElement_, _super);
    function DebugElement_(_parentView, _boundElementIndex) {
        _super.call(this);
        this._parentView = _parentView;
        this._boundElementIndex = _boundElementIndex;
        this._elementInjector = this._parentView.elementInjectors[this._boundElementIndex];
    }
    Object.defineProperty(DebugElement_.prototype, "componentInstance", {
        get: function () {
            if (!lang_1.isPresent(this._elementInjector)) {
                return null;
            }
            return this._elementInjector.getComponent();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugElement_.prototype, "nativeElement", {
        get: function () { return this.elementRef.nativeElement; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugElement_.prototype, "elementRef", {
        get: function () { return this._parentView.elementRefs[this._boundElementIndex]; },
        enumerable: true,
        configurable: true
    });
    DebugElement_.prototype.getDirectiveInstance = function (directiveIndex) {
        return this._elementInjector.getDirectiveAtIndex(directiveIndex);
    };
    Object.defineProperty(DebugElement_.prototype, "children", {
        get: function () {
            return this._getChildElements(this._parentView, this._boundElementIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugElement_.prototype, "componentViewChildren", {
        get: function () {
            var shadowView = this._parentView.getNestedView(this._boundElementIndex);
            if (!lang_1.isPresent(shadowView)) {
                // The current element is not a component.
                return [];
            }
            return this._getChildElements(shadowView, null);
        },
        enumerable: true,
        configurable: true
    });
    DebugElement_.prototype.triggerEventHandler = function (eventName, eventObj) {
        this._parentView.triggerEventHandlers(eventName, eventObj, this._boundElementIndex);
    };
    DebugElement_.prototype.hasDirective = function (type) {
        if (!lang_1.isPresent(this._elementInjector)) {
            return false;
        }
        return this._elementInjector.hasDirective(type);
    };
    DebugElement_.prototype.inject = function (type) {
        if (!lang_1.isPresent(this._elementInjector)) {
            return null;
        }
        return this._elementInjector.get(type);
    };
    DebugElement_.prototype.getLocal = function (name) { return this._parentView.locals.get(name); };
    /** @internal */
    DebugElement_.prototype._getChildElements = function (view, parentBoundElementIndex) {
        var _this = this;
        var els = [];
        var parentElementBinder = null;
        if (lang_1.isPresent(parentBoundElementIndex)) {
            parentElementBinder = view.proto.elementBinders[parentBoundElementIndex - view.elementOffset];
        }
        for (var i = 0; i < view.proto.elementBinders.length; ++i) {
            var binder = view.proto.elementBinders[i];
            if (binder.parent == parentElementBinder) {
                els.push(new DebugElement_(view, view.elementOffset + i));
                var views = view.viewContainers[view.elementOffset + i];
                if (lang_1.isPresent(views)) {
                    views.views.forEach(function (nextView) { els = els.concat(_this._getChildElements(nextView, null)); });
                }
            }
        }
        return els;
    };
    return DebugElement_;
})(DebugElement);
exports.DebugElement_ = DebugElement_;
/**
 * Returns a DebugElement for a ElementRef.
 *
 * @param {ElementRef}: elementRef
 * @return {DebugElement}
 */
function inspectElement(elementRef) {
    return new DebugElement_(view_ref_1.internalView(elementRef.parentView), elementRef.boundElementIndex);
}
exports.inspectElement = inspectElement;
function asNativeElements(arr) {
    return arr.map(function (debugEl) { return debugEl.nativeElement; });
}
exports.asNativeElements = asNativeElements;
var Scope = (function () {
    function Scope() {
    }
    Scope.all = function (debugElement) {
        var scope = [];
        scope.push(debugElement);
        debugElement.children.forEach(function (child) { return scope = scope.concat(Scope.all(child)); });
        debugElement.componentViewChildren.forEach(function (child) { return scope = scope.concat(Scope.all(child)); });
        return scope;
    };
    Scope.light = function (debugElement) {
        var scope = [];
        debugElement.children.forEach(function (child) {
            scope.push(child);
            scope = scope.concat(Scope.light(child));
        });
        return scope;
    };
    Scope.view = function (debugElement) {
        var scope = [];
        debugElement.componentViewChildren.forEach(function (child) {
            scope.push(child);
            scope = scope.concat(Scope.light(child));
        });
        return scope;
    };
    return Scope;
})();
exports.Scope = Scope;
var By = (function () {
    function By() {
    }
    By.all = function () { return function (debugElement) { return true; }; };
    By.css = function (selector) {
        return function (debugElement) {
            return lang_1.isPresent(debugElement.nativeElement) ?
                dom_adapter_1.DOM.elementMatches(debugElement.nativeElement, selector) :
                false;
        };
    };
    By.directive = function (type) {
        return function (debugElement) { return debugElement.hasDirective(type); };
    };
    return By;
})();
exports.By = By;

},{"angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker/view_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_ref.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/debug/debug_element_view_listener.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var collection_1 = require('angular2/src/core/facade/collection');
var di_1 = require('angular2/src/core/di');
var view_listener_1 = require('angular2/src/core/linker/view_listener');
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var api_1 = require('angular2/src/core/render/api');
var debug_element_1 = require('./debug_element');
var NG_ID_PROPERTY = 'ngid';
var INSPECT_GLOBAL_NAME = 'ng.probe';
var NG_ID_SEPARATOR = '#';
// Need to keep the views in a global Map so that multiple angular apps are supported
var _allIdsByView = new collection_1.Map();
var _allViewsById = new collection_1.Map();
var _nextId = 0;
function _setElementId(element, indices) {
    if (lang_1.isPresent(element)) {
        dom_adapter_1.DOM.setData(element, NG_ID_PROPERTY, indices.join(NG_ID_SEPARATOR));
    }
}
function _getElementId(element) {
    var elId = dom_adapter_1.DOM.getData(element, NG_ID_PROPERTY);
    if (lang_1.isPresent(elId)) {
        return elId.split(NG_ID_SEPARATOR).map(function (partStr) { return lang_1.NumberWrapper.parseInt(partStr, 10); });
    }
    else {
        return null;
    }
}
function inspectNativeElement(element) {
    var elId = _getElementId(element);
    if (lang_1.isPresent(elId)) {
        var view = _allViewsById.get(elId[0]);
        if (lang_1.isPresent(view)) {
            return new debug_element_1.DebugElement_(view, elId[1]);
        }
    }
    return null;
}
exports.inspectNativeElement = inspectNativeElement;
var DebugElementViewListener = (function () {
    function DebugElementViewListener(_renderer) {
        this._renderer = _renderer;
        dom_adapter_1.DOM.setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
    }
    DebugElementViewListener.prototype.viewCreated = function (view) {
        var viewId = _nextId++;
        _allViewsById.set(viewId, view);
        _allIdsByView.set(view, viewId);
        for (var i = 0; i < view.elementRefs.length; i++) {
            var el = view.elementRefs[i];
            _setElementId(this._renderer.getNativeElementSync(el), [viewId, i]);
        }
    };
    DebugElementViewListener.prototype.viewDestroyed = function (view) {
        var viewId = _allIdsByView.get(view);
        _allIdsByView.delete(view);
        _allViewsById.delete(viewId);
    };
    DebugElementViewListener = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [api_1.Renderer])
    ], DebugElementViewListener);
    return DebugElementViewListener;
})();
exports.DebugElementViewListener = DebugElementViewListener;
exports.ELEMENT_PROBE_PROVIDERS = lang_1.CONST_EXPR([
    DebugElementViewListener,
    lang_1.CONST_EXPR(new di_1.Provider(view_listener_1.AppViewListener, { useExisting: DebugElementViewListener })),
]);
exports.ELEMENT_PROBE_BINDINGS = exports.ELEMENT_PROBE_PROVIDERS;

},{"./debug_element":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/debug/debug_element.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker/view_listener":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_listener.js","angular2/src/core/render/api":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/api.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js":[function(require,module,exports){
'use strict';/**
 * @module
 * @description
 * The `di` module provides dependency injection container services.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var metadata_1 = require('./di/metadata');
exports.InjectMetadata = metadata_1.InjectMetadata;
exports.OptionalMetadata = metadata_1.OptionalMetadata;
exports.InjectableMetadata = metadata_1.InjectableMetadata;
exports.SelfMetadata = metadata_1.SelfMetadata;
exports.HostMetadata = metadata_1.HostMetadata;
exports.SkipSelfMetadata = metadata_1.SkipSelfMetadata;
exports.DependencyMetadata = metadata_1.DependencyMetadata;
// we have to reexport * because Dart and TS export two different sets of types
__export(require('./di/decorators'));
var forward_ref_1 = require('./di/forward_ref');
exports.forwardRef = forward_ref_1.forwardRef;
exports.resolveForwardRef = forward_ref_1.resolveForwardRef;
var injector_1 = require('./di/injector');
exports.Injector = injector_1.Injector;
var provider_1 = require('./di/provider');
exports.Binding = provider_1.Binding;
exports.ProviderBuilder = provider_1.ProviderBuilder;
exports.ResolvedFactory = provider_1.ResolvedFactory;
exports.Dependency = provider_1.Dependency;
exports.bind = provider_1.bind;
exports.Provider = provider_1.Provider;
exports.provide = provider_1.provide;
var key_1 = require('./di/key');
exports.Key = key_1.Key;
exports.TypeLiteral = key_1.TypeLiteral;
var exceptions_1 = require('./di/exceptions');
exports.NoProviderError = exceptions_1.NoProviderError;
exports.AbstractProviderError = exceptions_1.AbstractProviderError;
exports.CyclicDependencyError = exceptions_1.CyclicDependencyError;
exports.InstantiationError = exceptions_1.InstantiationError;
exports.InvalidProviderError = exceptions_1.InvalidProviderError;
exports.NoAnnotationError = exceptions_1.NoAnnotationError;
exports.OutOfBoundsError = exceptions_1.OutOfBoundsError;
var opaque_token_1 = require('./di/opaque_token');
exports.OpaqueToken = opaque_token_1.OpaqueToken;

},{"./di/decorators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/decorators.js","./di/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/exceptions.js","./di/forward_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/forward_ref.js","./di/injector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/injector.js","./di/key":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/key.js","./di/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/metadata.js","./di/opaque_token":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/opaque_token.js","./di/provider":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/provider.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/decorators.js":[function(require,module,exports){
'use strict';var metadata_1 = require('./metadata');
var decorators_1 = require('../util/decorators');
/**
 * Factory for creating {@link InjectMetadata}.
 */
exports.Inject = decorators_1.makeParamDecorator(metadata_1.InjectMetadata);
/**
 * Factory for creating {@link OptionalMetadata}.
 */
exports.Optional = decorators_1.makeParamDecorator(metadata_1.OptionalMetadata);
/**
 * Factory for creating {@link InjectableMetadata}.
 */
exports.Injectable = decorators_1.makeDecorator(metadata_1.InjectableMetadata);
/**
 * Factory for creating {@link SelfMetadata}.
 */
exports.Self = decorators_1.makeParamDecorator(metadata_1.SelfMetadata);
/**
 * Factory for creating {@link HostMetadata}.
 */
exports.Host = decorators_1.makeParamDecorator(metadata_1.HostMetadata);
/**
 * Factory for creating {@link SkipSelfMetadata}.
 */
exports.SkipSelf = decorators_1.makeParamDecorator(metadata_1.SkipSelfMetadata);

},{"../util/decorators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/util/decorators.js","./metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/exceptions.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
function findFirstClosedCycle(keys) {
    var res = [];
    for (var i = 0; i < keys.length; ++i) {
        if (collection_1.ListWrapper.contains(res, keys[i])) {
            res.push(keys[i]);
            return res;
        }
        else {
            res.push(keys[i]);
        }
    }
    return res;
}
function constructResolvingPath(keys) {
    if (keys.length > 1) {
        var reversed = findFirstClosedCycle(collection_1.ListWrapper.reversed(keys));
        var tokenStrs = reversed.map(function (k) { return lang_1.stringify(k.token); });
        return " (" + tokenStrs.join(' -> ') + ")";
    }
    else {
        return "";
    }
}
/**
 * Base class for all errors arising from misconfigured providers.
 */
var AbstractProviderError = (function (_super) {
    __extends(AbstractProviderError, _super);
    function AbstractProviderError(injector, key, constructResolvingMessage) {
        _super.call(this, "DI Exception");
        this.keys = [key];
        this.injectors = [injector];
        this.constructResolvingMessage = constructResolvingMessage;
        this.message = this.constructResolvingMessage(this.keys);
    }
    AbstractProviderError.prototype.addKey = function (injector, key) {
        this.injectors.push(injector);
        this.keys.push(key);
        this.message = this.constructResolvingMessage(this.keys);
    };
    Object.defineProperty(AbstractProviderError.prototype, "context", {
        get: function () { return this.injectors[this.injectors.length - 1].debugContext(); },
        enumerable: true,
        configurable: true
    });
    return AbstractProviderError;
})(exceptions_1.BaseException);
exports.AbstractProviderError = AbstractProviderError;
/**
 * Thrown when trying to retrieve a dependency by `Key` from {@link Injector}, but the
 * {@link Injector} does not have a {@link Provider} for {@link Key}.
 *
 * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor(b:B) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 */
var NoProviderError = (function (_super) {
    __extends(NoProviderError, _super);
    function NoProviderError(injector, key) {
        _super.call(this, injector, key, function (keys) {
            var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
            return "No provider for " + first + "!" + constructResolvingPath(keys);
        });
    }
    return NoProviderError;
})(AbstractProviderError);
exports.NoProviderError = NoProviderError;
/**
 * Thrown when dependencies form a cycle.
 *
 * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
 *
 * ```typescript
 * var injector = Injector.resolveAndCreate([
 *   provide("one", {useFactory: (two) => "two", deps: [[new Inject("two")]]}),
 *   provide("two", {useFactory: (one) => "one", deps: [[new Inject("one")]]})
 * ]);
 *
 * expect(() => injector.get("one")).toThrowError();
 * ```
 *
 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
 */
var CyclicDependencyError = (function (_super) {
    __extends(CyclicDependencyError, _super);
    function CyclicDependencyError(injector, key) {
        _super.call(this, injector, key, function (keys) {
            return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
        });
    }
    return CyclicDependencyError;
})(AbstractProviderError);
exports.CyclicDependencyError = CyclicDependencyError;
/**
 * Thrown when a constructing type returns with an Error.
 *
 * The `InstantiationError` class contains the original error plus the dependency graph which caused
 * this object to be instantiated.
 *
 * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor() {
 *     throw new Error('message');
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([A]);

 * try {
 *   injector.get(A);
 * } catch (e) {
 *   expect(e instanceof InstantiationError).toBe(true);
 *   expect(e.originalException.message).toEqual("message");
 *   expect(e.originalStack).toBeDefined();
 * }
 * ```
 */
var InstantiationError = (function (_super) {
    __extends(InstantiationError, _super);
    function InstantiationError(injector, originalException, originalStack, key) {
        _super.call(this, "DI Exception", originalException, originalStack, null);
        this.keys = [key];
        this.injectors = [injector];
    }
    InstantiationError.prototype.addKey = function (injector, key) {
        this.injectors.push(injector);
        this.keys.push(key);
    };
    Object.defineProperty(InstantiationError.prototype, "wrapperMessage", {
        get: function () {
            var first = lang_1.stringify(collection_1.ListWrapper.first(this.keys).token);
            return "Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InstantiationError.prototype, "causeKey", {
        get: function () { return this.keys[0]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InstantiationError.prototype, "context", {
        get: function () { return this.injectors[this.injectors.length - 1].debugContext(); },
        enumerable: true,
        configurable: true
    });
    return InstantiationError;
})(exceptions_1.WrappedException);
exports.InstantiationError = InstantiationError;
/**
 * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
 * creation.
 *
 * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
 * ```
 */
var InvalidProviderError = (function (_super) {
    __extends(InvalidProviderError, _super);
    function InvalidProviderError(provider) {
        _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " +
            provider.toString());
    }
    return InvalidProviderError;
})(exceptions_1.BaseException);
exports.InvalidProviderError = InvalidProviderError;
/**
 * Thrown when the class has no annotation information.
 *
 * Lack of annotation information prevents the {@link Injector} from determining which dependencies
 * need to be injected into the constructor.
 *
 * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor(b) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 *
 * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
 *
 * ```typescript
 * class B {}
 *
 * class A {
 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
 * }
 *
 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
 * ```
 */
var NoAnnotationError = (function (_super) {
    __extends(NoAnnotationError, _super);
    function NoAnnotationError(typeOrFunc, params) {
        _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
    }
    NoAnnotationError._genMessage = function (typeOrFunc, params) {
        var signature = [];
        for (var i = 0, ii = params.length; i < ii; i++) {
            var parameter = params[i];
            if (lang_1.isBlank(parameter) || parameter.length == 0) {
                signature.push('?');
            }
            else {
                signature.push(parameter.map(lang_1.stringify).join(' '));
            }
        }
        return "Cannot resolve all parameters for " + lang_1.stringify(typeOrFunc) + "(" +
            signature.join(', ') + "). " + 'Make sure they all have valid type or annotations.';
    };
    return NoAnnotationError;
})(exceptions_1.BaseException);
exports.NoAnnotationError = NoAnnotationError;
/**
 * Thrown when getting an object by index.
 *
 * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
 *
 * ```typescript
 * class A {}
 *
 * var injector = Injector.resolveAndCreate([A]);
 *
 * expect(() => injector.getAt(100)).toThrowError();
 * ```
 */
var OutOfBoundsError = (function (_super) {
    __extends(OutOfBoundsError, _super);
    function OutOfBoundsError(index) {
        _super.call(this, "Index " + index + " is out-of-bounds.");
    }
    return OutOfBoundsError;
})(exceptions_1.BaseException);
exports.OutOfBoundsError = OutOfBoundsError;
// TODO: add a working example after alpha38 is released
/**
 * Thrown when a multi provider and a regular provider are bound to the same token.
 *
 * ### Example
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate([
 *   new Provider("Strings", {useValue: "string1", multi: true}),
 *   new Provider("Strings", {useValue: "string2", multi: false})
 * ])).toThrowError();
 * ```
 */
var MixingMultiProvidersWithRegularProvidersError = (function (_super) {
    __extends(MixingMultiProvidersWithRegularProvidersError, _super);
    function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
        _super.call(this, "Cannot mix multi providers and regular providers, got: " + provider1.toString() + " " +
            provider2.toString());
    }
    return MixingMultiProvidersWithRegularProvidersError;
})(exceptions_1.BaseException);
exports.MixingMultiProvidersWithRegularProvidersError = MixingMultiProvidersWithRegularProvidersError;

},{"angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/forward_ref.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
/**
 * Allows to refer to references which are not yet defined.
 *
 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
 * DI is declared,
 * but not yet defined. It is also used when the `token` which we use when creating a query is not
 * yet defined.
 *
 * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
 *
 * ```typescript
 * class Door {
 *   lock: Lock;
 *   constructor(@Inject(forwardRef(() => Lock)) lock:Lock) {
 *     this.lock = lock;
 *   }
 * }
 *
 * // Only at this point Lock is defined.
 * class Lock {
 * }
 *
 * var injector = Injector.resolveAndCreate([Door, Lock]);
 * var door = injector.get(Door);
 * expect(door instanceof Door).toBe(true);
 * expect(door.lock instanceof Lock).toBe(true);
 * ```
 */
function forwardRef(forwardRefFn) {
    forwardRefFn.__forward_ref__ = forwardRef;
    forwardRefFn.toString = function () { return lang_1.stringify(this()); };
    return forwardRefFn;
}
exports.forwardRef = forwardRef;
/**
 * Lazily retrieves the reference value from a forwardRef.
 *
 * Acts as the identity function when given a non-forward-ref value.
 *
 * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
 *
 * ```typescript
 * var ref = forwardRef(() => "refValue");
 * expect(resolveForwardRef(ref)).toEqual("refValue");
 * expect(resolveForwardRef("regularValue")).toEqual("regularValue");
 * ```
 *
 * See: {@link forwardRef}
 */
function resolveForwardRef(type) {
    if (lang_1.isFunction(type) && type.hasOwnProperty('__forward_ref__') &&
        type.__forward_ref__ === forwardRef) {
        return type();
    }
    else {
        return type;
    }
}
exports.resolveForwardRef = resolveForwardRef;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/injector.js":[function(require,module,exports){
'use strict';var collection_1 = require('angular2/src/core/facade/collection');
var provider_1 = require('./provider');
var exceptions_1 = require('./exceptions');
var lang_1 = require('angular2/src/core/facade/lang');
var key_1 = require('./key');
var metadata_1 = require('./metadata');
// Threshold for the dynamic version
var _MAX_CONSTRUCTION_COUNTER = 10;
exports.UNDEFINED = lang_1.CONST_EXPR(new Object());
/**
 * Visibility of a {@link Provider}.
 */
(function (Visibility) {
    /**
     * A `Public` {@link Provider} is only visible to regular (as opposed to host) child injectors.
     */
    Visibility[Visibility["Public"] = 0] = "Public";
    /**
     * A `Private` {@link Provider} is only visible to host (as opposed to regular) child injectors.
     */
    Visibility[Visibility["Private"] = 1] = "Private";
    /**
     * A `PublicAndPrivate` {@link Provider} is visible to both host and regular child injectors.
     */
    Visibility[Visibility["PublicAndPrivate"] = 2] = "PublicAndPrivate";
})(exports.Visibility || (exports.Visibility = {}));
var Visibility = exports.Visibility;
function canSee(src, dst) {
    return (src === dst) ||
        (dst === Visibility.PublicAndPrivate || src === Visibility.PublicAndPrivate);
}
var ProtoInjectorInlineStrategy = (function () {
    function ProtoInjectorInlineStrategy(protoEI, bwv) {
        this.provider0 = null;
        this.provider1 = null;
        this.provider2 = null;
        this.provider3 = null;
        this.provider4 = null;
        this.provider5 = null;
        this.provider6 = null;
        this.provider7 = null;
        this.provider8 = null;
        this.provider9 = null;
        this.keyId0 = null;
        this.keyId1 = null;
        this.keyId2 = null;
        this.keyId3 = null;
        this.keyId4 = null;
        this.keyId5 = null;
        this.keyId6 = null;
        this.keyId7 = null;
        this.keyId8 = null;
        this.keyId9 = null;
        this.visibility0 = null;
        this.visibility1 = null;
        this.visibility2 = null;
        this.visibility3 = null;
        this.visibility4 = null;
        this.visibility5 = null;
        this.visibility6 = null;
        this.visibility7 = null;
        this.visibility8 = null;
        this.visibility9 = null;
        var length = bwv.length;
        if (length > 0) {
            this.provider0 = bwv[0].provider;
            this.keyId0 = bwv[0].getKeyId();
            this.visibility0 = bwv[0].visibility;
        }
        if (length > 1) {
            this.provider1 = bwv[1].provider;
            this.keyId1 = bwv[1].getKeyId();
            this.visibility1 = bwv[1].visibility;
        }
        if (length > 2) {
            this.provider2 = bwv[2].provider;
            this.keyId2 = bwv[2].getKeyId();
            this.visibility2 = bwv[2].visibility;
        }
        if (length > 3) {
            this.provider3 = bwv[3].provider;
            this.keyId3 = bwv[3].getKeyId();
            this.visibility3 = bwv[3].visibility;
        }
        if (length > 4) {
            this.provider4 = bwv[4].provider;
            this.keyId4 = bwv[4].getKeyId();
            this.visibility4 = bwv[4].visibility;
        }
        if (length > 5) {
            this.provider5 = bwv[5].provider;
            this.keyId5 = bwv[5].getKeyId();
            this.visibility5 = bwv[5].visibility;
        }
        if (length > 6) {
            this.provider6 = bwv[6].provider;
            this.keyId6 = bwv[6].getKeyId();
            this.visibility6 = bwv[6].visibility;
        }
        if (length > 7) {
            this.provider7 = bwv[7].provider;
            this.keyId7 = bwv[7].getKeyId();
            this.visibility7 = bwv[7].visibility;
        }
        if (length > 8) {
            this.provider8 = bwv[8].provider;
            this.keyId8 = bwv[8].getKeyId();
            this.visibility8 = bwv[8].visibility;
        }
        if (length > 9) {
            this.provider9 = bwv[9].provider;
            this.keyId9 = bwv[9].getKeyId();
            this.visibility9 = bwv[9].visibility;
        }
    }
    ProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function (index) {
        if (index == 0)
            return this.provider0;
        if (index == 1)
            return this.provider1;
        if (index == 2)
            return this.provider2;
        if (index == 3)
            return this.provider3;
        if (index == 4)
            return this.provider4;
        if (index == 5)
            return this.provider5;
        if (index == 6)
            return this.provider6;
        if (index == 7)
            return this.provider7;
        if (index == 8)
            return this.provider8;
        if (index == 9)
            return this.provider9;
        throw new exceptions_1.OutOfBoundsError(index);
    };
    ProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) {
        return new InjectorInlineStrategy(injector, this);
    };
    return ProtoInjectorInlineStrategy;
})();
exports.ProtoInjectorInlineStrategy = ProtoInjectorInlineStrategy;
var ProtoInjectorDynamicStrategy = (function () {
    function ProtoInjectorDynamicStrategy(protoInj, bwv) {
        var len = bwv.length;
        this.providers = collection_1.ListWrapper.createFixedSize(len);
        this.keyIds = collection_1.ListWrapper.createFixedSize(len);
        this.visibilities = collection_1.ListWrapper.createFixedSize(len);
        for (var i = 0; i < len; i++) {
            this.providers[i] = bwv[i].provider;
            this.keyIds[i] = bwv[i].getKeyId();
            this.visibilities[i] = bwv[i].visibility;
        }
    }
    ProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function (index) {
        if (index < 0 || index >= this.providers.length) {
            throw new exceptions_1.OutOfBoundsError(index);
        }
        return this.providers[index];
    };
    ProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) {
        return new InjectorDynamicStrategy(this, ei);
    };
    return ProtoInjectorDynamicStrategy;
})();
exports.ProtoInjectorDynamicStrategy = ProtoInjectorDynamicStrategy;
var ProtoInjector = (function () {
    function ProtoInjector(bwv) {
        this.numberOfProviders = bwv.length;
        this._strategy = bwv.length > _MAX_CONSTRUCTION_COUNTER ?
            new ProtoInjectorDynamicStrategy(this, bwv) :
            new ProtoInjectorInlineStrategy(this, bwv);
    }
    ProtoInjector.prototype.getProviderAtIndex = function (index) { return this._strategy.getProviderAtIndex(index); };
    return ProtoInjector;
})();
exports.ProtoInjector = ProtoInjector;
var InjectorInlineStrategy = (function () {
    function InjectorInlineStrategy(injector, protoStrategy) {
        this.injector = injector;
        this.protoStrategy = protoStrategy;
        this.obj0 = exports.UNDEFINED;
        this.obj1 = exports.UNDEFINED;
        this.obj2 = exports.UNDEFINED;
        this.obj3 = exports.UNDEFINED;
        this.obj4 = exports.UNDEFINED;
        this.obj5 = exports.UNDEFINED;
        this.obj6 = exports.UNDEFINED;
        this.obj7 = exports.UNDEFINED;
        this.obj8 = exports.UNDEFINED;
        this.obj9 = exports.UNDEFINED;
    }
    InjectorInlineStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
    InjectorInlineStrategy.prototype.instantiateProvider = function (provider, visibility) {
        return this.injector._new(provider, visibility);
    };
    InjectorInlineStrategy.prototype.attach = function (parent, isHost) {
        var inj = this.injector;
        inj._parent = parent;
        inj._isHost = isHost;
    };
    InjectorInlineStrategy.prototype.getObjByKeyId = function (keyId, visibility) {
        var p = this.protoStrategy;
        var inj = this.injector;
        if (p.keyId0 === keyId && canSee(p.visibility0, visibility)) {
            if (this.obj0 === exports.UNDEFINED) {
                this.obj0 = inj._new(p.provider0, p.visibility0);
            }
            return this.obj0;
        }
        if (p.keyId1 === keyId && canSee(p.visibility1, visibility)) {
            if (this.obj1 === exports.UNDEFINED) {
                this.obj1 = inj._new(p.provider1, p.visibility1);
            }
            return this.obj1;
        }
        if (p.keyId2 === keyId && canSee(p.visibility2, visibility)) {
            if (this.obj2 === exports.UNDEFINED) {
                this.obj2 = inj._new(p.provider2, p.visibility2);
            }
            return this.obj2;
        }
        if (p.keyId3 === keyId && canSee(p.visibility3, visibility)) {
            if (this.obj3 === exports.UNDEFINED) {
                this.obj3 = inj._new(p.provider3, p.visibility3);
            }
            return this.obj3;
        }
        if (p.keyId4 === keyId && canSee(p.visibility4, visibility)) {
            if (this.obj4 === exports.UNDEFINED) {
                this.obj4 = inj._new(p.provider4, p.visibility4);
            }
            return this.obj4;
        }
        if (p.keyId5 === keyId && canSee(p.visibility5, visibility)) {
            if (this.obj5 === exports.UNDEFINED) {
                this.obj5 = inj._new(p.provider5, p.visibility5);
            }
            return this.obj5;
        }
        if (p.keyId6 === keyId && canSee(p.visibility6, visibility)) {
            if (this.obj6 === exports.UNDEFINED) {
                this.obj6 = inj._new(p.provider6, p.visibility6);
            }
            return this.obj6;
        }
        if (p.keyId7 === keyId && canSee(p.visibility7, visibility)) {
            if (this.obj7 === exports.UNDEFINED) {
                this.obj7 = inj._new(p.provider7, p.visibility7);
            }
            return this.obj7;
        }
        if (p.keyId8 === keyId && canSee(p.visibility8, visibility)) {
            if (this.obj8 === exports.UNDEFINED) {
                this.obj8 = inj._new(p.provider8, p.visibility8);
            }
            return this.obj8;
        }
        if (p.keyId9 === keyId && canSee(p.visibility9, visibility)) {
            if (this.obj9 === exports.UNDEFINED) {
                this.obj9 = inj._new(p.provider9, p.visibility9);
            }
            return this.obj9;
        }
        return exports.UNDEFINED;
    };
    InjectorInlineStrategy.prototype.getObjAtIndex = function (index) {
        if (index == 0)
            return this.obj0;
        if (index == 1)
            return this.obj1;
        if (index == 2)
            return this.obj2;
        if (index == 3)
            return this.obj3;
        if (index == 4)
            return this.obj4;
        if (index == 5)
            return this.obj5;
        if (index == 6)
            return this.obj6;
        if (index == 7)
            return this.obj7;
        if (index == 8)
            return this.obj8;
        if (index == 9)
            return this.obj9;
        throw new exceptions_1.OutOfBoundsError(index);
    };
    InjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () { return _MAX_CONSTRUCTION_COUNTER; };
    return InjectorInlineStrategy;
})();
exports.InjectorInlineStrategy = InjectorInlineStrategy;
var InjectorDynamicStrategy = (function () {
    function InjectorDynamicStrategy(protoStrategy, injector) {
        this.protoStrategy = protoStrategy;
        this.injector = injector;
        this.objs = collection_1.ListWrapper.createFixedSize(protoStrategy.providers.length);
        collection_1.ListWrapper.fill(this.objs, exports.UNDEFINED);
    }
    InjectorDynamicStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
    InjectorDynamicStrategy.prototype.instantiateProvider = function (provider, visibility) {
        return this.injector._new(provider, visibility);
    };
    InjectorDynamicStrategy.prototype.attach = function (parent, isHost) {
        var inj = this.injector;
        inj._parent = parent;
        inj._isHost = isHost;
    };
    InjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId, visibility) {
        var p = this.protoStrategy;
        for (var i = 0; i < p.keyIds.length; i++) {
            if (p.keyIds[i] === keyId && canSee(p.visibilities[i], visibility)) {
                if (this.objs[i] === exports.UNDEFINED) {
                    this.objs[i] = this.injector._new(p.providers[i], p.visibilities[i]);
                }
                return this.objs[i];
            }
        }
        return exports.UNDEFINED;
    };
    InjectorDynamicStrategy.prototype.getObjAtIndex = function (index) {
        if (index < 0 || index >= this.objs.length) {
            throw new exceptions_1.OutOfBoundsError(index);
        }
        return this.objs[index];
    };
    InjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () { return this.objs.length; };
    return InjectorDynamicStrategy;
})();
exports.InjectorDynamicStrategy = InjectorDynamicStrategy;
var ProviderWithVisibility = (function () {
    function ProviderWithVisibility(provider, visibility) {
        this.provider = provider;
        this.visibility = visibility;
    }
    ;
    ProviderWithVisibility.prototype.getKeyId = function () { return this.provider.key.id; };
    return ProviderWithVisibility;
})();
exports.ProviderWithVisibility = ProviderWithVisibility;
/**
 * A dependency injection container used for instantiating objects and resolving dependencies.
 *
 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
 * constructor dependencies.
 *
 * In typical use, application code asks for the dependencies in the constructor and they are
 * resolved by the `Injector`.
 *
 * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
 *
 * The following example creates an `Injector` configured to create `Engine` and `Car`.
 *
 * ```typescript
 * @Injectable()
 * class Engine {
 * }
 *
 * @Injectable()
 * class Car {
 *   constructor(public engine:Engine) {}
 * }
 *
 * var injector = Injector.resolveAndCreate([Car, Engine]);
 * var car = injector.get(Car);
 * expect(car instanceof Car).toBe(true);
 * expect(car.engine instanceof Engine).toBe(true);
 * ```
 *
 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
 * resolve all of the object's dependencies automatically.
 */
var Injector = (function () {
    /**
     * Private
     */
    function Injector(_proto /* ProtoInjector */, _parent, _depProvider, _debugContext) {
        if (_parent === void 0) { _parent = null; }
        if (_depProvider === void 0) { _depProvider = null; }
        if (_debugContext === void 0) { _debugContext = null; }
        this._depProvider = _depProvider;
        this._debugContext = _debugContext;
        /** @internal */
        this._isHost = false;
        /** @internal */
        this._constructionCounter = 0;
        this._proto = _proto;
        this._parent = _parent;
        this._strategy = _proto._strategy.createInjectorStrategy(this);
    }
    /**
     * Turns an array of provider definitions into an array of resolved providers.
     *
     * A resolution is a process of flattening multiple nested arrays and converting individual
     * providers into an array of {@link ResolvedProvider}s.
     *
     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = Injector.resolve([Car, [[Engine]]]);
     *
     * expect(providers.length).toEqual(2);
     *
     * expect(providers[0] instanceof ResolvedProvider).toBe(true);
     * expect(providers[0].key.displayName).toBe("Car");
     * expect(providers[0].dependencies.length).toEqual(1);
     * expect(providers[0].factory).toBeDefined();
     *
     * expect(providers[1].key.displayName).toBe("Engine");
     * });
     * ```
     *
     * See {@link Injector#fromResolvedProviders} for more info.
     */
    Injector.resolve = function (providers) {
        return provider_1.resolveProviders(providers);
    };
    /**
     * Resolves an array of providers and creates an injector from those providers.
     *
     * The passed-in providers can be an array of `Type`, {@link Provider},
     * or a recursive array of more providers.
     *
     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = Injector.resolveAndCreate([Car, Engine]);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     *
     * This function is slower than the corresponding `fromResolvedProviders`
     * because it needs to resolve the passed-in providers first.
     * See {@link Injector#resolve} and {@link Injector#fromResolvedProviders}.
     */
    Injector.resolveAndCreate = function (providers) {
        var resolvedProviders = Injector.resolve(providers);
        return Injector.fromResolvedProviders(resolvedProviders);
    };
    /**
     * Creates an injector from previously resolved providers.
     *
     * This API is the recommended way to construct injectors in performance-sensitive parts.
     *
     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = Injector.resolve([Car, Engine]);
     * var injector = Injector.fromResolvedProviders(providers);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     */
    Injector.fromResolvedProviders = function (providers) {
        var bd = providers.map(function (b) { return new ProviderWithVisibility(b, Visibility.Public); });
        var proto = new ProtoInjector(bd);
        return new Injector(proto, null, null);
    };
    /**
     * @deprecated
     */
    Injector.fromResolvedBindings = function (providers) {
        return Injector.fromResolvedProviders(providers);
    };
    /**
     * @internal
     */
    Injector.prototype.debugContext = function () { return this._debugContext(); };
    /**
     * Retrieves an instance from the injector based on the provided token.
     * Throws {@link NoProviderError} if not found.
     *
     * ### Example ([live demo](http://plnkr.co/edit/HeXSHg?p=preview))
     *
     * ```typescript
     * var injector = Injector.resolveAndCreate([
     *   provide("validToken", {useValue: "Value"})
     * ]);
     * expect(injector.get("validToken")).toEqual("Value");
     * expect(() => injector.get("invalidToken")).toThrowError();
     * ```
     *
     * `Injector` returns itself when given `Injector` as a token.
     *
     * ```typescript
     * var injector = Injector.resolveAndCreate([]);
     * expect(injector.get(Injector)).toBe(injector);
     * ```
     */
    Injector.prototype.get = function (token) {
        return this._getByKey(key_1.Key.get(token), null, null, false, Visibility.PublicAndPrivate);
    };
    /**
     * Retrieves an instance from the injector based on the provided token.
     * Returns null if not found.
     *
     * ### Example ([live demo](http://plnkr.co/edit/tpEbEy?p=preview))
     *
     * ```typescript
     * var injector = Injector.resolveAndCreate([
     *   provide("validToken", {useValue: "Value"})
     * ]);
     * expect(injector.getOptional("validToken")).toEqual("Value");
     * expect(injector.getOptional("invalidToken")).toBe(null);
     * ```
     *
     * `Injector` returns itself when given `Injector` as a token.
     *
     * ```typescript
     * var injector = Injector.resolveAndCreate([]);
     * expect(injector.getOptional(Injector)).toBe(injector);
     * ```
     */
    Injector.prototype.getOptional = function (token) {
        return this._getByKey(key_1.Key.get(token), null, null, true, Visibility.PublicAndPrivate);
    };
    /**
     * @internal
     */
    Injector.prototype.getAt = function (index) { return this._strategy.getObjAtIndex(index); };
    Object.defineProperty(Injector.prototype, "parent", {
        /**
         * Parent of this injector.
         *
         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
         * -->
         *
         * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
         *
         * ```typescript
         * var parent = Injector.resolveAndCreate([]);
         * var child = parent.resolveAndCreateChild([]);
         * expect(child.parent).toBe(parent);
         * ```
         */
        get: function () { return this._parent; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Injector.prototype, "internalStrategy", {
        /**
         * @internal
         * Internal. Do not use.
         * We return `any` not to export the InjectorStrategy type.
         */
        get: function () { return this._strategy; },
        enumerable: true,
        configurable: true
    });
    /**
     * Resolves an array of providers and creates a child injector from those providers.
     *
     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
     * -->
     *
     * The passed-in providers can be an array of `Type`, {@link Provider},
     * or a recursive array of more providers.
     *
     * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
     *
     * ```typescript
     * class ParentProvider {}
     * class ChildProvider {}
     *
     * var parent = Injector.resolveAndCreate([ParentProvider]);
     * var child = parent.resolveAndCreateChild([ChildProvider]);
     *
     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
     * ```
     *
     * This function is slower than the corresponding `createChildFromResolved`
     * because it needs to resolve the passed-in providers first.
     * See {@link Injector#resolve} and {@link Injector#createChildFromResolved}.
     */
    Injector.prototype.resolveAndCreateChild = function (providers) {
        var resolvedProviders = Injector.resolve(providers);
        return this.createChildFromResolved(resolvedProviders);
    };
    /**
     * Creates a child injector from previously resolved providers.
     *
     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
     * -->
     *
     * This API is the recommended way to construct injectors in performance-sensitive parts.
     *
     * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
     *
     * ```typescript
     * class ParentProvider {}
     * class ChildProvider {}
     *
     * var parentProviders = Injector.resolve([ParentProvider]);
     * var childProviders = Injector.resolve([ChildProvider]);
     *
     * var parent = Injector.fromResolvedProviders(parentProviders);
     * var child = parent.createChildFromResolved(childProviders);
     *
     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
     * ```
     */
    Injector.prototype.createChildFromResolved = function (providers) {
        var bd = providers.map(function (b) { return new ProviderWithVisibility(b, Visibility.Public); });
        var proto = new ProtoInjector(bd);
        var inj = new Injector(proto, null, null);
        inj._parent = this;
        return inj;
    };
    /**
     * Resolves a provider and instantiates an object in the context of the injector.
     *
     * The created object does not get cached by the injector.
     *
     * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = Injector.resolveAndCreate([Engine]);
     *
     * var car = injector.resolveAndInstantiate(Car);
     * expect(car.engine).toBe(injector.get(Engine));
     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
     * ```
     */
    Injector.prototype.resolveAndInstantiate = function (provider) {
        return this.instantiateResolved(Injector.resolve([provider])[0]);
    };
    /**
     * Instantiates an object using a resolved provider in the context of the injector.
     *
     * The created object does not get cached by the injector.
     *
     * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = Injector.resolveAndCreate([Engine]);
     * var carProvider = Injector.resolve([Car])[0];
     * var car = injector.instantiateResolved(carProvider);
     * expect(car.engine).toBe(injector.get(Engine));
     * expect(car).not.toBe(injector.instantiateResolved(carProvider));
     * ```
     */
    Injector.prototype.instantiateResolved = function (provider) {
        return this._instantiateProvider(provider, Visibility.PublicAndPrivate);
    };
    /** @internal */
    Injector.prototype._new = function (provider, visibility) {
        if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
            throw new exceptions_1.CyclicDependencyError(this, provider.key);
        }
        return this._instantiateProvider(provider, visibility);
    };
    Injector.prototype._instantiateProvider = function (provider, visibility) {
        if (provider.multiProvider) {
            var res = collection_1.ListWrapper.createFixedSize(provider.resolvedFactories.length);
            for (var i = 0; i < provider.resolvedFactories.length; ++i) {
                res[i] = this._instantiate(provider, provider.resolvedFactories[i], visibility);
            }
            return res;
        }
        else {
            return this._instantiate(provider, provider.resolvedFactories[0], visibility);
        }
    };
    Injector.prototype._instantiate = function (provider, resolvedFactory, visibility) {
        var factory = resolvedFactory.factory;
        var deps = resolvedFactory.dependencies;
        var length = deps.length;
        var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19;
        try {
            d0 = length > 0 ? this._getByDependency(provider, deps[0], visibility) : null;
            d1 = length > 1 ? this._getByDependency(provider, deps[1], visibility) : null;
            d2 = length > 2 ? this._getByDependency(provider, deps[2], visibility) : null;
            d3 = length > 3 ? this._getByDependency(provider, deps[3], visibility) : null;
            d4 = length > 4 ? this._getByDependency(provider, deps[4], visibility) : null;
            d5 = length > 5 ? this._getByDependency(provider, deps[5], visibility) : null;
            d6 = length > 6 ? this._getByDependency(provider, deps[6], visibility) : null;
            d7 = length > 7 ? this._getByDependency(provider, deps[7], visibility) : null;
            d8 = length > 8 ? this._getByDependency(provider, deps[8], visibility) : null;
            d9 = length > 9 ? this._getByDependency(provider, deps[9], visibility) : null;
            d10 = length > 10 ? this._getByDependency(provider, deps[10], visibility) : null;
            d11 = length > 11 ? this._getByDependency(provider, deps[11], visibility) : null;
            d12 = length > 12 ? this._getByDependency(provider, deps[12], visibility) : null;
            d13 = length > 13 ? this._getByDependency(provider, deps[13], visibility) : null;
            d14 = length > 14 ? this._getByDependency(provider, deps[14], visibility) : null;
            d15 = length > 15 ? this._getByDependency(provider, deps[15], visibility) : null;
            d16 = length > 16 ? this._getByDependency(provider, deps[16], visibility) : null;
            d17 = length > 17 ? this._getByDependency(provider, deps[17], visibility) : null;
            d18 = length > 18 ? this._getByDependency(provider, deps[18], visibility) : null;
            d19 = length > 19 ? this._getByDependency(provider, deps[19], visibility) : null;
        }
        catch (e) {
            if (e instanceof exceptions_1.AbstractProviderError || e instanceof exceptions_1.InstantiationError) {
                e.addKey(this, provider.key);
            }
            throw e;
        }
        var obj;
        try {
            switch (length) {
                case 0:
                    obj = factory();
                    break;
                case 1:
                    obj = factory(d0);
                    break;
                case 2:
                    obj = factory(d0, d1);
                    break;
                case 3:
                    obj = factory(d0, d1, d2);
                    break;
                case 4:
                    obj = factory(d0, d1, d2, d3);
                    break;
                case 5:
                    obj = factory(d0, d1, d2, d3, d4);
                    break;
                case 6:
                    obj = factory(d0, d1, d2, d3, d4, d5);
                    break;
                case 7:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6);
                    break;
                case 8:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
                    break;
                case 9:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
                    break;
                case 10:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
                    break;
                case 11:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
                    break;
                case 12:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
                    break;
                case 13:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
                    break;
                case 14:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
                    break;
                case 15:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
                    break;
                case 16:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
                    break;
                case 17:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
                    break;
                case 18:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
                    break;
                case 19:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
                    break;
                case 20:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
                    break;
            }
        }
        catch (e) {
            throw new exceptions_1.InstantiationError(this, e, e.stack, provider.key);
        }
        return obj;
    };
    Injector.prototype._getByDependency = function (provider, dep, providerVisibility) {
        var special = lang_1.isPresent(this._depProvider) ?
            this._depProvider.getDependency(this, provider, dep) :
            exports.UNDEFINED;
        if (special !== exports.UNDEFINED) {
            return special;
        }
        else {
            return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional, providerVisibility);
        }
    };
    Injector.prototype._getByKey = function (key, lowerBoundVisibility, upperBoundVisibility, optional, providerVisibility) {
        if (key === INJECTOR_KEY) {
            return this;
        }
        if (upperBoundVisibility instanceof metadata_1.SelfMetadata) {
            return this._getByKeySelf(key, optional, providerVisibility);
        }
        else if (upperBoundVisibility instanceof metadata_1.HostMetadata) {
            return this._getByKeyHost(key, optional, providerVisibility, lowerBoundVisibility);
        }
        else {
            return this._getByKeyDefault(key, optional, providerVisibility, lowerBoundVisibility);
        }
    };
    /** @internal */
    Injector.prototype._throwOrNull = function (key, optional) {
        if (optional) {
            return null;
        }
        else {
            throw new exceptions_1.NoProviderError(this, key);
        }
    };
    /** @internal */
    Injector.prototype._getByKeySelf = function (key, optional, providerVisibility) {
        var obj = this._strategy.getObjByKeyId(key.id, providerVisibility);
        return (obj !== exports.UNDEFINED) ? obj : this._throwOrNull(key, optional);
    };
    /** @internal */
    Injector.prototype._getByKeyHost = function (key, optional, providerVisibility, lowerBoundVisibility) {
        var inj = this;
        if (lowerBoundVisibility instanceof metadata_1.SkipSelfMetadata) {
            if (inj._isHost) {
                return this._getPrivateDependency(key, optional, inj);
            }
            else {
                inj = inj._parent;
            }
        }
        while (inj != null) {
            var obj = inj._strategy.getObjByKeyId(key.id, providerVisibility);
            if (obj !== exports.UNDEFINED)
                return obj;
            if (lang_1.isPresent(inj._parent) && inj._isHost) {
                return this._getPrivateDependency(key, optional, inj);
            }
            else {
                inj = inj._parent;
            }
        }
        return this._throwOrNull(key, optional);
    };
    /** @internal */
    Injector.prototype._getPrivateDependency = function (key, optional, inj) {
        var obj = inj._parent._strategy.getObjByKeyId(key.id, Visibility.Private);
        return (obj !== exports.UNDEFINED) ? obj : this._throwOrNull(key, optional);
    };
    /** @internal */
    Injector.prototype._getByKeyDefault = function (key, optional, providerVisibility, lowerBoundVisibility) {
        var inj = this;
        if (lowerBoundVisibility instanceof metadata_1.SkipSelfMetadata) {
            providerVisibility = inj._isHost ? Visibility.PublicAndPrivate : Visibility.Public;
            inj = inj._parent;
        }
        while (inj != null) {
            var obj = inj._strategy.getObjByKeyId(key.id, providerVisibility);
            if (obj !== exports.UNDEFINED)
                return obj;
            providerVisibility = inj._isHost ? Visibility.PublicAndPrivate : Visibility.Public;
            inj = inj._parent;
        }
        return this._throwOrNull(key, optional);
    };
    Object.defineProperty(Injector.prototype, "displayName", {
        get: function () {
            return "Injector(providers: [" + _mapProviders(this, function (b) { return (" \"" + b.key.displayName + "\" "); }).join(", ") + "])";
        },
        enumerable: true,
        configurable: true
    });
    Injector.prototype.toString = function () { return this.displayName; };
    return Injector;
})();
exports.Injector = Injector;
var INJECTOR_KEY = key_1.Key.get(Injector);
function _mapProviders(injector, fn) {
    var res = [];
    for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
        res.push(fn(injector._proto.getProviderAtIndex(i)));
    }
    return res;
}

},{"./exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/exceptions.js","./key":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/key.js","./metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/metadata.js","./provider":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/provider.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/key.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var type_literal_1 = require('./type_literal');
var forward_ref_1 = require('./forward_ref');
var type_literal_2 = require('./type_literal');
exports.TypeLiteral = type_literal_2.TypeLiteral;
/**
 * A unique object used for retrieving items from the {@link Injector}.
 *
 * Keys have:
 * - a system-wide unique `id`.
 * - a `token`.
 *
 * `Key` is used internally by {@link Injector} because its system-wide unique `id` allows the
 * injector to store created objects in a more efficient way.
 *
 * `Key` should not be created directly. {@link Injector} creates keys automatically when resolving
 * providers.
 */
var Key = (function () {
    /**
     * Private
     */
    function Key(token, id) {
        this.token = token;
        this.id = id;
        if (lang_1.isBlank(token)) {
            throw new exceptions_1.BaseException('Token must be defined!');
        }
    }
    Object.defineProperty(Key.prototype, "displayName", {
        /**
         * Returns a stringified token.
         */
        get: function () { return lang_1.stringify(this.token); },
        enumerable: true,
        configurable: true
    });
    /**
     * Retrieves a `Key` for a token.
     */
    Key.get = function (token) { return _globalKeyRegistry.get(forward_ref_1.resolveForwardRef(token)); };
    Object.defineProperty(Key, "numberOfKeys", {
        /**
         * @returns the number of keys registered in the system.
         */
        get: function () { return _globalKeyRegistry.numberOfKeys; },
        enumerable: true,
        configurable: true
    });
    return Key;
})();
exports.Key = Key;
/**
 * @internal
 */
var KeyRegistry = (function () {
    function KeyRegistry() {
        this._allKeys = new Map();
    }
    KeyRegistry.prototype.get = function (token) {
        if (token instanceof Key)
            return token;
        // TODO: workaround for https://github.com/Microsoft/TypeScript/issues/3123
        var theToken = token;
        if (token instanceof type_literal_1.TypeLiteral) {
            theToken = token.type;
        }
        token = theToken;
        if (this._allKeys.has(token)) {
            return this._allKeys.get(token);
        }
        var newKey = new Key(token, Key.numberOfKeys);
        this._allKeys.set(token, newKey);
        return newKey;
    };
    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
        get: function () { return this._allKeys.size; },
        enumerable: true,
        configurable: true
    });
    return KeyRegistry;
})();
exports.KeyRegistry = KeyRegistry;
var _globalKeyRegistry = new KeyRegistry();

},{"./forward_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/forward_ref.js","./type_literal":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/type_literal.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/metadata.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require("angular2/src/core/facade/lang");
/**
 * A parameter metadata that specifies a dependency.
 *
 * ### Example ([live demo](http://plnkr.co/edit/6uHYJK?p=preview))
 *
 * ```typescript
 * class Engine {}
 *
 * @Injectable()
 * class Car {
 *   engine;
 *   constructor(@Inject("MyEngine") engine:Engine) {
 *     this.engine = engine;
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([
 *  provide("MyEngine", {useClass: Engine}),
 *  Car
 * ]);
 *
 * expect(injector.get(Car).engine instanceof Engine).toBe(true);
 * ```
 *
 * When `@Inject()` is not present, {@link Injector} will use the type annotation of the parameter.
 *
 * ### Example
 *
 * ```typescript
 * class Engine {}
 *
 * @Injectable()
 * class Car {
 *   constructor(public engine: Engine) {} //same as constructor(@Inject(Engine) engine:Engine)
 * }
 *
 * var injector = Injector.resolveAndCreate([Engine, Car]);
 * expect(injector.get(Car).engine instanceof Engine).toBe(true);
 * ```
 */
var InjectMetadata = (function () {
    function InjectMetadata(token) {
        this.token = token;
    }
    InjectMetadata.prototype.toString = function () { return "@Inject(" + lang_1.stringify(this.token) + ")"; };
    InjectMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Object])
    ], InjectMetadata);
    return InjectMetadata;
})();
exports.InjectMetadata = InjectMetadata;
/**
 * A parameter metadata that marks a dependency as optional. {@link Injector} provides `null` if
 * the dependency is not found.
 *
 * ### Example ([live demo](http://plnkr.co/edit/AsryOm?p=preview))
 *
 * ```typescript
 * class Engine {}
 *
 * @Injectable()
 * class Car {
 *   engine;
 *   constructor(@Optional() engine:Engine) {
 *     this.engine = engine;
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([Car]);
 * expect(injector.get(Car).engine).toBeNull();
 * ```
 */
var OptionalMetadata = (function () {
    function OptionalMetadata() {
    }
    OptionalMetadata.prototype.toString = function () { return "@Optional()"; };
    OptionalMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [])
    ], OptionalMetadata);
    return OptionalMetadata;
})();
exports.OptionalMetadata = OptionalMetadata;
/**
 * `DependencyMetadata` is used by the framework to extend DI.
 * This is internal to Angular and should not be used directly.
 */
var DependencyMetadata = (function () {
    function DependencyMetadata() {
    }
    Object.defineProperty(DependencyMetadata.prototype, "token", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    DependencyMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [])
    ], DependencyMetadata);
    return DependencyMetadata;
})();
exports.DependencyMetadata = DependencyMetadata;
/**
 * A marker metadata that marks a class as available to {@link Injector} for creation.
 *
 * ### Example ([live demo](http://plnkr.co/edit/Wk4DMQ?p=preview))
 *
 * ```typescript
 * @Injectable()
 * class UsefulService {}
 *
 * @Injectable()
 * class NeedsService {
 *   constructor(public service:UsefulService) {}
 * }
 *
 * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);
 * expect(injector.get(NeedsService).service instanceof UsefulService).toBe(true);
 * ```
 * {@link Injector} will throw {@link NoAnnotationError} when trying to instantiate a class that
 * does not have `@Injectable` marker, as shown in the example below.
 *
 * ```typescript
 * class UsefulService {}
 *
 * class NeedsService {
 *   constructor(public service:UsefulService) {}
 * }
 *
 * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);
 * expect(() => injector.get(NeedsService)).toThrowError();
 * ```
 */
var InjectableMetadata = (function () {
    function InjectableMetadata() {
    }
    InjectableMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [])
    ], InjectableMetadata);
    return InjectableMetadata;
})();
exports.InjectableMetadata = InjectableMetadata;
/**
 * Specifies that an {@link Injector} should retrieve a dependency only from itself.
 *
 * ### Example ([live demo](http://plnkr.co/edit/NeagAg?p=preview))
 *
 * ```typescript
 * class Dependency {
 * }
 *
 * @Injectable()
 * class NeedsDependency {
 *   dependency;

 *   dependency;
 *   constructor(@Self() dependency:Dependency) {
 *     this.dependency = dependency;
 *   }
 * }
 *
 * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);
 * var nd = inj.get(NeedsDependency);
 *
 * expect(nd.dependency instanceof Dependency).toBe(true);
 *
 * var inj = Injector.resolveAndCreate([Dependency]);
 * var child = inj.resolveAndCreateChild([NeedsDependency]);
 * expect(() => child.get(NeedsDependency)).toThrowError();
 * ```
 */
var SelfMetadata = (function () {
    function SelfMetadata() {
    }
    SelfMetadata.prototype.toString = function () { return "@Self()"; };
    SelfMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [])
    ], SelfMetadata);
    return SelfMetadata;
})();
exports.SelfMetadata = SelfMetadata;
/**
 * Specifies that the dependency resolution should start from the parent injector.
 *
 * ### Example ([live demo](http://plnkr.co/edit/Wchdzb?p=preview))
 *
 * ```typescript
 * class Dependency {
 * }
 *
 * @Injectable()
 * class NeedsDependency {
 *   dependency;
 *   constructor(@SkipSelf() dependency:Dependency) {
 *     this.dependency = dependency;
 *   }
 * }
 *
 * var parent = Injector.resolveAndCreate([Dependency]);
 * var child = parent.resolveAndCreateChild([NeedsDependency]);
 * expect(child.get(NeedsDependency).dependency instanceof Depedency).toBe(true);
 *
 * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);
 * expect(() => inj.get(NeedsDependency)).toThrowError();
 * ```
 */
var SkipSelfMetadata = (function () {
    function SkipSelfMetadata() {
    }
    SkipSelfMetadata.prototype.toString = function () { return "@SkipSelf()"; };
    SkipSelfMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [])
    ], SkipSelfMetadata);
    return SkipSelfMetadata;
})();
exports.SkipSelfMetadata = SkipSelfMetadata;
/**
 * Specifies that an injector should retrieve a dependency from any injector until reaching the
 * closest host.
 *
 * In Angular, a component element is automatically declared as a host for all the injectors in
 * its view.
 *
 * ### Example ([live demo](http://plnkr.co/edit/GX79pV?p=preview))
 *
 * In the following example `App` contains `ParentCmp`, which contains `ChildDirective`.
 * So `ParentCmp` is the host of `ChildDirective`.
 *
 * `ChildDirective` depends on two services: `HostService` and `OtherService`.
 * `HostService` is defined at `ParentCmp`, and `OtherService` is defined at `App`.
 *
 *```typescript
 * class OtherService {}
 * class HostService {}
 *
 * @Directive({
 *   selector: 'child-directive'
 * })
 * class ChildDirective {
 *   constructor(@Optional() @Host() os:OtherService, @Optional() @Host() hs:HostService){
 *     console.log("os is null", os);
 *     console.log("hs is NOT null", hs);
 *   }
 * }
 *
 * @Component({
 *   selector: 'parent-cmp',
 *   providers: [HostService],
 *   template: `
 *     Dir: <child-directive></child-directive>
 *   `,
 *   directives: [ChildDirective]
 * })
 * class ParentCmp {
 * }
 *
 * @Component({
 *   selector: 'app',
 *   providers: [OtherService],
 *   template: `
 *     Parent: <parent-cmp></parent-cmp>
 *   `,
 *   directives: [ParentCmp]
 * })
 * class App {
 * }
 *
 * bootstrap(App);
 *```
 */
var HostMetadata = (function () {
    function HostMetadata() {
    }
    HostMetadata.prototype.toString = function () { return "@Host()"; };
    HostMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [])
    ], HostMetadata);
    return HostMetadata;
})();
exports.HostMetadata = HostMetadata;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/opaque_token.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
/**
 * Creates a token that can be used in a DI Provider.
 *
 * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
 *
 * ```typescript
 * var t = new OpaqueToken("value");
 *
 * var injector = Injector.resolveAndCreate([
 *   provide(t, {useValue: "providedValue"})
 * ]);
 *
 * expect(injector.get(t)).toEqual("bindingValue");
 * ```
 *
 * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
 * caused by multiple providers using the same string as two different tokens.
 *
 * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
 * error messages.
 */
var OpaqueToken = (function () {
    function OpaqueToken(_desc) {
        this._desc = _desc;
    }
    OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
    OpaqueToken = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [String])
    ], OpaqueToken);
    return OpaqueToken;
})();
exports.OpaqueToken = OpaqueToken;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/provider.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var reflection_1 = require('angular2/src/core/reflection/reflection');
var key_1 = require('./key');
var metadata_1 = require('./metadata');
var exceptions_2 = require('./exceptions');
var forward_ref_1 = require('./forward_ref');
var Dependency = (function () {
    function Dependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
        this.key = key;
        this.optional = optional;
        this.lowerBoundVisibility = lowerBoundVisibility;
        this.upperBoundVisibility = upperBoundVisibility;
        this.properties = properties;
    }
    Dependency.fromKey = function (key) { return new Dependency(key, false, null, null, []); };
    return Dependency;
})();
exports.Dependency = Dependency;
var _EMPTY_LIST = lang_1.CONST_EXPR([]);
/**
 * Describes how the {@link Injector} should instantiate a given token.
 *
 * See {@link provide}.
 *
 * ### Example ([live demo](http://plnkr.co/edit/GNAyj6K6PfYg2NBzgwZ5?p%3Dpreview&p=preview))
 *
 * ```javascript
 * var injector = Injector.resolveAndCreate([
 *   new Provider("message", { useValue: 'Hello' })
 * ]);
 *
 * expect(injector.get("message")).toEqual('Hello');
 * ```
 */
var Provider = (function () {
    function Provider(token, _a) {
        var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
        this.token = token;
        this.useClass = useClass;
        this.useValue = useValue;
        this.useExisting = useExisting;
        this.useFactory = useFactory;
        this.dependencies = deps;
        this._multi = multi;
    }
    Object.defineProperty(Provider.prototype, "multi", {
        // TODO: Provide a full working example after alpha38 is released.
        /**
         * Creates multiple providers matching the same token (a multi-provider).
         *
         * Multi-providers are used for creating pluggable service, where the system comes
         * with some default providers, and the user can register additonal providers.
         * The combination of the default providers and the additional providers will be
         * used to drive the behavior of the system.
         *
         * ### Example
         *
         * ```typescript
         * var injector = Injector.resolveAndCreate([
         *   new Provider("Strings", { useValue: "String1", multi: true}),
         *   new Provider("Strings", { useValue: "String2", multi: true})
         * ]);
         *
         * expect(injector.get("Strings")).toEqual(["String1", "String2"]);
         * ```
         *
         * Multi-providers and regular providers cannot be mixed. The following
         * will throw an exception:
         *
         * ```typescript
         * var injector = Injector.resolveAndCreate([
         *   new Provider("Strings", { useValue: "String1", multi: true }),
         *   new Provider("Strings", { useValue: "String2"})
         * ]);
         * ```
         */
        get: function () { return lang_1.normalizeBool(this._multi); },
        enumerable: true,
        configurable: true
    });
    Provider = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Object, Object])
    ], Provider);
    return Provider;
})();
exports.Provider = Provider;
/**
 * @deprecated
 */
var Binding = (function (_super) {
    __extends(Binding, _super);
    function Binding(token, _a) {
        var toClass = _a.toClass, toValue = _a.toValue, toAlias = _a.toAlias, toFactory = _a.toFactory, deps = _a.deps, multi = _a.multi;
        _super.call(this, token, {
            useClass: toClass,
            useValue: toValue,
            useExisting: toAlias,
            useFactory: toFactory,
            deps: deps,
            multi: multi
        });
    }
    Object.defineProperty(Binding.prototype, "toClass", {
        /**
         * @deprecated
         */
        get: function () { return this.useClass; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Binding.prototype, "toAlias", {
        /**
         * @deprecated
         */
        get: function () { return this.useExisting; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Binding.prototype, "toFactory", {
        /**
         * @deprecated
         */
        get: function () { return this.useFactory; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Binding.prototype, "toValue", {
        /**
         * @deprecated
         */
        get: function () { return this.useValue; },
        enumerable: true,
        configurable: true
    });
    Binding = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Object, Object])
    ], Binding);
    return Binding;
})(Provider);
exports.Binding = Binding;
var ResolvedProvider_ = (function () {
    function ResolvedProvider_(key, resolvedFactories, multiProvider) {
        this.key = key;
        this.resolvedFactories = resolvedFactories;
        this.multiProvider = multiProvider;
    }
    Object.defineProperty(ResolvedProvider_.prototype, "resolvedFactory", {
        get: function () { return this.resolvedFactories[0]; },
        enumerable: true,
        configurable: true
    });
    return ResolvedProvider_;
})();
exports.ResolvedProvider_ = ResolvedProvider_;
/**
 * An internal resolved representation of a factory function created by resolving {@link Provider}.
 */
var ResolvedFactory = (function () {
    function ResolvedFactory(
        /**
         * Factory function which can return an instance of an object represented by a key.
         */
        factory, 
        /**
         * Arguments (dependencies) to the `factory` function.
         */
        dependencies) {
        this.factory = factory;
        this.dependencies = dependencies;
    }
    return ResolvedFactory;
})();
exports.ResolvedFactory = ResolvedFactory;
/**
 * @deprecated
 * Creates a {@link Provider}.
 *
 * To construct a {@link Provider}, bind a `token` to either a class, a value, a factory function,
 * or
 * to an existing `token`.
 * See {@link ProviderBuilder} for more details.
 *
 * The `token` is most commonly a class or {@link angular2/di/OpaqueToken}.
 */
function bind(token) {
    return new ProviderBuilder(token);
}
exports.bind = bind;
/**
 * Creates a {@link Provider}.
 *
 * See {@link Provider} for more details.
 *
 * <!-- TODO: improve the docs -->
 */
function provide(token, _a) {
    var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
    return new Provider(token, {
        useClass: useClass,
        useValue: useValue,
        useExisting: useExisting,
        useFactory: useFactory,
        deps: deps,
        multi: multi
    });
}
exports.provide = provide;
/**
 * Helper class for the {@link bind} function.
 */
var ProviderBuilder = (function () {
    function ProviderBuilder(token) {
        this.token = token;
    }
    /**
     * Binds a DI token to a class.
     *
     * ### Example ([live demo](http://plnkr.co/edit/ZpBCSYqv6e2ud5KXLdxQ?p=preview))
     *
     * Because `toAlias` and `toClass` are often confused, the example contains both use cases for
     * easy comparison.
     *
     * ```typescript
     * class Vehicle {}
     *
     * class Car extends Vehicle {}
     *
     * var injectorClass = Injector.resolveAndCreate([
     *   Car,
     *   provide(Vehicle, {useClass: Car})
     * ]);
     * var injectorAlias = Injector.resolveAndCreate([
     *   Car,
     *   provide(Vehicle, {useExisting: Car})
     * ]);
     *
     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
     *
     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
     * ```
     */
    ProviderBuilder.prototype.toClass = function (type) {
        if (!lang_1.isType(type)) {
            throw new exceptions_1.BaseException("Trying to create a class provider but \"" + lang_1.stringify(type) + "\" is not a class!");
        }
        return new Provider(this.token, { useClass: type });
    };
    /**
     * Binds a DI token to a value.
     *
     * ### Example ([live demo](http://plnkr.co/edit/G024PFHmDL0cJFgfZK8O?p=preview))
     *
     * ```typescript
     * var injector = Injector.resolveAndCreate([
     *   provide('message', {useValue: 'Hello'})
     * ]);
     *
     * expect(injector.get('message')).toEqual('Hello');
     * ```
     */
    ProviderBuilder.prototype.toValue = function (value) { return new Provider(this.token, { useValue: value }); };
    /**
     * Binds a DI token to an existing token.
     *
     * Angular will return the same instance as if the provided token was used. (This is
     * in contrast to `useClass` where a separate instance of `useClass` will be returned.)
     *
     * ### Example ([live demo](http://plnkr.co/edit/uBaoF2pN5cfc5AfZapNw?p=preview))
     *
     * Because `toAlias` and `toClass` are often confused, the example contains both use cases for
     * easy
     * comparison.
     *
     * ```typescript
     * class Vehicle {}
     *
     * class Car extends Vehicle {}
     *
     * var injectorAlias = Injector.resolveAndCreate([
     *   Car,
     *   provide(Vehicle, {useExisting: Car})
     * ]);
     * var injectorClass = Injector.resolveAndCreate([
     *   Car,
     *   provide(Vehicle, {useClass: Car})
     * ]);
     *
     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
     *
     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
     * ```
     */
    ProviderBuilder.prototype.toAlias = function (aliasToken) {
        if (lang_1.isBlank(aliasToken)) {
            throw new exceptions_1.BaseException("Can not alias " + lang_1.stringify(this.token) + " to a blank value!");
        }
        return new Provider(this.token, { useExisting: aliasToken });
    };
    /**
     * Binds a DI token to a function which computes the value.
     *
     * ### Example ([live demo](http://plnkr.co/edit/OejNIfTT3zb1iBxaIYOb?p=preview))
     *
     * ```typescript
     * var injector = Injector.resolveAndCreate([
     *   provide(Number, {useFactory: () => { return 1+2; }}),
     *   provide(String, {useFactory: (v) => { return "Value: " + v; }, deps: [Number]})
     * ]);
     *
     * expect(injector.get(Number)).toEqual(3);
     * expect(injector.get(String)).toEqual('Value: 3');
     * ```
     */
    ProviderBuilder.prototype.toFactory = function (factory, dependencies) {
        if (!lang_1.isFunction(factory)) {
            throw new exceptions_1.BaseException("Trying to create a factory provider but \"" + lang_1.stringify(factory) + "\" is not a function!");
        }
        return new Provider(this.token, { useFactory: factory, deps: dependencies });
    };
    return ProviderBuilder;
})();
exports.ProviderBuilder = ProviderBuilder;
/**
 * Resolve a single provider.
 */
function resolveFactory(provider) {
    var factoryFn;
    var resolvedDeps;
    if (lang_1.isPresent(provider.useClass)) {
        var useClass = forward_ref_1.resolveForwardRef(provider.useClass);
        factoryFn = reflection_1.reflector.factory(useClass);
        resolvedDeps = _dependenciesFor(useClass);
    }
    else if (lang_1.isPresent(provider.useExisting)) {
        factoryFn = function (aliasInstance) { return aliasInstance; };
        resolvedDeps = [Dependency.fromKey(key_1.Key.get(provider.useExisting))];
    }
    else if (lang_1.isPresent(provider.useFactory)) {
        factoryFn = provider.useFactory;
        resolvedDeps = _constructDependencies(provider.useFactory, provider.dependencies);
    }
    else {
        factoryFn = function () { return provider.useValue; };
        resolvedDeps = _EMPTY_LIST;
    }
    return new ResolvedFactory(factoryFn, resolvedDeps);
}
exports.resolveFactory = resolveFactory;
/**
 * Converts the {@link Provider} into {@link ResolvedProvider}.
 *
 * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains
 * convenience provider syntax.
 */
function resolveProvider(provider) {
    return new ResolvedProvider_(key_1.Key.get(provider.token), [resolveFactory(provider)], false);
}
exports.resolveProvider = resolveProvider;
/**
 * Resolve a list of Providers.
 */
function resolveProviders(providers) {
    var normalized = _createListOfProviders(_normalizeProviders(providers, new Map()));
    return normalized.map(function (b) {
        if (b instanceof _NormalizedProvider) {
            return new ResolvedProvider_(b.key, [b.resolvedFactory], false);
        }
        else {
            var arr = b;
            return new ResolvedProvider_(arr[0].key, arr.map(function (_) { return _.resolvedFactory; }), true);
        }
    });
}
exports.resolveProviders = resolveProviders;
/**
 * The algorithm works as follows:
 *
 * [Provider] -> [_NormalizedProvider|[_NormalizedProvider]] -> [ResolvedProvider]
 *
 * _NormalizedProvider is essentially a resolved provider before it was grouped by key.
 */
var _NormalizedProvider = (function () {
    function _NormalizedProvider(key, resolvedFactory) {
        this.key = key;
        this.resolvedFactory = resolvedFactory;
    }
    return _NormalizedProvider;
})();
function _createListOfProviders(flattenedProviders) {
    return collection_1.MapWrapper.values(flattenedProviders);
}
function _normalizeProviders(providers, res) {
    providers.forEach(function (b) {
        if (b instanceof lang_1.Type) {
            _normalizeProvider(provide(b, { useClass: b }), res);
        }
        else if (b instanceof Provider) {
            _normalizeProvider(b, res);
        }
        else if (b instanceof Array) {
            _normalizeProviders(b, res);
        }
        else if (b instanceof ProviderBuilder) {
            throw new exceptions_2.InvalidProviderError(b.token);
        }
        else {
            throw new exceptions_2.InvalidProviderError(b);
        }
    });
    return res;
}
function _normalizeProvider(b, res) {
    var key = key_1.Key.get(b.token);
    var factory = resolveFactory(b);
    var normalized = new _NormalizedProvider(key, factory);
    if (b.multi) {
        var existingProvider = res.get(key.id);
        if (existingProvider instanceof Array) {
            existingProvider.push(normalized);
        }
        else if (lang_1.isBlank(existingProvider)) {
            res.set(key.id, [normalized]);
        }
        else {
            throw new exceptions_2.MixingMultiProvidersWithRegularProvidersError(existingProvider, b);
        }
    }
    else {
        var existingProvider = res.get(key.id);
        if (existingProvider instanceof Array) {
            throw new exceptions_2.MixingMultiProvidersWithRegularProvidersError(existingProvider, b);
        }
        res.set(key.id, normalized);
    }
}
function _constructDependencies(factoryFunction, dependencies) {
    if (lang_1.isBlank(dependencies)) {
        return _dependenciesFor(factoryFunction);
    }
    else {
        var params = dependencies.map(function (t) { return [t]; });
        return dependencies.map(function (t) { return _extractToken(factoryFunction, t, params); });
    }
}
function _dependenciesFor(typeOrFunc) {
    var params = reflection_1.reflector.parameters(typeOrFunc);
    if (lang_1.isBlank(params))
        return [];
    if (collection_1.ListWrapper.any(params, function (p) { return lang_1.isBlank(p); })) {
        throw new exceptions_2.NoAnnotationError(typeOrFunc, params);
    }
    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
}
function _extractToken(typeOrFunc, metadata /*any[] | any*/, params) {
    var depProps = [];
    var token = null;
    var optional = false;
    if (!lang_1.isArray(metadata)) {
        return _createDependency(metadata, optional, null, null, depProps);
    }
    var lowerBoundVisibility = null;
    var upperBoundVisibility = null;
    for (var i = 0; i < metadata.length; ++i) {
        var paramMetadata = metadata[i];
        if (paramMetadata instanceof lang_1.Type) {
            token = paramMetadata;
        }
        else if (paramMetadata instanceof metadata_1.InjectMetadata) {
            token = paramMetadata.token;
        }
        else if (paramMetadata instanceof metadata_1.OptionalMetadata) {
            optional = true;
        }
        else if (paramMetadata instanceof metadata_1.SelfMetadata) {
            upperBoundVisibility = paramMetadata;
        }
        else if (paramMetadata instanceof metadata_1.HostMetadata) {
            upperBoundVisibility = paramMetadata;
        }
        else if (paramMetadata instanceof metadata_1.SkipSelfMetadata) {
            lowerBoundVisibility = paramMetadata;
        }
        else if (paramMetadata instanceof metadata_1.DependencyMetadata) {
            if (lang_1.isPresent(paramMetadata.token)) {
                token = paramMetadata.token;
            }
            depProps.push(paramMetadata);
        }
    }
    token = forward_ref_1.resolveForwardRef(token);
    if (lang_1.isPresent(token)) {
        return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
    }
    else {
        throw new exceptions_2.NoAnnotationError(typeOrFunc, params);
    }
}
function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
    return new Dependency(key_1.Key.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
}

},{"./exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/exceptions.js","./forward_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/forward_ref.js","./key":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/key.js","./metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/metadata.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/reflection/reflection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflection.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/type_literal.js":[function(require,module,exports){
'use strict';/**
 * Type literals is a Dart-only feature. This is here only so we can x-compile
 * to multiple languages.
 */
var TypeLiteral = (function () {
    function TypeLiteral() {
    }
    Object.defineProperty(TypeLiteral.prototype, "type", {
        get: function () { throw new Error("Type literals are only supported in Dart"); },
        enumerable: true,
        configurable: true
    });
    return TypeLiteral;
})();
exports.TypeLiteral = TypeLiteral;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/directives.js":[function(require,module,exports){
'use strict';/**
 * @module
 * @description
 * Common directives shipped with Angular.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var lang_1 = require('./facade/lang');
var ng_class_1 = require('./directives/ng_class');
var ng_for_1 = require('./directives/ng_for');
var ng_if_1 = require('./directives/ng_if');
var ng_style_1 = require('./directives/ng_style');
var ng_switch_1 = require('./directives/ng_switch');
var ng_class_2 = require('./directives/ng_class');
exports.NgClass = ng_class_2.NgClass;
var ng_for_2 = require('./directives/ng_for');
exports.NgFor = ng_for_2.NgFor;
var ng_if_2 = require('./directives/ng_if');
exports.NgIf = ng_if_2.NgIf;
var ng_style_2 = require('./directives/ng_style');
exports.NgStyle = ng_style_2.NgStyle;
var ng_switch_2 = require('./directives/ng_switch');
exports.NgSwitch = ng_switch_2.NgSwitch;
exports.NgSwitchWhen = ng_switch_2.NgSwitchWhen;
exports.NgSwitchDefault = ng_switch_2.NgSwitchDefault;
__export(require('./directives/observable_list_diff'));
/**
 * A collection of Angular core directives that are likely to be used in each and every Angular
 * application.
 *
 * This collection can be used to quickly enumerate all the built-in directives in the `directives`
 * property of the `@View` annotation.
 *
 * ### Example ([live demo](http://plnkr.co/edit/yakGwpCdUkg0qfzX5m8g?p=preview))
 *
 * Instead of writing:
 *
 * ```typescript
 * import {NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault} from 'angular2/angular2';
 * import {OtherDirective} from './myDirectives';
 *
 * @Component({
 *   selector: 'my-component',
 *   templateUrl: 'myComponent.html',
 *   directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, OtherDirective]
 * })
 * export class MyComponent {
 *   ...
 * }
 * ```
 * one could import all the core directives at once:
 *
 * ```typescript
 * import {CORE_DIRECTIVES} from 'angular2/angular2';
 * import {OtherDirective} from './myDirectives';
 *
 * @Component({
 *   selector: 'my-component',
 *   templateUrl: 'myComponent.html',
 *   directives: [CORE_DIRECTIVES, OtherDirective]
 * })
 * export class MyComponent {
 *   ...
 * }
 * ```
 */
exports.CORE_DIRECTIVES = lang_1.CONST_EXPR([ng_class_1.NgClass, ng_for_1.NgFor, ng_if_1.NgIf, ng_style_1.NgStyle, ng_switch_1.NgSwitch, ng_switch_1.NgSwitchWhen, ng_switch_1.NgSwitchDefault]);

},{"./directives/ng_class":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/directives/ng_class.js","./directives/ng_for":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/directives/ng_for.js","./directives/ng_if":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/directives/ng_if.js","./directives/ng_style":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/directives/ng_style.js","./directives/ng_switch":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/directives/ng_switch.js","./directives/observable_list_diff":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/directives/observable_list_diff.js","./facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/directives/ng_class.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var metadata_1 = require('angular2/src/core/metadata');
var linker_1 = require('angular2/src/core/linker');
var change_detection_1 = require('angular2/src/core/change_detection');
var render_1 = require('angular2/src/core/render');
var collection_1 = require('angular2/src/core/facade/collection');
/**
 * The `NgClass` directive conditionally adds and removes CSS classes on an HTML element based on
 * an expression's evaluation result.
 *
 * The result of an expression evaluation is interpreted differently depending on type of
 * the expression evaluation result:
 * - `string` - all the CSS classes listed in a string (space delimited) are added
 * - `Array` - all the CSS classes (Array elements) are added
 * - `Object` - each key corresponds to a CSS class name while values are interpreted as expressions
 * evaluating to `Boolean`. If a given expression evaluates to `true` a corresponding CSS class
 * is added - otherwise it is removed.
 *
 * While the `NgClass` directive can interpret expressions evaluating to `string`, `Array`
 * or `Object`, the `Object`-based version is the most often used and has an advantage of keeping
 * all the CSS class names in a template.
 *
 * ### Example ([live demo](http://plnkr.co/edit/a4YdtmWywhJ33uqfpPPn?p=preview)):
 *
 * ```
 * import {Component, NgClass} from 'angular2/angular2';
 *
 * @Component({
 *   selector: 'toggle-button',
 *   inputs: ['isDisabled'],
 *   template: `
 *      <div class="button" [ng-class]="{active: isOn, disabled: isDisabled}"
 *          (click)="toggle(!isOn)">
 *          Click me!
 *      </div>`,
 *   styles: [`
 *     .button {
 *       width: 120px;
 *       border: medium solid black;
 *     }
 *
 *     .active {
 *       background-color: red;
 *    }
 *
 *     .disabled {
 *       color: gray;
 *       border: medium solid gray;
 *     }
 *   `]
 *   directives: [NgClass]
 * })
 * class ToggleButton {
 *   isOn = false;
 *   isDisabled = false;
 *
 *   toggle(newState) {
 *     if (!this.isDisabled) {
 *       this.isOn = newState;
 *     }
 *   }
 * }
 * ```
 */
var NgClass = (function () {
    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
        this._iterableDiffers = _iterableDiffers;
        this._keyValueDiffers = _keyValueDiffers;
        this._ngEl = _ngEl;
        this._renderer = _renderer;
        this._initialClasses = [];
    }
    Object.defineProperty(NgClass.prototype, "initialClasses", {
        set: function (v) {
            this._applyInitialClasses(true);
            this._initialClasses = lang_1.isPresent(v) && lang_1.isString(v) ? v.split(' ') : [];
            this._applyInitialClasses(false);
            this._applyClasses(this._rawClass, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgClass.prototype, "rawClass", {
        set: function (v) {
            this._cleanupClasses(this._rawClass);
            if (lang_1.isString(v)) {
                v = v.split(' ');
            }
            this._rawClass = v;
            if (lang_1.isPresent(v)) {
                if (collection_1.isListLikeIterable(v)) {
                    this._differ = this._iterableDiffers.find(v).create(null);
                    this._mode = 'iterable';
                }
                else {
                    this._differ = this._keyValueDiffers.find(v).create(null);
                    this._mode = 'keyValue';
                }
            }
            else {
                this._differ = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    NgClass.prototype.doCheck = function () {
        if (lang_1.isPresent(this._differ)) {
            var changes = this._differ.diff(this._rawClass);
            if (lang_1.isPresent(changes)) {
                if (this._mode == 'iterable') {
                    this._applyIterableChanges(changes);
                }
                else {
                    this._applyKeyValueChanges(changes);
                }
            }
        }
    };
    NgClass.prototype.onDestroy = function () { this._cleanupClasses(this._rawClass); };
    NgClass.prototype._cleanupClasses = function (rawClassVal) {
        this._applyClasses(rawClassVal, true);
        this._applyInitialClasses(false);
    };
    NgClass.prototype._applyKeyValueChanges = function (changes) {
        var _this = this;
        changes.forEachAddedItem(function (record) { _this._toggleClass(record.key, record.currentValue); });
        changes.forEachChangedItem(function (record) { _this._toggleClass(record.key, record.currentValue); });
        changes.forEachRemovedItem(function (record) {
            if (record.previousValue) {
                _this._toggleClass(record.key, false);
            }
        });
    };
    NgClass.prototype._applyIterableChanges = function (changes) {
        var _this = this;
        changes.forEachAddedItem(function (record) { _this._toggleClass(record.item, true); });
        changes.forEachRemovedItem(function (record) { _this._toggleClass(record.item, false); });
    };
    NgClass.prototype._applyInitialClasses = function (isCleanup) {
        var _this = this;
        this._initialClasses.forEach(function (className) { return _this._toggleClass(className, !isCleanup); });
    };
    NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
        var _this = this;
        if (lang_1.isPresent(rawClassVal)) {
            if (collection_1.isListLikeIterable(rawClassVal)) {
                rawClassVal.forEach(function (className) { return _this._toggleClass(className, !isCleanup); });
            }
            else {
                collection_1.StringMapWrapper.forEach(rawClassVal, function (expVal, className) {
                    if (expVal)
                        _this._toggleClass(className, !isCleanup);
                });
            }
        }
    };
    NgClass.prototype._toggleClass = function (className, enabled) {
        className = className.trim();
        if (className.length > 0) {
            this._renderer.setElementClass(this._ngEl, className, enabled);
        }
    };
    NgClass = __decorate([
        metadata_1.Directive({ selector: '[ng-class]', inputs: ['rawClass: ng-class', 'initialClasses: class'] }), 
        __metadata('design:paramtypes', [change_detection_1.IterableDiffers, change_detection_1.KeyValueDiffers, linker_1.ElementRef, render_1.Renderer])
    ], NgClass);
    return NgClass;
})();
exports.NgClass = NgClass;

},{"angular2/src/core/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js","angular2/src/core/render":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/directives/ng_for.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var metadata_1 = require('angular2/src/core/metadata');
var change_detection_1 = require('angular2/src/core/change_detection');
var linker_1 = require('angular2/src/core/linker');
var lang_1 = require('angular2/src/core/facade/lang');
/**
 * The `NgFor` directive instantiates a template once per item from an iterable. The context for
 * each instantiated template inherits from the outer context with the given loop variable set
 * to the current item from the iterable.
 *
 * It is possible to alias the `index` to a local variable that will be set to the current loop
 * iteration in the template context, and also to alias the 'last' to a local variable that will
 * be set to a boolean indicating if the item is the last one in the iteration
 *
 * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 *
 * # Example
 *
 * ```
 * <ul>
 *   <li *ng-for="#error of errors; #i = index">
 *     Error {{i}} of {{errors.length}}: {{error.message}}
 *   </li>
 * </ul>
 * ```
 *
 * # Syntax
 *
 * - `<li *ng-for="#item of items; #i = index">...</li>`
 * - `<li template="ng-for #item of items; #i = index">...</li>`
 * - `<template ng-for #item [ng-for-of]="items" #i="index"><li>...</li></template>`
 */
var NgFor = (function () {
    function NgFor(_viewContainer, _templateRef, _iterableDiffers, _cdr) {
        this._viewContainer = _viewContainer;
        this._templateRef = _templateRef;
        this._iterableDiffers = _iterableDiffers;
        this._cdr = _cdr;
    }
    Object.defineProperty(NgFor.prototype, "ngForOf", {
        set: function (value) {
            this._ngForOf = value;
            if (lang_1.isBlank(this._differ) && lang_1.isPresent(value)) {
                this._differ = this._iterableDiffers.find(value).create(this._cdr);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgFor.prototype, "ngForTemplate", {
        set: function (value) { this._templateRef = value; },
        enumerable: true,
        configurable: true
    });
    NgFor.prototype.doCheck = function () {
        if (lang_1.isPresent(this._differ)) {
            var changes = this._differ.diff(this._ngForOf);
            if (lang_1.isPresent(changes))
                this._applyChanges(changes);
        }
    };
    NgFor.prototype._applyChanges = function (changes) {
        // TODO(rado): check if change detection can produce a change record that is
        // easier to consume than current.
        var recordViewTuples = [];
        changes.forEachRemovedItem(function (removedRecord) {
            return recordViewTuples.push(new RecordViewTuple(removedRecord, null));
        });
        changes.forEachMovedItem(function (movedRecord) {
            return recordViewTuples.push(new RecordViewTuple(movedRecord, null));
        });
        var insertTuples = this._bulkRemove(recordViewTuples);
        changes.forEachAddedItem(function (addedRecord) {
            return insertTuples.push(new RecordViewTuple(addedRecord, null));
        });
        this._bulkInsert(insertTuples);
        for (var i = 0; i < insertTuples.length; i++) {
            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
        }
        for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
            this._viewContainer.get(i).setLocal('last', i === ilen - 1);
        }
    };
    NgFor.prototype._perViewChange = function (view, record) {
        view.setLocal('\$implicit', record.item);
        view.setLocal('index', record.currentIndex);
        view.setLocal('even', (record.currentIndex % 2 == 0));
        view.setLocal('odd', (record.currentIndex % 2 == 1));
    };
    NgFor.prototype._bulkRemove = function (tuples) {
        tuples.sort(function (a, b) { return a.record.previousIndex - b.record.previousIndex; });
        var movedTuples = [];
        for (var i = tuples.length - 1; i >= 0; i--) {
            var tuple = tuples[i];
            // separate moved views from removed views.
            if (lang_1.isPresent(tuple.record.currentIndex)) {
                tuple.view = this._viewContainer.detach(tuple.record.previousIndex);
                movedTuples.push(tuple);
            }
            else {
                this._viewContainer.remove(tuple.record.previousIndex);
            }
        }
        return movedTuples;
    };
    NgFor.prototype._bulkInsert = function (tuples) {
        tuples.sort(function (a, b) { return a.record.currentIndex - b.record.currentIndex; });
        for (var i = 0; i < tuples.length; i++) {
            var tuple = tuples[i];
            if (lang_1.isPresent(tuple.view)) {
                this._viewContainer.insert(tuple.view, tuple.record.currentIndex);
            }
            else {
                tuple.view =
                    this._viewContainer.createEmbeddedView(this._templateRef, tuple.record.currentIndex);
            }
        }
        return tuples;
    };
    NgFor = __decorate([
        metadata_1.Directive({ selector: '[ng-for][ng-for-of]', inputs: ['ngForOf', 'ngForTemplate'] }), 
        __metadata('design:paramtypes', [linker_1.ViewContainerRef, linker_1.TemplateRef, change_detection_1.IterableDiffers, change_detection_1.ChangeDetectorRef])
    ], NgFor);
    return NgFor;
})();
exports.NgFor = NgFor;
var RecordViewTuple = (function () {
    function RecordViewTuple(record, view) {
        this.record = record;
        this.view = view;
    }
    return RecordViewTuple;
})();

},{"angular2/src/core/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/directives/ng_if.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var metadata_1 = require('angular2/src/core/metadata');
var linker_1 = require('angular2/src/core/linker');
var lang_1 = require('angular2/src/core/facade/lang');
/**
 * Removes or recreates a portion of the DOM tree based on an {expression}.
 *
 * If the expression assigned to `ng-if` evaluates to a false value then the element
 * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.
 *
 * ### Example ([live demo](http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview)):
 *
 * ```
 * <div *ng-if="errorCount > 0" class="error">
 *   <!-- Error message displayed when the errorCount property on the current context is greater
 * than 0. -->
 *   {{errorCount}} errors detected
 * </div>
 * ```
 *
 * # Syntax
 *
 * - `<div *ng-if="condition">...</div>`
 * - `<div template="ng-if condition">...</div>`
 * - `<template [ng-if]="condition"><div>...</div></template>`
 */
var NgIf = (function () {
    function NgIf(_viewContainer, _templateRef) {
        this._viewContainer = _viewContainer;
        this._templateRef = _templateRef;
        this._prevCondition = null;
    }
    Object.defineProperty(NgIf.prototype, "ngIf", {
        set: function (newCondition /* boolean */) {
            if (newCondition && (lang_1.isBlank(this._prevCondition) || !this._prevCondition)) {
                this._prevCondition = true;
                this._viewContainer.createEmbeddedView(this._templateRef);
            }
            else if (!newCondition && (lang_1.isBlank(this._prevCondition) || this._prevCondition)) {
                this._prevCondition = false;
                this._viewContainer.clear();
            }
        },
        enumerable: true,
        configurable: true
    });
    NgIf = __decorate([
        metadata_1.Directive({ selector: '[ng-if]', inputs: ['ngIf'] }), 
        __metadata('design:paramtypes', [linker_1.ViewContainerRef, linker_1.TemplateRef])
    ], NgIf);
    return NgIf;
})();
exports.NgIf = NgIf;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/directives/ng_style.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var change_detection_1 = require('angular2/src/core/change_detection');
var linker_1 = require('angular2/src/core/linker');
var metadata_1 = require('angular2/src/core/metadata');
var render_1 = require('angular2/src/core/render');
var lang_1 = require('angular2/src/core/facade/lang');
/**
 * The `NgStyle` directive changes styles based on a result of expression evaluation.
 *
 * An expression assigned to the `ng-style` property must evaluate to an object and the
 * corresponding element styles are updated based on changes to this object. Style names to update
 * are taken from the object's keys, and values - from the corresponding object's values.
 *
 * # Syntax
 *
 * - `<div [ng-style]="{'font-style': style}"></div>`
 * - `<div [ng-style]="styleExp"></div>` - here the `styleExp` must evaluate to an object
 *
 * ### Example ([live demo](http://plnkr.co/edit/YamGS6GkUh9GqWNQhCyM?p=preview)):
 *
 * ```
 * import {Component, NgStyle} from 'angular2/angular2';
 *
 * @Component({
 *  selector: 'ng-style-example',
 *  template: `
 *    <h1 [ng-style]="{'font-style': style, 'font-size': size, 'font-weight': weight}">
 *      Change style of this text!
 *    </h1>
 *
 *    <hr>
 *
 *    <label>Italic: <input type="checkbox" (change)="changeStyle($event)"></label>
 *    <label>Bold: <input type="checkbox" (change)="changeWeight($event)"></label>
 *    <label>Size: <input type="text" [value]="size" (change)="size = $event.target.value"></label>
 *  `,
 *  directives: [NgStyle]
 * })
 * export class NgStyleExample {
 *    style = 'normal';
 *    weight = 'normal';
 *    size = '20px';
 *
 *    changeStyle($event: any) {
 *      this.style = $event.target.checked ? 'italic' : 'normal';
 *    }
 *
 *    changeWeight($event: any) {
 *      this.weight = $event.target.checked ? 'bold' : 'normal';
 *    }
 * }
 * ```
 *
 * In this example the `font-style`, `font-size` and `font-weight` styles will be updated
 * based on the `style` property's value changes.
 */
var NgStyle = (function () {
    function NgStyle(_differs, _ngEl, _renderer) {
        this._differs = _differs;
        this._ngEl = _ngEl;
        this._renderer = _renderer;
    }
    Object.defineProperty(NgStyle.prototype, "rawStyle", {
        set: function (v) {
            this._rawStyle = v;
            if (lang_1.isBlank(this._differ) && lang_1.isPresent(v)) {
                this._differ = this._differs.find(this._rawStyle).create(null);
            }
        },
        enumerable: true,
        configurable: true
    });
    NgStyle.prototype.doCheck = function () {
        if (lang_1.isPresent(this._differ)) {
            var changes = this._differ.diff(this._rawStyle);
            if (lang_1.isPresent(changes)) {
                this._applyChanges(changes);
            }
        }
    };
    NgStyle.prototype._applyChanges = function (changes) {
        var _this = this;
        changes.forEachAddedItem(function (record) { _this._setStyle(record.key, record.currentValue); });
        changes.forEachChangedItem(function (record) { _this._setStyle(record.key, record.currentValue); });
        changes.forEachRemovedItem(function (record) { _this._setStyle(record.key, null); });
    };
    NgStyle.prototype._setStyle = function (name, val) {
        this._renderer.setElementStyle(this._ngEl, name, val);
    };
    NgStyle = __decorate([
        metadata_1.Directive({ selector: '[ng-style]', inputs: ['rawStyle: ng-style'] }), 
        __metadata('design:paramtypes', [change_detection_1.KeyValueDiffers, linker_1.ElementRef, render_1.Renderer])
    ], NgStyle);
    return NgStyle;
})();
exports.NgStyle = NgStyle;

},{"angular2/src/core/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js","angular2/src/core/render":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/directives/ng_switch.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var metadata_1 = require('angular2/src/core/metadata');
var di_1 = require('angular2/src/core/di');
var linker_1 = require('angular2/src/core/linker');
var lang_1 = require('angular2/src/core/facade/lang');
var collection_1 = require('angular2/src/core/facade/collection');
var _WHEN_DEFAULT = lang_1.CONST_EXPR(new Object());
var SwitchView = (function () {
    function SwitchView(_viewContainerRef, _templateRef) {
        this._viewContainerRef = _viewContainerRef;
        this._templateRef = _templateRef;
    }
    SwitchView.prototype.create = function () { this._viewContainerRef.createEmbeddedView(this._templateRef); };
    SwitchView.prototype.destroy = function () { this._viewContainerRef.clear(); };
    return SwitchView;
})();
exports.SwitchView = SwitchView;
/**
 * The `NgSwitch` directive is used to conditionally swap DOM structure on your template based on a
 * scope expression.
 * Elements within `NgSwitch` but without `NgSwitchWhen` or `NgSwitchDefault` directives will be
 * preserved at the location as specified in the template.
 *
 * `NgSwitch` simply chooses nested elements and makes them visible based on which element matches
 * the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **`[ng-switch]="..."` attribute**),
 * define any inner elements inside of the directive and place a `[ng-switch-when]` attribute per
 * element.
 * The when attribute is used to inform NgSwitch which element to display when the expression is
 * evaluated. If a matching expression is not found via a when attribute then an element with the
 * default attribute is displayed.
 *
 * # Example:
 *
 * ```
 * <ANY [ng-switch]="expression">
 *   <template [ng-switch-when]="whenExpression1">...</template>
 *   <template [ng-switch-when]="whenExpression1">...</template>
 *   <template ng-switch-default>...</template>
 * </ANY>
 * ```
 */
var NgSwitch = (function () {
    function NgSwitch() {
        this._useDefault = false;
        this._valueViews = new collection_1.Map();
        this._activeViews = [];
    }
    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
        set: function (value) {
            // Empty the currently active ViewContainers
            this._emptyAllActiveViews();
            // Add the ViewContainers matching the value (with a fallback to default)
            this._useDefault = false;
            var views = this._valueViews.get(value);
            if (lang_1.isBlank(views)) {
                this._useDefault = true;
                views = lang_1.normalizeBlank(this._valueViews.get(_WHEN_DEFAULT));
            }
            this._activateViews(views);
            this._switchValue = value;
        },
        enumerable: true,
        configurable: true
    });
    /** @internal */
    NgSwitch.prototype._onWhenValueChanged = function (oldWhen, newWhen, view) {
        this._deregisterView(oldWhen, view);
        this._registerView(newWhen, view);
        if (oldWhen === this._switchValue) {
            view.destroy();
            collection_1.ListWrapper.remove(this._activeViews, view);
        }
        else if (newWhen === this._switchValue) {
            if (this._useDefault) {
                this._useDefault = false;
                this._emptyAllActiveViews();
            }
            view.create();
            this._activeViews.push(view);
        }
        // Switch to default when there is no more active ViewContainers
        if (this._activeViews.length === 0 && !this._useDefault) {
            this._useDefault = true;
            this._activateViews(this._valueViews.get(_WHEN_DEFAULT));
        }
    };
    /** @internal */
    NgSwitch.prototype._emptyAllActiveViews = function () {
        var activeContainers = this._activeViews;
        for (var i = 0; i < activeContainers.length; i++) {
            activeContainers[i].destroy();
        }
        this._activeViews = [];
    };
    /** @internal */
    NgSwitch.prototype._activateViews = function (views) {
        // TODO(vicb): assert(this._activeViews.length === 0);
        if (lang_1.isPresent(views)) {
            for (var i = 0; i < views.length; i++) {
                views[i].create();
            }
            this._activeViews = views;
        }
    };
    /** @internal */
    NgSwitch.prototype._registerView = function (value, view) {
        var views = this._valueViews.get(value);
        if (lang_1.isBlank(views)) {
            views = [];
            this._valueViews.set(value, views);
        }
        views.push(view);
    };
    /** @internal */
    NgSwitch.prototype._deregisterView = function (value, view) {
        // `_WHEN_DEFAULT` is used a marker for non-registered whens
        if (value === _WHEN_DEFAULT)
            return;
        var views = this._valueViews.get(value);
        if (views.length == 1) {
            this._valueViews.delete(value);
        }
        else {
            collection_1.ListWrapper.remove(views, view);
        }
    };
    NgSwitch = __decorate([
        metadata_1.Directive({ selector: '[ng-switch]', inputs: ['ngSwitch'] }), 
        __metadata('design:paramtypes', [])
    ], NgSwitch);
    return NgSwitch;
})();
exports.NgSwitch = NgSwitch;
/**
 * Defines a case statement as an expression.
 *
 * If multiple `NgSwitchWhen` match the `NgSwitch` value, all of them are displayed.
 *
 * Example:
 *
 * ```
 * // match against a context variable
 * <template [ng-switch-when]="contextVariable">...</template>
 *
 * // match against a constant string
 * <template ng-switch-when="stringValue">...</template>
 * ```
 */
var NgSwitchWhen = (function () {
    function NgSwitchWhen(viewContainer, templateRef, _switch) {
        this._switch = _switch;
        // `_WHEN_DEFAULT` is used as a marker for a not yet initialized value
        /** @internal */
        this._value = _WHEN_DEFAULT;
        this._view = new SwitchView(viewContainer, templateRef);
    }
    Object.defineProperty(NgSwitchWhen.prototype, "ngSwitchWhen", {
        set: function (value) {
            this._switch._onWhenValueChanged(this._value, value, this._view);
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    NgSwitchWhen = __decorate([
        metadata_1.Directive({ selector: '[ng-switch-when]', inputs: ['ngSwitchWhen'] }),
        __param(2, di_1.Host()), 
        __metadata('design:paramtypes', [linker_1.ViewContainerRef, linker_1.TemplateRef, NgSwitch])
    ], NgSwitchWhen);
    return NgSwitchWhen;
})();
exports.NgSwitchWhen = NgSwitchWhen;
/**
 * Defines a default case statement.
 *
 * Default case statements are displayed when no `NgSwitchWhen` match the `ng-switch` value.
 *
 * Example:
 *
 * ```
 * <template ng-switch-default>...</template>
 * ```
 */
var NgSwitchDefault = (function () {
    function NgSwitchDefault(viewContainer, templateRef, sswitch) {
        sswitch._registerView(_WHEN_DEFAULT, new SwitchView(viewContainer, templateRef));
    }
    NgSwitchDefault = __decorate([
        metadata_1.Directive({ selector: '[ng-switch-default]' }),
        __param(2, di_1.Host()), 
        __metadata('design:paramtypes', [linker_1.ViewContainerRef, linker_1.TemplateRef, NgSwitch])
    ], NgSwitchDefault);
    return NgSwitchDefault;
})();
exports.NgSwitchDefault = NgSwitchDefault;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/directives/observable_list_diff.js":[function(require,module,exports){
'use strict';// TS does not have Observables

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/browser_adapter.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var dom_adapter_1 = require('./dom_adapter');
var generic_browser_adapter_1 = require('./generic_browser_adapter');
var _attrToPropMap = {
    'class': 'className',
    'innerHtml': 'innerHTML',
    'readonly': 'readOnly',
    'tabindex': 'tabIndex'
};
var DOM_KEY_LOCATION_NUMPAD = 3;
// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
var _keyMap = {
    // The following values are here for cross-browser compatibility and to match the W3C standard
    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
    '\b': 'Backspace',
    '\t': 'Tab',
    '\x7F': 'Delete',
    '\x1B': 'Escape',
    'Del': 'Delete',
    'Esc': 'Escape',
    'Left': 'ArrowLeft',
    'Right': 'ArrowRight',
    'Up': 'ArrowUp',
    'Down': 'ArrowDown',
    'Menu': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'Win': 'OS'
};
// There is a bug in Chrome for numeric keypad keys:
// https://code.google.com/p/chromium/issues/detail?id=155654
// 1, 2, 3 ... are reported as A, B, C ...
var _chromeNumKeyPadMap = {
    'A': '1',
    'B': '2',
    'C': '3',
    'D': '4',
    'E': '5',
    'F': '6',
    'G': '7',
    'H': '8',
    'I': '9',
    'J': '*',
    'K': '+',
    'M': '-',
    'N': '.',
    'O': '/',
    '\x60': '0',
    '\x90': 'NumLock'
};
/* tslint:disable:requireParameterType */
var BrowserDomAdapter = (function (_super) {
    __extends(BrowserDomAdapter, _super);
    function BrowserDomAdapter() {
        _super.apply(this, arguments);
    }
    BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error("parse not implemented"); };
    BrowserDomAdapter.makeCurrent = function () { dom_adapter_1.setRootDomAdapter(new BrowserDomAdapter()); };
    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { el[name] = value; };
    BrowserDomAdapter.prototype.getProperty = function (el, name) { return el[name]; };
    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) {
        el[methodName].apply(el, args);
    };
    // TODO(tbosch): move this into a separate environment class once we have it
    BrowserDomAdapter.prototype.logError = function (error) {
        if (window.console.error) {
            window.console.error(error);
        }
        else {
            window.console.log(error);
        }
    };
    BrowserDomAdapter.prototype.log = function (error) { window.console.log(error); };
    BrowserDomAdapter.prototype.logGroup = function (error) {
        if (window.console.group) {
            window.console.group(error);
            this.logError(error);
        }
        else {
            window.console.log(error);
        }
    };
    BrowserDomAdapter.prototype.logGroupEnd = function () {
        if (window.console.groupEnd) {
            window.console.groupEnd();
        }
    };
    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
        get: function () { return _attrToPropMap; },
        enumerable: true,
        configurable: true
    });
    BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector); };
    BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };
    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
        el.addEventListener(evt, listener, false);
        // Needed to follow Dart's subscription semantic, until fix of
        // https://code.google.com/p/dart/issues/detail?id=17406
        return function () { el.removeEventListener(evt, listener, false); };
    };
    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
        var evt = document.createEvent('MouseEvent');
        evt.initEvent(eventType, true, true);
        return evt;
    };
    BrowserDomAdapter.prototype.createEvent = function (eventType) {
        var evt = document.createEvent('Event');
        evt.initEvent(eventType, true, true);
        return evt;
    };
    BrowserDomAdapter.prototype.preventDefault = function (evt) {
        evt.preventDefault();
        evt.returnValue = false;
    };
    BrowserDomAdapter.prototype.isPrevented = function (evt) {
        return evt.defaultPrevented || lang_1.isPresent(evt.returnValue) && !evt.returnValue;
    };
    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
    BrowserDomAdapter.prototype.type = function (node) { return node.type; };
    BrowserDomAdapter.prototype.content = function (node) {
        if (this.hasProperty(node, "content")) {
            return node.content;
        }
        else {
            return node;
        }
    };
    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
    BrowserDomAdapter.prototype.childNodesAsList = function (el) {
        var childNodes = el.childNodes;
        var res = collection_1.ListWrapper.createFixedSize(childNodes.length);
        for (var i = 0; i < childNodes.length; i++) {
            res[i] = childNodes[i];
        }
        return res;
    };
    BrowserDomAdapter.prototype.clearNodes = function (el) {
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }
    };
    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
    BrowserDomAdapter.prototype.remove = function (node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
        return node;
    };
    BrowserDomAdapter.prototype.insertBefore = function (el, node) { el.parentNode.insertBefore(node, el); };
    BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) { nodes.forEach(function (n) { return el.parentNode.insertBefore(n, el); }); };
    BrowserDomAdapter.prototype.insertAfter = function (el, node) { el.parentNode.insertBefore(node, el.nextSibling); };
    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
    // TODO(vicb): removed Element type because it does not support StyleElement
    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
    BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
    BrowserDomAdapter.prototype.createTemplate = function (html) {
        var t = document.createElement('template');
        t.innerHTML = html;
        return t;
    };
    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
        if (doc === void 0) { doc = document; }
        return doc.createElement(tagName);
    };
    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
        if (doc === void 0) { doc = document; }
        return doc.createTextNode(text);
    };
    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
        if (doc === void 0) { doc = document; }
        var el = doc.createElement('SCRIPT');
        el.setAttribute(attrName, attrValue);
        return el;
    };
    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
        if (doc === void 0) { doc = document; }
        var style = doc.createElement('style');
        this.appendChild(style, this.createTextNode(css));
        return style;
    };
    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return el.createShadowRoot(); };
    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot; };
    BrowserDomAdapter.prototype.getHost = function (el) { return el.host; };
    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
        return element.getElementsByClassName(name);
    };
    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
        return element.getElementsByTagName(name);
    };
    BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
    BrowserDomAdapter.prototype.addClass = function (element, classname) { element.classList.add(classname); };
    BrowserDomAdapter.prototype.removeClass = function (element, classname) { element.classList.remove(classname); };
    BrowserDomAdapter.prototype.hasClass = function (element, classname) { return element.classList.contains(classname); };
    BrowserDomAdapter.prototype.setStyle = function (element, stylename, stylevalue) {
        element.style[stylename] = stylevalue;
    };
    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) { element.style[stylename] = null; };
    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
    BrowserDomAdapter.prototype.attributeMap = function (element) {
        var res = new Map();
        var elAttrs = element.attributes;
        for (var i = 0; i < elAttrs.length; i++) {
            var attrib = elAttrs[i];
            res.set(attrib.name, attrib.value);
        }
        return res;
    };
    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) { return element.hasAttribute(attribute); };
    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) { return element.getAttribute(attribute); };
    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
    BrowserDomAdapter.prototype.createHtmlDocument = function () {
        return document.implementation.createHTMLDocument('fakeTitle');
    };
    BrowserDomAdapter.prototype.defaultDoc = function () { return document; };
    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
        try {
            return el.getBoundingClientRect();
        }
        catch (e) {
            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
        }
    };
    BrowserDomAdapter.prototype.getTitle = function () { return document.title; };
    BrowserDomAdapter.prototype.setTitle = function (newTitle) { document.title = newTitle || ''; };
    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
        var matches = false;
        if (n instanceof HTMLElement) {
            if (n.matches) {
                matches = n.matches(selector);
            }
            else if (n.msMatchesSelector) {
                matches = n.msMatchesSelector(selector);
            }
            else if (n.webkitMatchesSelector) {
                matches = n.webkitMatchesSelector(selector);
            }
        }
        return matches;
    };
    BrowserDomAdapter.prototype.isTemplateElement = function (el) {
        return el instanceof HTMLElement && el.nodeName == "TEMPLATE";
    };
    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
    BrowserDomAdapter.prototype.hasShadowRoot = function (node) { return node instanceof HTMLElement && lang_1.isPresent(node.shadowRoot); };
    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
    BrowserDomAdapter.prototype.importIntoDoc = function (node) {
        var toImport = node;
        if (this.isTemplateElement(node)) {
            toImport = this.content(node);
        }
        return document.importNode(toImport, true);
    };
    BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
    BrowserDomAdapter.prototype.isPageRule = function (rule) { return rule.type === CSSRule.PAGE_RULE; };
    BrowserDomAdapter.prototype.isStyleRule = function (rule) { return rule.type === CSSRule.STYLE_RULE; };
    BrowserDomAdapter.prototype.isMediaRule = function (rule) { return rule.type === CSSRule.MEDIA_RULE; };
    BrowserDomAdapter.prototype.isKeyframesRule = function (rule) { return rule.type === CSSRule.KEYFRAMES_RULE; };
    BrowserDomAdapter.prototype.getHref = function (el) { return el.href; };
    BrowserDomAdapter.prototype.getEventKey = function (event) {
        var key = event.key;
        if (lang_1.isBlank(key)) {
            key = event.keyIdentifier;
            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
            // Safari
            // cf
            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
            if (lang_1.isBlank(key)) {
                return 'Unidentified';
            }
            if (key.startsWith('U+')) {
                key = String.fromCharCode(parseInt(key.substring(2), 16));
                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
                    // There is a bug in Chrome for numeric keypad keys:
                    // https://code.google.com/p/chromium/issues/detail?id=155654
                    // 1, 2, 3 ... are reported as A, B, C ...
                    key = _chromeNumKeyPadMap[key];
                }
            }
        }
        if (_keyMap.hasOwnProperty(key)) {
            key = _keyMap[key];
        }
        return key;
    };
    BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
        if (target == "window") {
            return window;
        }
        else if (target == "document") {
            return document;
        }
        else if (target == "body") {
            return document.body;
        }
    };
    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
    BrowserDomAdapter.prototype.getBaseHref = function () {
        var href = getBaseElementHref();
        if (lang_1.isBlank(href)) {
            return null;
        }
        return relativePath(href);
    };
    BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
    BrowserDomAdapter.prototype.setData = function (element, name, value) {
        this.setAttribute(element, 'data-' + name, value);
    };
    BrowserDomAdapter.prototype.getData = function (element, name) { return this.getAttribute(element, 'data-' + name); };
    BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
    // TODO(tbosch): move this into a separate environment class once we have it
    BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { lang_1.setValueOnPath(lang_1.global, path, value); };
    BrowserDomAdapter.prototype.requestAnimationFrame = function (callback) { return window.requestAnimationFrame(callback); };
    BrowserDomAdapter.prototype.cancelAnimationFrame = function (id) { window.cancelAnimationFrame(id); };
    BrowserDomAdapter.prototype.performanceNow = function () {
        // performance.now() is not available in all browsers, see
        // http://caniuse.com/#search=performance.now
        if (lang_1.isPresent(window.performance) && lang_1.isPresent(window.performance.now)) {
            return window.performance.now();
        }
        else {
            return lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now());
        }
    };
    return BrowserDomAdapter;
})(generic_browser_adapter_1.GenericBrowserDomAdapter);
exports.BrowserDomAdapter = BrowserDomAdapter;
var baseElement = null;
function getBaseElementHref() {
    if (lang_1.isBlank(baseElement)) {
        baseElement = document.querySelector('base');
        if (lang_1.isBlank(baseElement)) {
            return null;
        }
    }
    return baseElement.getAttribute('href');
}
// based on urlUtils.js in AngularJS 1
var urlParsingNode = null;
function relativePath(url) {
    if (lang_1.isBlank(urlParsingNode)) {
        urlParsingNode = document.createElement("a");
    }
    urlParsingNode.setAttribute('href', url);
    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
        '/' + urlParsingNode.pathname;
}

},{"./dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","./generic_browser_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/generic_browser_adapter.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
function setRootDomAdapter(adapter) {
    if (lang_1.isBlank(exports.DOM)) {
        exports.DOM = adapter;
    }
}
exports.setRootDomAdapter = setRootDomAdapter;
/* tslint:disable:requireParameterType */
/**
 * Provides DOM operations in an environment-agnostic way.
 */
var DomAdapter = (function () {
    function DomAdapter() {
    }
    return DomAdapter;
})();
exports.DomAdapter = DomAdapter;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/generic_browser_adapter.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var dom_adapter_1 = require('./dom_adapter');
var xhr_impl_1 = require('angular2/src/core/compiler/xhr_impl');
/**
 * Provides DOM operations in any browser environment.
 */
var GenericBrowserDomAdapter = (function (_super) {
    __extends(GenericBrowserDomAdapter, _super);
    function GenericBrowserDomAdapter() {
        var _this = this;
        _super.call(this);
        this._animationPrefix = null;
        this._transitionEnd = null;
        try {
            var element = this.createElement('div', this.defaultDoc());
            if (lang_1.isPresent(this.getStyle(element, 'animationName'))) {
                this._animationPrefix = '';
            }
            else {
                var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
                for (var i = 0; i < domPrefixes.length; i++) {
                    if (lang_1.isPresent(this.getStyle(element, domPrefixes[i] + 'AnimationName'))) {
                        this._animationPrefix = '-' + lang_1.StringWrapper.toLowerCase(domPrefixes[i]) + '-';
                        break;
                    }
                }
            }
            var transEndEventNames = {
                WebkitTransition: 'webkitTransitionEnd',
                MozTransition: 'transitionend',
                OTransition: 'oTransitionEnd otransitionend',
                transition: 'transitionend'
            };
            collection_1.StringMapWrapper.forEach(transEndEventNames, function (value, key) {
                if (lang_1.isPresent(_this.getStyle(element, key))) {
                    _this._transitionEnd = value;
                }
            });
        }
        catch (e) {
            this._animationPrefix = null;
            this._transitionEnd = null;
        }
    }
    GenericBrowserDomAdapter.prototype.getXHR = function () { return xhr_impl_1.XHRImpl; };
    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return el.getDistributedNodes(); };
    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
        el.href = href == null ? baseUrl : baseUrl + '/../' + href;
    };
    GenericBrowserDomAdapter.prototype.cssToRules = function (css) {
        var style = this.createStyleElement(css);
        this.appendChild(this.defaultDoc().head, style);
        var rules = [];
        if (lang_1.isPresent(style.sheet)) {
            // TODO(sorvell): Firefox throws when accessing the rules of a stylesheet
            // with an @import
            // https://bugzilla.mozilla.org/show_bug.cgi?id=625013
            try {
                var rawRules = style.sheet.cssRules;
                rules = collection_1.ListWrapper.createFixedSize(rawRules.length);
                for (var i = 0; i < rawRules.length; i++) {
                    rules[i] = rawRules[i];
                }
            }
            catch (e) {
            }
        }
        else {
        }
        this.remove(style);
        return rules;
    };
    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
        return lang_1.isFunction(this.defaultDoc().body.createShadowRoot);
    };
    GenericBrowserDomAdapter.prototype.supportsUnprefixedCssAnimation = function () {
        return lang_1.isPresent(this.defaultDoc().body.style) &&
            lang_1.isPresent(this.defaultDoc().body.style.animationName);
    };
    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () {
        return lang_1.isPresent(this._animationPrefix) ? this._animationPrefix : "";
    };
    GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return lang_1.isPresent(this._transitionEnd) ? this._transitionEnd : ""; };
    GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
        return lang_1.isPresent(this._animationPrefix) && lang_1.isPresent(this._transitionEnd);
    };
    return GenericBrowserDomAdapter;
})(dom_adapter_1.DomAdapter);
exports.GenericBrowserDomAdapter = GenericBrowserDomAdapter;

},{"./dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/compiler/xhr_impl":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/xhr_impl.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade.js":[function(require,module,exports){
'use strict';// Public API for Facade
var lang_1 = require('./facade/lang');
exports.Type = lang_1.Type;
var async_1 = require('./facade/async');
exports.Observable = async_1.Observable;
exports.EventEmitter = async_1.EventEmitter;
var exceptions_1 = require('./facade/exceptions');
exports.WrappedException = exceptions_1.WrappedException;

},{"./facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","./facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","./facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = require('angular2/src/core/facade/lang');
var promise_1 = require('angular2/src/core/facade/promise');
exports.PromiseWrapper = promise_1.PromiseWrapper;
exports.Promise = promise_1.Promise;
// TODO(jeffbcross): use ES6 import once typings are available
var Subject = require('@reactivex/rxjs/dist/cjs/Subject');
var TimerWrapper = (function () {
    function TimerWrapper() {
    }
    TimerWrapper.setTimeout = function (fn, millis) {
        return lang_1.global.setTimeout(fn, millis);
    };
    TimerWrapper.clearTimeout = function (id) { lang_1.global.clearTimeout(id); };
    TimerWrapper.setInterval = function (fn, millis) {
        return lang_1.global.setInterval(fn, millis);
    };
    TimerWrapper.clearInterval = function (id) { lang_1.global.clearInterval(id); };
    return TimerWrapper;
})();
exports.TimerWrapper = TimerWrapper;
var ObservableWrapper = (function () {
    function ObservableWrapper() {
    }
    // TODO(vsavkin): when we use rxnext, try inferring the generic type from the first arg
    ObservableWrapper.subscribe = function (emitter, onNext, onThrow, onReturn) {
        if (onThrow === void 0) { onThrow = null; }
        if (onReturn === void 0) { onReturn = null; }
        return emitter.observer({ next: onNext, throw: onThrow, return: onReturn });
    };
    ObservableWrapper.isObservable = function (obs) { return obs instanceof Observable; };
    ObservableWrapper.dispose = function (subscription) { subscription.unsubscribe(); };
    ObservableWrapper.callNext = function (emitter, value) { emitter.next(value); };
    ObservableWrapper.callThrow = function (emitter, error) { emitter.throw(error); };
    ObservableWrapper.callReturn = function (emitter) { emitter.return(null); };
    return ObservableWrapper;
})();
exports.ObservableWrapper = ObservableWrapper;
// TODO: vsavkin change to interface
var Observable = (function () {
    function Observable() {
    }
    Observable.prototype.observer = function (generator) { return null; };
    return Observable;
})();
exports.Observable = Observable;
/**
 * Use by directives and components to emit custom Events.
 *
 * ## Examples
 *
 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
 * title gets clicked:
 *
 * ```
 * @Component({
 *   selector: 'zippy',
 *   template: `
 *   <div class="zippy">
 *     <div (click)="toggle()">Toggle</div>
 *     <div [hidden]="!visible">
 *       <ng-content></ng-content>
 *     </div>
 *  </div>`})
 * export class Zippy {
 *   visible: boolean = true;
 *   @Output() open: EventEmitter = new EventEmitter();
 *   @Output() close: EventEmitter = new EventEmitter();
 *
 *   toggle() {
 *     this.visible = !this.visible;
 *     if (this.visible) {
 *       this.open.next(null);
 *     } else {
 *       this.close.next(null);
 *     }
 *   }
 * }
 * ```
 *
 * Use Rx.Observable but provides an adapter to make it work as specified here:
 * https://github.com/jhusain/observable-spec
 *
 * Once a reference implementation of the spec is available, switch to it.
 */
var EventEmitter = (function (_super) {
    __extends(EventEmitter, _super);
    function EventEmitter() {
        _super.apply(this, arguments);
        /** @internal */
        this._subject = new Subject();
    }
    EventEmitter.prototype.observer = function (generator) {
        return this._subject.subscribe(function (value) { setTimeout(function () { return generator.next(value); }); }, function (error) { return generator.throw ? generator.throw(error) : null; }, function () { return generator.return ? generator.return() : null; });
    };
    EventEmitter.prototype.toRx = function () { return this._subject; };
    EventEmitter.prototype.next = function (value) { this._subject.next(value); };
    EventEmitter.prototype.throw = function (error) { this._subject.error(error); };
    EventEmitter.prototype.return = function (value) { this._subject.complete(); };
    return EventEmitter;
})(Observable);
exports.EventEmitter = EventEmitter;

},{"@reactivex/rxjs/dist/cjs/Subject":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/node_modules/@reactivex/rxjs/dist/cjs/Subject.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/facade/promise":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/promise.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
exports.Map = lang_1.global.Map;
exports.Set = lang_1.global.Set;
// Safari and Internet Explorer do not support the iterable parameter to the
// Map constructor.  We work around that by manually adding the items.
var createMapFromPairs = (function () {
    try {
        if (new exports.Map([[1, 2]]).size === 1) {
            return function createMapFromPairs(pairs) { return new exports.Map(pairs); };
        }
    }
    catch (e) {
    }
    return function createMapAndPopulateFromPairs(pairs) {
        var map = new exports.Map();
        for (var i = 0; i < pairs.length; i++) {
            var pair = pairs[i];
            map.set(pair[0], pair[1]);
        }
        return map;
    };
})();
var createMapFromMap = (function () {
    try {
        if (new exports.Map(new exports.Map())) {
            return function createMapFromMap(m) { return new exports.Map(m); };
        }
    }
    catch (e) {
    }
    return function createMapAndPopulateFromMap(m) {
        var map = new exports.Map();
        m.forEach(function (v, k) { map.set(k, v); });
        return map;
    };
})();
var _clearValues = (function () {
    if ((new exports.Map()).keys().next) {
        return function _clearValues(m) {
            var keyIterator = m.keys();
            var k;
            while (!((k = keyIterator.next()).done)) {
                m.set(k.value, null);
            }
        };
    }
    else {
        return function _clearValuesWithForeEach(m) {
            m.forEach(function (v, k) { m.set(k, null); });
        };
    }
})();
// Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
// TODO(mlaval): remove the work around once we have a working polyfill of Array.from
var _arrayFromMap = (function () {
    try {
        if ((new exports.Map()).values().next) {
            return function createArrayFromMap(m, getValues) { return getValues ? Array.from(m.values()) : Array.from(m.keys()); };
        }
    }
    catch (e) {
    }
    return function createArrayFromMapWithForeach(m, getValues) {
        var res = ListWrapper.createFixedSize(m.size), i = 0;
        m.forEach(function (v, k) {
            res[i] = getValues ? v : k;
            i++;
        });
        return res;
    };
})();
var MapWrapper = (function () {
    function MapWrapper() {
    }
    MapWrapper.clone = function (m) { return createMapFromMap(m); };
    MapWrapper.createFromStringMap = function (stringMap) {
        var result = new exports.Map();
        for (var prop in stringMap) {
            result.set(prop, stringMap[prop]);
        }
        return result;
    };
    MapWrapper.toStringMap = function (m) {
        var r = {};
        m.forEach(function (v, k) { return r[k] = v; });
        return r;
    };
    MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };
    MapWrapper.clearValues = function (m) { _clearValues(m); };
    MapWrapper.iterable = function (m) { return m; };
    MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };
    MapWrapper.values = function (m) { return _arrayFromMap(m, true); };
    return MapWrapper;
})();
exports.MapWrapper = MapWrapper;
/**
 * Wraps Javascript Objects
 */
var StringMapWrapper = (function () {
    function StringMapWrapper() {
    }
    StringMapWrapper.create = function () {
        // Note: We are not using Object.create(null) here due to
        // performance!
        // http://jsperf.com/ng2-object-create-null
        return {};
    };
    StringMapWrapper.contains = function (map, key) {
        return map.hasOwnProperty(key);
    };
    StringMapWrapper.get = function (map, key) {
        return map.hasOwnProperty(key) ? map[key] : undefined;
    };
    StringMapWrapper.set = function (map, key, value) { map[key] = value; };
    StringMapWrapper.keys = function (map) { return Object.keys(map); };
    StringMapWrapper.isEmpty = function (map) {
        for (var prop in map) {
            return false;
        }
        return true;
    };
    StringMapWrapper.delete = function (map, key) { delete map[key]; };
    StringMapWrapper.forEach = function (map, callback) {
        for (var prop in map) {
            if (map.hasOwnProperty(prop)) {
                callback(map[prop], prop);
            }
        }
    };
    StringMapWrapper.merge = function (m1, m2) {
        var m = {};
        for (var attr in m1) {
            if (m1.hasOwnProperty(attr)) {
                m[attr] = m1[attr];
            }
        }
        for (var attr in m2) {
            if (m2.hasOwnProperty(attr)) {
                m[attr] = m2[attr];
            }
        }
        return m;
    };
    StringMapWrapper.equals = function (m1, m2) {
        var k1 = Object.keys(m1);
        var k2 = Object.keys(m2);
        if (k1.length != k2.length) {
            return false;
        }
        var key;
        for (var i = 0; i < k1.length; i++) {
            key = k1[i];
            if (m1[key] !== m2[key]) {
                return false;
            }
        }
        return true;
    };
    return StringMapWrapper;
})();
exports.StringMapWrapper = StringMapWrapper;
var ListWrapper = (function () {
    function ListWrapper() {
    }
    // JS has no way to express a statically fixed size list, but dart does so we
    // keep both methods.
    ListWrapper.createFixedSize = function (size) { return new Array(size); };
    ListWrapper.createGrowableSize = function (size) { return new Array(size); };
    ListWrapper.clone = function (array) { return array.slice(0); };
    ListWrapper.forEachWithIndex = function (array, fn) {
        for (var i = 0; i < array.length; i++) {
            fn(array[i], i);
        }
    };
    ListWrapper.first = function (array) {
        if (!array)
            return null;
        return array[0];
    };
    ListWrapper.last = function (array) {
        if (!array || array.length == 0)
            return null;
        return array[array.length - 1];
    };
    ListWrapper.find = function (list, pred) {
        for (var i = 0; i < list.length; ++i) {
            if (pred(list[i]))
                return list[i];
        }
        return null;
    };
    ListWrapper.indexOf = function (array, value, startIndex) {
        if (startIndex === void 0) { startIndex = 0; }
        return array.indexOf(value, startIndex);
    };
    ListWrapper.reduce = function (list, fn, init) {
        return list.reduce(fn, init);
    };
    ListWrapper.filter = function (array, pred) { return array.filter(pred); };
    ListWrapper.any = function (list, pred) {
        for (var i = 0; i < list.length; ++i) {
            if (pred(list[i]))
                return true;
        }
        return false;
    };
    ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };
    ListWrapper.reversed = function (array) {
        var a = ListWrapper.clone(array);
        return a.reverse();
    };
    ListWrapper.concat = function (a, b) { return a.concat(b); };
    ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };
    ListWrapper.removeAt = function (list, index) {
        var res = list[index];
        list.splice(index, 1);
        return res;
    };
    ListWrapper.removeAll = function (list, items) {
        for (var i = 0; i < items.length; ++i) {
            var index = list.indexOf(items[i]);
            list.splice(index, 1);
        }
    };
    ListWrapper.remove = function (list, el) {
        var index = list.indexOf(el);
        if (index > -1) {
            list.splice(index, 1);
            return true;
        }
        return false;
    };
    ListWrapper.clear = function (list) { list.length = 0; };
    ListWrapper.isEmpty = function (list) { return list.length == 0; };
    ListWrapper.fill = function (list, value, start, end) {
        if (start === void 0) { start = 0; }
        if (end === void 0) { end = null; }
        list.fill(value, start, end === null ? list.length : end);
    };
    ListWrapper.equals = function (a, b) {
        if (a.length != b.length)
            return false;
        for (var i = 0; i < a.length; ++i) {
            if (a[i] !== b[i])
                return false;
        }
        return true;
    };
    ListWrapper.slice = function (l, from, to) {
        if (from === void 0) { from = 0; }
        if (to === void 0) { to = null; }
        return l.slice(from, to === null ? undefined : to);
    };
    ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };
    ListWrapper.sort = function (l, compareFn) {
        if (lang_1.isPresent(compareFn)) {
            l.sort(compareFn);
        }
        else {
            l.sort();
        }
    };
    ListWrapper.toString = function (l) { return l.toString(); };
    ListWrapper.toJSON = function (l) { return JSON.stringify(l); };
    ListWrapper.maximum = function (list, predicate) {
        if (list.length == 0) {
            return null;
        }
        var solution = null;
        var maxValue = -Infinity;
        for (var index = 0; index < list.length; index++) {
            var candidate = list[index];
            if (lang_1.isBlank(candidate)) {
                continue;
            }
            var candidateValue = predicate(candidate);
            if (candidateValue > maxValue) {
                solution = candidate;
                maxValue = candidateValue;
            }
        }
        return solution;
    };
    return ListWrapper;
})();
exports.ListWrapper = ListWrapper;
function isListLikeIterable(obj) {
    if (!lang_1.isJsObject(obj))
        return false;
    return lang_1.isArray(obj) ||
        (!(obj instanceof exports.Map) &&
            lang_1.getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
}
exports.isListLikeIterable = isListLikeIterable;
function iterateListLike(obj, fn) {
    if (lang_1.isArray(obj)) {
        for (var i = 0; i < obj.length; i++) {
            fn(obj[i]);
        }
    }
    else {
        var iterator = obj[lang_1.getSymbolIterator()]();
        var item;
        while (!((item = iterator.next()).done)) {
            fn(item.value);
        }
    }
}
exports.iterateListLike = iterateListLike;
// Safari and Internet Explorer do not support the iterable parameter to the
// Set constructor.  We work around that by manually adding the items.
var createSetFromList = (function () {
    var test = new exports.Set([1, 2, 3]);
    if (test.size === 3) {
        return function createSetFromList(lst) { return new exports.Set(lst); };
    }
    else {
        return function createSetAndPopulateFromList(lst) {
            var res = new exports.Set(lst);
            if (res.size !== lst.length) {
                for (var i = 0; i < lst.length; i++) {
                    res.add(lst[i]);
                }
            }
            return res;
        };
    }
})();
var SetWrapper = (function () {
    function SetWrapper() {
    }
    SetWrapper.createFromList = function (lst) { return createSetFromList(lst); };
    SetWrapper.has = function (s, key) { return s.has(key); };
    SetWrapper.delete = function (m, k) { m.delete(k); };
    return SetWrapper;
})();
exports.SetWrapper = SetWrapper;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exception_handler.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var _ArrayLogger = (function () {
    function _ArrayLogger() {
        this.res = [];
    }
    _ArrayLogger.prototype.log = function (s) { this.res.push(s); };
    _ArrayLogger.prototype.logError = function (s) { this.res.push(s); };
    _ArrayLogger.prototype.logGroup = function (s) { this.res.push(s); };
    _ArrayLogger.prototype.logGroupEnd = function () { };
    ;
    return _ArrayLogger;
})();
/**
 * Provides a hook for centralized exception handling.
 *
 * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
 * intercept error handling,
 * write a custom exception handler that replaces this default as appropriate for your app.
 *
 * # Example
 *
 * ```javascript
 *
 * class MyExceptionHandler implements ExceptionHandler {
 *   call(error, stackTrace = null, reason = null) {
 *     // do something with the exception
 *   }
 * }
 *
 * bootstrap(MyApp, [provide(ExceptionHandler, {useClass: MyExceptionHandler})])
 *
 * ```
 */
var ExceptionHandler = (function () {
    function ExceptionHandler(_logger, _rethrowException) {
        if (_rethrowException === void 0) { _rethrowException = true; }
        this._logger = _logger;
        this._rethrowException = _rethrowException;
    }
    ExceptionHandler.exceptionToString = function (exception, stackTrace, reason) {
        if (stackTrace === void 0) { stackTrace = null; }
        if (reason === void 0) { reason = null; }
        var l = new _ArrayLogger();
        var e = new ExceptionHandler(l, false);
        e.call(exception, stackTrace, reason);
        return l.res.join("\n");
    };
    ExceptionHandler.prototype.call = function (exception, stackTrace, reason) {
        if (stackTrace === void 0) { stackTrace = null; }
        if (reason === void 0) { reason = null; }
        var originalException = this._findOriginalException(exception);
        var originalStack = this._findOriginalStack(exception);
        var context = this._findContext(exception);
        this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
        if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
            this._logger.logError("STACKTRACE:");
            this._logger.logError(this._longStackTrace(stackTrace));
        }
        if (lang_1.isPresent(reason)) {
            this._logger.logError("REASON: " + reason);
        }
        if (lang_1.isPresent(originalException)) {
            this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
        }
        if (lang_1.isPresent(originalStack)) {
            this._logger.logError("ORIGINAL STACKTRACE:");
            this._logger.logError(this._longStackTrace(originalStack));
        }
        if (lang_1.isPresent(context)) {
            this._logger.logError("ERROR CONTEXT:");
            this._logger.logError(context);
        }
        this._logger.logGroupEnd();
        // We rethrow exceptions, so operations like 'bootstrap' will result in an error
        // when an exception happens. If we do not rethrow, bootstrap will always succeed.
        if (this._rethrowException)
            throw exception;
    };
    /** @internal */
    ExceptionHandler.prototype._extractMessage = function (exception) {
        return exception instanceof exceptions_1.WrappedException ? exception.wrapperMessage : exception.toString();
    };
    /** @internal */
    ExceptionHandler.prototype._longStackTrace = function (stackTrace) {
        return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") :
            stackTrace.toString();
    };
    /** @internal */
    ExceptionHandler.prototype._findContext = function (exception) {
        try {
            if (!(exception instanceof exceptions_1.WrappedException))
                return null;
            return lang_1.isPresent(exception.context) ? exception.context :
                this._findContext(exception.originalException);
        }
        catch (e) {
            // exception.context can throw an exception. if it happens, we ignore the context.
            return null;
        }
    };
    /** @internal */
    ExceptionHandler.prototype._findOriginalException = function (exception) {
        if (!(exception instanceof exceptions_1.WrappedException))
            return null;
        var e = exception.originalException;
        while (e instanceof exceptions_1.WrappedException && lang_1.isPresent(e.originalException)) {
            e = e.originalException;
        }
        return e;
    };
    /** @internal */
    ExceptionHandler.prototype._findOriginalStack = function (exception) {
        if (!(exception instanceof exceptions_1.WrappedException))
            return null;
        var e = exception;
        var stack = exception.originalStack;
        while (e instanceof exceptions_1.WrappedException && lang_1.isPresent(e.originalException)) {
            e = e.originalException;
            if (e instanceof exceptions_1.WrappedException && lang_1.isPresent(e.originalException)) {
                stack = e.originalStack;
            }
        }
        return stack;
    };
    return ExceptionHandler;
})();
exports.ExceptionHandler = ExceptionHandler;

},{"angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var exception_handler_1 = require('./exception_handler');
var exception_handler_2 = require('./exception_handler');
exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
var BaseException = (function (_super) {
    __extends(BaseException, _super);
    function BaseException(message) {
        if (message === void 0) { message = "--"; }
        _super.call(this, message);
        this.message = message;
        this.stack = (new Error(message)).stack;
    }
    BaseException.prototype.toString = function () { return this.message; };
    return BaseException;
})(Error);
exports.BaseException = BaseException;
var WrappedException = (function (_super) {
    __extends(WrappedException, _super);
    function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
        _super.call(this, _wrapperMessage);
        this._wrapperMessage = _wrapperMessage;
        this._originalException = _originalException;
        this._originalStack = _originalStack;
        this._context = _context;
        this._wrapperStack = (new Error(_wrapperMessage)).stack;
    }
    Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
        get: function () { return this._wrapperMessage; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WrappedException.prototype, "wrapperStack", {
        get: function () { return this._wrapperStack; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WrappedException.prototype, "originalException", {
        get: function () { return this._originalException; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WrappedException.prototype, "originalStack", {
        get: function () { return this._originalStack; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WrappedException.prototype, "context", {
        get: function () { return this._context; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WrappedException.prototype, "message", {
        get: function () { return exception_handler_1.ExceptionHandler.exceptionToString(this); },
        enumerable: true,
        configurable: true
    });
    WrappedException.prototype.toString = function () { return this.message; };
    return WrappedException;
})(Error);
exports.WrappedException = WrappedException;
function makeTypeError(message) {
    return new TypeError(message);
}
exports.makeTypeError = makeTypeError;
function unimplemented() {
    throw new BaseException('unimplemented');
}
exports.unimplemented = unimplemented;

},{"./exception_handler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exception_handler.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/intl.js":[function(require,module,exports){
'use strict';(function (NumberFormatStyle) {
    NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
    NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
    NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
})(exports.NumberFormatStyle || (exports.NumberFormatStyle = {}));
var NumberFormatStyle = exports.NumberFormatStyle;
var NumberFormatter = (function () {
    function NumberFormatter() {
    }
    NumberFormatter.format = function (number, locale, style, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.minimumIntegerDigits, minimumIntegerDigits = _c === void 0 ? 1 : _c, _d = _b.minimumFractionDigits, minimumFractionDigits = _d === void 0 ? 0 : _d, _e = _b.maximumFractionDigits, maximumFractionDigits = _e === void 0 ? 3 : _e, currency = _b.currency, _f = _b.currencyAsSymbol, currencyAsSymbol = _f === void 0 ? false : _f;
        var intlOptions = {
            minimumIntegerDigits: minimumIntegerDigits,
            minimumFractionDigits: minimumFractionDigits,
            maximumFractionDigits: maximumFractionDigits
        };
        intlOptions.style = NumberFormatStyle[style].toLowerCase();
        if (style == NumberFormatStyle.Currency) {
            intlOptions.currency = currency;
            intlOptions.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
        }
        return new Intl.NumberFormat(locale, intlOptions).format(number);
    };
    return NumberFormatter;
})();
exports.NumberFormatter = NumberFormatter;
function digitCondition(len) {
    return len == 2 ? '2-digit' : 'numeric';
}
function nameCondition(len) {
    return len < 4 ? 'short' : 'long';
}
function extractComponents(pattern) {
    var ret = {};
    var i = 0, j;
    while (i < pattern.length) {
        j = i;
        while (j < pattern.length && pattern[j] == pattern[i])
            j++;
        var len = j - i;
        switch (pattern[i]) {
            case 'G':
                ret.era = nameCondition(len);
                break;
            case 'y':
                ret.year = digitCondition(len);
                break;
            case 'M':
                if (len >= 3)
                    ret.month = nameCondition(len);
                else
                    ret.month = digitCondition(len);
                break;
            case 'd':
                ret.day = digitCondition(len);
                break;
            case 'E':
                ret.weekday = nameCondition(len);
                break;
            case 'j':
                ret.hour = digitCondition(len);
                break;
            case 'h':
                ret.hour = digitCondition(len);
                ret.hour12 = true;
                break;
            case 'H':
                ret.hour = digitCondition(len);
                ret.hour12 = false;
                break;
            case 'm':
                ret.minute = digitCondition(len);
                break;
            case 's':
                ret.second = digitCondition(len);
                break;
            case 'z':
                ret.timeZoneName = 'long';
                break;
            case 'Z':
                ret.timeZoneName = 'short';
                break;
        }
        i = j;
    }
    return ret;
}
var dateFormatterCache = new Map();
var DateFormatter = (function () {
    function DateFormatter() {
    }
    DateFormatter.format = function (date, locale, pattern) {
        var key = locale + pattern;
        if (dateFormatterCache.has(key)) {
            return dateFormatterCache.get(key).format(date);
        }
        var formatter = new Intl.DateTimeFormat(locale, extractComponents(pattern));
        dateFormatterCache.set(key, formatter);
        return formatter.format(date);
    };
    return DateFormatter;
})();
exports.DateFormatter = DateFormatter;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js":[function(require,module,exports){
(function (global){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var globalScope;
if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
        // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
        globalScope = self;
    }
    else {
        globalScope = global;
    }
}
else {
    globalScope = window;
}
;
// Need to declare a new variable for global here since TypeScript
// exports the original value of the symbol.
var _global = globalScope;
exports.global = _global;
exports.Type = Function;
function getTypeNameForDebugging(type) {
    return type['name'];
}
exports.getTypeNameForDebugging = getTypeNameForDebugging;
exports.Math = _global.Math;
exports.Date = _global.Date;
var assertionsEnabled_ = typeof _global['assert'] !== 'undefined';
function assertionsEnabled() {
    return assertionsEnabled_;
}
exports.assertionsEnabled = assertionsEnabled;
// TODO: remove calls to assert in production environment
// Note: Can't just export this and import in in other files
// as `assert` is a reserved keyword in Dart
_global.assert = function assert(condition) {
    if (assertionsEnabled_) {
        _global['assert'].call(condition);
    }
};
// This function is needed only to properly support Dart's const expressions
// see https://github.com/angular/ts2dart/pull/151 for more info
function CONST_EXPR(expr) {
    return expr;
}
exports.CONST_EXPR = CONST_EXPR;
function CONST() {
    return function (target) { return target; };
}
exports.CONST = CONST;
function isPresent(obj) {
    return obj !== undefined && obj !== null;
}
exports.isPresent = isPresent;
function isBlank(obj) {
    return obj === undefined || obj === null;
}
exports.isBlank = isBlank;
function isString(obj) {
    return typeof obj === "string";
}
exports.isString = isString;
function isFunction(obj) {
    return typeof obj === "function";
}
exports.isFunction = isFunction;
function isType(obj) {
    return isFunction(obj);
}
exports.isType = isType;
function isStringMap(obj) {
    return typeof obj === 'object' && obj !== null;
}
exports.isStringMap = isStringMap;
function isPromise(obj) {
    return obj instanceof _global.Promise;
}
exports.isPromise = isPromise;
function isArray(obj) {
    return Array.isArray(obj);
}
exports.isArray = isArray;
function isNumber(obj) {
    return typeof obj === 'number';
}
exports.isNumber = isNumber;
function isDate(obj) {
    return obj instanceof exports.Date && !isNaN(obj.valueOf());
}
exports.isDate = isDate;
function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token === undefined || token === null) {
        return '' + token;
    }
    if (token.name) {
        return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf("\n");
    return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
}
exports.stringify = stringify;
// serialize / deserialize enum exist only for consistency with dart API
// enums in typescript don't need to be serialized
function serializeEnum(val) {
    return val;
}
exports.serializeEnum = serializeEnum;
function deserializeEnum(val, values) {
    return val;
}
exports.deserializeEnum = deserializeEnum;
var StringWrapper = (function () {
    function StringWrapper() {
    }
    StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };
    StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };
    StringWrapper.split = function (s, regExp) { return s.split(regExp); };
    StringWrapper.equals = function (s, s2) { return s === s2; };
    StringWrapper.replace = function (s, from, replace) {
        return s.replace(from, replace);
    };
    StringWrapper.replaceAll = function (s, from, replace) {
        return s.replace(from, replace);
    };
    StringWrapper.slice = function (s, from, to) {
        if (from === void 0) { from = 0; }
        if (to === void 0) { to = null; }
        return s.slice(from, to === null ? undefined : to);
    };
    StringWrapper.toUpperCase = function (s) { return s.toUpperCase(); };
    StringWrapper.toLowerCase = function (s) { return s.toLowerCase(); };
    StringWrapper.startsWith = function (s, start) { return s.startsWith(start); };
    StringWrapper.substring = function (s, start, end) {
        if (end === void 0) { end = null; }
        return s.substring(start, end === null ? undefined : end);
    };
    StringWrapper.replaceAllMapped = function (s, from, cb) {
        return s.replace(from, function () {
            var matches = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                matches[_i - 0] = arguments[_i];
            }
            // Remove offset & string from the result array
            matches.splice(-2, 2);
            // The callback receives match, p1, ..., pn
            return cb(matches);
        });
    };
    StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };
    StringWrapper.compare = function (a, b) {
        if (a < b) {
            return -1;
        }
        else if (a > b) {
            return 1;
        }
        else {
            return 0;
        }
    };
    return StringWrapper;
})();
exports.StringWrapper = StringWrapper;
var StringJoiner = (function () {
    function StringJoiner(parts) {
        if (parts === void 0) { parts = []; }
        this.parts = parts;
    }
    StringJoiner.prototype.add = function (part) { this.parts.push(part); };
    StringJoiner.prototype.toString = function () { return this.parts.join(""); };
    return StringJoiner;
})();
exports.StringJoiner = StringJoiner;
var NumberParseError = (function (_super) {
    __extends(NumberParseError, _super);
    function NumberParseError(message) {
        _super.call(this);
        this.message = message;
    }
    NumberParseError.prototype.toString = function () { return this.message; };
    return NumberParseError;
})(Error);
exports.NumberParseError = NumberParseError;
var NumberWrapper = (function () {
    function NumberWrapper() {
    }
    NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };
    NumberWrapper.equal = function (a, b) { return a === b; };
    NumberWrapper.parseIntAutoRadix = function (text) {
        var result = parseInt(text);
        if (isNaN(result)) {
            throw new NumberParseError("Invalid integer literal when parsing " + text);
        }
        return result;
    };
    NumberWrapper.parseInt = function (text, radix) {
        if (radix == 10) {
            if (/^(\-|\+)?[0-9]+$/.test(text)) {
                return parseInt(text, radix);
            }
        }
        else if (radix == 16) {
            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
                return parseInt(text, radix);
            }
        }
        else {
            var result = parseInt(text, radix);
            if (!isNaN(result)) {
                return result;
            }
        }
        throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " +
            radix);
    };
    // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
    NumberWrapper.parseFloat = function (text) { return parseFloat(text); };
    Object.defineProperty(NumberWrapper, "NaN", {
        get: function () { return NaN; },
        enumerable: true,
        configurable: true
    });
    NumberWrapper.isNaN = function (value) { return isNaN(value); };
    NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };
    return NumberWrapper;
})();
exports.NumberWrapper = NumberWrapper;
exports.RegExp = _global.RegExp;
var RegExpWrapper = (function () {
    function RegExpWrapper() {
    }
    RegExpWrapper.create = function (regExpStr, flags) {
        if (flags === void 0) { flags = ''; }
        flags = flags.replace(/g/g, '');
        return new _global.RegExp(regExpStr, flags + 'g');
    };
    RegExpWrapper.firstMatch = function (regExp, input) {
        // Reset multimatch regex state
        regExp.lastIndex = 0;
        return regExp.exec(input);
    };
    RegExpWrapper.test = function (regExp, input) {
        regExp.lastIndex = 0;
        return regExp.test(input);
    };
    RegExpWrapper.matcher = function (regExp, input) {
        // Reset regex state for the case
        // someone did not loop over all matches
        // last time.
        regExp.lastIndex = 0;
        return { re: regExp, input: input };
    };
    return RegExpWrapper;
})();
exports.RegExpWrapper = RegExpWrapper;
var RegExpMatcherWrapper = (function () {
    function RegExpMatcherWrapper() {
    }
    RegExpMatcherWrapper.next = function (matcher) {
        return matcher.re.exec(matcher.input);
    };
    return RegExpMatcherWrapper;
})();
exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
var FunctionWrapper = (function () {
    function FunctionWrapper() {
    }
    FunctionWrapper.apply = function (fn, posArgs) { return fn.apply(null, posArgs); };
    return FunctionWrapper;
})();
exports.FunctionWrapper = FunctionWrapper;
// JS has NaN !== NaN
function looseIdentical(a, b) {
    return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
}
exports.looseIdentical = looseIdentical;
// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
function getMapKey(value) {
    return value;
}
exports.getMapKey = getMapKey;
function normalizeBlank(obj) {
    return isBlank(obj) ? null : obj;
}
exports.normalizeBlank = normalizeBlank;
function normalizeBool(obj) {
    return isBlank(obj) ? false : obj;
}
exports.normalizeBool = normalizeBool;
function isJsObject(o) {
    return o !== null && (typeof o === "function" || typeof o === "object");
}
exports.isJsObject = isJsObject;
function print(obj) {
    console.log(obj);
}
exports.print = print;
// Can't be all uppercase as our transpiler would think it is a special directive...
var Json = (function () {
    function Json() {
    }
    Json.parse = function (s) { return _global.JSON.parse(s); };
    Json.stringify = function (data) {
        // Dart doesn't take 3 arguments
        return _global.JSON.stringify(data, null, 2);
    };
    return Json;
})();
exports.Json = Json;
var DateWrapper = (function () {
    function DateWrapper() {
    }
    DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
        if (month === void 0) { month = 1; }
        if (day === void 0) { day = 1; }
        if (hour === void 0) { hour = 0; }
        if (minutes === void 0) { minutes = 0; }
        if (seconds === void 0) { seconds = 0; }
        if (milliseconds === void 0) { milliseconds = 0; }
        return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
    };
    DateWrapper.fromISOString = function (str) { return new exports.Date(str); };
    DateWrapper.fromMillis = function (ms) { return new exports.Date(ms); };
    DateWrapper.toMillis = function (date) { return date.getTime(); };
    DateWrapper.now = function () { return new exports.Date(); };
    DateWrapper.toJson = function (date) { return date.toJSON(); };
    return DateWrapper;
})();
exports.DateWrapper = DateWrapper;
function setValueOnPath(global, path, value) {
    var parts = path.split('.');
    var obj = global;
    while (parts.length > 1) {
        var name = parts.shift();
        if (obj.hasOwnProperty(name)) {
            obj = obj[name];
        }
        else {
            obj = obj[name] = {};
        }
    }
    if (obj === undefined || obj === null) {
        obj = {};
    }
    obj[parts.shift()] = value;
}
exports.setValueOnPath = setValueOnPath;
var _symbolIterator = null;
function getSymbolIterator() {
    if (isBlank(_symbolIterator)) {
        if (isPresent(Symbol) && isPresent(Symbol.iterator)) {
            _symbolIterator = Symbol.iterator;
        }
        else {
            // es6-shim specific logic
            var keys = Object.getOwnPropertyNames(Map.prototype);
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (key !== 'entries' && key !== 'size' &&
                    Map.prototype[key] === Map.prototype['entries']) {
                    _symbolIterator = key;
                }
            }
        }
    }
    return _symbolIterator;
}
exports.getSymbolIterator = getSymbolIterator;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/math.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
exports.Math = lang_1.global.Math;
exports.NaN = typeof exports.NaN;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/promise.js":[function(require,module,exports){
'use strict';// Promises are put into their own facade file so that they can be used without
// introducing a dependency on rxjs. They are re-exported through facade/async.
var PromiseWrapper = (function () {
    function PromiseWrapper() {
    }
    PromiseWrapper.resolve = function (obj) { return Promise.resolve(obj); };
    PromiseWrapper.reject = function (obj, _) { return Promise.reject(obj); };
    // Note: We can't rename this method into `catch`, as this is not a valid
    // method name in Dart.
    PromiseWrapper.catchError = function (promise, onError) {
        return promise.catch(onError);
    };
    PromiseWrapper.all = function (promises) {
        if (promises.length == 0)
            return Promise.resolve([]);
        return Promise.all(promises);
    };
    PromiseWrapper.then = function (promise, success, rejection) {
        return promise.then(success, rejection);
    };
    PromiseWrapper.wrap = function (computation) {
        return new Promise(function (res, rej) {
            try {
                res(computation());
            }
            catch (e) {
                rej(e);
            }
        });
    };
    PromiseWrapper.completer = function () {
        var resolve;
        var reject;
        var p = new Promise(function (res, rej) {
            resolve = res;
            reject = rej;
        });
        return { promise: p, resolve: resolve, reject: reject };
    };
    return PromiseWrapper;
})();
exports.PromiseWrapper = PromiseWrapper;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms.js":[function(require,module,exports){
'use strict';/**
 * @module
 * @description
 * This module is used for handling user input, by defining and building a {@link ControlGroup} that
 * consists of
 * {@link Control} objects, and mapping them onto the DOM. {@link Control} objects can then be used
 * to read information
 * from the form DOM elements.
 *
 * This module is not included in the `angular2` module; you must import the forms module
 * explicitly.
 *
 */
var model_1 = require('./forms/model');
exports.AbstractControl = model_1.AbstractControl;
exports.Control = model_1.Control;
exports.ControlGroup = model_1.ControlGroup;
exports.ControlArray = model_1.ControlArray;
var abstract_control_directive_1 = require('./forms/directives/abstract_control_directive');
exports.AbstractControlDirective = abstract_control_directive_1.AbstractControlDirective;
var control_container_1 = require('./forms/directives/control_container');
exports.ControlContainer = control_container_1.ControlContainer;
var ng_control_name_1 = require('./forms/directives/ng_control_name');
exports.NgControlName = ng_control_name_1.NgControlName;
var ng_form_control_1 = require('./forms/directives/ng_form_control');
exports.NgFormControl = ng_form_control_1.NgFormControl;
var ng_model_1 = require('./forms/directives/ng_model');
exports.NgModel = ng_model_1.NgModel;
var ng_control_1 = require('./forms/directives/ng_control');
exports.NgControl = ng_control_1.NgControl;
var ng_control_group_1 = require('./forms/directives/ng_control_group');
exports.NgControlGroup = ng_control_group_1.NgControlGroup;
var ng_form_model_1 = require('./forms/directives/ng_form_model');
exports.NgFormModel = ng_form_model_1.NgFormModel;
var ng_form_1 = require('./forms/directives/ng_form');
exports.NgForm = ng_form_1.NgForm;
var default_value_accessor_1 = require('./forms/directives/default_value_accessor');
exports.DefaultValueAccessor = default_value_accessor_1.DefaultValueAccessor;
var ng_control_status_1 = require('./forms/directives/ng_control_status');
exports.NgControlStatus = ng_control_status_1.NgControlStatus;
var checkbox_value_accessor_1 = require('./forms/directives/checkbox_value_accessor');
exports.CheckboxControlValueAccessor = checkbox_value_accessor_1.CheckboxControlValueAccessor;
var select_control_value_accessor_1 = require('./forms/directives/select_control_value_accessor');
exports.NgSelectOption = select_control_value_accessor_1.NgSelectOption;
exports.SelectControlValueAccessor = select_control_value_accessor_1.SelectControlValueAccessor;
var directives_1 = require('./forms/directives');
exports.FORM_DIRECTIVES = directives_1.FORM_DIRECTIVES;
var validators_1 = require('./forms/validators');
exports.NG_VALIDATORS = validators_1.NG_VALIDATORS;
exports.Validators = validators_1.Validators;
var validators_2 = require('./forms/directives/validators');
exports.RequiredValidator = validators_2.RequiredValidator;
exports.MinLengthValidator = validators_2.MinLengthValidator;
exports.MaxLengthValidator = validators_2.MaxLengthValidator;
var form_builder_1 = require('./forms/form_builder');
exports.FormBuilder = form_builder_1.FormBuilder;
var form_builder_2 = require('./forms/form_builder');
var lang_1 = require('./facade/lang');
/**
 * Shorthand set of providers used for building Angular forms.
 *
 * ### Example:
 *
 * ```typescript
 * bootstrap(MyApp, [FORM_PROVIDERS]);
 * ```
 */
exports.FORM_PROVIDERS = lang_1.CONST_EXPR([form_builder_2.FormBuilder]);
/**
 * @deprecated
 */
exports.FORM_BINDINGS = exports.FORM_PROVIDERS;

},{"./facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","./forms/directives":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives.js","./forms/directives/abstract_control_directive":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/abstract_control_directive.js","./forms/directives/checkbox_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/checkbox_value_accessor.js","./forms/directives/control_container":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/control_container.js","./forms/directives/default_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/default_value_accessor.js","./forms/directives/ng_control":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control.js","./forms/directives/ng_control_group":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control_group.js","./forms/directives/ng_control_name":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control_name.js","./forms/directives/ng_control_status":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control_status.js","./forms/directives/ng_form":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_form.js","./forms/directives/ng_form_control":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_form_control.js","./forms/directives/ng_form_model":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_form_model.js","./forms/directives/ng_model":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_model.js","./forms/directives/select_control_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/select_control_value_accessor.js","./forms/directives/validators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/validators.js","./forms/form_builder":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/form_builder.js","./forms/model":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/model.js","./forms/validators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/validators.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var ng_control_name_1 = require('./directives/ng_control_name');
var ng_form_control_1 = require('./directives/ng_form_control');
var ng_model_1 = require('./directives/ng_model');
var ng_control_group_1 = require('./directives/ng_control_group');
var ng_form_model_1 = require('./directives/ng_form_model');
var ng_form_1 = require('./directives/ng_form');
var default_value_accessor_1 = require('./directives/default_value_accessor');
var checkbox_value_accessor_1 = require('./directives/checkbox_value_accessor');
var number_value_accessor_1 = require('./directives/number_value_accessor');
var ng_control_status_1 = require('./directives/ng_control_status');
var select_control_value_accessor_1 = require('./directives/select_control_value_accessor');
var validators_1 = require('./directives/validators');
var ng_control_name_2 = require('./directives/ng_control_name');
exports.NgControlName = ng_control_name_2.NgControlName;
var ng_form_control_2 = require('./directives/ng_form_control');
exports.NgFormControl = ng_form_control_2.NgFormControl;
var ng_model_2 = require('./directives/ng_model');
exports.NgModel = ng_model_2.NgModel;
var ng_control_1 = require('./directives/ng_control');
exports.NgControl = ng_control_1.NgControl;
var ng_control_group_2 = require('./directives/ng_control_group');
exports.NgControlGroup = ng_control_group_2.NgControlGroup;
var ng_form_model_2 = require('./directives/ng_form_model');
exports.NgFormModel = ng_form_model_2.NgFormModel;
var ng_form_2 = require('./directives/ng_form');
exports.NgForm = ng_form_2.NgForm;
var default_value_accessor_2 = require('./directives/default_value_accessor');
exports.DefaultValueAccessor = default_value_accessor_2.DefaultValueAccessor;
var checkbox_value_accessor_2 = require('./directives/checkbox_value_accessor');
exports.CheckboxControlValueAccessor = checkbox_value_accessor_2.CheckboxControlValueAccessor;
var select_control_value_accessor_2 = require('./directives/select_control_value_accessor');
exports.SelectControlValueAccessor = select_control_value_accessor_2.SelectControlValueAccessor;
exports.NgSelectOption = select_control_value_accessor_2.NgSelectOption;
var validators_2 = require('./directives/validators');
exports.RequiredValidator = validators_2.RequiredValidator;
exports.MinLengthValidator = validators_2.MinLengthValidator;
exports.MaxLengthValidator = validators_2.MaxLengthValidator;
var ng_control_status_2 = require('./directives/ng_control_status');
exports.NgControlStatus = ng_control_status_2.NgControlStatus;
/**
 *
 * A list of all the form directives used as part of a `@View` annotation.
 *
 *  This is a shorthand for importing them each individually.
 *
 * ### Example:
 *
 * ```typescript
 * @Component({
 *   selector: 'my-app',
 *   directives: [FORM_DIRECTIVES]
 * })
 * class MyApp {}
 * ```
 */
exports.FORM_DIRECTIVES = lang_1.CONST_EXPR([
    ng_control_name_1.NgControlName,
    ng_control_group_1.NgControlGroup,
    ng_form_control_1.NgFormControl,
    ng_model_1.NgModel,
    ng_form_model_1.NgFormModel,
    ng_form_1.NgForm,
    select_control_value_accessor_1.NgSelectOption,
    default_value_accessor_1.DefaultValueAccessor,
    number_value_accessor_1.NumberValueAccessor,
    checkbox_value_accessor_1.CheckboxControlValueAccessor,
    select_control_value_accessor_1.SelectControlValueAccessor,
    ng_control_status_1.NgControlStatus,
    validators_1.RequiredValidator,
    validators_1.MinLengthValidator,
    validators_1.MaxLengthValidator
]);

},{"./directives/checkbox_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/checkbox_value_accessor.js","./directives/default_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/default_value_accessor.js","./directives/ng_control":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control.js","./directives/ng_control_group":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control_group.js","./directives/ng_control_name":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control_name.js","./directives/ng_control_status":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control_status.js","./directives/ng_form":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_form.js","./directives/ng_form_control":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_form_control.js","./directives/ng_form_model":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_form_model.js","./directives/ng_model":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_model.js","./directives/number_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/number_value_accessor.js","./directives/select_control_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/select_control_value_accessor.js","./directives/validators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/validators.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/abstract_control_directive.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var AbstractControlDirective = (function () {
    function AbstractControlDirective() {
    }
    Object.defineProperty(AbstractControlDirective.prototype, "control", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "value", {
        get: function () { return lang_1.isPresent(this.control) ? this.control.value : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "valid", {
        get: function () { return lang_1.isPresent(this.control) ? this.control.valid : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "errors", {
        get: function () {
            return lang_1.isPresent(this.control) ? this.control.errors : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
        get: function () { return lang_1.isPresent(this.control) ? this.control.pristine : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
        get: function () { return lang_1.isPresent(this.control) ? this.control.dirty : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "touched", {
        get: function () { return lang_1.isPresent(this.control) ? this.control.touched : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
        get: function () { return lang_1.isPresent(this.control) ? this.control.untouched : null; },
        enumerable: true,
        configurable: true
    });
    return AbstractControlDirective;
})();
exports.AbstractControlDirective = AbstractControlDirective;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/checkbox_value_accessor.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var metadata_1 = require('angular2/src/core/metadata');
var render_1 = require('angular2/src/core/render');
var linker_1 = require('angular2/src/core/linker');
var di_1 = require('angular2/src/core/di');
var control_value_accessor_1 = require('./control_value_accessor');
var lang_1 = require('angular2/src/core/facade/lang');
var shared_1 = require('./shared');
var CHECKBOX_VALUE_ACCESSOR = lang_1.CONST_EXPR(new di_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: di_1.forwardRef(function () { return CheckboxControlValueAccessor; }), multi: true }));
/**
 * The accessor for writing a value and listening to changes on a checkbox input element.
 *
 *  # Example
 *  ```
 *  <input type="checkbox" [ng-control]="rememberLogin">
 *  ```
 */
var CheckboxControlValueAccessor = (function () {
    function CheckboxControlValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    CheckboxControlValueAccessor.prototype.writeValue = function (value) { shared_1.setProperty(this._renderer, this._elementRef, "checked", value); };
    CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    CheckboxControlValueAccessor = __decorate([
        metadata_1.Directive({
            selector: 'input[type=checkbox][ng-control],input[type=checkbox][ng-form-control],input[type=checkbox][ng-model]',
            host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
            bindings: [CHECKBOX_VALUE_ACCESSOR]
        }), 
        __metadata('design:paramtypes', [render_1.Renderer, linker_1.ElementRef])
    ], CheckboxControlValueAccessor);
    return CheckboxControlValueAccessor;
})();
exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;

},{"./control_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/control_value_accessor.js","./shared":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/shared.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js","angular2/src/core/render":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/control_container.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var abstract_control_directive_1 = require('./abstract_control_directive');
/**
 * A directive that contains multiple {@link NgControl}.
 *
 * Only used by the forms module.
 */
var ControlContainer = (function (_super) {
    __extends(ControlContainer, _super);
    function ControlContainer() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(ControlContainer.prototype, "formDirective", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlContainer.prototype, "path", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    return ControlContainer;
})(abstract_control_directive_1.AbstractControlDirective);
exports.ControlContainer = ControlContainer;

},{"./abstract_control_directive":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/abstract_control_directive.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/control_value_accessor.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var di_1 = require('angular2/src/core/di');
exports.NG_VALUE_ACCESSOR = lang_1.CONST_EXPR(new di_1.OpaqueToken("NgValueAccessor"));

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/default_value_accessor.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var metadata_1 = require('angular2/src/core/metadata');
var linker_1 = require('angular2/src/core/linker');
var render_1 = require('angular2/src/core/render');
var di_1 = require('angular2/src/core/di');
var control_value_accessor_1 = require('./control_value_accessor');
var lang_1 = require('angular2/src/core/facade/lang');
var shared_1 = require('./shared');
var DEFAULT_VALUE_ACCESSOR = lang_1.CONST_EXPR(new di_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: di_1.forwardRef(function () { return DefaultValueAccessor; }), multi: true }));
/**
 * The default accessor for writing a value and listening to changes that is used by the
 * {@link NgModel}, {@link NgFormControl}, and {@link NgControlName} directives.
 *
 *  # Example
 *  ```
 *  <input type="text" [(ng-model)]="searchQuery">
 *  ```
 */
var DefaultValueAccessor = (function () {
    function DefaultValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    DefaultValueAccessor.prototype.writeValue = function (value) {
        var normalizedValue = lang_1.isBlank(value) ? '' : value;
        shared_1.setProperty(this._renderer, this._elementRef, 'value', normalizedValue);
    };
    DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    DefaultValueAccessor = __decorate([
        metadata_1.Directive({
            selector: '[ng-control],[ng-model],[ng-form-control]',
            host: {
                '(change)': 'onChange($event.target.value)',
                '(input)': 'onChange($event.target.value)',
                '(blur)': 'onTouched()'
            },
            bindings: [DEFAULT_VALUE_ACCESSOR]
        }), 
        __metadata('design:paramtypes', [render_1.Renderer, linker_1.ElementRef])
    ], DefaultValueAccessor);
    return DefaultValueAccessor;
})();
exports.DefaultValueAccessor = DefaultValueAccessor;

},{"./control_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/control_value_accessor.js","./shared":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/shared.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js","angular2/src/core/render":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var abstract_control_directive_1 = require('./abstract_control_directive');
/**
 * A base class that all control directive extend.
 * It binds a {@link Control} object to a DOM element.
 */
// Cannot currently be abstract because it would contain
// an abstract method in the public API, and we cannot reflect
// on that in Dart due to https://github.com/dart-lang/sdk/issues/18721
// Also we don't have abstract setters, see https://github.com/Microsoft/TypeScript/issues/4669
var NgControl = (function (_super) {
    __extends(NgControl, _super);
    function NgControl() {
        _super.apply(this, arguments);
        this.name = null;
        this.valueAccessor = null;
    }
    Object.defineProperty(NgControl.prototype, "validator", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgControl.prototype, "path", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    NgControl.prototype.viewToModelUpdate = function (newValue) { };
    return NgControl;
})(abstract_control_directive_1.AbstractControlDirective);
exports.NgControl = NgControl;

},{"./abstract_control_directive":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/abstract_control_directive.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control_group.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var metadata_1 = require('angular2/src/core/metadata');
var di_1 = require('angular2/src/core/di');
var lang_1 = require('angular2/src/core/facade/lang');
var control_container_1 = require('./control_container');
var shared_1 = require('./shared');
var controlGroupBinding = lang_1.CONST_EXPR(new di_1.Provider(control_container_1.ControlContainer, { useExisting: di_1.forwardRef(function () { return NgControlGroup; }) }));
/**
 * Creates and binds a control group to a DOM element.
 *
 * This directive can only be used as a child of {@link NgForm} or {@link NgFormModel}.
 *
 * # Example
 *
 * In this example, we create the credentials and personal control groups.
 * We can work with each group separately: check its validity, get its value, listen to its changes.
 *
 *  ```
 * @Component({
 *      selector: "signup-comp",
 *      directives: [FORM_DIRECTIVES],
 *      template: `
 *              <form #f="form" (submit)='onSignUp(f.value)'>
 *                <div ng-control-group='credentials' #credentials="form">
 *                  Login <input type='text' ng-control='login'>
 *                  Password <input type='password' ng-control='password'>
 *                </div>
 *                <div *ng-if="!credentials.valid">Credentials are invalid</div>
 *
 *                <div ng-control-group='personal'>
 *                  Name <input type='text' ng-control='name'>
 *                </div>
 *                <button type='submit'>Sign Up!</button>
 *              </form>
 *      `})
 * class SignupComp {
 *  onSignUp(value) {
 *    // value === {
 *    //  personal: {name: 'some name'},
 *    //  credentials: {login: 'some login', password: 'some password'}}
 *  }
 * }
 *
 *  ```
 */
var NgControlGroup = (function (_super) {
    __extends(NgControlGroup, _super);
    function NgControlGroup(_parent) {
        _super.call(this);
        this._parent = _parent;
    }
    NgControlGroup.prototype.onInit = function () { this.formDirective.addControlGroup(this); };
    NgControlGroup.prototype.onDestroy = function () { this.formDirective.removeControlGroup(this); };
    Object.defineProperty(NgControlGroup.prototype, "control", {
        get: function () { return this.formDirective.getControlGroup(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgControlGroup.prototype, "path", {
        get: function () { return shared_1.controlPath(this.name, this._parent); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgControlGroup.prototype, "formDirective", {
        get: function () { return this._parent.formDirective; },
        enumerable: true,
        configurable: true
    });
    NgControlGroup = __decorate([
        metadata_1.Directive({
            selector: '[ng-control-group]',
            bindings: [controlGroupBinding],
            inputs: ['name: ng-control-group'],
            exportAs: 'form'
        }),
        __param(0, di_1.Host()),
        __param(0, di_1.SkipSelf()), 
        __metadata('design:paramtypes', [control_container_1.ControlContainer])
    ], NgControlGroup);
    return NgControlGroup;
})(control_container_1.ControlContainer);
exports.NgControlGroup = NgControlGroup;

},{"./control_container":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/control_container.js","./shared":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/shared.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control_name.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lang_1 = require('angular2/src/core/facade/lang');
var async_1 = require('angular2/src/core/facade/async');
var metadata_1 = require('angular2/src/core/metadata');
var di_1 = require('angular2/src/core/di');
var control_container_1 = require('./control_container');
var ng_control_1 = require('./ng_control');
var control_value_accessor_1 = require('./control_value_accessor');
var shared_1 = require('./shared');
var validators_1 = require('../validators');
var controlNameBinding = lang_1.CONST_EXPR(new di_1.Provider(ng_control_1.NgControl, { useExisting: di_1.forwardRef(function () { return NgControlName; }) }));
/**
 * Creates and binds a control with a specified name to a DOM element.
 *
 * This directive can only be used as a child of {@link NgForm} or {@link NgFormModel}.

 * # Example
 *
 * In this example, we create the login and password controls.
 * We can work with each control separately: check its validity, get its value, listen to its
 * changes.
 *
 *  ```
 * @Component({
 *      selector: "login-comp",
 *      directives: [FORM_DIRECTIVES],
 *      template: `
 *        <form #f="form" (submit)='onLogIn(f.value)'>
 *          Login <input type='text' ng-control='login' #l="form">
 *          <div *ng-if="!l.valid">Login is invalid</div>
 *
 *          Password <input type='password' ng-control='password'>
 *          <button type='submit'>Log in!</button>
 *        </form>
 *      `})
 * class LoginComp {
 *  onLogIn(value): void {
 *    // value === {login: 'some login', password: 'some password'}
 *  }
 * }
 *  ```
 *
 * We can also use ng-model to bind a domain model to the form.
 *
 *  ```
 * @Component({
 *      selector: "login-comp",
 *      directives: [FORM_DIRECTIVES],
 *      template: `
 *        <form (submit)='onLogIn()'>
 *          Login <input type='text' ng-control='login' [(ng-model)]="credentials.login">
 *          Password <input type='password' ng-control='password'
 *                          [(ng-model)]="credentials.password">
 *          <button type='submit'>Log in!</button>
 *        </form>
 *      `})
 * class LoginComp {
 *  credentials: {login:string, password:string};
 *
 *  onLogIn(): void {
 *    // this.credentials.login === "some login"
 *    // this.credentials.password === "some password"
 *  }
 * }
 *  ```
 */
var NgControlName = (function (_super) {
    __extends(NgControlName, _super);
    function NgControlName(parent, validators, valueAccessors) {
        _super.call(this);
        this.update = new async_1.EventEmitter();
        /** @internal */
        this._added = false;
        this._parent = parent;
        this.validators = validators;
        this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
    }
    NgControlName.prototype.onChanges = function (changes) {
        if (!this._added) {
            this.formDirective.addControl(this);
            this._added = true;
        }
        if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
            this.viewModel = this.model;
            this.formDirective.updateModel(this, this.model);
        }
    };
    NgControlName.prototype.onDestroy = function () { this.formDirective.removeControl(this); };
    NgControlName.prototype.viewToModelUpdate = function (newValue) {
        this.viewModel = newValue;
        async_1.ObservableWrapper.callNext(this.update, newValue);
    };
    Object.defineProperty(NgControlName.prototype, "path", {
        get: function () { return shared_1.controlPath(this.name, this._parent); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgControlName.prototype, "formDirective", {
        get: function () { return this._parent.formDirective; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgControlName.prototype, "control", {
        get: function () { return this.formDirective.getControl(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgControlName.prototype, "validator", {
        get: function () { return validators_1.Validators.compose(this.validators); },
        enumerable: true,
        configurable: true
    });
    NgControlName = __decorate([
        metadata_1.Directive({
            selector: '[ng-control]',
            bindings: [controlNameBinding],
            inputs: ['name: ngControl', 'model: ngModel'],
            outputs: ['update: ngModelChange'],
            exportAs: 'form'
        }),
        __param(0, di_1.Host()),
        __param(0, di_1.SkipSelf()),
        __param(1, di_1.Optional()),
        __param(1, di_1.Inject(validators_1.NG_VALIDATORS)),
        __param(2, di_1.Optional()),
        __param(2, di_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR)), 
        __metadata('design:paramtypes', [control_container_1.ControlContainer, Array, Array])
    ], NgControlName);
    return NgControlName;
})(ng_control_1.NgControl);
exports.NgControlName = NgControlName;

},{"../validators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/validators.js","./control_container":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/control_container.js","./control_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/control_value_accessor.js","./ng_control":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control.js","./shared":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/shared.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control_status.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var metadata_1 = require('angular2/src/core/metadata');
var di_1 = require('angular2/src/core/di');
var ng_control_1 = require('./ng_control');
var lang_1 = require('angular2/src/core/facade/lang');
var NgControlStatus = (function () {
    function NgControlStatus(cd) {
        this._cd = cd;
    }
    Object.defineProperty(NgControlStatus.prototype, "ngClassUntouched", {
        get: function () {
            return lang_1.isPresent(this._cd.control) ? this._cd.control.untouched : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgControlStatus.prototype, "ngClassTouched", {
        get: function () {
            return lang_1.isPresent(this._cd.control) ? this._cd.control.touched : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgControlStatus.prototype, "ngClassPristine", {
        get: function () {
            return lang_1.isPresent(this._cd.control) ? this._cd.control.pristine : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgControlStatus.prototype, "ngClassDirty", {
        get: function () {
            return lang_1.isPresent(this._cd.control) ? this._cd.control.dirty : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgControlStatus.prototype, "ngClassValid", {
        get: function () {
            return lang_1.isPresent(this._cd.control) ? this._cd.control.valid : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgControlStatus.prototype, "ngClassInvalid", {
        get: function () {
            return lang_1.isPresent(this._cd.control) ? !this._cd.control.valid : false;
        },
        enumerable: true,
        configurable: true
    });
    NgControlStatus = __decorate([
        metadata_1.Directive({
            selector: '[ng-control],[ng-model],[ng-form-control]',
            host: {
                '[class.ng-untouched]': 'ngClassUntouched',
                '[class.ng-touched]': 'ngClassTouched',
                '[class.ng-pristine]': 'ngClassPristine',
                '[class.ng-dirty]': 'ngClassDirty',
                '[class.ng-valid]': 'ngClassValid',
                '[class.ng-invalid]': 'ngClassInvalid'
            }
        }),
        __param(0, di_1.Self()), 
        __metadata('design:paramtypes', [ng_control_1.NgControl])
    ], NgControlStatus);
    return NgControlStatus;
})();
exports.NgControlStatus = NgControlStatus;

},{"./ng_control":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_form.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var async_1 = require('angular2/src/core/facade/async');
var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var metadata_1 = require('angular2/src/core/metadata');
var di_1 = require('angular2/src/core/di');
var control_container_1 = require('./control_container');
var model_1 = require('../model');
var shared_1 = require('./shared');
var formDirectiveProvider = lang_1.CONST_EXPR(new di_1.Provider(control_container_1.ControlContainer, { useExisting: di_1.forwardRef(function () { return NgForm; }) }));
/**
 * If `NgForm` is bound in a component, `<form>` elements in that component will be
 * upgraded to use the Angular form system.
 *
 * # Typical Use
 *
 * Include `FORM_DIRECTIVES` in the `directives` section of a {@link View} annotation
 * to use `NgForm` and its associated controls.
 *
 * # Structure
 *
 * An Angular form is a collection of `Control`s in some hierarchy.
 * `Control`s can be at the top level or can be organized in `ControlGroup`s
 * or `ControlArray`s. This hierarchy is reflected in the form's `value`, a
 * JSON object that mirrors the form structure.
 *
 * # Submission
 *
 * The `ng-submit` event signals when the user triggers a form submission.
 *
 * ### Example ([live demo](http://plnkr.co/edit/ltdgYj4P0iY64AR71EpL?p=preview))
 *
 *  ```typescript
 * @Component({
 *   selector: 'my-app',
 *   template: `
 *     <div>
 *       <p>Submit the form to see the data object Angular builds</p>
 *       <h2>NgForm demo</h2>
 *       <form #f="form" (ng-submit)="onSubmit(f.value)">
 *         <h3>Control group: credentials</h3>
 *         <div ng-control-group="credentials">
 *           <p>Login: <input type="text" ng-control="login"></p>
 *           <p>Password: <input type="password" ng-control="password"></p>
 *         </div>
 *         <h3>Control group: person</h3>
 *         <div ng-control-group="person">
 *           <p>First name: <input type="text" ng-control="firstName"></p>
 *           <p>Last name: <input type="text" ng-control="lastName"></p>
 *         </div>
 *         <button type="submit">Submit Form</button>
 *       <p>Form data submitted:</p>
 *       </form>
 *       <pre>{{data}}</pre>
 *     </div>
 * `,
 *   directives: [CORE_DIRECTIVES, FORM_DIRECTIVES]
 * })
 * export class App {
 *   constructor() {}
 *
 *   data: string;
 *
 *   onSubmit(data) {
 *     this.data = JSON.stringify(data, null, 2);
 *   }
 * }
 *  ```
 */
var NgForm = (function (_super) {
    __extends(NgForm, _super);
    function NgForm() {
        _super.apply(this, arguments);
        this.form = new model_1.ControlGroup({});
        this.ngSubmit = new async_1.EventEmitter();
    }
    Object.defineProperty(NgForm.prototype, "formDirective", {
        get: function () { return this; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForm.prototype, "control", {
        get: function () { return this.form; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForm.prototype, "path", {
        get: function () { return []; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForm.prototype, "controls", {
        get: function () { return this.form.controls; },
        enumerable: true,
        configurable: true
    });
    NgForm.prototype.addControl = function (dir) {
        var _this = this;
        this._later(function (_) {
            var container = _this._findContainer(dir.path);
            var ctrl = new model_1.Control();
            shared_1.setUpControl(ctrl, dir);
            container.addControl(dir.name, ctrl);
            ctrl.updateValidity();
        });
    };
    NgForm.prototype.getControl = function (dir) { return this.form.find(dir.path); };
    NgForm.prototype.removeControl = function (dir) {
        var _this = this;
        this._later(function (_) {
            var container = _this._findContainer(dir.path);
            if (lang_1.isPresent(container)) {
                container.removeControl(dir.name);
                container.updateValidity();
            }
        });
    };
    NgForm.prototype.addControlGroup = function (dir) {
        var _this = this;
        this._later(function (_) {
            var container = _this._findContainer(dir.path);
            var group = new model_1.ControlGroup({});
            container.addControl(dir.name, group);
            group.updateValidity();
        });
    };
    NgForm.prototype.removeControlGroup = function (dir) {
        var _this = this;
        this._later(function (_) {
            var container = _this._findContainer(dir.path);
            if (lang_1.isPresent(container)) {
                container.removeControl(dir.name);
                container.updateValidity();
            }
        });
    };
    NgForm.prototype.getControlGroup = function (dir) {
        return this.form.find(dir.path);
    };
    NgForm.prototype.updateModel = function (dir, value) {
        var _this = this;
        this._later(function (_) {
            var ctrl = _this.form.find(dir.path);
            ctrl.updateValue(value);
        });
    };
    NgForm.prototype.onSubmit = function () {
        async_1.ObservableWrapper.callNext(this.ngSubmit, null);
        return false;
    };
    /** @internal */
    NgForm.prototype._findContainer = function (path) {
        path.pop();
        return collection_1.ListWrapper.isEmpty(path) ? this.form : this.form.find(path);
    };
    /** @internal */
    NgForm.prototype._later = function (fn) { async_1.PromiseWrapper.then(async_1.PromiseWrapper.resolve(null), fn, function (_) { }); };
    NgForm = __decorate([
        metadata_1.Directive({
            selector: 'form:not([ng-no-form]):not([ng-form-model]),ng-form,[ng-form]',
            bindings: [formDirectiveProvider],
            host: {
                '(submit)': 'onSubmit()',
            },
            outputs: ['ngSubmit'],
            exportAs: 'form'
        }), 
        __metadata('design:paramtypes', [])
    ], NgForm);
    return NgForm;
})(control_container_1.ControlContainer);
exports.NgForm = NgForm;

},{"../model":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/model.js","./control_container":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/control_container.js","./shared":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/shared.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_form_control.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lang_1 = require('angular2/src/core/facade/lang');
var async_1 = require('angular2/src/core/facade/async');
var metadata_1 = require('angular2/src/core/metadata');
var di_1 = require('angular2/src/core/di');
var ng_control_1 = require('./ng_control');
var validators_1 = require('../validators');
var control_value_accessor_1 = require('./control_value_accessor');
var shared_1 = require('./shared');
var formControlBinding = lang_1.CONST_EXPR(new di_1.Provider(ng_control_1.NgControl, { useExisting: di_1.forwardRef(function () { return NgFormControl; }) }));
/**
 * Binds an existing {@link Control} to a DOM element.
 *
 * ### Example ([live demo](http://plnkr.co/edit/jcQlZ2tTh22BZZ2ucNAT?p=preview))
 *
 * In this example, we bind the control to an input element. When the value of the input element
 * changes, the value of the control will reflect that change. Likewise, if the value of the
 * control changes, the input element reflects that change.
 *
 *  ```typescript
 * @Component({
 *   selector: 'my-app',
 *   template: `
 *     <div>
 *       <h2>NgFormControl Example</h2>
 *       <form>
 *         <p>Element with existing control: <input type="text"
 * [ng-form-control]="loginControl"></p>
 *         <p>Value of existing control: {{loginControl.value}}</p>
 *       </form>
 *     </div>
 *   `,
 *   directives: [CORE_DIRECTIVES, FORM_DIRECTIVES]
 * })
 * export class App {
 *   loginControl: Control = new Control('');
 * }
 *  ```
 *
 * # ng-model
 *
 * We can also use `ng-model` to bind a domain model to the form.
 *
 * ### Example ([live demo](http://plnkr.co/edit/yHMLuHO7DNgT8XvtjTDH?p=preview))
 *
 *  ```typescript
 * @Component({
 *      selector: "login-comp",
 *      directives: [FORM_DIRECTIVES],
 *      template: "<input type='text' [ng-form-control]='loginControl' [(ng-model)]='login'>"
 *      })
 * class LoginComp {
 *  loginControl: Control = new Control('');
 *  login:string;
 * }
 *  ```
 */
var NgFormControl = (function (_super) {
    __extends(NgFormControl, _super);
    function NgFormControl(validators, valueAccessors) {
        _super.call(this);
        this.update = new async_1.EventEmitter();
        /** @internal */
        this._added = false;
        this.validators = validators;
        this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
    }
    NgFormControl.prototype.onChanges = function (changes) {
        if (!this._added) {
            shared_1.setUpControl(this.form, this);
            this.form.updateValidity();
            this._added = true;
        }
        if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
            this.form.updateValue(this.model);
            this.viewModel = this.model;
        }
    };
    Object.defineProperty(NgFormControl.prototype, "path", {
        get: function () { return []; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgFormControl.prototype, "control", {
        get: function () { return this.form; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgFormControl.prototype, "validator", {
        get: function () { return validators_1.Validators.compose(this.validators); },
        enumerable: true,
        configurable: true
    });
    NgFormControl.prototype.viewToModelUpdate = function (newValue) {
        this.viewModel = newValue;
        async_1.ObservableWrapper.callNext(this.update, newValue);
    };
    NgFormControl = __decorate([
        metadata_1.Directive({
            selector: '[ng-form-control]',
            bindings: [formControlBinding],
            inputs: ['form: ngFormControl', 'model: ngModel'],
            outputs: ['update: ngModelChange'],
            exportAs: 'form'
        }),
        __param(0, di_1.Optional()),
        __param(0, di_1.Inject(validators_1.NG_VALIDATORS)),
        __param(1, di_1.Optional()),
        __param(1, di_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR)), 
        __metadata('design:paramtypes', [Array, Array])
    ], NgFormControl);
    return NgFormControl;
})(ng_control_1.NgControl);
exports.NgFormControl = NgFormControl;

},{"../validators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/validators.js","./control_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/control_value_accessor.js","./ng_control":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control.js","./shared":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/shared.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_form_model.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var collection_1 = require('angular2/src/core/facade/collection');
var async_1 = require('angular2/src/core/facade/async');
var metadata_1 = require('angular2/src/core/metadata');
var di_1 = require('angular2/src/core/di');
var control_container_1 = require('./control_container');
var shared_1 = require('./shared');
var formDirectiveProvider = lang_1.CONST_EXPR(new di_1.Provider(control_container_1.ControlContainer, { useExisting: di_1.forwardRef(function () { return NgFormModel; }) }));
/**
 * Binds an existing control group to a DOM element.
 *
 * ### Example ([live demo](http://plnkr.co/edit/jqrVirudY8anJxTMUjTP?p=preview))
 *
 * In this example, we bind the control group to the form element, and we bind the login and
 * password controls to the login and password elements.
 *
 *  ```typescript
 * @Component({
 *   selector: 'my-app',
 *   template: `
 *     <div>
 *       <h2>NgFormModel Example</h2>
 *       <form [ng-form-model]="loginForm">
 *         <p>Login: <input type="text" ng-control="login"></p>
 *         <p>Password: <input type="password" ng-control="password"></p>
 *       </form>
 *       <p>Value:</p>
 *       <pre>{{value}}</pre>
 *     </div>
 *   `,
 *   directives: [FORM_DIRECTIVES]
 * })
 * export class App {
 *   loginForm: ControlGroup;
 *
 *   constructor() {
 *     this.loginForm = new ControlGroup({
 *       login: new Control(""),
 *       password: new Control("")
 *     });
 *   }
 *
 *   get value(): string {
 *     return JSON.stringify(this.loginForm.value, null, 2);
 *   }
 * }
 *  ```
 *
 * We can also use ng-model to bind a domain model to the form.
 *
 *  ```typescript
 * @Component({
 *      selector: "login-comp",
 *      directives: [FORM_DIRECTIVES],
 *      template: `
 *        <form [ng-form-model]='loginForm'>
 *          Login <input type='text' ng-control='login' [(ng-model)]='credentials.login'>
 *          Password <input type='password' ng-control='password'
 *                          [(ng-model)]='credentials.password'>
 *          <button (click)="onLogin()">Login</button>
 *        </form>`
 *      })
 * class LoginComp {
 *  credentials: {login: string, password: string};
 *  loginForm: ControlGroup;
 *
 *  constructor() {
 *    this.loginForm = new ControlGroup({
 *      login: new Control(""),
 *      password: new Control("")
 *    });
 *  }
 *
 *  onLogin(): void {
 *    // this.credentials.login === 'some login'
 *    // this.credentials.password === 'some password'
 *  }
 * }
 *  ```
 */
var NgFormModel = (function (_super) {
    __extends(NgFormModel, _super);
    function NgFormModel() {
        _super.apply(this, arguments);
        this.form = null;
        this.directives = [];
        this.ngSubmit = new async_1.EventEmitter();
    }
    NgFormModel.prototype.onChanges = function (_) { this._updateDomValue(); };
    Object.defineProperty(NgFormModel.prototype, "formDirective", {
        get: function () { return this; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgFormModel.prototype, "control", {
        get: function () { return this.form; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgFormModel.prototype, "path", {
        get: function () { return []; },
        enumerable: true,
        configurable: true
    });
    NgFormModel.prototype.addControl = function (dir) {
        var ctrl = this.form.find(dir.path);
        shared_1.setUpControl(ctrl, dir);
        ctrl.updateValidity();
        this.directives.push(dir);
    };
    NgFormModel.prototype.getControl = function (dir) { return this.form.find(dir.path); };
    NgFormModel.prototype.removeControl = function (dir) { collection_1.ListWrapper.remove(this.directives, dir); };
    NgFormModel.prototype.addControlGroup = function (dir) { };
    NgFormModel.prototype.removeControlGroup = function (dir) { };
    NgFormModel.prototype.getControlGroup = function (dir) {
        return this.form.find(dir.path);
    };
    NgFormModel.prototype.updateModel = function (dir, value) {
        var ctrl = this.form.find(dir.path);
        ctrl.updateValue(value);
    };
    NgFormModel.prototype.onSubmit = function () {
        async_1.ObservableWrapper.callNext(this.ngSubmit, null);
        return false;
    };
    /** @internal */
    NgFormModel.prototype._updateDomValue = function () {
        var _this = this;
        this.directives.forEach(function (dir) {
            var ctrl = _this.form.find(dir.path);
            dir.valueAccessor.writeValue(ctrl.value);
        });
    };
    NgFormModel = __decorate([
        metadata_1.Directive({
            selector: '[ng-form-model]',
            bindings: [formDirectiveProvider],
            inputs: ['form: ng-form-model'],
            host: { '(submit)': 'onSubmit()' },
            outputs: ['ngSubmit'],
            exportAs: 'form'
        }), 
        __metadata('design:paramtypes', [])
    ], NgFormModel);
    return NgFormModel;
})(control_container_1.ControlContainer);
exports.NgFormModel = NgFormModel;

},{"./control_container":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/control_container.js","./shared":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/shared.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_model.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lang_1 = require('angular2/src/core/facade/lang');
var async_1 = require('angular2/src/core/facade/async');
var metadata_1 = require('angular2/src/core/metadata');
var di_1 = require('angular2/src/core/di');
var control_value_accessor_1 = require('./control_value_accessor');
var ng_control_1 = require('./ng_control');
var model_1 = require('../model');
var validators_1 = require('../validators');
var shared_1 = require('./shared');
var formControlBinding = lang_1.CONST_EXPR(new di_1.Provider(ng_control_1.NgControl, { useExisting: di_1.forwardRef(function () { return NgModel; }) }));
/**
 * Binds a domain model to a form control.
 *
 * # Usage
 *
 * `ng-model` binds an existing domain model to a form control. For a
 * two-way binding, use `[(ng-model)]` to ensure the model updates in
 * both directions.
 *
 * ### Example ([live demo](http://plnkr.co/edit/R3UX5qDaUqFO2VYR0UzH?p=preview))
 *  ```typescript
 * @Component({
 *      selector: "search-comp",
 *      directives: [FORM_DIRECTIVES],
 *      template: `<input type='text' [(ng-model)]="searchQuery">`
 *      })
 * class SearchComp {
 *  searchQuery: string;
 * }
 *  ```
 */
var NgModel = (function (_super) {
    __extends(NgModel, _super);
    function NgModel(validators, valueAccessors) {
        _super.call(this);
        /** @internal */
        this._control = new model_1.Control();
        /** @internal */
        this._added = false;
        this.update = new async_1.EventEmitter();
        this.validators = validators;
        this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
    }
    NgModel.prototype.onChanges = function (changes) {
        if (!this._added) {
            shared_1.setUpControl(this._control, this);
            this._control.updateValidity();
            this._added = true;
        }
        if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
            this._control.updateValue(this.model);
            this.viewModel = this.model;
        }
    };
    Object.defineProperty(NgModel.prototype, "control", {
        get: function () { return this._control; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModel.prototype, "path", {
        get: function () { return []; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModel.prototype, "validator", {
        get: function () { return validators_1.Validators.compose(this.validators); },
        enumerable: true,
        configurable: true
    });
    NgModel.prototype.viewToModelUpdate = function (newValue) {
        this.viewModel = newValue;
        async_1.ObservableWrapper.callNext(this.update, newValue);
    };
    NgModel = __decorate([
        metadata_1.Directive({
            selector: '[ng-model]:not([ng-control]):not([ng-form-control])',
            bindings: [formControlBinding],
            inputs: ['model: ngModel'],
            outputs: ['update: ngModelChange'],
            exportAs: 'form'
        }),
        __param(0, di_1.Optional()),
        __param(0, di_1.Inject(validators_1.NG_VALIDATORS)),
        __param(1, di_1.Optional()),
        __param(1, di_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR)), 
        __metadata('design:paramtypes', [Array, Array])
    ], NgModel);
    return NgModel;
})(ng_control_1.NgControl);
exports.NgModel = NgModel;

},{"../model":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/model.js","../validators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/validators.js","./control_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/control_value_accessor.js","./ng_control":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/ng_control.js","./shared":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/shared.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/number_value_accessor.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var metadata_1 = require('angular2/src/core/metadata');
var linker_1 = require('angular2/src/core/linker');
var render_1 = require('angular2/src/core/render');
var di_1 = require('angular2/src/core/di');
var control_value_accessor_1 = require('./control_value_accessor');
var lang_1 = require('angular2/src/core/facade/lang');
var shared_1 = require('./shared');
var NUMBER_VALUE_ACCESSOR = lang_1.CONST_EXPR(new di_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: di_1.forwardRef(function () { return NumberValueAccessor; }), multi: true }));
/**
 * The accessor for writing a number value and listening to changes that is used by the
 * {@link NgModel}, {@link NgFormControl}, and {@link NgControlName} directives.
 *
 *  # Example
 *  ```
 *  <input type="number" [(ng-model)]="age">
 *  ```
 */
var NumberValueAccessor = (function () {
    function NumberValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    NumberValueAccessor.prototype.writeValue = function (value) { shared_1.setProperty(this._renderer, this._elementRef, 'value', value); };
    NumberValueAccessor.prototype.registerOnChange = function (fn) {
        this.onChange = function (value) { fn(lang_1.NumberWrapper.parseFloat(value)); };
    };
    NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    NumberValueAccessor = __decorate([
        metadata_1.Directive({
            selector: 'input[type=number][ng-control],input[type=number][ng-form-control],input[type=number][ng-model]',
            host: {
                '(change)': 'onChange($event.target.value)',
                '(input)': 'onChange($event.target.value)',
                '(blur)': 'onTouched()'
            },
            bindings: [NUMBER_VALUE_ACCESSOR]
        }), 
        __metadata('design:paramtypes', [render_1.Renderer, linker_1.ElementRef])
    ], NumberValueAccessor);
    return NumberValueAccessor;
})();
exports.NumberValueAccessor = NumberValueAccessor;

},{"./control_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/control_value_accessor.js","./shared":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/shared.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js","angular2/src/core/render":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/select_control_value_accessor.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var di_1 = require('angular2/src/core/di');
var render_1 = require('angular2/src/core/render');
var linker_1 = require('angular2/src/core/linker');
var metadata_1 = require('angular2/src/core/metadata');
var async_1 = require('angular2/src/core/facade/async');
var control_value_accessor_1 = require('./control_value_accessor');
var lang_1 = require('angular2/src/core/facade/lang');
var shared_1 = require('./shared');
var SELECT_VALUE_ACCESSOR = lang_1.CONST_EXPR(new di_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: di_1.forwardRef(function () { return SelectControlValueAccessor; }), multi: true }));
/**
 * Marks `<option>` as dynamic, so Angular can be notified when options change.
 *
 * #Example:
 *
 * ```
 * <select ng-control="city">
 *   <option *ng-for="#c of cities" [value]="c"></option>
 * </select>
 * ```
 */
var NgSelectOption = (function () {
    function NgSelectOption() {
    }
    NgSelectOption = __decorate([
        metadata_1.Directive({ selector: 'option' }), 
        __metadata('design:paramtypes', [])
    ], NgSelectOption);
    return NgSelectOption;
})();
exports.NgSelectOption = NgSelectOption;
/**
 * The accessor for writing a value and listening to changes on a select element.
 */
var SelectControlValueAccessor = (function () {
    function SelectControlValueAccessor(_renderer, _elementRef, query) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this.onChange = function (_) { };
        this.onTouched = function () { };
        this._updateValueWhenListOfOptionsChanges(query);
    }
    SelectControlValueAccessor.prototype.writeValue = function (value) {
        this.value = value;
        shared_1.setProperty(this._renderer, this._elementRef, "value", value);
    };
    SelectControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    SelectControlValueAccessor.prototype._updateValueWhenListOfOptionsChanges = function (query) {
        var _this = this;
        async_1.ObservableWrapper.subscribe(query.changes, function (_) { return _this.writeValue(_this.value); });
    };
    SelectControlValueAccessor = __decorate([
        metadata_1.Directive({
            selector: 'select[ng-control],select[ng-form-control],select[ng-model]',
            host: {
                '(change)': 'onChange($event.target.value)',
                '(input)': 'onChange($event.target.value)',
                '(blur)': 'onTouched()'
            },
            bindings: [SELECT_VALUE_ACCESSOR]
        }),
        __param(2, metadata_1.Query(NgSelectOption, { descendants: true })), 
        __metadata('design:paramtypes', [render_1.Renderer, linker_1.ElementRef, linker_1.QueryList])
    ], SelectControlValueAccessor);
    return SelectControlValueAccessor;
})();
exports.SelectControlValueAccessor = SelectControlValueAccessor;

},{"./control_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/control_value_accessor.js","./shared":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/shared.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js","angular2/src/core/render":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/shared.js":[function(require,module,exports){
'use strict';var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var validators_1 = require('../validators');
var default_value_accessor_1 = require('./default_value_accessor');
var number_value_accessor_1 = require('./number_value_accessor');
var checkbox_value_accessor_1 = require('./checkbox_value_accessor');
var select_control_value_accessor_1 = require('./select_control_value_accessor');
function controlPath(name, parent) {
    var p = collection_1.ListWrapper.clone(parent.path);
    p.push(name);
    return p;
}
exports.controlPath = controlPath;
function setUpControl(control, dir) {
    if (lang_1.isBlank(control))
        _throwError(dir, "Cannot find control");
    if (lang_1.isBlank(dir.valueAccessor))
        _throwError(dir, "No value accessor for");
    control.validator = validators_1.Validators.compose([control.validator, dir.validator]);
    dir.valueAccessor.writeValue(control.value);
    // view -> model
    dir.valueAccessor.registerOnChange(function (newValue) {
        dir.viewToModelUpdate(newValue);
        control.updateValue(newValue, { emitModelToViewChange: false });
        control.markAsDirty();
    });
    // model -> view
    control.registerOnChange(function (newValue) { return dir.valueAccessor.writeValue(newValue); });
    // touched
    dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });
}
exports.setUpControl = setUpControl;
function _throwError(dir, message) {
    var path = dir.path.join(" -> ");
    throw new exceptions_1.BaseException(message + " '" + path + "'");
}
function setProperty(renderer, elementRef, propName, propValue) {
    renderer.setElementProperty(elementRef, propName, propValue);
}
exports.setProperty = setProperty;
function isPropertyUpdated(changes, viewModel) {
    if (!collection_1.StringMapWrapper.contains(changes, "model"))
        return false;
    var change = changes["model"];
    if (change.isFirstChange())
        return true;
    return !lang_1.looseIdentical(viewModel, change.currentValue);
}
exports.isPropertyUpdated = isPropertyUpdated;
// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented
function selectValueAccessor(dir, valueAccessors) {
    if (lang_1.isBlank(valueAccessors))
        return null;
    var defaultAccessor;
    var builtinAccessor;
    var customAccessor;
    valueAccessors.forEach(function (v) {
        if (v instanceof default_value_accessor_1.DefaultValueAccessor) {
            defaultAccessor = v;
        }
        else if (v instanceof checkbox_value_accessor_1.CheckboxControlValueAccessor || v instanceof number_value_accessor_1.NumberValueAccessor ||
            v instanceof select_control_value_accessor_1.SelectControlValueAccessor) {
            if (lang_1.isPresent(builtinAccessor))
                _throwError(dir, "More than one built-in value accessor matches");
            builtinAccessor = v;
        }
        else {
            if (lang_1.isPresent(customAccessor))
                _throwError(dir, "More than one custom value accessor matches");
            customAccessor = v;
        }
    });
    if (lang_1.isPresent(customAccessor))
        return customAccessor;
    if (lang_1.isPresent(builtinAccessor))
        return builtinAccessor;
    if (lang_1.isPresent(defaultAccessor))
        return defaultAccessor;
    _throwError(dir, "No valid value accessor for");
    return null;
}
exports.selectValueAccessor = selectValueAccessor;

},{"../validators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/validators.js","./checkbox_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/checkbox_value_accessor.js","./default_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/default_value_accessor.js","./number_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/number_value_accessor.js","./select_control_value_accessor":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/select_control_value_accessor.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/directives/validators.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var di_1 = require('angular2/src/core/di');
var lang_1 = require('angular2/src/core/facade/lang');
var metadata_1 = require('angular2/src/core/metadata');
var validators_1 = require('../validators');
var lang_2 = require("angular2/src/core/facade/lang");
var REQUIRED_VALIDATOR = lang_1.CONST_EXPR(new di_1.Provider(validators_1.NG_VALIDATORS, { useValue: validators_1.Validators.required, multi: true }));
var RequiredValidator = (function () {
    function RequiredValidator() {
    }
    RequiredValidator = __decorate([
        metadata_1.Directive({
            selector: '[required][ng-control],[required][ng-form-control],[required][ng-model]',
            providers: [REQUIRED_VALIDATOR]
        }), 
        __metadata('design:paramtypes', [])
    ], RequiredValidator);
    return RequiredValidator;
})();
exports.RequiredValidator = RequiredValidator;
function createMinLengthValidator(dir) {
    return validators_1.Validators.minLength(dir.minLength);
}
var MIN_LENGTH_VALIDATOR = lang_1.CONST_EXPR(new di_1.Provider(validators_1.NG_VALIDATORS, {
    useFactory: createMinLengthValidator,
    deps: [di_1.forwardRef(function () { return MinLengthValidator; })],
    multi: true
}));
var MinLengthValidator = (function () {
    function MinLengthValidator(minLength) {
        this.minLength = lang_2.NumberWrapper.parseInt(minLength, 10);
    }
    MinLengthValidator = __decorate([
        metadata_1.Directive({
            selector: '[minlength][ng-control],[minlength][ng-form-control],[minlength][ng-model]',
            providers: [MIN_LENGTH_VALIDATOR]
        }),
        __param(0, metadata_1.Attribute("minlength")), 
        __metadata('design:paramtypes', [String])
    ], MinLengthValidator);
    return MinLengthValidator;
})();
exports.MinLengthValidator = MinLengthValidator;
function createMaxLengthValidator(dir) {
    return validators_1.Validators.maxLength(dir.maxLength);
}
var MAX_LENGTH_VALIDATOR = lang_1.CONST_EXPR(new di_1.Provider(validators_1.NG_VALIDATORS, {
    useFactory: createMaxLengthValidator,
    deps: [di_1.forwardRef(function () { return MaxLengthValidator; })],
    multi: true
}));
var MaxLengthValidator = (function () {
    function MaxLengthValidator(maxLength) {
        this.maxLength = lang_2.NumberWrapper.parseInt(maxLength, 10);
    }
    MaxLengthValidator = __decorate([
        metadata_1.Directive({
            selector: '[maxlength][ng-control],[maxlength][ng-form-control],[maxlength][ng-model]',
            providers: [MAX_LENGTH_VALIDATOR]
        }),
        __param(0, metadata_1.Attribute("maxlength")), 
        __metadata('design:paramtypes', [String])
    ], MaxLengthValidator);
    return MaxLengthValidator;
})();
exports.MaxLengthValidator = MaxLengthValidator;

},{"../validators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/validators.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/form_builder.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var modelModule = require('./model');
/**
 * Creates a form object from a user-specified configuration.
 *
 * # Example
 *
 * ```
 * import {Component, bootstrap} from 'angular2/angular2';
 * import {FormBuilder, Validators, FORM_DIRECTIVES, ControlGroup} from 'angular2/core';
 *
 * @Component({
 *   selector: 'login-comp',
 *   viewProviders: [FormBuilder],
 *   template: `
 *     <form [control-group]="loginForm">
 *       Login <input control="login">
 *
 *       <div control-group="passwordRetry">
 *         Password <input type="password" control="password">
 *         Confirm password <input type="password" control="passwordConfirmation">
 *       </div>
 *     </form>
 *   `,
 *   directives: [FORM_DIRECTIVES]
 * })
 * class LoginComp {
 *   loginForm: ControlGroup;
 *
 *   constructor(builder: FormBuilder) {
 *     this.loginForm = builder.group({
 *       login: ["", Validators.required],
 *
 *       passwordRetry: builder.group({
 *         password: ["", Validators.required],
 *         passwordConfirmation: ["", Validators.required]
 *       })
 *     });
 *   }
 * }
 *
 * bootstrap(LoginComp);
 * ```
 *
 * This example creates a {@link ControlGroup} that consists of a `login` {@link Control}, and a
 * nested {@link ControlGroup} that defines a `password` and a `passwordConfirmation`
 * {@link Control}:
 *
 * ```
 *  var loginForm = builder.group({
 *    login: ["", Validators.required],
 *
 *    passwordRetry: builder.group({
 *      password: ["", Validators.required],
 *      passwordConfirmation: ["", Validators.required]
 *    })
 *  });
 *
 *  ```
 */
var FormBuilder = (function () {
    function FormBuilder() {
    }
    FormBuilder.prototype.group = function (controlsConfig, extra) {
        if (extra === void 0) { extra = null; }
        var controls = this._reduceControls(controlsConfig);
        var optionals = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "optionals") : null;
        var validator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "validator") : null;
        if (lang_1.isPresent(validator)) {
            return new modelModule.ControlGroup(controls, optionals, validator);
        }
        else {
            return new modelModule.ControlGroup(controls, optionals);
        }
    };
    FormBuilder.prototype.control = function (value, validator) {
        if (validator === void 0) { validator = null; }
        if (lang_1.isPresent(validator)) {
            return new modelModule.Control(value, validator);
        }
        else {
            return new modelModule.Control(value);
        }
    };
    FormBuilder.prototype.array = function (controlsConfig, validator) {
        var _this = this;
        if (validator === void 0) { validator = null; }
        var controls = controlsConfig.map(function (c) { return _this._createControl(c); });
        if (lang_1.isPresent(validator)) {
            return new modelModule.ControlArray(controls, validator);
        }
        else {
            return new modelModule.ControlArray(controls);
        }
    };
    /** @internal */
    FormBuilder.prototype._reduceControls = function (controlsConfig) {
        var _this = this;
        var controls = {};
        collection_1.StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {
            controls[controlName] = _this._createControl(controlConfig);
        });
        return controls;
    };
    /** @internal */
    FormBuilder.prototype._createControl = function (controlConfig) {
        if (controlConfig instanceof modelModule.Control ||
            controlConfig instanceof modelModule.ControlGroup ||
            controlConfig instanceof modelModule.ControlArray) {
            return controlConfig;
        }
        else if (lang_1.isArray(controlConfig)) {
            var value = controlConfig[0];
            var validator = controlConfig.length > 1 ? controlConfig[1] : null;
            return this.control(value, validator);
        }
        else {
            return this.control(controlConfig);
        }
    };
    FormBuilder = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], FormBuilder);
    return FormBuilder;
})();
exports.FormBuilder = FormBuilder;

},{"./model":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/model.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/model.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = require('angular2/src/core/facade/lang');
var async_1 = require('angular2/src/core/facade/async');
var collection_1 = require('angular2/src/core/facade/collection');
var validators_1 = require('./validators');
/**
 * Indicates that a Control is valid, i.e. that no errors exist in the input value.
 */
exports.VALID = "VALID";
/**
 * Indicates that a Control is invalid, i.e. that an error exists in the input value.
 */
exports.INVALID = "INVALID";
function isControl(control) {
    return control instanceof AbstractControl;
}
exports.isControl = isControl;
function _find(control, path) {
    if (lang_1.isBlank(path))
        return null;
    if (!(path instanceof Array)) {
        path = path.split("/");
    }
    if (path instanceof Array && collection_1.ListWrapper.isEmpty(path))
        return null;
    return collection_1.ListWrapper.reduce(path, function (v, name) {
        if (v instanceof ControlGroup) {
            return lang_1.isPresent(v.controls[name]) ? v.controls[name] : null;
        }
        else if (v instanceof ControlArray) {
            var index = name;
            return lang_1.isPresent(v.at(index)) ? v.at(index) : null;
        }
        else {
            return null;
        }
    }, control);
}
/**
 * Omitting from external API doc as this is really an abstract internal concept.
 */
var AbstractControl = (function () {
    function AbstractControl(validator) {
        this.validator = validator;
        /** @internal */
        this._pristine = true;
        /** @internal */
        this._touched = false;
    }
    Object.defineProperty(AbstractControl.prototype, "value", {
        get: function () { return this._value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "status", {
        get: function () { return this._status; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valid", {
        get: function () { return this._status === exports.VALID; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "errors", {
        get: function () { return this._errors; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pristine", {
        get: function () { return this._pristine; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "dirty", {
        get: function () { return !this.pristine; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "touched", {
        get: function () { return this._touched; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "untouched", {
        get: function () { return !this._touched; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valueChanges", {
        get: function () { return this._valueChanges; },
        enumerable: true,
        configurable: true
    });
    AbstractControl.prototype.markAsTouched = function () { this._touched = true; };
    AbstractControl.prototype.markAsDirty = function (_a) {
        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
        onlySelf = lang_1.normalizeBool(onlySelf);
        this._pristine = false;
        if (lang_1.isPresent(this._parent) && !onlySelf) {
            this._parent.markAsDirty({ onlySelf: onlySelf });
        }
    };
    AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };
    AbstractControl.prototype.updateValidity = function (_a) {
        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
        onlySelf = lang_1.normalizeBool(onlySelf);
        this._errors = this.validator(this);
        this._status = lang_1.isPresent(this._errors) ? exports.INVALID : exports.VALID;
        if (lang_1.isPresent(this._parent) && !onlySelf) {
            this._parent.updateValidity({ onlySelf: onlySelf });
        }
    };
    AbstractControl.prototype.updateValueAndValidity = function (_a) {
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
        onlySelf = lang_1.normalizeBool(onlySelf);
        emitEvent = lang_1.isPresent(emitEvent) ? emitEvent : true;
        this._updateValue();
        this._errors = this.validator(this);
        this._status = lang_1.isPresent(this._errors) ? exports.INVALID : exports.VALID;
        if (emitEvent) {
            async_1.ObservableWrapper.callNext(this._valueChanges, this._value);
        }
        if (lang_1.isPresent(this._parent) && !onlySelf) {
            this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
        }
    };
    AbstractControl.prototype.find = function (path) { return _find(this, path); };
    AbstractControl.prototype.getError = function (errorCode, path) {
        if (path === void 0) { path = null; }
        var control = lang_1.isPresent(path) && !collection_1.ListWrapper.isEmpty(path) ? this.find(path) : this;
        if (lang_1.isPresent(control) && lang_1.isPresent(control._errors)) {
            return collection_1.StringMapWrapper.get(control._errors, errorCode);
        }
        else {
            return null;
        }
    };
    AbstractControl.prototype.hasError = function (errorCode, path) {
        if (path === void 0) { path = null; }
        return lang_1.isPresent(this.getError(errorCode, path));
    };
    /** @internal */
    AbstractControl.prototype._updateValue = function () { };
    return AbstractControl;
})();
exports.AbstractControl = AbstractControl;
/**
 * Defines a part of a form that cannot be divided into other controls. `Control`s have values and
 * validation state, which is determined by an optional validation function.
 *
 * `Control` is one of the three fundamental building blocks used to define forms in Angular, along
 * with {@link ControlGroup} and {@link ControlArray}.
 *
 * # Usage
 *
 * By default, a `Control` is created for every `<input>` or other form component.
 * With {@link NgFormControl} or {@link NgFormModel} an existing {@link Control} can be
 * bound to a DOM element instead. This `Control` can be configured with a custom
 * validation function.
 *
 * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
 */
var Control = (function (_super) {
    __extends(Control, _super);
    function Control(value, validator) {
        if (value === void 0) { value = null; }
        if (validator === void 0) { validator = validators_1.Validators.nullValidator; }
        _super.call(this, validator);
        this._value = value;
        this.updateValidity({ onlySelf: true });
        this._valueChanges = new async_1.EventEmitter();
    }
    /**
     * Set the value of the control to `value`.
     *
     * If `onlySelf` is `true`, this change will only affect the validation of this `Control`
     * and not its parent component. If `emitEvent` is `true`, this change will cause a
     * `valueChanges` event on the `Control` to be emitted. Both of these options default to
     * `false`.
     *
     * If `emitModelToViewChange` is `true`, the view will be notified about the new value
     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not
     * specified.
     */
    Control.prototype.updateValue = function (value, _a) {
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange;
        emitModelToViewChange = lang_1.isPresent(emitModelToViewChange) ? emitModelToViewChange : true;
        this._value = value;
        if (lang_1.isPresent(this._onChange) && emitModelToViewChange)
            this._onChange(this._value);
        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
    };
    /**
     * Register a listener for change events.
     */
    Control.prototype.registerOnChange = function (fn) { this._onChange = fn; };
    return Control;
})(AbstractControl);
exports.Control = Control;
/**
 * Defines a part of a form, of fixed length, that can contain other controls.
 *
 * A `ControlGroup` aggregates the values and errors of each {@link Control} in the group. Thus, if
 * one of the controls in a group is invalid, the entire group is invalid. Similarly, if a control
 * changes its value, the entire group changes as well.
 *
 * `ControlGroup` is one of the three fundamental building blocks used to define forms in Angular,
 * along with {@link Control} and {@link ControlArray}. {@link ControlArray} can also contain other
 * controls, but is of variable length.
 *
 * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
 */
var ControlGroup = (function (_super) {
    __extends(ControlGroup, _super);
    function ControlGroup(controls, optionals, validator) {
        if (optionals === void 0) { optionals = null; }
        if (validator === void 0) { validator = validators_1.Validators.group; }
        _super.call(this, validator);
        this.controls = controls;
        this._optionals = lang_1.isPresent(optionals) ? optionals : {};
        this._valueChanges = new async_1.EventEmitter();
        this._setParentForControls();
        this._value = this._reduceValue();
        this.updateValidity({ onlySelf: true });
    }
    ControlGroup.prototype.addControl = function (name, control) {
        this.controls[name] = control;
        control.setParent(this);
    };
    ControlGroup.prototype.removeControl = function (name) { collection_1.StringMapWrapper.delete(this.controls, name); };
    ControlGroup.prototype.include = function (controlName) {
        collection_1.StringMapWrapper.set(this._optionals, controlName, true);
        this.updateValueAndValidity();
    };
    ControlGroup.prototype.exclude = function (controlName) {
        collection_1.StringMapWrapper.set(this._optionals, controlName, false);
        this.updateValueAndValidity();
    };
    ControlGroup.prototype.contains = function (controlName) {
        var c = collection_1.StringMapWrapper.contains(this.controls, controlName);
        return c && this._included(controlName);
    };
    /** @internal */
    ControlGroup.prototype._setParentForControls = function () {
        var _this = this;
        collection_1.StringMapWrapper.forEach(this.controls, function (control, name) { control.setParent(_this); });
    };
    /** @internal */
    ControlGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };
    /** @internal */
    ControlGroup.prototype._reduceValue = function () {
        return this._reduceChildren({}, function (acc, control, name) {
            acc[name] = control.value;
            return acc;
        });
    };
    /** @internal */
    ControlGroup.prototype._reduceChildren = function (initValue, fn) {
        var _this = this;
        var res = initValue;
        collection_1.StringMapWrapper.forEach(this.controls, function (control, name) {
            if (_this._included(name)) {
                res = fn(res, control, name);
            }
        });
        return res;
    };
    /** @internal */
    ControlGroup.prototype._included = function (controlName) {
        var isOptional = collection_1.StringMapWrapper.contains(this._optionals, controlName);
        return !isOptional || collection_1.StringMapWrapper.get(this._optionals, controlName);
    };
    return ControlGroup;
})(AbstractControl);
exports.ControlGroup = ControlGroup;
/**
 * Defines a part of a form, of variable length, that can contain other controls.
 *
 * A `ControlArray` aggregates the values and errors of each {@link Control} in the group. Thus, if
 * one of the controls in a group is invalid, the entire group is invalid. Similarly, if a control
 * changes its value, the entire group changes as well.
 *
 * `ControlArray` is one of the three fundamental building blocks used to define forms in Angular,
 * along with {@link Control} and {@link ControlGroup}. {@link ControlGroup} can also contain
 * other controls, but is of fixed length.
 *
 * # Adding or removing controls
 *
 * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods
 * in `ControlArray` itself. These methods ensure the controls are properly tracked in the
 * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
 * the `ControlArray` directly, as that will result in strange and unexpected behavior such
 * as broken change detection.
 *
 * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
 */
var ControlArray = (function (_super) {
    __extends(ControlArray, _super);
    function ControlArray(controls, validator) {
        if (validator === void 0) { validator = validators_1.Validators.array; }
        _super.call(this, validator);
        this.controls = controls;
        this._valueChanges = new async_1.EventEmitter();
        this._setParentForControls();
        this._updateValue();
        this.updateValidity({ onlySelf: true });
    }
    /**
     * Get the {@link AbstractControl} at the given `index` in the array.
     */
    ControlArray.prototype.at = function (index) { return this.controls[index]; };
    /**
     * Insert a new {@link AbstractControl} at the end of the array.
     */
    ControlArray.prototype.push = function (control) {
        this.controls.push(control);
        control.setParent(this);
        this.updateValueAndValidity();
    };
    /**
     * Insert a new {@link AbstractControl} at the given `index` in the array.
     */
    ControlArray.prototype.insert = function (index, control) {
        collection_1.ListWrapper.insert(this.controls, index, control);
        control.setParent(this);
        this.updateValueAndValidity();
    };
    /**
     * Remove the control at the given `index` in the array.
     */
    ControlArray.prototype.removeAt = function (index) {
        collection_1.ListWrapper.removeAt(this.controls, index);
        this.updateValueAndValidity();
    };
    Object.defineProperty(ControlArray.prototype, "length", {
        /**
         * Get the length of the control array.
         */
        get: function () { return this.controls.length; },
        enumerable: true,
        configurable: true
    });
    /** @internal */
    ControlArray.prototype._updateValue = function () { this._value = this.controls.map(function (control) { return control.value; }); };
    /** @internal */
    ControlArray.prototype._setParentForControls = function () {
        var _this = this;
        this.controls.forEach(function (control) { control.setParent(_this); });
    };
    return ControlArray;
})(AbstractControl);
exports.ControlArray = ControlArray;

},{"./validators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/validators.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/forms/validators.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var lang_2 = require('angular2/src/core/facade/lang');
var collection_1 = require('angular2/src/core/facade/collection');
var di_1 = require('angular2/src/core/di');
exports.NG_VALIDATORS = lang_2.CONST_EXPR(new di_1.OpaqueToken("NgValidators"));
/**
 * Provides a set of validators used by form controls.
 *
 * # Example
 *
 * ```
 * var loginControl = new Control("", Validators.required)
 * ```
 */
var Validators = (function () {
    function Validators() {
    }
    Validators.required = function (control) {
        return lang_1.isBlank(control.value) || control.value == "" ? { "required": true } : null;
    };
    Validators.minLength = function (minLength) {
        return function (control) {
            if (lang_1.isPresent(Validators.required(control)))
                return null;
            var v = control.value;
            return v.length < minLength ?
                { "minlength": { "requiredLength": minLength, "actualLength": v.length } } :
                null;
        };
    };
    Validators.maxLength = function (maxLength) {
        return function (control) {
            if (lang_1.isPresent(Validators.required(control)))
                return null;
            var v = control.value;
            return v.length > maxLength ?
                { "maxlength": { "requiredLength": maxLength, "actualLength": v.length } } :
                null;
        };
    };
    Validators.nullValidator = function (c) { return null; };
    Validators.compose = function (validators) {
        if (lang_1.isBlank(validators))
            return Validators.nullValidator;
        return function (control) {
            var res = collection_1.ListWrapper.reduce(validators, function (res, validator) {
                var errors = validator(control);
                return lang_1.isPresent(errors) ? collection_1.StringMapWrapper.merge(res, errors) : res;
            }, {});
            return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
        };
    };
    Validators.group = function (group) {
        var res = {};
        collection_1.StringMapWrapper.forEach(group.controls, function (control, name) {
            if (group.contains(name) && lang_1.isPresent(control.errors)) {
                Validators._mergeErrors(control, res);
            }
        });
        return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
    };
    Validators.array = function (array) {
        var res = {};
        array.controls.forEach(function (control) {
            if (lang_1.isPresent(control.errors)) {
                Validators._mergeErrors(control, res);
            }
        });
        return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
    };
    Validators._mergeErrors = function (control, res) {
        collection_1.StringMapWrapper.forEach(control.errors, function (value, error) {
            if (!collection_1.StringMapWrapper.contains(res, error)) {
                res[error] = [];
            }
            var current = res[error];
            current.push(control);
        });
    };
    return Validators;
})();
exports.Validators = Validators;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/life_cycle/life_cycle.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var profile_1 = require('../profile/profile');
/**
 * Provides access to explicitly trigger change detection in an application.
 *
 * By default, `Zone` triggers change detection in Angular on each virtual machine (VM) turn. When
 * testing, or in some
 * limited application use cases, a developer can also trigger change detection with the
 * `lifecycle.tick()` method.
 *
 * Each Angular application has a single `LifeCycle` instance.
 *
 * # Example
 *
 * This is a contrived example, since the bootstrap automatically runs inside of the `Zone`, which
 * invokes
 * `lifecycle.tick()` on your behalf.
 *
 * ```javascript
 * bootstrap(MyApp).then((ref:ComponentRef) => {
 *   var lifeCycle = ref.injector.get(LifeCycle);
 *   var myApp = ref.instance;
 *
 *   ref.doSomething();
 *   lifecycle.tick();
 * });
 * ```
 */
var LifeCycle = (function () {
    function LifeCycle() {
    }
    return LifeCycle;
})();
exports.LifeCycle = LifeCycle;
var LifeCycle_ = (function (_super) {
    __extends(LifeCycle_, _super);
    function LifeCycle_(changeDetector, enforceNoNewChanges) {
        if (changeDetector === void 0) { changeDetector = null; }
        if (enforceNoNewChanges === void 0) { enforceNoNewChanges = false; }
        _super.call(this);
        /** @internal */
        this._runningTick = false;
        this._changeDetectors = [];
        if (lang_1.isPresent(changeDetector)) {
            this._changeDetectors.push(changeDetector);
        }
        this._enforceNoNewChanges = enforceNoNewChanges;
    }
    LifeCycle_.prototype.registerWith = function (zone, changeDetector) {
        var _this = this;
        if (changeDetector === void 0) { changeDetector = null; }
        if (lang_1.isPresent(changeDetector)) {
            this._changeDetectors.push(changeDetector);
        }
        zone.overrideOnTurnDone(function () { return _this.tick(); });
    };
    LifeCycle_.prototype.tick = function () {
        if (this._runningTick) {
            throw new exceptions_1.BaseException("LifeCycle.tick is called recursively");
        }
        var s = LifeCycle_._tickScope();
        try {
            this._runningTick = true;
            this._changeDetectors.forEach(function (detector) { return detector.detectChanges(); });
            if (this._enforceNoNewChanges) {
                this._changeDetectors.forEach(function (detector) { return detector.checkNoChanges(); });
            }
        }
        finally {
            this._runningTick = false;
            profile_1.wtfLeave(s);
        }
    };
    LifeCycle_._tickScope = profile_1.wtfCreateScope('LifeCycle#tick()');
    LifeCycle_ = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [Object, Boolean])
    ], LifeCycle_);
    return LifeCycle_;
})(LifeCycle);
exports.LifeCycle_ = LifeCycle_;

},{"../profile/profile":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/profile/profile.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/lifecycle.js":[function(require,module,exports){
'use strict';// Public API for LifeCycle
var life_cycle_1 = require('./life_cycle/life_cycle');
exports.LifeCycle = life_cycle_1.LifeCycle;

},{"./life_cycle/life_cycle":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/life_cycle/life_cycle.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker.js":[function(require,module,exports){
'use strict';// Public API for compiler
var directive_resolver_1 = require('./linker/directive_resolver');
exports.DirectiveResolver = directive_resolver_1.DirectiveResolver;
var compiler_1 = require('./linker/compiler');
exports.Compiler = compiler_1.Compiler;
var view_manager_1 = require('./linker/view_manager');
exports.AppViewManager = view_manager_1.AppViewManager;
var query_list_1 = require('./linker/query_list');
exports.QueryList = query_list_1.QueryList;
var dynamic_component_loader_1 = require('./linker/dynamic_component_loader');
exports.DynamicComponentLoader = dynamic_component_loader_1.DynamicComponentLoader;
var element_ref_1 = require('./linker/element_ref');
exports.ElementRef = element_ref_1.ElementRef;
var template_ref_1 = require('./linker/template_ref');
exports.TemplateRef = template_ref_1.TemplateRef;
var view_ref_1 = require('./linker/view_ref');
exports.ViewRef = view_ref_1.ViewRef;
exports.ProtoViewRef = view_ref_1.ProtoViewRef;
var view_container_ref_1 = require('./linker/view_container_ref');
exports.ViewContainerRef = view_container_ref_1.ViewContainerRef;
var dynamic_component_loader_2 = require('./linker/dynamic_component_loader');
exports.ComponentRef = dynamic_component_loader_2.ComponentRef;

},{"./linker/compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/compiler.js","./linker/directive_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/directive_resolver.js","./linker/dynamic_component_loader":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/dynamic_component_loader.js","./linker/element_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/element_ref.js","./linker/query_list":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/query_list.js","./linker/template_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/template_ref.js","./linker/view_container_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_container_ref.js","./linker/view_manager":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_manager.js","./linker/view_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_ref.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/compiler.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var proto_view_factory_1 = require('angular2/src/core/linker/proto_view_factory');
var di_1 = require('angular2/src/core/di');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var async_1 = require('angular2/src/core/facade/async');
var reflection_1 = require('angular2/src/core/reflection/reflection');
var template_commands_1 = require('angular2/src/core/linker/template_commands');
/**
 * Low-level service for compiling {@link Component}s into {@link ProtoViewRef ProtoViews}s, which
 * can later be used to create and render a Component instance.
 *
 * Most applications should instead use higher-level {@link DynamicComponentLoader} service, which
 * both compiles and instantiates a Component.
 */
var Compiler = (function () {
    function Compiler() {
    }
    return Compiler;
})();
exports.Compiler = Compiler;
var Compiler_ = (function (_super) {
    __extends(Compiler_, _super);
    function Compiler_(_protoViewFactory) {
        _super.call(this);
        this._protoViewFactory = _protoViewFactory;
    }
    Compiler_.prototype.compileInHost = function (componentType) {
        var metadatas = reflection_1.reflector.annotations(componentType);
        var compiledHostTemplate = null;
        for (var i = 0; i < metadatas.length; i++) {
            var metadata = metadatas[i];
            if (metadata instanceof template_commands_1.CompiledHostTemplate) {
                compiledHostTemplate = metadata;
                break;
            }
        }
        if (lang_1.isBlank(compiledHostTemplate)) {
            throw new exceptions_1.BaseException("No precompiled template for component " + lang_1.stringify(componentType) + " found");
        }
        return async_1.PromiseWrapper.resolve(this._createProtoView(compiledHostTemplate));
    };
    Compiler_.prototype._createProtoView = function (compiledHostTemplate) {
        return this._protoViewFactory.createHost(compiledHostTemplate).ref;
    };
    Compiler_.prototype.clearCache = function () { this._protoViewFactory.clearCache(); };
    Compiler_ = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [proto_view_factory_1.ProtoViewFactory])
    ], Compiler_);
    return Compiler_;
})(Compiler);
exports.Compiler_ = Compiler_;
function internalCreateProtoView(compiler, compiledHostTemplate) {
    return compiler._createProtoView(compiledHostTemplate);
}
exports.internalCreateProtoView = internalCreateProtoView;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker/proto_view_factory":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/proto_view_factory.js","angular2/src/core/linker/template_commands":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/template_commands.js","angular2/src/core/reflection/reflection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflection.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/directive_lifecycle_reflector.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var interfaces_1 = require('./interfaces');
function hasLifecycleHook(lcInterface, token) {
    if (!(token instanceof lang_1.Type))
        return false;
    var proto = token.prototype;
    switch (lcInterface) {
        case interfaces_1.LifecycleHooks.AfterContentInit:
            return !!proto.afterContentInit;
        case interfaces_1.LifecycleHooks.AfterContentChecked:
            return !!proto.afterContentChecked;
        case interfaces_1.LifecycleHooks.AfterViewInit:
            return !!proto.afterViewInit;
        case interfaces_1.LifecycleHooks.AfterViewChecked:
            return !!proto.afterViewChecked;
        case interfaces_1.LifecycleHooks.OnChanges:
            return !!proto.onChanges;
        case interfaces_1.LifecycleHooks.DoCheck:
            return !!proto.doCheck;
        case interfaces_1.LifecycleHooks.OnDestroy:
            return !!proto.onDestroy;
        case interfaces_1.LifecycleHooks.OnInit:
            return !!proto.onInit;
        default:
            return false;
    }
}
exports.hasLifecycleHook = hasLifecycleHook;

},{"./interfaces":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/interfaces.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/directive_resolver.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var metadata_1 = require('angular2/src/core/metadata');
var reflection_1 = require('angular2/src/core/reflection/reflection');
/*
 * Resolve a `Type` for {@link DirectiveMetadata}.
 *
 * This interface can be overridden by the application developer to create custom behavior.
 *
 * See {@link Compiler}
 */
var DirectiveResolver = (function () {
    function DirectiveResolver() {
    }
    /**
     * Return {@link DirectiveMetadata} for a given `Type`.
     */
    DirectiveResolver.prototype.resolve = function (type) {
        var typeMetadata = reflection_1.reflector.annotations(di_1.resolveForwardRef(type));
        if (lang_1.isPresent(typeMetadata)) {
            for (var i = 0; i < typeMetadata.length; i++) {
                var metadata = typeMetadata[i];
                if (metadata instanceof metadata_1.DirectiveMetadata) {
                    var propertyMetadata = reflection_1.reflector.propMetadata(type);
                    return this._mergeWithPropertyMetadata(metadata, propertyMetadata);
                }
            }
        }
        throw new exceptions_1.BaseException("No Directive annotation found on " + lang_1.stringify(type));
    };
    DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata) {
        var inputs = [];
        var outputs = [];
        var host = {};
        var queries = {};
        collection_1.StringMapWrapper.forEach(propertyMetadata, function (metadata, propName) {
            metadata.forEach(function (a) {
                if (a instanceof metadata_1.InputMetadata) {
                    if (lang_1.isPresent(a.bindingPropertyName)) {
                        inputs.push(propName + ": " + a.bindingPropertyName);
                    }
                    else {
                        inputs.push(propName);
                    }
                }
                if (a instanceof metadata_1.OutputMetadata) {
                    if (lang_1.isPresent(a.bindingPropertyName)) {
                        outputs.push(propName + ": " + a.bindingPropertyName);
                    }
                    else {
                        outputs.push(propName);
                    }
                }
                if (a instanceof metadata_1.HostBindingMetadata) {
                    if (lang_1.isPresent(a.hostPropertyName)) {
                        host[("[" + a.hostPropertyName + "]")] = propName;
                    }
                    else {
                        host[("[" + propName + "]")] = propName;
                    }
                }
                if (a instanceof metadata_1.HostListenerMetadata) {
                    var args = lang_1.isPresent(a.args) ? a.args.join(', ') : '';
                    host[("(" + a.eventName + ")")] = propName + "(" + args + ")";
                }
                if (a instanceof metadata_1.ContentChildrenMetadata) {
                    queries[propName] = a;
                }
                if (a instanceof metadata_1.ViewChildrenMetadata) {
                    queries[propName] = a;
                }
                if (a instanceof metadata_1.ContentChildMetadata) {
                    queries[propName] = a;
                }
                if (a instanceof metadata_1.ViewChildMetadata) {
                    queries[propName] = a;
                }
            });
        });
        return this._merge(dm, inputs, outputs, host, queries);
    };
    DirectiveResolver.prototype._merge = function (dm, inputs, outputs, host, queries) {
        var mergedInputs = lang_1.isPresent(dm.inputs) ? collection_1.ListWrapper.concat(dm.inputs, inputs) : inputs;
        var mergedOutputs = lang_1.isPresent(dm.outputs) ? collection_1.ListWrapper.concat(dm.outputs, outputs) : outputs;
        var mergedHost = lang_1.isPresent(dm.host) ? collection_1.StringMapWrapper.merge(dm.host, host) : host;
        var mergedQueries = lang_1.isPresent(dm.queries) ? collection_1.StringMapWrapper.merge(dm.queries, queries) : queries;
        if (dm instanceof metadata_1.ComponentMetadata) {
            return new metadata_1.ComponentMetadata({
                selector: dm.selector,
                inputs: mergedInputs,
                outputs: mergedOutputs,
                host: mergedHost,
                exportAs: dm.exportAs,
                moduleId: dm.moduleId,
                queries: mergedQueries,
                changeDetection: dm.changeDetection,
                providers: dm.providers,
                viewProviders: dm.viewProviders
            });
        }
        else {
            return new metadata_1.DirectiveMetadata({
                selector: dm.selector,
                inputs: mergedInputs,
                outputs: mergedOutputs,
                host: mergedHost,
                exportAs: dm.exportAs,
                moduleId: dm.moduleId,
                queries: mergedQueries,
                providers: dm.providers
            });
        }
    };
    DirectiveResolver = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], DirectiveResolver);
    return DirectiveResolver;
})();
exports.DirectiveResolver = DirectiveResolver;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js","angular2/src/core/reflection/reflection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflection.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/dynamic_component_loader.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
var compiler_1 = require('./compiler');
var lang_1 = require('angular2/src/core/facade/lang');
var view_manager_1 = require('angular2/src/core/linker/view_manager');
/**
 * Represents an instance of a Component created via {@link DynamicComponentLoader}.
 *
 * `ComponentRef` provides access to the Component Instance as well other objects related to this
 * Component Instance and allows you to destroy the Component Instance via the {@link #dispose}
 * method.
 */
var ComponentRef = (function () {
    function ComponentRef() {
    }
    Object.defineProperty(ComponentRef.prototype, "hostView", {
        /**
         * The {@link ViewRef} of the Host View of this Component instance.
         */
        get: function () { return this.location.parentView; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "hostComponent", {
        /**
         * @internal
         *
         * The instance of the component.
         *
         * TODO(i): this api should be removed
         */
        get: function () { return this.instance; },
        enumerable: true,
        configurable: true
    });
    return ComponentRef;
})();
exports.ComponentRef = ComponentRef;
var ComponentRef_ = (function (_super) {
    __extends(ComponentRef_, _super);
    /**
     * TODO(i): refactor into public/private fields
     */
    function ComponentRef_(location, instance, componentType, injector, _dispose) {
        _super.call(this);
        this._dispose = _dispose;
        this.location = location;
        this.instance = instance;
        this.componentType = componentType;
        this.injector = injector;
    }
    Object.defineProperty(ComponentRef_.prototype, "hostComponentType", {
        /**
         * @internal
         *
         * Returns the type of this Component instance.
         *
         * TODO(i): this api should be removed
         */
        get: function () { return this.componentType; },
        enumerable: true,
        configurable: true
    });
    ComponentRef_.prototype.dispose = function () { this._dispose(); };
    return ComponentRef_;
})(ComponentRef);
exports.ComponentRef_ = ComponentRef_;
/**
 * Service for instantiating a Component and attaching it to a View at a specified location.
 */
var DynamicComponentLoader = (function () {
    function DynamicComponentLoader() {
    }
    return DynamicComponentLoader;
})();
exports.DynamicComponentLoader = DynamicComponentLoader;
var DynamicComponentLoader_ = (function (_super) {
    __extends(DynamicComponentLoader_, _super);
    function DynamicComponentLoader_(_compiler, _viewManager) {
        _super.call(this);
        this._compiler = _compiler;
        this._viewManager = _viewManager;
    }
    DynamicComponentLoader_.prototype.loadAsRoot = function (type, overrideSelector, injector, onDispose) {
        var _this = this;
        return this._compiler.compileInHost(type).then(function (hostProtoViewRef) {
            var hostViewRef = _this._viewManager.createRootHostView(hostProtoViewRef, overrideSelector, injector);
            var newLocation = _this._viewManager.getHostElement(hostViewRef);
            var component = _this._viewManager.getComponent(newLocation);
            var dispose = function () {
                _this._viewManager.destroyRootHostView(hostViewRef);
                if (lang_1.isPresent(onDispose)) {
                    onDispose();
                }
            };
            return new ComponentRef_(newLocation, component, type, injector, dispose);
        });
    };
    DynamicComponentLoader_.prototype.loadIntoLocation = function (type, hostLocation, anchorName, providers) {
        if (providers === void 0) { providers = null; }
        return this.loadNextToLocation(type, this._viewManager.getNamedElementInComponentView(hostLocation, anchorName), providers);
    };
    DynamicComponentLoader_.prototype.loadNextToLocation = function (type, location, providers) {
        var _this = this;
        if (providers === void 0) { providers = null; }
        return this._compiler.compileInHost(type).then(function (hostProtoViewRef) {
            var viewContainer = _this._viewManager.getViewContainer(location);
            var hostViewRef = viewContainer.createHostView(hostProtoViewRef, viewContainer.length, providers);
            var newLocation = _this._viewManager.getHostElement(hostViewRef);
            var component = _this._viewManager.getComponent(newLocation);
            var dispose = function () {
                var index = viewContainer.indexOf(hostViewRef);
                if (index !== -1) {
                    viewContainer.remove(index);
                }
            };
            return new ComponentRef_(newLocation, component, type, null, dispose);
        });
    };
    DynamicComponentLoader_ = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [compiler_1.Compiler, view_manager_1.AppViewManager])
    ], DynamicComponentLoader_);
    return DynamicComponentLoader_;
})(DynamicComponentLoader);
exports.DynamicComponentLoader_ = DynamicComponentLoader_;

},{"./compiler":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/compiler.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker/view_manager":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_manager.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/element_binder.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var ElementBinder = (function () {
    function ElementBinder(index, parent, distanceToParent, protoElementInjector, componentDirective, nestedProtoView) {
        this.index = index;
        this.parent = parent;
        this.distanceToParent = distanceToParent;
        this.protoElementInjector = protoElementInjector;
        this.componentDirective = componentDirective;
        this.nestedProtoView = nestedProtoView;
        if (lang_1.isBlank(index)) {
            throw new exceptions_1.BaseException('null index not allowed.');
        }
    }
    return ElementBinder;
})();
exports.ElementBinder = ElementBinder;

},{"angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/element_injector.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var async_1 = require('angular2/src/core/facade/async');
var collection_1 = require('angular2/src/core/facade/collection');
var di_1 = require('angular2/src/core/di');
var injector_1 = require('angular2/src/core/di/injector');
var provider_1 = require('angular2/src/core/di/provider');
var di_2 = require('../metadata/di');
var avmModule = require('./view_manager');
var view_container_ref_1 = require('./view_container_ref');
var element_ref_1 = require('./element_ref');
var template_ref_1 = require('./template_ref');
var directives_1 = require('../metadata/directives');
var directive_lifecycle_reflector_1 = require('./directive_lifecycle_reflector');
var change_detection_1 = require('angular2/src/core/change_detection/change_detection');
var query_list_1 = require('./query_list');
var reflection_1 = require('angular2/src/core/reflection/reflection');
var event_config_1 = require('angular2/src/core/linker/event_config');
var pipe_provider_1 = require('angular2/src/core/pipes/pipe_provider');
var interfaces_1 = require('./interfaces');
var view_container_ref_2 = require("./view_container_ref");
var _staticKeys;
var StaticKeys = (function () {
    function StaticKeys() {
        this.viewManagerId = di_1.Key.get(avmModule.AppViewManager).id;
        this.templateRefId = di_1.Key.get(template_ref_1.TemplateRef).id;
        this.viewContainerId = di_1.Key.get(view_container_ref_1.ViewContainerRef).id;
        this.changeDetectorRefId = di_1.Key.get(change_detection_1.ChangeDetectorRef).id;
        this.elementRefId = di_1.Key.get(element_ref_1.ElementRef).id;
    }
    StaticKeys.instance = function () {
        if (lang_1.isBlank(_staticKeys))
            _staticKeys = new StaticKeys();
        return _staticKeys;
    };
    return StaticKeys;
})();
exports.StaticKeys = StaticKeys;
var TreeNode = (function () {
    function TreeNode(parent) {
        if (lang_1.isPresent(parent)) {
            parent.addChild(this);
        }
        else {
            this._parent = null;
        }
    }
    TreeNode.prototype.addChild = function (child) { child._parent = this; };
    TreeNode.prototype.remove = function () { this._parent = null; };
    Object.defineProperty(TreeNode.prototype, "parent", {
        get: function () { return this._parent; },
        enumerable: true,
        configurable: true
    });
    return TreeNode;
})();
exports.TreeNode = TreeNode;
var DirectiveDependency = (function (_super) {
    __extends(DirectiveDependency, _super);
    function DirectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties, attributeName, queryDecorator) {
        _super.call(this, key, optional, lowerBoundVisibility, upperBoundVisibility, properties);
        this.attributeName = attributeName;
        this.queryDecorator = queryDecorator;
        this._verify();
    }
    /** @internal */
    DirectiveDependency.prototype._verify = function () {
        var count = 0;
        if (lang_1.isPresent(this.queryDecorator))
            count++;
        if (lang_1.isPresent(this.attributeName))
            count++;
        if (count > 1)
            throw new exceptions_1.BaseException('A directive injectable can contain only one of the following @Attribute or @Query.');
    };
    DirectiveDependency.createFrom = function (d) {
        return new DirectiveDependency(d.key, d.optional, d.lowerBoundVisibility, d.upperBoundVisibility, d.properties, DirectiveDependency._attributeName(d.properties), DirectiveDependency._query(d.properties));
    };
    DirectiveDependency._attributeName = function (properties) {
        var p = collection_1.ListWrapper.find(properties, function (p) { return p instanceof di_2.AttributeMetadata; });
        return lang_1.isPresent(p) ? p.attributeName : null;
    };
    DirectiveDependency._query = function (properties) {
        return collection_1.ListWrapper.find(properties, function (p) { return p instanceof di_2.QueryMetadata; });
    };
    return DirectiveDependency;
})(di_1.Dependency);
exports.DirectiveDependency = DirectiveDependency;
var DirectiveProvider = (function (_super) {
    __extends(DirectiveProvider, _super);
    function DirectiveProvider(key, factory, deps, metadata, providers, viewProviders) {
        _super.call(this, key, [new provider_1.ResolvedFactory(factory, deps)], false);
        this.metadata = metadata;
        this.providers = providers;
        this.viewProviders = viewProviders;
        this.callOnDestroy = directive_lifecycle_reflector_1.hasLifecycleHook(interfaces_1.LifecycleHooks.OnDestroy, key.token);
    }
    Object.defineProperty(DirectiveProvider.prototype, "displayName", {
        get: function () { return this.key.displayName; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DirectiveProvider.prototype, "queries", {
        get: function () {
            if (lang_1.isBlank(this.metadata.queries))
                return [];
            var res = [];
            collection_1.StringMapWrapper.forEach(this.metadata.queries, function (meta, fieldName) {
                var setter = reflection_1.reflector.setter(fieldName);
                res.push(new QueryMetadataWithSetter(setter, meta));
            });
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DirectiveProvider.prototype, "eventEmitters", {
        get: function () {
            return lang_1.isPresent(this.metadata) && lang_1.isPresent(this.metadata.outputs) ? this.metadata.outputs :
                [];
        },
        enumerable: true,
        configurable: true
    });
    DirectiveProvider.createFromProvider = function (provider, meta) {
        if (lang_1.isBlank(meta)) {
            meta = new directives_1.DirectiveMetadata();
        }
        var rb = provider_1.resolveProvider(provider);
        var rf = rb.resolvedFactories[0];
        var deps = rf.dependencies.map(DirectiveDependency.createFrom);
        var providers = lang_1.isPresent(meta.providers) ? meta.providers : [];
        var viewBindigs = meta instanceof directives_1.ComponentMetadata && lang_1.isPresent(meta.viewProviders) ?
            meta.viewProviders :
            [];
        return new DirectiveProvider(rb.key, rf.factory, deps, meta, providers, viewBindigs);
    };
    DirectiveProvider.createFromType = function (type, annotation) {
        var provider = new di_1.Provider(type, { useClass: type });
        return DirectiveProvider.createFromProvider(provider, annotation);
    };
    return DirectiveProvider;
})(provider_1.ResolvedProvider_);
exports.DirectiveProvider = DirectiveProvider;
// TODO(rado): benchmark and consider rolling in as ElementInjector fields.
var PreBuiltObjects = (function () {
    function PreBuiltObjects(viewManager, view, elementRef, templateRef) {
        this.viewManager = viewManager;
        this.view = view;
        this.elementRef = elementRef;
        this.templateRef = templateRef;
        this.nestedView = null;
    }
    return PreBuiltObjects;
})();
exports.PreBuiltObjects = PreBuiltObjects;
var QueryMetadataWithSetter = (function () {
    function QueryMetadataWithSetter(setter, metadata) {
        this.setter = setter;
        this.metadata = metadata;
    }
    return QueryMetadataWithSetter;
})();
exports.QueryMetadataWithSetter = QueryMetadataWithSetter;
var EventEmitterAccessor = (function () {
    function EventEmitterAccessor(eventName, getter) {
        this.eventName = eventName;
        this.getter = getter;
    }
    EventEmitterAccessor.prototype.subscribe = function (view, boundElementIndex, directive) {
        var _this = this;
        var eventEmitter = this.getter(directive);
        return async_1.ObservableWrapper.subscribe(eventEmitter, function (eventObj) { return view.triggerEventHandlers(_this.eventName, eventObj, boundElementIndex); });
    };
    return EventEmitterAccessor;
})();
exports.EventEmitterAccessor = EventEmitterAccessor;
function _createEventEmitterAccessors(bwv) {
    var provider = bwv.provider;
    if (!(provider instanceof DirectiveProvider))
        return [];
    var db = provider;
    return db.eventEmitters.map(function (eventConfig) {
        var parsedEvent = event_config_1.EventConfig.parse(eventConfig);
        return new EventEmitterAccessor(parsedEvent.eventName, reflection_1.reflector.getter(parsedEvent.fieldName));
    });
}
function _createProtoQueryRefs(providers) {
    var res = [];
    collection_1.ListWrapper.forEachWithIndex(providers, function (b, i) {
        if (b.provider instanceof DirectiveProvider) {
            var directiveProvider = b.provider;
            // field queries
            var queries = directiveProvider.queries;
            queries.forEach(function (q) { return res.push(new ProtoQueryRef(i, q.setter, q.metadata)); });
            // queries passed into the constructor.
            // TODO: remove this after constructor queries are no longer supported
            var deps = directiveProvider.resolvedFactory.dependencies;
            deps.forEach(function (d) {
                if (lang_1.isPresent(d.queryDecorator))
                    res.push(new ProtoQueryRef(i, null, d.queryDecorator));
            });
        }
    });
    return res;
}
var ProtoElementInjector = (function () {
    function ProtoElementInjector(parent, index, bwv, distanceToParent, _firstProviderIsComponent, directiveVariableBindings) {
        this.parent = parent;
        this.index = index;
        this.distanceToParent = distanceToParent;
        this.directiveVariableBindings = directiveVariableBindings;
        this._firstProviderIsComponent = _firstProviderIsComponent;
        var length = bwv.length;
        this.protoInjector = new injector_1.ProtoInjector(bwv);
        this.eventEmitterAccessors = collection_1.ListWrapper.createFixedSize(length);
        for (var i = 0; i < length; ++i) {
            this.eventEmitterAccessors[i] = _createEventEmitterAccessors(bwv[i]);
        }
        this.protoQueryRefs = _createProtoQueryRefs(bwv);
    }
    ProtoElementInjector.create = function (parent, index, providers, firstProviderIsComponent, distanceToParent, directiveVariableBindings) {
        var bd = [];
        ProtoElementInjector._createDirectiveProviderWithVisibility(providers, bd, firstProviderIsComponent);
        if (firstProviderIsComponent) {
            ProtoElementInjector._createViewProvidersWithVisibility(providers, bd);
        }
        ProtoElementInjector._createProvidersWithVisibility(providers, bd);
        return new ProtoElementInjector(parent, index, bd, distanceToParent, firstProviderIsComponent, directiveVariableBindings);
    };
    ProtoElementInjector._createDirectiveProviderWithVisibility = function (dirProviders, bd, firstProviderIsComponent) {
        dirProviders.forEach(function (dirProvider) {
            bd.push(ProtoElementInjector._createProviderWithVisibility(firstProviderIsComponent, dirProvider, dirProviders, dirProvider));
        });
    };
    ProtoElementInjector._createProvidersWithVisibility = function (dirProviders, bd) {
        var providersFromAllDirectives = [];
        dirProviders.forEach(function (dirProvider) {
            providersFromAllDirectives =
                collection_1.ListWrapper.concat(providersFromAllDirectives, dirProvider.providers);
        });
        var resolved = di_1.Injector.resolve(providersFromAllDirectives);
        resolved.forEach(function (b) { return bd.push(new injector_1.ProviderWithVisibility(b, injector_1.Visibility.Public)); });
    };
    ProtoElementInjector._createProviderWithVisibility = function (firstProviderIsComponent, dirProvider, dirProviders, provider) {
        var isComponent = firstProviderIsComponent && dirProviders[0] === dirProvider;
        return new injector_1.ProviderWithVisibility(provider, isComponent ? injector_1.Visibility.PublicAndPrivate : injector_1.Visibility.Public);
    };
    ProtoElementInjector._createViewProvidersWithVisibility = function (dirProviders, bd) {
        var resolvedViewProviders = di_1.Injector.resolve(dirProviders[0].viewProviders);
        resolvedViewProviders.forEach(function (b) { return bd.push(new injector_1.ProviderWithVisibility(b, injector_1.Visibility.Private)); });
    };
    ProtoElementInjector.prototype.instantiate = function (parent) {
        return new ElementInjector(this, parent);
    };
    ProtoElementInjector.prototype.directParent = function () { return this.distanceToParent < 2 ? this.parent : null; };
    Object.defineProperty(ProtoElementInjector.prototype, "hasBindings", {
        get: function () { return this.eventEmitterAccessors.length > 0; },
        enumerable: true,
        configurable: true
    });
    ProtoElementInjector.prototype.getProviderAtIndex = function (index) { return this.protoInjector.getProviderAtIndex(index); };
    return ProtoElementInjector;
})();
exports.ProtoElementInjector = ProtoElementInjector;
var _Context = (function () {
    function _Context(element, componentElement, injector) {
        this.element = element;
        this.componentElement = componentElement;
        this.injector = injector;
    }
    return _Context;
})();
var ElementInjector = (function (_super) {
    __extends(ElementInjector, _super);
    function ElementInjector(_proto, parent) {
        var _this = this;
        _super.call(this, parent);
        this._preBuiltObjects = null;
        this._proto = _proto;
        this._injector =
            new di_1.Injector(this._proto.protoInjector, null, this, function () { return _this._debugContext(); });
        // we couple ourselves to the injector strategy to avoid polymoprhic calls
        var injectorStrategy = this._injector.internalStrategy;
        this._strategy = injectorStrategy instanceof injector_1.InjectorInlineStrategy ?
            new ElementInjectorInlineStrategy(injectorStrategy, this) :
            new ElementInjectorDynamicStrategy(injectorStrategy, this);
        this.hydrated = false;
        this._queryStrategy = this._buildQueryStrategy();
    }
    ElementInjector.prototype.dehydrate = function () {
        this.hydrated = false;
        this._host = null;
        this._preBuiltObjects = null;
        this._strategy.callOnDestroy();
        this._strategy.dehydrate();
        this._queryStrategy.dehydrate();
    };
    ElementInjector.prototype.hydrate = function (imperativelyCreatedInjector, host, preBuiltObjects) {
        this._host = host;
        this._preBuiltObjects = preBuiltObjects;
        this._reattachInjectors(imperativelyCreatedInjector);
        this._queryStrategy.hydrate();
        this._strategy.hydrate();
        this.hydrated = true;
    };
    ElementInjector.prototype._debugContext = function () {
        var p = this._preBuiltObjects;
        var index = p.elementRef.boundElementIndex - p.view.elementOffset;
        var c = this._preBuiltObjects.view.getDebugContext(index, null);
        return lang_1.isPresent(c) ? new _Context(c.element, c.componentElement, c.injector) : null;
    };
    ElementInjector.prototype._reattachInjectors = function (imperativelyCreatedInjector) {
        // Dynamically-loaded component in the template. Not a root ElementInjector.
        if (lang_1.isPresent(this._parent)) {
            if (lang_1.isPresent(imperativelyCreatedInjector)) {
                // The imperative injector is similar to having an element between
                // the dynamic-loaded component and its parent => no boundaries.
                this._reattachInjector(this._injector, imperativelyCreatedInjector, false);
                this._reattachInjector(imperativelyCreatedInjector, this._parent._injector, false);
            }
            else {
                this._reattachInjector(this._injector, this._parent._injector, false);
            }
        }
        else if (lang_1.isPresent(this._host)) {
            // The imperative injector is similar to having an element between
            // the dynamic-loaded component and its parent => no boundary between
            // the component and imperativelyCreatedInjector.
            // But since it is a root ElementInjector, we need to create a boundary
            // between imperativelyCreatedInjector and _host.
            if (lang_1.isPresent(imperativelyCreatedInjector)) {
                this._reattachInjector(this._injector, imperativelyCreatedInjector, false);
                this._reattachInjector(imperativelyCreatedInjector, this._host._injector, true);
            }
            else {
                this._reattachInjector(this._injector, this._host._injector, true);
            }
        }
        else {
            if (lang_1.isPresent(imperativelyCreatedInjector)) {
                this._reattachInjector(this._injector, imperativelyCreatedInjector, true);
            }
        }
    };
    ElementInjector.prototype._reattachInjector = function (injector, parentInjector, isBoundary) {
        injector.internalStrategy.attach(parentInjector, isBoundary);
    };
    ElementInjector.prototype.hasVariableBinding = function (name) {
        var vb = this._proto.directiveVariableBindings;
        return lang_1.isPresent(vb) && vb.has(name);
    };
    ElementInjector.prototype.getVariableBinding = function (name) {
        var index = this._proto.directiveVariableBindings.get(name);
        return lang_1.isPresent(index) ? this.getDirectiveAtIndex(index) : this.getElementRef();
    };
    ElementInjector.prototype.get = function (token) { return this._injector.get(token); };
    ElementInjector.prototype.hasDirective = function (type) { return lang_1.isPresent(this._injector.getOptional(type)); };
    ElementInjector.prototype.getEventEmitterAccessors = function () { return this._proto.eventEmitterAccessors; };
    ElementInjector.prototype.getDirectiveVariableBindings = function () {
        return this._proto.directiveVariableBindings;
    };
    ElementInjector.prototype.getComponent = function () { return this._strategy.getComponent(); };
    ElementInjector.prototype.getInjector = function () { return this._injector; };
    ElementInjector.prototype.getElementRef = function () { return this._preBuiltObjects.elementRef; };
    ElementInjector.prototype.getViewContainerRef = function () {
        return new view_container_ref_2.ViewContainerRef_(this._preBuiltObjects.viewManager, this.getElementRef());
    };
    ElementInjector.prototype.getNestedView = function () { return this._preBuiltObjects.nestedView; };
    ElementInjector.prototype.getView = function () { return this._preBuiltObjects.view; };
    ElementInjector.prototype.directParent = function () { return this._proto.distanceToParent < 2 ? this.parent : null; };
    ElementInjector.prototype.isComponentKey = function (key) { return this._strategy.isComponentKey(key); };
    ElementInjector.prototype.getDependency = function (injector, provider, dep) {
        var key = dep.key;
        if (provider instanceof DirectiveProvider) {
            var dirDep = dep;
            var dirProvider = provider;
            var staticKeys = StaticKeys.instance();
            if (key.id === staticKeys.viewManagerId)
                return this._preBuiltObjects.viewManager;
            if (lang_1.isPresent(dirDep.attributeName))
                return this._buildAttribute(dirDep);
            if (lang_1.isPresent(dirDep.queryDecorator))
                return this._queryStrategy.findQuery(dirDep.queryDecorator).list;
            if (dirDep.key.id === StaticKeys.instance().changeDetectorRefId) {
                // We provide the component's view change detector to components and
                // the surrounding component's change detector to directives.
                if (dirProvider.metadata instanceof directives_1.ComponentMetadata) {
                    var componentView = this._preBuiltObjects.view.getNestedView(this._preBuiltObjects.elementRef.boundElementIndex);
                    return componentView.changeDetector.ref;
                }
                else {
                    return this._preBuiltObjects.view.changeDetector.ref;
                }
            }
            if (dirDep.key.id === StaticKeys.instance().elementRefId) {
                return this.getElementRef();
            }
            if (dirDep.key.id === StaticKeys.instance().viewContainerId) {
                return this.getViewContainerRef();
            }
            if (dirDep.key.id === StaticKeys.instance().templateRefId) {
                if (lang_1.isBlank(this._preBuiltObjects.templateRef)) {
                    if (dirDep.optional) {
                        return null;
                    }
                    throw new di_1.NoProviderError(null, dirDep.key);
                }
                return this._preBuiltObjects.templateRef;
            }
        }
        else if (provider instanceof pipe_provider_1.PipeProvider) {
            if (dep.key.id === StaticKeys.instance().changeDetectorRefId) {
                var componentView = this._preBuiltObjects.view.getNestedView(this._preBuiltObjects.elementRef.boundElementIndex);
                return componentView.changeDetector.ref;
            }
        }
        return injector_1.UNDEFINED;
    };
    ElementInjector.prototype._buildAttribute = function (dep) {
        var attributes = this._proto.attributes;
        if (lang_1.isPresent(attributes) && attributes.has(dep.attributeName)) {
            return attributes.get(dep.attributeName);
        }
        else {
            return null;
        }
    };
    ElementInjector.prototype.addDirectivesMatchingQuery = function (query, list) {
        var templateRef = lang_1.isBlank(this._preBuiltObjects) ? null : this._preBuiltObjects.templateRef;
        if (query.selector === template_ref_1.TemplateRef && lang_1.isPresent(templateRef)) {
            list.push(templateRef);
        }
        this._strategy.addDirectivesMatchingQuery(query, list);
    };
    ElementInjector.prototype._buildQueryStrategy = function () {
        if (this._proto.protoQueryRefs.length === 0) {
            return _emptyQueryStrategy;
        }
        else if (this._proto.protoQueryRefs.length <=
            InlineQueryStrategy.NUMBER_OF_SUPPORTED_QUERIES) {
            return new InlineQueryStrategy(this);
        }
        else {
            return new DynamicQueryStrategy(this);
        }
    };
    ElementInjector.prototype.link = function (parent) { parent.addChild(this); };
    ElementInjector.prototype.unlink = function () { this.remove(); };
    ElementInjector.prototype.getDirectiveAtIndex = function (index) { return this._injector.getAt(index); };
    ElementInjector.prototype.hasInstances = function () { return this._proto.hasBindings && this.hydrated; };
    ElementInjector.prototype.getHost = function () { return this._host; };
    ElementInjector.prototype.getBoundElementIndex = function () { return this._proto.index; };
    ElementInjector.prototype.getRootViewInjectors = function () {
        if (!this.hydrated)
            return [];
        var view = this._preBuiltObjects.view;
        var nestedView = view.getNestedView(view.elementOffset + this.getBoundElementIndex());
        return lang_1.isPresent(nestedView) ? nestedView.rootElementInjectors : [];
    };
    ElementInjector.prototype.afterViewChecked = function () { this._queryStrategy.updateViewQueries(); };
    ElementInjector.prototype.afterContentChecked = function () { this._queryStrategy.updateContentQueries(); };
    ElementInjector.prototype.traverseAndSetQueriesAsDirty = function () {
        var inj = this;
        while (lang_1.isPresent(inj)) {
            inj._setQueriesAsDirty();
            inj = inj.parent;
        }
    };
    ElementInjector.prototype._setQueriesAsDirty = function () {
        this._queryStrategy.setContentQueriesAsDirty();
        if (lang_1.isPresent(this._host))
            this._host._queryStrategy.setViewQueriesAsDirty();
    };
    return ElementInjector;
})(TreeNode);
exports.ElementInjector = ElementInjector;
var _EmptyQueryStrategy = (function () {
    function _EmptyQueryStrategy() {
    }
    _EmptyQueryStrategy.prototype.setContentQueriesAsDirty = function () { };
    _EmptyQueryStrategy.prototype.setViewQueriesAsDirty = function () { };
    _EmptyQueryStrategy.prototype.hydrate = function () { };
    _EmptyQueryStrategy.prototype.dehydrate = function () { };
    _EmptyQueryStrategy.prototype.updateContentQueries = function () { };
    _EmptyQueryStrategy.prototype.updateViewQueries = function () { };
    _EmptyQueryStrategy.prototype.findQuery = function (query) {
        throw new exceptions_1.BaseException("Cannot find query for directive " + query + ".");
    };
    return _EmptyQueryStrategy;
})();
var _emptyQueryStrategy = new _EmptyQueryStrategy();
var InlineQueryStrategy = (function () {
    function InlineQueryStrategy(ei) {
        var protoRefs = ei._proto.protoQueryRefs;
        if (protoRefs.length > 0)
            this.query0 = new QueryRef(protoRefs[0], ei);
        if (protoRefs.length > 1)
            this.query1 = new QueryRef(protoRefs[1], ei);
        if (protoRefs.length > 2)
            this.query2 = new QueryRef(protoRefs[2], ei);
    }
    InlineQueryStrategy.prototype.setContentQueriesAsDirty = function () {
        if (lang_1.isPresent(this.query0) && !this.query0.isViewQuery)
            this.query0.dirty = true;
        if (lang_1.isPresent(this.query1) && !this.query1.isViewQuery)
            this.query1.dirty = true;
        if (lang_1.isPresent(this.query2) && !this.query2.isViewQuery)
            this.query2.dirty = true;
    };
    InlineQueryStrategy.prototype.setViewQueriesAsDirty = function () {
        if (lang_1.isPresent(this.query0) && this.query0.isViewQuery)
            this.query0.dirty = true;
        if (lang_1.isPresent(this.query1) && this.query1.isViewQuery)
            this.query1.dirty = true;
        if (lang_1.isPresent(this.query2) && this.query2.isViewQuery)
            this.query2.dirty = true;
    };
    InlineQueryStrategy.prototype.hydrate = function () {
        if (lang_1.isPresent(this.query0))
            this.query0.hydrate();
        if (lang_1.isPresent(this.query1))
            this.query1.hydrate();
        if (lang_1.isPresent(this.query2))
            this.query2.hydrate();
    };
    InlineQueryStrategy.prototype.dehydrate = function () {
        if (lang_1.isPresent(this.query0))
            this.query0.dehydrate();
        if (lang_1.isPresent(this.query1))
            this.query1.dehydrate();
        if (lang_1.isPresent(this.query2))
            this.query2.dehydrate();
    };
    InlineQueryStrategy.prototype.updateContentQueries = function () {
        if (lang_1.isPresent(this.query0) && !this.query0.isViewQuery) {
            this.query0.update();
        }
        if (lang_1.isPresent(this.query1) && !this.query1.isViewQuery) {
            this.query1.update();
        }
        if (lang_1.isPresent(this.query2) && !this.query2.isViewQuery) {
            this.query2.update();
        }
    };
    InlineQueryStrategy.prototype.updateViewQueries = function () {
        if (lang_1.isPresent(this.query0) && this.query0.isViewQuery) {
            this.query0.update();
        }
        if (lang_1.isPresent(this.query1) && this.query1.isViewQuery) {
            this.query1.update();
        }
        if (lang_1.isPresent(this.query2) && this.query2.isViewQuery) {
            this.query2.update();
        }
    };
    InlineQueryStrategy.prototype.findQuery = function (query) {
        if (lang_1.isPresent(this.query0) && this.query0.protoQueryRef.query === query) {
            return this.query0;
        }
        if (lang_1.isPresent(this.query1) && this.query1.protoQueryRef.query === query) {
            return this.query1;
        }
        if (lang_1.isPresent(this.query2) && this.query2.protoQueryRef.query === query) {
            return this.query2;
        }
        throw new exceptions_1.BaseException("Cannot find query for directive " + query + ".");
    };
    InlineQueryStrategy.NUMBER_OF_SUPPORTED_QUERIES = 3;
    return InlineQueryStrategy;
})();
var DynamicQueryStrategy = (function () {
    function DynamicQueryStrategy(ei) {
        this.queries = ei._proto.protoQueryRefs.map(function (p) { return new QueryRef(p, ei); });
    }
    DynamicQueryStrategy.prototype.setContentQueriesAsDirty = function () {
        for (var i = 0; i < this.queries.length; ++i) {
            var q = this.queries[i];
            if (!q.isViewQuery)
                q.dirty = true;
        }
    };
    DynamicQueryStrategy.prototype.setViewQueriesAsDirty = function () {
        for (var i = 0; i < this.queries.length; ++i) {
            var q = this.queries[i];
            if (q.isViewQuery)
                q.dirty = true;
        }
    };
    DynamicQueryStrategy.prototype.hydrate = function () {
        for (var i = 0; i < this.queries.length; ++i) {
            var q = this.queries[i];
            q.hydrate();
        }
    };
    DynamicQueryStrategy.prototype.dehydrate = function () {
        for (var i = 0; i < this.queries.length; ++i) {
            var q = this.queries[i];
            q.dehydrate();
        }
    };
    DynamicQueryStrategy.prototype.updateContentQueries = function () {
        for (var i = 0; i < this.queries.length; ++i) {
            var q = this.queries[i];
            if (!q.isViewQuery) {
                q.update();
            }
        }
    };
    DynamicQueryStrategy.prototype.updateViewQueries = function () {
        for (var i = 0; i < this.queries.length; ++i) {
            var q = this.queries[i];
            if (q.isViewQuery) {
                q.update();
            }
        }
    };
    DynamicQueryStrategy.prototype.findQuery = function (query) {
        for (var i = 0; i < this.queries.length; ++i) {
            var q = this.queries[i];
            if (q.protoQueryRef.query === query) {
                return q;
            }
        }
        throw new exceptions_1.BaseException("Cannot find query for directive " + query + ".");
    };
    return DynamicQueryStrategy;
})();
/**
 * Strategy used by the `ElementInjector` when the number of providers is 10 or less.
 * In such a case, inlining fields is beneficial for performances.
 */
var ElementInjectorInlineStrategy = (function () {
    function ElementInjectorInlineStrategy(injectorStrategy, _ei) {
        this.injectorStrategy = injectorStrategy;
        this._ei = _ei;
    }
    ElementInjectorInlineStrategy.prototype.hydrate = function () {
        var i = this.injectorStrategy;
        var p = i.protoStrategy;
        i.resetConstructionCounter();
        if (p.provider0 instanceof DirectiveProvider && lang_1.isPresent(p.keyId0) && i.obj0 === injector_1.UNDEFINED)
            i.obj0 = i.instantiateProvider(p.provider0, p.visibility0);
        if (p.provider1 instanceof DirectiveProvider && lang_1.isPresent(p.keyId1) && i.obj1 === injector_1.UNDEFINED)
            i.obj1 = i.instantiateProvider(p.provider1, p.visibility1);
        if (p.provider2 instanceof DirectiveProvider && lang_1.isPresent(p.keyId2) && i.obj2 === injector_1.UNDEFINED)
            i.obj2 = i.instantiateProvider(p.provider2, p.visibility2);
        if (p.provider3 instanceof DirectiveProvider && lang_1.isPresent(p.keyId3) && i.obj3 === injector_1.UNDEFINED)
            i.obj3 = i.instantiateProvider(p.provider3, p.visibility3);
        if (p.provider4 instanceof DirectiveProvider && lang_1.isPresent(p.keyId4) && i.obj4 === injector_1.UNDEFINED)
            i.obj4 = i.instantiateProvider(p.provider4, p.visibility4);
        if (p.provider5 instanceof DirectiveProvider && lang_1.isPresent(p.keyId5) && i.obj5 === injector_1.UNDEFINED)
            i.obj5 = i.instantiateProvider(p.provider5, p.visibility5);
        if (p.provider6 instanceof DirectiveProvider && lang_1.isPresent(p.keyId6) && i.obj6 === injector_1.UNDEFINED)
            i.obj6 = i.instantiateProvider(p.provider6, p.visibility6);
        if (p.provider7 instanceof DirectiveProvider && lang_1.isPresent(p.keyId7) && i.obj7 === injector_1.UNDEFINED)
            i.obj7 = i.instantiateProvider(p.provider7, p.visibility7);
        if (p.provider8 instanceof DirectiveProvider && lang_1.isPresent(p.keyId8) && i.obj8 === injector_1.UNDEFINED)
            i.obj8 = i.instantiateProvider(p.provider8, p.visibility8);
        if (p.provider9 instanceof DirectiveProvider && lang_1.isPresent(p.keyId9) && i.obj9 === injector_1.UNDEFINED)
            i.obj9 = i.instantiateProvider(p.provider9, p.visibility9);
    };
    ElementInjectorInlineStrategy.prototype.dehydrate = function () {
        var i = this.injectorStrategy;
        i.obj0 = injector_1.UNDEFINED;
        i.obj1 = injector_1.UNDEFINED;
        i.obj2 = injector_1.UNDEFINED;
        i.obj3 = injector_1.UNDEFINED;
        i.obj4 = injector_1.UNDEFINED;
        i.obj5 = injector_1.UNDEFINED;
        i.obj6 = injector_1.UNDEFINED;
        i.obj7 = injector_1.UNDEFINED;
        i.obj8 = injector_1.UNDEFINED;
        i.obj9 = injector_1.UNDEFINED;
    };
    ElementInjectorInlineStrategy.prototype.callOnDestroy = function () {
        var i = this.injectorStrategy;
        var p = i.protoStrategy;
        if (p.provider0 instanceof DirectiveProvider &&
            p.provider0.callOnDestroy) {
            i.obj0.onDestroy();
        }
        if (p.provider1 instanceof DirectiveProvider &&
            p.provider1.callOnDestroy) {
            i.obj1.onDestroy();
        }
        if (p.provider2 instanceof DirectiveProvider &&
            p.provider2.callOnDestroy) {
            i.obj2.onDestroy();
        }
        if (p.provider3 instanceof DirectiveProvider &&
            p.provider3.callOnDestroy) {
            i.obj3.onDestroy();
        }
        if (p.provider4 instanceof DirectiveProvider &&
            p.provider4.callOnDestroy) {
            i.obj4.onDestroy();
        }
        if (p.provider5 instanceof DirectiveProvider &&
            p.provider5.callOnDestroy) {
            i.obj5.onDestroy();
        }
        if (p.provider6 instanceof DirectiveProvider &&
            p.provider6.callOnDestroy) {
            i.obj6.onDestroy();
        }
        if (p.provider7 instanceof DirectiveProvider &&
            p.provider7.callOnDestroy) {
            i.obj7.onDestroy();
        }
        if (p.provider8 instanceof DirectiveProvider &&
            p.provider8.callOnDestroy) {
            i.obj8.onDestroy();
        }
        if (p.provider9 instanceof DirectiveProvider &&
            p.provider9.callOnDestroy) {
            i.obj9.onDestroy();
        }
    };
    ElementInjectorInlineStrategy.prototype.getComponent = function () { return this.injectorStrategy.obj0; };
    ElementInjectorInlineStrategy.prototype.isComponentKey = function (key) {
        return this._ei._proto._firstProviderIsComponent && lang_1.isPresent(key) &&
            key.id === this.injectorStrategy.protoStrategy.keyId0;
    };
    ElementInjectorInlineStrategy.prototype.addDirectivesMatchingQuery = function (query, list) {
        var i = this.injectorStrategy;
        var p = i.protoStrategy;
        if (lang_1.isPresent(p.provider0) && p.provider0.key.token === query.selector) {
            if (i.obj0 === injector_1.UNDEFINED)
                i.obj0 = i.instantiateProvider(p.provider0, p.visibility0);
            list.push(i.obj0);
        }
        if (lang_1.isPresent(p.provider1) && p.provider1.key.token === query.selector) {
            if (i.obj1 === injector_1.UNDEFINED)
                i.obj1 = i.instantiateProvider(p.provider1, p.visibility1);
            list.push(i.obj1);
        }
        if (lang_1.isPresent(p.provider2) && p.provider2.key.token === query.selector) {
            if (i.obj2 === injector_1.UNDEFINED)
                i.obj2 = i.instantiateProvider(p.provider2, p.visibility2);
            list.push(i.obj2);
        }
        if (lang_1.isPresent(p.provider3) && p.provider3.key.token === query.selector) {
            if (i.obj3 === injector_1.UNDEFINED)
                i.obj3 = i.instantiateProvider(p.provider3, p.visibility3);
            list.push(i.obj3);
        }
        if (lang_1.isPresent(p.provider4) && p.provider4.key.token === query.selector) {
            if (i.obj4 === injector_1.UNDEFINED)
                i.obj4 = i.instantiateProvider(p.provider4, p.visibility4);
            list.push(i.obj4);
        }
        if (lang_1.isPresent(p.provider5) && p.provider5.key.token === query.selector) {
            if (i.obj5 === injector_1.UNDEFINED)
                i.obj5 = i.instantiateProvider(p.provider5, p.visibility5);
            list.push(i.obj5);
        }
        if (lang_1.isPresent(p.provider6) && p.provider6.key.token === query.selector) {
            if (i.obj6 === injector_1.UNDEFINED)
                i.obj6 = i.instantiateProvider(p.provider6, p.visibility6);
            list.push(i.obj6);
        }
        if (lang_1.isPresent(p.provider7) && p.provider7.key.token === query.selector) {
            if (i.obj7 === injector_1.UNDEFINED)
                i.obj7 = i.instantiateProvider(p.provider7, p.visibility7);
            list.push(i.obj7);
        }
        if (lang_1.isPresent(p.provider8) && p.provider8.key.token === query.selector) {
            if (i.obj8 === injector_1.UNDEFINED)
                i.obj8 = i.instantiateProvider(p.provider8, p.visibility8);
            list.push(i.obj8);
        }
        if (lang_1.isPresent(p.provider9) && p.provider9.key.token === query.selector) {
            if (i.obj9 === injector_1.UNDEFINED)
                i.obj9 = i.instantiateProvider(p.provider9, p.visibility9);
            list.push(i.obj9);
        }
    };
    return ElementInjectorInlineStrategy;
})();
/**
 * Strategy used by the `ElementInjector` when the number of providers is 10 or less.
 * In such a case, inlining fields is beneficial for performances.
 */
var ElementInjectorDynamicStrategy = (function () {
    function ElementInjectorDynamicStrategy(injectorStrategy, _ei) {
        this.injectorStrategy = injectorStrategy;
        this._ei = _ei;
    }
    ElementInjectorDynamicStrategy.prototype.hydrate = function () {
        var inj = this.injectorStrategy;
        var p = inj.protoStrategy;
        inj.resetConstructionCounter();
        for (var i = 0; i < p.keyIds.length; i++) {
            if (p.providers[i] instanceof DirectiveProvider && lang_1.isPresent(p.keyIds[i]) &&
                inj.objs[i] === injector_1.UNDEFINED) {
                inj.objs[i] = inj.instantiateProvider(p.providers[i], p.visibilities[i]);
            }
        }
    };
    ElementInjectorDynamicStrategy.prototype.dehydrate = function () {
        var inj = this.injectorStrategy;
        collection_1.ListWrapper.fill(inj.objs, injector_1.UNDEFINED);
    };
    ElementInjectorDynamicStrategy.prototype.callOnDestroy = function () {
        var ist = this.injectorStrategy;
        var p = ist.protoStrategy;
        for (var i = 0; i < p.providers.length; i++) {
            if (p.providers[i] instanceof DirectiveProvider &&
                p.providers[i].callOnDestroy) {
                ist.objs[i].onDestroy();
            }
        }
    };
    ElementInjectorDynamicStrategy.prototype.getComponent = function () { return this.injectorStrategy.objs[0]; };
    ElementInjectorDynamicStrategy.prototype.isComponentKey = function (key) {
        var p = this.injectorStrategy.protoStrategy;
        return this._ei._proto._firstProviderIsComponent && lang_1.isPresent(key) && key.id === p.keyIds[0];
    };
    ElementInjectorDynamicStrategy.prototype.addDirectivesMatchingQuery = function (query, list) {
        var ist = this.injectorStrategy;
        var p = ist.protoStrategy;
        for (var i = 0; i < p.providers.length; i++) {
            if (p.providers[i].key.token === query.selector) {
                if (ist.objs[i] === injector_1.UNDEFINED) {
                    ist.objs[i] = ist.instantiateProvider(p.providers[i], p.visibilities[i]);
                }
                list.push(ist.objs[i]);
            }
        }
    };
    return ElementInjectorDynamicStrategy;
})();
var ProtoQueryRef = (function () {
    function ProtoQueryRef(dirIndex, setter, query) {
        this.dirIndex = dirIndex;
        this.setter = setter;
        this.query = query;
    }
    Object.defineProperty(ProtoQueryRef.prototype, "usesPropertySyntax", {
        get: function () { return lang_1.isPresent(this.setter); },
        enumerable: true,
        configurable: true
    });
    return ProtoQueryRef;
})();
exports.ProtoQueryRef = ProtoQueryRef;
var QueryRef = (function () {
    function QueryRef(protoQueryRef, originator) {
        this.protoQueryRef = protoQueryRef;
        this.originator = originator;
    }
    Object.defineProperty(QueryRef.prototype, "isViewQuery", {
        get: function () { return this.protoQueryRef.query.isViewQuery; },
        enumerable: true,
        configurable: true
    });
    QueryRef.prototype.update = function () {
        if (!this.dirty)
            return;
        this._update();
        this.dirty = false;
        // TODO delete the check once only field queries are supported
        if (this.protoQueryRef.usesPropertySyntax) {
            var dir = this.originator.getDirectiveAtIndex(this.protoQueryRef.dirIndex);
            if (this.protoQueryRef.query.first) {
                this.protoQueryRef.setter(dir, this.list.length > 0 ? this.list.first : null);
            }
            else {
                this.protoQueryRef.setter(dir, this.list);
            }
        }
        this.list.notifyOnChanges();
    };
    QueryRef.prototype._update = function () {
        var aggregator = [];
        if (this.protoQueryRef.query.isViewQuery) {
            var view = this.originator.getView();
            // intentionally skipping originator for view queries.
            var nestedView = view.getNestedView(view.elementOffset + this.originator.getBoundElementIndex());
            if (lang_1.isPresent(nestedView))
                this._visitView(nestedView, aggregator);
        }
        else {
            this._visit(this.originator, aggregator);
        }
        this.list.reset(aggregator);
    };
    ;
    QueryRef.prototype._visit = function (inj, aggregator) {
        var view = inj.getView();
        var startIdx = view.elementOffset + inj._proto.index;
        for (var i = startIdx; i < view.elementOffset + view.ownBindersCount; i++) {
            var curInj = view.elementInjectors[i];
            if (lang_1.isBlank(curInj))
                continue;
            // The first injector after inj, that is outside the subtree rooted at
            // inj has to have a null parent or a parent that is an ancestor of inj.
            if (i > startIdx && (lang_1.isBlank(curInj) || lang_1.isBlank(curInj.parent) ||
                view.elementOffset + curInj.parent._proto.index < startIdx)) {
                break;
            }
            if (!this.protoQueryRef.query.descendants &&
                !(curInj.parent == this.originator || curInj == this.originator))
                continue;
            // We visit the view container(VC) views right after the injector that contains
            // the VC. Theoretically, that might not be the right order if there are
            // child injectors of said injector. Not clear whether if such case can
            // even be constructed with the current apis.
            this._visitInjector(curInj, aggregator);
            var vc = view.viewContainers[i];
            if (lang_1.isPresent(vc))
                this._visitViewContainer(vc, aggregator);
        }
    };
    QueryRef.prototype._visitInjector = function (inj, aggregator) {
        if (this.protoQueryRef.query.isVarBindingQuery) {
            this._aggregateVariableBinding(inj, aggregator);
        }
        else {
            this._aggregateDirective(inj, aggregator);
        }
    };
    QueryRef.prototype._visitViewContainer = function (vc, aggregator) {
        for (var j = 0; j < vc.views.length; j++) {
            this._visitView(vc.views[j], aggregator);
        }
    };
    QueryRef.prototype._visitView = function (view, aggregator) {
        for (var i = view.elementOffset; i < view.elementOffset + view.ownBindersCount; i++) {
            var inj = view.elementInjectors[i];
            if (lang_1.isBlank(inj))
                continue;
            this._visitInjector(inj, aggregator);
            var vc = view.viewContainers[i];
            if (lang_1.isPresent(vc))
                this._visitViewContainer(vc, aggregator);
        }
    };
    QueryRef.prototype._aggregateVariableBinding = function (inj, aggregator) {
        var vb = this.protoQueryRef.query.varBindings;
        for (var i = 0; i < vb.length; ++i) {
            if (inj.hasVariableBinding(vb[i])) {
                aggregator.push(inj.getVariableBinding(vb[i]));
            }
        }
    };
    QueryRef.prototype._aggregateDirective = function (inj, aggregator) {
        inj.addDirectivesMatchingQuery(this.protoQueryRef.query, aggregator);
    };
    QueryRef.prototype.dehydrate = function () { this.list = null; };
    QueryRef.prototype.hydrate = function () {
        this.list = new query_list_1.QueryList();
        this.dirty = true;
    };
    return QueryRef;
})();
exports.QueryRef = QueryRef;

},{"../metadata/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/di.js","../metadata/directives":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/directives.js","./directive_lifecycle_reflector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/directive_lifecycle_reflector.js","./element_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/element_ref.js","./interfaces":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/interfaces.js","./query_list":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/query_list.js","./template_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/template_ref.js","./view_container_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_container_ref.js","./view_manager":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_manager.js","angular2/src/core/change_detection/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/di/injector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/injector.js","angular2/src/core/di/provider":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/provider.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/linker/event_config":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/event_config.js","angular2/src/core/pipes/pipe_provider":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/pipe_provider.js","angular2/src/core/reflection/reflection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflection.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/element_ref.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var exceptions_1 = require('angular2/src/core/facade/exceptions');
/**
 * Represents a location in a View that has an injection, change-detection and render context
 * associated with it.
 *
 * An `ElementRef` is created for each element in the Template that contains a Directive, Component
 * or data-binding.
 *
 * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
 * element.
 */
var ElementRef = (function () {
    function ElementRef() {
    }
    Object.defineProperty(ElementRef.prototype, "nativeElement", {
        /**
         * The underlying native element or `null` if direct access to native elements is not supported
         * (e.g. when the application runs in a web worker).
         *
         * <div class="callout is-critical">
         *   <header>Use with caution</header>
         *   <p>
         *    Use this API as the last resort when direct access to DOM is needed. Use templating and
         *    data-binding provided by Angular instead. Alternatively you take a look at {@link Renderer}
         *    which provides API that can safely be used even when direct access to native elements is not
         *    supported.
         *   </p>
         *   <p>
         *    Relying on direct DOM access creates tight coupling between your application and rendering
         *    layers which will make it impossible to separate the two and deploy your application into a
         *    web worker.
         *   </p>
         * </div>
         */
        get: function () { return exceptions_1.unimplemented(); },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(ElementRef.prototype, "renderView", {
        get: function () { return exceptions_1.unimplemented(); },
        enumerable: true,
        configurable: true
    });
    return ElementRef;
})();
exports.ElementRef = ElementRef;
var ElementRef_ = (function (_super) {
    __extends(ElementRef_, _super);
    function ElementRef_(parentView, 
        /**
         * Index of the element inside the {@link ViewRef}.
         *
         * This is used internally by the Angular framework to locate elements.
         */
        boundElementIndex, _renderer) {
        _super.call(this);
        this.parentView = parentView;
        this.boundElementIndex = boundElementIndex;
        this._renderer = _renderer;
    }
    Object.defineProperty(ElementRef_.prototype, "renderView", {
        get: function () { return this.parentView.render; },
        set: function (value) { exceptions_1.unimplemented(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ElementRef_.prototype, "nativeElement", {
        get: function () { return this._renderer.getNativeElementSync(this); },
        enumerable: true,
        configurable: true
    });
    return ElementRef_;
})(ElementRef);
exports.ElementRef_ = ElementRef_;

},{"angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/event_config.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
exports.EVENT_TARGET_SEPARATOR = ':';
var EventConfig = (function () {
    function EventConfig(fieldName, eventName, isLongForm) {
        this.fieldName = fieldName;
        this.eventName = eventName;
        this.isLongForm = isLongForm;
    }
    EventConfig.parse = function (eventConfig) {
        var fieldName = eventConfig, eventName = eventConfig, isLongForm = false;
        var separatorIdx = eventConfig.indexOf(exports.EVENT_TARGET_SEPARATOR);
        if (separatorIdx > -1) {
            // long format: 'fieldName: eventName'
            fieldName = lang_1.StringWrapper.substring(eventConfig, 0, separatorIdx).trim();
            eventName = lang_1.StringWrapper.substring(eventConfig, separatorIdx + 1).trim();
            isLongForm = true;
        }
        return new EventConfig(fieldName, eventName, isLongForm);
    };
    EventConfig.prototype.getFullName = function () {
        return this.isLongForm ? "" + this.fieldName + exports.EVENT_TARGET_SEPARATOR + this.eventName :
            this.eventName;
    };
    return EventConfig;
})();
exports.EventConfig = EventConfig;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/interfaces.js":[function(require,module,exports){
'use strict';(function (LifecycleHooks) {
    LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
    LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
    LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
    LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
    LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
    LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
    LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
    LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
})(exports.LifecycleHooks || (exports.LifecycleHooks = {}));
var LifecycleHooks = exports.LifecycleHooks;
/**
 * @internal
 */
exports.LIFECYCLE_HOOKS_VALUES = [
    LifecycleHooks.OnInit,
    LifecycleHooks.OnDestroy,
    LifecycleHooks.DoCheck,
    LifecycleHooks.OnChanges,
    LifecycleHooks.AfterContentInit,
    LifecycleHooks.AfterContentChecked,
    LifecycleHooks.AfterViewInit,
    LifecycleHooks.AfterViewChecked
];

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/pipe_resolver.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var metadata_1 = require('angular2/src/core/metadata');
var reflection_1 = require('angular2/src/core/reflection/reflection');
/**
 * Resolve a `Type` for {@link PipeMetadata}.
 *
 * This interface can be overridden by the application developer to create custom behavior.
 *
 * See {@link Compiler}
 */
var PipeResolver = (function () {
    function PipeResolver() {
    }
    /**
     * Return {@link PipeMetadata} for a given `Type`.
     */
    PipeResolver.prototype.resolve = function (type) {
        var metas = reflection_1.reflector.annotations(di_1.resolveForwardRef(type));
        if (lang_1.isPresent(metas)) {
            for (var i = 0; i < metas.length; i++) {
                var annotation = metas[i];
                if (annotation instanceof metadata_1.PipeMetadata) {
                    return annotation;
                }
            }
        }
        throw new exceptions_1.BaseException("No Pipe decorator found on " + lang_1.stringify(type));
    };
    PipeResolver = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], PipeResolver);
    return PipeResolver;
})();
exports.PipeResolver = PipeResolver;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js","angular2/src/core/reflection/reflection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflection.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/proto_view_factory.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var di_1 = require('angular2/src/core/di');
var pipe_provider_1 = require('../pipes/pipe_provider');
var pipes_1 = require('../pipes/pipes');
var view_1 = require('./view');
var element_binder_1 = require('./element_binder');
var element_injector_1 = require('./element_injector');
var directive_resolver_1 = require('./directive_resolver');
var view_resolver_1 = require('./view_resolver');
var pipe_resolver_1 = require('./pipe_resolver');
var pipes_2 = require('angular2/src/core/pipes');
var template_commands_1 = require('./template_commands');
var render_1 = require('angular2/render');
var application_tokens_1 = require('angular2/src/core/application_tokens');
var ProtoViewFactory = (function () {
    function ProtoViewFactory(_renderer, defaultPipes, _directiveResolver, _viewResolver, _pipeResolver, appId) {
        this._renderer = _renderer;
        this._directiveResolver = _directiveResolver;
        this._viewResolver = _viewResolver;
        this._pipeResolver = _pipeResolver;
        this._cache = new Map();
        this._defaultPipes = defaultPipes;
        this._appId = appId;
    }
    ProtoViewFactory.prototype.clearCache = function () { this._cache.clear(); };
    ProtoViewFactory.prototype.createHost = function (compiledHostTemplate) {
        var compiledTemplate = compiledHostTemplate.getTemplate();
        var result = this._cache.get(compiledTemplate.id);
        if (lang_1.isBlank(result)) {
            var templateData = compiledTemplate.getData(this._appId);
            var emptyMap = {};
            result = new view_1.AppProtoView(templateData.commands, view_1.ViewType.HOST, true, templateData.changeDetectorFactory, null, new pipes_1.ProtoPipes(emptyMap));
            this._cache.set(compiledTemplate.id, result);
        }
        return result;
    };
    ProtoViewFactory.prototype._createComponent = function (cmd) {
        var _this = this;
        var nestedProtoView = this._cache.get(cmd.templateId);
        if (lang_1.isBlank(nestedProtoView)) {
            var component = cmd.directives[0];
            var view = this._viewResolver.resolve(component);
            var compiledTemplateData = cmd.template.getData(this._appId);
            this._renderer.registerComponentTemplate(cmd.templateId, compiledTemplateData.commands, compiledTemplateData.styles, cmd.nativeShadow);
            var boundPipes = this._flattenPipes(view).map(function (pipe) { return _this._bindPipe(pipe); });
            nestedProtoView = new view_1.AppProtoView(compiledTemplateData.commands, view_1.ViewType.COMPONENT, true, compiledTemplateData.changeDetectorFactory, null, pipes_1.ProtoPipes.fromProviders(boundPipes));
            // Note: The cache is updated before recursing
            // to be able to resolve cycles
            this._cache.set(cmd.template.id, nestedProtoView);
            this._initializeProtoView(nestedProtoView, null);
        }
        return nestedProtoView;
    };
    ProtoViewFactory.prototype._createEmbeddedTemplate = function (cmd, parent) {
        var nestedProtoView = new view_1.AppProtoView(cmd.children, view_1.ViewType.EMBEDDED, cmd.isMerged, cmd.changeDetectorFactory, arrayToMap(cmd.variableNameAndValues, true), new pipes_1.ProtoPipes(parent.pipes.config));
        if (cmd.isMerged) {
            this.initializeProtoViewIfNeeded(nestedProtoView);
        }
        return nestedProtoView;
    };
    ProtoViewFactory.prototype.initializeProtoViewIfNeeded = function (protoView) {
        if (!protoView.isInitialized()) {
            var render = this._renderer.createProtoView(protoView.templateCmds);
            this._initializeProtoView(protoView, render);
        }
    };
    ProtoViewFactory.prototype._initializeProtoView = function (protoView, render) {
        var initializer = new _ProtoViewInitializer(protoView, this._directiveResolver, this);
        template_commands_1.visitAllCommands(initializer, protoView.templateCmds);
        var mergeInfo = new view_1.AppProtoViewMergeInfo(initializer.mergeEmbeddedViewCount, initializer.mergeElementCount, initializer.mergeViewCount);
        protoView.init(render, initializer.elementBinders, initializer.boundTextCount, mergeInfo, initializer.variableLocations);
    };
    ProtoViewFactory.prototype._bindPipe = function (typeOrProvider) {
        var meta = this._pipeResolver.resolve(typeOrProvider);
        return pipe_provider_1.PipeProvider.createFromType(typeOrProvider, meta);
    };
    ProtoViewFactory.prototype._flattenPipes = function (view) {
        if (lang_1.isBlank(view.pipes))
            return this._defaultPipes;
        var pipes = collection_1.ListWrapper.clone(this._defaultPipes);
        _flattenList(view.pipes, pipes);
        return pipes;
    };
    ProtoViewFactory = __decorate([
        di_1.Injectable(),
        __param(1, di_1.Inject(pipes_2.DEFAULT_PIPES_TOKEN)),
        __param(5, di_1.Inject(application_tokens_1.APP_ID)), 
        __metadata('design:paramtypes', [render_1.Renderer, Array, directive_resolver_1.DirectiveResolver, view_resolver_1.ViewResolver, pipe_resolver_1.PipeResolver, String])
    ], ProtoViewFactory);
    return ProtoViewFactory;
})();
exports.ProtoViewFactory = ProtoViewFactory;
function createComponent(protoViewFactory, cmd) {
    return protoViewFactory._createComponent(cmd);
}
function createEmbeddedTemplate(protoViewFactory, cmd, parent) {
    return protoViewFactory._createEmbeddedTemplate(cmd, parent);
}
var _ProtoViewInitializer = (function () {
    function _ProtoViewInitializer(_protoView, _directiveResolver, _protoViewFactory) {
        this._protoView = _protoView;
        this._directiveResolver = _directiveResolver;
        this._protoViewFactory = _protoViewFactory;
        this.variableLocations = new Map();
        this.boundTextCount = 0;
        this.boundElementIndex = 0;
        this.elementBinderStack = [];
        this.distanceToParentElementBinder = 0;
        this.distanceToParentProtoElementInjector = 0;
        this.elementBinders = [];
        this.mergeEmbeddedViewCount = 0;
        this.mergeElementCount = 0;
        this.mergeViewCount = 1;
    }
    _ProtoViewInitializer.prototype.visitText = function (cmd, context) {
        if (cmd.isBound) {
            this.boundTextCount++;
        }
        return null;
    };
    _ProtoViewInitializer.prototype.visitNgContent = function (cmd, context) { return null; };
    _ProtoViewInitializer.prototype.visitBeginElement = function (cmd, context) {
        if (cmd.isBound) {
            this._visitBeginBoundElement(cmd, null);
        }
        else {
            this._visitBeginElement(cmd, null, null);
        }
        return null;
    };
    _ProtoViewInitializer.prototype.visitEndElement = function (context) { return this._visitEndElement(); };
    _ProtoViewInitializer.prototype.visitBeginComponent = function (cmd, context) {
        var nestedProtoView = createComponent(this._protoViewFactory, cmd);
        return this._visitBeginBoundElement(cmd, nestedProtoView);
    };
    _ProtoViewInitializer.prototype.visitEndComponent = function (context) { return this._visitEndElement(); };
    _ProtoViewInitializer.prototype.visitEmbeddedTemplate = function (cmd, context) {
        var nestedProtoView = createEmbeddedTemplate(this._protoViewFactory, cmd, this._protoView);
        if (cmd.isMerged) {
            this.mergeEmbeddedViewCount++;
        }
        this._visitBeginBoundElement(cmd, nestedProtoView);
        return this._visitEndElement();
    };
    _ProtoViewInitializer.prototype._visitBeginBoundElement = function (cmd, nestedProtoView) {
        if (lang_1.isPresent(nestedProtoView) && nestedProtoView.isMergable) {
            this.mergeElementCount += nestedProtoView.mergeInfo.elementCount;
            this.mergeViewCount += nestedProtoView.mergeInfo.viewCount;
            this.mergeEmbeddedViewCount += nestedProtoView.mergeInfo.embeddedViewCount;
        }
        var elementBinder = _createElementBinder(this._directiveResolver, nestedProtoView, this.elementBinderStack, this.boundElementIndex, this.distanceToParentElementBinder, this.distanceToParentProtoElementInjector, cmd);
        this.elementBinders.push(elementBinder);
        var protoElementInjector = elementBinder.protoElementInjector;
        for (var i = 0; i < cmd.variableNameAndValues.length; i += 2) {
            this.variableLocations.set(cmd.variableNameAndValues[i], this.boundElementIndex);
        }
        this.boundElementIndex++;
        this.mergeElementCount++;
        return this._visitBeginElement(cmd, elementBinder, protoElementInjector);
    };
    _ProtoViewInitializer.prototype._visitBeginElement = function (cmd, elementBinder, protoElementInjector) {
        this.distanceToParentElementBinder =
            lang_1.isPresent(elementBinder) ? 1 : this.distanceToParentElementBinder + 1;
        this.distanceToParentProtoElementInjector =
            lang_1.isPresent(protoElementInjector) ? 1 : this.distanceToParentProtoElementInjector + 1;
        this.elementBinderStack.push(elementBinder);
        return null;
    };
    _ProtoViewInitializer.prototype._visitEndElement = function () {
        var parentElementBinder = this.elementBinderStack.pop();
        var parentProtoElementInjector = lang_1.isPresent(parentElementBinder) ? parentElementBinder.protoElementInjector : null;
        this.distanceToParentElementBinder = lang_1.isPresent(parentElementBinder) ?
            parentElementBinder.distanceToParent :
            this.distanceToParentElementBinder - 1;
        this.distanceToParentProtoElementInjector = lang_1.isPresent(parentProtoElementInjector) ?
            parentProtoElementInjector.distanceToParent :
            this.distanceToParentProtoElementInjector - 1;
        return null;
    };
    return _ProtoViewInitializer;
})();
function _createElementBinder(directiveResolver, nestedProtoView, elementBinderStack, boundElementIndex, distanceToParentBinder, distanceToParentPei, beginElementCmd) {
    var parentElementBinder = null;
    var parentProtoElementInjector = null;
    if (distanceToParentBinder > 0) {
        parentElementBinder = elementBinderStack[elementBinderStack.length - distanceToParentBinder];
    }
    if (lang_1.isBlank(parentElementBinder)) {
        distanceToParentBinder = -1;
    }
    if (distanceToParentPei > 0) {
        var peiBinder = elementBinderStack[elementBinderStack.length - distanceToParentPei];
        if (lang_1.isPresent(peiBinder)) {
            parentProtoElementInjector = peiBinder.protoElementInjector;
        }
    }
    if (lang_1.isBlank(parentProtoElementInjector)) {
        distanceToParentPei = -1;
    }
    var componentDirectiveProvider = null;
    var isEmbeddedTemplate = false;
    var directiveProviders = beginElementCmd.directives.map(function (type) { return provideDirective(directiveResolver, type); });
    if (beginElementCmd instanceof template_commands_1.BeginComponentCmd) {
        componentDirectiveProvider = directiveProviders[0];
    }
    else if (beginElementCmd instanceof template_commands_1.EmbeddedTemplateCmd) {
        isEmbeddedTemplate = true;
    }
    var protoElementInjector = null;
    // Create a protoElementInjector for any element that either has bindings *or* has one
    // or more var- defined *or* for <template> elements:
    // - Elements with a var- defined need a their own element injector
    //   so that, when hydrating, $implicit can be set to the element.
    // - <template> elements need their own ElementInjector so that we can query their TemplateRef
    var hasVariables = beginElementCmd.variableNameAndValues.length > 0;
    if (directiveProviders.length > 0 || hasVariables || isEmbeddedTemplate) {
        var directiveVariableBindings = new Map();
        if (!isEmbeddedTemplate) {
            directiveVariableBindings = createDirectiveVariableBindings(beginElementCmd.variableNameAndValues, directiveProviders);
        }
        protoElementInjector = element_injector_1.ProtoElementInjector.create(parentProtoElementInjector, boundElementIndex, directiveProviders, lang_1.isPresent(componentDirectiveProvider), distanceToParentPei, directiveVariableBindings);
        protoElementInjector.attributes = arrayToMap(beginElementCmd.attrNameAndValues, false);
    }
    return new element_binder_1.ElementBinder(boundElementIndex, parentElementBinder, distanceToParentBinder, protoElementInjector, componentDirectiveProvider, nestedProtoView);
}
function provideDirective(directiveResolver, type) {
    var annotation = directiveResolver.resolve(type);
    return element_injector_1.DirectiveProvider.createFromType(type, annotation);
}
function createDirectiveVariableBindings(variableNameAndValues, directiveProviders) {
    var directiveVariableBindings = new Map();
    for (var i = 0; i < variableNameAndValues.length; i += 2) {
        var templateName = variableNameAndValues[i];
        var dirIndex = variableNameAndValues[i + 1];
        if (lang_1.isNumber(dirIndex)) {
            directiveVariableBindings.set(templateName, dirIndex);
        }
        else {
            // a variable without a directive index -> reference the element
            directiveVariableBindings.set(templateName, null);
        }
    }
    return directiveVariableBindings;
}
exports.createDirectiveVariableBindings = createDirectiveVariableBindings;
function arrayToMap(arr, inverse) {
    var result = new Map();
    for (var i = 0; i < arr.length; i += 2) {
        if (inverse) {
            result.set(arr[i + 1], arr[i]);
        }
        else {
            result.set(arr[i], arr[i + 1]);
        }
    }
    return result;
}
function _flattenList(tree, out) {
    for (var i = 0; i < tree.length; i++) {
        var item = di_1.resolveForwardRef(tree[i]);
        if (lang_1.isArray(item)) {
            _flattenList(item, out);
        }
        else {
            out.push(item);
        }
    }
}

},{"../pipes/pipe_provider":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/pipe_provider.js","../pipes/pipes":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/pipes.js","./directive_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/directive_resolver.js","./element_binder":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/element_binder.js","./element_injector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/element_injector.js","./pipe_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/pipe_resolver.js","./template_commands":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/template_commands.js","./view":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view.js","./view_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_resolver.js","angular2/render":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/render.js","angular2/src/core/application_tokens":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/application_tokens.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/pipes":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/query_list.js":[function(require,module,exports){
'use strict';var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var async_1 = require('angular2/src/core/facade/async');
/**
 * An unmodifiable list of items that Angular keeps up to date when the state
 * of the application changes.
 *
 * The type of object that {@link QueryMetadata} and {@link ViewQueryMetadata} provide.
 *
 * Implements an iterable interface, therefore it can be used in both ES6
 * javascript `for (var i of items)` loops as well as in Angular templates with
 * `*ng-for="#i of myList"`.
 *
 * Changes can be observed by subscribing to the changes `Observable`.
 *
 * NOTE: In the future this class will implement an `Observable` interface.
 *
 * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
 * ```javascript
 * @Component({...})
 * class Container {
 *   constructor(@Query(Item) items: QueryList<Item>) {
 *     items.changes.subscribe(_ => console.log(items.length));
 *   }
 * }
 * ```
 */
var QueryList = (function () {
    function QueryList() {
        this._results = [];
        this._emitter = new async_1.EventEmitter();
    }
    Object.defineProperty(QueryList.prototype, "changes", {
        get: function () { return this._emitter; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "length", {
        get: function () { return this._results.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "first", {
        get: function () { return collection_1.ListWrapper.first(this._results); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "last", {
        get: function () { return collection_1.ListWrapper.last(this._results); },
        enumerable: true,
        configurable: true
    });
    /**
     * returns a new array with the passed in function applied to each element.
     */
    QueryList.prototype.map = function (fn) { return this._results.map(fn); };
    /**
     * returns a filtered array.
     */
    QueryList.prototype.filter = function (fn) { return this._results.filter(fn); };
    /**
     * returns a reduced value.
     */
    QueryList.prototype.reduce = function (fn, init) { return this._results.reduce(fn, init); };
    /**
     * converts QueryList into an array
     */
    QueryList.prototype.toArray = function () { return collection_1.ListWrapper.clone(this._results); };
    QueryList.prototype[lang_1.getSymbolIterator()] = function () { return this._results[lang_1.getSymbolIterator()](); };
    QueryList.prototype.toString = function () { return this._results.toString(); };
    /**
     * @internal
     */
    QueryList.prototype.reset = function (res) { this._results = res; };
    /** @internal */
    QueryList.prototype.notifyOnChanges = function () { this._emitter.next(this); };
    return QueryList;
})();
exports.QueryList = QueryList;

},{"angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/template_commands.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var _nextTemplateId = 0;
function nextTemplateId() {
    return _nextTemplateId++;
}
exports.nextTemplateId = nextTemplateId;
/**
 * A compiled host template.
 *
 * This is const as we are storing it as annotation
 * for the compiled component type.
 */
var CompiledHostTemplate = (function () {
    // Note: _templateGetter is a function so that CompiledHostTemplate can be
    // a const!
    function CompiledHostTemplate(_templateGetter) {
        this._templateGetter = _templateGetter;
    }
    CompiledHostTemplate.prototype.getTemplate = function () { return this._templateGetter(); };
    CompiledHostTemplate = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Function])
    ], CompiledHostTemplate);
    return CompiledHostTemplate;
})();
exports.CompiledHostTemplate = CompiledHostTemplate;
/**
 * A compiled template.
 */
var CompiledTemplate = (function () {
    // Note: paramGetter is a function so that we can have cycles between templates!
    // paramGetter returns a tuple with:
    // - ChangeDetector factory function
    // - TemplateCmd[]
    // - styles
    function CompiledTemplate(id, _dataGetter) {
        this.id = id;
        this._dataGetter = _dataGetter;
    }
    CompiledTemplate.prototype.getData = function (appId) {
        var data = this._dataGetter(appId, this.id);
        return new CompiledTemplateData(data[0], data[1], data[2]);
    };
    return CompiledTemplate;
})();
exports.CompiledTemplate = CompiledTemplate;
var CompiledTemplateData = (function () {
    function CompiledTemplateData(changeDetectorFactory, commands, styles) {
        this.changeDetectorFactory = changeDetectorFactory;
        this.commands = commands;
        this.styles = styles;
    }
    return CompiledTemplateData;
})();
exports.CompiledTemplateData = CompiledTemplateData;
var EMPTY_ARR = lang_1.CONST_EXPR([]);
var TextCmd = (function () {
    function TextCmd(value, isBound, ngContentIndex) {
        this.value = value;
        this.isBound = isBound;
        this.ngContentIndex = ngContentIndex;
    }
    TextCmd.prototype.visit = function (visitor, context) {
        return visitor.visitText(this, context);
    };
    return TextCmd;
})();
exports.TextCmd = TextCmd;
function text(value, isBound, ngContentIndex) {
    return new TextCmd(value, isBound, ngContentIndex);
}
exports.text = text;
var NgContentCmd = (function () {
    function NgContentCmd(index, ngContentIndex) {
        this.index = index;
        this.ngContentIndex = ngContentIndex;
        this.isBound = false;
    }
    NgContentCmd.prototype.visit = function (visitor, context) {
        return visitor.visitNgContent(this, context);
    };
    return NgContentCmd;
})();
exports.NgContentCmd = NgContentCmd;
function ngContent(index, ngContentIndex) {
    return new NgContentCmd(index, ngContentIndex);
}
exports.ngContent = ngContent;
var BeginElementCmd = (function () {
    function BeginElementCmd(name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, isBound, ngContentIndex) {
        this.name = name;
        this.attrNameAndValues = attrNameAndValues;
        this.eventTargetAndNames = eventTargetAndNames;
        this.variableNameAndValues = variableNameAndValues;
        this.directives = directives;
        this.isBound = isBound;
        this.ngContentIndex = ngContentIndex;
    }
    BeginElementCmd.prototype.visit = function (visitor, context) {
        return visitor.visitBeginElement(this, context);
    };
    return BeginElementCmd;
})();
exports.BeginElementCmd = BeginElementCmd;
function beginElement(name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, isBound, ngContentIndex) {
    return new BeginElementCmd(name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, isBound, ngContentIndex);
}
exports.beginElement = beginElement;
var EndElementCmd = (function () {
    function EndElementCmd() {
    }
    EndElementCmd.prototype.visit = function (visitor, context) {
        return visitor.visitEndElement(context);
    };
    return EndElementCmd;
})();
exports.EndElementCmd = EndElementCmd;
function endElement() {
    return new EndElementCmd();
}
exports.endElement = endElement;
var BeginComponentCmd = (function () {
    function BeginComponentCmd(name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, nativeShadow, ngContentIndex, template) {
        this.name = name;
        this.attrNameAndValues = attrNameAndValues;
        this.eventTargetAndNames = eventTargetAndNames;
        this.variableNameAndValues = variableNameAndValues;
        this.directives = directives;
        this.nativeShadow = nativeShadow;
        this.ngContentIndex = ngContentIndex;
        this.template = template;
        this.isBound = true;
        this.templateId = template.id;
    }
    BeginComponentCmd.prototype.visit = function (visitor, context) {
        return visitor.visitBeginComponent(this, context);
    };
    return BeginComponentCmd;
})();
exports.BeginComponentCmd = BeginComponentCmd;
function beginComponent(name, attrNameAnsValues, eventTargetAndNames, variableNameAndValues, directives, nativeShadow, ngContentIndex, template) {
    return new BeginComponentCmd(name, attrNameAnsValues, eventTargetAndNames, variableNameAndValues, directives, nativeShadow, ngContentIndex, template);
}
exports.beginComponent = beginComponent;
var EndComponentCmd = (function () {
    function EndComponentCmd() {
    }
    EndComponentCmd.prototype.visit = function (visitor, context) {
        return visitor.visitEndComponent(context);
    };
    return EndComponentCmd;
})();
exports.EndComponentCmd = EndComponentCmd;
function endComponent() {
    return new EndComponentCmd();
}
exports.endComponent = endComponent;
var EmbeddedTemplateCmd = (function () {
    function EmbeddedTemplateCmd(attrNameAndValues, variableNameAndValues, directives, isMerged, ngContentIndex, changeDetectorFactory, children) {
        this.attrNameAndValues = attrNameAndValues;
        this.variableNameAndValues = variableNameAndValues;
        this.directives = directives;
        this.isMerged = isMerged;
        this.ngContentIndex = ngContentIndex;
        this.changeDetectorFactory = changeDetectorFactory;
        this.children = children;
        this.isBound = true;
        this.name = null;
        this.eventTargetAndNames = EMPTY_ARR;
    }
    EmbeddedTemplateCmd.prototype.visit = function (visitor, context) {
        return visitor.visitEmbeddedTemplate(this, context);
    };
    return EmbeddedTemplateCmd;
})();
exports.EmbeddedTemplateCmd = EmbeddedTemplateCmd;
function embeddedTemplate(attrNameAndValues, variableNameAndValues, directives, isMerged, ngContentIndex, changeDetectorFactory, children) {
    return new EmbeddedTemplateCmd(attrNameAndValues, variableNameAndValues, directives, isMerged, ngContentIndex, changeDetectorFactory, children);
}
exports.embeddedTemplate = embeddedTemplate;
function visitAllCommands(visitor, cmds, context) {
    if (context === void 0) { context = null; }
    for (var i = 0; i < cmds.length; i++) {
        cmds[i].visit(visitor, context);
    }
}
exports.visitAllCommands = visitAllCommands;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/template_ref.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var view_ref_1 = require('./view_ref');
/**
 * Represents an Embedded Template that can be used to instantiate Embedded Views.
 *
 * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or
 * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the
 * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the
 * `TemplateRef` from a Component or a Directive via {@link Query}.
 *
 * To instantiate Embedded Views based on a Template, use
 * {@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
 * View Container.
 */
var TemplateRef = (function () {
    function TemplateRef() {
    }
    return TemplateRef;
})();
exports.TemplateRef = TemplateRef;
var TemplateRef_ = (function (_super) {
    __extends(TemplateRef_, _super);
    function TemplateRef_(elementRef) {
        _super.call(this);
        this.elementRef = elementRef;
    }
    TemplateRef_.prototype._getProtoView = function () {
        var elementRef = this.elementRef;
        var parentView = view_ref_1.internalView(elementRef.parentView);
        return parentView.proto.elementBinders[elementRef.boundElementIndex - parentView.elementOffset]
            .nestedProtoView;
    };
    Object.defineProperty(TemplateRef_.prototype, "protoViewRef", {
        /**
         * Reference to the ProtoView used for creating Embedded Views that are based on the compiled
         * Embedded Template.
         */
        get: function () { return this._getProtoView().ref; },
        enumerable: true,
        configurable: true
    });
    TemplateRef_.prototype.hasLocal = function (name) {
        return this._getProtoView().templateVariableBindings.has(name);
    };
    return TemplateRef_;
})(TemplateRef);
exports.TemplateRef_ = TemplateRef_;

},{"./view_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_ref.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = require('angular2/src/core/facade/collection');
var change_detection_1 = require('angular2/src/core/change_detection/change_detection');
var interfaces_1 = require('angular2/src/core/change_detection/interfaces');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var view_ref_1 = require('./view_ref');
var util_1 = require('angular2/src/core/render/dom/util');
var view_ref_2 = require("./view_ref");
var interfaces_2 = require('angular2/src/core/change_detection/interfaces');
exports.DebugContext = interfaces_2.DebugContext;
var REFLECT_PREFIX = 'ng-reflect-';
(function (ViewType) {
    // A view that contains the host element with bound component directive.
    // Contains a COMPONENT view
    ViewType[ViewType["HOST"] = 0] = "HOST";
    // The view of the component
    // Can contain 0 to n EMBEDDED views
    ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
    // A view that is embedded into another View via a <template> element
    // inside of a COMPONENT view
    ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
})(exports.ViewType || (exports.ViewType = {}));
var ViewType = exports.ViewType;
var AppViewContainer = (function () {
    function AppViewContainer() {
        // The order in this list matches the DOM order.
        this.views = [];
    }
    return AppViewContainer;
})();
exports.AppViewContainer = AppViewContainer;
/**
 * Cost of making objects: http://jsperf.com/instantiate-size-of-object
 *
 */
var AppView = (function () {
    function AppView(renderer, proto, viewOffset, elementOffset, textOffset, protoLocals, render, renderFragment, containerElementInjector) {
        this.renderer = renderer;
        this.proto = proto;
        this.viewOffset = viewOffset;
        this.elementOffset = elementOffset;
        this.textOffset = textOffset;
        this.render = render;
        this.renderFragment = renderFragment;
        this.containerElementInjector = containerElementInjector;
        // AppViews that have been merged in depth first order.
        // This list is shared between all merged views. Use this.elementOffset to get the local
        // entries.
        this.views = null;
        // ElementInjectors of all AppViews in views grouped by view.
        // This list is shared between all merged views. Use this.elementOffset to get the local
        // entries.
        this.elementInjectors = null;
        // ViewContainers of all AppViews in views grouped by view.
        // This list is shared between all merged views. Use this.elementOffset to get the local
        // entries.
        this.viewContainers = null;
        // PreBuiltObjects of all AppViews in views grouped by view.
        // This list is shared between all merged views. Use this.elementOffset to get the local
        // entries.
        this.preBuiltObjects = null;
        this.changeDetector = null;
        /**
         * The context against which data-binding expressions in this view are evaluated against.
         * This is always a component instance.
         */
        this.context = null;
        this.ref = new view_ref_2.ViewRef_(this);
        this.locals = new change_detection_1.Locals(null, collection_1.MapWrapper.clone(protoLocals)); // TODO optimize this
    }
    AppView.prototype.init = function (changeDetector, elementInjectors, rootElementInjectors, preBuiltObjects, views, elementRefs, viewContainers) {
        this.changeDetector = changeDetector;
        this.elementInjectors = elementInjectors;
        this.rootElementInjectors = rootElementInjectors;
        this.preBuiltObjects = preBuiltObjects;
        this.views = views;
        this.elementRefs = elementRefs;
        this.viewContainers = viewContainers;
    };
    AppView.prototype.setLocal = function (contextName, value) {
        if (!this.hydrated())
            throw new exceptions_1.BaseException('Cannot set locals on dehydrated view.');
        if (!this.proto.templateVariableBindings.has(contextName)) {
            return;
        }
        var templateName = this.proto.templateVariableBindings.get(contextName);
        this.locals.set(templateName, value);
    };
    AppView.prototype.hydrated = function () { return lang_1.isPresent(this.context); };
    /**
     * Triggers the event handlers for the element and the directives.
     *
     * This method is intended to be called from directive EventEmitters.
     *
     * @param {string} eventName
     * @param {*} eventObj
     * @param {number} boundElementIndex
     */
    AppView.prototype.triggerEventHandlers = function (eventName, eventObj, boundElementIndex) {
        var locals = new collection_1.Map();
        locals.set('$event', eventObj);
        this.dispatchEvent(boundElementIndex, eventName, locals);
    };
    // dispatch to element injector or text nodes based on context
    AppView.prototype.notifyOnBinding = function (b, currentValue) {
        if (b.isTextNode()) {
            this.renderer.setText(this.render, b.elementIndex + this.textOffset, currentValue);
        }
        else {
            var elementRef = this.elementRefs[this.elementOffset + b.elementIndex];
            if (b.isElementProperty()) {
                this.renderer.setElementProperty(elementRef, b.name, currentValue);
            }
            else if (b.isElementAttribute()) {
                this.renderer.setElementAttribute(elementRef, b.name, lang_1.isPresent(currentValue) ? "" + currentValue : null);
            }
            else if (b.isElementClass()) {
                this.renderer.setElementClass(elementRef, b.name, currentValue);
            }
            else if (b.isElementStyle()) {
                var unit = lang_1.isPresent(b.unit) ? b.unit : '';
                this.renderer.setElementStyle(elementRef, b.name, "" + currentValue + unit);
            }
            else {
                throw new exceptions_1.BaseException('Unsupported directive record');
            }
        }
    };
    AppView.prototype.logBindingUpdate = function (b, value) {
        if (b.isDirective() || b.isElementProperty()) {
            var elementRef = this.elementRefs[this.elementOffset + b.elementIndex];
            this.renderer.setElementAttribute(elementRef, "" + REFLECT_PREFIX + util_1.camelCaseToDashCase(b.name), "" + value);
        }
    };
    AppView.prototype.notifyAfterContentChecked = function () {
        var eiCount = this.proto.elementBinders.length;
        var ei = this.elementInjectors;
        for (var i = eiCount - 1; i >= 0; i--) {
            if (lang_1.isPresent(ei[i + this.elementOffset]))
                ei[i + this.elementOffset].afterContentChecked();
        }
    };
    AppView.prototype.notifyAfterViewChecked = function () {
        var eiCount = this.proto.elementBinders.length;
        var ei = this.elementInjectors;
        for (var i = eiCount - 1; i >= 0; i--) {
            if (lang_1.isPresent(ei[i + this.elementOffset]))
                ei[i + this.elementOffset].afterViewChecked();
        }
    };
    AppView.prototype.getDirectiveFor = function (directive) {
        var elementInjector = this.elementInjectors[this.elementOffset + directive.elementIndex];
        return elementInjector.getDirectiveAtIndex(directive.directiveIndex);
    };
    AppView.prototype.getNestedView = function (boundElementIndex) {
        var eli = this.elementInjectors[boundElementIndex];
        return lang_1.isPresent(eli) ? eli.getNestedView() : null;
    };
    AppView.prototype.getContainerElement = function () {
        return lang_1.isPresent(this.containerElementInjector) ?
            this.containerElementInjector.getElementRef() :
            null;
    };
    AppView.prototype.getDebugContext = function (elementIndex, directiveIndex) {
        try {
            var offsettedIndex = this.elementOffset + elementIndex;
            var hasRefForIndex = offsettedIndex < this.elementRefs.length;
            var elementRef = hasRefForIndex ? this.elementRefs[this.elementOffset + elementIndex] : null;
            var container = this.getContainerElement();
            var ei = hasRefForIndex ? this.elementInjectors[this.elementOffset + elementIndex] : null;
            var element = lang_1.isPresent(elementRef) ? elementRef.nativeElement : null;
            var componentElement = lang_1.isPresent(container) ? container.nativeElement : null;
            var directive = lang_1.isPresent(directiveIndex) ? this.getDirectiveFor(directiveIndex) : null;
            var injector = lang_1.isPresent(ei) ? ei.getInjector() : null;
            return new interfaces_1.DebugContext(element, componentElement, directive, this.context, _localsToStringMap(this.locals), injector);
        }
        catch (e) {
            // TODO: vsavkin log the exception once we have a good way to log errors and warnings
            // if an error happens during getting the debug context, we return null.
            return null;
        }
    };
    AppView.prototype.getDetectorFor = function (directive) {
        var childView = this.getNestedView(this.elementOffset + directive.elementIndex);
        return lang_1.isPresent(childView) ? childView.changeDetector : null;
    };
    AppView.prototype.invokeElementMethod = function (elementIndex, methodName, args) {
        this.renderer.invokeElementMethod(this.elementRefs[elementIndex], methodName, args);
    };
    // implementation of RenderEventDispatcher#dispatchRenderEvent
    AppView.prototype.dispatchRenderEvent = function (boundElementIndex, eventName, locals) {
        var elementRef = this.elementRefs[boundElementIndex];
        var view = view_ref_1.internalView(elementRef.parentView);
        return view.dispatchEvent(elementRef.boundElementIndex, eventName, locals);
    };
    // returns false if preventDefault must be applied to the DOM event
    AppView.prototype.dispatchEvent = function (boundElementIndex, eventName, locals) {
        try {
            if (this.hydrated()) {
                return !this.changeDetector.handleEvent(eventName, boundElementIndex - this.elementOffset, new change_detection_1.Locals(this.locals, locals));
            }
            else {
                return true;
            }
        }
        catch (e) {
            var c = this.getDebugContext(boundElementIndex - this.elementOffset, null);
            var context = lang_1.isPresent(c) ? new _Context(c.element, c.componentElement, c.context, c.locals, c.injector) :
                null;
            throw new EventEvaluationError(eventName, e, e.stack, context);
        }
    };
    Object.defineProperty(AppView.prototype, "ownBindersCount", {
        get: function () { return this.proto.elementBinders.length; },
        enumerable: true,
        configurable: true
    });
    return AppView;
})();
exports.AppView = AppView;
function _localsToStringMap(locals) {
    var res = {};
    var c = locals;
    while (lang_1.isPresent(c)) {
        res = collection_1.StringMapWrapper.merge(res, collection_1.MapWrapper.toStringMap(c.current));
        c = c.parent;
    }
    return res;
}
/**
 * Error context included when an event handler throws an exception.
 */
var _Context = (function () {
    function _Context(element, componentElement, context, locals, injector) {
        this.element = element;
        this.componentElement = componentElement;
        this.context = context;
        this.locals = locals;
        this.injector = injector;
    }
    return _Context;
})();
/**
 * Wraps an exception thrown by an event handler.
 */
var EventEvaluationError = (function (_super) {
    __extends(EventEvaluationError, _super);
    function EventEvaluationError(eventName, originalException, originalStack, context) {
        _super.call(this, "Error during evaluation of \"" + eventName + "\"", originalException, originalStack, context);
    }
    return EventEvaluationError;
})(exceptions_1.WrappedException);
var AppProtoViewMergeInfo = (function () {
    function AppProtoViewMergeInfo(embeddedViewCount, elementCount, viewCount) {
        this.embeddedViewCount = embeddedViewCount;
        this.elementCount = elementCount;
        this.viewCount = viewCount;
    }
    return AppProtoViewMergeInfo;
})();
exports.AppProtoViewMergeInfo = AppProtoViewMergeInfo;
/**
 *
 */
var AppProtoView = (function () {
    function AppProtoView(templateCmds, type, isMergable, changeDetectorFactory, templateVariableBindings, pipes) {
        this.templateCmds = templateCmds;
        this.type = type;
        this.isMergable = isMergable;
        this.changeDetectorFactory = changeDetectorFactory;
        this.templateVariableBindings = templateVariableBindings;
        this.pipes = pipes;
        this.elementBinders = null;
        this.mergeInfo = null;
        this.variableLocations = null;
        this.textBindingCount = null;
        this.render = null;
        this.ref = new view_ref_2.ProtoViewRef_(this);
    }
    AppProtoView.prototype.init = function (render, elementBinders, textBindingCount, mergeInfo, variableLocations) {
        var _this = this;
        this.render = render;
        this.elementBinders = elementBinders;
        this.textBindingCount = textBindingCount;
        this.mergeInfo = mergeInfo;
        this.variableLocations = variableLocations;
        this.protoLocals = new collection_1.Map();
        if (lang_1.isPresent(this.templateVariableBindings)) {
            this.templateVariableBindings.forEach(function (templateName, _) { _this.protoLocals.set(templateName, null); });
        }
        if (lang_1.isPresent(variableLocations)) {
            // The view's locals needs to have a full set of variable names at construction time
            // in order to prevent new variables from being set later in the lifecycle. Since we don't
            // want
            // to actually create variable bindings for the $implicit bindings, add to the
            // protoLocals manually.
            variableLocations.forEach(function (_, templateName) { _this.protoLocals.set(templateName, null); });
        }
    };
    AppProtoView.prototype.isInitialized = function () { return lang_1.isPresent(this.elementBinders); };
    return AppProtoView;
})();
exports.AppProtoView = AppProtoView;

},{"./view_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_ref.js","angular2/src/core/change_detection/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/change_detection.js","angular2/src/core/change_detection/interfaces":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/interfaces.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/render/dom/util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/util.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_container_ref.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = require('angular2/src/core/facade/collection');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var lang_1 = require('angular2/src/core/facade/lang');
var view_ref_1 = require('./view_ref');
/**
 * Represents a container where one or more Views can be attached.
 *
 * The container can contain two kinds of Views. Host Views, created by instantiating a
 * {@link Component} via {@link #createHostView}, and Embedded Views, created by instantiating an
 * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.
 *
 * The location of the View Container within the containing View is specified by the Anchor
 * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
 * have a single View Container.
 *
 * Root elements of Views attached to this container become siblings of the Anchor Element in
 * the Rendered View.
 *
 * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected
 * with `ViewContainerRef` on the Element, or you obtain it via
 * {@link AppViewManager#getViewContainer}.
 *
 * <!-- TODO(i): we are also considering ElementRef#viewContainer api -->
 */
var ViewContainerRef = (function () {
    function ViewContainerRef() {
    }
    /**
     * Destroys all Views in this container.
     */
    ViewContainerRef.prototype.clear = function () {
        for (var i = this.length - 1; i >= 0; i--) {
            this.remove(i);
        }
    };
    Object.defineProperty(ViewContainerRef.prototype, "length", {
        /**
         * Returns the number of Views currently attached to this container.
         */
        get: function () { return exceptions_1.unimplemented(); },
        enumerable: true,
        configurable: true
    });
    ;
    return ViewContainerRef;
})();
exports.ViewContainerRef = ViewContainerRef;
var ViewContainerRef_ = (function (_super) {
    __extends(ViewContainerRef_, _super);
    function ViewContainerRef_(viewManager, element) {
        _super.call(this);
        this.viewManager = viewManager;
        this.element = element;
    }
    ViewContainerRef_.prototype._getViews = function () {
        var element = this.element;
        var vc = view_ref_1.internalView(element.parentView).viewContainers[element.boundElementIndex];
        return lang_1.isPresent(vc) ? vc.views : [];
    };
    ViewContainerRef_.prototype.get = function (index) { return this._getViews()[index].ref; };
    Object.defineProperty(ViewContainerRef_.prototype, "length", {
        get: function () { return this._getViews().length; },
        enumerable: true,
        configurable: true
    });
    // TODO(rado): profile and decide whether bounds checks should be added
    // to the methods below.
    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, index) {
        if (index === void 0) { index = -1; }
        if (index == -1)
            index = this.length;
        return this.viewManager.createEmbeddedViewInContainer(this.element, index, templateRef);
    };
    ViewContainerRef_.prototype.createHostView = function (protoViewRef, index, dynamicallyCreatedProviders) {
        if (protoViewRef === void 0) { protoViewRef = null; }
        if (index === void 0) { index = -1; }
        if (dynamicallyCreatedProviders === void 0) { dynamicallyCreatedProviders = null; }
        if (index == -1)
            index = this.length;
        return this.viewManager.createHostViewInContainer(this.element, index, protoViewRef, dynamicallyCreatedProviders);
    };
    // TODO(i): refactor insert+remove into move
    ViewContainerRef_.prototype.insert = function (viewRef, index) {
        if (index === void 0) { index = -1; }
        if (index == -1)
            index = this.length;
        return this.viewManager.attachViewInContainer(this.element, index, viewRef);
    };
    ViewContainerRef_.prototype.indexOf = function (viewRef) {
        return collection_1.ListWrapper.indexOf(this._getViews(), view_ref_1.internalView(viewRef));
    };
    // TODO(i): rename to destroy
    ViewContainerRef_.prototype.remove = function (index) {
        if (index === void 0) { index = -1; }
        if (index == -1)
            index = this.length - 1;
        this.viewManager.destroyViewInContainer(this.element, index);
        // view is intentionally not returned to the client.
    };
    // TODO(i): refactor insert+remove into move
    ViewContainerRef_.prototype.detach = function (index) {
        if (index === void 0) { index = -1; }
        if (index == -1)
            index = this.length - 1;
        return this.viewManager.detachViewInContainer(this.element, index);
    };
    return ViewContainerRef_;
})(ViewContainerRef);
exports.ViewContainerRef_ = ViewContainerRef_;

},{"./view_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_ref.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_listener.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
/**
 * Listener for view creation / destruction.
 */
var AppViewListener = (function () {
    function AppViewListener() {
    }
    AppViewListener.prototype.viewCreated = function (view) { };
    AppViewListener.prototype.viewDestroyed = function (view) { };
    AppViewListener = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], AppViewListener);
    return AppViewListener;
})();
exports.AppViewListener = AppViewListener;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_manager.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var di_1 = require('angular2/src/core/di');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var viewModule = require('./view');
var view_ref_1 = require('./view_ref');
var api_1 = require('angular2/src/core/render/api');
var view_manager_utils_1 = require('./view_manager_utils');
var view_pool_1 = require('./view_pool');
var view_listener_1 = require('./view_listener');
var profile_1 = require('../profile/profile');
var proto_view_factory_1 = require('./proto_view_factory');
/**
 * Service exposing low level API for creating, moving and destroying Views.
 *
 * Most applications should use higher-level abstractions like {@link DynamicComponentLoader} and
 * {@link ViewContainerRef} instead.
 */
var AppViewManager = (function () {
    function AppViewManager() {
    }
    /**
     * Returns the {@link ElementRef} that makes up the specified Host View.
     */
    AppViewManager.prototype.getHostElement = function (hostViewRef) {
        var hostView = view_ref_1.internalView(hostViewRef);
        if (hostView.proto.type !== viewModule.ViewType.HOST) {
            throw new exceptions_1.BaseException('This operation is only allowed on host views');
        }
        return hostView.elementRefs[hostView.elementOffset];
    };
    return AppViewManager;
})();
exports.AppViewManager = AppViewManager;
var AppViewManager_ = (function (_super) {
    __extends(AppViewManager_, _super);
    function AppViewManager_(_viewPool, _viewListener, _utils, _renderer, _protoViewFactory) {
        _super.call(this);
        this._viewPool = _viewPool;
        this._viewListener = _viewListener;
        this._utils = _utils;
        this._renderer = _renderer;
        /** @internal */
        this._createRootHostViewScope = profile_1.wtfCreateScope('AppViewManager#createRootHostView()');
        /** @internal */
        this._destroyRootHostViewScope = profile_1.wtfCreateScope('AppViewManager#destroyRootHostView()');
        /** @internal */
        this._createEmbeddedViewInContainerScope = profile_1.wtfCreateScope('AppViewManager#createEmbeddedViewInContainer()');
        /** @internal */
        this._createHostViewInContainerScope = profile_1.wtfCreateScope('AppViewManager#createHostViewInContainer()');
        /** @internal */
        this._destroyViewInContainerScope = profile_1.wtfCreateScope('AppViewMananger#destroyViewInContainer()');
        /** @internal */
        this._attachViewInContainerScope = profile_1.wtfCreateScope('AppViewMananger#attachViewInContainer()');
        /** @internal */
        this._detachViewInContainerScope = profile_1.wtfCreateScope('AppViewMananger#detachViewInContainer()');
        this._protoViewFactory = _protoViewFactory;
    }
    AppViewManager_.prototype.getViewContainer = function (location) {
        var hostView = view_ref_1.internalView(location.parentView);
        return hostView.elementInjectors[location.boundElementIndex]
            .getViewContainerRef();
    };
    AppViewManager_.prototype.getNamedElementInComponentView = function (hostLocation, variableName) {
        var hostView = view_ref_1.internalView(hostLocation.parentView);
        var boundElementIndex = hostLocation.boundElementIndex;
        var componentView = hostView.getNestedView(boundElementIndex);
        if (lang_1.isBlank(componentView)) {
            throw new exceptions_1.BaseException("There is no component directive at element " + boundElementIndex);
        }
        var binderIdx = componentView.proto.variableLocations.get(variableName);
        if (lang_1.isBlank(binderIdx)) {
            throw new exceptions_1.BaseException("Could not find variable " + variableName);
        }
        return componentView.elementRefs[componentView.elementOffset + binderIdx];
    };
    AppViewManager_.prototype.getComponent = function (hostLocation) {
        var hostView = view_ref_1.internalView(hostLocation.parentView);
        var boundElementIndex = hostLocation.boundElementIndex;
        return this._utils.getComponentInstance(hostView, boundElementIndex);
    };
    AppViewManager_.prototype.createRootHostView = function (hostProtoViewRef, overrideSelector, injector) {
        var s = this._createRootHostViewScope();
        var hostProtoView = view_ref_1.internalProtoView(hostProtoViewRef);
        this._protoViewFactory.initializeProtoViewIfNeeded(hostProtoView);
        var hostElementSelector = overrideSelector;
        if (lang_1.isBlank(hostElementSelector)) {
            hostElementSelector = hostProtoView.elementBinders[0].componentDirective.metadata.selector;
        }
        var renderViewWithFragments = this._renderer.createRootHostView(hostProtoView.render, hostProtoView.mergeInfo.embeddedViewCount + 1, hostElementSelector);
        var hostView = this._createMainView(hostProtoView, renderViewWithFragments);
        this._renderer.hydrateView(hostView.render);
        this._utils.hydrateRootHostView(hostView, injector);
        return profile_1.wtfLeave(s, hostView.ref);
    };
    AppViewManager_.prototype.destroyRootHostView = function (hostViewRef) {
        // Note: Don't put the hostView into the view pool
        // as it is depending on the element for which it was created.
        var s = this._destroyRootHostViewScope();
        var hostView = view_ref_1.internalView(hostViewRef);
        this._renderer.detachFragment(hostView.renderFragment);
        this._renderer.dehydrateView(hostView.render);
        this._viewDehydrateRecurse(hostView);
        this._viewListener.viewDestroyed(hostView);
        this._renderer.destroyView(hostView.render);
        profile_1.wtfLeave(s);
    };
    AppViewManager_.prototype.createEmbeddedViewInContainer = function (viewContainerLocation, index, templateRef) {
        var s = this._createEmbeddedViewInContainerScope();
        var protoView = view_ref_1.internalProtoView(templateRef.protoViewRef);
        if (protoView.type !== viewModule.ViewType.EMBEDDED) {
            throw new exceptions_1.BaseException('This method can only be called with embedded ProtoViews!');
        }
        this._protoViewFactory.initializeProtoViewIfNeeded(protoView);
        return profile_1.wtfLeave(s, this._createViewInContainer(viewContainerLocation, index, protoView, templateRef.elementRef, null));
    };
    AppViewManager_.prototype.createHostViewInContainer = function (viewContainerLocation, index, protoViewRef, imperativelyCreatedInjector) {
        var s = this._createHostViewInContainerScope();
        var protoView = view_ref_1.internalProtoView(protoViewRef);
        if (protoView.type !== viewModule.ViewType.HOST) {
            throw new exceptions_1.BaseException('This method can only be called with host ProtoViews!');
        }
        this._protoViewFactory.initializeProtoViewIfNeeded(protoView);
        return profile_1.wtfLeave(s, this._createViewInContainer(viewContainerLocation, index, protoView, viewContainerLocation, imperativelyCreatedInjector));
    };
    /**
     *
     * See {@link AppViewManager#destroyViewInContainer}.
     * @internal
     */
    AppViewManager_.prototype._createViewInContainer = function (viewContainerLocation, index, protoView, context, imperativelyCreatedInjector) {
        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
        var boundElementIndex = viewContainerLocation.boundElementIndex;
        var contextView = view_ref_1.internalView(context.parentView);
        var contextBoundElementIndex = context.boundElementIndex;
        var embeddedFragmentView = contextView.getNestedView(contextBoundElementIndex);
        var view;
        if (protoView.type === viewModule.ViewType.EMBEDDED && lang_1.isPresent(embeddedFragmentView) &&
            !embeddedFragmentView.hydrated()) {
            // Case 1: instantiate the first view of a template that has been merged into a parent
            view = embeddedFragmentView;
            this._attachRenderView(parentView, boundElementIndex, index, view);
        }
        else {
            // Case 2: instantiate another copy of the template or a host ProtoView.
            // This is a separate case
            // as we only inline one copy of the template into the parent view.
            view = this._createPooledView(protoView);
            this._attachRenderView(parentView, boundElementIndex, index, view);
            this._renderer.hydrateView(view.render);
        }
        this._utils.attachViewInContainer(parentView, boundElementIndex, contextView, contextBoundElementIndex, index, view);
        this._utils.hydrateViewInContainer(parentView, boundElementIndex, contextView, contextBoundElementIndex, index, imperativelyCreatedInjector);
        return view.ref;
    };
    /** @internal */
    AppViewManager_.prototype._attachRenderView = function (parentView, boundElementIndex, index, view) {
        var elementRef = parentView.elementRefs[boundElementIndex];
        if (index === 0) {
            this._renderer.attachFragmentAfterElement(elementRef, view.renderFragment);
        }
        else {
            var prevView = parentView.viewContainers[boundElementIndex].views[index - 1];
            this._renderer.attachFragmentAfterFragment(prevView.renderFragment, view.renderFragment);
        }
    };
    AppViewManager_.prototype.destroyViewInContainer = function (viewContainerLocation, index) {
        var s = this._destroyViewInContainerScope();
        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
        var boundElementIndex = viewContainerLocation.boundElementIndex;
        this._destroyViewInContainer(parentView, boundElementIndex, index);
        profile_1.wtfLeave(s);
    };
    // TODO(i): refactor detachViewInContainer+attachViewInContainer to moveViewInContainer
    AppViewManager_.prototype.attachViewInContainer = function (viewContainerLocation, index, viewRef) {
        var s = this._attachViewInContainerScope();
        var view = view_ref_1.internalView(viewRef);
        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
        var boundElementIndex = viewContainerLocation.boundElementIndex;
        // TODO(tbosch): the public methods attachViewInContainer/detachViewInContainer
        // are used for moving elements without the same container.
        // We will change this into an atomic `move` operation, which should preserve the
        // previous parent injector (see https://github.com/angular/angular/issues/1377).
        // Right now we are destroying any special
        // context view that might have been used.
        this._utils.attachViewInContainer(parentView, boundElementIndex, null, null, index, view);
        this._attachRenderView(parentView, boundElementIndex, index, view);
        return profile_1.wtfLeave(s, viewRef);
    };
    // TODO(i): refactor detachViewInContainer+attachViewInContainer to moveViewInContainer
    AppViewManager_.prototype.detachViewInContainer = function (viewContainerLocation, index) {
        var s = this._detachViewInContainerScope();
        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
        var boundElementIndex = viewContainerLocation.boundElementIndex;
        var viewContainer = parentView.viewContainers[boundElementIndex];
        var view = viewContainer.views[index];
        this._utils.detachViewInContainer(parentView, boundElementIndex, index);
        this._renderer.detachFragment(view.renderFragment);
        return profile_1.wtfLeave(s, view.ref);
    };
    /** @internal */
    AppViewManager_.prototype._createMainView = function (protoView, renderViewWithFragments) {
        var mergedParentView = this._utils.createView(protoView, renderViewWithFragments, this, this._renderer);
        this._renderer.setEventDispatcher(mergedParentView.render, mergedParentView);
        this._viewListener.viewCreated(mergedParentView);
        return mergedParentView;
    };
    /** @internal */
    AppViewManager_.prototype._createPooledView = function (protoView) {
        var view = this._viewPool.getView(protoView);
        if (lang_1.isBlank(view)) {
            view = this._createMainView(protoView, this._renderer.createView(protoView.render, protoView.mergeInfo.embeddedViewCount + 1));
        }
        return view;
    };
    /** @internal */
    AppViewManager_.prototype._destroyPooledView = function (view) {
        var wasReturned = this._viewPool.returnView(view);
        if (!wasReturned) {
            this._viewListener.viewDestroyed(view);
            this._renderer.destroyView(view.render);
        }
    };
    /** @internal */
    AppViewManager_.prototype._destroyViewInContainer = function (parentView, boundElementIndex, index) {
        var viewContainer = parentView.viewContainers[boundElementIndex];
        var view = viewContainer.views[index];
        this._viewDehydrateRecurse(view);
        this._utils.detachViewInContainer(parentView, boundElementIndex, index);
        if (view.viewOffset > 0) {
            // Case 1: a view that is part of another view.
            // Just detach the fragment
            this._renderer.detachFragment(view.renderFragment);
        }
        else {
            // Case 2: a view that is not part of another view.
            // dehydrate and destroy it.
            this._renderer.dehydrateView(view.render);
            this._renderer.detachFragment(view.renderFragment);
            this._destroyPooledView(view);
        }
    };
    /** @internal */
    AppViewManager_.prototype._viewDehydrateRecurse = function (view) {
        if (view.hydrated()) {
            this._utils.dehydrateView(view);
        }
        var viewContainers = view.viewContainers;
        var startViewOffset = view.viewOffset;
        var endViewOffset = view.viewOffset + view.proto.mergeInfo.viewCount - 1;
        var elementOffset = view.elementOffset;
        for (var viewIdx = startViewOffset; viewIdx <= endViewOffset; viewIdx++) {
            var currView = view.views[viewIdx];
            for (var binderIdx = 0; binderIdx < currView.proto.elementBinders.length; binderIdx++, elementOffset++) {
                var vc = viewContainers[elementOffset];
                if (lang_1.isPresent(vc)) {
                    for (var j = vc.views.length - 1; j >= 0; j--) {
                        this._destroyViewInContainer(currView, elementOffset, j);
                    }
                }
            }
        }
    };
    AppViewManager_ = __decorate([
        di_1.Injectable(),
        __param(4, di_1.Inject(di_1.forwardRef(function () { return proto_view_factory_1.ProtoViewFactory; }))), 
        __metadata('design:paramtypes', [view_pool_1.AppViewPool, view_listener_1.AppViewListener, view_manager_utils_1.AppViewManagerUtils, api_1.Renderer, Object])
    ], AppViewManager_);
    return AppViewManager_;
})(AppViewManager);
exports.AppViewManager_ = AppViewManager_;

},{"../profile/profile":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/profile/profile.js","./proto_view_factory":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/proto_view_factory.js","./view":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view.js","./view_listener":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_listener.js","./view_manager_utils":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_manager_utils.js","./view_pool":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_pool.js","./view_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_ref.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/render/api":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/api.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_manager_utils.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
var collection_1 = require('angular2/src/core/facade/collection');
var eli = require('./element_injector');
var lang_1 = require('angular2/src/core/facade/lang');
var viewModule = require('./view');
var element_ref_1 = require('./element_ref');
var template_ref_1 = require('./template_ref');
var pipes_1 = require('angular2/src/core/pipes/pipes');
var AppViewManagerUtils = (function () {
    function AppViewManagerUtils() {
    }
    AppViewManagerUtils.prototype.getComponentInstance = function (parentView, boundElementIndex) {
        var eli = parentView.elementInjectors[boundElementIndex];
        return eli.getComponent();
    };
    AppViewManagerUtils.prototype.createView = function (mergedParentViewProto, renderViewWithFragments, viewManager, renderer) {
        var renderFragments = renderViewWithFragments.fragmentRefs;
        var renderView = renderViewWithFragments.viewRef;
        var elementCount = mergedParentViewProto.mergeInfo.elementCount;
        var viewCount = mergedParentViewProto.mergeInfo.viewCount;
        var elementRefs = collection_1.ListWrapper.createFixedSize(elementCount);
        var viewContainers = collection_1.ListWrapper.createFixedSize(elementCount);
        var preBuiltObjects = collection_1.ListWrapper.createFixedSize(elementCount);
        var elementInjectors = collection_1.ListWrapper.createFixedSize(elementCount);
        var views = collection_1.ListWrapper.createFixedSize(viewCount);
        var elementOffset = 0;
        var textOffset = 0;
        var fragmentIdx = 0;
        var containerElementIndicesByViewIndex = collection_1.ListWrapper.createFixedSize(viewCount);
        for (var viewOffset = 0; viewOffset < viewCount; viewOffset++) {
            var containerElementIndex = containerElementIndicesByViewIndex[viewOffset];
            var containerElementInjector = lang_1.isPresent(containerElementIndex) ? elementInjectors[containerElementIndex] : null;
            var parentView = lang_1.isPresent(containerElementInjector) ? preBuiltObjects[containerElementIndex].view : null;
            var protoView = lang_1.isPresent(containerElementIndex) ?
                parentView.proto.elementBinders[containerElementIndex - parentView.elementOffset]
                    .nestedProtoView :
                mergedParentViewProto;
            var renderFragment = null;
            if (viewOffset === 0 || protoView.type === viewModule.ViewType.EMBEDDED) {
                renderFragment = renderFragments[fragmentIdx++];
            }
            var currentView = new viewModule.AppView(renderer, protoView, viewOffset, elementOffset, textOffset, protoView.protoLocals, renderView, renderFragment, containerElementInjector);
            views[viewOffset] = currentView;
            if (lang_1.isPresent(containerElementIndex)) {
                preBuiltObjects[containerElementIndex].nestedView = currentView;
            }
            var rootElementInjectors = [];
            var nestedViewOffset = viewOffset + 1;
            for (var binderIdx = 0; binderIdx < protoView.elementBinders.length; binderIdx++) {
                var binder = protoView.elementBinders[binderIdx];
                var boundElementIndex = elementOffset + binderIdx;
                var elementInjector = null;
                if (lang_1.isPresent(binder.nestedProtoView) && binder.nestedProtoView.isMergable) {
                    containerElementIndicesByViewIndex[nestedViewOffset] = boundElementIndex;
                    nestedViewOffset += binder.nestedProtoView.mergeInfo.viewCount;
                }
                // elementInjectors and rootElementInjectors
                var protoElementInjector = binder.protoElementInjector;
                if (lang_1.isPresent(protoElementInjector)) {
                    if (lang_1.isPresent(protoElementInjector.parent)) {
                        var parentElementInjector = elementInjectors[elementOffset + protoElementInjector.parent.index];
                        elementInjector = protoElementInjector.instantiate(parentElementInjector);
                    }
                    else {
                        elementInjector = protoElementInjector.instantiate(null);
                        rootElementInjectors.push(elementInjector);
                    }
                }
                elementInjectors[boundElementIndex] = elementInjector;
                // elementRefs
                var el = new element_ref_1.ElementRef_(currentView.ref, boundElementIndex, renderer);
                elementRefs[el.boundElementIndex] = el;
                // preBuiltObjects
                if (lang_1.isPresent(elementInjector)) {
                    var templateRef = lang_1.isPresent(binder.nestedProtoView) &&
                        binder.nestedProtoView.type === viewModule.ViewType.EMBEDDED ?
                        new template_ref_1.TemplateRef_(el) :
                        null;
                    preBuiltObjects[boundElementIndex] =
                        new eli.PreBuiltObjects(viewManager, currentView, el, templateRef);
                }
            }
            currentView.init(protoView.changeDetectorFactory(currentView), elementInjectors, rootElementInjectors, preBuiltObjects, views, elementRefs, viewContainers);
            if (lang_1.isPresent(parentView) && protoView.type === viewModule.ViewType.COMPONENT) {
                parentView.changeDetector.addShadowDomChild(currentView.changeDetector);
            }
            elementOffset += protoView.elementBinders.length;
            textOffset += protoView.textBindingCount;
        }
        return views[0];
    };
    AppViewManagerUtils.prototype.hydrateRootHostView = function (hostView, injector) {
        this._hydrateView(hostView, injector, null, new Object(), null);
    };
    // Misnomer: this method is attaching next to the view container.
    AppViewManagerUtils.prototype.attachViewInContainer = function (parentView, boundElementIndex, contextView, contextBoundElementIndex, index, view) {
        if (lang_1.isBlank(contextView)) {
            contextView = parentView;
            contextBoundElementIndex = boundElementIndex;
        }
        parentView.changeDetector.addChild(view.changeDetector);
        var viewContainer = parentView.viewContainers[boundElementIndex];
        if (lang_1.isBlank(viewContainer)) {
            viewContainer = new viewModule.AppViewContainer();
            parentView.viewContainers[boundElementIndex] = viewContainer;
        }
        collection_1.ListWrapper.insert(viewContainer.views, index, view);
        var elementInjector = contextView.elementInjectors[contextBoundElementIndex];
        for (var i = view.rootElementInjectors.length - 1; i >= 0; i--) {
            if (lang_1.isPresent(elementInjector.parent)) {
                view.rootElementInjectors[i].link(elementInjector.parent);
            }
        }
        elementInjector.traverseAndSetQueriesAsDirty();
    };
    AppViewManagerUtils.prototype.detachViewInContainer = function (parentView, boundElementIndex, index) {
        var viewContainer = parentView.viewContainers[boundElementIndex];
        var view = viewContainer.views[index];
        parentView.elementInjectors[boundElementIndex].traverseAndSetQueriesAsDirty();
        view.changeDetector.remove();
        collection_1.ListWrapper.removeAt(viewContainer.views, index);
        for (var i = 0; i < view.rootElementInjectors.length; ++i) {
            var inj = view.rootElementInjectors[i];
            inj.unlink();
        }
    };
    AppViewManagerUtils.prototype.hydrateViewInContainer = function (parentView, boundElementIndex, contextView, contextBoundElementIndex, index, imperativelyCreatedProviders) {
        if (lang_1.isBlank(contextView)) {
            contextView = parentView;
            contextBoundElementIndex = boundElementIndex;
        }
        var viewContainer = parentView.viewContainers[boundElementIndex];
        var view = viewContainer.views[index];
        var elementInjector = contextView.elementInjectors[contextBoundElementIndex];
        var injector = lang_1.isPresent(imperativelyCreatedProviders) ?
            di_1.Injector.fromResolvedProviders(imperativelyCreatedProviders) :
            null;
        this._hydrateView(view, injector, elementInjector.getHost(), contextView.context, contextView.locals);
    };
    /** @internal */
    AppViewManagerUtils.prototype._hydrateView = function (initView, imperativelyCreatedInjector, hostElementInjector, context, parentLocals) {
        var viewIdx = initView.viewOffset;
        var endViewOffset = viewIdx + initView.proto.mergeInfo.viewCount - 1;
        while (viewIdx <= endViewOffset) {
            var currView = initView.views[viewIdx];
            var currProtoView = currView.proto;
            if (currView !== initView && currView.proto.type === viewModule.ViewType.EMBEDDED) {
                // Don't hydrate components of embedded fragment views.
                viewIdx += currView.proto.mergeInfo.viewCount;
            }
            else {
                if (currView !== initView) {
                    // hydrate a nested component view
                    imperativelyCreatedInjector = null;
                    parentLocals = null;
                    hostElementInjector = currView.containerElementInjector;
                    context = hostElementInjector.getComponent();
                }
                currView.context = context;
                currView.locals.parent = parentLocals;
                var binders = currProtoView.elementBinders;
                for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
                    var boundElementIndex = binderIdx + currView.elementOffset;
                    var elementInjector = initView.elementInjectors[boundElementIndex];
                    if (lang_1.isPresent(elementInjector)) {
                        elementInjector.hydrate(imperativelyCreatedInjector, hostElementInjector, currView.preBuiltObjects[boundElementIndex]);
                        this._populateViewLocals(currView, elementInjector, boundElementIndex);
                        this._setUpEventEmitters(currView, elementInjector, boundElementIndex);
                    }
                }
                var pipes = lang_1.isPresent(hostElementInjector) ?
                    new pipes_1.Pipes(currView.proto.pipes, hostElementInjector.getInjector()) :
                    null;
                currView.changeDetector.hydrate(currView.context, currView.locals, currView, pipes);
                viewIdx++;
            }
        }
    };
    /** @internal */
    AppViewManagerUtils.prototype._populateViewLocals = function (view, elementInjector, boundElementIdx) {
        if (lang_1.isPresent(elementInjector.getDirectiveVariableBindings())) {
            elementInjector.getDirectiveVariableBindings().forEach(function (directiveIndex, name) {
                if (lang_1.isBlank(directiveIndex)) {
                    view.locals.set(name, view.elementRefs[boundElementIdx].nativeElement);
                }
                else {
                    view.locals.set(name, elementInjector.getDirectiveAtIndex(directiveIndex));
                }
            });
        }
    };
    /** @internal */
    AppViewManagerUtils.prototype._setUpEventEmitters = function (view, elementInjector, boundElementIndex) {
        var emitters = elementInjector.getEventEmitterAccessors();
        for (var directiveIndex = 0; directiveIndex < emitters.length; ++directiveIndex) {
            var directiveEmitters = emitters[directiveIndex];
            var directive = elementInjector.getDirectiveAtIndex(directiveIndex);
            for (var eventIndex = 0; eventIndex < directiveEmitters.length; ++eventIndex) {
                var eventEmitterAccessor = directiveEmitters[eventIndex];
                eventEmitterAccessor.subscribe(view, boundElementIndex, directive);
            }
        }
    };
    AppViewManagerUtils.prototype.dehydrateView = function (initView) {
        var endViewOffset = initView.viewOffset + initView.proto.mergeInfo.viewCount - 1;
        for (var viewIdx = initView.viewOffset; viewIdx <= endViewOffset; viewIdx++) {
            var currView = initView.views[viewIdx];
            if (currView.hydrated()) {
                if (lang_1.isPresent(currView.locals)) {
                    currView.locals.clearValues();
                }
                currView.context = null;
                currView.changeDetector.dehydrate();
                var binders = currView.proto.elementBinders;
                for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
                    var eli = initView.elementInjectors[currView.elementOffset + binderIdx];
                    if (lang_1.isPresent(eli)) {
                        eli.dehydrate();
                    }
                }
            }
        }
    };
    AppViewManagerUtils = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], AppViewManagerUtils);
    return AppViewManagerUtils;
})();
exports.AppViewManagerUtils = AppViewManagerUtils;

},{"./element_injector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/element_injector.js","./element_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/element_ref.js","./template_ref":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/template_ref.js","./view":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/pipes/pipes":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/pipes.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_pool.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var di_1 = require('angular2/src/core/di');
var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
exports.APP_VIEW_POOL_CAPACITY = lang_1.CONST_EXPR(new di_1.OpaqueToken('AppViewPool.viewPoolCapacity'));
var AppViewPool = (function () {
    function AppViewPool(poolCapacityPerProtoView) {
        /** @internal */
        this._pooledViewsPerProtoView = new collection_1.Map();
        this._poolCapacityPerProtoView = poolCapacityPerProtoView;
    }
    AppViewPool.prototype.getView = function (protoView) {
        var pooledViews = this._pooledViewsPerProtoView.get(protoView);
        if (lang_1.isPresent(pooledViews) && pooledViews.length > 0) {
            return pooledViews.pop();
        }
        return null;
    };
    AppViewPool.prototype.returnView = function (view) {
        var protoView = view.proto;
        var pooledViews = this._pooledViewsPerProtoView.get(protoView);
        if (lang_1.isBlank(pooledViews)) {
            pooledViews = [];
            this._pooledViewsPerProtoView.set(protoView, pooledViews);
        }
        var haveRemainingCapacity = pooledViews.length < this._poolCapacityPerProtoView;
        if (haveRemainingCapacity) {
            pooledViews.push(view);
        }
        return haveRemainingCapacity;
    };
    AppViewPool = __decorate([
        di_1.Injectable(),
        __param(0, di_1.Inject(exports.APP_VIEW_POOL_CAPACITY)), 
        __metadata('design:paramtypes', [Object])
    ], AppViewPool);
    return AppViewPool;
})();
exports.AppViewPool = AppViewPool;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_ref.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
// This is a workaround for privacy in Dart as we don't have library parts
function internalView(viewRef) {
    return viewRef._view;
}
exports.internalView = internalView;
// This is a workaround for privacy in Dart as we don't have library parts
function internalProtoView(protoViewRef) {
    return lang_1.isPresent(protoViewRef) ? protoViewRef._protoView : null;
}
exports.internalProtoView = internalProtoView;
/**
 * Represents an Angular View.
 *
 * <!-- TODO: move the next two paragraphs to the dev guide -->
 * A View is a fundamental building block of the application UI. It is the smallest grouping of
 * Elements which are created and destroyed together.
 *
 * Properties of elements in a View can change, but the structure (number and order) of elements in
 * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
 * removing nested Views via a {@link ViewContainer}. Each View can contain many View Containers.
 * <!-- /TODO -->
 *
 * ## Example
 *
 * Given this template...
 *
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <li *ng-for="var item of items">{{item}}</li>
 * </ul>
 * ```
 *
 * ... we have two {@link ProtoViewRef}s:
 *
 * Outer {@link ProtoViewRef}:
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <template ng-for var-item [ng-for-of]="items"></template>
 * </ul>
 * ```
 *
 * Inner {@link ProtoViewRef}:
 * ```
 *   <li>{{item}}</li>
 * ```
 *
 * Notice that the original template is broken down into two separate {@link ProtoViewRef}s.
 *
 * The outer/inner {@link ProtoViewRef}s are then assembled into views like so:
 *
 * ```
 * <!-- ViewRef: outer-0 -->
 * Count: 2
 * <ul>
 *   <template view-container-ref></template>
 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
 * </ul>
 * <!-- /ViewRef: outer-0 -->
 * ```
 */
var ViewRef = (function () {
    function ViewRef() {
    }
    Object.defineProperty(ViewRef.prototype, "changeDetectorRef", {
        get: function () { return exceptions_1.unimplemented(); },
        set: function (value) {
            exceptions_1.unimplemented(); // TODO: https://github.com/Microsoft/TypeScript/issues/12
        },
        enumerable: true,
        configurable: true
    });
    return ViewRef;
})();
exports.ViewRef = ViewRef;
var ViewRef_ = (function (_super) {
    __extends(ViewRef_, _super);
    function ViewRef_(_view) {
        _super.call(this);
        this._changeDetectorRef = null;
        this._view = _view;
    }
    Object.defineProperty(ViewRef_.prototype, "render", {
        /**
         * Return `RenderViewRef`
         */
        get: function () { return this._view.render; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "renderFragment", {
        /**
         * Return `RenderFragmentRef`
         */
        get: function () { return this._view.renderFragment; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "changeDetectorRef", {
        /**
         * Return `ChangeDetectorRef`
         */
        get: function () {
            if (this._changeDetectorRef === null) {
                this._changeDetectorRef = this._view.changeDetector.ref;
            }
            return this._changeDetectorRef;
        },
        enumerable: true,
        configurable: true
    });
    ViewRef_.prototype.setLocal = function (variableName, value) { this._view.setLocal(variableName, value); };
    return ViewRef_;
})(ViewRef);
exports.ViewRef_ = ViewRef_;
/**
 * Represents an Angular ProtoView.
 *
 * A ProtoView is a prototypical {@link ViewRef View} that is the result of Template compilation and
 * is used by Angular to efficiently create an instance of this View based on the compiled Template.
 *
 * Most ProtoViews are created and used internally by Angular and you don't need to know about them,
 * except in advanced use-cases where you compile components yourself via the low-level
 * {@link Compiler#compileInHost} API.
 *
 *
 * ## Example
 *
 * Given this template:
 *
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <li *ng-for="var item of items">{{item}}</li>
 * </ul>
 * ```
 *
 * Angular desugars and compiles the template into two ProtoViews:
 *
 * Outer ProtoView:
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <template ng-for var-item [ng-for-of]="items"></template>
 * </ul>
 * ```
 *
 * Inner ProtoView:
 * ```
 *   <li>{{item}}</li>
 * ```
 *
 * Notice that the original template is broken down into two separate ProtoViews.
 */
var ProtoViewRef = (function () {
    function ProtoViewRef() {
    }
    return ProtoViewRef;
})();
exports.ProtoViewRef = ProtoViewRef;
var ProtoViewRef_ = (function (_super) {
    __extends(ProtoViewRef_, _super);
    function ProtoViewRef_(_protoView) {
        _super.call(this);
        this._protoView = _protoView;
    }
    return ProtoViewRef_;
})(ProtoViewRef);
exports.ProtoViewRef_ = ProtoViewRef_;

},{"angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/linker/view_resolver.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
var view_1 = require('../metadata/view');
var directives_1 = require('../metadata/directives');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var reflection_1 = require('angular2/src/core/reflection/reflection');
var ViewResolver = (function () {
    function ViewResolver() {
        /** @internal */
        this._cache = new collection_1.Map();
    }
    ViewResolver.prototype.resolve = function (component) {
        var view = this._cache.get(component);
        if (lang_1.isBlank(view)) {
            view = this._resolve(component);
            this._cache.set(component, view);
        }
        return view;
    };
    /** @internal */
    ViewResolver.prototype._resolve = function (component) {
        var compMeta;
        var viewMeta;
        reflection_1.reflector.annotations(component).forEach(function (m) {
            if (m instanceof view_1.ViewMetadata) {
                viewMeta = m;
            }
            if (m instanceof directives_1.ComponentMetadata) {
                compMeta = m;
            }
        });
        if (lang_1.isPresent(compMeta)) {
            if (lang_1.isBlank(compMeta.template) && lang_1.isBlank(compMeta.templateUrl) && lang_1.isBlank(viewMeta)) {
                throw new exceptions_1.BaseException("Component '" + lang_1.stringify(component) + "' must have either 'template', 'templateUrl', or '@View' set.");
            }
            else if (lang_1.isPresent(compMeta.template) && lang_1.isPresent(viewMeta)) {
                this._throwMixingViewAndComponent("template", component);
            }
            else if (lang_1.isPresent(compMeta.templateUrl) && lang_1.isPresent(viewMeta)) {
                this._throwMixingViewAndComponent("templateUrl", component);
            }
            else if (lang_1.isPresent(compMeta.directives) && lang_1.isPresent(viewMeta)) {
                this._throwMixingViewAndComponent("directives", component);
            }
            else if (lang_1.isPresent(compMeta.pipes) && lang_1.isPresent(viewMeta)) {
                this._throwMixingViewAndComponent("pipes", component);
            }
            else if (lang_1.isPresent(compMeta.encapsulation) && lang_1.isPresent(viewMeta)) {
                this._throwMixingViewAndComponent("encapsulation", component);
            }
            else if (lang_1.isPresent(compMeta.styles) && lang_1.isPresent(viewMeta)) {
                this._throwMixingViewAndComponent("styles", component);
            }
            else if (lang_1.isPresent(compMeta.styleUrls) && lang_1.isPresent(viewMeta)) {
                this._throwMixingViewAndComponent("styleUrls", component);
            }
            else if (lang_1.isPresent(viewMeta)) {
                return viewMeta;
            }
            else {
                return new view_1.ViewMetadata({
                    templateUrl: compMeta.templateUrl,
                    template: compMeta.template,
                    directives: compMeta.directives,
                    pipes: compMeta.pipes,
                    encapsulation: compMeta.encapsulation,
                    styles: compMeta.styles,
                    styleUrls: compMeta.styleUrls
                });
            }
        }
        else {
            if (lang_1.isBlank(viewMeta)) {
                throw new exceptions_1.BaseException("No View decorator found on component '" + lang_1.stringify(component) + "'");
            }
            else {
                return viewMeta;
            }
        }
        return null;
    };
    /** @internal */
    ViewResolver.prototype._throwMixingViewAndComponent = function (propertyName, component) {
        throw new exceptions_1.BaseException("Component '" + lang_1.stringify(component) + "' cannot have both '" + propertyName + "' and '@View' set at the same time\"");
    };
    ViewResolver = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], ViewResolver);
    return ViewResolver;
})();
exports.ViewResolver = ViewResolver;

},{"../metadata/directives":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/directives.js","../metadata/view":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/view.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/reflection/reflection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflection.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js":[function(require,module,exports){
'use strict';/**
 * This indirection is needed to free up Component, etc symbols in the public API
 * to be used by the decorator versions of these annotations.
 */
var di_1 = require('./metadata/di');
exports.QueryMetadata = di_1.QueryMetadata;
exports.ContentChildrenMetadata = di_1.ContentChildrenMetadata;
exports.ContentChildMetadata = di_1.ContentChildMetadata;
exports.ViewChildrenMetadata = di_1.ViewChildrenMetadata;
exports.ViewQueryMetadata = di_1.ViewQueryMetadata;
exports.ViewChildMetadata = di_1.ViewChildMetadata;
exports.AttributeMetadata = di_1.AttributeMetadata;
var directives_1 = require('./metadata/directives');
exports.ComponentMetadata = directives_1.ComponentMetadata;
exports.DirectiveMetadata = directives_1.DirectiveMetadata;
exports.PipeMetadata = directives_1.PipeMetadata;
exports.InputMetadata = directives_1.InputMetadata;
exports.OutputMetadata = directives_1.OutputMetadata;
exports.HostBindingMetadata = directives_1.HostBindingMetadata;
exports.HostListenerMetadata = directives_1.HostListenerMetadata;
var view_1 = require('./metadata/view');
exports.ViewMetadata = view_1.ViewMetadata;
exports.ViewEncapsulation = view_1.ViewEncapsulation;
var di_2 = require('./metadata/di');
var directives_2 = require('./metadata/directives');
var view_2 = require('./metadata/view');
var decorators_1 = require('./util/decorators');
// TODO(alexeagle): remove the duplication of this doc. It is copied from ComponentMetadata.
/**
 * Declare reusable UI building blocks for an application.
 *
 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
 * `@Component`
 * annotation specifies when a component is instantiated, and which properties and hostListeners it
 * binds to.
 *
 * When a component is instantiated, Angular
 * - creates a shadow DOM for the component.
 * - loads the selected template into the shadow DOM.
 * - creates all the injectable objects configured with `providers` and `viewProviders`.
 *
 * All template expressions and statements are then evaluated against the component instance.
 *
 * For details on the `@View` annotation, see {@link ViewMetadata}.
 *
 * ## Lifecycle hooks
 *
 * When the component class implements some {@link angular2/lifecycle_hooks} the callbacks are
 * called by the change detection at defined points in time during the life of the component.
 *
 * ## Example
 *
 * ```
 * @Component({
 *   selector: 'greet',
 *   template: 'Hello {{name}}!'
 * })
 * class Greet {
 *   name: string;
 *
 *   constructor() {
 *     this.name = 'World';
 *   }
 * }
 * ```
 *
 */
exports.Component = decorators_1.makeDecorator(directives_2.ComponentMetadata, function (fn) { return fn.View = exports.View; });
// TODO(alexeagle): remove the duplication of this doc. It is copied from DirectiveMetadata.
/**
 * Directives allow you to attach behavior to elements in the DOM.
 *
 * {@link DirectiveMetadata}s with an embedded view are called {@link ComponentMetadata}s.
 *
 * A directive consists of a single directive annotation and a controller class. When the
 * directive's `selector` matches
 * elements in the DOM, the following steps occur:
 *
 * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor
 * arguments.
 * 2. Angular instantiates directives for each matched element using `ElementInjector` in a
 * depth-first order,
 *    as declared in the HTML.
 *
 * ## Understanding How Injection Works
 *
 * There are three stages of injection resolution.
 * - *Pre-existing Injectors*:
 *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if
 * the dependency was
 *     specified as `@Optional`, returns `null`.
 *   - The platform injector resolves browser singleton resources, such as: cookies, title,
 * location, and others.
 * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow
 * the same parent-child hierarchy
 *     as the component instances in the DOM.
 * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each
 * element has an `ElementInjector`
 *     which follow the same parent-child hierarchy as the DOM elements themselves.
 *
 * When a template is instantiated, it also must instantiate the corresponding directives in a
 * depth-first order. The
 * current `ElementInjector` resolves the constructor dependencies for each directive.
 *
 * Angular then resolves dependencies as follows, according to the order in which they appear in the
 * {@link ViewMetadata}:
 *
 * 1. Dependencies on the current element
 * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary
 * 3. Dependencies on component injectors and their parents until it encounters the root component
 * 4. Dependencies on pre-existing injectors
 *
 *
 * The `ElementInjector` can inject other directives, element-specific special objects, or it can
 * delegate to the parent
 * injector.
 *
 * To inject other directives, declare the constructor parameter as:
 * - `directive:DirectiveType`: a directive on the current element only
 * - `@Host() directive:DirectiveType`: any directive that matches the type between the current
 * element and the
 *    Shadow DOM root.
 * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child
 * directives.
 * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any
 * child directives.
 *
 * To inject element-specific special objects, declare the constructor parameter as:
 * - `element: ElementRef` to obtain a reference to logical element in the view.
 * - `viewContainer: ViewContainerRef` to control child template instantiation, for
 * {@link DirectiveMetadata} directives only
 * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.
 *
 * ## Example
 *
 * The following example demonstrates how dependency injection resolves constructor arguments in
 * practice.
 *
 *
 * Assume this HTML template:
 *
 * ```
 * <div dependency="1">
 *   <div dependency="2">
 *     <div dependency="3" my-directive>
 *       <div dependency="4">
 *         <div dependency="5"></div>
 *       </div>
 *       <div dependency="6"></div>
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * With the following `dependency` decorator and `SomeService` injectable class.
 *
 * ```
 * @Injectable()
 * class SomeService {
 * }
 *
 * @Directive({
 *   selector: '[dependency]',
 *   inputs: [
 *     'id: dependency'
 *   ]
 * })
 * class Dependency {
 *   id:string;
 * }
 * ```
 *
 * Let's step through the different ways in which `MyDirective` could be declared...
 *
 *
 * ### No injection
 *
 * Here the constructor is declared with no arguments, therefore nothing is injected into
 * `MyDirective`.
 *
 * ```
 * @Directive({ selector: '[my-directive]' })
 * class MyDirective {
 *   constructor() {
 *   }
 * }
 * ```
 *
 * This directive would be instantiated with no dependencies.
 *
 *
 * ### Component-level injection
 *
 * Directives can inject any injectable instance from the closest component injector or any of its
 * parents.
 *
 * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type
 * from the parent
 * component's injector.
 * ```
 * @Directive({ selector: '[my-directive]' })
 * class MyDirective {
 *   constructor(someService: SomeService) {
 *   }
 * }
 * ```
 *
 * This directive would be instantiated with a dependency on `SomeService`.
 *
 *
 * ### Injecting a directive from the current element
 *
 * Directives can inject other directives declared on the current element.
 *
 * ```
 * @Directive({ selector: '[my-directive]' })
 * class MyDirective {
 *   constructor(dependency: Dependency) {
 *     expect(dependency.id).toEqual(3);
 *   }
 * }
 * ```
 * This directive would be instantiated with `Dependency` declared at the same element, in this case
 * `dependency="3"`.
 *
 * ### Injecting a directive from any ancestor elements
 *
 * Directives can inject other directives declared on any ancestor element (in the current Shadow
 * DOM), i.e. on the current element, the
 * parent element, or its parents.
 * ```
 * @Directive({ selector: '[my-directive]' })
 * class MyDirective {
 *   constructor(@Host() dependency: Dependency) {
 *     expect(dependency.id).toEqual(2);
 *   }
 * }
 * ```
 *
 * `@Host` checks the current element, the parent, as well as its parents recursively. If
 * `dependency="2"` didn't
 * exist on the direct parent, this injection would
 * have returned
 * `dependency="1"`.
 *
 *
 * ### Injecting a live collection of direct child directives
 *
 *
 * A directive can also query for other child directives. Since parent directives are instantiated
 * before child directives, a directive can't simply inject the list of child directives. Instead,
 * the directive injects a {@link QueryList}, which updates its contents as children are added,
 * removed, or moved by a directive that uses a {@link ViewContainerRef} such as a `ng-for`, an
 * `ng-if`, or an `ng-switch`.
 *
 * ```
 * @Directive({ selector: '[my-directive]' })
 * class MyDirective {
 *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {
 *   }
 * }
 * ```
 *
 * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and
 * 6. Here, `Dependency` 5 would not be included, because it is not a direct child.
 *
 * ### Injecting a live collection of descendant directives
 *
 * By passing the descendant flag to `@Query` above, we can include the children of the child
 * elements.
 *
 * ```
 * @Directive({ selector: '[my-directive]' })
 * class MyDirective {
 *   constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList<Dependency>) {
 *   }
 * }
 * ```
 *
 * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.
 *
 * ### Optional injection
 *
 * The normal behavior of directives is to return an error when a specified dependency cannot be
 * resolved. If you
 * would like to inject `null` on unresolved dependency instead, you can annotate that dependency
 * with `@Optional()`.
 * This explicitly permits the author of a template to treat some of the surrounding directives as
 * optional.
 *
 * ```
 * @Directive({ selector: '[my-directive]' })
 * class MyDirective {
 *   constructor(@Optional() dependency:Dependency) {
 *   }
 * }
 * ```
 *
 * This directive would be instantiated with a `Dependency` directive found on the current element.
 * If none can be
 * found, the injector supplies `null` instead of throwing an error.
 *
 * ## Example
 *
 * Here we use a decorator directive to simply define basic tool-tip behavior.
 *
 * ```
 * @Directive({
 *   selector: '[tooltip]',
 *   inputs: [
 *     'text: tooltip'
 *   ],
 *   host: {
 *     '(mouseenter)': 'onMouseEnter()',
 *     '(mouseleave)': 'onMouseLeave()'
 *   }
 * })
 * class Tooltip{
 *   text:string;
 *   overlay:Overlay; // NOT YET IMPLEMENTED
 *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED
 *
 *   constructor(overlayManager:OverlayManager) {
 *     this.overlay = overlay;
 *   }
 *
 *   onMouseEnter() {
 *     // exact signature to be determined
 *     this.overlay = this.overlayManager.open(text, ...);
 *   }
 *
 *   onMouseLeave() {
 *     this.overlay.close();
 *     this.overlay = null;
 *   }
 * }
 * ```
 * In our HTML template, we can then add this behavior to a `<div>` or any other element with the
 * `tooltip` selector,
 * like so:
 *
 * ```
 * <div tooltip="some text here"></div>
 * ```
 *
 * Directives can also control the instantiation, destruction, and positioning of inline template
 * elements:
 *
 * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at
 * runtime.
 * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a
 * location in the current view
 * where these actions are performed.
 *
 * Views are always created as children of the current {@link ViewMetadata}, and as siblings of the
 * `<template>` element. Thus a
 * directive in a child view cannot inject the directive that created it.
 *
 * Since directives that create views via ViewContainers are common in Angular, and using the full
 * `<template>` element syntax is wordy, Angular
 * also supports a shorthand notation: `<li *foo="bar">` and `<li template="foo: bar">` are
 * equivalent.
 *
 * Thus,
 *
 * ```
 * <ul>
 *   <li *foo="bar" title="text"></li>
 * </ul>
 * ```
 *
 * Expands in use to:
 *
 * ```
 * <ul>
 *   <template [foo]="bar">
 *     <li title="text"></li>
 *   </template>
 * </ul>
 * ```
 *
 * Notice that although the shorthand places `*foo="bar"` within the `<li>` element, the binding for
 * the directive
 * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.
 *
 * ## Lifecycle hooks
 *
 * When the directive class implements some {@link angular2/lifecycle_hooks} the callbacks are
 * called by the change detection at defined points in time during the life of the directive.
 *
 * ## Example
 *
 * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.
 *
 * Here is a simple directive that triggers on an `unless` selector:
 *
 * ```
 * @Directive({
 *   selector: '[unless]',
 *   inputs: ['unless']
 * })
 * export class Unless {
 *   viewContainer: ViewContainerRef;
 *   templateRef: TemplateRef;
 *   prevCondition: boolean;
 *
 *   constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {
 *     this.viewContainer = viewContainer;
 *     this.templateRef = templateRef;
 *     this.prevCondition = null;
 *   }
 *
 *   set unless(newCondition) {
 *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {
 *       this.prevCondition = true;
 *       this.viewContainer.clear();
 *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {
 *       this.prevCondition = false;
 *       this.viewContainer.create(this.templateRef);
 *     }
 *   }
 * }
 * ```
 *
 * We can then use this `unless` selector in a template:
 * ```
 * <ul>
 *   <li *unless="expr"></li>
 * </ul>
 * ```
 *
 * Once the directive instantiates the child view, the shorthand notation for the template expands
 * and the result is:
 *
 * ```
 * <ul>
 *   <template [unless]="exp">
 *     <li></li>
 *   </template>
 *   <li></li>
 * </ul>
 * ```
 *
 * Note also that although the `<li></li>` template still exists inside the `<template></template>`,
 * the instantiated
 * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.
 */
exports.Directive = decorators_1.makeDecorator(directives_2.DirectiveMetadata);
// TODO(alexeagle): remove the duplication of this doc. It is copied from ViewMetadata.
/**
 * Metadata properties available for configuring Views.
 *
 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
 * `@View` annotation specifies the HTML template to use, and lists the directives that are active
 * within the template.
 *
 * When a component is instantiated, the template is loaded into the component's shadow root, and
 * the expressions and statements in the template are evaluated against the component.
 *
 * For details on the `@Component` annotation, see {@link ComponentMetadata}.
 *
 * ## Example
 *
 * ```
 * @Component({
 *   selector: 'greet',
 *   template: 'Hello {{name}}!',
 *   directives: [GreetUser, Bold]
 * })
 * class Greet {
 *   name: string;
 *
 *   constructor() {
 *     this.name = 'World';
 *   }
 * }
 * ```
 */
exports.View = decorators_1.makeDecorator(view_2.ViewMetadata, function (fn) { return fn.View = exports.View; });
// TODO(alexeagle): remove the duplication of this doc. It is copied from AttributeMetadata.
/**
 * Metadata properties available for configuring Views.
 *
 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
 * `@View` annotation specifies the HTML template to use, and lists the directives that are active
 * within the template.
 *
 * When a component is instantiated, the template is loaded into the component's shadow root, and
 * the expressions and statements in the template are evaluated against the component.
 *
 * For details on the `@Component` annotation, see {@link ComponentMetadata}.
 *
 * ## Example
 *
 * ```
 * @Component({
 *   selector: 'greet',
 *   template: 'Hello {{name}}!',
 *   directives: [GreetUser, Bold]
 * })
 * class Greet {
 *   name: string;
 *
 *   constructor() {
 *     this.name = 'World';
 *   }
 * }
 * ```
 */
exports.Attribute = decorators_1.makeParamDecorator(di_2.AttributeMetadata);
// TODO(alexeagle): remove the duplication of this doc. It is copied from QueryMetadata.
/**
 * Declares an injectable parameter to be a live list of directives or variable
 * bindings from the content children of a directive.
 *
 * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
 *
 * Assume that `<tabs>` component would like to get a list its children `<pane>`
 * components as shown in this example:
 *
 * ```html
 * <tabs>
 *   <pane title="Overview">...</pane>
 *   <pane *ng-for="#o of objects" [title]="o.title">{{o.text}}</pane>
 * </tabs>
 * ```
 *
 * The preferred solution is to query for `Pane` directives using this decorator.
 *
 * ```javascript
 * @Component({
 *   selector: 'pane',
 *   inputs: ['title']
 * })
 * class Pane {
 *   title:string;
 * }
 *
 * @Component({
 *  selector: 'tabs',
 *  template: `
 *    <ul>
 *      <li *ng-for="#pane of panes">{{pane.title}}</li>
 *    </ul>
 *    <content></content>
 *  `
 * })
 * class Tabs {
 *   panes: QueryList<Pane>;
 *   constructor(@Query(Pane) panes:QueryList<Pane>) {
 *     this.panes = panes;
 *   }
 * }
 * ```
 *
 * A query can look for variable bindings by passing in a string with desired binding symbol.
 *
 * ### Example ([live demo](http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview))
 * ```html
 * <seeker>
 *   <div #findme>...</div>
 * </seeker>
 *
 * @Component({ selector: 'foo' })
 * class seeker {
 *   constructor(@Query('findme') elList: QueryList<ElementRef>) {...}
 * }
 * ```
 *
 * In this case the object that is injected depend on the type of the variable
 * binding. It can be an ElementRef, a directive or a component.
 *
 * Passing in a comma separated list of variable bindings will query for all of them.
 *
 * ```html
 * <seeker>
 *   <div #find-me>...</div>
 *   <div #find-me-too>...</div>
 * </seeker>
 *
 *  @Component({
 *   selector: 'foo'
 * })
 * class Seeker {
 *   constructor(@Query('findMe, findMeToo') elList: QueryList<ElementRef>) {...}
 * }
 * ```
 *
 * Configure whether query looks for direct children or all descendants
 * of the querying element, by using the `descendants` parameter.
 * It is set to `false` by default.
 *
 * ### Example ([live demo](http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview))
 * ```html
 * <container #first>
 *   <item>a</item>
 *   <item>b</item>
 *   <container #second>
 *     <item>c</item>
 *   </container>
 * </container>
 * ```
 *
 * When querying for items, the first container will see only `a` and `b` by default,
 * but with `Query(TextDirective, {descendants: true})` it will see `c` too.
 *
 * The queried directives are kept in a depth-first pre-order with respect to their
 * positions in the DOM.
 *
 * Query does not look deep into any subcomponent views.
 *
 * Query is updated as part of the change-detection cycle. Since change detection
 * happens after construction of a directive, QueryList will always be empty when observed in the
 * constructor.
 *
 * The injected object is an unmodifiable live list.
 * See {@link QueryList} for more details.
 */
exports.Query = decorators_1.makeParamDecorator(di_2.QueryMetadata);
// TODO(alexeagle): remove the duplication of this doc. It is copied from ContentChildrenMetadata.
/**
 * Configures a content query.
 *
 * Content queries are set before the `afterContentInit` callback is called.
 *
 * ### Example
 *
 * ```
 * @Directive({
 *   selector: 'someDir'
 * })
 * class SomeDir {
 *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;
 *
 *   afterContentInit() {
 *     // contentChildren is set
 *   }
 * }
 * ```
 */
exports.ContentChildren = decorators_1.makePropDecorator(di_2.ContentChildrenMetadata);
// TODO(alexeagle): remove the duplication of this doc. It is copied from ContentChildMetadata.
/**
 * Configures a content query.
 *
 * Content queries are set before the `afterContentInit` callback is called.
 *
 * ### Example
 *
 * ```
 * @Directive({
 *   selector: 'someDir'
 * })
 * class SomeDir {
 *   @ContentChild(ChildDirective) contentChild;
 *
 *   afterContentInit() {
 *     // contentChild is set
 *   }
 * }
 * ```
 */
exports.ContentChild = decorators_1.makePropDecorator(di_2.ContentChildMetadata);
// TODO(alexeagle): remove the duplication of this doc. It is copied from ViewChildrenMetadata.
/**
 * Configures a view query.
 *
 * View queries are set before the `afterViewInit` callback is called.
 *
 * ### Example
 *
 * ```
 * @Component({
 *   selector: 'someDir',
 *   templateUrl: 'someTemplate',
 *   directives: [ItemDirective]
 * })
 * class SomeDir {
 *   @ViewChildren(ItemDirective) viewChildren: QueryList<ItemDirective>;
 *
 *   afterViewInit() {
 *     // viewChildren is set
 *   }
 * }
 * ```
 */
exports.ViewChildren = decorators_1.makePropDecorator(di_2.ViewChildrenMetadata);
// TODO(alexeagle): remove the duplication of this doc. It is copied from ViewChildMetadata.
/**
 * Configures a view query.
 *
 * View queries are set before the `afterViewInit` callback is called.
 *
 * ### Example
 *
 * ```
 * @Component({
 *   selector: 'someDir',
 *   templateUrl: 'someTemplate',
 *   directives: [ItemDirective]
 * })
 * class SomeDir {
 *   @ViewChild(ItemDirective) viewChild:ItemDirective;
 *
 *   afterViewInit() {
 *     // viewChild is set
 *   }
 * }
 * ```
 */
exports.ViewChild = decorators_1.makePropDecorator(di_2.ViewChildMetadata);
// TODO(alexeagle): remove the duplication of this doc. It is copied from ViewQueryMetadata.
/**
 * Similar to {@link QueryMetadata}, but querying the component view, instead of
 * the content children.
 *
 * ### Example ([live demo](http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview))
 *
 * ```javascript
 * @Component({...})
 * @View({
 *   template: `
 *     <item> a </item>
 *     <item> b </item>
 *     <item> c </item>
 *   `
 * })
 * class MyComponent {
 *   shown: boolean;
 *
 *   constructor(private @Query(Item) items:QueryList<Item>) {
 *     items.onChange(() => console.log(items.length));
 *   }
 * }
 * ```
 *
 * Supports the same querying parameters as {@link QueryMetadata}, except
 * `descendants`. This always queries the whole view.
 *
 * As `shown` is flipped between true and false, items will contain zero of one
 * items.
 *
 * Specifies that a {@link QueryList} should be injected.
 *
 * The injected object is an iterable and observable live list.
 * See {@link QueryList} for more details.
 */
exports.ViewQuery = decorators_1.makeParamDecorator(di_2.ViewQueryMetadata);
// TODO(alexeagle): remove the duplication of this doc. It is copied from PipeMetadata.
/**
 * Declare reusable pipe function.
 *
 * ## Example
 *
 * ```
 * @Pipe({
 *   name: 'lowercase'
 * })
 * class Lowercase {
 *   transform(v, args) { return v.toLowerCase(); }
 * }
 * ```
 */
exports.Pipe = decorators_1.makeDecorator(directives_2.PipeMetadata);
// TODO(alexeagle): remove the duplication of this doc. It is copied from InputMetadata.
/**
 * Declares a data-bound input property.
 *
 * Angular automatically updates data-bound properties during change detection.
 *
 * `InputMetadata` takes an optional parameter that specifies the name
 * used when instantiating a component in the template. When not provided,
 * the name of the decorated property is used.
 *
 * ### Example
 *
 * The following example creates a component with two input properties.
 *
 * ```typescript
 * @Component({
 *   selector: 'bank-account',
 *   template: `
 *     Bank Name: {{bankName}}
 *     Account Id: {{id}}
 *   `
 * })
 * class BankAccount {
 *   @Input() bankName: string;
 *   @Input('account-id') id: string;
 *
 *   // this property is not bound, and won't be automatically updated by Angular
 *   normalizedBankName: string;
 * }
 *
 * @Component({
 *   selector: 'app',
 *   template: `
 *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
 *   `,
 *   directives: [BankAccount]
 * })
 * class App {}
 *
 * bootstrap(App);
 * ```
 */
exports.Input = decorators_1.makePropDecorator(directives_2.InputMetadata);
// TODO(alexeagle): remove the duplication of this doc. It is copied from OutputMetadata.
/**
 * Declares an event-bound output property.
 *
 * When an output property emits an event, an event handler attached to that event
 * the template is invoked.
 *
 * `OutputMetadata` takes an optional parameter that specifies the name
 * used when instantiating a component in the template. When not provided,
 * the name of the decorated property is used.
 *
 * ### Example
 *
 * ```typescript
 * @Directive({
 *   selector: 'interval-dir',
 * })
 * class IntervalDir {
 *   @Output() everySecond = new EventEmitter();
 *   @Output('everyFiveSeconds') five5Secs = new EventEmitter();
 *
 *   constructor() {
 *     setInterval(() => this.everySecond.next("event"), 1000);
 *     setInterval(() => this.five5Secs.next("event"), 5000);
 *   }
 * }
 *
 * @Component({
 *   selector: 'app',
 *   template: `
 *     <interval-dir (every-second)="everySecond()" (every-five-seconds)="everyFiveSeconds()">
 *     </interval-dir>
 *   `,
 *   directives: [IntervalDir]
 * })
 * class App {
 *   everySecond() { console.log('second'); }
 *   everyFiveSeconds() { console.log('five seconds'); }
 * }
 * bootstrap(App);
 * ```
 */
exports.Output = decorators_1.makePropDecorator(directives_2.OutputMetadata);
// TODO(alexeagle): remove the duplication of this doc. It is copied from HostBindingMetadata.
/**
 * Declares a host property binding.
 *
 * Angular automatically checks host property bindings during change detection.
 * If a binding changes, it will update the host element of the directive.
 *
 * `HostBindingMetadata` takes an optional parameter that specifies the property
 * name of the host element that will be updated. When not provided,
 * the class property name is used.
 *
 * ### Example
 *
 * The following example creates a directive that sets the `valid` and `invalid` classes
 * on the DOM element that has ng-model directive on it.
 *
 * ```typescript
 * @Directive({selector: '[ng-model]'})
 * class NgModelStatus {
 *   constructor(public control:NgModel) {}
 *   @HostBinding('[class.valid]') get valid { return this.control.valid; }
 *   @HostBinding('[class.invalid]') get invalid { return this.control.invalid; }
 * }
 *
 * @Component({
 *   selector: 'app',
 *   template: `<input [(ng-model)]="prop">`,
 *   directives: [FORM_DIRECTIVES, NgModelStatus]
 * })
 * class App {
 *   prop;
 * }
 *
 * bootstrap(App);
 * ```
 */
exports.HostBinding = decorators_1.makePropDecorator(directives_2.HostBindingMetadata);
// TODO(alexeagle): remove the duplication of this doc. It is copied from HostListenerMetadata.
/**
 * Declares a host listener.
 *
 * Angular will invoke the decorated method when the host element emits the specified event.
 *
 * If the decorated method returns `false`, then `preventDefault` is applied on the DOM
 * event.
 *
 * ### Example
 *
 * The following example declares a directive that attaches a click listener to the button and
 * counts clicks.
 *
 * ```typescript
 * @Directive({selector: 'button[counting]'})
 * class CountClicks {
 *   numberOfClicks = 0;
 *
 *   @HostListener('click', ['$event.target'])
 *   onClick(btn) {
 *     console.log("button", btn, "number of clicks:", this.numberOfClicks++);
 *   }
 * }
 *
 * @Component({
 *   selector: 'app',
 *   template: `<button counting>Increment</button>`,
 *   directives: [CountClicks]
 * })
 * class App {}
 *
 * bootstrap(App);
 * ```
 */
exports.HostListener = decorators_1.makePropDecorator(directives_2.HostListenerMetadata);

},{"./metadata/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/di.js","./metadata/directives":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/directives.js","./metadata/view":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/view.js","./util/decorators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/util/decorators.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/di.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var di_1 = require('angular2/src/core/di');
var metadata_1 = require('angular2/src/core/di/metadata');
/**
 * Specifies that a constant attribute value should be injected.
 *
 * The directive can inject constant string literals of host element attributes.
 *
 * ## Example
 *
 * Suppose we have an `<input>` element and want to know its `type`.
 *
 * ```html
 * <input type="text">
 * ```
 *
 * A decorator can inject string literal `text` like so:
 *
 * ```javascript
 * @Directive({
 *   selector: `input'
 * })
 * class InputDirective {
 *   constructor(@Attribute('type') type) {
 *     // type would be `text` in this example
 *   }
 * }
 * ```
 */
var AttributeMetadata = (function (_super) {
    __extends(AttributeMetadata, _super);
    function AttributeMetadata(attributeName) {
        _super.call(this);
        this.attributeName = attributeName;
    }
    Object.defineProperty(AttributeMetadata.prototype, "token", {
        get: function () {
            // Normally one would default a token to a type of an injected value but here
            // the type of a variable is "string" and we can't use primitive type as a return value
            // so we use instance of Attribute instead. This doesn't matter much in practice as arguments
            // with @Attribute annotation are injected by ElementInjector that doesn't take tokens into
            // account.
            return this;
        },
        enumerable: true,
        configurable: true
    });
    AttributeMetadata.prototype.toString = function () { return "@Attribute(" + lang_1.stringify(this.attributeName) + ")"; };
    AttributeMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [String])
    ], AttributeMetadata);
    return AttributeMetadata;
})(metadata_1.DependencyMetadata);
exports.AttributeMetadata = AttributeMetadata;
/**
 * Declares an injectable parameter to be a live list of directives or variable
 * bindings from the content children of a directive.
 *
 * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
 *
 * Assume that `<tabs>` component would like to get a list its children `<pane>`
 * components as shown in this example:
 *
 * ```html
 * <tabs>
 *   <pane title="Overview">...</pane>
 *   <pane *ng-for="#o of objects" [title]="o.title">{{o.text}}</pane>
 * </tabs>
 * ```
 *
 * The preferred solution is to query for `Pane` directives using this decorator.
 *
 * ```javascript
 * @Component({
 *   selector: 'pane',
 *   inputs: ['title']
 * })
 * class Pane {
 *   title:string;
 * }
 *
 * @Component({
 *  selector: 'tabs',
 *  template: `
 *    <ul>
 *      <li *ng-for="#pane of panes">{{pane.title}}</li>
 *    </ul>
 *    <content></content>
 *  `
 * })
 * class Tabs {
 *   panes: QueryList<Pane>;
 *   constructor(@Query(Pane) panes:QueryList<Pane>) {
  *    this.panes = panes;
  *  }
 * }
 * ```
 *
 * A query can look for variable bindings by passing in a string with desired binding symbol.
 *
 * ### Example ([live demo](http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview))
 * ```html
 * <seeker>
 *   <div #findme>...</div>
 * </seeker>
 *
 * @Component({ selector: 'foo' })
 * class seeker {
 *   constructor(@Query('findme') elList: QueryList<ElementRef>) {...}
 * }
 * ```
 *
 * In this case the object that is injected depend on the type of the variable
 * binding. It can be an ElementRef, a directive or a component.
 *
 * Passing in a comma separated list of variable bindings will query for all of them.
 *
 * ```html
 * <seeker>
 *   <div #find-me>...</div>
 *   <div #find-me-too>...</div>
 * </seeker>
 *
 *  @Component({
 *   selector: 'foo'
 * })
 * class Seeker {
 *   constructor(@Query('findMe, findMeToo') elList: QueryList<ElementRef>) {...}
 * }
 * ```
 *
 * Configure whether query looks for direct children or all descendants
 * of the querying element, by using the `descendants` parameter.
 * It is set to `false` by default.
 *
 * ### Example ([live demo](http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview))
 * ```html
 * <container #first>
 *   <item>a</item>
 *   <item>b</item>
 *   <container #second>
 *     <item>c</item>
 *   </container>
 * </container>
 * ```
 *
 * When querying for items, the first container will see only `a` and `b` by default,
 * but with `Query(TextDirective, {descendants: true})` it will see `c` too.
 *
 * The queried directives are kept in a depth-first pre-order with respect to their
 * positions in the DOM.
 *
 * Query does not look deep into any subcomponent views.
 *
 * Query is updated as part of the change-detection cycle. Since change detection
 * happens after construction of a directive, QueryList will always be empty when observed in the
 * constructor.
 *
 * The injected object is an unmodifiable live list.
 * See {@link QueryList} for more details.
 */
var QueryMetadata = (function (_super) {
    __extends(QueryMetadata, _super);
    function QueryMetadata(_selector, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d;
        _super.call(this);
        this._selector = _selector;
        this.descendants = descendants;
        this.first = first;
    }
    Object.defineProperty(QueryMetadata.prototype, "isViewQuery", {
        /**
         * always `false` to differentiate it with {@link ViewQueryMetadata}.
         */
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryMetadata.prototype, "selector", {
        /**
         * what this is querying for.
         */
        get: function () { return di_1.resolveForwardRef(this._selector); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryMetadata.prototype, "isVarBindingQuery", {
        /**
         * whether this is querying for a variable binding or a directive.
         */
        get: function () { return lang_1.isString(this.selector); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryMetadata.prototype, "varBindings", {
        /**
         * returns a list of variable bindings this is querying for.
         * Only applicable if this is a variable bindings query.
         */
        get: function () { return lang_1.StringWrapper.split(this.selector, new RegExp(",")); },
        enumerable: true,
        configurable: true
    });
    QueryMetadata.prototype.toString = function () { return "@Query(" + lang_1.stringify(this.selector) + ")"; };
    QueryMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Object, Object])
    ], QueryMetadata);
    return QueryMetadata;
})(metadata_1.DependencyMetadata);
exports.QueryMetadata = QueryMetadata;
// TODO: add an example after ContentChildren and ViewChildren are in master
/**
 * Configures a content query.
 *
 * Content queries are set before the `afterContentInit` callback is called.
 *
 * ### Example
 *
 * ```
 * @Directive({
 *   selector: 'someDir'
 * })
 * class SomeDir {
 *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;
 *
 *   afterContentInit() {
 *     // contentChildren is set
 *   }
 * }
 * ```
 */
var ContentChildrenMetadata = (function (_super) {
    __extends(ContentChildrenMetadata, _super);
    function ContentChildrenMetadata(_selector, _a) {
        var _b = (_a === void 0 ? {} : _a).descendants, descendants = _b === void 0 ? false : _b;
        _super.call(this, _selector, { descendants: descendants });
    }
    ContentChildrenMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Object, Object])
    ], ContentChildrenMetadata);
    return ContentChildrenMetadata;
})(QueryMetadata);
exports.ContentChildrenMetadata = ContentChildrenMetadata;
// TODO: add an example after ContentChild and ViewChild are in master
/**
 * Configures a content query.
 *
 * Content queries are set before the `afterContentInit` callback is called.
 *
 * ### Example
 *
 * ```
 * @Directive({
 *   selector: 'someDir'
 * })
 * class SomeDir {
 *   @ContentChild(ChildDirective) contentChild;
 *
 *   afterContentInit() {
 *     // contentChild is set
 *   }
 * }
 * ```
 */
var ContentChildMetadata = (function (_super) {
    __extends(ContentChildMetadata, _super);
    function ContentChildMetadata(_selector) {
        _super.call(this, _selector, { descendants: true, first: true });
    }
    ContentChildMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Object])
    ], ContentChildMetadata);
    return ContentChildMetadata;
})(QueryMetadata);
exports.ContentChildMetadata = ContentChildMetadata;
/**
 * Similar to {@link QueryMetadata}, but querying the component view, instead of
 * the content children.
 *
 * ### Example ([live demo](http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview))
 *
 * ```javascript
 * @Component({...})
 * @View({
 *   template: `
 *     <item> a </item>
 *     <item> b </item>
 *     <item> c </item>
 *   `
 * })
 * class MyComponent {
 *   shown: boolean;
 *
 *   constructor(private @Query(Item) items:QueryList<Item>) {
 *     items.onChange(() => console.log(items.length));
 *   }
 * }
 * ```
 *
 * Supports the same querying parameters as {@link QueryMetadata}, except
 * `descendants`. This always queries the whole view.
 *
 * As `shown` is flipped between true and false, items will contain zero of one
 * items.
 *
 * Specifies that a {@link QueryList} should be injected.
 *
 * The injected object is an iterable and observable live list.
 * See {@link QueryList} for more details.
 */
var ViewQueryMetadata = (function (_super) {
    __extends(ViewQueryMetadata, _super);
    function ViewQueryMetadata(_selector, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d;
        _super.call(this, _selector, { descendants: descendants, first: first });
    }
    Object.defineProperty(ViewQueryMetadata.prototype, "isViewQuery", {
        /**
         * always `true` to differentiate it with {@link QueryMetadata}.
         */
        get: function () { return true; },
        enumerable: true,
        configurable: true
    });
    ViewQueryMetadata.prototype.toString = function () { return "@ViewQuery(" + lang_1.stringify(this.selector) + ")"; };
    ViewQueryMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Object, Object])
    ], ViewQueryMetadata);
    return ViewQueryMetadata;
})(QueryMetadata);
exports.ViewQueryMetadata = ViewQueryMetadata;
/**
 * Configures a view query.
 *
 * View queries are set before the `afterViewInit` callback is called.
 *
 * ### Example
 *
 * ```
 * @Component({
 *   selector: 'someDir',
 *   templateUrl: 'someTemplate',
 *   directives: [ItemDirective]
 * })
 * class SomeDir {
 *   @ViewChildren(ItemDirective) viewChildren: QueryList<ItemDirective>;
 *
 *   afterViewInit() {
 *     // viewChildren is set
 *   }
 * }
 * ```
 */
var ViewChildrenMetadata = (function (_super) {
    __extends(ViewChildrenMetadata, _super);
    function ViewChildrenMetadata(_selector) {
        _super.call(this, _selector, { descendants: true });
    }
    ViewChildrenMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Object])
    ], ViewChildrenMetadata);
    return ViewChildrenMetadata;
})(ViewQueryMetadata);
exports.ViewChildrenMetadata = ViewChildrenMetadata;
/**
 * Configures a view query.
 *
 * View queries are set before the `afterViewInit` callback is called.
 *
 * ### Example
 *
 * ```
 * @Component({
 *   selector: 'someDir',
 *   templateUrl: 'someTemplate',
 *   directives: [ItemDirective]
 * })
 * class SomeDir {
 *   @ViewChild(ItemDirective) viewChild:ItemDirective;
 *
 *   afterViewInit() {
 *     // viewChild is set
 *   }
 * }
 * ```
 */
var ViewChildMetadata = (function (_super) {
    __extends(ViewChildMetadata, _super);
    function ViewChildMetadata(_selector) {
        _super.call(this, _selector, { descendants: true, first: true });
    }
    ViewChildMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Object])
    ], ViewChildMetadata);
    return ViewChildMetadata;
})(ViewQueryMetadata);
exports.ViewChildMetadata = ViewChildMetadata;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/di/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/metadata.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/directives.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var metadata_1 = require('angular2/src/core/di/metadata');
var change_detection_1 = require('angular2/src/core/change_detection');
/**
 * Directives allow you to attach behavior to elements in the DOM.
 *
 * {@link DirectiveMetadata}s with an embedded view are called {@link ComponentMetadata}s.
 *
 * A directive consists of a single directive annotation and a controller class. When the
 * directive's `selector` matches
 * elements in the DOM, the following steps occur:
 *
 * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor
 * arguments.
 * 2. Angular instantiates directives for each matched element using `ElementInjector` in a
 * depth-first order,
 *    as declared in the HTML.
 *
 * ## Understanding How Injection Works
 *
 * There are three stages of injection resolution.
 * - *Pre-existing Injectors*:
 *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if
 * the dependency was
 *     specified as `@Optional`, returns `null`.
 *   - The platform injector resolves browser singleton resources, such as: cookies, title,
 * location, and others.
 * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow
 * the same parent-child hierarchy
 *     as the component instances in the DOM.
 * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each
 * element has an `ElementInjector`
 *     which follow the same parent-child hierarchy as the DOM elements themselves.
 *
 * When a template is instantiated, it also must instantiate the corresponding directives in a
 * depth-first order. The
 * current `ElementInjector` resolves the constructor dependencies for each directive.
 *
 * Angular then resolves dependencies as follows, according to the order in which they appear in the
 * {@link ViewMetadata}:
 *
 * 1. Dependencies on the current element
 * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary
 * 3. Dependencies on component injectors and their parents until it encounters the root component
 * 4. Dependencies on pre-existing injectors
 *
 *
 * The `ElementInjector` can inject other directives, element-specific special objects, or it can
 * delegate to the parent
 * injector.
 *
 * To inject other directives, declare the constructor parameter as:
 * - `directive:DirectiveType`: a directive on the current element only
 * - `@Host() directive:DirectiveType`: any directive that matches the type between the current
 * element and the
 *    Shadow DOM root.
 * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child
 * directives.
 * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any
 * child directives.
 *
 * To inject element-specific special objects, declare the constructor parameter as:
 * - `element: ElementRef` to obtain a reference to logical element in the view.
 * - `viewContainer: ViewContainerRef` to control child template instantiation, for
 * {@link DirectiveMetadata} directives only
 * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.
 *
 * ## Example
 *
 * The following example demonstrates how dependency injection resolves constructor arguments in
 * practice.
 *
 *
 * Assume this HTML template:
 *
 * ```
 * <div dependency="1">
 *   <div dependency="2">
 *     <div dependency="3" my-directive>
 *       <div dependency="4">
 *         <div dependency="5"></div>
 *       </div>
 *       <div dependency="6"></div>
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * With the following `dependency` decorator and `SomeService` injectable class.
 *
 * ```
 * @Injectable()
 * class SomeService {
 * }
 *
 * @Directive({
 *   selector: '[dependency]',
 *   inputs: [
 *     'id: dependency'
 *   ]
 * })
 * class Dependency {
 *   id:string;
 * }
 * ```
 *
 * Let's step through the different ways in which `MyDirective` could be declared...
 *
 *
 * ### No injection
 *
 * Here the constructor is declared with no arguments, therefore nothing is injected into
 * `MyDirective`.
 *
 * ```
 * @Directive({ selector: '[my-directive]' })
 * class MyDirective {
 *   constructor() {
 *   }
 * }
 * ```
 *
 * This directive would be instantiated with no dependencies.
 *
 *
 * ### Component-level injection
 *
 * Directives can inject any injectable instance from the closest component injector or any of its
 * parents.
 *
 * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type
 * from the parent
 * component's injector.
 * ```
 * @Directive({ selector: '[my-directive]' })
 * class MyDirective {
 *   constructor(someService: SomeService) {
 *   }
 * }
 * ```
 *
 * This directive would be instantiated with a dependency on `SomeService`.
 *
 *
 * ### Injecting a directive from the current element
 *
 * Directives can inject other directives declared on the current element.
 *
 * ```
 * @Directive({ selector: '[my-directive]' })
 * class MyDirective {
 *   constructor(dependency: Dependency) {
 *     expect(dependency.id).toEqual(3);
 *   }
 * }
 * ```
 * This directive would be instantiated with `Dependency` declared at the same element, in this case
 * `dependency="3"`.
 *
 * ### Injecting a directive from any ancestor elements
 *
 * Directives can inject other directives declared on any ancestor element (in the current Shadow
 * DOM), i.e. on the current element, the
 * parent element, or its parents.
 * ```
 * @Directive({ selector: '[my-directive]' })
 * class MyDirective {
 *   constructor(@Host() dependency: Dependency) {
 *     expect(dependency.id).toEqual(2);
 *   }
 * }
 * ```
 *
 * `@Host` checks the current element, the parent, as well as its parents recursively. If
 * `dependency="2"` didn't
 * exist on the direct parent, this injection would
 * have returned
 * `dependency="1"`.
 *
 *
 * ### Injecting a live collection of direct child directives
 *
 *
 * A directive can also query for other child directives. Since parent directives are instantiated
 * before child directives, a directive can't simply inject the list of child directives. Instead,
 * the directive injects a {@link QueryList}, which updates its contents as children are added,
 * removed, or moved by a directive that uses a {@link ViewContainerRef} such as a `ng-for`, an
 * `ng-if`, or an `ng-switch`.
 *
 * ```
 * @Directive({ selector: '[my-directive]' })
 * class MyDirective {
 *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {
 *   }
 * }
 * ```
 *
 * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and
 * 6. Here, `Dependency` 5 would not be included, because it is not a direct child.
 *
 * ### Injecting a live collection of descendant directives
 *
 * By passing the descendant flag to `@Query` above, we can include the children of the child
 * elements.
 *
 * ```
 * @Directive({ selector: '[my-directive]' })
 * class MyDirective {
 *   constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList<Dependency>) {
 *   }
 * }
 * ```
 *
 * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.
 *
 * ### Optional injection
 *
 * The normal behavior of directives is to return an error when a specified dependency cannot be
 * resolved. If you
 * would like to inject `null` on unresolved dependency instead, you can annotate that dependency
 * with `@Optional()`.
 * This explicitly permits the author of a template to treat some of the surrounding directives as
 * optional.
 *
 * ```
 * @Directive({ selector: '[my-directive]' })
 * class MyDirective {
 *   constructor(@Optional() dependency:Dependency) {
 *   }
 * }
 * ```
 *
 * This directive would be instantiated with a `Dependency` directive found on the current element.
 * If none can be
 * found, the injector supplies `null` instead of throwing an error.
 *
 * ## Example
 *
 * Here we use a decorator directive to simply define basic tool-tip behavior.
 *
 * ```
 * @Directive({
 *   selector: '[tooltip]',
 *   inputs: [
 *     'text: tooltip'
 *   ],
 *   host: {
 *     '(mouseenter)': 'onMouseEnter()',
 *     '(mouseleave)': 'onMouseLeave()'
 *   }
 * })
 * class Tooltip{
 *   text:string;
 *   overlay:Overlay; // NOT YET IMPLEMENTED
 *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED
 *
 *   constructor(overlayManager:OverlayManager) {
 *     this.overlay = overlay;
 *   }
 *
 *   onMouseEnter() {
 *     // exact signature to be determined
 *     this.overlay = this.overlayManager.open(text, ...);
 *   }
 *
 *   onMouseLeave() {
 *     this.overlay.close();
 *     this.overlay = null;
 *   }
 * }
 * ```
 * In our HTML template, we can then add this behavior to a `<div>` or any other element with the
 * `tooltip` selector,
 * like so:
 *
 * ```
 * <div tooltip="some text here"></div>
 * ```
 *
 * Directives can also control the instantiation, destruction, and positioning of inline template
 * elements:
 *
 * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at
 * runtime.
 * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a
 * location in the current view
 * where these actions are performed.
 *
 * Views are always created as children of the current {@link ViewMetadata}, and as siblings of the
 * `<template>` element. Thus a
 * directive in a child view cannot inject the directive that created it.
 *
 * Since directives that create views via ViewContainers are common in Angular, and using the full
 * `<template>` element syntax is wordy, Angular
 * also supports a shorthand notation: `<li *foo="bar">` and `<li template="foo: bar">` are
 * equivalent.
 *
 * Thus,
 *
 * ```
 * <ul>
 *   <li *foo="bar" title="text"></li>
 * </ul>
 * ```
 *
 * Expands in use to:
 *
 * ```
 * <ul>
 *   <template [foo]="bar">
 *     <li title="text"></li>
 *   </template>
 * </ul>
 * ```
 *
 * Notice that although the shorthand places `*foo="bar"` within the `<li>` element, the binding for
 * the directive
 * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.
 *
 * ## Lifecycle hooks
 *
 * When the directive class implements some {@link angular2/lifecycle_hooks} the callbacks are
 * called by the change detection at defined points in time during the life of the directive.
 *
 * ## Example
 *
 * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.
 *
 * Here is a simple directive that triggers on an `unless` selector:
 *
 * ```
 * @Directive({
 *   selector: '[unless]',
 *   inputs: ['unless']
 * })
 * export class Unless {
 *   viewContainer: ViewContainerRef;
 *   templateRef: TemplateRef;
 *   prevCondition: boolean;
 *
 *   constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {
 *     this.viewContainer = viewContainer;
 *     this.templateRef = templateRef;
 *     this.prevCondition = null;
 *   }
 *
 *   set unless(newCondition) {
 *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {
 *       this.prevCondition = true;
 *       this.viewContainer.clear();
 *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {
 *       this.prevCondition = false;
 *       this.viewContainer.create(this.templateRef);
 *     }
 *   }
 * }
 * ```
 *
 * We can then use this `unless` selector in a template:
 * ```
 * <ul>
 *   <li *unless="expr"></li>
 * </ul>
 * ```
 *
 * Once the directive instantiates the child view, the shorthand notation for the template expands
 * and the result is:
 *
 * ```
 * <ul>
 *   <template [unless]="exp">
 *     <li></li>
 *   </template>
 *   <li></li>
 * </ul>
 * ```
 *
 * Note also that although the `<li></li>` template still exists inside the `<template></template>`,
 * the instantiated
 * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.
 */
var DirectiveMetadata = (function (_super) {
    __extends(DirectiveMetadata, _super);
    function DirectiveMetadata(_a) {
        var _b = _a === void 0 ? {} : _a, selector = _b.selector, inputs = _b.inputs, outputs = _b.outputs, properties = _b.properties, events = _b.events, host = _b.host, bindings = _b.bindings, providers = _b.providers, exportAs = _b.exportAs, moduleId = _b.moduleId, queries = _b.queries;
        _super.call(this);
        this.selector = selector;
        this._inputs = inputs;
        this._properties = properties;
        this._outputs = outputs;
        this._events = events;
        this.host = host;
        this.exportAs = exportAs;
        this.moduleId = moduleId;
        this.queries = queries;
        this._providers = providers;
        this._bindings = bindings;
    }
    Object.defineProperty(DirectiveMetadata.prototype, "inputs", {
        /**
         * Enumerates the set of data-bound input properties for a directive
         *
         * Angular automatically updates input properties during change detection.
         *
         * The `inputs` property defines a set of `directiveProperty` to `bindingProperty`
         * configuration:
         *
         * - `directiveProperty` specifies the component property where the value is written.
         * - `bindingProperty` specifies the DOM property where the value is read from.
         *
         * When `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.
         *
         * ### Example ([live demo](http://plnkr.co/edit/ivhfXY?p=preview))
         *
         * The following example creates a component with two data-bound properties.
         *
         * ```typescript
         * @Component({
         *   selector: 'bank-account',
         *   inputs: ['bankName', 'id: account-id'],
         *   template: `
         *     Bank Name: {{bankName}}
         *     Account Id: {{id}}
         *   `
         * })
         * class BankAccount {
         *   bankName: string;
         *   id: string;
         *
         *   // this property is not bound, and won't be automatically updated by Angular
         *   normalizedBankName: string;
         * }
         *
         * @Component({
         *   selector: 'app',
         *   template: `
         *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
         *   `,
         *   directives: [BankAccount]
         * })
         * class App {}
         *
         * bootstrap(App);
         * ```
         *
         */
        get: function () {
            return lang_1.isPresent(this._properties) && this._properties.length > 0 ? this._properties :
                this._inputs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DirectiveMetadata.prototype, "properties", {
        get: function () { return this.inputs; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DirectiveMetadata.prototype, "outputs", {
        /**
         * Enumerates the set of event-bound output properties.
         *
         * When an output property emits an event, an event handler attached to that event
         * the template is invoked.
         *
         * The `outputs` property defines a set of `directiveProperty` to `bindingProperty`
         * configuration:
         *
         * - `directiveProperty` specifies the component property that emits events.
         * - `bindingProperty` specifies the DOM property the event handler is attached to.
         *
         * ### Example ([live demo](http://plnkr.co/edit/d5CNq7?p=preview))
         *
         * ```typescript
         * @Directive({
         *   selector: 'interval-dir',
         *   outputs: ['everySecond', 'five5Secs: everyFiveSeconds']
         * })
         * class IntervalDir {
         *   everySecond = new EventEmitter();
         *   five5Secs = new EventEmitter();
         *
         *   constructor() {
         *     setInterval(() => this.everySecond.next("event"), 1000);
         *     setInterval(() => this.five5Secs.next("event"), 5000);
         *   }
         * }
         *
         * @Component({
         *   selector: 'app',
         *   template: `
         *     <interval-dir (every-second)="everySecond()" (every-five-seconds)="everyFiveSeconds()">
         *     </interval-dir>
         *   `,
         *   directives: [IntervalDir]
         * })
         * class App {
         *   everySecond() { console.log('second'); }
         *   everyFiveSeconds() { console.log('five seconds'); }
         * }
         * bootstrap(App);
         * ```
         *
         */
        get: function () {
            return lang_1.isPresent(this._events) && this._events.length > 0 ? this._events : this._outputs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DirectiveMetadata.prototype, "events", {
        get: function () { return this.outputs; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DirectiveMetadata.prototype, "providers", {
        /**
         * Defines the set of injectable objects that are visible to a Directive and its light DOM
         * children.
         *
         * ## Simple Example
         *
         * Here is an example of a class that can be injected:
         *
         * ```
         * class Greeter {
         *    greet(name:string) {
         *      return 'Hello ' + name + '!';
         *    }
         * }
         *
         * @Directive({
         *   selector: 'greet',
         *   bindings: [
         *     Greeter
         *   ]
         * })
         * class HelloWorld {
         *   greeter:Greeter;
         *
         *   constructor(greeter:Greeter) {
         *     this.greeter = greeter;
         *   }
         * }
         * ```
         */
        get: function () {
            return lang_1.isPresent(this._bindings) && this._bindings.length > 0 ? this._bindings :
                this._providers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DirectiveMetadata.prototype, "bindings", {
        /** @deprecated */
        get: function () { return this.providers; },
        enumerable: true,
        configurable: true
    });
    DirectiveMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Object])
    ], DirectiveMetadata);
    return DirectiveMetadata;
})(metadata_1.InjectableMetadata);
exports.DirectiveMetadata = DirectiveMetadata;
/**
 * Declare reusable UI building blocks for an application.
 *
 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
 * `@Component`
 * annotation specifies when a component is instantiated, and which properties and hostListeners it
 * binds to.
 *
 * When a component is instantiated, Angular
 * - creates a shadow DOM for the component.
 * - loads the selected template into the shadow DOM.
 * - creates all the injectable objects configured with `providers` and `viewProviders`.
 *
 * All template expressions and statements are then evaluated against the component instance.
 *
 * For details on the `@View` annotation, see {@link ViewMetadata}.
 *
 * ## Lifecycle hooks
 *
 * When the component class implements some {@link angular2/lifecycle_hooks} the callbacks are
 * called by the change detection at defined points in time during the life of the component.
 *
 * ## Example
 *
 * ```
 * @Component({
 *   selector: 'greet',
 *   template: 'Hello {{name}}!'
 * })
 * class Greet {
 *   name: string;
 *
 *   constructor() {
 *     this.name = 'World';
 *   }
 * }
 * ```
 *
 */
var ComponentMetadata = (function (_super) {
    __extends(ComponentMetadata, _super);
    function ComponentMetadata(_a) {
        var _b = _a === void 0 ? {} : _a, selector = _b.selector, inputs = _b.inputs, outputs = _b.outputs, properties = _b.properties, events = _b.events, host = _b.host, exportAs = _b.exportAs, moduleId = _b.moduleId, bindings = _b.bindings, providers = _b.providers, viewBindings = _b.viewBindings, viewProviders = _b.viewProviders, _c = _b.changeDetection, changeDetection = _c === void 0 ? change_detection_1.ChangeDetectionStrategy.Default : _c, queries = _b.queries, templateUrl = _b.templateUrl, template = _b.template, styleUrls = _b.styleUrls, styles = _b.styles, directives = _b.directives, pipes = _b.pipes, encapsulation = _b.encapsulation;
        _super.call(this, {
            selector: selector,
            inputs: inputs,
            outputs: outputs,
            properties: properties,
            events: events,
            host: host,
            exportAs: exportAs,
            moduleId: moduleId,
            bindings: bindings,
            providers: providers,
            queries: queries
        });
        this.changeDetection = changeDetection;
        this._viewProviders = viewProviders;
        this._viewBindings = viewBindings;
        this.templateUrl = templateUrl;
        this.template = template;
        this.styleUrls = styleUrls;
        this.styles = styles;
        this.directives = directives;
        this.pipes = pipes;
        this.encapsulation = encapsulation;
    }
    Object.defineProperty(ComponentMetadata.prototype, "viewProviders", {
        /**
         * Defines the set of injectable objects that are visible to its view DOM children.
         *
         * ## Simple Example
         *
         * Here is an example of a class that can be injected:
         *
         * ```
         * class Greeter {
         *    greet(name:string) {
         *      return 'Hello ' + name + '!';
         *    }
         * }
         *
         * @Directive({
         *   selector: 'needs-greeter'
         * })
         * class NeedsGreeter {
         *   greeter:Greeter;
         *
         *   constructor(greeter:Greeter) {
         *     this.greeter = greeter;
         *   }
         * }
         *
         * @Component({
         *   selector: 'greet',
         *   viewProviders: [
         *     Greeter
         *   ],
         *   template: `<needs-greeter></needs-greeter>`,
         *   directives: [NeedsGreeter]
         * })
         * class HelloWorld {
         * }
         *
         * ```
         */
        get: function () {
            return lang_1.isPresent(this._viewBindings) && this._viewBindings.length > 0 ? this._viewBindings :
                this._viewProviders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentMetadata.prototype, "viewBindings", {
        get: function () { return this.viewProviders; },
        enumerable: true,
        configurable: true
    });
    ComponentMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Object])
    ], ComponentMetadata);
    return ComponentMetadata;
})(DirectiveMetadata);
exports.ComponentMetadata = ComponentMetadata;
/**
 * Declare reusable pipe function.
 *
 * ## Example
 *
 * ```
 * @Pipe({
 *   name: 'lowercase'
 * })
 * class Lowercase {
 *   transform(v, args) { return v.toLowerCase(); }
 * }
 * ```
 */
var PipeMetadata = (function (_super) {
    __extends(PipeMetadata, _super);
    function PipeMetadata(_a) {
        var name = _a.name, pure = _a.pure;
        _super.call(this);
        this.name = name;
        this._pure = pure;
    }
    Object.defineProperty(PipeMetadata.prototype, "pure", {
        get: function () { return lang_1.isPresent(this._pure) ? this._pure : true; },
        enumerable: true,
        configurable: true
    });
    PipeMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Object])
    ], PipeMetadata);
    return PipeMetadata;
})(metadata_1.InjectableMetadata);
exports.PipeMetadata = PipeMetadata;
/**
 * Declares a data-bound input property.
 *
 * Angular automatically updates data-bound properties during change detection.
 *
 * `InputMetadata` takes an optional parameter that specifies the name
 * used when instantiating a component in the template. When not provided,
 * the name of the decorated property is used.
 *
 * ### Example
 *
 * The following example creates a component with two input properties.
 *
 * ```typescript
 * @Component({
 *   selector: 'bank-account',
 *   template: `
 *     Bank Name: {{bankName}}
 *     Account Id: {{id}}
 *   `
 * })
 * class BankAccount {
 *   @Input() bankName: string;
 *   @Input('account-id') id: string;
 *
 *   // this property is not bound, and won't be automatically updated by Angular
 *   normalizedBankName: string;
 * }
 *
 * @Component({
 *   selector: 'app',
 *   template: `
 *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
 *   `,
 *   directives: [BankAccount]
 * })
 * class App {}
 *
 * bootstrap(App);
 * ```
 */
var InputMetadata = (function () {
    function InputMetadata(
        /**
         * Name used when instantiating a component in the temlate.
         */
        bindingPropertyName) {
        this.bindingPropertyName = bindingPropertyName;
    }
    InputMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [String])
    ], InputMetadata);
    return InputMetadata;
})();
exports.InputMetadata = InputMetadata;
/**
 * Declares an event-bound output property.
 *
 * When an output property emits an event, an event handler attached to that event
 * the template is invoked.
 *
 * `OutputMetadata` takes an optional parameter that specifies the name
 * used when instantiating a component in the template. When not provided,
 * the name of the decorated property is used.
 *
 * ### Example
 *
 * ```typescript
 * @Directive({
 *   selector: 'interval-dir',
 * })
 * class IntervalDir {
 *   @Output() everySecond = new EventEmitter();
 *   @Output('everyFiveSeconds') five5Secs = new EventEmitter();
 *
 *   constructor() {
 *     setInterval(() => this.everySecond.next("event"), 1000);
 *     setInterval(() => this.five5Secs.next("event"), 5000);
 *   }
 * }
 *
 * @Component({
 *   selector: 'app',
 *   template: `
 *     <interval-dir (every-second)="everySecond()" (every-five-seconds)="everyFiveSeconds()">
 *     </interval-dir>
 *   `,
 *   directives: [IntervalDir]
 * })
 * class App {
 *   everySecond() { console.log('second'); }
 *   everyFiveSeconds() { console.log('five seconds'); }
 * }
 * bootstrap(App);
 * ```
 */
var OutputMetadata = (function () {
    function OutputMetadata(bindingPropertyName) {
        this.bindingPropertyName = bindingPropertyName;
    }
    OutputMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [String])
    ], OutputMetadata);
    return OutputMetadata;
})();
exports.OutputMetadata = OutputMetadata;
/**
 * Declares a host property binding.
 *
 * Angular automatically checks host property bindings during change detection.
 * If a binding changes, it will update the host element of the directive.
 *
 * `HostBindingMetadata` takes an optional parameter that specifies the property
 * name of the host element that will be updated. When not provided,
 * the class property name is used.
 *
 * ### Example
 *
 * The following example creates a directive that sets the `valid` and `invalid` classes
 * on the DOM element that has ng-model directive on it.
 *
 * ```typescript
 * @Directive({selector: '[ng-model]'})
 * class NgModelStatus {
 *   constructor(public control:NgModel) {}
 *   @HostBinding('[class.valid]') get valid { return this.control.valid; }
 *   @HostBinding('[class.invalid]') get invalid { return this.control.invalid; }
 * }
 *
 * @Component({
 *   selector: 'app',
 *   template: `<input [(ng-model)]="prop">`,
 *   directives: [FORM_DIRECTIVES, NgModelStatus]
 * })
 * class App {
 *   prop;
 * }
 *
 * bootstrap(App);
 * ```
 */
var HostBindingMetadata = (function () {
    function HostBindingMetadata(hostPropertyName) {
        this.hostPropertyName = hostPropertyName;
    }
    HostBindingMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [String])
    ], HostBindingMetadata);
    return HostBindingMetadata;
})();
exports.HostBindingMetadata = HostBindingMetadata;
/**
 * Declares a host listener.
 *
 * Angular will invoke the decorated method when the host element emits the specified event.
 *
 * If the decorated method returns `false`, then `preventDefault` is applied on the DOM
 * event.
 *
 * ### Example
 *
 * The following example declares a directive that attaches a click listener to the button and
 * counts clicks.
 *
 * ```typescript
 * @Directive({selector: 'button[counting]'})
 * class CountClicks {
 *   numberOfClicks = 0;
 *
 *   @HostListener('click', ['$event.target'])
 *   onClick(btn) {
 *     console.log("button", btn, "number of clicks:", this.numberOfClicks++);
 *   }
 * }
 *
 * @Component({
 *   selector: 'app',
 *   template: `<button counting>Increment</button>`,
 *   directives: [CountClicks]
 * })
 * class App {}
 *
 * bootstrap(App);
 * ```
 */
var HostListenerMetadata = (function () {
    function HostListenerMetadata(eventName, args) {
        this.eventName = eventName;
        this.args = args;
    }
    HostListenerMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [String, Array])
    ], HostListenerMetadata);
    return HostListenerMetadata;
})();
exports.HostListenerMetadata = HostListenerMetadata;

},{"angular2/src/core/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection.js","angular2/src/core/di/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/metadata.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata/view.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
/**
 * Defines template and style encapsulation options available for Component's {@link View}.
 *
 * See {@link ViewMetadata#encapsulation}.
 */
(function (ViewEncapsulation) {
    /**
     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
     * Element and pre-processing the style rules provided via
     * {@link ViewMetadata#styles} or {@link ViewMetadata#stylesUrls}, and adding the new Host Element
     * attribute to all selectors.
     *
     * This is the default option.
     */
    ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
    /**
     * Use the native encapsulation mechanism of the renderer.
     *
     * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
     * creating a ShadowRoot for Component's Host Element.
     */
    ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
    /**
     * Don't provide any template or style encapsulation.
     */
    ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
})(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
var ViewEncapsulation = exports.ViewEncapsulation;
exports.VIEW_ENCAPSULATION_VALUES = [ViewEncapsulation.Emulated, ViewEncapsulation.Native, ViewEncapsulation.None];
/**
 * Metadata properties available for configuring Views.
 *
 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
 * `@View` annotation specifies the HTML template to use, and lists the directives that are active
 * within the template.
 *
 * When a component is instantiated, the template is loaded into the component's shadow root, and
 * the expressions and statements in the template are evaluated against the component.
 *
 * For details on the `@Component` annotation, see {@link ComponentMetadata}.
 *
 * ## Example
 *
 * ```
 * @Component({
 *   selector: 'greet',
 *   template: 'Hello {{name}}!',
 *   directives: [GreetUser, Bold]
 * })
 * class Greet {
 *   name: string;
 *
 *   constructor() {
 *     this.name = 'World';
 *   }
 * }
 * ```
 */
var ViewMetadata = (function () {
    function ViewMetadata(_a) {
        var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, directives = _b.directives, pipes = _b.pipes, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls;
        this.templateUrl = templateUrl;
        this.template = template;
        this.styleUrls = styleUrls;
        this.styles = styles;
        this.directives = directives;
        this.pipes = pipes;
        this.encapsulation = encapsulation;
    }
    ViewMetadata = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [Object])
    ], ViewMetadata);
    return ViewMetadata;
})();
exports.ViewMetadata = ViewMetadata;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes.js":[function(require,module,exports){
'use strict';/**
 * @module
 * @description
 * This module provides a set of common Pipes.
 */
var async_pipe_1 = require('./pipes/async_pipe');
exports.AsyncPipe = async_pipe_1.AsyncPipe;
var date_pipe_1 = require('./pipes/date_pipe');
exports.DatePipe = date_pipe_1.DatePipe;
var default_pipes_1 = require('./pipes/default_pipes');
exports.DEFAULT_PIPES = default_pipes_1.DEFAULT_PIPES;
exports.DEFAULT_PIPES_TOKEN = default_pipes_1.DEFAULT_PIPES_TOKEN;
var json_pipe_1 = require('./pipes/json_pipe');
exports.JsonPipe = json_pipe_1.JsonPipe;
var slice_pipe_1 = require('./pipes/slice_pipe');
exports.SlicePipe = slice_pipe_1.SlicePipe;
var lowercase_pipe_1 = require('./pipes/lowercase_pipe');
exports.LowerCasePipe = lowercase_pipe_1.LowerCasePipe;
var number_pipe_1 = require('./pipes/number_pipe');
exports.NumberPipe = number_pipe_1.NumberPipe;
exports.DecimalPipe = number_pipe_1.DecimalPipe;
exports.PercentPipe = number_pipe_1.PercentPipe;
exports.CurrencyPipe = number_pipe_1.CurrencyPipe;
var uppercase_pipe_1 = require('./pipes/uppercase_pipe');
exports.UpperCasePipe = uppercase_pipe_1.UpperCasePipe;

},{"./pipes/async_pipe":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/async_pipe.js","./pipes/date_pipe":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/date_pipe.js","./pipes/default_pipes":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/default_pipes.js","./pipes/json_pipe":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/json_pipe.js","./pipes/lowercase_pipe":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/lowercase_pipe.js","./pipes/number_pipe":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/number_pipe.js","./pipes/slice_pipe":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/slice_pipe.js","./pipes/uppercase_pipe":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/uppercase_pipe.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/async_pipe.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var async_1 = require('angular2/src/core/facade/async');
var metadata_1 = require('angular2/src/core/metadata');
var di_1 = require('angular2/src/core/di');
var change_detection_1 = require('angular2/src/core/change_detection');
var invalid_pipe_argument_exception_1 = require('./invalid_pipe_argument_exception');
var ObservableStrategy = (function () {
    function ObservableStrategy() {
    }
    ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
        return async_1.ObservableWrapper.subscribe(async, updateLatestValue, function (e) { throw e; });
    };
    ObservableStrategy.prototype.dispose = function (subscription) { async_1.ObservableWrapper.dispose(subscription); };
    ObservableStrategy.prototype.onDestroy = function (subscription) { async_1.ObservableWrapper.dispose(subscription); };
    return ObservableStrategy;
})();
var PromiseStrategy = (function () {
    function PromiseStrategy() {
    }
    PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
        return async.then(updateLatestValue);
    };
    PromiseStrategy.prototype.dispose = function (subscription) { };
    PromiseStrategy.prototype.onDestroy = function (subscription) { };
    return PromiseStrategy;
})();
var _promiseStrategy = new PromiseStrategy();
var _observableStrategy = new ObservableStrategy();
/**
 * The `async` pipe subscribes to an Observable or Promise and returns the latest value it has
 * emitted.
 * When a new value is emitted, the `async` pipe marks the component to be checked for changes.
 *
 * # Example
 * The example below binds the `time` Observable to the view. Every 500ms, the `time` Observable
 * updates the view with the current time.
 *
 * ```
 * import {Observable} from 'angular2/core';
 * @Component({
 *   selector: "task-cmp",
 *   template: "Time: {{ time | async }}"
 * })
 * class Task {
 *   time = new Observable<number>(observer => {
 *     setInterval(_ =>
 *       observer.next(new Date().getTime()), 500);
 *   });
 * }
 * ```
 */
var AsyncPipe = (function () {
    function AsyncPipe(_ref) {
        /** @internal */
        this._latestValue = null;
        /** @internal */
        this._latestReturnedValue = null;
        /** @internal */
        this._subscription = null;
        /** @internal */
        this._obj = null;
        this._strategy = null;
        this._ref = _ref;
    }
    AsyncPipe.prototype.onDestroy = function () {
        if (lang_1.isPresent(this._subscription)) {
            this._dispose();
        }
    };
    AsyncPipe.prototype.transform = function (obj, args) {
        if (lang_1.isBlank(this._obj)) {
            if (lang_1.isPresent(obj)) {
                this._subscribe(obj);
            }
            return null;
        }
        if (obj !== this._obj) {
            this._dispose();
            return this.transform(obj);
        }
        if (this._latestValue === this._latestReturnedValue) {
            return this._latestReturnedValue;
        }
        else {
            this._latestReturnedValue = this._latestValue;
            return change_detection_1.WrappedValue.wrap(this._latestValue);
        }
    };
    /** @internal */
    AsyncPipe.prototype._subscribe = function (obj) {
        var _this = this;
        this._obj = obj;
        this._strategy = this._selectStrategy(obj);
        this._subscription =
            this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
    };
    /** @internal */
    AsyncPipe.prototype._selectStrategy = function (obj) {
        if (lang_1.isPromise(obj)) {
            return _promiseStrategy;
        }
        else if (async_1.ObservableWrapper.isObservable(obj)) {
            return _observableStrategy;
        }
        else {
            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(AsyncPipe, obj);
        }
    };
    /** @internal */
    AsyncPipe.prototype._dispose = function () {
        this._strategy.dispose(this._subscription);
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._subscription = null;
        this._obj = null;
    };
    /** @internal */
    AsyncPipe.prototype._updateLatestValue = function (async, value) {
        if (async === this._obj) {
            this._latestValue = value;
            this._ref.markForCheck();
        }
    };
    AsyncPipe = __decorate([
        metadata_1.Pipe({ name: 'async', pure: false }),
        di_1.Injectable(), 
        __metadata('design:paramtypes', [change_detection_1.ChangeDetectorRef])
    ], AsyncPipe);
    return AsyncPipe;
})();
exports.AsyncPipe = AsyncPipe;

},{"./invalid_pipe_argument_exception":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/invalid_pipe_argument_exception.js","angular2/src/core/change_detection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/date_pipe.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var intl_1 = require('angular2/src/core/facade/intl');
var di_1 = require('angular2/src/core/di');
var metadata_1 = require('angular2/src/core/metadata');
var collection_1 = require('angular2/src/core/facade/collection');
var invalid_pipe_argument_exception_1 = require('./invalid_pipe_argument_exception');
// TODO: move to a global configurable location along with other i18n components.
var defaultLocale = 'en-US';
/**
 * WARNING: this pipe uses the Internationalization API.
 * Therefore it is only reliable in Chrome and Opera browsers.
 *
 * Formats a date value to a string based on the requested format.
 *
 * # Usage
 *
 *     expression | date[:format]
 *
 * where `expression` is a date object or a number (milliseconds since UTC epoch) and
 * `format` indicates which date/time components to include:
 *
 *  | Component | Symbol | Short Form   | Long Form         | Numeric   | 2-digit   |
 *  |-----------|:------:|--------------|-------------------|-----------|-----------|
 *  | era       |   G    | G (AD)       | GGGG (Anno Domini)| -         | -         |
 *  | year      |   y    | -            | -                 | y (2015)  | yy (15)   |
 *  | month     |   M    | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
 *  | day       |   d    | -            | -                 | d (3)     | dd (03)   |
 *  | weekday   |   E    | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
 *  | hour      |   j    | -            | -                 | j (13)    | jj (13)   |
 *  | hour12    |   h    | -            | -                 | h (1 PM)  | hh (01 PM)|
 *  | hour24    |   H    | -            | -                 | H (13)    | HH (13)   |
 *  | minute    |   m    | -            | -                 | m (5)     | mm (05)   |
 *  | second    |   s    | -            | -                 | s (9)     | ss (09)   |
 *  | timezone  |   z    | -            | z (Pacific Standard Time)| -  | -         |
 *  | timezone  |   Z    | Z (GMT-8:00) | -                 | -         | -         |
 *
 * In javascript, only the components specified will be respected (not the ordering,
 * punctuations, ...) and details of the formatting will be dependent on the locale.
 * On the other hand in Dart version, you can also include quoted text as well as some extra
 * date/time components such as quarter. For more information see:
 * https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/intl/intl.DateFormat.
 *
 * `format` can also be one of the following predefined formats:
 *
 *  - `'medium'`: equivalent to `'yMMMdjms'` (e.g. Sep 3, 2010, 12:05:08 PM for en-US)
 *  - `'short'`: equivalent to `'yMdjm'` (e.g. 9/3/2010, 12:05 PM for en-US)
 *  - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. Friday, September 3, 2010 for en-US)
 *  - `'longDate'`: equivalent to `'yMMMMd'` (e.g. September 3, 2010)
 *  - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. Sep 3, 2010 for en-US)
 *  - `'shortDate'`: equivalent to `'yMd'` (e.g. 9/3/2010 for en-US)
 *  - `'mediumTime'`: equivalent to `'jms'` (e.g. 12:05:08 PM for en-US)
 *  - `'shortTime'`: equivalent to `'jm'` (e.g. 12:05 PM for en-US)
 *
 * Timezone of the formatted text will be the local system timezone of the end-users machine.
 *
 * # Examples
 *
 * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
 * in the _local_ time and locale is 'en-US':
 *
 *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
 *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
 *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
 *     {{ dateObj | date:'mmss' }}        // output is '43:11'
 */
var DatePipe = (function () {
    function DatePipe() {
    }
    DatePipe.prototype.transform = function (value, args) {
        if (lang_1.isBlank(value))
            return null;
        if (!this.supports(value)) {
            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(DatePipe, value);
        }
        var pattern = lang_1.isPresent(args) && args.length > 0 ? args[0] : 'mediumDate';
        if (lang_1.isNumber(value)) {
            value = lang_1.DateWrapper.fromMillis(value);
        }
        if (collection_1.StringMapWrapper.contains(DatePipe._ALIASES, pattern)) {
            pattern = collection_1.StringMapWrapper.get(DatePipe._ALIASES, pattern);
        }
        return intl_1.DateFormatter.format(value, defaultLocale, pattern);
    };
    DatePipe.prototype.supports = function (obj) { return lang_1.isDate(obj) || lang_1.isNumber(obj); };
    DatePipe._ALIASES = {
        'medium': 'yMMMdjms',
        'short': 'yMdjm',
        'fullDate': 'yMMMMEEEEd',
        'longDate': 'yMMMMd',
        'mediumDate': 'yMMMd',
        'shortDate': 'yMd',
        'mediumTime': 'jms',
        'shortTime': 'jm'
    };
    DatePipe = __decorate([
        lang_1.CONST(),
        metadata_1.Pipe({ name: 'date' }),
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], DatePipe);
    return DatePipe;
})();
exports.DatePipe = DatePipe;

},{"./invalid_pipe_argument_exception":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/invalid_pipe_argument_exception.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/intl":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/intl.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/default_pipes.js":[function(require,module,exports){
'use strict';var async_pipe_1 = require('./async_pipe');
var uppercase_pipe_1 = require('./uppercase_pipe');
var lowercase_pipe_1 = require('./lowercase_pipe');
var json_pipe_1 = require('./json_pipe');
var slice_pipe_1 = require('./slice_pipe');
var date_pipe_1 = require('./date_pipe');
var number_pipe_1 = require('./number_pipe');
var lang_1 = require('angular2/src/core/facade/lang');
var di_1 = require('angular2/src/core/di');
var DEFAULT_PIPES_LIST = lang_1.CONST_EXPR([
    async_pipe_1.AsyncPipe,
    uppercase_pipe_1.UpperCasePipe,
    lowercase_pipe_1.LowerCasePipe,
    json_pipe_1.JsonPipe,
    slice_pipe_1.SlicePipe,
    number_pipe_1.DecimalPipe,
    number_pipe_1.PercentPipe,
    number_pipe_1.CurrencyPipe,
    date_pipe_1.DatePipe
]);
exports.DEFAULT_PIPES_TOKEN = lang_1.CONST_EXPR(new di_1.OpaqueToken("Default Pipes"));
exports.DEFAULT_PIPES = lang_1.CONST_EXPR(new di_1.Provider(exports.DEFAULT_PIPES_TOKEN, { useValue: DEFAULT_PIPES_LIST }));

},{"./async_pipe":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/async_pipe.js","./date_pipe":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/date_pipe.js","./json_pipe":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/json_pipe.js","./lowercase_pipe":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/lowercase_pipe.js","./number_pipe":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/number_pipe.js","./slice_pipe":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/slice_pipe.js","./uppercase_pipe":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/uppercase_pipe.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/invalid_pipe_argument_exception.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var InvalidPipeArgumentException = (function (_super) {
    __extends(InvalidPipeArgumentException, _super);
    function InvalidPipeArgumentException(type, value) {
        _super.call(this, "Invalid argument '" + value + "' for pipe '" + type + "'");
    }
    return InvalidPipeArgumentException;
})(exceptions_1.BaseException);
exports.InvalidPipeArgumentException = InvalidPipeArgumentException;

},{"angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/json_pipe.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var di_1 = require('angular2/src/core/di');
var metadata_1 = require('angular2/src/core/metadata');
/**
 * Implements json transforms to any object.
 *
 * # Example
 *
 * In this example we transform the user object to json.
 *
 *  ```
 * @Component({
 *   selector: "user-cmp",
 *   template: "User: {{ user | json }}"
 * })
 * class Username {
 *  user:Object
 *  constructor() {
 *    this.user = { name: "PatrickJS" };
 *  }
 * }
 *
 * ```
 */
var JsonPipe = (function () {
    function JsonPipe() {
    }
    JsonPipe.prototype.transform = function (value, args) {
        if (args === void 0) { args = null; }
        return lang_1.Json.stringify(value);
    };
    JsonPipe = __decorate([
        lang_1.CONST(),
        metadata_1.Pipe({ name: 'json' }),
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], JsonPipe);
    return JsonPipe;
})();
exports.JsonPipe = JsonPipe;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/lowercase_pipe.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var di_1 = require('angular2/src/core/di');
var metadata_1 = require('angular2/src/core/metadata');
var invalid_pipe_argument_exception_1 = require('./invalid_pipe_argument_exception');
/**
 * Implements lowercase transforms to text.
 *
 * # Example
 *
 * In this example we transform the user text lowercase.
 *
 *  ```
 * @Component({
 *   selector: "username-cmp",
 *   template: "Username: {{ user | lowercase }}"
 * })
 * class Username {
 *   user:string;
 * }
 *
 * ```
 */
var LowerCasePipe = (function () {
    function LowerCasePipe() {
    }
    LowerCasePipe.prototype.transform = function (value, args) {
        if (args === void 0) { args = null; }
        if (lang_1.isBlank(value))
            return value;
        if (!lang_1.isString(value)) {
            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(LowerCasePipe, value);
        }
        return lang_1.StringWrapper.toLowerCase(value);
    };
    LowerCasePipe = __decorate([
        lang_1.CONST(),
        metadata_1.Pipe({ name: 'lowercase' }),
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], LowerCasePipe);
    return LowerCasePipe;
})();
exports.LowerCasePipe = LowerCasePipe;

},{"./invalid_pipe_argument_exception":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/invalid_pipe_argument_exception.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/number_pipe.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var intl_1 = require('angular2/src/core/facade/intl');
var di_1 = require('angular2/src/core/di');
var metadata_1 = require('angular2/src/core/metadata');
var collection_1 = require('angular2/src/core/facade/collection');
var invalid_pipe_argument_exception_1 = require('./invalid_pipe_argument_exception');
var defaultLocale = 'en-US';
var _re = lang_1.RegExpWrapper.create('^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$');
var NumberPipe = (function () {
    function NumberPipe() {
    }
    NumberPipe._format = function (value, style, digits, currency, currencyAsSymbol) {
        if (currency === void 0) { currency = null; }
        if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
        if (lang_1.isBlank(value))
            return null;
        if (!lang_1.isNumber(value)) {
            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(NumberPipe, value);
        }
        var minInt = 1, minFraction = 0, maxFraction = 3;
        if (lang_1.isPresent(digits)) {
            var parts = lang_1.RegExpWrapper.firstMatch(_re, digits);
            if (lang_1.isBlank(parts)) {
                throw new exceptions_1.BaseException(digits + " is not a valid digit info for number pipes");
            }
            if (lang_1.isPresent(parts[1])) {
                minInt = lang_1.NumberWrapper.parseIntAutoRadix(parts[1]);
            }
            if (lang_1.isPresent(parts[3])) {
                minFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[3]);
            }
            if (lang_1.isPresent(parts[5])) {
                maxFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[5]);
            }
        }
        return intl_1.NumberFormatter.format(value, defaultLocale, style, {
            minimumIntegerDigits: minInt,
            minimumFractionDigits: minFraction,
            maximumFractionDigits: maxFraction,
            currency: currency,
            currencyAsSymbol: currencyAsSymbol
        });
    };
    NumberPipe = __decorate([
        lang_1.CONST(),
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], NumberPipe);
    return NumberPipe;
})();
exports.NumberPipe = NumberPipe;
/**
 * WARNING: this pipe uses the Internationalization API.
 * Therefore it is only reliable in Chrome and Opera browsers.
 *
 * Formats a number as local text. i.e. group sizing and separator and other locale-specific
 * configurations are based on the active locale.
 *
 * # Usage
 *
 *     expression | number[:digitInfo]
 *
 * where `expression` is a number and `digitInfo` has the following format:
 *
 *     {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}
 *
 * - minIntegerDigits is the minimum number of integer digits to use. Defaults to 1.
 * - minFractionDigits is the minimum number of digits after fraction. Defaults to 0.
 * - maxFractionDigits is the maximum number of digits after fraction. Defaults to 3.
 *
 * For more information on the acceptable range for each of these numbers and other
 * details see your native internationalization library.
 *
 * # Examples
 *
 *     {{ 123 | number }}              // output is 123
 *     {{ 123.1 | number: '.2-3' }}    // output is 123.10
 *     {{ 1 | number: '2.2' }}         // output is 01.00
 */
var DecimalPipe = (function (_super) {
    __extends(DecimalPipe, _super);
    function DecimalPipe() {
        _super.apply(this, arguments);
    }
    DecimalPipe.prototype.transform = function (value, args) {
        var digits = collection_1.ListWrapper.first(args);
        return NumberPipe._format(value, intl_1.NumberFormatStyle.Decimal, digits);
    };
    DecimalPipe = __decorate([
        lang_1.CONST(),
        metadata_1.Pipe({ name: 'number' }),
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], DecimalPipe);
    return DecimalPipe;
})(NumberPipe);
exports.DecimalPipe = DecimalPipe;
/**
 * WARNING: this pipe uses the Internationalization API.
 * Therefore it is only reliable in Chrome and Opera browsers.
 *
 * Formats a number as local percent.
 *
 * # Usage
 *
 *     expression | percent[:digitInfo]
 *
 * For more information about `digitInfo` see {@link DecimalPipe}
 */
var PercentPipe = (function (_super) {
    __extends(PercentPipe, _super);
    function PercentPipe() {
        _super.apply(this, arguments);
    }
    PercentPipe.prototype.transform = function (value, args) {
        var digits = collection_1.ListWrapper.first(args);
        return NumberPipe._format(value, intl_1.NumberFormatStyle.Percent, digits);
    };
    PercentPipe = __decorate([
        lang_1.CONST(),
        metadata_1.Pipe({ name: 'percent' }),
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], PercentPipe);
    return PercentPipe;
})(NumberPipe);
exports.PercentPipe = PercentPipe;
/**
 * WARNING: this pipe uses the Internationalization API.
 * Therefore it is only reliable in Chrome and Opera browsers.
 *
 * Formats a number as local currency.
 *
 * # Usage
 *
 *     expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]
 *
 * where `currencyCode` is the ISO 4217 currency code, such as "USD" for the US dollar and
 * "EUR" for the euro. `symbolDisplay` is a boolean indicating whether to use the currency
 * symbol (e.g. $) or the currency code (e.g. USD) in the output. The default for this value
 * is `false`.
 * For more information about `digitInfo` see {@link DecimalPipe}
 */
var CurrencyPipe = (function (_super) {
    __extends(CurrencyPipe, _super);
    function CurrencyPipe() {
        _super.apply(this, arguments);
    }
    CurrencyPipe.prototype.transform = function (value, args) {
        var currencyCode = lang_1.isPresent(args) && args.length > 0 ? args[0] : 'USD';
        var symbolDisplay = lang_1.isPresent(args) && args.length > 1 ? args[1] : false;
        var digits = lang_1.isPresent(args) && args.length > 2 ? args[2] : null;
        return NumberPipe._format(value, intl_1.NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
    };
    CurrencyPipe = __decorate([
        lang_1.CONST(),
        metadata_1.Pipe({ name: 'currency' }),
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], CurrencyPipe);
    return CurrencyPipe;
})(NumberPipe);
exports.CurrencyPipe = CurrencyPipe;

},{"./invalid_pipe_argument_exception":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/invalid_pipe_argument_exception.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/intl":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/intl.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/pipe_provider.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var provider_1 = require('angular2/src/core/di/provider');
var di_1 = require('angular2/src/core/di');
var PipeProvider = (function (_super) {
    __extends(PipeProvider, _super);
    function PipeProvider(name, pure, key, resolvedFactories, multiBinding) {
        _super.call(this, key, resolvedFactories, multiBinding);
        this.name = name;
        this.pure = pure;
    }
    PipeProvider.createFromType = function (type, metadata) {
        var provider = new di_1.Provider(type, { useClass: type });
        var rb = provider_1.resolveProvider(provider);
        return new PipeProvider(metadata.name, metadata.pure, rb.key, rb.resolvedFactories, rb.multiProvider);
    };
    return PipeProvider;
})(provider_1.ResolvedProvider_);
exports.PipeProvider = PipeProvider;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/di/provider":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di/provider.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/pipes.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var cd = require('angular2/src/core/change_detection/pipes');
var ProtoPipes = (function () {
    function ProtoPipes(
        /**
        * Map of {@link PipeMetadata} names to {@link PipeMetadata} implementations.
        */
        config) {
        this.config = config;
        this.config = config;
    }
    ProtoPipes.fromProviders = function (providers) {
        var config = {};
        providers.forEach(function (b) { return config[b.name] = b; });
        return new ProtoPipes(config);
    };
    ProtoPipes.prototype.get = function (name) {
        var provider = this.config[name];
        if (lang_1.isBlank(provider))
            throw new exceptions_1.BaseException("Cannot find pipe '" + name + "'.");
        return provider;
    };
    return ProtoPipes;
})();
exports.ProtoPipes = ProtoPipes;
var Pipes = (function () {
    function Pipes(proto, injector) {
        this.proto = proto;
        this.injector = injector;
        /** @internal */
        this._config = {};
    }
    Pipes.prototype.get = function (name) {
        var cached = collection_1.StringMapWrapper.get(this._config, name);
        if (lang_1.isPresent(cached))
            return cached;
        var p = this.proto.get(name);
        var transform = this.injector.instantiateResolved(p);
        var res = new cd.SelectedPipe(transform, p.pure);
        if (p.pure) {
            collection_1.StringMapWrapper.set(this._config, name, res);
        }
        return res;
    };
    return Pipes;
})();
exports.Pipes = Pipes;

},{"angular2/src/core/change_detection/pipes":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/change_detection/pipes.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/slice_pipe.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var di_1 = require('angular2/src/core/di');
var invalid_pipe_argument_exception_1 = require('./invalid_pipe_argument_exception');
var metadata_1 = require('../metadata');
/**
 * Creates a new List or String containing only a subset (slice) of the
 * elements.
 *
 * The starting index of the subset to return is specified by the `start` parameter.
 *
 * The ending index of the subset to return is specified by the optional `end` parameter.
 *
 * # Usage
 *
 *     expression | slice:start[:end]
 *
 * All behavior is based on the expected behavior of the JavaScript API
 * Array.prototype.slice() and String.prototype.slice()
 *
 * Where the input expression is a [List] or [String], and `start` is:
 *
 * - **a positive integer**: return the item at _start_ index and all items after
 * in the list or string expression.
 * - **a negative integer**: return the item at _start_ index from the end and all items after
 * in the list or string expression.
 * - **`|start|` greater than the size of the expression**: return an empty list or string.
 * - **`|start|` negative greater than the size of the expression**: return entire list or
 * string expression.
 *
 * and where `end` is:
 *
 * - **omitted**: return all items until the end of the input
 * - **a positive integer**: return all items before _end_ index of the list or string
 * expression.
 * - **a negative integer**: return all items before _end_ index from the end of the list
 * or string expression.
 *
 * When operating on a [List], the returned list is always a copy even when all
 * the elements are being returned.
 *
 * # Examples
 *
 * ## List Example
 *
 * Assuming `var collection = ['a', 'b', 'c', 'd']`, this `ng-for` directive:
 *
 *     <li *ng-for="var i in collection | slice:1:3">{{i}}</li>
 *
 * produces the following:
 *
 *     <li>b</li>
 *     <li>c</li>
 *
 * ## String Examples
 *
 *     {{ 'abcdefghij' | slice:0:4 }}       // output is 'abcd'
 *     {{ 'abcdefghij' | slice:4:0 }}       // output is ''
 *     {{ 'abcdefghij' | slice:-4 }}      // output is 'ghij'
 *     {{ 'abcdefghij' | slice:-4,-2 }}      // output is 'gh'
 *     {{ 'abcdefghij' | slice: -100 }}    // output is 'abcdefghij'
 *     {{ 'abcdefghij' | slice: 100 }}    // output is ''
 */
var SlicePipe = (function () {
    function SlicePipe() {
    }
    SlicePipe.prototype.transform = function (value, args) {
        if (args === void 0) { args = null; }
        if (lang_1.isBlank(args) || args.length == 0) {
            throw new exceptions_1.BaseException('Slice pipe requires one argument');
        }
        if (!this.supports(value)) {
            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(SlicePipe, value);
        }
        if (lang_1.isBlank(value))
            return value;
        var start = args[0];
        var end = args.length > 1 ? args[1] : null;
        if (lang_1.isString(value)) {
            return lang_1.StringWrapper.slice(value, start, end);
        }
        return collection_1.ListWrapper.slice(value, start, end);
    };
    SlicePipe.prototype.supports = function (obj) { return lang_1.isString(obj) || lang_1.isArray(obj); };
    SlicePipe = __decorate([
        metadata_1.Pipe({ name: 'slice' }),
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], SlicePipe);
    return SlicePipe;
})();
exports.SlicePipe = SlicePipe;

},{"../metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js","./invalid_pipe_argument_exception":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/invalid_pipe_argument_exception.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/uppercase_pipe.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = require('angular2/src/core/facade/lang');
var metadata_1 = require('angular2/src/core/metadata');
var di_1 = require('angular2/src/core/di');
var invalid_pipe_argument_exception_1 = require('./invalid_pipe_argument_exception');
/**
 * Implements uppercase transforms to text.
 *
 * # Example
 *
 * In this example we transform the user text uppercase.
 *
 *  ```
 * @Component({
 *   selector: "username-cmp",
 *   template: "Username: {{ user | uppercase }}"
 * })
 * class Username {
 *   user:string;
 * }
 *
 * ```
 */
var UpperCasePipe = (function () {
    function UpperCasePipe() {
    }
    UpperCasePipe.prototype.transform = function (value, args) {
        if (args === void 0) { args = null; }
        if (lang_1.isBlank(value))
            return value;
        if (!lang_1.isString(value)) {
            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(UpperCasePipe, value);
        }
        return lang_1.StringWrapper.toUpperCase(value);
    };
    UpperCasePipe = __decorate([
        lang_1.CONST(),
        metadata_1.Pipe({ name: 'uppercase' }),
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], UpperCasePipe);
    return UpperCasePipe;
})();
exports.UpperCasePipe = UpperCasePipe;

},{"./invalid_pipe_argument_exception":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/pipes/invalid_pipe_argument_exception.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/metadata":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/metadata.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/platform_bindings.js":[function(require,module,exports){
'use strict';var di_1 = require('angular2/src/core/di');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
exports.EXCEPTION_PROVIDER = di_1.provide(exceptions_1.ExceptionHandler, { useFactory: function () { return new exceptions_1.ExceptionHandler(dom_adapter_1.DOM, false); }, deps: [] });
exports.EXCEPTION_BINDING = exports.EXCEPTION_PROVIDER;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/profile/profile.js":[function(require,module,exports){
'use strict';var impl = require("./wtf_impl");
// Change exports to const once https://github.com/angular/ts2dart/issues/150
/**
 * True if WTF is enabled.
 */
exports.wtfEnabled = impl.detectWTF();
function noopScope(arg0, arg1) {
    return null;
}
/**
 * Create trace scope.
 *
 * Scopes must be strictly nested and are analogous to stack frames, but
 * do not have to follow the stack frames. Instead it is recommended that they follow logical
 * nesting. You may want to use
 * [Event
 * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
 * as they are defined in WTF.
 *
 * Used to mark scope entry. The return value is used to leave the scope.
 *
 *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
 *
 *     someMethod() {
 *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
 *        // DO SOME WORK HERE
 *        return wtfLeave(s, 123); // Return value 123
 *     }
 *
 * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
 * negatively impact the performance of your application. For this reason we recommend that
 * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
 * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
 * exception, will produce incorrect trace, but presence of exception signifies logic error which
 * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
 * an exception is expected during normal execution while profiling.
 *
 */
exports.wtfCreateScope = exports.wtfEnabled ? impl.createScope : function (signature, flags) { return noopScope; };
/**
 * Used to mark end of Scope.
 *
 * - `scope` to end.
 * - `returnValue` (optional) to be passed to the WTF.
 *
 * Returns the `returnValue for easy chaining.
 */
exports.wtfLeave = exports.wtfEnabled ? impl.leave : function (s, r) { return r; };
/**
 * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
 * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
 * enabled.
 *
 *     someMethod() {
 *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
 *        var future = new Future.delay(5).then((_) {
 *          wtfEndTimeRange(s);
 *        });
 *     }
 */
exports.wtfStartTimeRange = exports.wtfEnabled ? impl.startTimeRange : function (rangeType, action) { return null; };
/**
 * Ends a async time range operation.
 * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
 * enabled.
 */
exports.wtfEndTimeRange = exports.wtfEnabled ? impl.endTimeRange : function (r) {
    return null;
};

},{"./wtf_impl":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/profile/wtf_impl.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/profile/wtf_impl.js":[function(require,module,exports){
'use strict';var lang_1 = require('../facade/lang');
var trace;
var events;
function detectWTF() {
    var wtf = lang_1.global['wtf'];
    if (wtf) {
        trace = wtf['trace'];
        if (trace) {
            events = trace['events'];
            return true;
        }
    }
    return false;
}
exports.detectWTF = detectWTF;
function createScope(signature, flags) {
    if (flags === void 0) { flags = null; }
    return events.createScope(signature, flags);
}
exports.createScope = createScope;
function leave(scope, returnValue) {
    trace.leaveScope(scope, returnValue);
    return returnValue;
}
exports.leave = leave;
function startTimeRange(rangeType, action) {
    return trace.beginTimeRange(rangeType, action);
}
exports.startTimeRange = startTimeRange;
function endTimeRange(range) {
    trace.endTimeRange(range);
}
exports.endTimeRange = endTimeRange;

},{"../facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/profile/wtf_init.js":[function(require,module,exports){
'use strict';/**
 * This is here because DART requires it. It is noop in JS.
 */
function wtfInit() { }
exports.wtfInit = wtfInit;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflection.js":[function(require,module,exports){
'use strict';var reflector_1 = require('./reflector');
var reflector_2 = require('./reflector');
exports.Reflector = reflector_2.Reflector;
exports.ReflectionInfo = reflector_2.ReflectionInfo;
var reflection_capabilities_1 = require('./reflection_capabilities');
exports.reflector = new reflector_1.Reflector(new reflection_capabilities_1.ReflectionCapabilities());

},{"./reflection_capabilities":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflection_capabilities.js","./reflector":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflector.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflection_capabilities.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var ReflectionCapabilities = (function () {
    function ReflectionCapabilities(reflect) {
        this._reflect = lang_1.isPresent(reflect) ? reflect : lang_1.global.Reflect;
    }
    ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
    ReflectionCapabilities.prototype.factory = function (t) {
        switch (t.length) {
            case 0:
                return function () { return new t(); };
            case 1:
                return function (a1) { return new t(a1); };
            case 2:
                return function (a1, a2) { return new t(a1, a2); };
            case 3:
                return function (a1, a2, a3) { return new t(a1, a2, a3); };
            case 4:
                return function (a1, a2, a3, a4) { return new t(a1, a2, a3, a4); };
            case 5:
                return function (a1, a2, a3, a4, a5) { return new t(a1, a2, a3, a4, a5); };
            case 6:
                return function (a1, a2, a3, a4, a5, a6) { return new t(a1, a2, a3, a4, a5, a6); };
            case 7:
                return function (a1, a2, a3, a4, a5, a6, a7) { return new t(a1, a2, a3, a4, a5, a6, a7); };
            case 8:
                return function (a1, a2, a3, a4, a5, a6, a7, a8) { return new t(a1, a2, a3, a4, a5, a6, a7, a8); };
            case 9:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) { return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9); };
            case 10:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                };
            case 11:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
                };
            case 12:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                };
            case 13:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
                };
            case 14:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
                };
            case 15:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
                };
            case 16:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
                };
            case 17:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                };
            case 18:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
                };
            case 19:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
                };
            case 20:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) {
                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
                };
        }
        ;
        throw new Error("Cannot create a factory for '" + lang_1.stringify(t) + "' because its constructor has more than 20 arguments");
    };
    /** @internal */
    ReflectionCapabilities.prototype._zipTypesAndAnnotaions = function (paramTypes, paramAnnotations) {
        var result;
        if (typeof paramTypes === 'undefined') {
            result = collection_1.ListWrapper.createFixedSize(paramAnnotations.length);
        }
        else {
            result = collection_1.ListWrapper.createFixedSize(paramTypes.length);
        }
        for (var i = 0; i < result.length; i++) {
            // TS outputs Object for parameters without types, while Traceur omits
            // the annotations. For now we preserve the Traceur behavior to aid
            // migration, but this can be revisited.
            if (typeof paramTypes === 'undefined') {
                result[i] = [];
            }
            else if (paramTypes[i] != Object) {
                result[i] = [paramTypes[i]];
            }
            else {
                result[i] = [];
            }
            if (lang_1.isPresent(paramAnnotations) && lang_1.isPresent(paramAnnotations[i])) {
                result[i] = result[i].concat(paramAnnotations[i]);
            }
        }
        return result;
    };
    ReflectionCapabilities.prototype.parameters = function (typeOrFunc) {
        // Prefer the direct API.
        if (lang_1.isPresent(typeOrFunc.parameters)) {
            return typeOrFunc.parameters;
        }
        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
            var paramAnnotations = this._reflect.getMetadata('parameters', typeOrFunc);
            var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOrFunc);
            if (lang_1.isPresent(paramTypes) || lang_1.isPresent(paramAnnotations)) {
                return this._zipTypesAndAnnotaions(paramTypes, paramAnnotations);
            }
        }
        return collection_1.ListWrapper.createFixedSize(typeOrFunc.length);
    };
    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
        // Prefer the direct API.
        if (lang_1.isPresent(typeOrFunc.annotations)) {
            var annotations = typeOrFunc.annotations;
            if (lang_1.isFunction(annotations) && annotations.annotations) {
                annotations = annotations.annotations;
            }
            return annotations;
        }
        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
            var annotations = this._reflect.getMetadata('annotations', typeOrFunc);
            if (lang_1.isPresent(annotations))
                return annotations;
        }
        return [];
    };
    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
        // Prefer the direct API.
        if (lang_1.isPresent(typeOrFunc.propMetadata)) {
            var propMetadata = typeOrFunc.propMetadata;
            if (lang_1.isFunction(propMetadata) && propMetadata.propMetadata) {
                propMetadata = propMetadata.propMetadata;
            }
            return propMetadata;
        }
        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
            var propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);
            if (lang_1.isPresent(propMetadata))
                return propMetadata;
        }
        return {};
    };
    ReflectionCapabilities.prototype.interfaces = function (type) {
        throw new exceptions_1.BaseException("JavaScript does not support interfaces");
    };
    ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };
    ReflectionCapabilities.prototype.setter = function (name) {
        return new Function('o', 'v', 'return o.' + name + ' = v;');
    };
    ReflectionCapabilities.prototype.method = function (name) {
        var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
        return new Function('o', 'args', functionBody);
    };
    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
    ReflectionCapabilities.prototype.importUri = function (type) { return './'; };
    return ReflectionCapabilities;
})();
exports.ReflectionCapabilities = ReflectionCapabilities;

},{"angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/reflection/reflector.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var ReflectionInfo = (function () {
    function ReflectionInfo(annotations, parameters, factory, interfaces, propMetadata) {
        this.annotations = annotations;
        this.parameters = parameters;
        this.factory = factory;
        this.interfaces = interfaces;
        this.propMetadata = propMetadata;
    }
    return ReflectionInfo;
})();
exports.ReflectionInfo = ReflectionInfo;
var Reflector = (function () {
    function Reflector(reflectionCapabilities) {
        /** @internal */
        this._injectableInfo = new collection_1.Map();
        /** @internal */
        this._getters = new collection_1.Map();
        /** @internal */
        this._setters = new collection_1.Map();
        /** @internal */
        this._methods = new collection_1.Map();
        this._usedKeys = null;
        this.reflectionCapabilities = reflectionCapabilities;
    }
    Reflector.prototype.isReflectionEnabled = function () { return this.reflectionCapabilities.isReflectionEnabled(); };
    /**
     * Causes `this` reflector to track keys used to access
     * {@link ReflectionInfo} objects.
     */
    Reflector.prototype.trackUsage = function () { this._usedKeys = new collection_1.Set(); };
    /**
     * Lists types for which reflection information was not requested since
     * {@link #trackUsage} was called. This list could later be audited as
     * potential dead code.
     */
    Reflector.prototype.listUnusedKeys = function () {
        var _this = this;
        if (this._usedKeys == null) {
            throw new exceptions_1.BaseException('Usage tracking is disabled');
        }
        var allTypes = collection_1.MapWrapper.keys(this._injectableInfo);
        return collection_1.ListWrapper.filter(allTypes, function (key) { return !collection_1.SetWrapper.has(_this._usedKeys, key); });
    };
    Reflector.prototype.registerFunction = function (func, funcInfo) {
        this._injectableInfo.set(func, funcInfo);
    };
    Reflector.prototype.registerType = function (type, typeInfo) {
        this._injectableInfo.set(type, typeInfo);
    };
    Reflector.prototype.registerGetters = function (getters) { _mergeMaps(this._getters, getters); };
    Reflector.prototype.registerSetters = function (setters) { _mergeMaps(this._setters, setters); };
    Reflector.prototype.registerMethods = function (methods) { _mergeMaps(this._methods, methods); };
    Reflector.prototype.factory = function (type) {
        if (this._containsReflectionInfo(type)) {
            var res = this._getReflectionInfo(type).factory;
            return lang_1.isPresent(res) ? res : null;
        }
        else {
            return this.reflectionCapabilities.factory(type);
        }
    };
    Reflector.prototype.parameters = function (typeOrFunc) {
        if (this._injectableInfo.has(typeOrFunc)) {
            var res = this._getReflectionInfo(typeOrFunc).parameters;
            return lang_1.isPresent(res) ? res : [];
        }
        else {
            return this.reflectionCapabilities.parameters(typeOrFunc);
        }
    };
    Reflector.prototype.annotations = function (typeOrFunc) {
        if (this._injectableInfo.has(typeOrFunc)) {
            var res = this._getReflectionInfo(typeOrFunc).annotations;
            return lang_1.isPresent(res) ? res : [];
        }
        else {
            return this.reflectionCapabilities.annotations(typeOrFunc);
        }
    };
    Reflector.prototype.propMetadata = function (typeOrFunc) {
        if (this._injectableInfo.has(typeOrFunc)) {
            var res = this._getReflectionInfo(typeOrFunc).propMetadata;
            return lang_1.isPresent(res) ? res : {};
        }
        else {
            return this.reflectionCapabilities.propMetadata(typeOrFunc);
        }
    };
    Reflector.prototype.interfaces = function (type) {
        if (this._injectableInfo.has(type)) {
            var res = this._getReflectionInfo(type).interfaces;
            return lang_1.isPresent(res) ? res : [];
        }
        else {
            return this.reflectionCapabilities.interfaces(type);
        }
    };
    Reflector.prototype.getter = function (name) {
        if (this._getters.has(name)) {
            return this._getters.get(name);
        }
        else {
            return this.reflectionCapabilities.getter(name);
        }
    };
    Reflector.prototype.setter = function (name) {
        if (this._setters.has(name)) {
            return this._setters.get(name);
        }
        else {
            return this.reflectionCapabilities.setter(name);
        }
    };
    Reflector.prototype.method = function (name) {
        if (this._methods.has(name)) {
            return this._methods.get(name);
        }
        else {
            return this.reflectionCapabilities.method(name);
        }
    };
    /** @internal */
    Reflector.prototype._getReflectionInfo = function (typeOrFunc) {
        if (lang_1.isPresent(this._usedKeys)) {
            this._usedKeys.add(typeOrFunc);
        }
        return this._injectableInfo.get(typeOrFunc);
    };
    /** @internal */
    Reflector.prototype._containsReflectionInfo = function (typeOrFunc) { return this._injectableInfo.has(typeOrFunc); };
    Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
    return Reflector;
})();
exports.Reflector = Reflector;
function _mergeMaps(target, config) {
    collection_1.StringMapWrapper.forEach(config, function (v, k) { return target.set(k, v); });
}

},{"angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render.js":[function(require,module,exports){
'use strict';// Public API for render
var render_1 = require('./render/render');
exports.Renderer = render_1.Renderer;
exports.RenderViewRef = render_1.RenderViewRef;
exports.RenderProtoViewRef = render_1.RenderProtoViewRef;
exports.RenderFragmentRef = render_1.RenderFragmentRef;
exports.RenderViewWithFragments = render_1.RenderViewWithFragments;
exports.DOCUMENT = render_1.DOCUMENT;

},{"./render/render":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/render.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/api.js":[function(require,module,exports){
'use strict';/**
 * Represents an Angular ProtoView in the Rendering Context.
 *
 * When you implement a custom {@link Renderer}, `RenderProtoViewRef` specifies what Render View
 * your renderer should create.
 *
 * `RenderProtoViewRef` is a counterpart to {@link ProtoViewRef} available in the Application
 * Context. But unlike `ProtoViewRef`, `RenderProtoViewRef` contains all static nested Proto Views
 * that are recursively merged into a single Render Proto View.

 *
 * <!-- TODO: this is created by Renderer#createProtoView in the new compiler -->
 */
var RenderProtoViewRef = (function () {
    function RenderProtoViewRef() {
    }
    return RenderProtoViewRef;
})();
exports.RenderProtoViewRef = RenderProtoViewRef;
/**
 * Represents a list of sibling Nodes that can be moved by the {@link Renderer} independently of
 * other Render Fragments.
 *
 * Any {@link RenderView} has one Render Fragment.
 *
 * Additionally any View with an Embedded View that contains a {@link NgContent View Projection}
 * results in additional Render Fragment.
 */
/*
  <div>foo</div>
  {{bar}}


  <div>foo</div> -> view 1 / fragment 1
  <ul>
    <template ng-for>
      <li>{{fg}}</li> -> view 2 / fragment 1
    </template>
  </ul>
  {{bar}}


  <div>foo</div> -> view 1 / fragment 1
  <ul>
    <template ng-if>
      <li><ng-content></></li> -> view 1 / fragment 2
    </template>
    <template ng-for>
      <li><ng-content></></li> ->
      <li></li>                -> view 1 / fragment 2 + view 2 / fragment 1..n-1
    </template>
  </ul>
  {{bar}}
 */
// TODO(i): refactor into an interface
var RenderFragmentRef = (function () {
    function RenderFragmentRef() {
    }
    return RenderFragmentRef;
})();
exports.RenderFragmentRef = RenderFragmentRef;
/**
 * Represents an Angular View in the Rendering Context.
 *
 * `RenderViewRef` specifies to the {@link Renderer} what View to update or destroy.
 *
 * Unlike a {@link ViewRef} available in the Application Context, Render View contains all the
 * static Component Views that have been recursively merged into a single Render View.
 *
 * Each `RenderViewRef` contains one or more {@link RenderFragmentRef Render Fragments}, these
 * Fragments are created, hydrated, dehydrated and destroyed as a single unit together with the
 * View.
 */
// TODO(i): refactor into an interface
var RenderViewRef = (function () {
    function RenderViewRef() {
    }
    return RenderViewRef;
})();
exports.RenderViewRef = RenderViewRef;
/**
 * Container class produced by a {@link Renderer} when creating a Render View.
 *
 * An instance of `RenderViewWithFragments` contains a {@link RenderViewRef} and an array of
 * {@link RenderFragmentRef}s belonging to this Render View.
 */
// TODO(i): refactor this by RenderViewWithFragments and adding fragments directly to RenderViewRef
var RenderViewWithFragments = (function () {
    function RenderViewWithFragments(
        /**
         * Reference to the {@link RenderViewRef}.
         */
        viewRef, 
        /**
         * Array of {@link RenderFragmentRef}s ordered in the depth-first order.
         */
        fragmentRefs) {
        this.viewRef = viewRef;
        this.fragmentRefs = fragmentRefs;
    }
    return RenderViewWithFragments;
})();
exports.RenderViewWithFragments = RenderViewWithFragments;
/**
 * Injectable service that provides a low-level interface for modifying the UI.
 *
 * Use this service to bypass Angular's templating and make custom UI changes that can't be
 * expressed declaratively. For example if you need to set a property or an attribute whose name is
 * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}
 * respectively.
 *
 * If you are implementing a custom renderer, you must implement this interface.
 *
 * The default Renderer implementation is {@link DomRenderer}. Also see {@link WebWorkerRenderer}.
 */
var Renderer = (function () {
    function Renderer() {
    }
    return Renderer;
})();
exports.Renderer = Renderer;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/dom_renderer.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var di_1 = require('angular2/src/core/di');
var animation_builder_1 = require('angular2/src/animate/animation_builder');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var event_manager_1 = require('./events/event_manager');
var shared_styles_host_1 = require('./shared_styles_host');
var profile_1 = require('../../profile/profile');
var api_1 = require('../api');
var dom_tokens_1 = require('./dom_tokens');
var view_factory_1 = require('../view_factory');
var view_1 = require('../view');
var util_1 = require('./util');
var DomRenderer = (function (_super) {
    __extends(DomRenderer, _super);
    function DomRenderer() {
        _super.apply(this, arguments);
    }
    DomRenderer.prototype.createProtoView = function (cmds) {
        return new view_1.DefaultProtoViewRef(cmds);
    };
    DomRenderer.prototype.getNativeElementSync = function (location) {
        return resolveInternalDomView(location.renderView).boundElements[location.boundElementIndex];
    };
    DomRenderer.prototype.getRootNodes = function (fragment) { return resolveInternalDomFragment(fragment); };
    DomRenderer.prototype.attachFragmentAfterFragment = function (previousFragmentRef, fragmentRef) {
        var previousFragmentNodes = resolveInternalDomFragment(previousFragmentRef);
        if (previousFragmentNodes.length > 0) {
            var sibling = previousFragmentNodes[previousFragmentNodes.length - 1];
            var nodes = resolveInternalDomFragment(fragmentRef);
            moveNodesAfterSibling(sibling, nodes);
            this.animateNodesEnter(nodes);
        }
    };
    /**
     * Iterates through all nodes being added to the DOM and animates them if necessary
     * @param nodes
     */
    DomRenderer.prototype.animateNodesEnter = function (nodes) {
        for (var i = 0; i < nodes.length; i++)
            this.animateNodeEnter(nodes[i]);
    };
    DomRenderer.prototype.attachFragmentAfterElement = function (elementRef, fragmentRef) {
        var parentView = resolveInternalDomView(elementRef.renderView);
        var element = parentView.boundElements[elementRef.boundElementIndex];
        var nodes = resolveInternalDomFragment(fragmentRef);
        moveNodesAfterSibling(element, nodes);
        this.animateNodesEnter(nodes);
    };
    DomRenderer.prototype.hydrateView = function (viewRef) { resolveInternalDomView(viewRef).hydrate(); };
    DomRenderer.prototype.dehydrateView = function (viewRef) { resolveInternalDomView(viewRef).dehydrate(); };
    DomRenderer.prototype.createTemplateAnchor = function (attrNameAndValues) {
        return this.createElement('script', attrNameAndValues);
    };
    DomRenderer.prototype.createText = function (value) { return dom_adapter_1.DOM.createTextNode(lang_1.isPresent(value) ? value : ''); };
    DomRenderer.prototype.appendChild = function (parent, child) { dom_adapter_1.DOM.appendChild(parent, child); };
    DomRenderer.prototype.setElementProperty = function (location, propertyName, propertyValue) {
        var view = resolveInternalDomView(location.renderView);
        dom_adapter_1.DOM.setProperty(view.boundElements[location.boundElementIndex], propertyName, propertyValue);
    };
    DomRenderer.prototype.setElementAttribute = function (location, attributeName, attributeValue) {
        var view = resolveInternalDomView(location.renderView);
        var element = view.boundElements[location.boundElementIndex];
        var dashCasedAttributeName = util_1.camelCaseToDashCase(attributeName);
        if (lang_1.isPresent(attributeValue)) {
            dom_adapter_1.DOM.setAttribute(element, dashCasedAttributeName, lang_1.stringify(attributeValue));
        }
        else {
            dom_adapter_1.DOM.removeAttribute(element, dashCasedAttributeName);
        }
    };
    DomRenderer.prototype.setElementClass = function (location, className, isAdd) {
        var view = resolveInternalDomView(location.renderView);
        var element = view.boundElements[location.boundElementIndex];
        if (isAdd) {
            dom_adapter_1.DOM.addClass(element, className);
        }
        else {
            dom_adapter_1.DOM.removeClass(element, className);
        }
    };
    DomRenderer.prototype.setElementStyle = function (location, styleName, styleValue) {
        var view = resolveInternalDomView(location.renderView);
        var element = view.boundElements[location.boundElementIndex];
        var dashCasedStyleName = util_1.camelCaseToDashCase(styleName);
        if (lang_1.isPresent(styleValue)) {
            dom_adapter_1.DOM.setStyle(element, dashCasedStyleName, lang_1.stringify(styleValue));
        }
        else {
            dom_adapter_1.DOM.removeStyle(element, dashCasedStyleName);
        }
    };
    DomRenderer.prototype.invokeElementMethod = function (location, methodName, args) {
        var view = resolveInternalDomView(location.renderView);
        var element = view.boundElements[location.boundElementIndex];
        dom_adapter_1.DOM.invoke(element, methodName, args);
    };
    DomRenderer.prototype.setText = function (viewRef, textNodeIndex, text) {
        var view = resolveInternalDomView(viewRef);
        dom_adapter_1.DOM.setText(view.boundTextNodes[textNodeIndex], text);
    };
    DomRenderer.prototype.setEventDispatcher = function (viewRef, dispatcher) {
        resolveInternalDomView(viewRef).setEventDispatcher(dispatcher);
    };
    return DomRenderer;
})(api_1.Renderer);
exports.DomRenderer = DomRenderer;
var DomRenderer_ = (function (_super) {
    __extends(DomRenderer_, _super);
    function DomRenderer_(_eventManager, _domSharedStylesHost, _animate, document) {
        _super.call(this);
        this._eventManager = _eventManager;
        this._domSharedStylesHost = _domSharedStylesHost;
        this._animate = _animate;
        this._componentCmds = new Map();
        this._nativeShadowStyles = new Map();
        /** @internal */
        this._createRootHostViewScope = profile_1.wtfCreateScope('DomRenderer#createRootHostView()');
        /** @internal */
        this._createViewScope = profile_1.wtfCreateScope('DomRenderer#createView()');
        /** @internal */
        this._detachFragmentScope = profile_1.wtfCreateScope('DomRenderer#detachFragment()');
        this._document = document;
    }
    DomRenderer_.prototype.registerComponentTemplate = function (templateId, commands, styles, nativeShadow) {
        this._componentCmds.set(templateId, commands);
        if (nativeShadow) {
            this._nativeShadowStyles.set(templateId, styles);
        }
        else {
            this._domSharedStylesHost.addStyles(styles);
        }
    };
    DomRenderer_.prototype.resolveComponentTemplate = function (templateId) {
        return this._componentCmds.get(templateId);
    };
    DomRenderer_.prototype.createRootHostView = function (hostProtoViewRef, fragmentCount, hostElementSelector) {
        var s = this._createRootHostViewScope();
        var element = dom_adapter_1.DOM.querySelector(this._document, hostElementSelector);
        if (lang_1.isBlank(element)) {
            profile_1.wtfLeave(s);
            throw new exceptions_1.BaseException("The selector \"" + hostElementSelector + "\" did not match any elements");
        }
        return profile_1.wtfLeave(s, this._createView(hostProtoViewRef, element));
    };
    DomRenderer_.prototype.createView = function (protoViewRef, fragmentCount) {
        var s = this._createViewScope();
        return profile_1.wtfLeave(s, this._createView(protoViewRef, null));
    };
    DomRenderer_.prototype._createView = function (protoViewRef, inplaceElement) {
        var view = view_factory_1.createRenderView(protoViewRef.cmds, inplaceElement, this);
        var sdRoots = view.nativeShadowRoots;
        for (var i = 0; i < sdRoots.length; i++) {
            this._domSharedStylesHost.addHost(sdRoots[i]);
        }
        return new api_1.RenderViewWithFragments(view, view.fragments);
    };
    DomRenderer_.prototype.destroyView = function (viewRef) {
        var view = viewRef;
        var sdRoots = view.nativeShadowRoots;
        for (var i = 0; i < sdRoots.length; i++) {
            this._domSharedStylesHost.removeHost(sdRoots[i]);
        }
    };
    DomRenderer_.prototype.animateNodeEnter = function (node) {
        if (dom_adapter_1.DOM.isElementNode(node) && dom_adapter_1.DOM.hasClass(node, 'ng-animate')) {
            dom_adapter_1.DOM.addClass(node, 'ng-enter');
            this._animate.css()
                .addAnimationClass('ng-enter-active')
                .start(node)
                .onComplete(function () { dom_adapter_1.DOM.removeClass(node, 'ng-enter'); });
        }
    };
    DomRenderer_.prototype.animateNodeLeave = function (node) {
        if (dom_adapter_1.DOM.isElementNode(node) && dom_adapter_1.DOM.hasClass(node, 'ng-animate')) {
            dom_adapter_1.DOM.addClass(node, 'ng-leave');
            this._animate.css()
                .addAnimationClass('ng-leave-active')
                .start(node)
                .onComplete(function () {
                dom_adapter_1.DOM.removeClass(node, 'ng-leave');
                dom_adapter_1.DOM.remove(node);
            });
        }
        else {
            dom_adapter_1.DOM.remove(node);
        }
    };
    DomRenderer_.prototype.detachFragment = function (fragmentRef) {
        var s = this._detachFragmentScope();
        var fragmentNodes = resolveInternalDomFragment(fragmentRef);
        for (var i = 0; i < fragmentNodes.length; i++) {
            this.animateNodeLeave(fragmentNodes[i]);
        }
        profile_1.wtfLeave(s);
    };
    DomRenderer_.prototype.createElement = function (name, attrNameAndValues) {
        var el = dom_adapter_1.DOM.createElement(name);
        this._setAttributes(el, attrNameAndValues);
        return el;
    };
    DomRenderer_.prototype.mergeElement = function (existing, attrNameAndValues) {
        dom_adapter_1.DOM.clearNodes(existing);
        this._setAttributes(existing, attrNameAndValues);
    };
    DomRenderer_.prototype._setAttributes = function (node, attrNameAndValues) {
        for (var attrIdx = 0; attrIdx < attrNameAndValues.length; attrIdx += 2) {
            dom_adapter_1.DOM.setAttribute(node, attrNameAndValues[attrIdx], attrNameAndValues[attrIdx + 1]);
        }
    };
    DomRenderer_.prototype.createRootContentInsertionPoint = function () {
        return dom_adapter_1.DOM.createComment('root-content-insertion-point');
    };
    DomRenderer_.prototype.createShadowRoot = function (host, templateId) {
        var sr = dom_adapter_1.DOM.createShadowRoot(host);
        var styles = this._nativeShadowStyles.get(templateId);
        for (var i = 0; i < styles.length; i++) {
            dom_adapter_1.DOM.appendChild(sr, dom_adapter_1.DOM.createStyleElement(styles[i]));
        }
        return sr;
    };
    DomRenderer_.prototype.on = function (element, eventName, callback) {
        this._eventManager.addEventListener(element, eventName, decoratePreventDefault(callback));
    };
    DomRenderer_.prototype.globalOn = function (target, eventName, callback) {
        return this._eventManager.addGlobalEventListener(target, eventName, decoratePreventDefault(callback));
    };
    DomRenderer_ = __decorate([
        di_1.Injectable(),
        __param(3, di_1.Inject(dom_tokens_1.DOCUMENT)), 
        __metadata('design:paramtypes', [event_manager_1.EventManager, shared_styles_host_1.DomSharedStylesHost, animation_builder_1.AnimationBuilder, Object])
    ], DomRenderer_);
    return DomRenderer_;
})(DomRenderer);
exports.DomRenderer_ = DomRenderer_;
function resolveInternalDomView(viewRef) {
    return viewRef;
}
function resolveInternalDomFragment(fragmentRef) {
    return fragmentRef.nodes;
}
function moveNodesAfterSibling(sibling, nodes) {
    if (nodes.length > 0 && lang_1.isPresent(dom_adapter_1.DOM.parentElement(sibling))) {
        for (var i = 0; i < nodes.length; i++) {
            dom_adapter_1.DOM.insertBefore(sibling, nodes[i]);
        }
        dom_adapter_1.DOM.insertBefore(nodes[0], sibling);
    }
}
function moveChildNodes(source, target) {
    var currChild = dom_adapter_1.DOM.firstChild(source);
    while (lang_1.isPresent(currChild)) {
        var nextChild = dom_adapter_1.DOM.nextSibling(currChild);
        dom_adapter_1.DOM.appendChild(target, currChild);
        currChild = nextChild;
    }
}
function decoratePreventDefault(eventHandler) {
    return function (event) {
        var allowDefaultBehavior = eventHandler(event);
        if (!allowDefaultBehavior) {
            // TODO(tbosch): move preventDefault into event plugins...
            dom_adapter_1.DOM.preventDefault(event);
        }
    };
}

},{"../../profile/profile":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/profile/profile.js","../api":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/api.js","../view":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/view.js","../view_factory":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/view_factory.js","./dom_tokens":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/dom_tokens.js","./events/event_manager":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/events/event_manager.js","./shared_styles_host":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/shared_styles_host.js","./util":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/util.js","angular2/src/animate/animation_builder":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/animate/animation_builder.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/dom_tokens.js":[function(require,module,exports){
'use strict';var di_1 = require('angular2/src/core/di');
var lang_1 = require('angular2/src/core/facade/lang');
/**
 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
 *
 * Note: Document might not be available in the Application Context when Application and Rendering
 * Contexts are not the same (e.g. when running the application into a Web Worker).
 */
exports.DOCUMENT = lang_1.CONST_EXPR(new di_1.OpaqueToken('DocumentToken'));

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/events/event_manager.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var ng_zone_1 = require('angular2/src/core/zone/ng_zone');
var di_1 = require('angular2/src/core/di');
exports.EVENT_MANAGER_PLUGINS = lang_1.CONST_EXPR(new di_1.OpaqueToken("EventManagerPlugins"));
var EventManager = (function () {
    function EventManager(plugins, _zone) {
        var _this = this;
        this._zone = _zone;
        plugins.forEach(function (p) { return p.manager = _this; });
        this._plugins = collection_1.ListWrapper.reversed(plugins);
    }
    EventManager.prototype.addEventListener = function (element, eventName, handler) {
        var plugin = this._findPluginFor(eventName);
        plugin.addEventListener(element, eventName, handler);
    };
    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
        var plugin = this._findPluginFor(eventName);
        return plugin.addGlobalEventListener(target, eventName, handler);
    };
    EventManager.prototype.getZone = function () { return this._zone; };
    /** @internal */
    EventManager.prototype._findPluginFor = function (eventName) {
        var plugins = this._plugins;
        for (var i = 0; i < plugins.length; i++) {
            var plugin = plugins[i];
            if (plugin.supports(eventName)) {
                return plugin;
            }
        }
        throw new exceptions_1.BaseException("No event manager plugin found for event " + eventName);
    };
    EventManager = __decorate([
        di_1.Injectable(),
        __param(0, di_1.Inject(exports.EVENT_MANAGER_PLUGINS)), 
        __metadata('design:paramtypes', [Array, ng_zone_1.NgZone])
    ], EventManager);
    return EventManager;
})();
exports.EventManager = EventManager;
var EventManagerPlugin = (function () {
    function EventManagerPlugin() {
    }
    // That is equivalent to having supporting $event.target
    EventManagerPlugin.prototype.supports = function (eventName) { return false; };
    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) {
        throw "not implemented";
    };
    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
        throw "not implemented";
    };
    return EventManagerPlugin;
})();
exports.EventManagerPlugin = EventManagerPlugin;
var DomEventsPlugin = (function (_super) {
    __extends(DomEventsPlugin, _super);
    function DomEventsPlugin() {
        _super.apply(this, arguments);
    }
    // This plugin should come last in the list of plugins, because it accepts all
    // events.
    DomEventsPlugin.prototype.supports = function (eventName) { return true; };
    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
        var zone = this.manager.getZone();
        var outsideHandler = function (event) { return zone.run(function () { return handler(event); }); };
        this.manager.getZone().runOutsideAngular(function () { dom_adapter_1.DOM.on(element, eventName, outsideHandler); });
    };
    DomEventsPlugin.prototype.addGlobalEventListener = function (target, eventName, handler) {
        var element = dom_adapter_1.DOM.getGlobalEventTarget(target);
        var zone = this.manager.getZone();
        var outsideHandler = function (event) { return zone.run(function () { return handler(event); }); };
        return this.manager.getZone().runOutsideAngular(function () { return dom_adapter_1.DOM.onAndCancel(element, eventName, outsideHandler); });
    };
    DomEventsPlugin = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], DomEventsPlugin);
    return DomEventsPlugin;
})(EventManagerPlugin);
exports.DomEventsPlugin = DomEventsPlugin;

},{"angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/zone/ng_zone":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/zone/ng_zone.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/events/hammer_common.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var event_manager_1 = require('./event_manager');
var collection_1 = require('angular2/src/core/facade/collection');
var _eventNames = {
    // pan
    'pan': true,
    'panstart': true,
    'panmove': true,
    'panend': true,
    'pancancel': true,
    'panleft': true,
    'panright': true,
    'panup': true,
    'pandown': true,
    // pinch
    'pinch': true,
    'pinchstart': true,
    'pinchmove': true,
    'pinchend': true,
    'pinchcancel': true,
    'pinchin': true,
    'pinchout': true,
    // press
    'press': true,
    'pressup': true,
    // rotate
    'rotate': true,
    'rotatestart': true,
    'rotatemove': true,
    'rotateend': true,
    'rotatecancel': true,
    // swipe
    'swipe': true,
    'swipeleft': true,
    'swiperight': true,
    'swipeup': true,
    'swipedown': true,
    // tap
    'tap': true,
};
var HammerGesturesPluginCommon = (function (_super) {
    __extends(HammerGesturesPluginCommon, _super);
    function HammerGesturesPluginCommon() {
        _super.call(this);
    }
    HammerGesturesPluginCommon.prototype.supports = function (eventName) {
        eventName = eventName.toLowerCase();
        return collection_1.StringMapWrapper.contains(_eventNames, eventName);
    };
    return HammerGesturesPluginCommon;
})(event_manager_1.EventManagerPlugin);
exports.HammerGesturesPluginCommon = HammerGesturesPluginCommon;

},{"./event_manager":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/events/event_manager.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/events/hammer_gestures.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var hammer_common_1 = require('./hammer_common');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var di_1 = require('angular2/src/core/di');
var HammerGesturesPlugin = (function (_super) {
    __extends(HammerGesturesPlugin, _super);
    function HammerGesturesPlugin() {
        _super.apply(this, arguments);
    }
    HammerGesturesPlugin.prototype.supports = function (eventName) {
        if (!_super.prototype.supports.call(this, eventName))
            return false;
        if (!lang_1.isPresent(window['Hammer'])) {
            throw new exceptions_1.BaseException("Hammer.js is not loaded, can not bind " + eventName + " event");
        }
        return true;
    };
    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
        var zone = this.manager.getZone();
        eventName = eventName.toLowerCase();
        zone.runOutsideAngular(function () {
            // Creating the manager bind events, must be done outside of angular
            var mc = new Hammer(element);
            mc.get('pinch').set({ enable: true });
            mc.get('rotate').set({ enable: true });
            mc.on(eventName, function (eventObj) { zone.run(function () { handler(eventObj); }); });
        });
    };
    HammerGesturesPlugin = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], HammerGesturesPlugin);
    return HammerGesturesPlugin;
})(hammer_common_1.HammerGesturesPluginCommon);
exports.HammerGesturesPlugin = HammerGesturesPlugin;

},{"./hammer_common":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/events/hammer_common.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/events/key_events.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var lang_1 = require('angular2/src/core/facade/lang');
var collection_1 = require('angular2/src/core/facade/collection');
var event_manager_1 = require('./event_manager');
var di_1 = require('angular2/src/core/di');
var modifierKeys = ['alt', 'control', 'meta', 'shift'];
var modifierKeyGetters = {
    'alt': function (event) { return event.altKey; },
    'control': function (event) { return event.ctrlKey; },
    'meta': function (event) { return event.metaKey; },
    'shift': function (event) { return event.shiftKey; }
};
var KeyEventsPlugin = (function (_super) {
    __extends(KeyEventsPlugin, _super);
    function KeyEventsPlugin() {
        _super.call(this);
    }
    KeyEventsPlugin.prototype.supports = function (eventName) {
        return lang_1.isPresent(KeyEventsPlugin.parseEventName(eventName));
    };
    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
        var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
        var outsideHandler = KeyEventsPlugin.eventCallback(element, collection_1.StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());
        this.manager.getZone().runOutsideAngular(function () {
            dom_adapter_1.DOM.on(element, collection_1.StringMapWrapper.get(parsedEvent, 'domEventName'), outsideHandler);
        });
    };
    KeyEventsPlugin.parseEventName = function (eventName) {
        var parts = eventName.toLowerCase().split('.');
        var domEventName = parts.shift();
        if ((parts.length === 0) ||
            !(lang_1.StringWrapper.equals(domEventName, 'keydown') ||
                lang_1.StringWrapper.equals(domEventName, 'keyup'))) {
            return null;
        }
        var key = KeyEventsPlugin._normalizeKey(parts.pop());
        var fullKey = '';
        modifierKeys.forEach(function (modifierName) {
            if (collection_1.ListWrapper.contains(parts, modifierName)) {
                collection_1.ListWrapper.remove(parts, modifierName);
                fullKey += modifierName + '.';
            }
        });
        fullKey += key;
        if (parts.length != 0 || key.length === 0) {
            // returning null instead of throwing to let another plugin process the event
            return null;
        }
        var result = collection_1.StringMapWrapper.create();
        collection_1.StringMapWrapper.set(result, 'domEventName', domEventName);
        collection_1.StringMapWrapper.set(result, 'fullKey', fullKey);
        return result;
    };
    KeyEventsPlugin.getEventFullKey = function (event) {
        var fullKey = '';
        var key = dom_adapter_1.DOM.getEventKey(event);
        key = key.toLowerCase();
        if (lang_1.StringWrapper.equals(key, ' ')) {
            key = 'space'; // for readability
        }
        else if (lang_1.StringWrapper.equals(key, '.')) {
            key = 'dot'; // because '.' is used as a separator in event names
        }
        modifierKeys.forEach(function (modifierName) {
            if (modifierName != key) {
                var modifierGetter = collection_1.StringMapWrapper.get(modifierKeyGetters, modifierName);
                if (modifierGetter(event)) {
                    fullKey += modifierName + '.';
                }
            }
        });
        fullKey += key;
        return fullKey;
    };
    KeyEventsPlugin.eventCallback = function (element, fullKey, handler, zone) {
        return function (event) {
            if (lang_1.StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey)) {
                zone.run(function () { return handler(event); });
            }
        };
    };
    KeyEventsPlugin._normalizeKey = function (keyName) {
        // TODO: switch to a StringMap if the mapping grows too much
        switch (keyName) {
            case 'esc':
                return 'escape';
            default:
                return keyName;
        }
    };
    KeyEventsPlugin = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], KeyEventsPlugin);
    return KeyEventsPlugin;
})(event_manager_1.EventManagerPlugin);
exports.KeyEventsPlugin = KeyEventsPlugin;

},{"./event_manager":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/events/event_manager.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/shared_styles_host.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var di_1 = require('angular2/src/core/di');
var collection_1 = require('angular2/src/core/facade/collection');
var dom_tokens_1 = require('./dom_tokens');
var SharedStylesHost = (function () {
    function SharedStylesHost() {
        /** @internal */
        this._styles = [];
        /** @internal */
        this._stylesSet = new Set();
    }
    SharedStylesHost.prototype.addStyles = function (styles) {
        var _this = this;
        var additions = [];
        styles.forEach(function (style) {
            if (!collection_1.SetWrapper.has(_this._stylesSet, style)) {
                _this._stylesSet.add(style);
                _this._styles.push(style);
                additions.push(style);
            }
        });
        this.onStylesAdded(additions);
    };
    SharedStylesHost.prototype.onStylesAdded = function (additions) { };
    SharedStylesHost.prototype.getAllStyles = function () { return this._styles; };
    SharedStylesHost = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], SharedStylesHost);
    return SharedStylesHost;
})();
exports.SharedStylesHost = SharedStylesHost;
var DomSharedStylesHost = (function (_super) {
    __extends(DomSharedStylesHost, _super);
    function DomSharedStylesHost(doc) {
        _super.call(this);
        this._hostNodes = new Set();
        this._hostNodes.add(doc.head);
    }
    /** @internal */
    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
        for (var i = 0; i < styles.length; i++) {
            var style = styles[i];
            dom_adapter_1.DOM.appendChild(host, dom_adapter_1.DOM.createStyleElement(style));
        }
    };
    DomSharedStylesHost.prototype.addHost = function (hostNode) {
        this._addStylesToHost(this._styles, hostNode);
        this._hostNodes.add(hostNode);
    };
    DomSharedStylesHost.prototype.removeHost = function (hostNode) { collection_1.SetWrapper.delete(this._hostNodes, hostNode); };
    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
        var _this = this;
        this._hostNodes.forEach(function (hostNode) { _this._addStylesToHost(additions, hostNode); });
    };
    DomSharedStylesHost = __decorate([
        di_1.Injectable(),
        __param(0, di_1.Inject(dom_tokens_1.DOCUMENT)), 
        __metadata('design:paramtypes', [Object])
    ], DomSharedStylesHost);
    return DomSharedStylesHost;
})(SharedStylesHost);
exports.DomSharedStylesHost = DomSharedStylesHost;

},{"./dom_tokens":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/dom_tokens.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/util.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var CAMEL_CASE_REGEXP = /([A-Z])/g;
var DASH_CASE_REGEXP = /-([a-z])/g;
function camelCaseToDashCase(input) {
    return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
}
exports.camelCaseToDashCase = camelCaseToDashCase;
function dashCaseToCamelCase(input) {
    return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) { return m[1].toUpperCase(); });
}
exports.dashCaseToCamelCase = dashCaseToCamelCase;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/render.js":[function(require,module,exports){
'use strict';/**
 * @module
 * @description
 * This module provides advanced support for extending dom strategy.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(require('./dom/shared_styles_host'));
__export(require('./dom/dom_renderer'));
__export(require('./dom/dom_tokens'));
__export(require('./api'));

},{"./api":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/api.js","./dom/dom_renderer":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/dom_renderer.js","./dom/dom_tokens":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/dom_tokens.js","./dom/shared_styles_host":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/dom/shared_styles_host.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/view.js":[function(require,module,exports){
'use strict';var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var api_1 = require('./api');
var DefaultProtoViewRef = (function (_super) {
    __extends(DefaultProtoViewRef, _super);
    function DefaultProtoViewRef(cmds) {
        _super.call(this);
        this.cmds = cmds;
    }
    return DefaultProtoViewRef;
})(api_1.RenderProtoViewRef);
exports.DefaultProtoViewRef = DefaultProtoViewRef;
var DefaultRenderFragmentRef = (function (_super) {
    __extends(DefaultRenderFragmentRef, _super);
    function DefaultRenderFragmentRef(nodes) {
        _super.call(this);
        this.nodes = nodes;
    }
    return DefaultRenderFragmentRef;
})(api_1.RenderFragmentRef);
exports.DefaultRenderFragmentRef = DefaultRenderFragmentRef;
var DefaultRenderView = (function (_super) {
    __extends(DefaultRenderView, _super);
    function DefaultRenderView(fragments, boundTextNodes, boundElements, nativeShadowRoots, globalEventAdders, rootContentInsertionPoints) {
        _super.call(this);
        this.fragments = fragments;
        this.boundTextNodes = boundTextNodes;
        this.boundElements = boundElements;
        this.nativeShadowRoots = nativeShadowRoots;
        this.globalEventAdders = globalEventAdders;
        this.rootContentInsertionPoints = rootContentInsertionPoints;
        this.hydrated = false;
        this.eventDispatcher = null;
        this.globalEventRemovers = null;
    }
    DefaultRenderView.prototype.hydrate = function () {
        if (this.hydrated)
            throw new exceptions_1.BaseException('The view is already hydrated.');
        this.hydrated = true;
        this.globalEventRemovers = collection_1.ListWrapper.createFixedSize(this.globalEventAdders.length);
        for (var i = 0; i < this.globalEventAdders.length; i++) {
            this.globalEventRemovers[i] = this.globalEventAdders[i]();
        }
    };
    DefaultRenderView.prototype.dehydrate = function () {
        if (!this.hydrated)
            throw new exceptions_1.BaseException('The view is already dehydrated.');
        for (var i = 0; i < this.globalEventRemovers.length; i++) {
            this.globalEventRemovers[i]();
        }
        this.globalEventRemovers = null;
        this.hydrated = false;
    };
    DefaultRenderView.prototype.setEventDispatcher = function (dispatcher) { this.eventDispatcher = dispatcher; };
    DefaultRenderView.prototype.dispatchRenderEvent = function (boundElementIndex, eventName, event) {
        var allowDefaultBehavior = true;
        if (lang_1.isPresent(this.eventDispatcher)) {
            var locals = new collection_1.Map();
            locals.set('$event', event);
            allowDefaultBehavior =
                this.eventDispatcher.dispatchRenderEvent(boundElementIndex, eventName, locals);
        }
        return allowDefaultBehavior;
    };
    return DefaultRenderView;
})(api_1.RenderViewRef);
exports.DefaultRenderView = DefaultRenderView;

},{"./api":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/api.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/view_factory.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
var view_1 = require('./view');
function createRenderView(fragmentCmds, inplaceElement, nodeFactory) {
    var view;
    var eventDispatcher = function (boundElementIndex, eventName, event) {
        return view.dispatchRenderEvent(boundElementIndex, eventName, event);
    };
    var context = new BuildContext(eventDispatcher, nodeFactory, inplaceElement);
    context.build(fragmentCmds);
    var fragments = [];
    for (var i = 0; i < context.fragments.length; i++) {
        fragments.push(new view_1.DefaultRenderFragmentRef(context.fragments[i]));
    }
    view = new view_1.DefaultRenderView(fragments, context.boundTextNodes, context.boundElements, context.nativeShadowRoots, context.globalEventAdders, context.rootContentInsertionPoints);
    return view;
}
exports.createRenderView = createRenderView;
var BuildContext = (function () {
    function BuildContext(_eventDispatcher, factory, _inplaceElement) {
        this._eventDispatcher = _eventDispatcher;
        this.factory = factory;
        this._inplaceElement = _inplaceElement;
        this._builders = [];
        this.globalEventAdders = [];
        this.boundElements = [];
        this.boundTextNodes = [];
        this.nativeShadowRoots = [];
        this.fragments = [];
        this.rootContentInsertionPoints = [];
        this.componentCount = 0;
        this.isHost = lang_1.isPresent((_inplaceElement));
    }
    BuildContext.prototype.build = function (fragmentCmds) {
        this.enqueueFragmentBuilder(null, fragmentCmds);
        this._build(this._builders[0]);
    };
    BuildContext.prototype._build = function (builder) {
        this._builders = [];
        builder.build(this);
        var enqueuedBuilders = this._builders;
        for (var i = 0; i < enqueuedBuilders.length; i++) {
            this._build(enqueuedBuilders[i]);
        }
    };
    BuildContext.prototype.enqueueComponentBuilder = function (component) {
        this.componentCount++;
        this._builders.push(new RenderViewBuilder(component, null, this.factory.resolveComponentTemplate(component.cmd.templateId)));
    };
    BuildContext.prototype.enqueueFragmentBuilder = function (parentComponent, commands) {
        var rootNodes = [];
        this.fragments.push(rootNodes);
        this._builders.push(new RenderViewBuilder(parentComponent, rootNodes, commands));
    };
    BuildContext.prototype.consumeInplaceElement = function () {
        var result = this._inplaceElement;
        this._inplaceElement = null;
        return result;
    };
    BuildContext.prototype.addEventListener = function (boundElementIndex, target, eventName) {
        if (lang_1.isPresent(target)) {
            var handler = createEventHandler(boundElementIndex, target + ":" + eventName, this._eventDispatcher);
            this.globalEventAdders.push(createGlobalEventAdder(target, eventName, handler, this.factory));
        }
        else {
            var handler = createEventHandler(boundElementIndex, eventName, this._eventDispatcher);
            this.factory.on(this.boundElements[boundElementIndex], eventName, handler);
        }
    };
    return BuildContext;
})();
function createEventHandler(boundElementIndex, eventName, eventDispatcher) {
    return function ($event) { return eventDispatcher(boundElementIndex, eventName, $event); };
}
function createGlobalEventAdder(target, eventName, eventHandler, nodeFactory) {
    return function () { return nodeFactory.globalOn(target, eventName, eventHandler); };
}
var RenderViewBuilder = (function () {
    function RenderViewBuilder(parentComponent, fragmentRootNodes, commands) {
        this.parentComponent = parentComponent;
        this.fragmentRootNodes = fragmentRootNodes;
        this.commands = commands;
        var rootNodesParent = lang_1.isPresent(fragmentRootNodes) ? null : parentComponent.shadowRoot;
        this.parentStack = [rootNodesParent];
    }
    RenderViewBuilder.prototype.build = function (context) {
        for (var i = 0; i < this.commands.length; i++) {
            this.commands[i].visit(this, context);
        }
    };
    Object.defineProperty(RenderViewBuilder.prototype, "parent", {
        get: function () { return this.parentStack[this.parentStack.length - 1]; },
        enumerable: true,
        configurable: true
    });
    RenderViewBuilder.prototype.visitText = function (cmd, context) {
        var text = context.factory.createText(cmd.value);
        this._addChild(text, cmd.ngContentIndex, context);
        if (cmd.isBound) {
            context.boundTextNodes.push(text);
        }
        return null;
    };
    RenderViewBuilder.prototype.visitNgContent = function (cmd, context) {
        if (lang_1.isPresent(this.parentComponent)) {
            if (this.parentComponent.isRoot) {
                var insertionPoint = context.factory.createRootContentInsertionPoint();
                if (this.parent instanceof Component) {
                    context.factory.appendChild(this.parent.shadowRoot, insertionPoint);
                }
                else {
                    context.factory.appendChild(this.parent, insertionPoint);
                }
                context.rootContentInsertionPoints.push(insertionPoint);
            }
            else {
                var projectedNodes = this.parentComponent.project(cmd.index);
                for (var i = 0; i < projectedNodes.length; i++) {
                    var node = projectedNodes[i];
                    this._addChild(node, cmd.ngContentIndex, context);
                }
            }
        }
        return null;
    };
    RenderViewBuilder.prototype.visitBeginElement = function (cmd, context) {
        this.parentStack.push(this._beginElement(cmd, context));
        return null;
    };
    RenderViewBuilder.prototype.visitEndElement = function (context) {
        this._endElement();
        return null;
    };
    RenderViewBuilder.prototype.visitBeginComponent = function (cmd, context) {
        var el = this._beginElement(cmd, context);
        var root = el;
        if (cmd.nativeShadow) {
            root = context.factory.createShadowRoot(el, cmd.templateId);
            context.nativeShadowRoots.push(root);
        }
        var isRoot = context.componentCount === 0 && context.isHost;
        var component = new Component(el, root, cmd, isRoot);
        context.enqueueComponentBuilder(component);
        this.parentStack.push(component);
        return null;
    };
    RenderViewBuilder.prototype.visitEndComponent = function (context) {
        this._endElement();
        return null;
    };
    RenderViewBuilder.prototype.visitEmbeddedTemplate = function (cmd, context) {
        var el = context.factory.createTemplateAnchor(cmd.attrNameAndValues);
        this._addChild(el, cmd.ngContentIndex, context);
        context.boundElements.push(el);
        if (cmd.isMerged) {
            context.enqueueFragmentBuilder(this.parentComponent, cmd.children);
        }
        return null;
    };
    RenderViewBuilder.prototype._beginElement = function (cmd, context) {
        var el = context.consumeInplaceElement();
        if (lang_1.isPresent(el)) {
            context.factory.mergeElement(el, cmd.attrNameAndValues);
            this.fragmentRootNodes.push(el);
        }
        else {
            el = context.factory.createElement(cmd.name, cmd.attrNameAndValues);
            this._addChild(el, cmd.ngContentIndex, context);
        }
        if (cmd.isBound) {
            var boundElementIndex = context.boundElements.length;
            context.boundElements.push(el);
            for (var i = 0; i < cmd.eventTargetAndNames.length; i += 2) {
                var target = cmd.eventTargetAndNames[i];
                var eventName = cmd.eventTargetAndNames[i + 1];
                context.addEventListener(boundElementIndex, target, eventName);
            }
        }
        return el;
    };
    RenderViewBuilder.prototype._endElement = function () { this.parentStack.pop(); };
    RenderViewBuilder.prototype._addChild = function (node, ngContentIndex, context) {
        var parent = this.parent;
        if (lang_1.isPresent(parent)) {
            if (parent instanceof Component) {
                parent.addContentNode(ngContentIndex, node, context);
            }
            else {
                context.factory.appendChild(parent, node);
            }
        }
        else {
            this.fragmentRootNodes.push(node);
        }
    };
    return RenderViewBuilder;
})();
var Component = (function () {
    function Component(hostElement, shadowRoot, cmd, isRoot) {
        this.hostElement = hostElement;
        this.shadowRoot = shadowRoot;
        this.cmd = cmd;
        this.isRoot = isRoot;
        this.contentNodesByNgContentIndex = [];
    }
    Component.prototype.addContentNode = function (ngContentIndex, node, context) {
        if (lang_1.isBlank(ngContentIndex)) {
            if (this.cmd.nativeShadow) {
                context.factory.appendChild(this.hostElement, node);
            }
        }
        else {
            while (this.contentNodesByNgContentIndex.length <= ngContentIndex) {
                this.contentNodesByNgContentIndex.push([]);
            }
            this.contentNodesByNgContentIndex[ngContentIndex].push(node);
        }
    };
    Component.prototype.project = function (ngContentIndex) {
        return ngContentIndex < this.contentNodesByNgContentIndex.length ?
            this.contentNodesByNgContentIndex[ngContentIndex] :
            [];
    };
    return Component;
})();
function addAll(source, target) {
    for (var i = 0; i < source.length; i++) {
        target.push(source[i]);
    }
}

},{"./view":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/render/view.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/services.js":[function(require,module,exports){
'use strict';// Public API for Services
var app_root_url_1 = require('angular2/src/core/compiler/app_root_url');
exports.AppRootUrl = app_root_url_1.AppRootUrl;
var url_resolver_1 = require('angular2/src/core/compiler/url_resolver');
exports.UrlResolver = url_resolver_1.UrlResolver;
var title_1 = require('angular2/src/core/services/title');
exports.Title = title_1.Title;

},{"angular2/src/core/compiler/app_root_url":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/app_root_url.js","angular2/src/core/compiler/url_resolver":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/compiler/url_resolver.js","angular2/src/core/services/title":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/services/title.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/services/title.js":[function(require,module,exports){
'use strict';var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
/**
 * A service that can be used to get and set the title of a current HTML document.
 *
 * Since an Angular 2 application can't be bootstrapped on the entire HTML document (`<html>` tag)
 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
 * title value.
 */
var Title = (function () {
    function Title() {
    }
    /**
     * Get the title of the current HTML document.
     * @returns {string}
     */
    Title.prototype.getTitle = function () { return dom_adapter_1.DOM.getTitle(); };
    /**
     * Set the title of the current HTML document.
     * @param newTitle
     */
    Title.prototype.setTitle = function (newTitle) { dom_adapter_1.DOM.setTitle(newTitle); };
    return Title;
})();
exports.Title = Title;

},{"angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/testability/browser_testability.js":[function(require,module,exports){
'use strict';var testability_1 = require('angular2/src/core/testability/testability');
var lang_1 = require('angular2/src/core/facade/lang');
var PublicTestability = (function () {
    function PublicTestability(testability) {
        this._testability = testability;
    }
    PublicTestability.prototype.isStable = function () { return this._testability.isStable(); };
    PublicTestability.prototype.whenStable = function (callback) { this._testability.whenStable(callback); };
    PublicTestability.prototype.findBindings = function (using, provider, exactMatch) {
        return this.findProviders(using, provider, exactMatch);
    };
    PublicTestability.prototype.findProviders = function (using, provider, exactMatch) {
        return this._testability.findBindings(using, provider, exactMatch);
    };
    return PublicTestability;
})();
var BrowserGetTestability = (function () {
    function BrowserGetTestability() {
    }
    BrowserGetTestability.init = function () { testability_1.setTestabilityGetter(new BrowserGetTestability()); };
    BrowserGetTestability.prototype.addToWindow = function (registry) {
        lang_1.global.getAngularTestability = function (elem, findInAncestors) {
            if (findInAncestors === void 0) { findInAncestors = true; }
            var testability = registry.findTestabilityInTree(elem, findInAncestors);
            if (testability == null) {
                throw new Error('Could not find testability for element.');
            }
            return new PublicTestability(testability);
        };
        lang_1.global.getAllAngularTestabilities = function () {
            var testabilities = registry.getAllTestabilities();
            return testabilities.map(function (testability) { return new PublicTestability(testability); });
        };
    };
    return BrowserGetTestability;
})();
exports.BrowserGetTestability = BrowserGetTestability;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js","angular2/src/core/testability/testability":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/testability/testability.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/testability/testability.js":[function(require,module,exports){
'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = require('angular2/src/core/di');
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var exceptions_1 = require('angular2/src/core/facade/exceptions');
var ng_zone_1 = require('../zone/ng_zone');
var async_1 = require('angular2/src/core/facade/async');
/**
 * The Testability service provides testing hooks that can be accessed from
 * the browser and by services such as Protractor. Each bootstrapped Angular
 * application on the page will have an instance of Testability.
 */
var Testability = (function () {
    function Testability(_ngZone) {
        /** @internal */
        this._pendingCount = 0;
        /** @internal */
        this._callbacks = [];
        /** @internal */
        this._isAngularEventPending = false;
        this._watchAngularEvents(_ngZone);
    }
    /** @internal */
    Testability.prototype._watchAngularEvents = function (_ngZone) {
        var _this = this;
        _ngZone.overrideOnTurnStart(function () { _this._isAngularEventPending = true; });
        _ngZone.overrideOnEventDone(function () {
            _this._isAngularEventPending = false;
            _this._runCallbacksIfReady();
        }, true);
    };
    Testability.prototype.increasePendingRequestCount = function () {
        this._pendingCount += 1;
        return this._pendingCount;
    };
    Testability.prototype.decreasePendingRequestCount = function () {
        this._pendingCount -= 1;
        if (this._pendingCount < 0) {
            throw new exceptions_1.BaseException('pending async requests below zero');
        }
        this._runCallbacksIfReady();
        return this._pendingCount;
    };
    Testability.prototype.isStable = function () { return this._pendingCount == 0 && !this._isAngularEventPending; };
    /** @internal */
    Testability.prototype._runCallbacksIfReady = function () {
        var _this = this;
        if (!this.isStable()) {
            return; // Not ready
        }
        // Schedules the call backs in a new frame so that it is always async.
        async_1.PromiseWrapper.resolve(null).then(function (_) {
            while (_this._callbacks.length !== 0) {
                (_this._callbacks.pop())();
            }
        });
    };
    Testability.prototype.whenStable = function (callback) {
        this._callbacks.push(callback);
        this._runCallbacksIfReady();
    };
    Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
    // This only accounts for ngZone, and not pending counts. Use `whenStable` to
    // check for stability.
    Testability.prototype.isAngularEventPending = function () { return this._isAngularEventPending; };
    Testability.prototype.findBindings = function (using, provider, exactMatch) {
        // TODO(juliemr): implement.
        return [];
    };
    Testability.prototype.findProviders = function (using, provider, exactMatch) {
        // TODO(juliemr): implement.
        return [];
    };
    Testability = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [ng_zone_1.NgZone])
    ], Testability);
    return Testability;
})();
exports.Testability = Testability;
var TestabilityRegistry = (function () {
    function TestabilityRegistry() {
        /** @internal */
        this._applications = new collection_1.Map();
        testabilityGetter.addToWindow(this);
    }
    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
        this._applications.set(token, testability);
    };
    TestabilityRegistry.prototype.getAllTestabilities = function () { return collection_1.MapWrapper.values(this._applications); };
    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
        if (findInAncestors === void 0) { findInAncestors = true; }
        if (elem == null) {
            return null;
        }
        if (this._applications.has(elem)) {
            return this._applications.get(elem);
        }
        else if (!findInAncestors) {
            return null;
        }
        if (dom_adapter_1.DOM.isShadowRoot(elem)) {
            return this.findTestabilityInTree(dom_adapter_1.DOM.getHost(elem));
        }
        return this.findTestabilityInTree(dom_adapter_1.DOM.parentElement(elem));
    };
    TestabilityRegistry = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], TestabilityRegistry);
    return TestabilityRegistry;
})();
exports.TestabilityRegistry = TestabilityRegistry;
var NoopGetTestability = (function () {
    function NoopGetTestability() {
    }
    NoopGetTestability.prototype.addToWindow = function (registry) { };
    NoopGetTestability = __decorate([
        lang_1.CONST(), 
        __metadata('design:paramtypes', [])
    ], NoopGetTestability);
    return NoopGetTestability;
})();
function setTestabilityGetter(getter) {
    testabilityGetter = getter;
}
exports.setTestabilityGetter = setTestabilityGetter;
var testabilityGetter = lang_1.CONST_EXPR(new NoopGetTestability());

},{"../zone/ng_zone":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/zone/ng_zone.js","angular2/src/core/di":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/di.js","angular2/src/core/dom/dom_adapter":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/dom/dom_adapter.js","angular2/src/core/facade/async":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/async.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/exceptions":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/exceptions.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/util.js":[function(require,module,exports){
'use strict';// Public API for util
var decorators_1 = require('./util/decorators');
exports.Class = decorators_1.Class;

},{"./util/decorators":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/util/decorators.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/util/decorators.js":[function(require,module,exports){
'use strict';var lang_1 = require('angular2/src/core/facade/lang');
function extractAnnotation(annotation) {
    if (lang_1.isFunction(annotation) && annotation.hasOwnProperty('annotation')) {
        // it is a decorator, extract annotation
        annotation = annotation.annotation;
    }
    return annotation;
}
function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
        fnOrArray === Number || fnOrArray === Array) {
        throw new Error("Can not use native " + lang_1.stringify(fnOrArray) + " as constructor");
    }
    if (lang_1.isFunction(fnOrArray)) {
        return fnOrArray;
    }
    else if (fnOrArray instanceof Array) {
        var annotations = fnOrArray;
        var fn = fnOrArray[fnOrArray.length - 1];
        if (!lang_1.isFunction(fn)) {
            throw new Error("Last position of Class method array must be Function in key " + key + " was '" + lang_1.stringify(fn) + "'");
        }
        var annoLength = annotations.length - 1;
        if (annoLength != fn.length) {
            throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + lang_1.stringify(fn));
        }
        var paramsAnnotations = [];
        for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
            var paramAnnotations = [];
            paramsAnnotations.push(paramAnnotations);
            var annotation = annotations[i];
            if (annotation instanceof Array) {
                for (var j = 0; j < annotation.length; j++) {
                    paramAnnotations.push(extractAnnotation(annotation[j]));
                }
            }
            else if (lang_1.isFunction(annotation)) {
                paramAnnotations.push(extractAnnotation(annotation));
            }
            else {
                paramAnnotations.push(annotation);
            }
        }
        Reflect.defineMetadata('parameters', paramsAnnotations, fn);
        return fn;
    }
    else {
        throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + lang_1.stringify(fnOrArray) + "'");
    }
}
/**
 * Provides a way for expressing ES6 classes with parameter annotations in ES5.
 *
 * ## Basic Example
 *
 * ```
 * var Greeter = ng.Class({
 *   constructor: function(name) {
 *     this.name = name;
 *   },
 *
 *   greet: function() {
 *     alert('Hello ' + this.name + '!');
 *   }
 * });
 * ```
 *
 * is equivalent to ES6:
 *
 * ```
 * class Greeter {
 *   constructor(name) {
 *     this.name = name;
 *   }
 *
 *   greet() {
 *     alert('Hello ' + this.name + '!');
 *   }
 * }
 * ```
 *
 * or equivalent to ES5:
 *
 * ```
 * var Greeter = function (name) {
 *   this.name = name;
 * }
 *
 * Greeter.prototype.greet = function () {
 *   alert('Hello ' + this.name + '!');
 * }
 * ```
 *
 * ## Example with parameter annotations
 *
 * ```
 * var MyService = ng.Class({
 *   constructor: [String, [new Query(), QueryList], function(name, queryList) {
 *     ...
 *   }]
 * });
 * ```
 *
 * is equivalent to ES6:
 *
 * ```
 * class MyService {
 *   constructor(name: string, @Query() queryList: QueryList) {
 *     ...
 *   }
 * }
 * ```
 *
 * ## Example with inheritance
 *
 * ```
 * var Shape = ng.Class({
 *   constructor: (color) {
 *     this.color = color;
 *   }
 * });
 *
 * var Square = ng.Class({
 *   extends: Shape,
 *   constructor: function(color, size) {
 *     Shape.call(this, color);
 *     this.size = size;
 *   }
 * });
 * ```
 */
function Class(clsDef) {
    var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
    var proto = constructor.prototype;
    if (clsDef.hasOwnProperty('extends')) {
        if (lang_1.isFunction(clsDef.extends)) {
            constructor.prototype = proto =
                Object.create(clsDef.extends.prototype);
        }
        else {
            throw new Error("Class definition 'extends' property must be a constructor function was: " + lang_1.stringify(clsDef.extends));
        }
    }
    for (var key in clsDef) {
        if (key != 'extends' && key != 'prototype' && clsDef.hasOwnProperty(key)) {
            proto[key] = applyParams(clsDef[key], key);
        }
    }
    if (this && this.annotations instanceof Array) {
        Reflect.defineMetadata('annotations', this.annotations, constructor);
    }
    return constructor;
}
exports.Class = Class;
var Reflect = lang_1.global.Reflect;
if (!(Reflect && Reflect.getMetadata)) {
    throw 'reflect-metadata shim is required when using class decorators';
}
function makeDecorator(annotationCls, chainFn) {
    if (chainFn === void 0) { chainFn = null; }
    function DecoratorFactory(objOrType) {
        var annotationInstance = new annotationCls(objOrType);
        if (this instanceof annotationCls) {
            return annotationInstance;
        }
        else {
            var chainAnnotation = lang_1.isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
            chainAnnotation.push(annotationInstance);
            var TypeDecorator = function TypeDecorator(cls) {
                var annotations = Reflect.getOwnMetadata('annotations', cls);
                annotations = annotations || [];
                annotations.push(annotationInstance);
                Reflect.defineMetadata('annotations', annotations, cls);
                return cls;
            };
            TypeDecorator.annotations = chainAnnotation;
            TypeDecorator.Class = Class;
            if (chainFn)
                chainFn(TypeDecorator);
            return TypeDecorator;
        }
    }
    DecoratorFactory.prototype = Object.create(annotationCls.prototype);
    return DecoratorFactory;
}
exports.makeDecorator = makeDecorator;
function makeParamDecorator(annotationCls) {
    function ParamDecoratorFactory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        var annotationInstance = Object.create(annotationCls.prototype);
        annotationCls.apply(annotationInstance, args);
        if (this instanceof annotationCls) {
            return annotationInstance;
        }
        else {
            ParamDecorator.annotation = annotationInstance;
            return ParamDecorator;
        }
        function ParamDecorator(cls, unusedKey, index) {
            var parameters = Reflect.getMetadata('parameters', cls);
            parameters = parameters || [];
            // there might be gaps if some in between parameters do not have annotations.
            // we pad with nulls.
            while (parameters.length <= index) {
                parameters.push(null);
            }
            parameters[index] = parameters[index] || [];
            var annotationsForParam = parameters[index];
            annotationsForParam.push(annotationInstance);
            Reflect.defineMetadata('parameters', parameters, cls);
            return cls;
        }
    }
    ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype);
    return ParamDecoratorFactory;
}
exports.makeParamDecorator = makeParamDecorator;
function makePropDecorator(decoratorCls) {
    function PropDecoratorFactory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        var decoratorInstance = Object.create(decoratorCls.prototype);
        decoratorCls.apply(decoratorInstance, args);
        if (this instanceof decoratorCls) {
            return decoratorInstance;
        }
        else {
            return function PropDecorator(target, name) {
                var meta = Reflect.getOwnMetadata('propMetadata', target.constructor);
                meta = meta || {};
                meta[name] = meta[name] || [];
                meta[name].unshift(decoratorInstance);
                Reflect.defineMetadata('propMetadata', meta, target.constructor);
            };
        }
    }
    PropDecoratorFactory.prototype = Object.create(decoratorCls.prototype);
    return PropDecoratorFactory;
}
exports.makePropDecorator = makePropDecorator;

},{"angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/zone.js":[function(require,module,exports){
'use strict';// Public API for Zone
var ng_zone_1 = require('./zone/ng_zone');
exports.NgZone = ng_zone_1.NgZone;

},{"./zone/ng_zone":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/zone/ng_zone.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/zone/ng_zone.js":[function(require,module,exports){
'use strict';var collection_1 = require('angular2/src/core/facade/collection');
var lang_1 = require('angular2/src/core/facade/lang');
var profile_1 = require('../profile/profile');
/**
 * An injectable service for executing work inside or outside of the Angular zone.
 *
 * The most common use of this service is to optimize performance when starting a work consisting of
 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
 * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
 * can reenter the Angular zone via {@link #run}.
 *
 * <!-- TODO: add/fix links to:
 *   - docs explaining zones and the use of zones in Angular and change-detection
 *   - link to runOutsideAngular/run (throughout this file!)
 *   -->
 *
 * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
 * ```
 * import {Component, View, NgIf, NgZone} from 'angular2/angular2';
 *
 * @Component({
 *   selector: 'ng-zone-demo'.
 *   template: `
 *     <h2>Demo: NgZone</h2>
 *
 *     <p>Progress: {{progress}}%</p>
 *     <p *ng-if="progress >= 100">Done processing {{label}} of Angular zone!</p>
 *
 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
 *   `,
 *   directives: [NgIf]
 * })
 * export class NgZoneDemo {
 *   progress: number = 0;
 *   label: string;
 *
 *   constructor(private _ngZone: NgZone) {}
 *
 *   // Loop inside the Angular zone
 *   // so the UI DOES refresh after each setTimeout cycle
 *   processWithinAngularZone() {
 *     this.label = 'inside';
 *     this.progress = 0;
 *     this._increaseProgress(() => console.log('Inside Done!'));
 *   }
 *
 *   // Loop outside of the Angular zone
 *   // so the UI DOES NOT refresh after each setTimeout cycle
 *   processOutsideOfAngularZone() {
 *     this.label = 'outside';
 *     this.progress = 0;
 *     this._ngZone.runOutsideAngular(() => {
 *       this._increaseProgress(() => {
 *       // reenter the Angular zone and display done
 *       this._ngZone.run(() => {console.log('Outside Done!') });
 *     }}));
 *   }
 *
 *
 *   _increaseProgress(doneCallback: () => void) {
 *     this.progress += 1;
 *     console.log(`Current progress: ${this.progress}%`);
 *
 *     if (this.progress < 100) {
 *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
 *     } else {
 *       doneCallback();
 *     }
 *   }
 * }
 * ```
 */
var NgZone = (function () {
    /**
     * @param {bool} enableLongStackTrace whether to enable long stack trace. They should only be
     *               enabled in development mode as they significantly impact perf.
     */
    function NgZone(_a) {
        var enableLongStackTrace = _a.enableLongStackTrace;
        /** @internal */
        this._runScope = profile_1.wtfCreateScope("NgZone#run()");
        /** @internal */
        this._microtaskScope = profile_1.wtfCreateScope("NgZone#microtask()");
        // Number of microtasks pending from _innerZone (& descendants)
        /** @internal */
        this._pendingMicrotasks = 0;
        // Whether some code has been executed in the _innerZone (& descendants) in the current turn
        /** @internal */
        this._hasExecutedCodeInInnerZone = false;
        // run() call depth in _mountZone. 0 at the end of a macrotask
        // zone.run(() => {         // top-level call
        //   zone.run(() => {});    // nested call -> in-turn
        // });
        /** @internal */
        this._nestedRun = 0;
        /** @internal */
        this._inVmTurnDone = false;
        /** @internal */
        this._pendingTimeouts = [];
        if (lang_1.global.zone) {
            this._disabled = false;
            this._mountZone = lang_1.global.zone;
            this._innerZone = this._createInnerZone(this._mountZone, enableLongStackTrace);
        }
        else {
            this._disabled = true;
            this._mountZone = null;
        }
    }
    /**
     * Sets the zone hook that is called just before a browser task that is handled by Angular
     * executes.
     *
     * The hook is called once per browser task that is handled by Angular.
     *
     * Setting the hook overrides any previously set hook.
     */
    NgZone.prototype.overrideOnTurnStart = function (onTurnStartHook) {
        this._onTurnStart = lang_1.normalizeBlank(onTurnStartHook);
    };
    /**
     * Sets the zone hook that is called immediately after Angular zone is done processing the current
     * task and any microtasks scheduled from that task.
     *
     * This is where we typically do change-detection.
     *
     * The hook is called once per browser task that is handled by Angular.
     *
     * Setting the hook overrides any previously set hook.
     */
    NgZone.prototype.overrideOnTurnDone = function (onTurnDoneHook) {
        this._onTurnDone = lang_1.normalizeBlank(onTurnDoneHook);
    };
    /**
     * Sets the zone hook that is called immediately after the `onTurnDone` callback is called and any
     * microstasks scheduled from within that callback are drained.
     *
     * `onEventDoneFn` is executed outside Angular zone, which means that we will no longer attempt to
     * sync the UI with any model changes that occur within this callback.
     *
     * This hook is useful for validating application state (e.g. in a test).
     *
     * Setting the hook overrides any previously set hook.
     */
    NgZone.prototype.overrideOnEventDone = function (onEventDoneFn, opt_waitForAsync) {
        var _this = this;
        if (opt_waitForAsync === void 0) { opt_waitForAsync = false; }
        var normalizedOnEventDone = lang_1.normalizeBlank(onEventDoneFn);
        if (opt_waitForAsync) {
            this._onEventDone = function () {
                if (!_this._pendingTimeouts.length) {
                    normalizedOnEventDone();
                }
            };
        }
        else {
            this._onEventDone = normalizedOnEventDone;
        }
    };
    /**
     * Sets the zone hook that is called when an error is thrown in the Angular zone.
     *
     * Setting the hook overrides any previously set hook.
     */
    NgZone.prototype.overrideOnErrorHandler = function (errorHandler) {
        this._onErrorHandler = lang_1.normalizeBlank(errorHandler);
    };
    /**
     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
     * the function.
     *
     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * within the Angular zone.
     */
    NgZone.prototype.run = function (fn) {
        if (this._disabled) {
            return fn();
        }
        else {
            var s = this._runScope();
            try {
                return this._innerZone.run(fn);
            }
            finally {
                profile_1.wtfLeave(s);
            }
        }
    };
    /**
     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
     * the function.
     *
     * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * outside of the Angular zone.
     *
     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
     */
    NgZone.prototype.runOutsideAngular = function (fn) {
        if (this._disabled) {
            return fn();
        }
        else {
            return this._mountZone.run(fn);
        }
    };
    /** @internal */
    NgZone.prototype._createInnerZone = function (zone, enableLongStackTrace) {
        var microtaskScope = this._microtaskScope;
        var ngZone = this;
        var errorHandling;
        if (enableLongStackTrace) {
            errorHandling = collection_1.StringMapWrapper.merge(Zone.longStackTraceZone, { onError: function (e) { ngZone._onError(this, e); } });
        }
        else {
            errorHandling = { onError: function (e) { ngZone._onError(this, e); } };
        }
        return zone.fork(errorHandling)
            .fork({
            '$run': function (parentRun) {
                return function () {
                    try {
                        ngZone._nestedRun++;
                        if (!ngZone._hasExecutedCodeInInnerZone) {
                            ngZone._hasExecutedCodeInInnerZone = true;
                            if (ngZone._onTurnStart) {
                                parentRun.call(ngZone._innerZone, ngZone._onTurnStart);
                            }
                        }
                        return parentRun.apply(this, arguments);
                    }
                    finally {
                        ngZone._nestedRun--;
                        // If there are no more pending microtasks, we are at the end of a VM turn (or in
                        // onTurnStart)
                        // _nestedRun will be 0 at the end of a macrotasks (it could be > 0 when there are
                        // nested calls
                        // to run()).
                        if (ngZone._pendingMicrotasks == 0 && ngZone._nestedRun == 0 &&
                            !this._inVmTurnDone) {
                            if (ngZone._onTurnDone && ngZone._hasExecutedCodeInInnerZone) {
                                try {
                                    this._inVmTurnDone = true;
                                    parentRun.call(ngZone._innerZone, ngZone._onTurnDone);
                                }
                                finally {
                                    this._inVmTurnDone = false;
                                    ngZone._hasExecutedCodeInInnerZone = false;
                                }
                            }
                            if (ngZone._pendingMicrotasks === 0 && lang_1.isPresent(ngZone._onEventDone)) {
                                ngZone.runOutsideAngular(ngZone._onEventDone);
                            }
                        }
                    }
                };
            },
            '$scheduleMicrotask': function (parentScheduleMicrotask) {
                return function (fn) {
                    ngZone._pendingMicrotasks++;
                    var microtask = function () {
                        var s = microtaskScope();
                        try {
                            fn();
                        }
                        finally {
                            ngZone._pendingMicrotasks--;
                            profile_1.wtfLeave(s);
                        }
                    };
                    parentScheduleMicrotask.call(this, microtask);
                };
            },
            '$setTimeout': function (parentSetTimeout) {
                return function (fn, delay) {
                    var args = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        args[_i - 2] = arguments[_i];
                    }
                    var id;
                    var cb = function () {
                        fn();
                        collection_1.ListWrapper.remove(ngZone._pendingTimeouts, id);
                    };
                    id = parentSetTimeout(cb, delay, args);
                    ngZone._pendingTimeouts.push(id);
                    return id;
                };
            },
            '$clearTimeout': function (parentClearTimeout) {
                return function (id) {
                    parentClearTimeout(id);
                    collection_1.ListWrapper.remove(ngZone._pendingTimeouts, id);
                };
            },
            _innerZone: true
        });
    };
    /** @internal */
    NgZone.prototype._onError = function (zone, e) {
        if (lang_1.isPresent(this._onErrorHandler)) {
            var trace = [lang_1.normalizeBlank(e.stack)];
            while (zone && zone.constructedAtException) {
                trace.push(zone.constructedAtException.get());
                zone = zone.parent;
            }
            this._onErrorHandler(e, trace);
        }
        else {
            console.log('## _onError ##');
            console.log(e.stack);
            throw e;
        }
    };
    return NgZone;
})();
exports.NgZone = NgZone;

},{"../profile/profile":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/profile/profile.js","angular2/src/core/facade/collection":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/collection.js","angular2/src/core/facade/lang":"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/core/facade/lang.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/angular2/src/transform/template_compiler/change_detector_codegen.js":[function(require,module,exports){
'use strict';// Note: This class is only here so that we can reference it from TypeScript code.
// The actual implementation lives under modules_dart.
// TODO(tbosch): Move the corresponding code into angular2/src/core/compiler once
// the new compiler is done.
var Codegen = (function () {
    function Codegen(moduleAlias) {
    }
    Codegen.prototype.generate = function (typeName, changeDetectorTypeName, def) {
        throw "Not implemented in JS";
    };
    Codegen.prototype.toString = function () { throw "Not implemented in JS"; };
    return Codegen;
})();
exports.Codegen = Codegen;

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/dist/js/npm.js":[function(require,module,exports){
// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.
require('../../js/transition.js')
require('../../js/alert.js')
require('../../js/button.js')
require('../../js/carousel.js')
require('../../js/collapse.js')
require('../../js/dropdown.js')
require('../../js/modal.js')
require('../../js/tooltip.js')
require('../../js/popover.js')
require('../../js/scrollspy.js')
require('../../js/tab.js')
require('../../js/affix.js')
},{"../../js/affix.js":"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/affix.js","../../js/alert.js":"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/alert.js","../../js/button.js":"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/button.js","../../js/carousel.js":"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/carousel.js","../../js/collapse.js":"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/collapse.js","../../js/dropdown.js":"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/dropdown.js","../../js/modal.js":"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/modal.js","../../js/popover.js":"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/popover.js","../../js/scrollspy.js":"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/scrollspy.js","../../js/tab.js":"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/tab.js","../../js/tooltip.js":"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/tooltip.js","../../js/transition.js":"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/transition.js"}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/affix.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: affix.js v3.3.5
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      = null
    this.unpin        = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.3.5'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing   = this.affixed == null
    var colliderTop    = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height       = this.$element.height()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e         = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/alert.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: alert.js v3.3.5
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.5'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/button.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: button.js v3.3.5
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.3.5'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target)
      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]'))) e.preventDefault()
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/carousel.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: carousel.js v3.3.5
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      = null
    this.sliding     = null
    this.interval    = null
    this.$active     = null
    this.$items      = null

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.3.5'

  Carousel.TRANSITION_DURATION = 600

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  }

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active)
    var willWrap = (direction == 'prev' && activeIndex === 0)
                || (direction == 'next' && activeIndex == (this.$items.length - 1))
    if (willWrap && !this.options.wrap) return active
    var delta = direction == 'prev' ? -1 : 1
    var itemIndex = (activeIndex + delta) % this.$items.length
    return this.$items.eq(itemIndex)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || this.getItemForDirection(type, $active)
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var that      = this

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var href
    var $this   = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  }

  $(document)
    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/collapse.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: collapse.js v3.3.5
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.5'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/dropdown.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: dropdown.js v3.3.5
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.5'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger('shown.bs.dropdown', relatedTarget)
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/modal.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: modal.js v3.3.5
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options             = options
    this.$body               = $(document.body)
    this.$element            = $(element)
    this.$dialog             = this.$element.find('.modal-dialog')
    this.$backdrop           = null
    this.isShown             = null
    this.originalBodyPad     = null
    this.scrollbarWidth      = 0
    this.ignoreBackdropClick = false

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.3.5'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element.addClass('in')

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$dialog // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $(document.createElement('div'))
        .addClass('modal-backdrop ' + animate)
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus()
          : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad)
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/popover.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: popover.js v3.3.5
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.3.5'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/scrollspy.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.5
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.3.5'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/tab.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tab.js v3.3.5
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.5'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/tooltip.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: tooltip.js v3.3.5
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.3.5'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element
        .removeAttr('aria-describedby')
        .trigger('hidden.bs.' + that.type)
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/bootstrap/js/transition.js":[function(require,module,exports){
/* ========================================================================
 * Bootstrap: transition.js v3.3.5
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

},{}],"/Users/dave/lh2/angular2/test/trjournal/node_modules/firebase/lib/firebase-web.js":[function(require,module,exports){
/*! @license Firebase v2.3.1
    License: https://www.firebase.com/terms/terms-of-service.html */
(function() {var g,aa=this;function n(a){return void 0!==a}function ba(){}function ca(a){a.ub=function(){return a.uf?a.uf:a.uf=new a}}
function da(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function ea(a){return"array"==da(a)}function fa(a){var b=da(a);return"array"==b||"object"==b&&"number"==typeof a.length}function p(a){return"string"==typeof a}function ga(a){return"number"==typeof a}function ha(a){return"function"==da(a)}function ia(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}function ja(a,b,c){return a.call.apply(a.bind,arguments)}
function ka(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function q(a,b,c){q=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ja:ka;return q.apply(null,arguments)}var la=Date.now||function(){return+new Date};
function ma(a,b){function c(){}c.prototype=b.prototype;a.bh=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Yg=function(a,c,f){for(var h=Array(arguments.length-2),k=2;k<arguments.length;k++)h[k-2]=arguments[k];return b.prototype[c].apply(a,h)}};function r(a,b){for(var c in a)b.call(void 0,a[c],c,a)}function na(a,b){var c={},d;for(d in a)c[d]=b.call(void 0,a[d],d,a);return c}function oa(a,b){for(var c in a)if(!b.call(void 0,a[c],c,a))return!1;return!0}function pa(a){var b=0,c;for(c in a)b++;return b}function qa(a){for(var b in a)return b}function ra(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function sa(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function ta(a,b){for(var c in a)if(a[c]==b)return!0;return!1}
function ua(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d}function va(a,b){var c=ua(a,b,void 0);return c&&a[c]}function wa(a){for(var b in a)return!1;return!0}function xa(a){var b={},c;for(c in a)b[c]=a[c];return b}var ya="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
function za(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<ya.length;f++)c=ya[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Aa(a){a=String(a);if(/^\s*$/.test(a)?0:/^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g,"@").replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g,"")))try{return eval("("+a+")")}catch(b){}throw Error("Invalid JSON string: "+a);}function Ba(){this.Sd=void 0}
function Ca(a,b,c){switch(typeof b){case "string":Da(b,c);break;case "number":c.push(isFinite(b)&&!isNaN(b)?b:"null");break;case "boolean":c.push(b);break;case "undefined":c.push("null");break;case "object":if(null==b){c.push("null");break}if(ea(b)){var d=b.length;c.push("[");for(var e="",f=0;f<d;f++)c.push(e),e=b[f],Ca(a,a.Sd?a.Sd.call(b,String(f),e):e,c),e=",";c.push("]");break}c.push("{");d="";for(f in b)Object.prototype.hasOwnProperty.call(b,f)&&(e=b[f],"function"!=typeof e&&(c.push(d),Da(f,c),
c.push(":"),Ca(a,a.Sd?a.Sd.call(b,f,e):e,c),d=","));c.push("}");break;case "function":break;default:throw Error("Unknown type: "+typeof b);}}var Ea={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},Fa=/\uffff/.test("\uffff")?/[\\\"\x00-\x1f\x7f-\uffff]/g:/[\\\"\x00-\x1f\x7f-\xff]/g;
function Da(a,b){b.push('"',a.replace(Fa,function(a){if(a in Ea)return Ea[a];var b=a.charCodeAt(0),e="\\u";16>b?e+="000":256>b?e+="00":4096>b&&(e+="0");return Ea[a]=e+b.toString(16)}),'"')};function Ga(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^la()).toString(36)};var Ha;a:{var Ia=aa.navigator;if(Ia){var Ja=Ia.userAgent;if(Ja){Ha=Ja;break a}}Ha=""};function Ka(){this.Va=-1};function La(){this.Va=-1;this.Va=64;this.N=[];this.me=[];this.Wf=[];this.Ld=[];this.Ld[0]=128;for(var a=1;a<this.Va;++a)this.Ld[a]=0;this.de=this.ac=0;this.reset()}ma(La,Ka);La.prototype.reset=function(){this.N[0]=1732584193;this.N[1]=4023233417;this.N[2]=2562383102;this.N[3]=271733878;this.N[4]=3285377520;this.de=this.ac=0};
function Ma(a,b,c){c||(c=0);var d=a.Wf;if(p(b))for(var e=0;16>e;e++)d[e]=b.charCodeAt(c)<<24|b.charCodeAt(c+1)<<16|b.charCodeAt(c+2)<<8|b.charCodeAt(c+3),c+=4;else for(e=0;16>e;e++)d[e]=b[c]<<24|b[c+1]<<16|b[c+2]<<8|b[c+3],c+=4;for(e=16;80>e;e++){var f=d[e-3]^d[e-8]^d[e-14]^d[e-16];d[e]=(f<<1|f>>>31)&4294967295}b=a.N[0];c=a.N[1];for(var h=a.N[2],k=a.N[3],l=a.N[4],m,e=0;80>e;e++)40>e?20>e?(f=k^c&(h^k),m=1518500249):(f=c^h^k,m=1859775393):60>e?(f=c&h|k&(c|h),m=2400959708):(f=c^h^k,m=3395469782),f=(b<<
5|b>>>27)+f+l+m+d[e]&4294967295,l=k,k=h,h=(c<<30|c>>>2)&4294967295,c=b,b=f;a.N[0]=a.N[0]+b&4294967295;a.N[1]=a.N[1]+c&4294967295;a.N[2]=a.N[2]+h&4294967295;a.N[3]=a.N[3]+k&4294967295;a.N[4]=a.N[4]+l&4294967295}
La.prototype.update=function(a,b){if(null!=a){n(b)||(b=a.length);for(var c=b-this.Va,d=0,e=this.me,f=this.ac;d<b;){if(0==f)for(;d<=c;)Ma(this,a,d),d+=this.Va;if(p(a))for(;d<b;){if(e[f]=a.charCodeAt(d),++f,++d,f==this.Va){Ma(this,e);f=0;break}}else for(;d<b;)if(e[f]=a[d],++f,++d,f==this.Va){Ma(this,e);f=0;break}}this.ac=f;this.de+=b}};var u=Array.prototype,Na=u.indexOf?function(a,b,c){return u.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(p(a))return p(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},Oa=u.forEach?function(a,b,c){u.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)},Pa=u.filter?function(a,b,c){return u.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,h=p(a)?
a.split(""):a,k=0;k<d;k++)if(k in h){var l=h[k];b.call(c,l,k,a)&&(e[f++]=l)}return e},Qa=u.map?function(a,b,c){return u.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=p(a)?a.split(""):a,h=0;h<d;h++)h in f&&(e[h]=b.call(c,f[h],h,a));return e},Ra=u.reduce?function(a,b,c,d){for(var e=[],f=1,h=arguments.length;f<h;f++)e.push(arguments[f]);d&&(e[0]=q(b,d));return u.reduce.apply(a,e)}:function(a,b,c,d){var e=c;Oa(a,function(c,h){e=b.call(d,e,c,h,a)});return e},Sa=u.every?function(a,b,
c){return u.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};function Ta(a,b){var c=Ua(a,b,void 0);return 0>c?null:p(a)?a.charAt(c):a[c]}function Ua(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1}function Va(a,b){var c=Na(a,b);0<=c&&u.splice.call(a,c,1)}function Wa(a,b,c){return 2>=arguments.length?u.slice.call(a,b):u.slice.call(a,b,c)}
function Xa(a,b){a.sort(b||Ya)}function Ya(a,b){return a>b?1:a<b?-1:0};var Za=-1!=Ha.indexOf("Opera")||-1!=Ha.indexOf("OPR"),$a=-1!=Ha.indexOf("Trident")||-1!=Ha.indexOf("MSIE"),ab=-1!=Ha.indexOf("Gecko")&&-1==Ha.toLowerCase().indexOf("webkit")&&!(-1!=Ha.indexOf("Trident")||-1!=Ha.indexOf("MSIE")),bb=-1!=Ha.toLowerCase().indexOf("webkit");
(function(){var a="",b;if(Za&&aa.opera)return a=aa.opera.version,ha(a)?a():a;ab?b=/rv\:([^\);]+)(\)|;)/:$a?b=/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/:bb&&(b=/WebKit\/(\S+)/);b&&(a=(a=b.exec(Ha))?a[1]:"");return $a&&(b=(b=aa.document)?b.documentMode:void 0,b>parseFloat(a))?String(b):a})();var cb=null,db=null,eb=null;function fb(a,b){if(!fa(a))throw Error("encodeByteArray takes an array as a parameter");gb();for(var c=b?db:cb,d=[],e=0;e<a.length;e+=3){var f=a[e],h=e+1<a.length,k=h?a[e+1]:0,l=e+2<a.length,m=l?a[e+2]:0,t=f>>2,f=(f&3)<<4|k>>4,k=(k&15)<<2|m>>6,m=m&63;l||(m=64,h||(k=64));d.push(c[t],c[f],c[k],c[m])}return d.join("")}
function gb(){if(!cb){cb={};db={};eb={};for(var a=0;65>a;a++)cb[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a),db[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a),eb[db[a]]=a,62<=a&&(eb["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a)]=a)}};var hb=hb||"2.3.1";function v(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function w(a,b){if(Object.prototype.hasOwnProperty.call(a,b))return a[b]}function ib(a,b){for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&b(c,a[c])}function jb(a){var b={};ib(a,function(a,d){b[a]=d});return b};function kb(a){var b=[];ib(a,function(a,d){ea(d)?Oa(d,function(d){b.push(encodeURIComponent(a)+"="+encodeURIComponent(d))}):b.push(encodeURIComponent(a)+"="+encodeURIComponent(d))});return b.length?"&"+b.join("&"):""}function lb(a){var b={};a=a.replace(/^\?/,"").split("&");Oa(a,function(a){a&&(a=a.split("="),b[a[0]]=a[1])});return b};function x(a,b,c,d){var e;d<b?e="at least "+b:d>c&&(e=0===c?"none":"no more than "+c);if(e)throw Error(a+" failed: Was called with "+d+(1===d?" argument.":" arguments.")+" Expects "+e+".");}function y(a,b,c){var d="";switch(b){case 1:d=c?"first":"First";break;case 2:d=c?"second":"Second";break;case 3:d=c?"third":"Third";break;case 4:d=c?"fourth":"Fourth";break;default:throw Error("errorPrefix called with argumentNumber > 4.  Need to update it?");}return a=a+" failed: "+(d+" argument ")}
function A(a,b,c,d){if((!d||n(c))&&!ha(c))throw Error(y(a,b,d)+"must be a valid function.");}function mb(a,b,c){if(n(c)&&(!ia(c)||null===c))throw Error(y(a,b,!0)+"must be a valid context object.");};function nb(a){return"undefined"!==typeof JSON&&n(JSON.parse)?JSON.parse(a):Aa(a)}function B(a){if("undefined"!==typeof JSON&&n(JSON.stringify))a=JSON.stringify(a);else{var b=[];Ca(new Ba,a,b);a=b.join("")}return a};function ob(){this.Wd=C}ob.prototype.j=function(a){return this.Wd.Q(a)};ob.prototype.toString=function(){return this.Wd.toString()};function pb(){}pb.prototype.qf=function(){return null};pb.prototype.ye=function(){return null};var qb=new pb;function rb(a,b,c){this.Tf=a;this.Ka=b;this.Kd=c}rb.prototype.qf=function(a){var b=this.Ka.O;if(sb(b,a))return b.j().R(a);b=null!=this.Kd?new tb(this.Kd,!0,!1):this.Ka.w();return this.Tf.xc(a,b)};rb.prototype.ye=function(a,b,c){var d=null!=this.Kd?this.Kd:ub(this.Ka);a=this.Tf.ne(d,b,1,c,a);return 0===a.length?null:a[0]};function vb(){this.tb=[]}function wb(a,b){for(var c=null,d=0;d<b.length;d++){var e=b[d],f=e.Zb();null===c||f.ca(c.Zb())||(a.tb.push(c),c=null);null===c&&(c=new xb(f));c.add(e)}c&&a.tb.push(c)}function yb(a,b,c){wb(a,c);zb(a,function(a){return a.ca(b)})}function Ab(a,b,c){wb(a,c);zb(a,function(a){return a.contains(b)||b.contains(a)})}
function zb(a,b){for(var c=!0,d=0;d<a.tb.length;d++){var e=a.tb[d];if(e)if(e=e.Zb(),b(e)){for(var e=a.tb[d],f=0;f<e.vd.length;f++){var h=e.vd[f];if(null!==h){e.vd[f]=null;var k=h.Vb();Bb&&Cb("event: "+h.toString());Db(k)}}a.tb[d]=null}else c=!1}c&&(a.tb=[])}function xb(a){this.ra=a;this.vd=[]}xb.prototype.add=function(a){this.vd.push(a)};xb.prototype.Zb=function(){return this.ra};function D(a,b,c,d){this.type=a;this.Ja=b;this.Wa=c;this.Ke=d;this.Qd=void 0}function Eb(a){return new D(Fb,a)}var Fb="value";function Gb(a,b,c,d){this.ue=b;this.Zd=c;this.Qd=d;this.ud=a}Gb.prototype.Zb=function(){var a=this.Zd.Ib();return"value"===this.ud?a.path:a.parent().path};Gb.prototype.ze=function(){return this.ud};Gb.prototype.Vb=function(){return this.ue.Vb(this)};Gb.prototype.toString=function(){return this.Zb().toString()+":"+this.ud+":"+B(this.Zd.mf())};function Hb(a,b,c){this.ue=a;this.error=b;this.path=c}Hb.prototype.Zb=function(){return this.path};Hb.prototype.ze=function(){return"cancel"};
Hb.prototype.Vb=function(){return this.ue.Vb(this)};Hb.prototype.toString=function(){return this.path.toString()+":cancel"};function tb(a,b,c){this.A=a;this.ea=b;this.Ub=c}function Ib(a){return a.ea}function Jb(a){return a.Ub}function Kb(a,b){return b.e()?a.ea&&!a.Ub:sb(a,E(b))}function sb(a,b){return a.ea&&!a.Ub||a.A.Da(b)}tb.prototype.j=function(){return this.A};function Lb(a){this.gg=a;this.Dd=null}Lb.prototype.get=function(){var a=this.gg.get(),b=xa(a);if(this.Dd)for(var c in this.Dd)b[c]-=this.Dd[c];this.Dd=a;return b};function Mb(a,b){this.Of={};this.fd=new Lb(a);this.ba=b;var c=1E4+2E4*Math.random();setTimeout(q(this.If,this),Math.floor(c))}Mb.prototype.If=function(){var a=this.fd.get(),b={},c=!1,d;for(d in a)0<a[d]&&v(this.Of,d)&&(b[d]=a[d],c=!0);c&&this.ba.Ue(b);setTimeout(q(this.If,this),Math.floor(6E5*Math.random()))};function Nb(){this.Ec={}}function Ob(a,b,c){n(c)||(c=1);v(a.Ec,b)||(a.Ec[b]=0);a.Ec[b]+=c}Nb.prototype.get=function(){return xa(this.Ec)};var Pb={},Qb={};function Rb(a){a=a.toString();Pb[a]||(Pb[a]=new Nb);return Pb[a]}function Sb(a,b){var c=a.toString();Qb[c]||(Qb[c]=b());return Qb[c]};function F(a,b){this.name=a;this.S=b}function Tb(a,b){return new F(a,b)};function Ub(a,b){return Vb(a.name,b.name)}function Wb(a,b){return Vb(a,b)};function Xb(a,b,c){this.type=Yb;this.source=a;this.path=b;this.Ga=c}Xb.prototype.Xc=function(a){return this.path.e()?new Xb(this.source,G,this.Ga.R(a)):new Xb(this.source,H(this.path),this.Ga)};Xb.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" overwrite: "+this.Ga.toString()+")"};function Zb(a,b){this.type=$b;this.source=a;this.path=b}Zb.prototype.Xc=function(){return this.path.e()?new Zb(this.source,G):new Zb(this.source,H(this.path))};Zb.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" listen_complete)"};function ac(a,b){this.La=a;this.wa=b?b:bc}g=ac.prototype;g.Oa=function(a,b){return new ac(this.La,this.wa.Oa(a,b,this.La).Y(null,null,!1,null,null))};g.remove=function(a){return new ac(this.La,this.wa.remove(a,this.La).Y(null,null,!1,null,null))};g.get=function(a){for(var b,c=this.wa;!c.e();){b=this.La(a,c.key);if(0===b)return c.value;0>b?c=c.left:0<b&&(c=c.right)}return null};
function cc(a,b){for(var c,d=a.wa,e=null;!d.e();){c=a.La(b,d.key);if(0===c){if(d.left.e())return e?e.key:null;for(d=d.left;!d.right.e();)d=d.right;return d.key}0>c?d=d.left:0<c&&(e=d,d=d.right)}throw Error("Attempted to find predecessor key for a nonexistent key.  What gives?");}g.e=function(){return this.wa.e()};g.count=function(){return this.wa.count()};g.Sc=function(){return this.wa.Sc()};g.fc=function(){return this.wa.fc()};g.ia=function(a){return this.wa.ia(a)};
g.Xb=function(a){return new dc(this.wa,null,this.La,!1,a)};g.Yb=function(a,b){return new dc(this.wa,a,this.La,!1,b)};g.$b=function(a,b){return new dc(this.wa,a,this.La,!0,b)};g.sf=function(a){return new dc(this.wa,null,this.La,!0,a)};function dc(a,b,c,d,e){this.Ud=e||null;this.Fe=d;this.Pa=[];for(e=1;!a.e();)if(e=b?c(a.key,b):1,d&&(e*=-1),0>e)a=this.Fe?a.left:a.right;else if(0===e){this.Pa.push(a);break}else this.Pa.push(a),a=this.Fe?a.right:a.left}
function J(a){if(0===a.Pa.length)return null;var b=a.Pa.pop(),c;c=a.Ud?a.Ud(b.key,b.value):{key:b.key,value:b.value};if(a.Fe)for(b=b.left;!b.e();)a.Pa.push(b),b=b.right;else for(b=b.right;!b.e();)a.Pa.push(b),b=b.left;return c}function ec(a){if(0===a.Pa.length)return null;var b;b=a.Pa;b=b[b.length-1];return a.Ud?a.Ud(b.key,b.value):{key:b.key,value:b.value}}function fc(a,b,c,d,e){this.key=a;this.value=b;this.color=null!=c?c:!0;this.left=null!=d?d:bc;this.right=null!=e?e:bc}g=fc.prototype;
g.Y=function(a,b,c,d,e){return new fc(null!=a?a:this.key,null!=b?b:this.value,null!=c?c:this.color,null!=d?d:this.left,null!=e?e:this.right)};g.count=function(){return this.left.count()+1+this.right.count()};g.e=function(){return!1};g.ia=function(a){return this.left.ia(a)||a(this.key,this.value)||this.right.ia(a)};function gc(a){return a.left.e()?a:gc(a.left)}g.Sc=function(){return gc(this).key};g.fc=function(){return this.right.e()?this.key:this.right.fc()};
g.Oa=function(a,b,c){var d,e;e=this;d=c(a,e.key);e=0>d?e.Y(null,null,null,e.left.Oa(a,b,c),null):0===d?e.Y(null,b,null,null,null):e.Y(null,null,null,null,e.right.Oa(a,b,c));return hc(e)};function ic(a){if(a.left.e())return bc;a.left.fa()||a.left.left.fa()||(a=jc(a));a=a.Y(null,null,null,ic(a.left),null);return hc(a)}
g.remove=function(a,b){var c,d;c=this;if(0>b(a,c.key))c.left.e()||c.left.fa()||c.left.left.fa()||(c=jc(c)),c=c.Y(null,null,null,c.left.remove(a,b),null);else{c.left.fa()&&(c=kc(c));c.right.e()||c.right.fa()||c.right.left.fa()||(c=lc(c),c.left.left.fa()&&(c=kc(c),c=lc(c)));if(0===b(a,c.key)){if(c.right.e())return bc;d=gc(c.right);c=c.Y(d.key,d.value,null,null,ic(c.right))}c=c.Y(null,null,null,null,c.right.remove(a,b))}return hc(c)};g.fa=function(){return this.color};
function hc(a){a.right.fa()&&!a.left.fa()&&(a=mc(a));a.left.fa()&&a.left.left.fa()&&(a=kc(a));a.left.fa()&&a.right.fa()&&(a=lc(a));return a}function jc(a){a=lc(a);a.right.left.fa()&&(a=a.Y(null,null,null,null,kc(a.right)),a=mc(a),a=lc(a));return a}function mc(a){return a.right.Y(null,null,a.color,a.Y(null,null,!0,null,a.right.left),null)}function kc(a){return a.left.Y(null,null,a.color,null,a.Y(null,null,!0,a.left.right,null))}
function lc(a){return a.Y(null,null,!a.color,a.left.Y(null,null,!a.left.color,null,null),a.right.Y(null,null,!a.right.color,null,null))}function nc(){}g=nc.prototype;g.Y=function(){return this};g.Oa=function(a,b){return new fc(a,b,null)};g.remove=function(){return this};g.count=function(){return 0};g.e=function(){return!0};g.ia=function(){return!1};g.Sc=function(){return null};g.fc=function(){return null};g.fa=function(){return!1};var bc=new nc;function oc(a,b){return a&&"object"===typeof a?(K(".sv"in a,"Unexpected leaf node or priority contents"),b[a[".sv"]]):a}function pc(a,b){var c=new qc;rc(a,new L(""),function(a,e){c.nc(a,sc(e,b))});return c}function sc(a,b){var c=a.C().I(),c=oc(c,b),d;if(a.K()){var e=oc(a.Ca(),b);return e!==a.Ca()||c!==a.C().I()?new tc(e,M(c)):a}d=a;c!==a.C().I()&&(d=d.ga(new tc(c)));a.P(N,function(a,c){var e=sc(c,b);e!==c&&(d=d.U(a,e))});return d};function uc(){this.wc={}}uc.prototype.set=function(a,b){null==b?delete this.wc[a]:this.wc[a]=b};uc.prototype.get=function(a){return v(this.wc,a)?this.wc[a]:null};uc.prototype.remove=function(a){delete this.wc[a]};uc.prototype.wf=!0;function vc(a){this.Fc=a;this.Pd="firebase:"}g=vc.prototype;g.set=function(a,b){null==b?this.Fc.removeItem(this.Pd+a):this.Fc.setItem(this.Pd+a,B(b))};g.get=function(a){a=this.Fc.getItem(this.Pd+a);return null==a?null:nb(a)};g.remove=function(a){this.Fc.removeItem(this.Pd+a)};g.wf=!1;g.toString=function(){return this.Fc.toString()};function wc(a){try{if("undefined"!==typeof window&&"undefined"!==typeof window[a]){var b=window[a];b.setItem("firebase:sentinel","cache");b.removeItem("firebase:sentinel");return new vc(b)}}catch(c){}return new uc}var xc=wc("localStorage"),yc=wc("sessionStorage");function zc(a,b,c,d,e){this.host=a.toLowerCase();this.domain=this.host.substr(this.host.indexOf(".")+1);this.kb=b;this.hc=c;this.Wg=d;this.Od=e||"";this.Ya=xc.get("host:"+a)||this.host}function Ac(a,b){b!==a.Ya&&(a.Ya=b,"s-"===a.Ya.substr(0,2)&&xc.set("host:"+a.host,a.Ya))}
function Bc(a,b,c){K("string"===typeof b,"typeof type must == string");K("object"===typeof c,"typeof params must == object");if(b===Cc)b=(a.kb?"wss://":"ws://")+a.Ya+"/.ws?";else if(b===Dc)b=(a.kb?"https://":"http://")+a.Ya+"/.lp?";else throw Error("Unknown connection type: "+b);a.host!==a.Ya&&(c.ns=a.hc);var d=[];r(c,function(a,b){d.push(b+"="+a)});return b+d.join("&")}zc.prototype.toString=function(){var a=(this.kb?"https://":"http://")+this.host;this.Od&&(a+="<"+this.Od+">");return a};var Ec=function(){var a=1;return function(){return a++}}();function K(a,b){if(!a)throw Fc(b);}function Fc(a){return Error("Firebase ("+hb+") INTERNAL ASSERT FAILED: "+a)}
function Gc(a){try{var b;if("undefined"!==typeof atob)b=atob(a);else{gb();for(var c=eb,d=[],e=0;e<a.length;){var f=c[a.charAt(e++)],h=e<a.length?c[a.charAt(e)]:0;++e;var k=e<a.length?c[a.charAt(e)]:64;++e;var l=e<a.length?c[a.charAt(e)]:64;++e;if(null==f||null==h||null==k||null==l)throw Error();d.push(f<<2|h>>4);64!=k&&(d.push(h<<4&240|k>>2),64!=l&&d.push(k<<6&192|l))}if(8192>d.length)b=String.fromCharCode.apply(null,d);else{a="";for(c=0;c<d.length;c+=8192)a+=String.fromCharCode.apply(null,Wa(d,c,
c+8192));b=a}}return b}catch(m){Cb("base64Decode failed: ",m)}return null}function Hc(a){var b=Ic(a);a=new La;a.update(b);var b=[],c=8*a.de;56>a.ac?a.update(a.Ld,56-a.ac):a.update(a.Ld,a.Va-(a.ac-56));for(var d=a.Va-1;56<=d;d--)a.me[d]=c&255,c/=256;Ma(a,a.me);for(d=c=0;5>d;d++)for(var e=24;0<=e;e-=8)b[c]=a.N[d]>>e&255,++c;return fb(b)}
function Jc(a){for(var b="",c=0;c<arguments.length;c++)b=fa(arguments[c])?b+Jc.apply(null,arguments[c]):"object"===typeof arguments[c]?b+B(arguments[c]):b+arguments[c],b+=" ";return b}var Bb=null,Kc=!0;function Cb(a){!0===Kc&&(Kc=!1,null===Bb&&!0===yc.get("logging_enabled")&&Lc(!0));if(Bb){var b=Jc.apply(null,arguments);Bb(b)}}function Mc(a){return function(){Cb(a,arguments)}}
function Nc(a){if("undefined"!==typeof console){var b="FIREBASE INTERNAL ERROR: "+Jc.apply(null,arguments);"undefined"!==typeof console.error?console.error(b):console.log(b)}}function Oc(a){var b=Jc.apply(null,arguments);throw Error("FIREBASE FATAL ERROR: "+b);}function O(a){if("undefined"!==typeof console){var b="FIREBASE WARNING: "+Jc.apply(null,arguments);"undefined"!==typeof console.warn?console.warn(b):console.log(b)}}
function Pc(a){var b="",c="",d="",e="",f=!0,h="https",k=443;if(p(a)){var l=a.indexOf("//");0<=l&&(h=a.substring(0,l-1),a=a.substring(l+2));l=a.indexOf("/");-1===l&&(l=a.length);b=a.substring(0,l);e="";a=a.substring(l).split("/");for(l=0;l<a.length;l++)if(0<a[l].length){var m=a[l];try{m=decodeURIComponent(m.replace(/\+/g," "))}catch(t){}e+="/"+m}a=b.split(".");3===a.length?(c=a[1],d=a[0].toLowerCase()):2===a.length&&(c=a[0]);l=b.indexOf(":");0<=l&&(f="https"===h||"wss"===h,k=b.substring(l+1),isFinite(k)&&
(k=String(k)),k=p(k)?/^\s*-?0x/i.test(k)?parseInt(k,16):parseInt(k,10):NaN)}return{host:b,port:k,domain:c,Tg:d,kb:f,scheme:h,$c:e}}function Qc(a){return ga(a)&&(a!=a||a==Number.POSITIVE_INFINITY||a==Number.NEGATIVE_INFINITY)}
function Rc(a){if("complete"===document.readyState)a();else{var b=!1,c=function(){document.body?b||(b=!0,a()):setTimeout(c,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",c,!1),window.addEventListener("load",c,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&c()}),window.attachEvent("onload",c))}}
function Vb(a,b){if(a===b)return 0;if("[MIN_NAME]"===a||"[MAX_NAME]"===b)return-1;if("[MIN_NAME]"===b||"[MAX_NAME]"===a)return 1;var c=Sc(a),d=Sc(b);return null!==c?null!==d?0==c-d?a.length-b.length:c-d:-1:null!==d?1:a<b?-1:1}function Tc(a,b){if(b&&a in b)return b[a];throw Error("Missing required key ("+a+") in object: "+B(b));}
function Uc(a){if("object"!==typeof a||null===a)return B(a);var b=[],c;for(c in a)b.push(c);b.sort();c="{";for(var d=0;d<b.length;d++)0!==d&&(c+=","),c+=B(b[d]),c+=":",c+=Uc(a[b[d]]);return c+"}"}function Vc(a,b){if(a.length<=b)return[a];for(var c=[],d=0;d<a.length;d+=b)d+b>a?c.push(a.substring(d,a.length)):c.push(a.substring(d,d+b));return c}function Wc(a,b){if(ea(a))for(var c=0;c<a.length;++c)b(c,a[c]);else r(a,b)}
function Xc(a){K(!Qc(a),"Invalid JSON number");var b,c,d,e;0===a?(d=c=0,b=-Infinity===1/a?1:0):(b=0>a,a=Math.abs(a),a>=Math.pow(2,-1022)?(d=Math.min(Math.floor(Math.log(a)/Math.LN2),1023),c=d+1023,d=Math.round(a*Math.pow(2,52-d)-Math.pow(2,52))):(c=0,d=Math.round(a/Math.pow(2,-1074))));e=[];for(a=52;a;--a)e.push(d%2?1:0),d=Math.floor(d/2);for(a=11;a;--a)e.push(c%2?1:0),c=Math.floor(c/2);e.push(b?1:0);e.reverse();b=e.join("");c="";for(a=0;64>a;a+=8)d=parseInt(b.substr(a,8),2).toString(16),1===d.length&&
(d="0"+d),c+=d;return c.toLowerCase()}var Yc=/^-?\d{1,10}$/;function Sc(a){return Yc.test(a)&&(a=Number(a),-2147483648<=a&&2147483647>=a)?a:null}function Db(a){try{a()}catch(b){setTimeout(function(){O("Exception was thrown by user callback.",b.stack||"");throw b;},Math.floor(0))}}function P(a,b){if(ha(a)){var c=Array.prototype.slice.call(arguments,1).slice();Db(function(){a.apply(null,c)})}};function Ic(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);55296<=e&&56319>=e&&(e-=55296,d++,K(d<a.length,"Surrogate pair missing trail surrogate."),e=65536+(e<<10)+(a.charCodeAt(d)-56320));128>e?b[c++]=e:(2048>e?b[c++]=e>>6|192:(65536>e?b[c++]=e>>12|224:(b[c++]=e>>18|240,b[c++]=e>>12&63|128),b[c++]=e>>6&63|128),b[c++]=e&63|128)}return b}function Zc(a){for(var b=0,c=0;c<a.length;c++){var d=a.charCodeAt(c);128>d?b++:2048>d?b+=2:55296<=d&&56319>=d?(b+=4,c++):b+=3}return b};function $c(a){var b={},c={},d={},e="";try{var f=a.split("."),b=nb(Gc(f[0])||""),c=nb(Gc(f[1])||""),e=f[2],d=c.d||{};delete c.d}catch(h){}return{Zg:b,Bc:c,data:d,Qg:e}}function ad(a){a=$c(a).Bc;return"object"===typeof a&&a.hasOwnProperty("iat")?w(a,"iat"):null}function bd(a){a=$c(a);var b=a.Bc;return!!a.Qg&&!!b&&"object"===typeof b&&b.hasOwnProperty("iat")};function cd(a){this.W=a;this.g=a.n.g}function dd(a,b,c,d){var e=[],f=[];Oa(b,function(b){"child_changed"===b.type&&a.g.Ad(b.Ke,b.Ja)&&f.push(new D("child_moved",b.Ja,b.Wa))});ed(a,e,"child_removed",b,d,c);ed(a,e,"child_added",b,d,c);ed(a,e,"child_moved",f,d,c);ed(a,e,"child_changed",b,d,c);ed(a,e,Fb,b,d,c);return e}function ed(a,b,c,d,e,f){d=Pa(d,function(a){return a.type===c});Xa(d,q(a.hg,a));Oa(d,function(c){var d=fd(a,c,f);Oa(e,function(e){e.Kf(c.type)&&b.push(e.createEvent(d,a.W))})})}
function fd(a,b,c){"value"!==b.type&&"child_removed"!==b.type&&(b.Qd=c.rf(b.Wa,b.Ja,a.g));return b}cd.prototype.hg=function(a,b){if(null==a.Wa||null==b.Wa)throw Fc("Should only compare child_ events.");return this.g.compare(new F(a.Wa,a.Ja),new F(b.Wa,b.Ja))};function gd(){this.bb={}}
function hd(a,b){var c=b.type,d=b.Wa;K("child_added"==c||"child_changed"==c||"child_removed"==c,"Only child changes supported for tracking");K(".priority"!==d,"Only non-priority child changes can be tracked.");var e=w(a.bb,d);if(e){var f=e.type;if("child_added"==c&&"child_removed"==f)a.bb[d]=new D("child_changed",b.Ja,d,e.Ja);else if("child_removed"==c&&"child_added"==f)delete a.bb[d];else if("child_removed"==c&&"child_changed"==f)a.bb[d]=new D("child_removed",e.Ke,d);else if("child_changed"==c&&
"child_added"==f)a.bb[d]=new D("child_added",b.Ja,d);else if("child_changed"==c&&"child_changed"==f)a.bb[d]=new D("child_changed",b.Ja,d,e.Ke);else throw Fc("Illegal combination of changes: "+b+" occurred after "+e);}else a.bb[d]=b};function id(a,b,c){this.Rb=a;this.pb=b;this.rb=c||null}g=id.prototype;g.Kf=function(a){return"value"===a};g.createEvent=function(a,b){var c=b.n.g;return new Gb("value",this,new Q(a.Ja,b.Ib(),c))};g.Vb=function(a){var b=this.rb;if("cancel"===a.ze()){K(this.pb,"Raising a cancel event on a listener with no cancel callback");var c=this.pb;return function(){c.call(b,a.error)}}var d=this.Rb;return function(){d.call(b,a.Zd)}};g.gf=function(a,b){return this.pb?new Hb(this,a,b):null};
g.matches=function(a){return a instanceof id?a.Rb&&this.Rb?a.Rb===this.Rb&&a.rb===this.rb:!0:!1};g.tf=function(){return null!==this.Rb};function jd(a,b,c){this.ha=a;this.pb=b;this.rb=c}g=jd.prototype;g.Kf=function(a){a="children_added"===a?"child_added":a;return("children_removed"===a?"child_removed":a)in this.ha};g.gf=function(a,b){return this.pb?new Hb(this,a,b):null};
g.createEvent=function(a,b){K(null!=a.Wa,"Child events should have a childName.");var c=b.Ib().u(a.Wa);return new Gb(a.type,this,new Q(a.Ja,c,b.n.g),a.Qd)};g.Vb=function(a){var b=this.rb;if("cancel"===a.ze()){K(this.pb,"Raising a cancel event on a listener with no cancel callback");var c=this.pb;return function(){c.call(b,a.error)}}var d=this.ha[a.ud];return function(){d.call(b,a.Zd,a.Qd)}};
g.matches=function(a){if(a instanceof jd){if(!this.ha||!a.ha)return!0;if(this.rb===a.rb){var b=pa(a.ha);if(b===pa(this.ha)){if(1===b){var b=qa(a.ha),c=qa(this.ha);return c===b&&(!a.ha[b]||!this.ha[c]||a.ha[b]===this.ha[c])}return oa(this.ha,function(b,c){return a.ha[c]===b})}}}return!1};g.tf=function(){return null!==this.ha};function kd(a){this.g=a}g=kd.prototype;g.G=function(a,b,c,d,e,f){K(a.Jc(this.g),"A node must be indexed if only a child is updated");e=a.R(b);if(e.Q(d).ca(c.Q(d))&&e.e()==c.e())return a;null!=f&&(c.e()?a.Da(b)?hd(f,new D("child_removed",e,b)):K(a.K(),"A child remove without an old child only makes sense on a leaf node"):e.e()?hd(f,new D("child_added",c,b)):hd(f,new D("child_changed",c,b,e)));return a.K()&&c.e()?a:a.U(b,c).lb(this.g)};
g.xa=function(a,b,c){null!=c&&(a.K()||a.P(N,function(a,e){b.Da(a)||hd(c,new D("child_removed",e,a))}),b.K()||b.P(N,function(b,e){if(a.Da(b)){var f=a.R(b);f.ca(e)||hd(c,new D("child_changed",e,b,f))}else hd(c,new D("child_added",e,b))}));return b.lb(this.g)};g.ga=function(a,b){return a.e()?C:a.ga(b)};g.Na=function(){return!1};g.Wb=function(){return this};function ld(a){this.Be=new kd(a.g);this.g=a.g;var b;a.ma?(b=md(a),b=a.g.Pc(nd(a),b)):b=a.g.Tc();this.ed=b;a.pa?(b=od(a),a=a.g.Pc(pd(a),b)):a=a.g.Qc();this.Gc=a}g=ld.prototype;g.matches=function(a){return 0>=this.g.compare(this.ed,a)&&0>=this.g.compare(a,this.Gc)};g.G=function(a,b,c,d,e,f){this.matches(new F(b,c))||(c=C);return this.Be.G(a,b,c,d,e,f)};
g.xa=function(a,b,c){b.K()&&(b=C);var d=b.lb(this.g),d=d.ga(C),e=this;b.P(N,function(a,b){e.matches(new F(a,b))||(d=d.U(a,C))});return this.Be.xa(a,d,c)};g.ga=function(a){return a};g.Na=function(){return!0};g.Wb=function(){return this.Be};function qd(a){this.sa=new ld(a);this.g=a.g;K(a.ja,"Only valid if limit has been set");this.ka=a.ka;this.Jb=!rd(a)}g=qd.prototype;g.G=function(a,b,c,d,e,f){this.sa.matches(new F(b,c))||(c=C);return a.R(b).ca(c)?a:a.Db()<this.ka?this.sa.Wb().G(a,b,c,d,e,f):sd(this,a,b,c,e,f)};
g.xa=function(a,b,c){var d;if(b.K()||b.e())d=C.lb(this.g);else if(2*this.ka<b.Db()&&b.Jc(this.g)){d=C.lb(this.g);b=this.Jb?b.$b(this.sa.Gc,this.g):b.Yb(this.sa.ed,this.g);for(var e=0;0<b.Pa.length&&e<this.ka;){var f=J(b),h;if(h=this.Jb?0>=this.g.compare(this.sa.ed,f):0>=this.g.compare(f,this.sa.Gc))d=d.U(f.name,f.S),e++;else break}}else{d=b.lb(this.g);d=d.ga(C);var k,l,m;if(this.Jb){b=d.sf(this.g);k=this.sa.Gc;l=this.sa.ed;var t=td(this.g);m=function(a,b){return t(b,a)}}else b=d.Xb(this.g),k=this.sa.ed,
l=this.sa.Gc,m=td(this.g);for(var e=0,z=!1;0<b.Pa.length;)f=J(b),!z&&0>=m(k,f)&&(z=!0),(h=z&&e<this.ka&&0>=m(f,l))?e++:d=d.U(f.name,C)}return this.sa.Wb().xa(a,d,c)};g.ga=function(a){return a};g.Na=function(){return!0};g.Wb=function(){return this.sa.Wb()};
function sd(a,b,c,d,e,f){var h;if(a.Jb){var k=td(a.g);h=function(a,b){return k(b,a)}}else h=td(a.g);K(b.Db()==a.ka,"");var l=new F(c,d),m=a.Jb?ud(b,a.g):vd(b,a.g),t=a.sa.matches(l);if(b.Da(c)){for(var z=b.R(c),m=e.ye(a.g,m,a.Jb);null!=m&&(m.name==c||b.Da(m.name));)m=e.ye(a.g,m,a.Jb);e=null==m?1:h(m,l);if(t&&!d.e()&&0<=e)return null!=f&&hd(f,new D("child_changed",d,c,z)),b.U(c,d);null!=f&&hd(f,new D("child_removed",z,c));b=b.U(c,C);return null!=m&&a.sa.matches(m)?(null!=f&&hd(f,new D("child_added",
m.S,m.name)),b.U(m.name,m.S)):b}return d.e()?b:t&&0<=h(m,l)?(null!=f&&(hd(f,new D("child_removed",m.S,m.name)),hd(f,new D("child_added",d,c))),b.U(c,d).U(m.name,C)):b};function wd(a,b){this.je=a;this.fg=b}function xd(a){this.V=a}
xd.prototype.ab=function(a,b,c,d){var e=new gd,f;if(b.type===Yb)b.source.we?c=yd(this,a,b.path,b.Ga,c,d,e):(K(b.source.pf,"Unknown source."),f=b.source.af||Jb(a.w())&&!b.path.e(),c=Ad(this,a,b.path,b.Ga,c,d,f,e));else if(b.type===Bd)b.source.we?c=Cd(this,a,b.path,b.children,c,d,e):(K(b.source.pf,"Unknown source."),f=b.source.af||Jb(a.w()),c=Dd(this,a,b.path,b.children,c,d,f,e));else if(b.type===Ed)if(b.Vd)if(b=b.path,null!=c.tc(b))c=a;else{f=new rb(c,a,d);d=a.O.j();if(b.e()||".priority"===E(b))Ib(a.w())?
b=c.za(ub(a)):(b=a.w().j(),K(b instanceof R,"serverChildren would be complete if leaf node"),b=c.yc(b)),b=this.V.xa(d,b,e);else{var h=E(b),k=c.xc(h,a.w());null==k&&sb(a.w(),h)&&(k=d.R(h));b=null!=k?this.V.G(d,h,k,H(b),f,e):a.O.j().Da(h)?this.V.G(d,h,C,H(b),f,e):d;b.e()&&Ib(a.w())&&(d=c.za(ub(a)),d.K()&&(b=this.V.xa(b,d,e)))}d=Ib(a.w())||null!=c.tc(G);c=Fd(a,b,d,this.V.Na())}else c=Gd(this,a,b.path,b.Qb,c,d,e);else if(b.type===$b)d=b.path,b=a.w(),f=b.j(),h=b.ea||d.e(),c=Hd(this,new Id(a.O,new tb(f,
h,b.Ub)),d,c,qb,e);else throw Fc("Unknown operation type: "+b.type);e=ra(e.bb);d=c;b=d.O;b.ea&&(f=b.j().K()||b.j().e(),h=Jd(a),(0<e.length||!a.O.ea||f&&!b.j().ca(h)||!b.j().C().ca(h.C()))&&e.push(Eb(Jd(d))));return new wd(c,e)};
function Hd(a,b,c,d,e,f){var h=b.O;if(null!=d.tc(c))return b;var k;if(c.e())K(Ib(b.w()),"If change path is empty, we must have complete server data"),Jb(b.w())?(e=ub(b),d=d.yc(e instanceof R?e:C)):d=d.za(ub(b)),f=a.V.xa(b.O.j(),d,f);else{var l=E(c);if(".priority"==l)K(1==Kd(c),"Can't have a priority with additional path components"),f=h.j(),k=b.w().j(),d=d.ld(c,f,k),f=null!=d?a.V.ga(f,d):h.j();else{var m=H(c);sb(h,l)?(k=b.w().j(),d=d.ld(c,h.j(),k),d=null!=d?h.j().R(l).G(m,d):h.j().R(l)):d=d.xc(l,
b.w());f=null!=d?a.V.G(h.j(),l,d,m,e,f):h.j()}}return Fd(b,f,h.ea||c.e(),a.V.Na())}function Ad(a,b,c,d,e,f,h,k){var l=b.w();h=h?a.V:a.V.Wb();if(c.e())d=h.xa(l.j(),d,null);else if(h.Na()&&!l.Ub)d=l.j().G(c,d),d=h.xa(l.j(),d,null);else{var m=E(c);if(!Kb(l,c)&&1<Kd(c))return b;var t=H(c);d=l.j().R(m).G(t,d);d=".priority"==m?h.ga(l.j(),d):h.G(l.j(),m,d,t,qb,null)}l=l.ea||c.e();b=new Id(b.O,new tb(d,l,h.Na()));return Hd(a,b,c,e,new rb(e,b,f),k)}
function yd(a,b,c,d,e,f,h){var k=b.O;e=new rb(e,b,f);if(c.e())h=a.V.xa(b.O.j(),d,h),a=Fd(b,h,!0,a.V.Na());else if(f=E(c),".priority"===f)h=a.V.ga(b.O.j(),d),a=Fd(b,h,k.ea,k.Ub);else{c=H(c);var l=k.j().R(f);if(!c.e()){var m=e.qf(f);d=null!=m?".priority"===Ld(c)&&m.Q(c.parent()).e()?m:m.G(c,d):C}l.ca(d)?a=b:(h=a.V.G(k.j(),f,d,c,e,h),a=Fd(b,h,k.ea,a.V.Na()))}return a}
function Cd(a,b,c,d,e,f,h){var k=b;Md(d,function(d,m){var t=c.u(d);sb(b.O,E(t))&&(k=yd(a,k,t,m,e,f,h))});Md(d,function(d,m){var t=c.u(d);sb(b.O,E(t))||(k=yd(a,k,t,m,e,f,h))});return k}function Nd(a,b){Md(b,function(b,d){a=a.G(b,d)});return a}
function Dd(a,b,c,d,e,f,h,k){if(b.w().j().e()&&!Ib(b.w()))return b;var l=b;c=c.e()?d:Od(Pd,c,d);var m=b.w().j();c.children.ia(function(c,d){if(m.Da(c)){var I=b.w().j().R(c),I=Nd(I,d);l=Ad(a,l,new L(c),I,e,f,h,k)}});c.children.ia(function(c,d){var I=!sb(b.w(),c)&&null==d.value;m.Da(c)||I||(I=b.w().j().R(c),I=Nd(I,d),l=Ad(a,l,new L(c),I,e,f,h,k))});return l}
function Gd(a,b,c,d,e,f,h){if(null!=e.tc(c))return b;var k=Jb(b.w()),l=b.w();if(null!=d.value){if(c.e()&&l.ea||Kb(l,c))return Ad(a,b,c,l.j().Q(c),e,f,k,h);if(c.e()){var m=Pd;l.j().P(Qd,function(a,b){m=m.set(new L(a),b)});return Dd(a,b,c,m,e,f,k,h)}return b}m=Pd;Md(d,function(a){var b=c.u(a);Kb(l,b)&&(m=m.set(a,l.j().Q(b)))});return Dd(a,b,c,m,e,f,k,h)};function Rd(){}var Sd={};function td(a){return q(a.compare,a)}Rd.prototype.Ad=function(a,b){return 0!==this.compare(new F("[MIN_NAME]",a),new F("[MIN_NAME]",b))};Rd.prototype.Tc=function(){return Td};function Ud(a){K(!a.e()&&".priority"!==E(a),"Can't create PathIndex with empty path or .priority key");this.cc=a}ma(Ud,Rd);g=Ud.prototype;g.Ic=function(a){return!a.Q(this.cc).e()};g.compare=function(a,b){var c=a.S.Q(this.cc),d=b.S.Q(this.cc),c=c.Dc(d);return 0===c?Vb(a.name,b.name):c};
g.Pc=function(a,b){var c=M(a),c=C.G(this.cc,c);return new F(b,c)};g.Qc=function(){var a=C.G(this.cc,Vd);return new F("[MAX_NAME]",a)};g.toString=function(){return this.cc.slice().join("/")};function Wd(){}ma(Wd,Rd);g=Wd.prototype;g.compare=function(a,b){var c=a.S.C(),d=b.S.C(),c=c.Dc(d);return 0===c?Vb(a.name,b.name):c};g.Ic=function(a){return!a.C().e()};g.Ad=function(a,b){return!a.C().ca(b.C())};g.Tc=function(){return Td};g.Qc=function(){return new F("[MAX_NAME]",new tc("[PRIORITY-POST]",Vd))};
g.Pc=function(a,b){var c=M(a);return new F(b,new tc("[PRIORITY-POST]",c))};g.toString=function(){return".priority"};var N=new Wd;function Xd(){}ma(Xd,Rd);g=Xd.prototype;g.compare=function(a,b){return Vb(a.name,b.name)};g.Ic=function(){throw Fc("KeyIndex.isDefinedOn not expected to be called.");};g.Ad=function(){return!1};g.Tc=function(){return Td};g.Qc=function(){return new F("[MAX_NAME]",C)};g.Pc=function(a){K(p(a),"KeyIndex indexValue must always be a string.");return new F(a,C)};g.toString=function(){return".key"};
var Qd=new Xd;function Yd(){}ma(Yd,Rd);g=Yd.prototype;g.compare=function(a,b){var c=a.S.Dc(b.S);return 0===c?Vb(a.name,b.name):c};g.Ic=function(){return!0};g.Ad=function(a,b){return!a.ca(b)};g.Tc=function(){return Td};g.Qc=function(){return Zd};g.Pc=function(a,b){var c=M(a);return new F(b,c)};g.toString=function(){return".value"};var $d=new Yd;function ae(){this.Tb=this.pa=this.Lb=this.ma=this.ja=!1;this.ka=0;this.Nb="";this.ec=null;this.xb="";this.bc=null;this.vb="";this.g=N}var be=new ae;function rd(a){return""===a.Nb?a.ma:"l"===a.Nb}function nd(a){K(a.ma,"Only valid if start has been set");return a.ec}function md(a){K(a.ma,"Only valid if start has been set");return a.Lb?a.xb:"[MIN_NAME]"}function pd(a){K(a.pa,"Only valid if end has been set");return a.bc}
function od(a){K(a.pa,"Only valid if end has been set");return a.Tb?a.vb:"[MAX_NAME]"}function ce(a){var b=new ae;b.ja=a.ja;b.ka=a.ka;b.ma=a.ma;b.ec=a.ec;b.Lb=a.Lb;b.xb=a.xb;b.pa=a.pa;b.bc=a.bc;b.Tb=a.Tb;b.vb=a.vb;b.g=a.g;return b}g=ae.prototype;g.He=function(a){var b=ce(this);b.ja=!0;b.ka=a;b.Nb="";return b};g.Ie=function(a){var b=ce(this);b.ja=!0;b.ka=a;b.Nb="l";return b};g.Je=function(a){var b=ce(this);b.ja=!0;b.ka=a;b.Nb="r";return b};
g.$d=function(a,b){var c=ce(this);c.ma=!0;n(a)||(a=null);c.ec=a;null!=b?(c.Lb=!0,c.xb=b):(c.Lb=!1,c.xb="");return c};g.td=function(a,b){var c=ce(this);c.pa=!0;n(a)||(a=null);c.bc=a;n(b)?(c.Tb=!0,c.vb=b):(c.ah=!1,c.vb="");return c};function de(a,b){var c=ce(a);c.g=b;return c}function ee(a){var b={};a.ma&&(b.sp=a.ec,a.Lb&&(b.sn=a.xb));a.pa&&(b.ep=a.bc,a.Tb&&(b.en=a.vb));if(a.ja){b.l=a.ka;var c=a.Nb;""===c&&(c=rd(a)?"l":"r");b.vf=c}a.g!==N&&(b.i=a.g.toString());return b}
function S(a){return!(a.ma||a.pa||a.ja)}function fe(a){return S(a)&&a.g==N}function ge(a){var b={};if(fe(a))return b;var c;a.g===N?c="$priority":a.g===$d?c="$value":a.g===Qd?c="$key":(K(a.g instanceof Ud,"Unrecognized index type!"),c=a.g.toString());b.orderBy=B(c);a.ma&&(b.startAt=B(a.ec),a.Lb&&(b.startAt+=","+B(a.xb)));a.pa&&(b.endAt=B(a.bc),a.Tb&&(b.endAt+=","+B(a.vb)));a.ja&&(rd(a)?b.limitToFirst=a.ka:b.limitToLast=a.ka);return b}g.toString=function(){return B(ee(this))};function he(a,b){this.Bd=a;this.dc=b}he.prototype.get=function(a){var b=w(this.Bd,a);if(!b)throw Error("No index defined for "+a);return b===Sd?null:b};function ie(a,b,c){var d=na(a.Bd,function(d,f){var h=w(a.dc,f);K(h,"Missing index implementation for "+f);if(d===Sd){if(h.Ic(b.S)){for(var k=[],l=c.Xb(Tb),m=J(l);m;)m.name!=b.name&&k.push(m),m=J(l);k.push(b);return je(k,td(h))}return Sd}h=c.get(b.name);k=d;h&&(k=k.remove(new F(b.name,h)));return k.Oa(b,b.S)});return new he(d,a.dc)}
function ke(a,b,c){var d=na(a.Bd,function(a){if(a===Sd)return a;var d=c.get(b.name);return d?a.remove(new F(b.name,d)):a});return new he(d,a.dc)}var le=new he({".priority":Sd},{".priority":N});function tc(a,b){this.B=a;K(n(this.B)&&null!==this.B,"LeafNode shouldn't be created with null/undefined value.");this.aa=b||C;me(this.aa);this.Cb=null}var ne=["object","boolean","number","string"];g=tc.prototype;g.K=function(){return!0};g.C=function(){return this.aa};g.ga=function(a){return new tc(this.B,a)};g.R=function(a){return".priority"===a?this.aa:C};g.Q=function(a){return a.e()?this:".priority"===E(a)?this.aa:C};g.Da=function(){return!1};g.rf=function(){return null};
g.U=function(a,b){return".priority"===a?this.ga(b):b.e()&&".priority"!==a?this:C.U(a,b).ga(this.aa)};g.G=function(a,b){var c=E(a);if(null===c)return b;if(b.e()&&".priority"!==c)return this;K(".priority"!==c||1===Kd(a),".priority must be the last token in a path");return this.U(c,C.G(H(a),b))};g.e=function(){return!1};g.Db=function(){return 0};g.P=function(){return!1};g.I=function(a){return a&&!this.C().e()?{".value":this.Ca(),".priority":this.C().I()}:this.Ca()};
g.hash=function(){if(null===this.Cb){var a="";this.aa.e()||(a+="priority:"+oe(this.aa.I())+":");var b=typeof this.B,a=a+(b+":"),a="number"===b?a+Xc(this.B):a+this.B;this.Cb=Hc(a)}return this.Cb};g.Ca=function(){return this.B};g.Dc=function(a){if(a===C)return 1;if(a instanceof R)return-1;K(a.K(),"Unknown node type");var b=typeof a.B,c=typeof this.B,d=Na(ne,b),e=Na(ne,c);K(0<=d,"Unknown leaf type: "+b);K(0<=e,"Unknown leaf type: "+c);return d===e?"object"===c?0:this.B<a.B?-1:this.B===a.B?0:1:e-d};
g.lb=function(){return this};g.Jc=function(){return!0};g.ca=function(a){return a===this?!0:a.K()?this.B===a.B&&this.aa.ca(a.aa):!1};g.toString=function(){return B(this.I(!0))};function R(a,b,c){this.m=a;(this.aa=b)&&me(this.aa);a.e()&&K(!this.aa||this.aa.e(),"An empty node cannot have a priority");this.wb=c;this.Cb=null}g=R.prototype;g.K=function(){return!1};g.C=function(){return this.aa||C};g.ga=function(a){return this.m.e()?this:new R(this.m,a,this.wb)};g.R=function(a){if(".priority"===a)return this.C();a=this.m.get(a);return null===a?C:a};g.Q=function(a){var b=E(a);return null===b?this:this.R(b).Q(H(a))};g.Da=function(a){return null!==this.m.get(a)};
g.U=function(a,b){K(b,"We should always be passing snapshot nodes");if(".priority"===a)return this.ga(b);var c=new F(a,b),d,e;b.e()?(d=this.m.remove(a),c=ke(this.wb,c,this.m)):(d=this.m.Oa(a,b),c=ie(this.wb,c,this.m));e=d.e()?C:this.aa;return new R(d,e,c)};g.G=function(a,b){var c=E(a);if(null===c)return b;K(".priority"!==E(a)||1===Kd(a),".priority must be the last token in a path");var d=this.R(c).G(H(a),b);return this.U(c,d)};g.e=function(){return this.m.e()};g.Db=function(){return this.m.count()};
var pe=/^(0|[1-9]\d*)$/;g=R.prototype;g.I=function(a){if(this.e())return null;var b={},c=0,d=0,e=!0;this.P(N,function(f,h){b[f]=h.I(a);c++;e&&pe.test(f)?d=Math.max(d,Number(f)):e=!1});if(!a&&e&&d<2*c){var f=[],h;for(h in b)f[h]=b[h];return f}a&&!this.C().e()&&(b[".priority"]=this.C().I());return b};g.hash=function(){if(null===this.Cb){var a="";this.C().e()||(a+="priority:"+oe(this.C().I())+":");this.P(N,function(b,c){var d=c.hash();""!==d&&(a+=":"+b+":"+d)});this.Cb=""===a?"":Hc(a)}return this.Cb};
g.rf=function(a,b,c){return(c=qe(this,c))?(a=cc(c,new F(a,b)))?a.name:null:cc(this.m,a)};function ud(a,b){var c;c=(c=qe(a,b))?(c=c.Sc())&&c.name:a.m.Sc();return c?new F(c,a.m.get(c)):null}function vd(a,b){var c;c=(c=qe(a,b))?(c=c.fc())&&c.name:a.m.fc();return c?new F(c,a.m.get(c)):null}g.P=function(a,b){var c=qe(this,a);return c?c.ia(function(a){return b(a.name,a.S)}):this.m.ia(b)};g.Xb=function(a){return this.Yb(a.Tc(),a)};
g.Yb=function(a,b){var c=qe(this,b);if(c)return c.Yb(a,function(a){return a});for(var c=this.m.Yb(a.name,Tb),d=ec(c);null!=d&&0>b.compare(d,a);)J(c),d=ec(c);return c};g.sf=function(a){return this.$b(a.Qc(),a)};g.$b=function(a,b){var c=qe(this,b);if(c)return c.$b(a,function(a){return a});for(var c=this.m.$b(a.name,Tb),d=ec(c);null!=d&&0<b.compare(d,a);)J(c),d=ec(c);return c};g.Dc=function(a){return this.e()?a.e()?0:-1:a.K()||a.e()?1:a===Vd?-1:0};
g.lb=function(a){if(a===Qd||ta(this.wb.dc,a.toString()))return this;var b=this.wb,c=this.m;K(a!==Qd,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var d=[],e=!1,c=c.Xb(Tb),f=J(c);f;)e=e||a.Ic(f.S),d.push(f),f=J(c);d=e?je(d,td(a)):Sd;e=a.toString();c=xa(b.dc);c[e]=a;a=xa(b.Bd);a[e]=d;return new R(this.m,this.aa,new he(a,c))};g.Jc=function(a){return a===Qd||ta(this.wb.dc,a.toString())};
g.ca=function(a){if(a===this)return!0;if(a.K())return!1;if(this.C().ca(a.C())&&this.m.count()===a.m.count()){var b=this.Xb(N);a=a.Xb(N);for(var c=J(b),d=J(a);c&&d;){if(c.name!==d.name||!c.S.ca(d.S))return!1;c=J(b);d=J(a)}return null===c&&null===d}return!1};function qe(a,b){return b===Qd?null:a.wb.get(b.toString())}g.toString=function(){return B(this.I(!0))};function M(a,b){if(null===a)return C;var c=null;"object"===typeof a&&".priority"in a?c=a[".priority"]:"undefined"!==typeof b&&(c=b);K(null===c||"string"===typeof c||"number"===typeof c||"object"===typeof c&&".sv"in c,"Invalid priority type found: "+typeof c);"object"===typeof a&&".value"in a&&null!==a[".value"]&&(a=a[".value"]);if("object"!==typeof a||".sv"in a)return new tc(a,M(c));if(a instanceof Array){var d=C,e=a;r(e,function(a,b){if(v(e,b)&&"."!==b.substring(0,1)){var c=M(a);if(c.K()||!c.e())d=
d.U(b,c)}});return d.ga(M(c))}var f=[],h=!1,k=a;ib(k,function(a){if("string"!==typeof a||"."!==a.substring(0,1)){var b=M(k[a]);b.e()||(h=h||!b.C().e(),f.push(new F(a,b)))}});if(0==f.length)return C;var l=je(f,Ub,function(a){return a.name},Wb);if(h){var m=je(f,td(N));return new R(l,M(c),new he({".priority":m},{".priority":N}))}return new R(l,M(c),le)}var re=Math.log(2);
function se(a){this.count=parseInt(Math.log(a+1)/re,10);this.jf=this.count-1;this.eg=a+1&parseInt(Array(this.count+1).join("1"),2)}function te(a){var b=!(a.eg&1<<a.jf);a.jf--;return b}
function je(a,b,c,d){function e(b,d){var f=d-b;if(0==f)return null;if(1==f){var m=a[b],t=c?c(m):m;return new fc(t,m.S,!1,null,null)}var m=parseInt(f/2,10)+b,f=e(b,m),z=e(m+1,d),m=a[m],t=c?c(m):m;return new fc(t,m.S,!1,f,z)}a.sort(b);var f=function(b){function d(b,h){var k=t-b,z=t;t-=b;var z=e(k+1,z),k=a[k],I=c?c(k):k,z=new fc(I,k.S,h,null,z);f?f.left=z:m=z;f=z}for(var f=null,m=null,t=a.length,z=0;z<b.count;++z){var I=te(b),zd=Math.pow(2,b.count-(z+1));I?d(zd,!1):(d(zd,!1),d(zd,!0))}return m}(new se(a.length));
return null!==f?new ac(d||b,f):new ac(d||b)}function oe(a){return"number"===typeof a?"number:"+Xc(a):"string:"+a}function me(a){if(a.K()){var b=a.I();K("string"===typeof b||"number"===typeof b||"object"===typeof b&&v(b,".sv"),"Priority must be a string or number.")}else K(a===Vd||a.e(),"priority of unexpected type.");K(a===Vd||a.C().e(),"Priority nodes can't have a priority of their own.")}var C=new R(new ac(Wb),null,le);function ue(){R.call(this,new ac(Wb),C,le)}ma(ue,R);g=ue.prototype;
g.Dc=function(a){return a===this?0:1};g.ca=function(a){return a===this};g.C=function(){return this};g.R=function(){return C};g.e=function(){return!1};var Vd=new ue,Td=new F("[MIN_NAME]",C),Zd=new F("[MAX_NAME]",Vd);function Id(a,b){this.O=a;this.Yd=b}function Fd(a,b,c,d){return new Id(new tb(b,c,d),a.Yd)}function Jd(a){return a.O.ea?a.O.j():null}Id.prototype.w=function(){return this.Yd};function ub(a){return a.Yd.ea?a.Yd.j():null};function ve(a,b){this.W=a;var c=a.n,d=new kd(c.g),c=S(c)?new kd(c.g):c.ja?new qd(c):new ld(c);this.Hf=new xd(c);var e=b.w(),f=b.O,h=d.xa(C,e.j(),null),k=c.xa(C,f.j(),null);this.Ka=new Id(new tb(k,f.ea,c.Na()),new tb(h,e.ea,d.Na()));this.Xa=[];this.lg=new cd(a)}function we(a){return a.W}g=ve.prototype;g.w=function(){return this.Ka.w().j()};g.fb=function(a){var b=ub(this.Ka);return b&&(S(this.W.n)||!a.e()&&!b.R(E(a)).e())?b.Q(a):null};g.e=function(){return 0===this.Xa.length};g.Pb=function(a){this.Xa.push(a)};
g.jb=function(a,b){var c=[];if(b){K(null==a,"A cancel should cancel all event registrations.");var d=this.W.path;Oa(this.Xa,function(a){(a=a.gf(b,d))&&c.push(a)})}if(a){for(var e=[],f=0;f<this.Xa.length;++f){var h=this.Xa[f];if(!h.matches(a))e.push(h);else if(a.tf()){e=e.concat(this.Xa.slice(f+1));break}}this.Xa=e}else this.Xa=[];return c};
g.ab=function(a,b,c){a.type===Bd&&null!==a.source.Hb&&(K(ub(this.Ka),"We should always have a full cache before handling merges"),K(Jd(this.Ka),"Missing event cache, even though we have a server cache"));var d=this.Ka;a=this.Hf.ab(d,a,b,c);b=this.Hf;c=a.je;K(c.O.j().Jc(b.V.g),"Event snap not indexed");K(c.w().j().Jc(b.V.g),"Server snap not indexed");K(Ib(a.je.w())||!Ib(d.w()),"Once a server snap is complete, it should never go back");this.Ka=a.je;return xe(this,a.fg,a.je.O.j(),null)};
function ye(a,b){var c=a.Ka.O,d=[];c.j().K()||c.j().P(N,function(a,b){d.push(new D("child_added",b,a))});c.ea&&d.push(Eb(c.j()));return xe(a,d,c.j(),b)}function xe(a,b,c,d){return dd(a.lg,b,c,d?[d]:a.Xa)};function ze(a,b,c){this.type=Bd;this.source=a;this.path=b;this.children=c}ze.prototype.Xc=function(a){if(this.path.e())return a=this.children.subtree(new L(a)),a.e()?null:a.value?new Xb(this.source,G,a.value):new ze(this.source,G,a);K(E(this.path)===a,"Can't get a merge for a child not on the path of the operation");return new ze(this.source,H(this.path),this.children)};ze.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"};function Ae(a,b){this.f=Mc("p:rest:");this.F=a;this.Gb=b;this.Aa=null;this.$={}}function Be(a,b){if(n(b))return"tag$"+b;K(fe(a.n),"should have a tag if it's not a default query.");return a.path.toString()}g=Ae.prototype;
g.yf=function(a,b,c,d){var e=a.path.toString();this.f("Listen called for "+e+" "+a.va());var f=Be(a,c),h={};this.$[f]=h;a=ge(a.n);var k=this;Ce(this,e+".json",a,function(a,b){var t=b;404===a&&(a=t=null);null===a&&k.Gb(e,t,!1,c);w(k.$,f)===h&&d(a?401==a?"permission_denied":"rest_error:"+a:"ok",null)})};g.Rf=function(a,b){var c=Be(a,b);delete this.$[c]};g.M=function(a,b){this.Aa=a;var c=$c(a),d=c.data,c=c.Bc&&c.Bc.exp;b&&b("ok",{auth:d,expires:c})};g.ge=function(a){this.Aa=null;a("ok",null)};g.Me=function(){};
g.Cf=function(){};g.Jd=function(){};g.put=function(){};g.zf=function(){};g.Ue=function(){};
function Ce(a,b,c,d){c=c||{};c.format="export";a.Aa&&(c.auth=a.Aa);var e=(a.F.kb?"https://":"http://")+a.F.host+b+"?"+kb(c);a.f("Sending REST request for "+e);var f=new XMLHttpRequest;f.onreadystatechange=function(){if(d&&4===f.readyState){a.f("REST Response for "+e+" received. status:",f.status,"response:",f.responseText);var b=null;if(200<=f.status&&300>f.status){try{b=nb(f.responseText)}catch(c){O("Failed to parse JSON response for "+e+": "+f.responseText)}d(null,b)}else 401!==f.status&&404!==
f.status&&O("Got unsuccessful REST response for "+e+" Status: "+f.status),d(f.status);d=null}};f.open("GET",e,!0);f.send()};function De(a){K(ea(a)&&0<a.length,"Requires a non-empty array");this.Xf=a;this.Oc={}}De.prototype.fe=function(a,b){var c;c=this.Oc[a]||[];var d=c.length;if(0<d){for(var e=Array(d),f=0;f<d;f++)e[f]=c[f];c=e}else c=[];for(d=0;d<c.length;d++)c[d].zc.apply(c[d].Ma,Array.prototype.slice.call(arguments,1))};De.prototype.Eb=function(a,b,c){Ee(this,a);this.Oc[a]=this.Oc[a]||[];this.Oc[a].push({zc:b,Ma:c});(a=this.Ae(a))&&b.apply(c,a)};
De.prototype.ic=function(a,b,c){Ee(this,a);a=this.Oc[a]||[];for(var d=0;d<a.length;d++)if(a[d].zc===b&&(!c||c===a[d].Ma)){a.splice(d,1);break}};function Ee(a,b){K(Ta(a.Xf,function(a){return a===b}),"Unknown event: "+b)};var Fe=function(){var a=0,b=[];return function(c){var d=c===a;a=c;for(var e=Array(8),f=7;0<=f;f--)e[f]="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(c%64),c=Math.floor(c/64);K(0===c,"Cannot push at time == 0");c=e.join("");if(d){for(f=11;0<=f&&63===b[f];f--)b[f]=0;b[f]++}else for(f=0;12>f;f++)b[f]=Math.floor(64*Math.random());for(f=0;12>f;f++)c+="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(b[f]);K(20===c.length,"nextPushId: Length should be 20.");
return c}}();function Ge(){De.call(this,["online"]);this.kc=!0;if("undefined"!==typeof window&&"undefined"!==typeof window.addEventListener){var a=this;window.addEventListener("online",function(){a.kc||(a.kc=!0,a.fe("online",!0))},!1);window.addEventListener("offline",function(){a.kc&&(a.kc=!1,a.fe("online",!1))},!1)}}ma(Ge,De);Ge.prototype.Ae=function(a){K("online"===a,"Unknown event type: "+a);return[this.kc]};ca(Ge);function He(){De.call(this,["visible"]);var a,b;"undefined"!==typeof document&&"undefined"!==typeof document.addEventListener&&("undefined"!==typeof document.hidden?(b="visibilitychange",a="hidden"):"undefined"!==typeof document.mozHidden?(b="mozvisibilitychange",a="mozHidden"):"undefined"!==typeof document.msHidden?(b="msvisibilitychange",a="msHidden"):"undefined"!==typeof document.webkitHidden&&(b="webkitvisibilitychange",a="webkitHidden"));this.Ob=!0;if(b){var c=this;document.addEventListener(b,
function(){var b=!document[a];b!==c.Ob&&(c.Ob=b,c.fe("visible",b))},!1)}}ma(He,De);He.prototype.Ae=function(a){K("visible"===a,"Unknown event type: "+a);return[this.Ob]};ca(He);function L(a,b){if(1==arguments.length){this.o=a.split("/");for(var c=0,d=0;d<this.o.length;d++)0<this.o[d].length&&(this.o[c]=this.o[d],c++);this.o.length=c;this.Z=0}else this.o=a,this.Z=b}function T(a,b){var c=E(a);if(null===c)return b;if(c===E(b))return T(H(a),H(b));throw Error("INTERNAL ERROR: innerPath ("+b+") is not within outerPath ("+a+")");}
function Ie(a,b){for(var c=a.slice(),d=b.slice(),e=0;e<c.length&&e<d.length;e++){var f=Vb(c[e],d[e]);if(0!==f)return f}return c.length===d.length?0:c.length<d.length?-1:1}function E(a){return a.Z>=a.o.length?null:a.o[a.Z]}function Kd(a){return a.o.length-a.Z}function H(a){var b=a.Z;b<a.o.length&&b++;return new L(a.o,b)}function Ld(a){return a.Z<a.o.length?a.o[a.o.length-1]:null}g=L.prototype;
g.toString=function(){for(var a="",b=this.Z;b<this.o.length;b++)""!==this.o[b]&&(a+="/"+this.o[b]);return a||"/"};g.slice=function(a){return this.o.slice(this.Z+(a||0))};g.parent=function(){if(this.Z>=this.o.length)return null;for(var a=[],b=this.Z;b<this.o.length-1;b++)a.push(this.o[b]);return new L(a,0)};
g.u=function(a){for(var b=[],c=this.Z;c<this.o.length;c++)b.push(this.o[c]);if(a instanceof L)for(c=a.Z;c<a.o.length;c++)b.push(a.o[c]);else for(a=a.split("/"),c=0;c<a.length;c++)0<a[c].length&&b.push(a[c]);return new L(b,0)};g.e=function(){return this.Z>=this.o.length};g.ca=function(a){if(Kd(this)!==Kd(a))return!1;for(var b=this.Z,c=a.Z;b<=this.o.length;b++,c++)if(this.o[b]!==a.o[c])return!1;return!0};
g.contains=function(a){var b=this.Z,c=a.Z;if(Kd(this)>Kd(a))return!1;for(;b<this.o.length;){if(this.o[b]!==a.o[c])return!1;++b;++c}return!0};var G=new L("");function Je(a,b){this.Qa=a.slice();this.Ha=Math.max(1,this.Qa.length);this.lf=b;for(var c=0;c<this.Qa.length;c++)this.Ha+=Zc(this.Qa[c]);Ke(this)}Je.prototype.push=function(a){0<this.Qa.length&&(this.Ha+=1);this.Qa.push(a);this.Ha+=Zc(a);Ke(this)};Je.prototype.pop=function(){var a=this.Qa.pop();this.Ha-=Zc(a);0<this.Qa.length&&--this.Ha};
function Ke(a){if(768<a.Ha)throw Error(a.lf+"has a key path longer than 768 bytes ("+a.Ha+").");if(32<a.Qa.length)throw Error(a.lf+"path specified exceeds the maximum depth that can be written (32) or object contains a cycle "+Le(a));}function Le(a){return 0==a.Qa.length?"":"in property '"+a.Qa.join(".")+"'"};function Me(a,b){this.value=a;this.children=b||Ne}var Ne=new ac(function(a,b){return a===b?0:a<b?-1:1});function Oe(a){var b=Pd;r(a,function(a,d){b=b.set(new L(d),a)});return b}g=Me.prototype;g.e=function(){return null===this.value&&this.children.e()};function Pe(a,b,c){if(null!=a.value&&c(a.value))return{path:G,value:a.value};if(b.e())return null;var d=E(b);a=a.children.get(d);return null!==a?(b=Pe(a,H(b),c),null!=b?{path:(new L(d)).u(b.path),value:b.value}:null):null}
function Qe(a,b){return Pe(a,b,function(){return!0})}g.subtree=function(a){if(a.e())return this;var b=this.children.get(E(a));return null!==b?b.subtree(H(a)):Pd};g.set=function(a,b){if(a.e())return new Me(b,this.children);var c=E(a),d=(this.children.get(c)||Pd).set(H(a),b),c=this.children.Oa(c,d);return new Me(this.value,c)};
g.remove=function(a){if(a.e())return this.children.e()?Pd:new Me(null,this.children);var b=E(a),c=this.children.get(b);return c?(a=c.remove(H(a)),b=a.e()?this.children.remove(b):this.children.Oa(b,a),null===this.value&&b.e()?Pd:new Me(this.value,b)):this};g.get=function(a){if(a.e())return this.value;var b=this.children.get(E(a));return b?b.get(H(a)):null};
function Od(a,b,c){if(b.e())return c;var d=E(b);b=Od(a.children.get(d)||Pd,H(b),c);d=b.e()?a.children.remove(d):a.children.Oa(d,b);return new Me(a.value,d)}function Re(a,b){return Se(a,G,b)}function Se(a,b,c){var d={};a.children.ia(function(a,f){d[a]=Se(f,b.u(a),c)});return c(b,a.value,d)}function Te(a,b,c){return Ue(a,b,G,c)}function Ue(a,b,c,d){var e=a.value?d(c,a.value):!1;if(e)return e;if(b.e())return null;e=E(b);return(a=a.children.get(e))?Ue(a,H(b),c.u(e),d):null}
function Ve(a,b,c){var d=G;if(!b.e()){var e=!0;a.value&&(e=c(d,a.value));!0===e&&(e=E(b),(a=a.children.get(e))&&We(a,H(b),d.u(e),c))}}function We(a,b,c,d){if(b.e())return a;a.value&&d(c,a.value);var e=E(b);return(a=a.children.get(e))?We(a,H(b),c.u(e),d):Pd}function Md(a,b){Xe(a,G,b)}function Xe(a,b,c){a.children.ia(function(a,e){Xe(e,b.u(a),c)});a.value&&c(b,a.value)}function Ye(a,b){a.children.ia(function(a,d){d.value&&b(a,d.value)})}var Pd=new Me(null);
Me.prototype.toString=function(){var a={};Md(this,function(b,c){a[b.toString()]=c.toString()});return B(a)};function Ze(a,b,c){this.type=Ed;this.source=$e;this.path=a;this.Qb=b;this.Vd=c}Ze.prototype.Xc=function(a){if(this.path.e()){if(null!=this.Qb.value)return K(this.Qb.children.e(),"affectedTree should not have overlapping affected paths."),this;a=this.Qb.subtree(new L(a));return new Ze(G,a,this.Vd)}K(E(this.path)===a,"operationForChild called for unrelated child.");return new Ze(H(this.path),this.Qb,this.Vd)};
Ze.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" ack write revert="+this.Vd+" affectedTree="+this.Qb+")"};var Yb=0,Bd=1,Ed=2,$b=3;function af(a,b,c,d){this.we=a;this.pf=b;this.Hb=c;this.af=d;K(!d||b,"Tagged queries must be from server.")}var $e=new af(!0,!1,null,!1),bf=new af(!1,!0,null,!1);af.prototype.toString=function(){return this.we?"user":this.af?"server(queryID="+this.Hb+")":"server"};function cf(a){this.X=a}var df=new cf(new Me(null));function ef(a,b,c){if(b.e())return new cf(new Me(c));var d=Qe(a.X,b);if(null!=d){var e=d.path,d=d.value;b=T(e,b);d=d.G(b,c);return new cf(a.X.set(e,d))}a=Od(a.X,b,new Me(c));return new cf(a)}function ff(a,b,c){var d=a;ib(c,function(a,c){d=ef(d,b.u(a),c)});return d}cf.prototype.Rd=function(a){if(a.e())return df;a=Od(this.X,a,Pd);return new cf(a)};function gf(a,b){var c=Qe(a.X,b);return null!=c?a.X.get(c.path).Q(T(c.path,b)):null}
function hf(a){var b=[],c=a.X.value;null!=c?c.K()||c.P(N,function(a,c){b.push(new F(a,c))}):a.X.children.ia(function(a,c){null!=c.value&&b.push(new F(a,c.value))});return b}function jf(a,b){if(b.e())return a;var c=gf(a,b);return null!=c?new cf(new Me(c)):new cf(a.X.subtree(b))}cf.prototype.e=function(){return this.X.e()};cf.prototype.apply=function(a){return kf(G,this.X,a)};
function kf(a,b,c){if(null!=b.value)return c.G(a,b.value);var d=null;b.children.ia(function(b,f){".priority"===b?(K(null!==f.value,"Priority writes must always be leaf nodes"),d=f.value):c=kf(a.u(b),f,c)});c.Q(a).e()||null===d||(c=c.G(a.u(".priority"),d));return c};function lf(){this.T=df;this.na=[];this.Mc=-1}function mf(a,b){for(var c=0;c<a.na.length;c++){var d=a.na[c];if(d.kd===b)return d}return null}g=lf.prototype;
g.Rd=function(a){var b=Ua(this.na,function(b){return b.kd===a});K(0<=b,"removeWrite called with nonexistent writeId.");var c=this.na[b];this.na.splice(b,1);for(var d=c.visible,e=!1,f=this.na.length-1;d&&0<=f;){var h=this.na[f];h.visible&&(f>=b&&nf(h,c.path)?d=!1:c.path.contains(h.path)&&(e=!0));f--}if(d){if(e)this.T=of(this.na,pf,G),this.Mc=0<this.na.length?this.na[this.na.length-1].kd:-1;else if(c.Ga)this.T=this.T.Rd(c.path);else{var k=this;r(c.children,function(a,b){k.T=k.T.Rd(c.path.u(b))})}return!0}return!1};
g.za=function(a,b,c,d){if(c||d){var e=jf(this.T,a);return!d&&e.e()?b:d||null!=b||null!=gf(e,G)?(e=of(this.na,function(b){return(b.visible||d)&&(!c||!(0<=Na(c,b.kd)))&&(b.path.contains(a)||a.contains(b.path))},a),b=b||C,e.apply(b)):null}e=gf(this.T,a);if(null!=e)return e;e=jf(this.T,a);return e.e()?b:null!=b||null!=gf(e,G)?(b=b||C,e.apply(b)):null};
g.yc=function(a,b){var c=C,d=gf(this.T,a);if(d)d.K()||d.P(N,function(a,b){c=c.U(a,b)});else if(b){var e=jf(this.T,a);b.P(N,function(a,b){var d=jf(e,new L(a)).apply(b);c=c.U(a,d)});Oa(hf(e),function(a){c=c.U(a.name,a.S)})}else e=jf(this.T,a),Oa(hf(e),function(a){c=c.U(a.name,a.S)});return c};g.ld=function(a,b,c,d){K(c||d,"Either existingEventSnap or existingServerSnap must exist");a=a.u(b);if(null!=gf(this.T,a))return null;a=jf(this.T,a);return a.e()?d.Q(b):a.apply(d.Q(b))};
g.xc=function(a,b,c){a=a.u(b);var d=gf(this.T,a);return null!=d?d:sb(c,b)?jf(this.T,a).apply(c.j().R(b)):null};g.tc=function(a){return gf(this.T,a)};g.ne=function(a,b,c,d,e,f){var h;a=jf(this.T,a);h=gf(a,G);if(null==h)if(null!=b)h=a.apply(b);else return[];h=h.lb(f);if(h.e()||h.K())return[];b=[];a=td(f);e=e?h.$b(c,f):h.Yb(c,f);for(f=J(e);f&&b.length<d;)0!==a(f,c)&&b.push(f),f=J(e);return b};
function nf(a,b){return a.Ga?a.path.contains(b):!!ua(a.children,function(c,d){return a.path.u(d).contains(b)})}function pf(a){return a.visible}
function of(a,b,c){for(var d=df,e=0;e<a.length;++e){var f=a[e];if(b(f)){var h=f.path;if(f.Ga)c.contains(h)?(h=T(c,h),d=ef(d,h,f.Ga)):h.contains(c)&&(h=T(h,c),d=ef(d,G,f.Ga.Q(h)));else if(f.children)if(c.contains(h))h=T(c,h),d=ff(d,h,f.children);else{if(h.contains(c))if(h=T(h,c),h.e())d=ff(d,G,f.children);else if(f=w(f.children,E(h)))f=f.Q(H(h)),d=ef(d,G,f)}else throw Fc("WriteRecord should have .snap or .children");}}return d}function qf(a,b){this.Mb=a;this.X=b}g=qf.prototype;
g.za=function(a,b,c){return this.X.za(this.Mb,a,b,c)};g.yc=function(a){return this.X.yc(this.Mb,a)};g.ld=function(a,b,c){return this.X.ld(this.Mb,a,b,c)};g.tc=function(a){return this.X.tc(this.Mb.u(a))};g.ne=function(a,b,c,d,e){return this.X.ne(this.Mb,a,b,c,d,e)};g.xc=function(a,b){return this.X.xc(this.Mb,a,b)};g.u=function(a){return new qf(this.Mb.u(a),this.X)};function rf(){this.ya={}}g=rf.prototype;g.e=function(){return wa(this.ya)};g.ab=function(a,b,c){var d=a.source.Hb;if(null!==d)return d=w(this.ya,d),K(null!=d,"SyncTree gave us an op for an invalid query."),d.ab(a,b,c);var e=[];r(this.ya,function(d){e=e.concat(d.ab(a,b,c))});return e};g.Pb=function(a,b,c,d,e){var f=a.va(),h=w(this.ya,f);if(!h){var h=c.za(e?d:null),k=!1;h?k=!0:(h=d instanceof R?c.yc(d):C,k=!1);h=new ve(a,new Id(new tb(h,k,!1),new tb(d,e,!1)));this.ya[f]=h}h.Pb(b);return ye(h,b)};
g.jb=function(a,b,c){var d=a.va(),e=[],f=[],h=null!=sf(this);if("default"===d){var k=this;r(this.ya,function(a,d){f=f.concat(a.jb(b,c));a.e()&&(delete k.ya[d],S(a.W.n)||e.push(a.W))})}else{var l=w(this.ya,d);l&&(f=f.concat(l.jb(b,c)),l.e()&&(delete this.ya[d],S(l.W.n)||e.push(l.W)))}h&&null==sf(this)&&e.push(new U(a.k,a.path));return{Kg:e,mg:f}};function tf(a){return Pa(ra(a.ya),function(a){return!S(a.W.n)})}g.fb=function(a){var b=null;r(this.ya,function(c){b=b||c.fb(a)});return b};
function uf(a,b){if(S(b.n))return sf(a);var c=b.va();return w(a.ya,c)}function sf(a){return va(a.ya,function(a){return S(a.W.n)})||null};function vf(a){this.ta=Pd;this.ib=new lf;this.$e={};this.mc={};this.Nc=a}function wf(a,b,c,d,e){var f=a.ib,h=e;K(d>f.Mc,"Stacking an older write on top of newer ones");n(h)||(h=!0);f.na.push({path:b,Ga:c,kd:d,visible:h});h&&(f.T=ef(f.T,b,c));f.Mc=d;return e?xf(a,new Xb($e,b,c)):[]}function yf(a,b,c,d){var e=a.ib;K(d>e.Mc,"Stacking an older merge on top of newer ones");e.na.push({path:b,children:c,kd:d,visible:!0});e.T=ff(e.T,b,c);e.Mc=d;c=Oe(c);return xf(a,new ze($e,b,c))}
function zf(a,b,c){c=c||!1;var d=mf(a.ib,b);if(a.ib.Rd(b)){var e=Pd;null!=d.Ga?e=e.set(G,!0):ib(d.children,function(a,b){e=e.set(new L(a),b)});return xf(a,new Ze(d.path,e,c))}return[]}function Af(a,b,c){c=Oe(c);return xf(a,new ze(bf,b,c))}function Bf(a,b,c,d){d=Cf(a,d);if(null!=d){var e=Df(d);d=e.path;e=e.Hb;b=T(d,b);c=new Xb(new af(!1,!0,e,!0),b,c);return Ef(a,d,c)}return[]}
function Ff(a,b,c,d){if(d=Cf(a,d)){var e=Df(d);d=e.path;e=e.Hb;b=T(d,b);c=Oe(c);c=new ze(new af(!1,!0,e,!0),b,c);return Ef(a,d,c)}return[]}
vf.prototype.Pb=function(a,b){var c=a.path,d=null,e=!1;Ve(this.ta,c,function(a,b){var f=T(a,c);d=b.fb(f);e=e||null!=sf(b);return!d});var f=this.ta.get(c);f?(e=e||null!=sf(f),d=d||f.fb(G)):(f=new rf,this.ta=this.ta.set(c,f));var h;null!=d?h=!0:(h=!1,d=C,Ye(this.ta.subtree(c),function(a,b){var c=b.fb(G);c&&(d=d.U(a,c))}));var k=null!=uf(f,a);if(!k&&!S(a.n)){var l=Gf(a);K(!(l in this.mc),"View does not exist, but we have a tag");var m=Hf++;this.mc[l]=m;this.$e["_"+m]=l}h=f.Pb(a,b,new qf(c,this.ib),d,
h);k||e||(f=uf(f,a),h=h.concat(If(this,a,f)));return h};
vf.prototype.jb=function(a,b,c){var d=a.path,e=this.ta.get(d),f=[];if(e&&("default"===a.va()||null!=uf(e,a))){f=e.jb(a,b,c);e.e()&&(this.ta=this.ta.remove(d));e=f.Kg;f=f.mg;b=-1!==Ua(e,function(a){return S(a.n)});var h=Te(this.ta,d,function(a,b){return null!=sf(b)});if(b&&!h&&(d=this.ta.subtree(d),!d.e()))for(var d=Jf(d),k=0;k<d.length;++k){var l=d[k],m=l.W,l=Kf(this,l);this.Nc.Xe(Lf(m),Mf(this,m),l.xd,l.H)}if(!h&&0<e.length&&!c)if(b)this.Nc.ae(Lf(a),null);else{var t=this;Oa(e,function(a){a.va();
var b=t.mc[Gf(a)];t.Nc.ae(Lf(a),b)})}Nf(this,e)}return f};vf.prototype.za=function(a,b){var c=this.ib,d=Te(this.ta,a,function(b,c){var d=T(b,a);if(d=c.fb(d))return d});return c.za(a,d,b,!0)};function Jf(a){return Re(a,function(a,c,d){if(c&&null!=sf(c))return[sf(c)];var e=[];c&&(e=tf(c));r(d,function(a){e=e.concat(a)});return e})}function Nf(a,b){for(var c=0;c<b.length;++c){var d=b[c];if(!S(d.n)){var d=Gf(d),e=a.mc[d];delete a.mc[d];delete a.$e["_"+e]}}}
function Lf(a){return S(a.n)&&!fe(a.n)?a.Ib():a}function If(a,b,c){var d=b.path,e=Mf(a,b);c=Kf(a,c);b=a.Nc.Xe(Lf(b),e,c.xd,c.H);d=a.ta.subtree(d);if(e)K(null==sf(d.value),"If we're adding a query, it shouldn't be shadowed");else for(e=Re(d,function(a,b,c){if(!a.e()&&b&&null!=sf(b))return[we(sf(b))];var d=[];b&&(d=d.concat(Qa(tf(b),function(a){return a.W})));r(c,function(a){d=d.concat(a)});return d}),d=0;d<e.length;++d)c=e[d],a.Nc.ae(Lf(c),Mf(a,c));return b}
function Kf(a,b){var c=b.W,d=Mf(a,c);return{xd:function(){return(b.w()||C).hash()},H:function(b){if("ok"===b){if(d){var f=c.path;if(b=Cf(a,d)){var h=Df(b);b=h.path;h=h.Hb;f=T(b,f);f=new Zb(new af(!1,!0,h,!0),f);b=Ef(a,b,f)}else b=[]}else b=xf(a,new Zb(bf,c.path));return b}f="Unknown Error";"too_big"===b?f="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"==b?f="Client doesn't have permission to access the desired data.":"unavailable"==b&&
(f="The service is unavailable");f=Error(b+": "+f);f.code=b.toUpperCase();return a.jb(c,null,f)}}}function Gf(a){return a.path.toString()+"$"+a.va()}function Df(a){var b=a.indexOf("$");K(-1!==b&&b<a.length-1,"Bad queryKey.");return{Hb:a.substr(b+1),path:new L(a.substr(0,b))}}function Cf(a,b){var c=a.$e,d="_"+b;return d in c?c[d]:void 0}function Mf(a,b){var c=Gf(b);return w(a.mc,c)}var Hf=1;
function Ef(a,b,c){var d=a.ta.get(b);K(d,"Missing sync point for query tag that we're tracking");return d.ab(c,new qf(b,a.ib),null)}function xf(a,b){return Of(a,b,a.ta,null,new qf(G,a.ib))}function Of(a,b,c,d,e){if(b.path.e())return Pf(a,b,c,d,e);var f=c.get(G);null==d&&null!=f&&(d=f.fb(G));var h=[],k=E(b.path),l=b.Xc(k);if((c=c.children.get(k))&&l)var m=d?d.R(k):null,k=e.u(k),h=h.concat(Of(a,l,c,m,k));f&&(h=h.concat(f.ab(b,e,d)));return h}
function Pf(a,b,c,d,e){var f=c.get(G);null==d&&null!=f&&(d=f.fb(G));var h=[];c.children.ia(function(c,f){var m=d?d.R(c):null,t=e.u(c),z=b.Xc(c);z&&(h=h.concat(Pf(a,z,f,m,t)))});f&&(h=h.concat(f.ab(b,e,d)));return h};function Qf(){this.children={};this.nd=0;this.value=null}function Rf(a,b,c){this.Gd=a?a:"";this.Zc=b?b:null;this.A=c?c:new Qf}function Sf(a,b){for(var c=b instanceof L?b:new L(b),d=a,e;null!==(e=E(c));)d=new Rf(e,d,w(d.A.children,e)||new Qf),c=H(c);return d}g=Rf.prototype;g.Ca=function(){return this.A.value};function Tf(a,b){K("undefined"!==typeof b,"Cannot set value to undefined");a.A.value=b;Uf(a)}g.clear=function(){this.A.value=null;this.A.children={};this.A.nd=0;Uf(this)};
g.wd=function(){return 0<this.A.nd};g.e=function(){return null===this.Ca()&&!this.wd()};g.P=function(a){var b=this;r(this.A.children,function(c,d){a(new Rf(d,b,c))})};function Vf(a,b,c,d){c&&!d&&b(a);a.P(function(a){Vf(a,b,!0,d)});c&&d&&b(a)}function Wf(a,b){for(var c=a.parent();null!==c&&!b(c);)c=c.parent()}g.path=function(){return new L(null===this.Zc?this.Gd:this.Zc.path()+"/"+this.Gd)};g.name=function(){return this.Gd};g.parent=function(){return this.Zc};
function Uf(a){if(null!==a.Zc){var b=a.Zc,c=a.Gd,d=a.e(),e=v(b.A.children,c);d&&e?(delete b.A.children[c],b.A.nd--,Uf(b)):d||e||(b.A.children[c]=a.A,b.A.nd++,Uf(b))}};var Xf=/[\[\].#$\/\u0000-\u001F\u007F]/,Yf=/[\[\].#$\u0000-\u001F\u007F]/,Zf=/^[a-zA-Z][a-zA-Z._\-+]+$/;function $f(a){return p(a)&&0!==a.length&&!Xf.test(a)}function ag(a){return null===a||p(a)||ga(a)&&!Qc(a)||ia(a)&&v(a,".sv")}function bg(a,b,c,d){d&&!n(b)||cg(y(a,1,d),b,c)}
function cg(a,b,c){c instanceof L&&(c=new Je(c,a));if(!n(b))throw Error(a+"contains undefined "+Le(c));if(ha(b))throw Error(a+"contains a function "+Le(c)+" with contents: "+b.toString());if(Qc(b))throw Error(a+"contains "+b.toString()+" "+Le(c));if(p(b)&&b.length>10485760/3&&10485760<Zc(b))throw Error(a+"contains a string greater than 10485760 utf8 bytes "+Le(c)+" ('"+b.substring(0,50)+"...')");if(ia(b)){var d=!1,e=!1;ib(b,function(b,h){if(".value"===b)d=!0;else if(".priority"!==b&&".sv"!==b&&(e=
!0,!$f(b)))throw Error(a+" contains an invalid key ("+b+") "+Le(c)+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');c.push(b);cg(a,h,c);c.pop()});if(d&&e)throw Error(a+' contains ".value" child '+Le(c)+" in addition to actual children.");}}
function dg(a,b){var c,d;for(c=0;c<b.length;c++){d=b[c];for(var e=d.slice(),f=0;f<e.length;f++)if((".priority"!==e[f]||f!==e.length-1)&&!$f(e[f]))throw Error(a+"contains an invalid key ("+e[f]+") in path "+d.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');}b.sort(Ie);e=null;for(c=0;c<b.length;c++){d=b[c];if(null!==e&&e.contains(d))throw Error(a+"contains a path "+e.toString()+" that is ancestor of another path "+d.toString());e=d}}
function eg(a,b,c){var d=y(a,1,!1);if(!ia(b)||ea(b))throw Error(d+" must be an object containing the children to replace.");var e=[];ib(b,function(a,b){var k=new L(a);cg(d,b,c.u(k));if(".priority"===Ld(k)&&!ag(b))throw Error(d+"contains an invalid value for '"+k.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");e.push(k)});dg(d,e)}
function fg(a,b,c){if(Qc(c))throw Error(y(a,b,!1)+"is "+c.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!ag(c))throw Error(y(a,b,!1)+"must be a valid Firebase priority (a string, finite number, server value, or null).");}
function gg(a,b,c){if(!c||n(b))switch(b){case "value":case "child_added":case "child_removed":case "child_changed":case "child_moved":break;default:throw Error(y(a,1,c)+'must be a valid event type: "value", "child_added", "child_removed", "child_changed", or "child_moved".');}}function hg(a,b){if(n(b)&&!$f(b))throw Error(y(a,2,!0)+'was an invalid key: "'+b+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").');}
function ig(a,b){if(!p(b)||0===b.length||Yf.test(b))throw Error(y(a,1,!1)+'was an invalid path: "'+b+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"');}function jg(a,b){if(".info"===E(b))throw Error(a+" failed: Can't modify data under /.info/");}function kg(a,b){if(!p(b))throw Error(y(a,1,!1)+"must be a valid credential (a string).");}function lg(a,b,c){if(!p(c))throw Error(y(a,b,!1)+"must be a valid string.");}
function mg(a,b){lg(a,1,b);if(!Zf.test(b))throw Error(y(a,1,!1)+"'"+b+"' is not a valid authentication provider.");}function ng(a,b,c,d){if(!d||n(c))if(!ia(c)||null===c)throw Error(y(a,b,d)+"must be a valid object.");}function og(a,b,c){if(!ia(b)||!v(b,c))throw Error(y(a,1,!1)+'must contain the key "'+c+'"');if(!p(w(b,c)))throw Error(y(a,1,!1)+'must contain the key "'+c+'" with type "string"');};function pg(){this.set={}}g=pg.prototype;g.add=function(a,b){this.set[a]=null!==b?b:!0};g.contains=function(a){return v(this.set,a)};g.get=function(a){return this.contains(a)?this.set[a]:void 0};g.remove=function(a){delete this.set[a]};g.clear=function(){this.set={}};g.e=function(){return wa(this.set)};g.count=function(){return pa(this.set)};function qg(a,b){r(a.set,function(a,d){b(d,a)})}g.keys=function(){var a=[];r(this.set,function(b,c){a.push(c)});return a};function qc(){this.m=this.B=null}qc.prototype.find=function(a){if(null!=this.B)return this.B.Q(a);if(a.e()||null==this.m)return null;var b=E(a);a=H(a);return this.m.contains(b)?this.m.get(b).find(a):null};qc.prototype.nc=function(a,b){if(a.e())this.B=b,this.m=null;else if(null!==this.B)this.B=this.B.G(a,b);else{null==this.m&&(this.m=new pg);var c=E(a);this.m.contains(c)||this.m.add(c,new qc);c=this.m.get(c);a=H(a);c.nc(a,b)}};
function rg(a,b){if(b.e())return a.B=null,a.m=null,!0;if(null!==a.B){if(a.B.K())return!1;var c=a.B;a.B=null;c.P(N,function(b,c){a.nc(new L(b),c)});return rg(a,b)}return null!==a.m?(c=E(b),b=H(b),a.m.contains(c)&&rg(a.m.get(c),b)&&a.m.remove(c),a.m.e()?(a.m=null,!0):!1):!0}function rc(a,b,c){null!==a.B?c(b,a.B):a.P(function(a,e){var f=new L(b.toString()+"/"+a);rc(e,f,c)})}qc.prototype.P=function(a){null!==this.m&&qg(this.m,function(b,c){a(b,c)})};var sg="auth.firebase.com";function tg(a,b,c){this.od=a||{};this.ee=b||{};this.$a=c||{};this.od.remember||(this.od.remember="default")}var ug=["remember","redirectTo"];function vg(a){var b={},c={};ib(a||{},function(a,e){0<=Na(ug,a)?b[a]=e:c[a]=e});return new tg(b,{},c)};function wg(a,b){this.Qe=["session",a.Od,a.hc].join(":");this.be=b}wg.prototype.set=function(a,b){if(!b)if(this.be.length)b=this.be[0];else throw Error("fb.login.SessionManager : No storage options available!");b.set(this.Qe,a)};wg.prototype.get=function(){var a=Qa(this.be,q(this.qg,this)),a=Pa(a,function(a){return null!==a});Xa(a,function(a,c){return ad(c.token)-ad(a.token)});return 0<a.length?a.shift():null};wg.prototype.qg=function(a){try{var b=a.get(this.Qe);if(b&&b.token)return b}catch(c){}return null};
wg.prototype.clear=function(){var a=this;Oa(this.be,function(b){b.remove(a.Qe)})};function xg(){return"undefined"!==typeof navigator&&"string"===typeof navigator.userAgent?navigator.userAgent:""}function yg(){return"undefined"!==typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(xg())}function zg(){return"undefined"!==typeof location&&/^file:\//.test(location.href)}
function Ag(a){var b=xg();if(""===b)return!1;if("Microsoft Internet Explorer"===navigator.appName){if((b=b.match(/MSIE ([0-9]{1,}[\.0-9]{0,})/))&&1<b.length)return parseFloat(b[1])>=a}else if(-1<b.indexOf("Trident")&&(b=b.match(/rv:([0-9]{2,2}[\.0-9]{0,})/))&&1<b.length)return parseFloat(b[1])>=a;return!1};function Bg(){var a=window.opener.frames,b;for(b=a.length-1;0<=b;b--)try{if(a[b].location.protocol===window.location.protocol&&a[b].location.host===window.location.host&&"__winchan_relay_frame"===a[b].name)return a[b]}catch(c){}return null}function Cg(a,b,c){a.attachEvent?a.attachEvent("on"+b,c):a.addEventListener&&a.addEventListener(b,c,!1)}function Dg(a,b,c){a.detachEvent?a.detachEvent("on"+b,c):a.removeEventListener&&a.removeEventListener(b,c,!1)}
function Eg(a){/^https?:\/\//.test(a)||(a=window.location.href);var b=/^(https?:\/\/[\-_a-zA-Z\.0-9:]+)/.exec(a);return b?b[1]:a}function Fg(a){var b="";try{a=a.replace("#","");var c=lb(a);c&&v(c,"__firebase_request_key")&&(b=w(c,"__firebase_request_key"))}catch(d){}return b}function Gg(){var a=Pc(sg);return a.scheme+"://"+a.host+"/v2"}function Hg(a){return Gg()+"/"+a+"/auth/channel"};function Ig(a){var b=this;this.Ac=a;this.ce="*";Ag(8)?this.Rc=this.zd=Bg():(this.Rc=window.opener,this.zd=window);if(!b.Rc)throw"Unable to find relay frame";Cg(this.zd,"message",q(this.jc,this));Cg(this.zd,"message",q(this.Bf,this));try{Jg(this,{a:"ready"})}catch(c){Cg(this.Rc,"load",function(){Jg(b,{a:"ready"})})}Cg(window,"unload",q(this.Bg,this))}function Jg(a,b){b=B(b);Ag(8)?a.Rc.doPost(b,a.ce):a.Rc.postMessage(b,a.ce)}
Ig.prototype.jc=function(a){var b=this,c;try{c=nb(a.data)}catch(d){}c&&"request"===c.a&&(Dg(window,"message",this.jc),this.ce=a.origin,this.Ac&&setTimeout(function(){b.Ac(b.ce,c.d,function(a,c){b.dg=!c;b.Ac=void 0;Jg(b,{a:"response",d:a,forceKeepWindowOpen:c})})},0))};Ig.prototype.Bg=function(){try{Dg(this.zd,"message",this.Bf)}catch(a){}this.Ac&&(Jg(this,{a:"error",d:"unknown closed window"}),this.Ac=void 0);try{window.close()}catch(b){}};Ig.prototype.Bf=function(a){if(this.dg&&"die"===a.data)try{window.close()}catch(b){}};function Kg(a){this.pc=Ga()+Ga()+Ga();this.Ef=a}Kg.prototype.open=function(a,b){yc.set("redirect_request_id",this.pc);yc.set("redirect_request_id",this.pc);b.requestId=this.pc;b.redirectTo=b.redirectTo||window.location.href;a+=(/\?/.test(a)?"":"?")+kb(b);window.location=a};Kg.isAvailable=function(){return!zg()&&!yg()};Kg.prototype.Cc=function(){return"redirect"};var Lg={NETWORK_ERROR:"Unable to contact the Firebase server.",SERVER_ERROR:"An unknown server error occurred.",TRANSPORT_UNAVAILABLE:"There are no login transports available for the requested method.",REQUEST_INTERRUPTED:"The browser redirected the page before the login request could complete.",USER_CANCELLED:"The user cancelled authentication."};function Mg(a){var b=Error(w(Lg,a),a);b.code=a;return b};function Ng(a){var b;(b=!a.window_features)||(b=xg(),b=-1!==b.indexOf("Fennec/")||-1!==b.indexOf("Firefox/")&&-1!==b.indexOf("Android"));b&&(a.window_features=void 0);a.window_name||(a.window_name="_blank");this.options=a}
Ng.prototype.open=function(a,b,c){function d(a){h&&(document.body.removeChild(h),h=void 0);t&&(t=clearInterval(t));Dg(window,"message",e);Dg(window,"unload",d);if(m&&!a)try{m.close()}catch(b){k.postMessage("die",l)}m=k=void 0}function e(a){if(a.origin===l)try{var b=nb(a.data);"ready"===b.a?k.postMessage(z,l):"error"===b.a?(d(!1),c&&(c(b.d),c=null)):"response"===b.a&&(d(b.forceKeepWindowOpen),c&&(c(null,b.d),c=null))}catch(e){}}var f=Ag(8),h,k;if(!this.options.relay_url)return c(Error("invalid arguments: origin of url and relay_url must match"));
var l=Eg(a);if(l!==Eg(this.options.relay_url))c&&setTimeout(function(){c(Error("invalid arguments: origin of url and relay_url must match"))},0);else{f&&(h=document.createElement("iframe"),h.setAttribute("src",this.options.relay_url),h.style.display="none",h.setAttribute("name","__winchan_relay_frame"),document.body.appendChild(h),k=h.contentWindow);a+=(/\?/.test(a)?"":"?")+kb(b);var m=window.open(a,this.options.window_name,this.options.window_features);k||(k=m);var t=setInterval(function(){m&&m.closed&&
(d(!1),c&&(c(Mg("USER_CANCELLED")),c=null))},500),z=B({a:"request",d:b});Cg(window,"unload",d);Cg(window,"message",e)}};
Ng.isAvailable=function(){var a;if(a="postMessage"in window&&!zg())(a=yg()||"undefined"!==typeof navigator&&(!!xg().match(/Windows Phone/)||!!window.Windows&&/^ms-appx:/.test(location.href)))||(a=xg(),a="undefined"!==typeof navigator&&"undefined"!==typeof window&&!!(a.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i)||a.match(/CriOS/)||a.match(/Twitter for iPhone/)||a.match(/FBAN\/FBIOS/)||window.navigator.standalone)),a=!a;return a&&!xg().match(/PhantomJS/)};Ng.prototype.Cc=function(){return"popup"};function Og(a){a.method||(a.method="GET");a.headers||(a.headers={});a.headers.content_type||(a.headers.content_type="application/json");a.headers.content_type=a.headers.content_type.toLowerCase();this.options=a}
Og.prototype.open=function(a,b,c){function d(){c&&(c(Mg("REQUEST_INTERRUPTED")),c=null)}var e=new XMLHttpRequest,f=this.options.method.toUpperCase(),h;Cg(window,"beforeunload",d);e.onreadystatechange=function(){if(c&&4===e.readyState){var a;if(200<=e.status&&300>e.status){try{a=nb(e.responseText)}catch(b){}c(null,a)}else 500<=e.status&&600>e.status?c(Mg("SERVER_ERROR")):c(Mg("NETWORK_ERROR"));c=null;Dg(window,"beforeunload",d)}};if("GET"===f)a+=(/\?/.test(a)?"":"?")+kb(b),h=null;else{var k=this.options.headers.content_type;
"application/json"===k&&(h=B(b));"application/x-www-form-urlencoded"===k&&(h=kb(b))}e.open(f,a,!0);a={"X-Requested-With":"XMLHttpRequest",Accept:"application/json;text/plain"};za(a,this.options.headers);for(var l in a)e.setRequestHeader(l,a[l]);e.send(h)};Og.isAvailable=function(){var a;if(a=!!window.XMLHttpRequest)a=xg(),a=!(a.match(/MSIE/)||a.match(/Trident/))||Ag(10);return a};Og.prototype.Cc=function(){return"json"};function Pg(a){this.pc=Ga()+Ga()+Ga();this.Ef=a}
Pg.prototype.open=function(a,b,c){function d(){c&&(c(Mg("USER_CANCELLED")),c=null)}var e=this,f=Pc(sg),h;b.requestId=this.pc;b.redirectTo=f.scheme+"://"+f.host+"/blank/page.html";a+=/\?/.test(a)?"":"?";a+=kb(b);(h=window.open(a,"_blank","location=no"))&&ha(h.addEventListener)?(h.addEventListener("loadstart",function(a){var b;if(b=a&&a.url)a:{try{var m=document.createElement("a");m.href=a.url;b=m.host===f.host&&"/blank/page.html"===m.pathname;break a}catch(t){}b=!1}b&&(a=Fg(a.url),h.removeEventListener("exit",
d),h.close(),a=new tg(null,null,{requestId:e.pc,requestKey:a}),e.Ef.requestWithCredential("/auth/session",a,c),c=null)}),h.addEventListener("exit",d)):c(Mg("TRANSPORT_UNAVAILABLE"))};Pg.isAvailable=function(){return yg()};Pg.prototype.Cc=function(){return"redirect"};function Qg(a){a.callback_parameter||(a.callback_parameter="callback");this.options=a;window.__firebase_auth_jsonp=window.__firebase_auth_jsonp||{}}
Qg.prototype.open=function(a,b,c){function d(){c&&(c(Mg("REQUEST_INTERRUPTED")),c=null)}function e(){setTimeout(function(){window.__firebase_auth_jsonp[f]=void 0;wa(window.__firebase_auth_jsonp)&&(window.__firebase_auth_jsonp=void 0);try{var a=document.getElementById(f);a&&a.parentNode.removeChild(a)}catch(b){}},1);Dg(window,"beforeunload",d)}var f="fn"+(new Date).getTime()+Math.floor(99999*Math.random());b[this.options.callback_parameter]="__firebase_auth_jsonp."+f;a+=(/\?/.test(a)?"":"?")+kb(b);
Cg(window,"beforeunload",d);window.__firebase_auth_jsonp[f]=function(a){c&&(c(null,a),c=null);e()};Rg(f,a,c)};
function Rg(a,b,c){setTimeout(function(){try{var d=document.createElement("script");d.type="text/javascript";d.id=a;d.async=!0;d.src=b;d.onerror=function(){var b=document.getElementById(a);null!==b&&b.parentNode.removeChild(b);c&&c(Mg("NETWORK_ERROR"))};var e=document.getElementsByTagName("head");(e&&0!=e.length?e[0]:document.documentElement).appendChild(d)}catch(f){c&&c(Mg("NETWORK_ERROR"))}},0)}Qg.isAvailable=function(){return"undefined"!==typeof document&&null!=document.createElement};
Qg.prototype.Cc=function(){return"json"};function Sg(a,b,c,d){De.call(this,["auth_status"]);this.F=a;this.df=b;this.Vg=c;this.Le=d;this.sc=new wg(a,[xc,yc]);this.mb=null;this.Se=!1;Tg(this)}ma(Sg,De);g=Sg.prototype;g.xe=function(){return this.mb||null};function Tg(a){yc.get("redirect_request_id")&&Ug(a);var b=a.sc.get();b&&b.token?(Vg(a,b),a.df(b.token,function(c,d){Wg(a,c,d,!1,b.token,b)},function(b,d){Xg(a,"resumeSession()",b,d)})):Vg(a,null)}
function Yg(a,b,c,d,e,f){"firebaseio-demo.com"===a.F.domain&&O("Firebase authentication is not supported on demo Firebases (*.firebaseio-demo.com). To secure your Firebase, create a production Firebase at https://www.firebase.com.");a.df(b,function(f,k){Wg(a,f,k,!0,b,c,d||{},e)},function(b,c){Xg(a,"auth()",b,c,f)})}function Zg(a,b){a.sc.clear();Vg(a,null);a.Vg(function(a,d){if("ok"===a)P(b,null);else{var e=(a||"error").toUpperCase(),f=e;d&&(f+=": "+d);f=Error(f);f.code=e;P(b,f)}})}
function Wg(a,b,c,d,e,f,h,k){"ok"===b?(d&&(b=c.auth,f.auth=b,f.expires=c.expires,f.token=bd(e)?e:"",c=null,b&&v(b,"uid")?c=w(b,"uid"):v(f,"uid")&&(c=w(f,"uid")),f.uid=c,c="custom",b&&v(b,"provider")?c=w(b,"provider"):v(f,"provider")&&(c=w(f,"provider")),f.provider=c,a.sc.clear(),bd(e)&&(h=h||{},c=xc,"sessionOnly"===h.remember&&(c=yc),"none"!==h.remember&&a.sc.set(f,c)),Vg(a,f)),P(k,null,f)):(a.sc.clear(),Vg(a,null),f=a=(b||"error").toUpperCase(),c&&(f+=": "+c),f=Error(f),f.code=a,P(k,f))}
function Xg(a,b,c,d,e){O(b+" was canceled: "+d);a.sc.clear();Vg(a,null);a=Error(d);a.code=c.toUpperCase();P(e,a)}function $g(a,b,c,d,e){ah(a);c=new tg(d||{},{},c||{});bh(a,[Og,Qg],"/auth/"+b,c,e)}
function ch(a,b,c,d){ah(a);var e=[Ng,Pg];c=vg(c);"anonymous"===b||"password"===b?setTimeout(function(){P(d,Mg("TRANSPORT_UNAVAILABLE"))},0):(c.ee.window_features="menubar=yes,modal=yes,alwaysRaised=yeslocation=yes,resizable=yes,scrollbars=yes,status=yes,height=625,width=625,top="+("object"===typeof screen?.5*(screen.height-625):0)+",left="+("object"===typeof screen?.5*(screen.width-625):0),c.ee.relay_url=Hg(a.F.hc),c.ee.requestWithCredential=q(a.qc,a),bh(a,e,"/auth/"+b,c,d))}
function Ug(a){var b=yc.get("redirect_request_id");if(b){var c=yc.get("redirect_client_options");yc.remove("redirect_request_id");yc.remove("redirect_client_options");var d=[Og,Qg],b={requestId:b,requestKey:Fg(document.location.hash)},c=new tg(c,{},b);a.Se=!0;try{document.location.hash=document.location.hash.replace(/&__firebase_request_key=([a-zA-z0-9]*)/,"")}catch(e){}bh(a,d,"/auth/session",c,function(){this.Se=!1}.bind(a))}}
g.se=function(a,b){ah(this);var c=vg(a);c.$a._method="POST";this.qc("/users",c,function(a,c){a?P(b,a):P(b,a,c)})};g.Te=function(a,b){var c=this;ah(this);var d="/users/"+encodeURIComponent(a.email),e=vg(a);e.$a._method="DELETE";this.qc(d,e,function(a,d){!a&&d&&d.uid&&c.mb&&c.mb.uid&&c.mb.uid===d.uid&&Zg(c);P(b,a)})};g.pe=function(a,b){ah(this);var c="/users/"+encodeURIComponent(a.email)+"/password",d=vg(a);d.$a._method="PUT";d.$a.password=a.newPassword;this.qc(c,d,function(a){P(b,a)})};
g.oe=function(a,b){ah(this);var c="/users/"+encodeURIComponent(a.oldEmail)+"/email",d=vg(a);d.$a._method="PUT";d.$a.email=a.newEmail;d.$a.password=a.password;this.qc(c,d,function(a){P(b,a)})};g.Ve=function(a,b){ah(this);var c="/users/"+encodeURIComponent(a.email)+"/password",d=vg(a);d.$a._method="POST";this.qc(c,d,function(a){P(b,a)})};g.qc=function(a,b,c){dh(this,[Og,Qg],a,b,c)};
function bh(a,b,c,d,e){dh(a,b,c,d,function(b,c){!b&&c&&c.token&&c.uid?Yg(a,c.token,c,d.od,function(a,b){a?P(e,a):P(e,null,b)}):P(e,b||Mg("UNKNOWN_ERROR"))})}
function dh(a,b,c,d,e){b=Pa(b,function(a){return"function"===typeof a.isAvailable&&a.isAvailable()});0===b.length?setTimeout(function(){P(e,Mg("TRANSPORT_UNAVAILABLE"))},0):(b=new (b.shift())(d.ee),d=jb(d.$a),d.v="js-"+hb,d.transport=b.Cc(),d.suppress_status_codes=!0,a=Gg()+"/"+a.F.hc+c,b.open(a,d,function(a,b){if(a)P(e,a);else if(b&&b.error){var c=Error(b.error.message);c.code=b.error.code;c.details=b.error.details;P(e,c)}else P(e,null,b)}))}
function Vg(a,b){var c=null!==a.mb||null!==b;a.mb=b;c&&a.fe("auth_status",b);a.Le(null!==b)}g.Ae=function(a){K("auth_status"===a,'initial event must be of type "auth_status"');return this.Se?null:[this.mb]};function ah(a){var b=a.F;if("firebaseio.com"!==b.domain&&"firebaseio-demo.com"!==b.domain&&"auth.firebase.com"===sg)throw Error("This custom Firebase server ('"+a.F.domain+"') does not support delegated login.");};var Cc="websocket",Dc="long_polling";function eh(a){this.jc=a;this.Nd=[];this.Sb=0;this.qe=-1;this.Fb=null}function fh(a,b,c){a.qe=b;a.Fb=c;a.qe<a.Sb&&(a.Fb(),a.Fb=null)}function gh(a,b,c){for(a.Nd[b]=c;a.Nd[a.Sb];){var d=a.Nd[a.Sb];delete a.Nd[a.Sb];for(var e=0;e<d.length;++e)if(d[e]){var f=a;Db(function(){f.jc(d[e])})}if(a.Sb===a.qe){a.Fb&&(clearTimeout(a.Fb),a.Fb(),a.Fb=null);break}a.Sb++}};function hh(a,b,c,d){this.re=a;this.f=Mc(a);this.nb=this.ob=0;this.Ua=Rb(b);this.Qf=c;this.Hc=!1;this.Bb=d;this.jd=function(a){return Bc(b,Dc,a)}}var ih,jh;
hh.prototype.open=function(a,b){this.hf=0;this.la=b;this.Af=new eh(a);this.zb=!1;var c=this;this.qb=setTimeout(function(){c.f("Timed out trying to connect.");c.gb();c.qb=null},Math.floor(3E4));Rc(function(){if(!c.zb){c.Sa=new kh(function(a,b,d,k,l){lh(c,arguments);if(c.Sa)if(c.qb&&(clearTimeout(c.qb),c.qb=null),c.Hc=!0,"start"==a)c.id=b,c.Gf=d;else if("close"===a)b?(c.Sa.Xd=!1,fh(c.Af,b,function(){c.gb()})):c.gb();else throw Error("Unrecognized command received: "+a);},function(a,b){lh(c,arguments);
gh(c.Af,a,b)},function(){c.gb()},c.jd);var a={start:"t"};a.ser=Math.floor(1E8*Math.random());c.Sa.he&&(a.cb=c.Sa.he);a.v="5";c.Qf&&(a.s=c.Qf);c.Bb&&(a.ls=c.Bb);"undefined"!==typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(a.r="f");a=c.jd(a);c.f("Connecting via long-poll to "+a);mh(c.Sa,a,function(){})}})};
hh.prototype.start=function(){var a=this.Sa,b=this.Gf;a.ug=this.id;a.vg=b;for(a.le=!0;nh(a););a=this.id;b=this.Gf;this.gc=document.createElement("iframe");var c={dframe:"t"};c.id=a;c.pw=b;this.gc.src=this.jd(c);this.gc.style.display="none";document.body.appendChild(this.gc)};
hh.isAvailable=function(){return ih||!jh&&"undefined"!==typeof document&&null!=document.createElement&&!("object"===typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href))&&!("object"===typeof Windows&&"object"===typeof Windows.Xg)&&!0};g=hh.prototype;g.Ed=function(){};g.dd=function(){this.zb=!0;this.Sa&&(this.Sa.close(),this.Sa=null);this.gc&&(document.body.removeChild(this.gc),this.gc=null);this.qb&&(clearTimeout(this.qb),this.qb=null)};
g.gb=function(){this.zb||(this.f("Longpoll is closing itself"),this.dd(),this.la&&(this.la(this.Hc),this.la=null))};g.close=function(){this.zb||(this.f("Longpoll is being closed."),this.dd())};g.send=function(a){a=B(a);this.ob+=a.length;Ob(this.Ua,"bytes_sent",a.length);a=Ic(a);a=fb(a,!0);a=Vc(a,1840);for(var b=0;b<a.length;b++){var c=this.Sa;c.ad.push({Mg:this.hf,Ug:a.length,kf:a[b]});c.le&&nh(c);this.hf++}};function lh(a,b){var c=B(b).length;a.nb+=c;Ob(a.Ua,"bytes_received",c)}
function kh(a,b,c,d){this.jd=d;this.hb=c;this.Pe=new pg;this.ad=[];this.te=Math.floor(1E8*Math.random());this.Xd=!0;this.he=Ec();window["pLPCommand"+this.he]=a;window["pRTLPCB"+this.he]=b;a=document.createElement("iframe");a.style.display="none";if(document.body){document.body.appendChild(a);try{a.contentWindow.document||Cb("No IE domain setting required")}catch(e){a.src="javascript:void((function(){document.open();document.domain='"+document.domain+"';document.close();})())"}}else throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";
a.contentDocument?a.eb=a.contentDocument:a.contentWindow?a.eb=a.contentWindow.document:a.document&&(a.eb=a.document);this.Ea=a;a="";this.Ea.src&&"javascript:"===this.Ea.src.substr(0,11)&&(a='<script>document.domain="'+document.domain+'";\x3c/script>');a="<html><body>"+a+"</body></html>";try{this.Ea.eb.open(),this.Ea.eb.write(a),this.Ea.eb.close()}catch(f){Cb("frame writing exception"),f.stack&&Cb(f.stack),Cb(f)}}
kh.prototype.close=function(){this.le=!1;if(this.Ea){this.Ea.eb.body.innerHTML="";var a=this;setTimeout(function(){null!==a.Ea&&(document.body.removeChild(a.Ea),a.Ea=null)},Math.floor(0))}var b=this.hb;b&&(this.hb=null,b())};
function nh(a){if(a.le&&a.Xd&&a.Pe.count()<(0<a.ad.length?2:1)){a.te++;var b={};b.id=a.ug;b.pw=a.vg;b.ser=a.te;for(var b=a.jd(b),c="",d=0;0<a.ad.length;)if(1870>=a.ad[0].kf.length+30+c.length){var e=a.ad.shift(),c=c+"&seg"+d+"="+e.Mg+"&ts"+d+"="+e.Ug+"&d"+d+"="+e.kf;d++}else break;oh(a,b+c,a.te);return!0}return!1}function oh(a,b,c){function d(){a.Pe.remove(c);nh(a)}a.Pe.add(c,1);var e=setTimeout(d,Math.floor(25E3));mh(a,b,function(){clearTimeout(e);d()})}
function mh(a,b,c){setTimeout(function(){try{if(a.Xd){var d=a.Ea.eb.createElement("script");d.type="text/javascript";d.async=!0;d.src=b;d.onload=d.onreadystatechange=function(){var a=d.readyState;a&&"loaded"!==a&&"complete"!==a||(d.onload=d.onreadystatechange=null,d.parentNode&&d.parentNode.removeChild(d),c())};d.onerror=function(){Cb("Long-poll script failed to load: "+b);a.Xd=!1;a.close()};a.Ea.eb.body.appendChild(d)}}catch(e){}},Math.floor(1))};var ph=null;"undefined"!==typeof MozWebSocket?ph=MozWebSocket:"undefined"!==typeof WebSocket&&(ph=WebSocket);function qh(a,b,c,d){this.re=a;this.f=Mc(this.re);this.frames=this.Kc=null;this.nb=this.ob=this.bf=0;this.Ua=Rb(b);a={v:"5"};"undefined"!==typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(a.r="f");c&&(a.s=c);d&&(a.ls=d);this.ef=Bc(b,Cc,a)}var rh;
qh.prototype.open=function(a,b){this.hb=b;this.zg=a;this.f("Websocket connecting to "+this.ef);this.Hc=!1;xc.set("previous_websocket_failure",!0);try{this.ua=new ph(this.ef)}catch(c){this.f("Error instantiating WebSocket.");var d=c.message||c.data;d&&this.f(d);this.gb();return}var e=this;this.ua.onopen=function(){e.f("Websocket connected.");e.Hc=!0};this.ua.onclose=function(){e.f("Websocket connection was disconnected.");e.ua=null;e.gb()};this.ua.onmessage=function(a){if(null!==e.ua)if(a=a.data,e.nb+=
a.length,Ob(e.Ua,"bytes_received",a.length),sh(e),null!==e.frames)th(e,a);else{a:{K(null===e.frames,"We already have a frame buffer");if(6>=a.length){var b=Number(a);if(!isNaN(b)){e.bf=b;e.frames=[];a=null;break a}}e.bf=1;e.frames=[]}null!==a&&th(e,a)}};this.ua.onerror=function(a){e.f("WebSocket error.  Closing connection.");(a=a.message||a.data)&&e.f(a);e.gb()}};qh.prototype.start=function(){};
qh.isAvailable=function(){var a=!1;if("undefined"!==typeof navigator&&navigator.userAgent){var b=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);b&&1<b.length&&4.4>parseFloat(b[1])&&(a=!0)}return!a&&null!==ph&&!rh};qh.responsesRequiredToBeHealthy=2;qh.healthyTimeout=3E4;g=qh.prototype;g.Ed=function(){xc.remove("previous_websocket_failure")};function th(a,b){a.frames.push(b);if(a.frames.length==a.bf){var c=a.frames.join("");a.frames=null;c=nb(c);a.zg(c)}}
g.send=function(a){sh(this);a=B(a);this.ob+=a.length;Ob(this.Ua,"bytes_sent",a.length);a=Vc(a,16384);1<a.length&&this.ua.send(String(a.length));for(var b=0;b<a.length;b++)this.ua.send(a[b])};g.dd=function(){this.zb=!0;this.Kc&&(clearInterval(this.Kc),this.Kc=null);this.ua&&(this.ua.close(),this.ua=null)};g.gb=function(){this.zb||(this.f("WebSocket is closing itself"),this.dd(),this.hb&&(this.hb(this.Hc),this.hb=null))};g.close=function(){this.zb||(this.f("WebSocket is being closed"),this.dd())};
function sh(a){clearInterval(a.Kc);a.Kc=setInterval(function(){a.ua&&a.ua.send("0");sh(a)},Math.floor(45E3))};function uh(a){vh(this,a)}var wh=[hh,qh];function vh(a,b){var c=qh&&qh.isAvailable(),d=c&&!(xc.wf||!0===xc.get("previous_websocket_failure"));b.Wg&&(c||O("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),d=!0);if(d)a.gd=[qh];else{var e=a.gd=[];Wc(wh,function(a,b){b&&b.isAvailable()&&e.push(b)})}}function xh(a){if(0<a.gd.length)return a.gd[0];throw Error("No transports available");};function yh(a,b,c,d,e,f,h){this.id=a;this.f=Mc("c:"+this.id+":");this.jc=c;this.Wc=d;this.la=e;this.Ne=f;this.F=b;this.Md=[];this.ff=0;this.Pf=new uh(b);this.Ta=0;this.Bb=h;this.f("Connection created");zh(this)}
function zh(a){var b=xh(a.Pf);a.J=new b("c:"+a.id+":"+a.ff++,a.F,void 0,a.Bb);a.Re=b.responsesRequiredToBeHealthy||0;var c=Ah(a,a.J),d=Bh(a,a.J);a.hd=a.J;a.cd=a.J;a.D=null;a.Ab=!1;setTimeout(function(){a.J&&a.J.open(c,d)},Math.floor(0));b=b.healthyTimeout||0;0<b&&(a.yd=setTimeout(function(){a.yd=null;a.Ab||(a.J&&102400<a.J.nb?(a.f("Connection exceeded healthy timeout but has received "+a.J.nb+" bytes.  Marking connection healthy."),a.Ab=!0,a.J.Ed()):a.J&&10240<a.J.ob?a.f("Connection exceeded healthy timeout but has sent "+
a.J.ob+" bytes.  Leaving connection alive."):(a.f("Closing unhealthy connection after timeout."),a.close()))},Math.floor(b)))}function Bh(a,b){return function(c){b===a.J?(a.J=null,c||0!==a.Ta?1===a.Ta&&a.f("Realtime connection lost."):(a.f("Realtime connection failed."),"s-"===a.F.Ya.substr(0,2)&&(xc.remove("host:"+a.F.host),a.F.Ya=a.F.host)),a.close()):b===a.D?(a.f("Secondary connection lost."),c=a.D,a.D=null,a.hd!==c&&a.cd!==c||a.close()):a.f("closing an old connection")}}
function Ah(a,b){return function(c){if(2!=a.Ta)if(b===a.cd){var d=Tc("t",c);c=Tc("d",c);if("c"==d){if(d=Tc("t",c),"d"in c)if(c=c.d,"h"===d){var d=c.ts,e=c.v,f=c.h;a.Nf=c.s;Ac(a.F,f);0==a.Ta&&(a.J.start(),Ch(a,a.J,d),"5"!==e&&O("Protocol version mismatch detected"),c=a.Pf,(c=1<c.gd.length?c.gd[1]:null)&&Dh(a,c))}else if("n"===d){a.f("recvd end transmission on primary");a.cd=a.D;for(c=0;c<a.Md.length;++c)a.Id(a.Md[c]);a.Md=[];Eh(a)}else"s"===d?(a.f("Connection shutdown command received. Shutting down..."),
a.Ne&&(a.Ne(c),a.Ne=null),a.la=null,a.close()):"r"===d?(a.f("Reset packet received.  New host: "+c),Ac(a.F,c),1===a.Ta?a.close():(Fh(a),zh(a))):"e"===d?Nc("Server Error: "+c):"o"===d?(a.f("got pong on primary."),Gh(a),Hh(a)):Nc("Unknown control packet command: "+d)}else"d"==d&&a.Id(c)}else if(b===a.D)if(d=Tc("t",c),c=Tc("d",c),"c"==d)"t"in c&&(c=c.t,"a"===c?Ih(a):"r"===c?(a.f("Got a reset on secondary, closing it"),a.D.close(),a.hd!==a.D&&a.cd!==a.D||a.close()):"o"===c&&(a.f("got pong on secondary."),
a.Mf--,Ih(a)));else if("d"==d)a.Md.push(c);else throw Error("Unknown protocol layer: "+d);else a.f("message on old connection")}}yh.prototype.Fa=function(a){Jh(this,{t:"d",d:a})};function Eh(a){a.hd===a.D&&a.cd===a.D&&(a.f("cleaning up and promoting a connection: "+a.D.re),a.J=a.D,a.D=null)}
function Ih(a){0>=a.Mf?(a.f("Secondary connection is healthy."),a.Ab=!0,a.D.Ed(),a.D.start(),a.f("sending client ack on secondary"),a.D.send({t:"c",d:{t:"a",d:{}}}),a.f("Ending transmission on primary"),a.J.send({t:"c",d:{t:"n",d:{}}}),a.hd=a.D,Eh(a)):(a.f("sending ping on secondary."),a.D.send({t:"c",d:{t:"p",d:{}}}))}yh.prototype.Id=function(a){Gh(this);this.jc(a)};function Gh(a){a.Ab||(a.Re--,0>=a.Re&&(a.f("Primary connection is healthy."),a.Ab=!0,a.J.Ed()))}
function Dh(a,b){a.D=new b("c:"+a.id+":"+a.ff++,a.F,a.Nf);a.Mf=b.responsesRequiredToBeHealthy||0;a.D.open(Ah(a,a.D),Bh(a,a.D));setTimeout(function(){a.D&&(a.f("Timed out trying to upgrade."),a.D.close())},Math.floor(6E4))}function Ch(a,b,c){a.f("Realtime connection established.");a.J=b;a.Ta=1;a.Wc&&(a.Wc(c,a.Nf),a.Wc=null);0===a.Re?(a.f("Primary connection is healthy."),a.Ab=!0):setTimeout(function(){Hh(a)},Math.floor(5E3))}
function Hh(a){a.Ab||1!==a.Ta||(a.f("sending ping on primary."),Jh(a,{t:"c",d:{t:"p",d:{}}}))}function Jh(a,b){if(1!==a.Ta)throw"Connection is not connected";a.hd.send(b)}yh.prototype.close=function(){2!==this.Ta&&(this.f("Closing realtime connection."),this.Ta=2,Fh(this),this.la&&(this.la(),this.la=null))};function Fh(a){a.f("Shutting down all connections");a.J&&(a.J.close(),a.J=null);a.D&&(a.D.close(),a.D=null);a.yd&&(clearTimeout(a.yd),a.yd=null)};function Kh(a,b,c,d){this.id=Lh++;this.f=Mc("p:"+this.id+":");this.xf=this.Ee=!1;this.$={};this.qa=[];this.Yc=0;this.Vc=[];this.oa=!1;this.Za=1E3;this.Fd=3E5;this.Gb=b;this.Uc=c;this.Oe=d;this.F=a;this.sb=this.Aa=this.Ia=this.Bb=this.We=null;this.Ob=!1;this.Td={};this.Lg=0;this.nf=!0;this.Lc=this.Ge=null;Mh(this,0);He.ub().Eb("visible",this.Cg,this);-1===a.host.indexOf("fblocal")&&Ge.ub().Eb("online",this.Ag,this)}var Lh=0,Nh=0;g=Kh.prototype;
g.Fa=function(a,b,c){var d=++this.Lg;a={r:d,a:a,b:b};this.f(B(a));K(this.oa,"sendRequest call when we're not connected not allowed.");this.Ia.Fa(a);c&&(this.Td[d]=c)};g.yf=function(a,b,c,d){var e=a.va(),f=a.path.toString();this.f("Listen called for "+f+" "+e);this.$[f]=this.$[f]||{};K(fe(a.n)||!S(a.n),"listen() called for non-default but complete query");K(!this.$[f][e],"listen() called twice for same path/queryId.");a={H:d,xd:b,Ig:a,tag:c};this.$[f][e]=a;this.oa&&Oh(this,a)};
function Oh(a,b){var c=b.Ig,d=c.path.toString(),e=c.va();a.f("Listen on "+d+" for "+e);var f={p:d};b.tag&&(f.q=ee(c.n),f.t=b.tag);f.h=b.xd();a.Fa("q",f,function(f){var k=f.d,l=f.s;if(k&&"object"===typeof k&&v(k,"w")){var m=w(k,"w");ea(m)&&0<=Na(m,"no_index")&&O("Using an unspecified index. Consider adding "+('".indexOn": "'+c.n.g.toString()+'"')+" at "+c.path.toString()+" to your security rules for better performance")}(a.$[d]&&a.$[d][e])===b&&(a.f("listen response",f),"ok"!==l&&Ph(a,d,e),b.H&&b.H(l,
k))})}g.M=function(a,b,c){this.Aa={ig:a,of:!1,zc:b,md:c};this.f("Authenticating using credential: "+a);Qh(this);(b=40==a.length)||(a=$c(a).Bc,b="object"===typeof a&&!0===w(a,"admin"));b&&(this.f("Admin auth credential detected.  Reducing max reconnect time."),this.Fd=3E4)};g.ge=function(a){delete this.Aa;this.oa&&this.Fa("unauth",{},function(b){a(b.s,b.d)})};
function Qh(a){var b=a.Aa;a.oa&&b&&a.Fa("auth",{cred:b.ig},function(c){var d=c.s;c=c.d||"error";"ok"!==d&&a.Aa===b&&delete a.Aa;b.of?"ok"!==d&&b.md&&b.md(d,c):(b.of=!0,b.zc&&b.zc(d,c))})}g.Rf=function(a,b){var c=a.path.toString(),d=a.va();this.f("Unlisten called for "+c+" "+d);K(fe(a.n)||!S(a.n),"unlisten() called for non-default but complete query");if(Ph(this,c,d)&&this.oa){var e=ee(a.n);this.f("Unlisten on "+c+" for "+d);c={p:c};b&&(c.q=e,c.t=b);this.Fa("n",c)}};
g.Me=function(a,b,c){this.oa?Rh(this,"o",a,b,c):this.Vc.push({$c:a,action:"o",data:b,H:c})};g.Cf=function(a,b,c){this.oa?Rh(this,"om",a,b,c):this.Vc.push({$c:a,action:"om",data:b,H:c})};g.Jd=function(a,b){this.oa?Rh(this,"oc",a,null,b):this.Vc.push({$c:a,action:"oc",data:null,H:b})};function Rh(a,b,c,d,e){c={p:c,d:d};a.f("onDisconnect "+b,c);a.Fa(b,c,function(a){e&&setTimeout(function(){e(a.s,a.d)},Math.floor(0))})}g.put=function(a,b,c,d){Sh(this,"p",a,b,c,d)};
g.zf=function(a,b,c,d){Sh(this,"m",a,b,c,d)};function Sh(a,b,c,d,e,f){d={p:c,d:d};n(f)&&(d.h=f);a.qa.push({action:b,Jf:d,H:e});a.Yc++;b=a.qa.length-1;a.oa?Th(a,b):a.f("Buffering put: "+c)}function Th(a,b){var c=a.qa[b].action,d=a.qa[b].Jf,e=a.qa[b].H;a.qa[b].Jg=a.oa;a.Fa(c,d,function(d){a.f(c+" response",d);delete a.qa[b];a.Yc--;0===a.Yc&&(a.qa=[]);e&&e(d.s,d.d)})}
g.Ue=function(a){this.oa&&(a={c:a},this.f("reportStats",a),this.Fa("s",a,function(a){"ok"!==a.s&&this.f("reportStats","Error sending stats: "+a.d)}))};
g.Id=function(a){if("r"in a){this.f("from server: "+B(a));var b=a.r,c=this.Td[b];c&&(delete this.Td[b],c(a.b))}else{if("error"in a)throw"A server-side error has occurred: "+a.error;"a"in a&&(b=a.a,c=a.b,this.f("handleServerMessage",b,c),"d"===b?this.Gb(c.p,c.d,!1,c.t):"m"===b?this.Gb(c.p,c.d,!0,c.t):"c"===b?Uh(this,c.p,c.q):"ac"===b?(a=c.s,b=c.d,c=this.Aa,delete this.Aa,c&&c.md&&c.md(a,b)):"sd"===b?this.We?this.We(c):"msg"in c&&"undefined"!==typeof console&&console.log("FIREBASE: "+c.msg.replace("\n",
"\nFIREBASE: ")):Nc("Unrecognized action received from server: "+B(b)+"\nAre you using the latest client?"))}};g.Wc=function(a,b){this.f("connection ready");this.oa=!0;this.Lc=(new Date).getTime();this.Oe({serverTimeOffset:a-(new Date).getTime()});this.Bb=b;if(this.nf){var c={};c["sdk.js."+hb.replace(/\./g,"-")]=1;yg()&&(c["framework.cordova"]=1);this.Ue(c)}Vh(this);this.nf=!1;this.Uc(!0)};
function Mh(a,b){K(!a.Ia,"Scheduling a connect when we're already connected/ing?");a.sb&&clearTimeout(a.sb);a.sb=setTimeout(function(){a.sb=null;Wh(a)},Math.floor(b))}g.Cg=function(a){a&&!this.Ob&&this.Za===this.Fd&&(this.f("Window became visible.  Reducing delay."),this.Za=1E3,this.Ia||Mh(this,0));this.Ob=a};g.Ag=function(a){a?(this.f("Browser went online."),this.Za=1E3,this.Ia||Mh(this,0)):(this.f("Browser went offline.  Killing connection."),this.Ia&&this.Ia.close())};
g.Df=function(){this.f("data client disconnected");this.oa=!1;this.Ia=null;for(var a=0;a<this.qa.length;a++){var b=this.qa[a];b&&"h"in b.Jf&&b.Jg&&(b.H&&b.H("disconnect"),delete this.qa[a],this.Yc--)}0===this.Yc&&(this.qa=[]);this.Td={};Xh(this)&&(this.Ob?this.Lc&&(3E4<(new Date).getTime()-this.Lc&&(this.Za=1E3),this.Lc=null):(this.f("Window isn't visible.  Delaying reconnect."),this.Za=this.Fd,this.Ge=(new Date).getTime()),a=Math.max(0,this.Za-((new Date).getTime()-this.Ge)),a*=Math.random(),this.f("Trying to reconnect in "+
a+"ms"),Mh(this,a),this.Za=Math.min(this.Fd,1.3*this.Za));this.Uc(!1)};function Wh(a){if(Xh(a)){a.f("Making a connection attempt");a.Ge=(new Date).getTime();a.Lc=null;var b=q(a.Id,a),c=q(a.Wc,a),d=q(a.Df,a),e=a.id+":"+Nh++;a.Ia=new yh(e,a.F,b,c,d,function(b){O(b+" ("+a.F.toString()+")");a.xf=!0},a.Bb)}}g.yb=function(){this.Ee=!0;this.Ia?this.Ia.close():(this.sb&&(clearTimeout(this.sb),this.sb=null),this.oa&&this.Df())};g.rc=function(){this.Ee=!1;this.Za=1E3;this.Ia||Mh(this,0)};
function Uh(a,b,c){c=c?Qa(c,function(a){return Uc(a)}).join("$"):"default";(a=Ph(a,b,c))&&a.H&&a.H("permission_denied")}function Ph(a,b,c){b=(new L(b)).toString();var d;n(a.$[b])?(d=a.$[b][c],delete a.$[b][c],0===pa(a.$[b])&&delete a.$[b]):d=void 0;return d}function Vh(a){Qh(a);r(a.$,function(b){r(b,function(b){Oh(a,b)})});for(var b=0;b<a.qa.length;b++)a.qa[b]&&Th(a,b);for(;a.Vc.length;)b=a.Vc.shift(),Rh(a,b.action,b.$c,b.data,b.H)}function Xh(a){var b;b=Ge.ub().kc;return!a.xf&&!a.Ee&&b};var V={og:function(){ih=rh=!0}};V.forceLongPolling=V.og;V.pg=function(){jh=!0};V.forceWebSockets=V.pg;V.Pg=function(a,b){a.k.Ra.We=b};V.setSecurityDebugCallback=V.Pg;V.Ye=function(a,b){a.k.Ye(b)};V.stats=V.Ye;V.Ze=function(a,b){a.k.Ze(b)};V.statsIncrementCounter=V.Ze;V.sd=function(a){return a.k.sd};V.dataUpdateCount=V.sd;V.sg=function(a,b){a.k.De=b};V.interceptServerData=V.sg;V.yg=function(a){new Ig(a)};V.onPopupOpen=V.yg;V.Ng=function(a){sg=a};V.setAuthenticationServer=V.Ng;function Q(a,b,c){this.A=a;this.W=b;this.g=c}Q.prototype.I=function(){x("Firebase.DataSnapshot.val",0,0,arguments.length);return this.A.I()};Q.prototype.val=Q.prototype.I;Q.prototype.mf=function(){x("Firebase.DataSnapshot.exportVal",0,0,arguments.length);return this.A.I(!0)};Q.prototype.exportVal=Q.prototype.mf;Q.prototype.ng=function(){x("Firebase.DataSnapshot.exists",0,0,arguments.length);return!this.A.e()};Q.prototype.exists=Q.prototype.ng;
Q.prototype.u=function(a){x("Firebase.DataSnapshot.child",0,1,arguments.length);ga(a)&&(a=String(a));ig("Firebase.DataSnapshot.child",a);var b=new L(a),c=this.W.u(b);return new Q(this.A.Q(b),c,N)};Q.prototype.child=Q.prototype.u;Q.prototype.Da=function(a){x("Firebase.DataSnapshot.hasChild",1,1,arguments.length);ig("Firebase.DataSnapshot.hasChild",a);var b=new L(a);return!this.A.Q(b).e()};Q.prototype.hasChild=Q.prototype.Da;
Q.prototype.C=function(){x("Firebase.DataSnapshot.getPriority",0,0,arguments.length);return this.A.C().I()};Q.prototype.getPriority=Q.prototype.C;Q.prototype.forEach=function(a){x("Firebase.DataSnapshot.forEach",1,1,arguments.length);A("Firebase.DataSnapshot.forEach",1,a,!1);if(this.A.K())return!1;var b=this;return!!this.A.P(this.g,function(c,d){return a(new Q(d,b.W.u(c),N))})};Q.prototype.forEach=Q.prototype.forEach;
Q.prototype.wd=function(){x("Firebase.DataSnapshot.hasChildren",0,0,arguments.length);return this.A.K()?!1:!this.A.e()};Q.prototype.hasChildren=Q.prototype.wd;Q.prototype.name=function(){O("Firebase.DataSnapshot.name() being deprecated. Please use Firebase.DataSnapshot.key() instead.");x("Firebase.DataSnapshot.name",0,0,arguments.length);return this.key()};Q.prototype.name=Q.prototype.name;Q.prototype.key=function(){x("Firebase.DataSnapshot.key",0,0,arguments.length);return this.W.key()};
Q.prototype.key=Q.prototype.key;Q.prototype.Db=function(){x("Firebase.DataSnapshot.numChildren",0,0,arguments.length);return this.A.Db()};Q.prototype.numChildren=Q.prototype.Db;Q.prototype.Ib=function(){x("Firebase.DataSnapshot.ref",0,0,arguments.length);return this.W};Q.prototype.ref=Q.prototype.Ib;function Yh(a,b){this.F=a;this.Ua=Rb(a);this.fd=null;this.da=new vb;this.Hd=1;this.Ra=null;b||0<=("object"===typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)?(this.ba=new Ae(this.F,q(this.Gb,this)),setTimeout(q(this.Uc,this,!0),0)):this.ba=this.Ra=new Kh(this.F,q(this.Gb,this),q(this.Uc,this),q(this.Oe,this));this.Sg=Sb(a,q(function(){return new Mb(this.Ua,this.ba)},this));this.uc=new Rf;
this.Ce=new ob;var c=this;this.Cd=new vf({Xe:function(a,b,f,h){b=[];f=c.Ce.j(a.path);f.e()||(b=xf(c.Cd,new Xb(bf,a.path,f)),setTimeout(function(){h("ok")},0));return b},ae:ba});Zh(this,"connected",!1);this.la=new qc;this.M=new Sg(a,q(this.ba.M,this.ba),q(this.ba.ge,this.ba),q(this.Le,this));this.sd=0;this.De=null;this.L=new vf({Xe:function(a,b,f,h){c.ba.yf(a,f,b,function(b,e){var f=h(b,e);Ab(c.da,a.path,f)});return[]},ae:function(a,b){c.ba.Rf(a,b)}})}g=Yh.prototype;
g.toString=function(){return(this.F.kb?"https://":"http://")+this.F.host};g.name=function(){return this.F.hc};function $h(a){a=a.Ce.j(new L(".info/serverTimeOffset")).I()||0;return(new Date).getTime()+a}function ai(a){a=a={timestamp:$h(a)};a.timestamp=a.timestamp||(new Date).getTime();return a}
g.Gb=function(a,b,c,d){this.sd++;var e=new L(a);b=this.De?this.De(a,b):b;a=[];d?c?(b=na(b,function(a){return M(a)}),a=Ff(this.L,e,b,d)):(b=M(b),a=Bf(this.L,e,b,d)):c?(d=na(b,function(a){return M(a)}),a=Af(this.L,e,d)):(d=M(b),a=xf(this.L,new Xb(bf,e,d)));d=e;0<a.length&&(d=bi(this,e));Ab(this.da,d,a)};g.Uc=function(a){Zh(this,"connected",a);!1===a&&ci(this)};g.Oe=function(a){var b=this;Wc(a,function(a,d){Zh(b,d,a)})};g.Le=function(a){Zh(this,"authenticated",a)};
function Zh(a,b,c){b=new L("/.info/"+b);c=M(c);var d=a.Ce;d.Wd=d.Wd.G(b,c);c=xf(a.Cd,new Xb(bf,b,c));Ab(a.da,b,c)}g.Kb=function(a,b,c,d){this.f("set",{path:a.toString(),value:b,$g:c});var e=ai(this);b=M(b,c);var e=sc(b,e),f=this.Hd++,e=wf(this.L,a,e,f,!0);wb(this.da,e);var h=this;this.ba.put(a.toString(),b.I(!0),function(b,c){var e="ok"===b;e||O("set at "+a+" failed: "+b);e=zf(h.L,f,!e);Ab(h.da,a,e);di(d,b,c)});e=ei(this,a);bi(this,e);Ab(this.da,e,[])};
g.update=function(a,b,c){this.f("update",{path:a.toString(),value:b});var d=!0,e=ai(this),f={};r(b,function(a,b){d=!1;var c=M(a);f[b]=sc(c,e)});if(d)Cb("update() called with empty data.  Don't do anything."),di(c,"ok");else{var h=this.Hd++,k=yf(this.L,a,f,h);wb(this.da,k);var l=this;this.ba.zf(a.toString(),b,function(b,d){var e="ok"===b;e||O("update at "+a+" failed: "+b);var e=zf(l.L,h,!e),f=a;0<e.length&&(f=bi(l,a));Ab(l.da,f,e);di(c,b,d)});b=ei(this,a);bi(this,b);Ab(this.da,a,[])}};
function ci(a){a.f("onDisconnectEvents");var b=ai(a),c=[];rc(pc(a.la,b),G,function(b,e){c=c.concat(xf(a.L,new Xb(bf,b,e)));var f=ei(a,b);bi(a,f)});a.la=new qc;Ab(a.da,G,c)}g.Jd=function(a,b){var c=this;this.ba.Jd(a.toString(),function(d,e){"ok"===d&&rg(c.la,a);di(b,d,e)})};function fi(a,b,c,d){var e=M(c);a.ba.Me(b.toString(),e.I(!0),function(c,h){"ok"===c&&a.la.nc(b,e);di(d,c,h)})}function gi(a,b,c,d,e){var f=M(c,d);a.ba.Me(b.toString(),f.I(!0),function(c,d){"ok"===c&&a.la.nc(b,f);di(e,c,d)})}
function hi(a,b,c,d){var e=!0,f;for(f in c)e=!1;e?(Cb("onDisconnect().update() called with empty data.  Don't do anything."),di(d,"ok")):a.ba.Cf(b.toString(),c,function(e,f){if("ok"===e)for(var l in c){var m=M(c[l]);a.la.nc(b.u(l),m)}di(d,e,f)})}function ii(a,b,c){c=".info"===E(b.path)?a.Cd.Pb(b,c):a.L.Pb(b,c);yb(a.da,b.path,c)}g.yb=function(){this.Ra&&this.Ra.yb()};g.rc=function(){this.Ra&&this.Ra.rc()};
g.Ye=function(a){if("undefined"!==typeof console){a?(this.fd||(this.fd=new Lb(this.Ua)),a=this.fd.get()):a=this.Ua.get();var b=Ra(sa(a),function(a,b){return Math.max(b.length,a)},0),c;for(c in a){for(var d=a[c],e=c.length;e<b+2;e++)c+=" ";console.log(c+d)}}};g.Ze=function(a){Ob(this.Ua,a);this.Sg.Of[a]=!0};g.f=function(a){var b="";this.Ra&&(b=this.Ra.id+":");Cb(b,arguments)};
function di(a,b,c){a&&Db(function(){if("ok"==b)a(null);else{var d=(b||"error").toUpperCase(),e=d;c&&(e+=": "+c);e=Error(e);e.code=d;a(e)}})};function ji(a,b,c,d,e){function f(){}a.f("transaction on "+b);var h=new U(a,b);h.Eb("value",f);c={path:b,update:c,H:d,status:null,Ff:Ec(),cf:e,Lf:0,ie:function(){h.ic("value",f)},ke:null,Ba:null,pd:null,qd:null,rd:null};d=a.L.za(b,void 0)||C;c.pd=d;d=c.update(d.I());if(n(d)){cg("transaction failed: Data returned ",d,c.path);c.status=1;e=Sf(a.uc,b);var k=e.Ca()||[];k.push(c);Tf(e,k);"object"===typeof d&&null!==d&&v(d,".priority")?(k=w(d,".priority"),K(ag(k),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.")):
k=(a.L.za(b)||C).C().I();e=ai(a);d=M(d,k);e=sc(d,e);c.qd=d;c.rd=e;c.Ba=a.Hd++;c=wf(a.L,b,e,c.Ba,c.cf);Ab(a.da,b,c);ki(a)}else c.ie(),c.qd=null,c.rd=null,c.H&&(a=new Q(c.pd,new U(a,c.path),N),c.H(null,!1,a))}function ki(a,b){var c=b||a.uc;b||li(a,c);if(null!==c.Ca()){var d=mi(a,c);K(0<d.length,"Sending zero length transaction queue");Sa(d,function(a){return 1===a.status})&&ni(a,c.path(),d)}else c.wd()&&c.P(function(b){ki(a,b)})}
function ni(a,b,c){for(var d=Qa(c,function(a){return a.Ba}),e=a.L.za(b,d)||C,d=e,e=e.hash(),f=0;f<c.length;f++){var h=c[f];K(1===h.status,"tryToSendTransactionQueue_: items in queue should all be run.");h.status=2;h.Lf++;var k=T(b,h.path),d=d.G(k,h.qd)}d=d.I(!0);a.ba.put(b.toString(),d,function(d){a.f("transaction put response",{path:b.toString(),status:d});var e=[];if("ok"===d){d=[];for(f=0;f<c.length;f++){c[f].status=3;e=e.concat(zf(a.L,c[f].Ba));if(c[f].H){var h=c[f].rd,k=new U(a,c[f].path);d.push(q(c[f].H,
null,null,!0,new Q(h,k,N)))}c[f].ie()}li(a,Sf(a.uc,b));ki(a);Ab(a.da,b,e);for(f=0;f<d.length;f++)Db(d[f])}else{if("datastale"===d)for(f=0;f<c.length;f++)c[f].status=4===c[f].status?5:1;else for(O("transaction at "+b.toString()+" failed: "+d),f=0;f<c.length;f++)c[f].status=5,c[f].ke=d;bi(a,b)}},e)}function bi(a,b){var c=oi(a,b),d=c.path(),c=mi(a,c);pi(a,c,d);return d}
function pi(a,b,c){if(0!==b.length){for(var d=[],e=[],f=Qa(b,function(a){return a.Ba}),h=0;h<b.length;h++){var k=b[h],l=T(c,k.path),m=!1,t;K(null!==l,"rerunTransactionsUnderNode_: relativePath should not be null.");if(5===k.status)m=!0,t=k.ke,e=e.concat(zf(a.L,k.Ba,!0));else if(1===k.status)if(25<=k.Lf)m=!0,t="maxretry",e=e.concat(zf(a.L,k.Ba,!0));else{var z=a.L.za(k.path,f)||C;k.pd=z;var I=b[h].update(z.I());n(I)?(cg("transaction failed: Data returned ",I,k.path),l=M(I),"object"===typeof I&&null!=
I&&v(I,".priority")||(l=l.ga(z.C())),z=k.Ba,I=ai(a),I=sc(l,I),k.qd=l,k.rd=I,k.Ba=a.Hd++,Va(f,z),e=e.concat(wf(a.L,k.path,I,k.Ba,k.cf)),e=e.concat(zf(a.L,z,!0))):(m=!0,t="nodata",e=e.concat(zf(a.L,k.Ba,!0)))}Ab(a.da,c,e);e=[];m&&(b[h].status=3,setTimeout(b[h].ie,Math.floor(0)),b[h].H&&("nodata"===t?(k=new U(a,b[h].path),d.push(q(b[h].H,null,null,!1,new Q(b[h].pd,k,N)))):d.push(q(b[h].H,null,Error(t),!1,null))))}li(a,a.uc);for(h=0;h<d.length;h++)Db(d[h]);ki(a)}}
function oi(a,b){for(var c,d=a.uc;null!==(c=E(b))&&null===d.Ca();)d=Sf(d,c),b=H(b);return d}function mi(a,b){var c=[];qi(a,b,c);c.sort(function(a,b){return a.Ff-b.Ff});return c}function qi(a,b,c){var d=b.Ca();if(null!==d)for(var e=0;e<d.length;e++)c.push(d[e]);b.P(function(b){qi(a,b,c)})}function li(a,b){var c=b.Ca();if(c){for(var d=0,e=0;e<c.length;e++)3!==c[e].status&&(c[d]=c[e],d++);c.length=d;Tf(b,0<c.length?c:null)}b.P(function(b){li(a,b)})}
function ei(a,b){var c=oi(a,b).path(),d=Sf(a.uc,b);Wf(d,function(b){ri(a,b)});ri(a,d);Vf(d,function(b){ri(a,b)});return c}
function ri(a,b){var c=b.Ca();if(null!==c){for(var d=[],e=[],f=-1,h=0;h<c.length;h++)4!==c[h].status&&(2===c[h].status?(K(f===h-1,"All SENT items should be at beginning of queue."),f=h,c[h].status=4,c[h].ke="set"):(K(1===c[h].status,"Unexpected transaction status in abort"),c[h].ie(),e=e.concat(zf(a.L,c[h].Ba,!0)),c[h].H&&d.push(q(c[h].H,null,Error("set"),!1,null))));-1===f?Tf(b,null):c.length=f+1;Ab(a.da,b.path(),e);for(h=0;h<d.length;h++)Db(d[h])}};function W(){this.oc={};this.Sf=!1}W.prototype.yb=function(){for(var a in this.oc)this.oc[a].yb()};W.prototype.rc=function(){for(var a in this.oc)this.oc[a].rc()};W.prototype.ve=function(){this.Sf=!0};ca(W);W.prototype.interrupt=W.prototype.yb;W.prototype.resume=W.prototype.rc;function X(a,b){this.bd=a;this.ra=b}X.prototype.cancel=function(a){x("Firebase.onDisconnect().cancel",0,1,arguments.length);A("Firebase.onDisconnect().cancel",1,a,!0);this.bd.Jd(this.ra,a||null)};X.prototype.cancel=X.prototype.cancel;X.prototype.remove=function(a){x("Firebase.onDisconnect().remove",0,1,arguments.length);jg("Firebase.onDisconnect().remove",this.ra);A("Firebase.onDisconnect().remove",1,a,!0);fi(this.bd,this.ra,null,a)};X.prototype.remove=X.prototype.remove;
X.prototype.set=function(a,b){x("Firebase.onDisconnect().set",1,2,arguments.length);jg("Firebase.onDisconnect().set",this.ra);bg("Firebase.onDisconnect().set",a,this.ra,!1);A("Firebase.onDisconnect().set",2,b,!0);fi(this.bd,this.ra,a,b)};X.prototype.set=X.prototype.set;
X.prototype.Kb=function(a,b,c){x("Firebase.onDisconnect().setWithPriority",2,3,arguments.length);jg("Firebase.onDisconnect().setWithPriority",this.ra);bg("Firebase.onDisconnect().setWithPriority",a,this.ra,!1);fg("Firebase.onDisconnect().setWithPriority",2,b);A("Firebase.onDisconnect().setWithPriority",3,c,!0);gi(this.bd,this.ra,a,b,c)};X.prototype.setWithPriority=X.prototype.Kb;
X.prototype.update=function(a,b){x("Firebase.onDisconnect().update",1,2,arguments.length);jg("Firebase.onDisconnect().update",this.ra);if(ea(a)){for(var c={},d=0;d<a.length;++d)c[""+d]=a[d];a=c;O("Passing an Array to Firebase.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}eg("Firebase.onDisconnect().update",a,this.ra);A("Firebase.onDisconnect().update",2,b,!0);
hi(this.bd,this.ra,a,b)};X.prototype.update=X.prototype.update;function Y(a,b,c,d){this.k=a;this.path=b;this.n=c;this.lc=d}
function si(a){var b=null,c=null;a.ma&&(b=nd(a));a.pa&&(c=pd(a));if(a.g===Qd){if(a.ma){if("[MIN_NAME]"!=md(a))throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if("string"!==typeof b)throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");}if(a.pa){if("[MAX_NAME]"!=od(a))throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if("string"!==
typeof c)throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");}}else if(a.g===N){if(null!=b&&!ag(b)||null!=c&&!ag(c))throw Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).");}else if(K(a.g instanceof Ud||a.g===$d,"unknown index type."),null!=b&&"object"===typeof b||null!=c&&"object"===typeof c)throw Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.");
}function ti(a){if(a.ma&&a.pa&&a.ja&&(!a.ja||""===a.Nb))throw Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");}function ui(a,b){if(!0===a.lc)throw Error(b+": You can't combine multiple orderBy calls.");}g=Y.prototype;g.Ib=function(){x("Query.ref",0,0,arguments.length);return new U(this.k,this.path)};
g.Eb=function(a,b,c,d){x("Query.on",2,4,arguments.length);gg("Query.on",a,!1);A("Query.on",2,b,!1);var e=vi("Query.on",c,d);if("value"===a)ii(this.k,this,new id(b,e.cancel||null,e.Ma||null));else{var f={};f[a]=b;ii(this.k,this,new jd(f,e.cancel,e.Ma))}return b};
g.ic=function(a,b,c){x("Query.off",0,3,arguments.length);gg("Query.off",a,!0);A("Query.off",2,b,!0);mb("Query.off",3,c);var d=null,e=null;"value"===a?d=new id(b||null,null,c||null):a&&(b&&(e={},e[a]=b),d=new jd(e,null,c||null));e=this.k;d=".info"===E(this.path)?e.Cd.jb(this,d):e.L.jb(this,d);yb(e.da,this.path,d)};
g.Dg=function(a,b){function c(h){f&&(f=!1,e.ic(a,c),b.call(d.Ma,h))}x("Query.once",2,4,arguments.length);gg("Query.once",a,!1);A("Query.once",2,b,!1);var d=vi("Query.once",arguments[2],arguments[3]),e=this,f=!0;this.Eb(a,c,function(b){e.ic(a,c);d.cancel&&d.cancel.call(d.Ma,b)})};
g.He=function(a){O("Query.limit() being deprecated. Please use Query.limitToFirst() or Query.limitToLast() instead.");x("Query.limit",1,1,arguments.length);if(!ga(a)||Math.floor(a)!==a||0>=a)throw Error("Query.limit: First argument must be a positive integer.");if(this.n.ja)throw Error("Query.limit: Limit was already set (by another call to limit, limitToFirst, orlimitToLast.");var b=this.n.He(a);ti(b);return new Y(this.k,this.path,b,this.lc)};
g.Ie=function(a){x("Query.limitToFirst",1,1,arguments.length);if(!ga(a)||Math.floor(a)!==a||0>=a)throw Error("Query.limitToFirst: First argument must be a positive integer.");if(this.n.ja)throw Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new Y(this.k,this.path,this.n.Ie(a),this.lc)};
g.Je=function(a){x("Query.limitToLast",1,1,arguments.length);if(!ga(a)||Math.floor(a)!==a||0>=a)throw Error("Query.limitToLast: First argument must be a positive integer.");if(this.n.ja)throw Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new Y(this.k,this.path,this.n.Je(a),this.lc)};
g.Eg=function(a){x("Query.orderByChild",1,1,arguments.length);if("$key"===a)throw Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===a)throw Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===a)throw Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');ig("Query.orderByChild",a);ui(this,"Query.orderByChild");var b=new L(a);if(b.e())throw Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");
b=new Ud(b);b=de(this.n,b);si(b);return new Y(this.k,this.path,b,!0)};g.Fg=function(){x("Query.orderByKey",0,0,arguments.length);ui(this,"Query.orderByKey");var a=de(this.n,Qd);si(a);return new Y(this.k,this.path,a,!0)};g.Gg=function(){x("Query.orderByPriority",0,0,arguments.length);ui(this,"Query.orderByPriority");var a=de(this.n,N);si(a);return new Y(this.k,this.path,a,!0)};
g.Hg=function(){x("Query.orderByValue",0,0,arguments.length);ui(this,"Query.orderByValue");var a=de(this.n,$d);si(a);return new Y(this.k,this.path,a,!0)};g.$d=function(a,b){x("Query.startAt",0,2,arguments.length);bg("Query.startAt",a,this.path,!0);hg("Query.startAt",b);var c=this.n.$d(a,b);ti(c);si(c);if(this.n.ma)throw Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");n(a)||(b=a=null);return new Y(this.k,this.path,c,this.lc)};
g.td=function(a,b){x("Query.endAt",0,2,arguments.length);bg("Query.endAt",a,this.path,!0);hg("Query.endAt",b);var c=this.n.td(a,b);ti(c);si(c);if(this.n.pa)throw Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new Y(this.k,this.path,c,this.lc)};
g.kg=function(a,b){x("Query.equalTo",1,2,arguments.length);bg("Query.equalTo",a,this.path,!1);hg("Query.equalTo",b);if(this.n.ma)throw Error("Query.equalTo: Starting point was already set (by another call to endAt or equalTo).");if(this.n.pa)throw Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.$d(a,b).td(a,b)};
g.toString=function(){x("Query.toString",0,0,arguments.length);for(var a=this.path,b="",c=a.Z;c<a.o.length;c++)""!==a.o[c]&&(b+="/"+encodeURIComponent(String(a.o[c])));return this.k.toString()+(b||"/")};g.va=function(){var a=Uc(ee(this.n));return"{}"===a?"default":a};
function vi(a,b,c){var d={cancel:null,Ma:null};if(b&&c)d.cancel=b,A(a,3,d.cancel,!0),d.Ma=c,mb(a,4,d.Ma);else if(b)if("object"===typeof b&&null!==b)d.Ma=b;else if("function"===typeof b)d.cancel=b;else throw Error(y(a,3,!0)+" must either be a cancel callback or a context object.");return d}Y.prototype.ref=Y.prototype.Ib;Y.prototype.on=Y.prototype.Eb;Y.prototype.off=Y.prototype.ic;Y.prototype.once=Y.prototype.Dg;Y.prototype.limit=Y.prototype.He;Y.prototype.limitToFirst=Y.prototype.Ie;
Y.prototype.limitToLast=Y.prototype.Je;Y.prototype.orderByChild=Y.prototype.Eg;Y.prototype.orderByKey=Y.prototype.Fg;Y.prototype.orderByPriority=Y.prototype.Gg;Y.prototype.orderByValue=Y.prototype.Hg;Y.prototype.startAt=Y.prototype.$d;Y.prototype.endAt=Y.prototype.td;Y.prototype.equalTo=Y.prototype.kg;Y.prototype.toString=Y.prototype.toString;var Z={};Z.vc=Kh;Z.DataConnection=Z.vc;Kh.prototype.Rg=function(a,b){this.Fa("q",{p:a},b)};Z.vc.prototype.simpleListen=Z.vc.prototype.Rg;Kh.prototype.jg=function(a,b){this.Fa("echo",{d:a},b)};Z.vc.prototype.echo=Z.vc.prototype.jg;Kh.prototype.interrupt=Kh.prototype.yb;Z.Vf=yh;Z.RealTimeConnection=Z.Vf;yh.prototype.sendRequest=yh.prototype.Fa;yh.prototype.close=yh.prototype.close;
Z.rg=function(a){var b=Kh.prototype.put;Kh.prototype.put=function(c,d,e,f){n(f)&&(f=a());b.call(this,c,d,e,f)};return function(){Kh.prototype.put=b}};Z.hijackHash=Z.rg;Z.Uf=zc;Z.ConnectionTarget=Z.Uf;Z.va=function(a){return a.va()};Z.queryIdentifier=Z.va;Z.tg=function(a){return a.k.Ra.$};Z.listens=Z.tg;Z.ve=function(a){a.ve()};Z.forceRestClient=Z.ve;function U(a,b){var c,d,e;if(a instanceof Yh)c=a,d=b;else{x("new Firebase",1,2,arguments.length);d=Pc(arguments[0]);c=d.Tg;"firebase"===d.domain&&Oc(d.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead");c&&"undefined"!=c||Oc("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com");d.kb||"undefined"!==typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&O("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");
c=new zc(d.host,d.kb,c,"ws"===d.scheme||"wss"===d.scheme);d=new L(d.$c);e=d.toString();var f;!(f=!p(c.host)||0===c.host.length||!$f(c.hc))&&(f=0!==e.length)&&(e&&(e=e.replace(/^\/*\.info(\/|$)/,"/")),f=!(p(e)&&0!==e.length&&!Yf.test(e)));if(f)throw Error(y("new Firebase",1,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".');if(b)if(b instanceof W)e=b;else if(p(b))e=W.ub(),c.Od=b;else throw Error("Expected a valid Firebase.Context for second argument to new Firebase()");
else e=W.ub();f=c.toString();var h=w(e.oc,f);h||(h=new Yh(c,e.Sf),e.oc[f]=h);c=h}Y.call(this,c,d,be,!1)}ma(U,Y);var wi=U,xi=["Firebase"],yi=aa;xi[0]in yi||!yi.execScript||yi.execScript("var "+xi[0]);for(var zi;xi.length&&(zi=xi.shift());)!xi.length&&n(wi)?yi[zi]=wi:yi=yi[zi]?yi[zi]:yi[zi]={};U.goOffline=function(){x("Firebase.goOffline",0,0,arguments.length);W.ub().yb()};U.goOnline=function(){x("Firebase.goOnline",0,0,arguments.length);W.ub().rc()};
function Lc(a,b){K(!b||!0===a||!1===a,"Can't turn on custom loggers persistently.");!0===a?("undefined"!==typeof console&&("function"===typeof console.log?Bb=q(console.log,console):"object"===typeof console.log&&(Bb=function(a){console.log(a)})),b&&yc.set("logging_enabled",!0)):a?Bb=a:(Bb=null,yc.remove("logging_enabled"))}U.enableLogging=Lc;U.ServerValue={TIMESTAMP:{".sv":"timestamp"}};U.SDK_VERSION=hb;U.INTERNAL=V;U.Context=W;U.TEST_ACCESS=Z;
U.prototype.name=function(){O("Firebase.name() being deprecated. Please use Firebase.key() instead.");x("Firebase.name",0,0,arguments.length);return this.key()};U.prototype.name=U.prototype.name;U.prototype.key=function(){x("Firebase.key",0,0,arguments.length);return this.path.e()?null:Ld(this.path)};U.prototype.key=U.prototype.key;
U.prototype.u=function(a){x("Firebase.child",1,1,arguments.length);if(ga(a))a=String(a);else if(!(a instanceof L))if(null===E(this.path)){var b=a;b&&(b=b.replace(/^\/*\.info(\/|$)/,"/"));ig("Firebase.child",b)}else ig("Firebase.child",a);return new U(this.k,this.path.u(a))};U.prototype.child=U.prototype.u;U.prototype.parent=function(){x("Firebase.parent",0,0,arguments.length);var a=this.path.parent();return null===a?null:new U(this.k,a)};U.prototype.parent=U.prototype.parent;
U.prototype.root=function(){x("Firebase.ref",0,0,arguments.length);for(var a=this;null!==a.parent();)a=a.parent();return a};U.prototype.root=U.prototype.root;U.prototype.set=function(a,b){x("Firebase.set",1,2,arguments.length);jg("Firebase.set",this.path);bg("Firebase.set",a,this.path,!1);A("Firebase.set",2,b,!0);this.k.Kb(this.path,a,null,b||null)};U.prototype.set=U.prototype.set;
U.prototype.update=function(a,b){x("Firebase.update",1,2,arguments.length);jg("Firebase.update",this.path);if(ea(a)){for(var c={},d=0;d<a.length;++d)c[""+d]=a[d];a=c;O("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}eg("Firebase.update",a,this.path);A("Firebase.update",2,b,!0);this.k.update(this.path,a,b||null)};U.prototype.update=U.prototype.update;
U.prototype.Kb=function(a,b,c){x("Firebase.setWithPriority",2,3,arguments.length);jg("Firebase.setWithPriority",this.path);bg("Firebase.setWithPriority",a,this.path,!1);fg("Firebase.setWithPriority",2,b);A("Firebase.setWithPriority",3,c,!0);if(".length"===this.key()||".keys"===this.key())throw"Firebase.setWithPriority failed: "+this.key()+" is a read-only object.";this.k.Kb(this.path,a,b,c||null)};U.prototype.setWithPriority=U.prototype.Kb;
U.prototype.remove=function(a){x("Firebase.remove",0,1,arguments.length);jg("Firebase.remove",this.path);A("Firebase.remove",1,a,!0);this.set(null,a)};U.prototype.remove=U.prototype.remove;
U.prototype.transaction=function(a,b,c){x("Firebase.transaction",1,3,arguments.length);jg("Firebase.transaction",this.path);A("Firebase.transaction",1,a,!1);A("Firebase.transaction",2,b,!0);if(n(c)&&"boolean"!=typeof c)throw Error(y("Firebase.transaction",3,!0)+"must be a boolean.");if(".length"===this.key()||".keys"===this.key())throw"Firebase.transaction failed: "+this.key()+" is a read-only object.";"undefined"===typeof c&&(c=!0);ji(this.k,this.path,a,b||null,c)};U.prototype.transaction=U.prototype.transaction;
U.prototype.Og=function(a,b){x("Firebase.setPriority",1,2,arguments.length);jg("Firebase.setPriority",this.path);fg("Firebase.setPriority",1,a);A("Firebase.setPriority",2,b,!0);this.k.Kb(this.path.u(".priority"),a,null,b)};U.prototype.setPriority=U.prototype.Og;
U.prototype.push=function(a,b){x("Firebase.push",0,2,arguments.length);jg("Firebase.push",this.path);bg("Firebase.push",a,this.path,!0);A("Firebase.push",2,b,!0);var c=$h(this.k),c=Fe(c),c=this.u(c);"undefined"!==typeof a&&null!==a&&c.set(a,b);return c};U.prototype.push=U.prototype.push;U.prototype.hb=function(){jg("Firebase.onDisconnect",this.path);return new X(this.k,this.path)};U.prototype.onDisconnect=U.prototype.hb;
U.prototype.M=function(a,b,c){O("FirebaseRef.auth() being deprecated. Please use FirebaseRef.authWithCustomToken() instead.");x("Firebase.auth",1,3,arguments.length);kg("Firebase.auth",a);A("Firebase.auth",2,b,!0);A("Firebase.auth",3,b,!0);Yg(this.k.M,a,{},{remember:"none"},b,c)};U.prototype.auth=U.prototype.M;U.prototype.ge=function(a){x("Firebase.unauth",0,1,arguments.length);A("Firebase.unauth",1,a,!0);Zg(this.k.M,a)};U.prototype.unauth=U.prototype.ge;
U.prototype.xe=function(){x("Firebase.getAuth",0,0,arguments.length);return this.k.M.xe()};U.prototype.getAuth=U.prototype.xe;U.prototype.xg=function(a,b){x("Firebase.onAuth",1,2,arguments.length);A("Firebase.onAuth",1,a,!1);mb("Firebase.onAuth",2,b);this.k.M.Eb("auth_status",a,b)};U.prototype.onAuth=U.prototype.xg;U.prototype.wg=function(a,b){x("Firebase.offAuth",1,2,arguments.length);A("Firebase.offAuth",1,a,!1);mb("Firebase.offAuth",2,b);this.k.M.ic("auth_status",a,b)};U.prototype.offAuth=U.prototype.wg;
U.prototype.Zf=function(a,b,c){x("Firebase.authWithCustomToken",2,3,arguments.length);kg("Firebase.authWithCustomToken",a);A("Firebase.authWithCustomToken",2,b,!1);ng("Firebase.authWithCustomToken",3,c,!0);Yg(this.k.M,a,{},c||{},b)};U.prototype.authWithCustomToken=U.prototype.Zf;U.prototype.$f=function(a,b,c){x("Firebase.authWithOAuthPopup",2,3,arguments.length);mg("Firebase.authWithOAuthPopup",a);A("Firebase.authWithOAuthPopup",2,b,!1);ng("Firebase.authWithOAuthPopup",3,c,!0);ch(this.k.M,a,c,b)};
U.prototype.authWithOAuthPopup=U.prototype.$f;U.prototype.ag=function(a,b,c){x("Firebase.authWithOAuthRedirect",2,3,arguments.length);mg("Firebase.authWithOAuthRedirect",a);A("Firebase.authWithOAuthRedirect",2,b,!1);ng("Firebase.authWithOAuthRedirect",3,c,!0);var d=this.k.M;ah(d);var e=[Kg],f=vg(c);"anonymous"===a||"firebase"===a?P(b,Mg("TRANSPORT_UNAVAILABLE")):(yc.set("redirect_client_options",f.od),bh(d,e,"/auth/"+a,f,b))};U.prototype.authWithOAuthRedirect=U.prototype.ag;
U.prototype.bg=function(a,b,c,d){x("Firebase.authWithOAuthToken",3,4,arguments.length);mg("Firebase.authWithOAuthToken",a);A("Firebase.authWithOAuthToken",3,c,!1);ng("Firebase.authWithOAuthToken",4,d,!0);p(b)?(lg("Firebase.authWithOAuthToken",2,b),$g(this.k.M,a+"/token",{access_token:b},d,c)):(ng("Firebase.authWithOAuthToken",2,b,!1),$g(this.k.M,a+"/token",b,d,c))};U.prototype.authWithOAuthToken=U.prototype.bg;
U.prototype.Yf=function(a,b){x("Firebase.authAnonymously",1,2,arguments.length);A("Firebase.authAnonymously",1,a,!1);ng("Firebase.authAnonymously",2,b,!0);$g(this.k.M,"anonymous",{},b,a)};U.prototype.authAnonymously=U.prototype.Yf;
U.prototype.cg=function(a,b,c){x("Firebase.authWithPassword",2,3,arguments.length);ng("Firebase.authWithPassword",1,a,!1);og("Firebase.authWithPassword",a,"email");og("Firebase.authWithPassword",a,"password");A("Firebase.authWithPassword",2,b,!1);ng("Firebase.authWithPassword",3,c,!0);$g(this.k.M,"password",a,c,b)};U.prototype.authWithPassword=U.prototype.cg;
U.prototype.se=function(a,b){x("Firebase.createUser",2,2,arguments.length);ng("Firebase.createUser",1,a,!1);og("Firebase.createUser",a,"email");og("Firebase.createUser",a,"password");A("Firebase.createUser",2,b,!1);this.k.M.se(a,b)};U.prototype.createUser=U.prototype.se;U.prototype.Te=function(a,b){x("Firebase.removeUser",2,2,arguments.length);ng("Firebase.removeUser",1,a,!1);og("Firebase.removeUser",a,"email");og("Firebase.removeUser",a,"password");A("Firebase.removeUser",2,b,!1);this.k.M.Te(a,b)};
U.prototype.removeUser=U.prototype.Te;U.prototype.pe=function(a,b){x("Firebase.changePassword",2,2,arguments.length);ng("Firebase.changePassword",1,a,!1);og("Firebase.changePassword",a,"email");og("Firebase.changePassword",a,"oldPassword");og("Firebase.changePassword",a,"newPassword");A("Firebase.changePassword",2,b,!1);this.k.M.pe(a,b)};U.prototype.changePassword=U.prototype.pe;
U.prototype.oe=function(a,b){x("Firebase.changeEmail",2,2,arguments.length);ng("Firebase.changeEmail",1,a,!1);og("Firebase.changeEmail",a,"oldEmail");og("Firebase.changeEmail",a,"newEmail");og("Firebase.changeEmail",a,"password");A("Firebase.changeEmail",2,b,!1);this.k.M.oe(a,b)};U.prototype.changeEmail=U.prototype.oe;
U.prototype.Ve=function(a,b){x("Firebase.resetPassword",2,2,arguments.length);ng("Firebase.resetPassword",1,a,!1);og("Firebase.resetPassword",a,"email");A("Firebase.resetPassword",2,b,!1);this.k.M.Ve(a,b)};U.prototype.resetPassword=U.prototype.Ve;})();

module.exports = Firebase;

},{}]},{},["/Users/dave/lh2/angular2/test/trjournal/client/app/main.ts"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjbGllbnQvYXBwL2Ryb3Bkb3duLnRzIiwiY2xpZW50L2FwcC9qZW50cmllcy50cyIsImNsaWVudC9hcHAvbWFpbi50cyIsImNsaWVudC9hcHAvdHJhZGVzdmlldy50cyIsImNsaWVudC9hc3NldHMvanMvdXRpbHMudHMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvYW5ndWxhcjIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvYm9vdHN0cmFwLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL2NvcmUuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvbGlmZWN5Y2xlX2hvb2tzLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL25vZGVfbW9kdWxlcy9AcmVhY3RpdmV4L3J4anMvZGlzdC9janMvT2JzZXJ2YWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9ub2RlX21vZHVsZXMvQHJlYWN0aXZleC9yeGpzL2Rpc3QvY2pzL1N1YmplY3QuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvbm9kZV9tb2R1bGVzL0ByZWFjdGl2ZXgvcnhqcy9kaXN0L2Nqcy9TdWJzY3JpYmVyLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL25vZGVfbW9kdWxlcy9AcmVhY3RpdmV4L3J4anMvZGlzdC9janMvU3Vic2NyaXB0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL25vZGVfbW9kdWxlcy9AcmVhY3RpdmV4L3J4anMvZGlzdC9janMvc3ViamVjdHMvU3ViamVjdFN1YnNjcmlwdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9ub2RlX21vZHVsZXMvQHJlYWN0aXZleC9yeGpzL2Rpc3QvY2pzL3V0aWwvU3ltYm9sX29ic2VydmFibGUuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvbm9kZV9tb2R1bGVzL0ByZWFjdGl2ZXgvcnhqcy9kaXN0L2Nqcy91dGlsL25vb3AuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvbm9kZV9tb2R1bGVzL0ByZWFjdGl2ZXgvcnhqcy9kaXN0L2Nqcy91dGlsL3Jvb3QuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvbm9kZV9tb2R1bGVzL0ByZWFjdGl2ZXgvcnhqcy9kaXN0L2Nqcy91dGlsL3Rocm93RXJyb3IuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvbm9kZV9tb2R1bGVzL0ByZWFjdGl2ZXgvcnhqcy9kaXN0L2Nqcy91dGlsL3RyeU9yT25FcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9wcm9maWxlLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3JlbmRlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvYW5pbWF0ZS9hbmltYXRpb24uanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2FuaW1hdGUvYW5pbWF0aW9uX2J1aWxkZXIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2FuaW1hdGUvYnJvd3Nlcl9kZXRhaWxzLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9hbmltYXRlL2Nzc19hbmltYXRpb25fYnVpbGRlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvYW5pbWF0ZS9jc3NfYW5pbWF0aW9uX29wdGlvbnMuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvYXBwbGljYXRpb24uanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvYXBwbGljYXRpb25fY29tbW9uLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2FwcGxpY2F0aW9uX3JlZi5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9hcHBsaWNhdGlvbl90b2tlbnMuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvYm9vdHN0cmFwLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NoYW5nZV9kZXRlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9hYnN0cmFjdF9jaGFuZ2VfZGV0ZWN0b3IuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9iaW5kaW5nX3JlY29yZC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uL2NoYW5nZV9kZXRlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9jaGFuZ2VfZGV0ZWN0aW9uX2ppdF9nZW5lcmF0b3IuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9jaGFuZ2VfZGV0ZWN0aW9uX3V0aWwuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9jaGFuZ2VfZGV0ZWN0b3JfcmVmLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NoYW5nZV9kZXRlY3Rpb24vY29hbGVzY2UuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9jb2RlZ2VuX2ZhY2FkZS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uL2NvZGVnZW5fbG9naWNfdXRpbC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uL2NvZGVnZW5fbmFtZV91dGlsLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NoYW5nZV9kZXRlY3Rpb24vY29uc3RhbnRzLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NoYW5nZV9kZXRlY3Rpb24vZGlmZmVycy9kZWZhdWx0X2l0ZXJhYmxlX2RpZmZlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uL2RpZmZlcnMvZGVmYXVsdF9rZXl2YWx1ZV9kaWZmZXIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9kaWZmZXJzL2l0ZXJhYmxlX2RpZmZlcnMuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9kaWZmZXJzL2tleXZhbHVlX2RpZmZlcnMuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9kaXJlY3RpdmVfcmVjb3JkLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NoYW5nZV9kZXRlY3Rpb24vZHluYW1pY19jaGFuZ2VfZGV0ZWN0b3IuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9ldmVudF9iaW5kaW5nLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NoYW5nZV9kZXRlY3Rpb24vZXhjZXB0aW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uL2ludGVyZmFjZXMuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9qaXRfcHJvdG9fY2hhbmdlX2RldGVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NoYW5nZV9kZXRlY3Rpb24vb2JzZXJ2YWJsZV9mYWNhZGUuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9wYXJzZXIvYXN0LmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NoYW5nZV9kZXRlY3Rpb24vcGFyc2VyL2xleGVyLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NoYW5nZV9kZXRlY3Rpb24vcGFyc2VyL2xvY2Fscy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uL3BhcnNlci9wYXJzZXIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9waXBlX2xpZmVjeWNsZV9yZWZsZWN0b3IuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9waXBlcy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uL3Byb3RvX2NoYW5nZV9kZXRlY3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uL3Byb3RvX3JlY29yZC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci9hbmNob3JfYmFzZWRfYXBwX3Jvb3RfdXJsLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL2FwcF9yb290X3VybC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci9jaGFuZ2VfZGVmaW5pdGlvbl9mYWN0b3J5LmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL2NoYW5nZV9kZXRlY3Rvcl9jb21waWxlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci9jb21tYW5kX2NvbXBpbGVyLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL2NvbXBpbGVyLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL2RpcmVjdGl2ZV9tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci9odG1sX2FzdC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci9odG1sX3BhcnNlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci9ydW50aW1lX2NvbXBpbGVyLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL3J1bnRpbWVfbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvc2NoZW1hL2RvbV9lbGVtZW50X3NjaGVtYV9yZWdpc3RyeS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci9zY2hlbWEvZWxlbWVudF9zY2hlbWFfcmVnaXN0cnkuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvc2VsZWN0b3IuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvc2hhZG93X2Nzcy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci9zb3VyY2VfbW9kdWxlLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL3N0eWxlX2NvbXBpbGVyLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL3N0eWxlX3VybF9yZXNvbHZlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci90ZW1wbGF0ZV9hc3QuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvdGVtcGxhdGVfY29tcGlsZXIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvdGVtcGxhdGVfbm9ybWFsaXplci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci90ZW1wbGF0ZV9wYXJzZXIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvdGVtcGxhdGVfcHJlcGFyc2VyLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL3VybF9yZXNvbHZlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci91dGlsLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL3hoci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci94aHJfaW1wbC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9kZWJ1Zy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9kZWJ1Zy9kZWJ1Z19lbGVtZW50LmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2RlYnVnL2RlYnVnX2VsZW1lbnRfdmlld19saXN0ZW5lci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9kaS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9kaS9kZWNvcmF0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2RpL2V4Y2VwdGlvbnMuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvZGkvZm9yd2FyZF9yZWYuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvZGkvaW5qZWN0b3IuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvZGkva2V5LmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2RpL21ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2RpL29wYXF1ZV90b2tlbi5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9kaS9wcm92aWRlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9kaS90eXBlX2xpdGVyYWwuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvZGlyZWN0aXZlcy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9kaXJlY3RpdmVzL25nX2NsYXNzLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2RpcmVjdGl2ZXMvbmdfZm9yLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2RpcmVjdGl2ZXMvbmdfaWYuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvZGlyZWN0aXZlcy9uZ19zdHlsZS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9kaXJlY3RpdmVzL25nX3N3aXRjaC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9kaXJlY3RpdmVzL29ic2VydmFibGVfbGlzdF9kaWZmLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2RvbS9icm93c2VyX2FkYXB0ZXIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvZG9tL2RvbV9hZGFwdGVyLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2RvbS9nZW5lcmljX2Jyb3dzZXJfYWRhcHRlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2FzeW5jLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25faGFuZGxlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvaW50bC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbWF0aC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvcHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mb3Jtcy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mb3Jtcy9kaXJlY3RpdmVzLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2Zvcm1zL2RpcmVjdGl2ZXMvYWJzdHJhY3RfY29udHJvbF9kaXJlY3RpdmUuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvZm9ybXMvZGlyZWN0aXZlcy9jaGVja2JveF92YWx1ZV9hY2Nlc3Nvci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mb3Jtcy9kaXJlY3RpdmVzL2NvbnRyb2xfY29udGFpbmVyLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2Zvcm1zL2RpcmVjdGl2ZXMvY29udHJvbF92YWx1ZV9hY2Nlc3Nvci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mb3Jtcy9kaXJlY3RpdmVzL2RlZmF1bHRfdmFsdWVfYWNjZXNzb3IuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvZm9ybXMvZGlyZWN0aXZlcy9uZ19jb250cm9sLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2Zvcm1zL2RpcmVjdGl2ZXMvbmdfY29udHJvbF9ncm91cC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mb3Jtcy9kaXJlY3RpdmVzL25nX2NvbnRyb2xfbmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mb3Jtcy9kaXJlY3RpdmVzL25nX2NvbnRyb2xfc3RhdHVzLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2Zvcm1zL2RpcmVjdGl2ZXMvbmdfZm9ybS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mb3Jtcy9kaXJlY3RpdmVzL25nX2Zvcm1fY29udHJvbC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mb3Jtcy9kaXJlY3RpdmVzL25nX2Zvcm1fbW9kZWwuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvZm9ybXMvZGlyZWN0aXZlcy9uZ19tb2RlbC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mb3Jtcy9kaXJlY3RpdmVzL251bWJlcl92YWx1ZV9hY2Nlc3Nvci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mb3Jtcy9kaXJlY3RpdmVzL3NlbGVjdF9jb250cm9sX3ZhbHVlX2FjY2Vzc29yLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2Zvcm1zL2RpcmVjdGl2ZXMvc2hhcmVkLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2Zvcm1zL2RpcmVjdGl2ZXMvdmFsaWRhdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9mb3Jtcy9mb3JtX2J1aWxkZXIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvZm9ybXMvbW9kZWwuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvZm9ybXMvdmFsaWRhdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9saWZlX2N5Y2xlL2xpZmVfY3ljbGUuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvbGlmZWN5Y2xlLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvY29tcGlsZXIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL2RpcmVjdGl2ZV9saWZlY3ljbGVfcmVmbGVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci9kaXJlY3RpdmVfcmVzb2x2ZXIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL2R5bmFtaWNfY29tcG9uZW50X2xvYWRlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvZWxlbWVudF9iaW5kZXIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL2VsZW1lbnRfaW5qZWN0b3IuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL2VsZW1lbnRfcmVmLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci9ldmVudF9jb25maWcuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL2ludGVyZmFjZXMuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL3BpcGVfcmVzb2x2ZXIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL3Byb3RvX3ZpZXdfZmFjdG9yeS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvcXVlcnlfbGlzdC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvdGVtcGxhdGVfY29tbWFuZHMuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL3RlbXBsYXRlX3JlZi5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvdmlldy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvdmlld19jb250YWluZXJfcmVmLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci92aWV3X2xpc3RlbmVyLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci92aWV3X21hbmFnZXIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL3ZpZXdfbWFuYWdlcl91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvdmlld19wb29sLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci92aWV3X3JlZi5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvdmlld19yZXNvbHZlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YS9kaS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YS9kaXJlY3RpdmVzLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL21ldGFkYXRhL3ZpZXcuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvcGlwZXMuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvcGlwZXMvYXN5bmNfcGlwZS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9waXBlcy9kYXRlX3BpcGUuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvcGlwZXMvZGVmYXVsdF9waXBlcy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9waXBlcy9pbnZhbGlkX3BpcGVfYXJndW1lbnRfZXhjZXB0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL3BpcGVzL2pzb25fcGlwZS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9waXBlcy9sb3dlcmNhc2VfcGlwZS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9waXBlcy9udW1iZXJfcGlwZS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9waXBlcy9waXBlX3Byb3ZpZGVyLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL3BpcGVzL3BpcGVzLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL3BpcGVzL3NsaWNlX3BpcGUuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvcGlwZXMvdXBwZXJjYXNlX3BpcGUuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvcGxhdGZvcm1fYmluZGluZ3MuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvcHJvZmlsZS9wcm9maWxlLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL3Byb2ZpbGUvd3RmX2ltcGwuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvcHJvZmlsZS93dGZfaW5pdC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9yZWZsZWN0aW9uL3JlZmxlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvcmVmbGVjdGlvbi9yZWZsZWN0aW9uX2NhcGFiaWxpdGllcy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9yZWZsZWN0aW9uL3JlZmxlY3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9yZW5kZXIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvcmVuZGVyL2FwaS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9yZW5kZXIvZG9tL2RvbV9yZW5kZXJlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9yZW5kZXIvZG9tL2RvbV90b2tlbnMuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvcmVuZGVyL2RvbS9ldmVudHMvZXZlbnRfbWFuYWdlci5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9yZW5kZXIvZG9tL2V2ZW50cy9oYW1tZXJfY29tbW9uLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL3JlbmRlci9kb20vZXZlbnRzL2hhbW1lcl9nZXN0dXJlcy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9yZW5kZXIvZG9tL2V2ZW50cy9rZXlfZXZlbnRzLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL3JlbmRlci9kb20vc2hhcmVkX3N0eWxlc19ob3N0LmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL3JlbmRlci9kb20vdXRpbC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS9yZW5kZXIvcmVuZGVyLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL3JlbmRlci92aWV3LmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL3JlbmRlci92aWV3X2ZhY3RvcnkuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvc2VydmljZXMuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvc2VydmljZXMvdGl0bGUuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhcjIvc3JjL2NvcmUvdGVzdGFiaWxpdHkvYnJvd3Nlcl90ZXN0YWJpbGl0eS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS90ZXN0YWJpbGl0eS90ZXN0YWJpbGl0eS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS91dGlsLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL3V0aWwvZGVjb3JhdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvY29yZS96b25lLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXIyL3NyYy9jb3JlL3pvbmUvbmdfem9uZS5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyMi9zcmMvdHJhbnNmb3JtL3RlbXBsYXRlX2NvbXBpbGVyL2NoYW5nZV9kZXRlY3Rvcl9jb2RlZ2VuLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9kaXN0L2pzL25wbS5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvYWZmaXguanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL2FsZXJ0LmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9idXR0b24uanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL2Nhcm91c2VsLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9jb2xsYXBzZS5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvZHJvcGRvd24uanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL21vZGFsLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9wb3BvdmVyLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9zY3JvbGxzcHkuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL3RhYi5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvdG9vbHRpcC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvdHJhbnNpdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9maXJlYmFzZS9saWIvZmlyZWJhc2Utd2ViLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsNkRBQTZEO0FBQzdELDZEQUE2RDs7Ozs7Ozs7Ozs7O0FBRTdELHlCQUFtRCxtQkFBbUIsQ0FBQyxDQUFBO0FBSXZFO0lBNENJO1FBQ0ksaURBQWlEO1FBQ2pELCtEQUErRDtRQUMvRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksdUJBQVksRUFBRSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFFRCx5QkFBTSxHQUFOO1FBQ0ksa0RBQWtEO1FBQ2xELDREQUE0RDtRQUU1RCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU5QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLHFDQUFxQztJQUNwRSxDQUFDO0lBRUQsK0JBQVksR0FBWixVQUFhLE1BQU07UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCwrQkFBWSxHQUFaO1FBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDZCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN4QixDQUFDO0lBQ0wsQ0FBQztJQXZFTDtRQUFDLG9CQUFTLENBQUM7WUFDUCxRQUFRLEVBQUksVUFBVTtZQUN0QixVQUFVLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQztZQUNyQyxNQUFNLEVBQU0sQ0FBQyxXQUFXLENBQUMsQ0FBSywrQ0FBK0M7U0FDaEYsQ0FBQztRQUVELGVBQUksQ0FBQztZQUNGLFFBQVEsRUFBRSxvUUFLTDtZQUNMLFVBQVUsRUFBRSxDQUFDLGdCQUFLLENBQUM7U0FDdEIsQ0FBQzs7aUJBMEREO0lBQUQsZUFBQztBQUFELENBeEVBLEFBd0VDLElBQUE7QUF2RFksZ0JBQVEsV0F1RHBCLENBQUE7OztBQy9FRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELDZEQUE2RDs7Ozs7Ozs7Ozs7O0FBRTdELHlCQUF5RCxtQkFBbUIsQ0FBQyxDQUFBO0FBSTdFLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLFVBQVUsQ0FBQztBQUUxRDtJQXVESTtRQUNJLElBQUksQ0FBQyxZQUFZLEdBQUksRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQU8sVUFBVSxFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLFNBQVMsR0FBTyxFQUFFLENBQUM7UUFFeEIsaURBQWlEO1FBQ2pELCtEQUErRDtRQUUvRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksdUJBQVksRUFBRSxDQUFDO1FBRXBDLElBQUksQ0FBQyxNQUFNLEdBQVMsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFFRCwrQkFBTSxHQUFOO1FBQ0ksa0RBQWtEO1FBQ2xELDREQUE0RDtRQUU1RCxPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLHFDQUFxQztJQUNwRSxDQUFDO0lBRUQsdUNBQWMsR0FBZCxVQUFlLE1BQU0sRUFBRSxLQUFLO1FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0NBQW9DLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM3RSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUVyQixFQUFFO1FBQ0Ysd0RBQXdEO1FBQ3hELEVBQUU7UUFFRixJQUFJLFFBQVEsR0FBUSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN6RCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFN0UsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRXZCLElBQUksVUFBVSxHQUVQLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxVQUFTLFFBQVEsRUFBRSxZQUFZO1lBQy9ELElBQUksU0FBUyxHQUFHLEVBQUMsSUFBSSxFQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxRQUFRLEVBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFDLENBQUM7WUFDbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUV4RCxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7UUFFSCwwQ0FBMEM7UUFDMUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLFVBQVMsUUFBUSxFQUFFLFlBQVk7WUFDakUsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNuQywyQkFBMkI7Z0JBQzNCLE1BQU0sQ0FBQztZQUNYLENBQUM7WUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNwRSxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsMkNBQWtCLEdBQWxCLFVBQW1CLFNBQVM7UUFDeEIsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDcEMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osb0RBQW9EO1lBQ3BELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNWLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDeEYsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNYLENBQUM7WUFFRCxtQkFBbUI7WUFDbkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM5QyxDQUFDO0lBQ0wsQ0FBQztJQUVELHdDQUFlLEdBQWYsVUFBZ0IsS0FBSztRQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRWhELElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFJLEtBQUssQ0FBQztRQUVuQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFFaEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQTFJTDtRQUFDLG9CQUFTLENBQUM7WUFDUCxRQUFRLEVBQUksaUJBQWlCO1lBQzdCLFVBQVUsRUFBRSxDQUFDLCtCQUErQixDQUFDO1lBQzdDLE1BQU0sRUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFLLCtDQUErQztTQUNoRixDQUFDO1FBRUQsZUFBSSxDQUFDO1lBQ0YsUUFBUSxFQUFFLG1pQkFlTDtZQUNMLFVBQVUsRUFBRSxDQUFDLGdCQUFLLEVBQUUsZUFBSSxDQUFDO1NBQzVCLENBQUM7O3VCQW1IRDtJQUFELHFCQUFDO0FBQUQsQ0EzSUEsQUEySUMsSUFBQTtBQWhIWSxzQkFBYyxpQkFnSDFCLENBQUE7OztBQ3JKRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCx3Q0FBd0M7Ozs7Ozs7Ozs7OztBQUV4QyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEIsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBSXJCLHlCQUF5QyxtQkFBbUIsQ0FBQyxDQUFBO0FBRTdELElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFDcEQsSUFBSSxRQUFRLEdBQUssT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFFekQ7SUEyQkk7UUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUE7UUFFbkQsSUFBSSxDQUFDLEtBQUssR0FBUSxJQUFJLFFBQVEsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFRCx5REFBeUQ7SUFDekQseUNBQWtCLEdBQWxCLFVBQW1CLGNBQWM7UUFDN0IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWhCLElBQUksQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDO1FBRWpDLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDWCwrREFBK0Q7WUFDL0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxvQ0FBb0M7SUFDcEMsNkJBQU0sR0FBTjtRQUNJLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQztJQUNsQyxDQUFDO0lBRUQsK0JBQVEsR0FBUjtRQUNJLG9FQUFvRTtRQUNwRSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQy9ELEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLEdBQUcsR0FBRyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFRCxnQ0FBUyxHQUFULFVBQVUsTUFBTTtRQUNaLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUVoQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBUyxJQUFJO1lBRWxDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDbEMsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLElBQUksT0FBTyxHQUFHO29CQUNWLE1BQU0sRUFBRzt3QkFDTCxRQUFRLEVBQUs7NEJBQ1QsTUFBTSxFQUFHLFFBQVE7NEJBQ2pCLEVBQUUsRUFBTyxlQUFlO3lCQUMzQjt3QkFDRCxVQUFVLEVBQUc7NEJBQ1QsRUFBRSxFQUFPLG9CQUFvQjs0QkFDN0IsRUFBRSxFQUFPLG9CQUFvQjs0QkFDN0IsTUFBTSxFQUFHLHNCQUFzQjt5QkFDbEM7cUJBQ0o7aUJBQ0osQ0FBQztnQkFFRixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBRSxPQUFPLEVBQUU7b0JBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDbEMsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsdUNBQWdCLEdBQWhCLFVBQWlCLE1BQU07UUFDbkIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVoQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBUyxJQUFJO1lBRWxDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNqQyxNQUFNLEVBQUUsQ0FBQztZQUNiLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7Z0JBQ25CLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRztvQkFDbkIsTUFBTSxFQUFHO3dCQUNMLG1CQUFtQixFQUFHOzRCQUNsQixRQUFRLEVBQUssT0FBTzs0QkFDcEIsVUFBVSxFQUFHLE9BQU87NEJBRXBCLE9BQU8sRUFBTSxPQUFPOzRCQUNwQixRQUFRLEVBQUssWUFBWTs0QkFDekIsTUFBTSxFQUFPLE9BQU87eUJBQ3ZCO3FCQUNKO29CQUNELE9BQU8sRUFBRzt3QkFDTixtQkFBbUIsRUFBRzs0QkFDbEIsWUFBWSxFQUFHLE9BQU87eUJBQ3pCO3FCQUNKO2lCQUNKLENBQUM7Z0JBRUYsd0NBQXdDO2dCQUN4QyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBRSxTQUFTLEVBQUU7b0JBQzFCLE1BQU0sRUFBRSxDQUFDO2dCQUNiLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELEVBQUU7SUFDRixpQ0FBaUM7SUFDakMsRUFBRTtJQUNGLDBFQUEwRTtJQUMxRSxrREFBa0Q7SUFDbEQsRUFBRTtJQUVGLHFDQUFjLEdBQWQsVUFBZSxLQUFLO1FBQ2hCLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakQsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsbUNBQVksR0FBWixVQUFhLEtBQUs7UUFDZCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELEVBQUU7SUFDRixrREFBa0Q7SUFDbEQsRUFBRTtJQUVGLGlDQUFVLEdBQVY7UUFDSSxlQUFlO1FBQ2YsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDL0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBdEpMO1FBQUMsb0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxRQUFRO1NBQ3JCLENBQUM7UUFFRCxlQUFJLENBQUM7WUFDRixRQUFRLEVBQUUsZ2NBYUw7WUFFTCxVQUFVLEVBQUUsQ0FBQyxVQUFVLENBQUM7U0FDM0IsQ0FBQzs7cUJBa0lEO0lBQUQsbUJBQUM7QUFBRCxDQXZKQSxBQXVKQyxJQUFBO0FBRUQsMkVBQTJFO0FBQzNFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRTtJQUMxQyxvQkFBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzVCLENBQUMsQ0FBQyxDQUFDOzs7QUMzS0gsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0Qsa0NBQWtDO0FBQ2xDLHNDQUFzQzs7Ozs7Ozs7Ozs7O0FBRXRDLHlCQUFtRCxtQkFBbUIsQ0FBQyxDQUFBO0FBSXZFLElBQUksUUFBUSxHQUFTLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDcEQsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLGNBQWMsQ0FBQztBQUUxRCxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxjQUFjLENBQUM7QUFFbEU7SUFvSEk7UUFDSSxpREFBaUQ7UUFDakQsK0RBQStEO1FBRS9ELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSx1QkFBWSxFQUFFLENBQUM7UUFFcEMsSUFBSSxDQUFDLE1BQU0sR0FBVSxJQUFJLENBQUMsQ0FBRSw0QkFBNEI7UUFDeEQsSUFBSSxDQUFDLEtBQUssR0FBVyxJQUFJLENBQUM7UUFFMUIsSUFBSSxDQUFDLE1BQU0sR0FBVSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sR0FBVSxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLFdBQVcsR0FBSyxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBTyxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLFlBQVksR0FBSSxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLFdBQVcsR0FBSyxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELDJCQUFNLEdBQU47UUFDSSxrREFBa0Q7UUFDbEQsNERBQTREO1FBRTVELE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7SUFDcEUsQ0FBQztJQUVELG1DQUFjLEdBQWQsVUFBZSxNQUFNLEVBQUUsS0FBSztRQUN4QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFJLEtBQUssQ0FBQztRQUVwQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUU5QixJQUFJLElBQUksR0FBTSxJQUFJLENBQUM7UUFFbkIsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBUyxRQUFRO1lBQ3RELElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUMxQixJQUFJLEtBQUssQ0FBQztZQUNWLElBQUksWUFBWSxDQUFDO1lBQ2pCLEdBQUcsQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDMUIsWUFBWSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDbEQsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztvQkFDZixLQUFLLENBQUMsa0NBQWdDLFlBQVksNERBQXNELEtBQUssUUFBSSxDQUFDLENBQUM7b0JBQ25ILEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNyQyxDQUFDO2dCQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xDLENBQUM7WUFDRCxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25DLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUU7UUFDRix3QkFBd0I7UUFDeEIsRUFBRTtRQUNGLG1FQUFtRTtRQUNuRSx3RkFBd0Y7UUFDeEYsRUFBRTtRQUVGLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFdEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsVUFBUyxTQUFTLEVBQUUsWUFBWTtZQUN6RixPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ2hELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCx1Q0FBa0IsR0FBbEIsVUFBbUIsUUFBUTtRQUN2QixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDN0IsTUFBTSxDQUFDLENBQUMsdUJBQXVCO1FBQ25DLENBQUM7UUFFRCx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksUUFBUSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzVFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDWCxDQUFDO1FBRUQsbUJBQW1CO1FBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELEVBQUU7SUFDRixrQ0FBa0M7SUFDbEMsR0FBRztJQUVILHFDQUFnQixHQUFoQixVQUFpQixZQUFZO1FBQ3pCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQztJQUNyRCxDQUFDO0lBRUQsRUFBRTtJQUNGLGtDQUFrQztJQUNsQyxFQUFFO0lBRUYsNkJBQVEsR0FBUixVQUFTLFVBQVU7UUFDZixJQUFJLE9BQU8sR0FBSSxjQUFjLEVBQUUsQ0FBQyxDQUFFLG9DQUFvQztRQUN0RSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0RCxJQUFJLE9BQU8sR0FBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVyRCxFQUFFO1FBQ0YsNENBQTRDO1FBQzVDLEVBQUU7UUFFRixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUV0QixFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDWixJQUFJLENBQUMsV0FBVyxHQUFHLHdCQUF3QixDQUFDO1FBQ2hELENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDWCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDbkIsSUFBSSxDQUFDLFdBQVcsSUFBSSxrQkFBa0IsQ0FBQztZQUMzQyxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osSUFBSSxDQUFDLFdBQVcsR0FBRyx3QkFBd0IsQ0FBQztZQUNoRCxDQUFDO1FBQ0wsQ0FBQztRQUVELFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXJDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNkLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO2dCQUNuQixJQUFJLENBQUMsV0FBVyxJQUFJLHFCQUFxQixDQUFDO1lBQzlDLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixJQUFJLENBQUMsV0FBVyxHQUFHLDBCQUEwQixDQUFDO1lBQ2xELENBQUM7UUFDTCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDM0QsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztnQkFDZixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztvQkFDbkIsSUFBSSxDQUFDLFdBQVcsSUFBSSw4Q0FBNEMsWUFBWSxNQUFHLENBQUM7Z0JBQ3BGLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osSUFBSSxDQUFDLFdBQVcsR0FBRyx3Q0FBc0MsWUFBWSxNQUFHLENBQUM7Z0JBQzdFLENBQUM7WUFDTCxDQUFDO1FBQ0wsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxXQUFXLElBQUksR0FBRyxDQUFDO1lBQ3hCLE1BQU0sQ0FBQztRQUNYLENBQUM7UUFFRCxFQUFFO1FBQ0YsOERBQThEO1FBQzlELEVBQUU7UUFFRixJQUFJLFdBQVcsR0FBRztZQUNkLFFBQVEsRUFBSyxRQUFRO1lBQ3JCLFVBQVUsRUFBRyxVQUFVO1lBQ3ZCLE9BQU8sRUFBTSxPQUFPO1lBRXBCLFFBQVEsRUFBSyxPQUFPO1lBQ3BCLE1BQU0sRUFBTyxNQUFNO1NBQ3RCLENBQUE7UUFFRCxJQUFJLFFBQVEsR0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3hDLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDOUMsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDO1FBRXRCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVMsSUFBSTtZQUNsRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxtRkFBaUYsVUFBVSxPQUFJLENBQUM7WUFDdkgsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLEVBQUU7Z0JBQ0Ysc0NBQXNDO2dCQUN0QyxFQUFFO2dCQUVGLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO2dCQUV2QyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7Z0JBRWYsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFdBQVcsQ0FBQztnQkFFaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7b0JBQ3JELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQzdCLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELEVBQUU7SUFDRixxREFBcUQ7SUFDckQsRUFBRTtJQUVGLDJDQUFzQixHQUF0QixVQUF1QixVQUFVO1FBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUUzRCxVQUFVLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQsa0NBQWEsR0FBYixVQUFjLFFBQVE7UUFDbEIsa0VBQWtFO1FBQ2xFLGlFQUFpRTtRQUNqRSxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNsRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDbkIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2xCLENBQUM7SUFDTCxDQUFDO0lBRUQsRUFBRTtJQUNGLHlCQUF5QjtJQUN6QixFQUFFO0lBRUYsNEJBQU8sR0FBUCxVQUFRLFFBQVE7UUFDWixNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELDhCQUFTLEdBQVQsVUFBVSxRQUFRO1FBQ2QsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCwrQkFBVSxHQUFWLFVBQVcsUUFBUTtRQUNmLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBSyxHQUFHO1lBQ3BELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEdBQUc7WUFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkQsQ0FBQztJQUVELDJDQUFzQixHQUF0QixVQUF1QixLQUFLO1FBQ3hCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JELElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUViLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDM0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsR0FBRyxJQUFJLElBQUksQ0FBQztZQUFDLENBQUM7WUFFM0IsTUFBTSxDQUFBLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDekIsS0FBSyxHQUFHO29CQUNKLEdBQUcsSUFBSSxTQUFTLENBQUM7b0JBQ2pCLEtBQUssQ0FBQztnQkFDVjtvQkFDSSxHQUFHLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLENBQUM7UUFDTCxDQUFDO1FBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFRCxpQ0FBWSxHQUFaLFVBQWEsS0FBSztRQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBdFdMO1FBQUMsb0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBSSxhQUFhO1lBQ3pCLE1BQU0sRUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFLLCtDQUErQztTQUNoRixDQUFDO1FBRUQsZUFBSSxDQUFDO1lBQ0YsUUFBUSxFQUFFLHM4RkF3RUw7WUFDTCxVQUFVLEVBQUUsQ0FBQyxnQkFBSyxFQUFFLFFBQVEsRUFBRSxjQUFjLENBQUM7U0FDaEQsQ0FBQzs7bUJBdVJEO0lBQUQsaUJBQUM7QUFBRCxDQXZXQSxBQXVXQyxJQUFBO0FBcFJZLGtCQUFVLGFBb1J0QixDQUFBOzs7QUN0WEQsZ0VBQWdFO0FBSWhFLHdFQUF3RTtBQUN4RSxFQUFFO0FBQ0YsZ0NBQWdDO0FBQ2hDLEVBQUU7QUFDRixvQ0FBb0M7QUFDcEMsZ0RBQWdEO0FBQ2hELEVBQUU7QUFFRix3QkFBK0IsRUFBUTtJQUVuQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNuQixFQUFFLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRTVCLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDZixDQUFDO0FBVmUsc0JBQWMsaUJBVTdCLENBQUE7QUFFRCxvQkFBMkIsRUFBUTtJQUUvQixFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNuQixFQUFFLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFeEMsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNmLENBQUM7QUFUZSxrQkFBVSxhQVN6QixDQUFBO0FBRUQsbUJBQTBCLENBQVE7SUFFOUIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUVwQyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsT0FBTSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3JCLEdBQUcsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUNELE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDZixDQUFDO0FBVmUsaUJBQVMsWUFVeEIsQ0FBQTtBQUVELG9CQUEyQixDQUFRO0lBRS9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBSGUsa0JBQVUsYUFHekIsQ0FBQTtBQUVELGtCQUF5QixHQUFHLEVBQUUsTUFBTTtJQUNoQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbEUsQ0FBQztBQUZlLGdCQUFRLFdBRXZCLENBQUE7QUFFRCxFQUFFO0FBQ0Ysc0NBQXNDO0FBQ3RDLEVBQUU7QUFFRixzQkFBNkIsQ0FBQztJQUMxQixJQUFJLENBQUM7UUFDRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHVCQUF1QixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUU7SUFBQSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ1gsT0FBTyxDQUFDLEtBQUssQ0FBQywwQkFBMEIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMvQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2IsQ0FBQztJQUVELHlEQUF5RDtJQUN6RCw2QkFBNkI7QUFDakMsQ0FBQztBQVplLG9CQUFZLGVBWTNCLENBQUE7QUFFRCx3RUFBd0U7QUFDeEUsRUFBRTtBQUNGLDhCQUE4QjtBQUM5QixFQUFFO0FBRUYsZ0NBQXVDLEdBQU8sRUFBRSxPQUFZO0lBQ3hELEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUFBLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFBQSxDQUFDO0lBRTdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDeEIsT0FBTyxDQUFDLFlBQVksR0FBRyxvQkFBb0IsQ0FBQztJQUNoRCxDQUFDO0lBRUQsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0IsSUFBSSxLQUFLLENBQUM7SUFFVixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3RDLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbkIsc0NBQXNDO1FBQ3RDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBRXpDLGNBQWM7UUFDZCxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCx1Q0FBdUM7SUFDdkMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBRSxDQUFDO1FBQ3RCLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNYLEVBQUUsQ0FBQyxDQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUM7WUFDM0UsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDekMsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDN0MsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDN0IsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDakMsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUMsQ0FBQztRQUMzQixJQUFJLENBQVMsQ0FBQztZQUFDLE1BQU0sQ0FBRSxDQUFDLENBQUM7UUFBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUNuQixDQUFDO0FBckNlLDhCQUFzQix5QkFxQ3JDLENBQUE7QUFFRCxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELEVBQUU7QUFFRixrQ0FBeUMsR0FBTyxFQUFFLE9BQVk7SUFDMUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQUEsT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUFBLENBQUM7SUFFN0IsSUFBSSxPQUFPLEdBQUssc0JBQXNCLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7SUFFbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxNQUFNLEdBQUksRUFBRSxDQUFDO1FBQ2pCLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsSUFBSSxLQUFLLENBQUM7UUFDVixJQUFJLFNBQVMsQ0FBQztRQUVkLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDdEMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVuQix1QkFBdUI7WUFDdkIsU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDcEMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDeEMsRUFBRSxDQUFDLENBQUMsQ0FBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzdCLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLENBQUM7WUFDTCxDQUFDO1FBQ0wsQ0FBQztRQUVELDRCQUE0QjtRQUM1QixJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDZixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDckMsU0FBUyxDQUFDLElBQUksQ0FBRSxFQUFDLE1BQU0sRUFBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFFLENBQUM7UUFDL0UsQ0FBQztRQUVELHNCQUFzQjtRQUN0QixTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVMsQ0FBQyxFQUFFLENBQUM7WUFDeEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxDQUFDO1lBQ25DLElBQUksQ0FBaUIsQ0FBQztnQkFBQyxNQUFNLENBQUUsQ0FBQyxDQUFDO1lBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxNQUFNLENBQUMseUJBQXlCLENBQUMsT0FBTyxFQUFFLEVBQUMsU0FBUyxFQUFHLFNBQVMsRUFBQyxDQUFDLENBQUM7QUFDdkUsQ0FBQztBQXZDZSxnQ0FBd0IsMkJBdUN2QyxDQUFBO0FBRUQsbUNBQTBDLE9BQVcsRUFBRSxPQUFZO0lBQy9ELEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFBQyxDQUFDO0lBRS9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDckIsT0FBTyxDQUFDLEtBQUssQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1FBQ3RGLE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsa0JBQWtCLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSztRQUNsQyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFFYixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFHLCtFQUErRTtRQUNqRyxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN4QyxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUFDLENBQUM7WUFDekMsSUFBSSxDQUFnQixDQUFDO2dCQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1lBQUUsQ0FBQztRQUM3QyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7UUFDdkIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUUsOENBQThDO1lBQ2xGLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7UUFDbkMsQ0FBQztJQUNMLENBQUM7SUFFRCxnQkFBZ0IsTUFBTTtRQUNsQixNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUMvQixJQUFJLEdBQUcsR0FBTSxFQUFFLENBQUM7SUFDaEIsSUFBSSxHQUFHLENBQUM7SUFDUixJQUFJLFFBQVEsQ0FBQztJQUViLFNBQVM7SUFDVCxHQUFHLEdBQUcsRUFBRSxDQUFBO0lBQ1IsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNyQyxHQUFHLElBQUksUUFBUSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUNELEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFbkIsY0FBYztJQUNkLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDdEMsR0FBRyxHQUFHLEVBQUUsQ0FBQTtRQUNSLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDckMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsR0FBRyxJQUFJLFFBQVEsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvRCxDQUFDO1FBQ0QsR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUN0QixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNmLENBQUM7QUFyRGUsaUNBQXlCLDRCQXFEeEMsQ0FBQTtBQUVELHdFQUF3RTtBQUN4RSxFQUFFO0FBQ0YsbUJBQW1CO0FBQ25CLEVBQUU7QUFFRixFQUFFO0FBQ0YsOENBQThDO0FBQzlDLEVBQUU7QUFDRix1RUFBdUU7QUFDdkUsRUFBRTtBQUVGLGVBQXNCLEdBQU8sRUFBRSxPQUFpQjtJQUM1QyxJQUFJLElBQWEsQ0FBQztJQUNsQixJQUFJLE9BQWEsQ0FBQztJQUNsQixJQUFJLEtBQWtCLENBQUM7SUFDdkIsSUFBSSxJQUFnQixDQUFDO0lBQ3JCLElBQUksQ0FBZ0IsQ0FBQztJQUVyQixnREFBZ0Q7SUFDaEQsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFFLHlGQUF5RjtJQUMzRyxDQUFDO0lBRUQsZUFBZTtJQUNmLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxHQUFHLElBQUksUUFBUSxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUVELE9BQU87SUFDUCxFQUFFLENBQUMsQ0FBQyxHQUFHLFlBQVksSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN0QixJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELFNBQVM7SUFDVCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1YsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzlCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixFQUFFLENBQUMsQ0FBQyxHQUFHLFlBQVksTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN4QixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1YsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2hDLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNDLE9BQU8sR0FBTSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzlCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDO2dCQUN6QixDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDckUsQ0FBQztBQWxEZSxhQUFLLFFBa0RwQixDQUFBO0FBRUQsd0VBQXdFO0FBQ3hFLEVBQUU7QUFDRixnQkFBZ0I7QUFDaEIsRUFBRTtBQUVGLEVBQUU7QUFDRiwrQkFBK0I7QUFDL0IsRUFBRTtBQUNGLGtCQUF5QixDQUFDO0lBQ3RCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQUMsQ0FBQztJQUMzQyxFQUFFLENBQUMsQ0FBQyxDQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFRLENBQUM7UUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQUMsQ0FBQztJQUUzQyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFMZSxnQkFBUSxXQUt2QixDQUFBO0FBRUQsRUFBRTtBQUNGLGlCQUFpQjtBQUNqQixFQUFFO0FBRUYsbUJBQTBCLEdBQUcsRUFBRSxHQUFHO0lBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUN6RCxDQUFDO0FBRmUsaUJBQVMsWUFFeEIsQ0FBQTtBQUVELGdCQUF1QixHQUFHLEVBQUUsR0FBRztJQUMzQixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDL0MsQ0FBQztBQUZlLGNBQU0sU0FFckIsQ0FBQTtBQUVELEVBQUU7QUFDRixhQUFhO0FBQ2IsR0FBRztBQUNILDhEQUE4RDtBQUM5RCxvQ0FBb0M7QUFFcEM7SUFDSSxJQUFJLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyx3L0hBQXcvSCxDQUFDLENBQUM7SUFDOWdJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNmLENBQUM7QUFIZSxZQUFJLE9BR25CLENBQUE7OztBQzdURDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9JQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN21CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9XQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1YkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25vQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9UQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2V0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pnQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeE9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNua0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL09BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMTVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1Z0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDak5BO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4WEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN4WEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkdBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuOEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcGFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3NkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3REQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3UkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0lBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyUEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25VQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcktBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbGdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdHlwaW5ncy9hbmd1bGFyMi9hbmd1bGFyMi5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL2ZpcmViYXNlL2ZpcmViYXNlLmQudHNcIiAvPlxuXG5pbXBvcnQge0NvbXBvbmVudCwgVmlldywgTmdGb3IsIEV2ZW50RW1pdHRlcn0gZnJvbSAnYW5ndWxhcjIvYW5ndWxhcjInO1xuXG5kZWNsYXJlIHZhciBqUXVlcnk6YW55O1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogICAnZHJvcGRvd24nLFxuICAgIHByb3BlcnRpZXM6IFsnb3B0aW9ucycsICdpZCcsICduYW1lJ10sXG4gICAgZXZlbnRzOiAgICAgWydpbml0ZXZlbnQnXSAgICAgLy8gTk9URSB0aGF0IGV2ZW50IG5hbWVzIG11c3QgYmUgYWxsIGxvd2VyIGNhc2Vcbn0pXG5cbkBWaWV3KHtcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8c2VsZWN0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgIChjaGFuZ2UpPVwiaGFuZGxlU2VsZWN0KCRldmVudClcIiBpZD1cInt7aWR9fVwiPlxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCItMVwiPlNlbGVjdCB7e25hbWV9fTwvb3B0aW9uPlxuICAgICAgICAgIDxvcHRpb24gKm5nLWZvcj1cIiNvcHQgb2Ygb3B0aW9uc1wiIHZhbHVlPVwie3tvcHR9fVwiPnt7b3B0fX08L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIGAsXG4gICAgZGlyZWN0aXZlczogW05nRm9yXVxufSlcblxuXG5leHBvcnQgY2xhc3MgRHJvcGRvd24ge1xuICAgIC8vIFByb3BlcnRpZXNcbiAgICBvcHRpb25zIDogQXJyYXk8c3RyaW5nPjsgIC8vIGxpc3Qgb2Ygc3RyaW5ncyBmb3IgdGhlIDxvcHRpb25zPiBsaXN0XG4gICAgaWQgICAgICA6IHN0cmluZzsgICAgICAgICAvLyBpZCBmb3IgdGhlIDxzZWxlY3Q+IGVsZW1lbnRcbiAgICBuYW1lICAgIDogc3RyaW5nOyAgICAgICAgIC8vIG5hbWUgb2YgdGhpcyBkcm9wZG93blxuXG4gICAgLy8gTG9jYWxzXG4gICAgY3VycmVudCA6IHN0cmluZzsgICAgICAgICAvLyBjdXJyZW50IHZhbHVlXG5cbiAgICAvL1xuICAgIC8vIEN1cnJlbnRseSBhIDItc3RlcCBpbml0aWFsaXphdGlvbiB0byBob29rLXVwIGNoaWxkIHRvIHBhcmVudCBjb21wb25lbnRzXG4gICAgLy8gKHJlZ2lzdGVyUGFyZW50KCkgc3RlcCBub3QgbmVlZGVkIGZvciB0aGlzIGNvbXBvbmVudClcbiAgICAvL1xuICAgIC8vICAgY29uc3RydWN0b3IoKSAtIFtuYW1lIGZpeGVkIGJ5IEpTL1R5cGVzY3JpcHRdIGxvY2FsIChub24tYW5ndWxhcjItZGVwZW5kZW50KSBkYXRhIG9ubHkgXG4gICAgLy9cbiAgICAvLyAgIG9uSW5pdCgpICAgICAgLSBbbmFtZSBmaXhlZCBieSBhbmd1bGFyMl0gYW5ndWxhcjIgbGlmZWN5Y2xlIGluaXQtZG9uZSBldmVudCBjYWxsYmFjayBcbiAgICAvLyAgICAgICAgICAgICAgICAgICBHZW5lcmF0ZSBhIGluaXRldmVudCBbREIgY29udmVudGlvbiBuYW1lXSB0byBhbGVydCBwYXJlbnQgb2YgbmV3IGNoaWxkIGNvbXBvbmVudC5cbiAgICAvLyAgICAgICAgICAgICAgICAgICAoUGFyZW50IGNvbXBvbmVudCB3aWxsIHRoZW4gdHlwaWNhbGx5IGhhdmUgYSByZWdpc3RlcjxDaGlsZENvbXBvbmVudFR5cGU+KCkgZXZlbnQgaGFuZGxlcilcbiAgICAvL1xuICAgIC8vIFRPRE86IEVhc2llciBtZXRob2QgdG8gZ2V0IHBvaW50ZXJzIHRvIHBhcmVudCAmIGNoaWxkcmVuIGNvbXBvbmVudHMgXG4gICAgLy8gICAgICAgKGFuZC9vciB0aGVpciBuZWVkZWQgZGF0YSlcbiAgICAvL1xuXG4gICAgLy8gaW5pdGV2ZW50IGVtaXR0ZXJcbiAgICBwYXJlbnQgICAgICAgIDogYW55OyAgXG4gICAgaW5pdGV2ZW50ICAgICA6IEV2ZW50RW1pdHRlcjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBPbmx5IGluaXRpYWxpemUgbG9jYWxseSBpbnN0YXRpYXRlZCBkYXRhIGhlcmUgXG4gICAgICAgIC8vIChhbmd1bGFyMi1kZXBlbmRlbnQgZGF0YSBoYXMgbm90IHlldCBiZWVuIGZ1bGx5IGluaXRpYWxpemVkKVxuICAgICAgICB0aGlzLmluaXRldmVudCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gXCItMVwiO1xuICAgIH1cblxuICAgIG9uSW5pdCgpIHtcbiAgICAgICAgLy8gb25Jbml0KCkgaXMgYSBhbmd1bGFyMiBsaWZlY3ljbGUgbWV0aG9kIGNhbGxlZCBcbiAgICAgICAgLy8gYXV0b21hdGljYWxseSBhZnRlciBhbmd1bGFyMiBoYXMgY29tcGxldGVkIGluaXRpYWxpemF0aW9uXG5cbiAgICAgICAgY29uc29sZS5sb2coXCJEcm9wZG93biBvcHRpb25zXCIsIHRoaXMub3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5pbml0ZXZlbnQubmV4dCh0aGlzKTsgLy8gc2VuZCBpbml0ZXZlbnQgdG8gcGFyZW50IGNvbXBvbmVudFxuICAgIH1cblxuICAgIGhhbmRsZVNlbGVjdCgkZXZlbnQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gJGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgICAgY29uc29sZS5sb2coXCJEcm9wZG93biBzZWxlY3RlZFwiLCB0aGlzLmN1cnJlbnQpO1xuICAgIH1cblxuICAgIGN1cnJlbnRWYWx1ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudCA9PT0gXCItMVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdHlwaW5ncy9hbmd1bGFyMi9hbmd1bGFyMi5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL2ZpcmViYXNlL2ZpcmViYXNlLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3R5cGluZ3MvcmVxdWlyZWpzL3JlcXVpcmUuZC50c1wiIC8+XG5cbmltcG9ydCB7Q29tcG9uZW50LCBWaWV3LCBOZ0ZvciwgTmdJZiwgRXZlbnRFbWl0dGVyfSBmcm9tICdhbmd1bGFyMi9hbmd1bGFyMic7XG5cbmRlY2xhcmUgdmFyIGpRdWVyeTphbnk7XG5cbnZhciBmb3JtYXREYXRlID0gcmVxdWlyZSgnLi4vYXNzZXRzL2pzL3V0aWxzJykuZm9ybWF0RGF0ZTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICAgJ2pvdXJuYWwtZW50cmllcycsXG4gICAgcHJvcGVydGllczogWydqb3VybmFsSWRTdHIgOiBqb3VybmFsLWlkLXN0ciddLCAgLy8gcmVuYW1pbmcgdG8gY2FtZWwgY2FzZVxuICAgIGV2ZW50czogICAgIFsnaW5pdGV2ZW50J10gICAgIC8vIE5PVEUgdGhhdCBldmVudCBuYW1lcyBtdXN0IGJlIGFsbCBsb3dlciBjYXNlXG59KVxuXG5AVmlldyh7XG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPHRhYmxlIHN0eWxlPVwid2lkdGg6MTAwJVwiPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZCBzdHlsZT1cIndpZHRoOjEwMHB4XCI+IHt7dG9kYXlEYXRlfX0gPC90ZD5cbiAgICAgICAgICAgIDx0ZD4gXG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGlucHV0LXNtXCIgI2VudHJ5aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgIHZhbHVlPVwie3t0b2RheU5vdGV9fVwiIChjaGFuZ2UpPVwidXBkYXRlVG9kYXlOb3RlKGVudHJ5aW5wdXQudmFsdWUpXCI+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG5cbiAgICAgICAgICA8dHIgKm5nLWZvcj1cIiNlbnRyeSBvZiBvdGhlckVudHJpZXNcIj5cbiAgICAgICAgICAgIDx0ZCBzdHlsZT1cIndpZHRoOjEwMHB4XCI+IHt7ZW50cnkubm90ZURhdGV9fSA8L3RkPlxuICAgICAgICAgICAgPHRkPiB7e2VudHJ5Lm5vdGV9fSA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICAgIGAsXG4gICAgZGlyZWN0aXZlczogW05nRm9yLCBOZ0lmXVxufSlcblxuXG5leHBvcnQgY2xhc3MgSm91cm5hbEVudHJpZXMge1xuICAgIGpvdXJuYWxJZFN0ciAgICA6IHN0cmluZztcblxuICAgIG90aGVyRW50cmllcyAgICA6IEFycmF5PGFueT47XG5cbiAgICB0b2RheURhdGUgICAgICAgOiBzdHJpbmc7XG4gICAgdG9kYXlOb3RlICAgICAgIDogc3RyaW5nO1xuXG4gICAgLy9cbiAgICAvLyBDdXJyZW50bHkgYSAzLXN0ZXAgaW5pdGlhbGl6YXRpb24gdG8gaG9vay11cCBjaGlsZCB0byBwYXJlbnQgY29tcG9uZW50c1xuICAgIC8vXG4gICAgLy8gICBjb25zdHJ1Y3RvcigpIC0gW25hbWUgZml4ZWQgYnkgSlMvVHlwZXNjcmlwdF0gbG9jYWwgKG5vbi1hbmd1bGFyMi1kZXBlbmRlbnQpIGRhdGEgb25seSBcbiAgICAvL1xuICAgIC8vICAgb25Jbml0KCkgICAgICAtIFtuYW1lIGZpeGVkIGJ5IGFuZ3VsYXIyXSBhbmd1bGFyMiBsaWZlY3ljbGUgaW5pdC1kb25lIGV2ZW50IGNhbGxiYWNrIFxuICAgIC8vICAgICAgICAgICAgICAgICAgIEdlbmVyYXRlIGEgaW5pdGV2ZW50IFtEQiBjb252ZW50aW9uIG5hbWVdIHRvIGFsZXJ0IHBhcmVudCBvZiBuZXcgY2hpbGQgY29tcG9uZW50LlxuICAgIC8vICAgICAgICAgICAgICAgICAgIChQYXJlbnQgY29tcG9uZW50IHdpbGwgdGhlbiB0eXBpY2FsbHkgaGF2ZSBhIHJlZ2lzdGVyPENoaWxkQ29tcG9uZW50VHlwZT4oKSBldmVudCBoYW5kbGVyKVxuICAgIC8vXG4gICAgLy8gICByZWdpc3RlclBhcmVudCgpIC0gW0RCIGNvbnZlbnRpb24gbmFtZV0gY2FsbGVkIGJ5IHBhcmVudCBjb21wb25lbnRcbiAgICAvL1xuICAgIC8vIFRPRE86IEVhc2llciBtZXRob2QgdG8gZ2V0IHBvaW50ZXJzIHRvIHBhcmVudCAmIGNoaWxkcmVuIGNvbXBvbmVudHMgXG4gICAgLy8gICAgICAgKGFuZC9vciB0aGVpciBuZWVkZWQgZGF0YSlcbiAgICAvL1xuXG4gICAgLy8gaW5pdGV2ZW50IGVtaXR0ZXJcbiAgICBwYXJlbnQgICAgICAgIDogYW55OyAgXG4gICAgZGJKb3VybmFsUmVmICA6IEZpcmViYXNlOyAgICAgIC8vIFRvRG86IHVzZSBkZXBlbmRlbmN5IGluamVjdG9yIHRvIGdldCBEYXRhYmFzZSBzZXJ2aWNlXG4gICAgaW5pdGV2ZW50ICAgICA6IEV2ZW50RW1pdHRlcjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm90aGVyRW50cmllcyAgPSBbXTtcbiAgICAgICAgdGhpcy50b2RheURhdGUgICAgID0gZm9ybWF0RGF0ZSgpO1xuICAgICAgICB0aGlzLnRvZGF5Tm90ZSAgICAgPSAnJztcblxuICAgICAgICAvLyBPbmx5IGluaXRpYWxpemUgbG9jYWxseSBpbnN0YXRpYXRlZCBkYXRhIGhlcmUgXG4gICAgICAgIC8vIChhbmd1bGFyMi1kZXBlbmRlbnQgZGF0YSBoYXMgbm90IHlldCBiZWVuIGZ1bGx5IGluaXRpYWxpemVkKVxuXG4gICAgICAgIHRoaXMuaW5pdGV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgICAgIHRoaXMucGFyZW50ICAgICAgID0gbnVsbDtcbiAgICAgICAgdGhpcy5kYkpvdXJuYWxSZWYgPSBudWxsO1xuICAgIH1cblxuICAgIG9uSW5pdCgpIHtcbiAgICAgICAgLy8gb25Jbml0KCkgaXMgYSBhbmd1bGFyMiBsaWZlY3ljbGUgbWV0aG9kIGNhbGxlZCBcbiAgICAgICAgLy8gYXV0b21hdGljYWxseSBhZnRlciBhbmd1bGFyMiBoYXMgY29tcGxldGVkIGluaXRpYWxpemF0aW9uXG5cbiAgICAgICAgY29uc29sZS5sb2coXCJvbkluaXQ6IGZvciBKb3VybmFsRW50cmllc1wiLCB0aGlzLmpvdXJuYWxJZFN0cik7XG4gICAgICAgIHRoaXMuaW5pdGV2ZW50Lm5leHQodGhpcyk7IC8vIHNlbmQgaW5pdGV2ZW50IHRvIHBhcmVudCBjb21wb25lbnRcbiAgICB9XG5cbiAgICByZWdpc3RlclBhcmVudChwYXJlbnQsIGZiUmVmKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicmVnaXN0ZXJQYXJlbnQ6IGZvciBKb3VybmFsRW50cmllc1wiLCBwYXJlbnQsIHRoaXMuam91cm5hbElkU3RyKTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gQ29tcGxldGUgaW5pdGlhbGl6YXRpb24sIG5vdyB0aGF0IGV2ZXJ5dGhpbmcgaXMgcmVhZHlcbiAgICAgICAgLy9cblxuICAgICAgICB2YXIgZGJVc2VySWQgICAgICA9IHRoaXMucGFyZW50LnBhcmVudC5kYlVzZXJJZCgpO1xuXHR0aGlzLmRiSm91cm5hbFJlZiA9IGZiUmVmLmNoaWxkKGRiVXNlcklkKS5jaGlsZCgnZW50cmllcycpLmNoaWxkKHRoaXMuam91cm5hbElkU3RyKTtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cblx0dmFyIGpvdXJuYWxSZWYgPSBcblxuICAgICAgICB0aGlzLmRiSm91cm5hbFJlZi5vbignY2hpbGRfYWRkZWQnLCBmdW5jdGlvbihzbmFwc2hvdCwgcHJldkNoaWxkS2V5KSB7XG4gICAgICAgICAgICB2YXIgZW50cnlEYXRhID0ge25vdGUgOiBzbmFwc2hvdC52YWwoKSwgbm90ZURhdGUgOiBzbmFwc2hvdC5rZXkoKX07XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlZ2lzdGVyaW5nIG5ldyBqb3VybmFsIGVudHJ5XCIsIGVudHJ5RGF0YSk7XG5cbiAgICAgICAgICAgIHNlbGYuaGFuZGxlRW50cnlEaXNwbGF5KGVudHJ5RGF0YSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFdhdGNoIGZvciAocmVtb3RlKSBjaGFuZ2VzIG9uIHRvZGF5Tm90ZVxuICAgICAgICB0aGlzLmRiSm91cm5hbFJlZi5vbihcImNoaWxkX2NoYW5nZWRcIiwgZnVuY3Rpb24oc25hcHNob3QsIHByZXZDaGlsZEtleSkge1xuICAgICAgICAgICAgaWYgKHNuYXBzaG90LmtleSgpICE9IHNlbGYudG9kYXlEYXRlKSB7XG4gICAgICAgICAgICAgICAgLy8gaWdub3JlLCBhdCBsZWFzdCBmb3Igbm93XG4gICAgICAgICAgICAgICAgcmV0dXJuOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLnRvZGF5Tm90ZSAhPSBzbmFwc2hvdC52YWwoKSkge1xuICAgICAgICAgICAgICAgIHNlbGYudG9kYXlOb3RlID0gc25hcHNob3QudmFsKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZW1vdGUgdXBkYXRlIG9mIHRvZGF5J3Mgbm90ZSB0b1wiLCBzZWxmLnRvZGF5Tm90ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGhhbmRsZUVudHJ5RGlzcGxheShlbnRyeURhdGEpIHtcbiAgICAgICAgaWYgKGVudHJ5RGF0YS5ub3RlRGF0ZSA9PSB0aGlzLnRvZGF5RGF0ZSkge1xuICAgICAgICAgICAgdGhpcy50b2RheU5vdGUgPSBlbnRyeURhdGEubm90ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEluc2VydCBpbnRvIGxpc3QgYWNjb3JkaW5nIHRvIG5vdGVEYXRlIGRlc2NlbmRpbmdcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChpIDwgdGhpcy5vdGhlckVudHJpZXMubGVuZ3RoICYmIGVudHJ5RGF0YS5ub3RlRGF0ZSA8IHRoaXMub3RoZXJFbnRyaWVzW2ldLm5vdGVEYXRlKSB7XG4gICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbnNlcnQgaW50byBsaXN0XG4gICAgICAgICAgICB0aGlzLm90aGVyRW50cmllcy5zcGxpY2UoaSwgMCwgZW50cnlEYXRhKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZVRvZGF5Tm90ZSh2YWx1ZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlVwZGF0aW5nIHRvZGF5J3Mgbm90ZSB0bzpcIiwgdmFsdWUpO1xuXG4gICAgICAgIHZhciB1cGRhdGVPYmogPSB7fTtcbiAgICAgICAgdXBkYXRlT2JqW3RoaXMudG9kYXlEYXRlXSA9ICB2YWx1ZTtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5kYkpvdXJuYWxSZWYudXBkYXRlKHVwZGF0ZU9iaiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLnBhcmVudC5wYXJlbnQuZmxhc2hTYXZlZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdHlwaW5ncy9hbmd1bGFyMi9hbmd1bGFyMi5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL2ZpcmViYXNlL2ZpcmViYXNlLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3R5cGluZ3MvcmVxdWlyZWpzL3JlcXVpcmUuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi90cmFkZXN2aWV3LnRzXCIgLz5cblxucmVxdWlyZShcImZpcmViYXNlXCIpO1xucmVxdWlyZShcImJvb3RzdHJhcFwiKTtcblxuZGVjbGFyZSB2YXIgalF1ZXJ5OmFueTtcblxuaW1wb3J0IHtDb21wb25lbnQsIFZpZXcsIGJvb3RzdHJhcH0gZnJvbSAnYW5ndWxhcjIvYW5ndWxhcjInO1xuXG52YXIgT3BlblRyYWRlcyA9IHJlcXVpcmUoJy4vdHJhZGVzdmlldycpLk9wZW5UcmFkZXM7XG52YXIgRmlyZWJhc2UgICA9IHJlcXVpcmUoJ2ZpcmViYXNlL2xpYi9maXJlYmFzZS13ZWIuanMnKTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdteS1hcHAnXG59KVxuXG5AVmlldyh7XG4gICAgdGVtcGxhdGU6IGBcblxuICAgICAgICA8IS0tIEZvciBub3csIGp1c3Qgc2hvdyBvcGVuLXRyYWRlcyBwYWdlIC0tPlxuXG4gICAgICAgIDwhLS0gTGF0ZXIsIG1pZ2h0IHN3aXRjaCBiZXR3ZWVuIGRpZmZlcmVudCB2aWV3cywgXG4gICAgICAgICAgICAgbGlrZSBvcGVuIHRyYWRlcywgaGlzdG9yeS9hcmNoaXZlLCBsb2dpbiBwYWdlIC0tPlxuXG4gICAgICAgIDxvcGVuLXRyYWRlcyAoaW5pdGV2ZW50KT1cInJlZ2lzdGVyT3BlblRyYWRlcygkZXZlbnQpXCI+IDwvb3Blbi10cmFkZXM+XG5cbiAgICAgICAgPGg0IGlkPVwic2F2ZS1pbmRpY2F0b3JcIiBjbGFzcz1cImJnLXN1Y2Nlc3NcIiBzdHlsZT1cInBvc2l0aW9uOmZpeGVkOyBwYWRkaW5nOjEwcHggMjBweDsgcmlnaHQ6NXB4OyB0b3A6NXB4OyBkaXNwbGF5Om5vbmVcIj5cbiAgICAgICAgICBTYXZlZFxuICAgICAgICA8L2g0PlxuXG4gICAgICAgIGAsXG5cbiAgICBkaXJlY3RpdmVzOiBbT3BlblRyYWRlc11cbn0pXG5cbmNsYXNzIFRyYWRlSm91cm5hbCB7XG4gICAgb3BlblRyYWRlcyAgIDogYW55OyAgIC8vIChPcGVuVHJhZGVzLCBidXQgVHlwZXNjcmlwdCBjb21wbGFpbmluZylcbiAgICBmYlJlZiAgICAgICAgOiBGaXJlYmFzZTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIm1haW4udHM6IGluIFRyYWRlSm91cm5hbCBjb25zdHJ1Y3RvclwiKVxuXG4gICAgICAgIHRoaXMuZmJSZWYgICAgICA9IG5ldyBGaXJlYmFzZSgnaHR0cHM6Ly90cmpvdXJuYWwuZmlyZWJhc2Vpby5jb20nKTtcbiAgICAgICAgdGhpcy5vcGVuVHJhZGVzID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBDYWxsZWQgdmlhICdpbml0ZXZlbnQnIGV2ZW50IGZyb20gT3BlblRyYWRlcyBjb21wb25lbnRcbiAgICByZWdpc3Rlck9wZW5UcmFkZXMob3BlblRyYWRlc0NvbXApIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIHNlbGYub3BlblRyYWRlcyA9IG9wZW5UcmFkZXNDb21wO1xuICAgICAgICBcbiAgICAgICAgc2VsZi5wcmVwYXJlREIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBSZWdpc3RlciBwYXJlbnQgKGFuZCBvdGhlciBpbml0aWFsaXphdGlvbikgYWZ0ZXIgREIgaXMgcmVhZHlcbiAgICAgICAgICAgIHNlbGYub3BlblRyYWRlcy5yZWdpc3RlclBhcmVudChzZWxmLCBzZWxmLmZiUmVmKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ3VycmVudCB1c2VyLCBmaXhlZCB0byBFZCBmb3Igbm93XG4gICAgdXNlcklkKCkge1xuICAgICAgICByZXR1cm4gXCJlYWN0cmFja2VyQGdtYWlsLmNvbVwiO1xuICAgIH1cblxuICAgIGRiVXNlcklkKCkge1xuICAgICAgICAvLyBBc3N1bWUgdXNlcklkIGlzIGFuIGVtYWlsIGFkZHJlc3MgYW5kIHJlcGxhY2Ugd2l0aCB2YWxpZCBJRCBjaGFyc1xuICAgICAgICB2YXIgcmVzID0gdGhpcy51c2VySWQoKS5yZXBsYWNlKCdAJywgJy1hdC0nKS5yZXBsYWNlKCcuJywgJ18nKTtcbiAgICAgICAgcmVzID0gdGhpcy52YWxpZElkQ2hhcnMocmVzKTtcbiAgICAgICAgcmVzID0gcmVzLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgcHJlcGFyZURCKGRvbmVDQikge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIFxuICAgICAgICBzZWxmLmZiUmVmLm9uY2UoJ3ZhbHVlJywgZnVuY3Rpb24oZGF0YSkge1xuXG4gICAgICAgICAgICBpZiAoZGF0YS5jaGlsZCgndm9jYWJzJykuZXhpc3RzKCkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnByZXBhcmVEQkZvclVzZXIoZG9uZUNCKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGRiU2V0dXAgPSB7XG4gICAgICAgICAgICAgICAgICAgIHZvY2FicyA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRzICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2Nod2FiIDogJ1NjaHdhYicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVEQgICAgIDogJ1REIEFtZXJpdHJhZGUnXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyYXRlZ2llcyA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNTSAgICAgOiAnd2hhdCBNTSBzdGFuZHMgZm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDQyAgICAgOiAnd2hhdCBDQyBzdGFuZHMgZm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ0MtYScgOiAnd2hhdCBDQy1hIHN0YW5kcyBmb3InXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgc2VsZi5mYlJlZi51cGRhdGUoIGRiU2V0dXAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnByZXBhcmVEQkZvclVzZXIoZG9uZUNCKTtcbiAgICAgICAgICAgICAgICB9KTsgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pOyAgICAgICBcbiAgICB9XG5cbiAgICBwcmVwYXJlREJGb3JVc2VyKGRvbmVDQikge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciB1c2VySWRTdHIgPSBzZWxmLmRiVXNlcklkKCk7XG5cbiAgICAgICAgc2VsZi5mYlJlZi5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgICAgICAgICAgaWYgKGRhdGEuY2hpbGQodXNlcklkU3RyKS5leGlzdHMoKSkge1xuICAgICAgICAgICAgICAgIGRvbmVDQigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdXNlclNldHVwID0ge307XG4gICAgICAgICAgICAgICAgdXNlclNldHVwW3VzZXJJZFN0cl0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWRlcyA6IHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAnZHVtbXlfZHVtbXlfZHVtbXknIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmF0ZWd5ICAgOiAnZHVtbXknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGlyYXRpb24gOiAnZHVtbXknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnQgICAgOiAnZHVtbXknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5EYXRlICAgOiAnMTkwMC0wMS0wMScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzICAgICA6ICdkdW1teSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZW50cmllcyA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdkdW1teV9kdW1teV9kdW1teScgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzE5MDAtMDEtMDEnIDogJ2R1bW15J1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gdXNlIHNldCByYXRoZXIgdGhhbiB1cGRhdGUgdG8gaW5pdCBEQlxuICAgICAgICAgICAgICAgIHNlbGYuZmJSZWYudXBkYXRlKCB1c2VyU2V0dXAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBkb25lQ0IoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBWYWxpZCBJRCBzdHJpbmcgaGVscGVyIG1ldGhvZHNcbiAgICAvL1xuICAgIC8vIE9ubHkgYWxsb3cgbGV0dGVycywgbnVtYmVycywgdW5kZXJzY29yZSBhbmQgZGFzaCBjaGFyYWN0ZXJzLCBzbyBpdCBjYW4gXG4gICAgLy8gYmUgdXNlZCBmb3IgSFRNTCBpZHMsIGpxdWVyeSwgYW5kIEZpcmViYXNlIGtleXNcbiAgICAvL1xuXG4gICAgaW52YWxpZElkQ2hhcnModmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlLnJlcGxhY2UoL1thLXpBLVowLTlfLV0vZywgJycpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhbGlkSWRDaGFycyh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdmFsdWUucmVwbGFjZSgvW15hLXpBLVowLTlfLV0vZywgJycpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vXG4gICAgLy8gRmxhc2ggXCJzYXZlZFwiIHRvIGluZm9ybSB1c2VyIG9mIHN1Y2Nlc3NmdWwgc2F2ZVxuICAgIC8vXG5cbiAgICBmbGFzaFNhdmVkKCkge1xuICAgICAgICAvLyB1c2luZyBqcXVlcnlcbiAgICAgICAgdmFyICRzYXZlZCA9IGpRdWVyeShcIiNzYXZlLWluZGljYXRvclwiKTtcbiAgICAgICAgJHNhdmVkLnN0b3AodHJ1ZSwgdHJ1ZSkuc2hvdygpO1xuICAgICAgICAkc2F2ZWQuZmFkZU91dCgyNTAwKTtcbiAgICB9XG59XG5cbi8vIHNpbWlsYXIgdG8galF1ZXJ5KGRvY3VtZW50KS5yZWFkeSgpLCBidXQgZG9lc24ndCB3b3JrIGluIG9sZCBJRSBicm93c2Vyc1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCl7IFxuICAgIGJvb3RzdHJhcChUcmFkZUpvdXJuYWwpO1xufSk7XG5cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL2FuZ3VsYXIyL2FuZ3VsYXIyLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3R5cGluZ3MvZmlyZWJhc2UvZmlyZWJhc2UuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdHlwaW5ncy9yZXF1aXJlanMvcmVxdWlyZS5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL21haW4udHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vamVudHJpZXMudHNcIiAvPlxuXG5pbXBvcnQge0NvbXBvbmVudCwgVmlldywgTmdGb3IsIEV2ZW50RW1pdHRlcn0gZnJvbSAnYW5ndWxhcjIvYW5ndWxhcjInO1xuXG5kZWNsYXJlIHZhciBqUXVlcnk6YW55O1xuXG52YXIgRHJvcGRvd24gICAgICAgPSByZXF1aXJlKCcuL2Ryb3Bkb3duJykuRHJvcGRvd247XG52YXIgSm91cm5hbEVudHJpZXMgPSByZXF1aXJlKCcuL2plbnRyaWVzJykuSm91cm5hbEVudHJpZXM7XG5cbnZhciBmb3JtYXREYXRldGltZSA9IHJlcXVpcmUoJy4uL2Fzc2V0cy9qcy91dGlscycpLmZvcm1hdERhdGV0aW1lO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogICAnb3Blbi10cmFkZXMnLFxuICAgIGV2ZW50czogICAgIFsnaW5pdGV2ZW50J10gICAgIC8vIE5PVEUgdGhhdCBldmVudCBuYW1lcyBtdXN0IGJlIGFsbCBsb3dlciBjYXNlXG59KVxuXG5AVmlldyh7XG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuXG4gICAgICAgICAgPGgyPk9wZW4gVHJhZGVzIC0ge3t1c2VySWR9fTwvaDI+XG5cbiAgICAgICAgICA8ZGl2IGlkPVwib3Blbi10cmFkZXNcIj5cbiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlLXN0cmlwZWQgdGFibGUtaG92ZXJcIiBzdHlsZT1cIndpZHRoOjEwMCVcIj5cbiAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgIDx0aD4gU3RyYXRlZ3kgICA8L3RoPlxuICAgICAgICAgICAgICAgIDx0aD4gRXhwaXJhdGlvbiA8L3RoPlxuICAgICAgICAgICAgICAgIDx0aD4gT3BlbmVkICAgICA8L3RoPlxuICAgICAgICAgICAgICAgIDx0aD4gQWNjb3VudCAgICA8L3RoPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICA8dGJvZHkgKm5nLWZvcj1cIiN0cmFkZSBvZiB0cmFkZXNcIj5cbiAgICAgICAgICAgICAgICA8dHIgc3R5bGU9XCJjdXJzb3I6cG9pbnRlclwiIChjbGljayk9XCJ0b2dnbGVFbnRyaWVzKHRyYWRlKVwiPlxuICAgICAgICAgICAgICAgICAgPHRkPiB7e3RyYWRlLnN0cmF0ZWd5fX0gICA8L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkPiB7e3RyYWRlLmV4cGlyYXRpb259fSA8L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkPiB7e3RyYWRlLm9wZW5EYXRlfX0gICA8L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkPiB7e3RyYWRlLmFjY291bnR9fSAgICA8L3RkPlxuICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgPHRyIFtpZF09XCJqb3VybmFsSWQodHJhZGUpXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmVcIj5cbiAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPVwiNFwiIHN0eWxlPVwicGFkZGluZzoxMHB4IDBweCAxMHB4IDMwcHhcIj5cbiAgICAgICAgICAgICAgICAgICAgPCEtLSBcIiRldmVudFwiIHBhcmFtZXRlciBuYW1lIGFwcGVhcnMgdG8gYmUgc3BlY2lhbCBoZXJlIC0tPlxuICAgICAgICAgICAgICAgICAgICA8am91cm5hbC1lbnRyaWVzIChpbml0ZXZlbnQpPVwicmVnaXN0ZXJKb3VybmFsRW50cmllcygkZXZlbnQpXCIgW2pvdXJuYWwtaWQtc3RyXT1cInRyYWRlSWRTdHIodHJhZGUpXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvam91cm5hbC1lbnRyaWVzPlxuICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgaWQ9XCJuZXctdHJhZGVcIj5cbiAgICAgICAgICAgIDxoMz5OZXcgVHJhZGU6PC9oMz5cblxuICAgICAgICAgICAgPGZvcm0gY2xhc3M9XCJmb3JtLWhvcml6b250YWxcIj5cblxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1zbS0yIGNvbnRyb2wtbGFiZWxcIiBmb3I9XCJuZXctc3RyYXRcIj5TdHJhdGVneTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMFwiPlxuICAgICAgICAgICAgICAgICAgPGRyb3Bkb3duIFtvcHRpb25zXT1cInN0cmF0ZWd5Vm9jYWJcIiAoaW5pdGV2ZW50KT1cInJlZ2lzdGVyRHJvcGRvd24oJGV2ZW50KVwiIGlkPVwibmV3LXN0cmF0XCIgbmFtZT1cInN0cmF0ZWd5XCI+XG4gICAgICAgICAgICAgICAgICA8L2Ryb3Bkb3duPiAgIFxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1zbS0yIGNvbnRyb2wtbGFiZWxcIiBmb3I9XCJuZXctZXhwXCI+RXhwaXJhdGlvbjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMFwiPlxuICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgaW5wdXQtc21cIiBpZD1cIm5ldy1leHBcIiAjbmV3ZXhwIHBsYWNlaG9sZGVyPVwiRGVjMTQsIEphbjE1LWEsIC4uLlwiPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1zbS0yIGNvbnRyb2wtbGFiZWxcIiBmb3I9XCJuZXctYWNjb3VudFwiPkFjY291bnQ8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTBcIj5cbiAgICAgICAgICAgICAgICAgIDxkcm9wZG93biBbb3B0aW9uc109XCJhY2NvdW50Vm9jYWJcIiAoaW5pdGV2ZW50KT1cInJlZ2lzdGVyRHJvcGRvd24oJGV2ZW50KVwiIGlkPVwibmV3LWFjY291bnRcIiBuYW1lPVwiYWNjb3VudFwiPlxuICAgICAgICAgICAgICAgICAgPC9kcm9wZG93bj4gICBcbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLW9mZnNldC0yIGNvbC1zbS0xMFwiPlxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgKGNsaWNrKT1cIm5ld1RyYWRlKG5ld2V4cC52YWx1ZSlcIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiPlxuICAgICAgICAgICAgICAgICAgICBTYXZlIE5ldyBUcmFkZVxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICA8cCBbaGlkZGVuXT1cIm5ld1RyYWRlRXJyLmxlbmd0aCA9PT0gMFwiIGNsYXNzPVwidGV4dC13YXJuaW5nXCI+e3tuZXdUcmFkZUVycn19PC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPC9mb3JtPlxuXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBgLFxuICAgIGRpcmVjdGl2ZXM6IFtOZ0ZvciwgRHJvcGRvd24sIEpvdXJuYWxFbnRyaWVzXVxufSlcblxuXG5leHBvcnQgY2xhc3MgT3BlblRyYWRlcyB7XG4gICAgdHJhZGVzICAgICAgICA6IEFycmF5PGFueT47XG5cbiAgICBqRW50cnlDb21wcyAgIDogYW55O1xuICAgIGRyb3Bkb3ducyAgICAgOiBhbnk7XG5cbiAgICBzdHJhdGVneVZvY2FiIDogQXJyYXk8c3RyaW5nPjtcbiAgICBhY2NvdW50Vm9jYWIgIDogQXJyYXk8c3RyaW5nPjtcblxuICAgIG5ld1RyYWRlRXJyICAgOiBzdHJpbmc7XG5cbiAgICB1c2VySWQgICAgICAgIDogc3RyaW5nO1xuXG4gICAgLy9cbiAgICAvLyBDdXJyZW50bHkgYSAzLXN0ZXAgaW5pdGlhbGl6YXRpb24gdG8gaG9vay11cCBjaGlsZCB0byBwYXJlbnQgY29tcG9uZW50c1xuICAgIC8vXG4gICAgLy8gICBjb25zdHJ1Y3RvcigpIC0gW25hbWUgZml4ZWQgYnkgSlMvVHlwZXNjcmlwdF0gbG9jYWwgKG5vbi1hbmd1bGFyMi1kZXBlbmRlbnQpIGRhdGEgb25seSBcbiAgICAvL1xuICAgIC8vICAgb25Jbml0KCkgICAgICAtIFtuYW1lIGZpeGVkIGJ5IGFuZ3VsYXIyXSBhbmd1bGFyMiBsaWZlY3ljbGUgaW5pdC1kb25lIGV2ZW50IGNhbGxiYWNrIFxuICAgIC8vICAgICAgICAgICAgICAgICAgIEdlbmVyYXRlIGEgaW5pdGV2ZW50IFtEQiBjb252ZW50aW9uIG5hbWVdIHRvIGFsZXJ0IHBhcmVudCBvZiBuZXcgY2hpbGQgY29tcG9uZW50LlxuICAgIC8vICAgICAgICAgICAgICAgICAgIChQYXJlbnQgY29tcG9uZW50IHdpbGwgdGhlbiB0eXBpY2FsbHkgaGF2ZSBhIHJlZ2lzdGVyPENoaWxkQ29tcG9uZW50VHlwZT4oKSBldmVudCBoYW5kbGVyKVxuICAgIC8vXG4gICAgLy8gICByZWdpc3RlclBhcmVudCgpIC0gW0RCIGNvbnZlbnRpb24gbmFtZV0gY2FsbGVkIGJ5IHBhcmVudCBjb21wb25lbnRcbiAgICAvL1xuICAgIC8vIFRPRE86IEVhc2llciBtZXRob2QgdG8gZ2V0IHBvaW50ZXJzIHRvIHBhcmVudCAmIGNoaWxkcmVuIGNvbXBvbmVudHMgXG4gICAgLy8gICAgICAgKGFuZC9vciB0aGVpciBuZWVkZWQgZGF0YSlcbiAgICAvL1xuXG4gICAgLy8gaW5pdGV2ZW50IGVtaXR0ZXJcbiAgICBwYXJlbnQgICAgICAgIDogYW55OyAgXG4gICAgZmJSZWYgICAgICAgICA6IEZpcmViYXNlOyAgICAgIC8vIFRvRG86IHVzZSBkZXBlbmRlbmN5IGluamVjdG9yIHRvIGdldCBEYXRhYmFzZSBzZXJ2aWNlXG4gICAgaW5pdGV2ZW50ICAgICA6IEV2ZW50RW1pdHRlcjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBPbmx5IGluaXRpYWxpemUgbG9jYWxseSBpbnN0YXRpYXRlZCBkYXRhIGhlcmUgXG4gICAgICAgIC8vIChhbmd1bGFyMi1kZXBlbmRlbnQgZGF0YSBoYXMgbm90IHlldCBiZWVuIGZ1bGx5IGluaXRpYWxpemVkKVxuXG4gICAgICAgIHRoaXMuaW5pdGV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgICAgIHRoaXMucGFyZW50ICAgICAgICA9IG51bGw7ICAvLyB3aWxsIGJlIHNldCBieSB0aGUgcGFyZW50XG4gICAgICAgIHRoaXMuZmJSZWYgICAgICAgICA9IG51bGw7XG5cbiAgICAgICAgdGhpcy50cmFkZXMgICAgICAgID0gW107XG4gICAgICAgIHRoaXMudXNlcklkICAgICAgICA9ICcnO1xuXG4gICAgICAgIHRoaXMuakVudHJ5Q29tcHMgICA9IHt9O1xuICAgICAgICB0aGlzLmRyb3Bkb3ducyAgICAgPSB7fTtcblxuICAgICAgICB0aGlzLnN0cmF0ZWd5Vm9jYWIgPSBbXTtcbiAgICAgICAgdGhpcy5hY2NvdW50Vm9jYWIgID0gW107XG5cbiAgICAgICAgdGhpcy5uZXdUcmFkZUVyciAgID0gXCJcIjtcbiAgICB9XG5cbiAgICBvbkluaXQoKSB7XG4gICAgICAgIC8vIG9uSW5pdCgpIGlzIGEgYW5ndWxhcjIgbGlmZWN5Y2xlIG1ldGhvZCBjYWxsZWQgXG4gICAgICAgIC8vIGF1dG9tYXRpY2FsbHkgYWZ0ZXIgYW5ndWxhcjIgaGFzIGNvbXBsZXRlZCBpbml0aWFsaXphdGlvblxuXG4gICAgICAgIGNvbnNvbGUubG9nKFwib25Jbml0OiBmb3IgT3BlblRyYWRlc1wiLCB0aGlzKTtcbiAgICAgICAgdGhpcy5pbml0ZXZlbnQubmV4dCh0aGlzKTsgLy8gc2VuZCBpbml0ZXZlbnQgdG8gcGFyZW50IGNvbXBvbmVudFxuICAgIH1cblxuICAgIHJlZ2lzdGVyUGFyZW50KHBhcmVudCwgZmJSZWYpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuZmJSZWYgID0gZmJSZWY7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnVzZXJJZCA9IHBhcmVudC51c2VySWQoKTtcblxuICAgICAgICB2YXIgc2VsZiAgICA9IHRoaXM7XG5cbiAgICAgICAgLy8gSW5pdCB2b2NhYnMgZm9yIGRyb3Bkb3duIGxpc3RzXG4gICAgICAgIHNlbGYuZmJSZWYuY2hpbGQoJ3ZvY2FicycpLm9uY2UoJ3ZhbHVlJywgZnVuY3Rpb24oc25hcHNob3QpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gc25hcHNob3QudmFsKCk7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICB2YXIgaW52YWxpZENoYXJzO1xuICAgICAgICAgICAgZm9yICh2YWx1ZSBpbiBkYXRhLmFjY291bnRzKSB7XG4gICAgICAgICAgICAgICAgaW52YWxpZENoYXJzID0gc2VsZi5pbnZhbGlkSWRDaGFyc0ZyaWVuZGx5KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoaW52YWxpZENoYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KGBXYXJuaW5nLCBpbnZhbGlkIGNoYXJhY3RlcnMgKCR7aW52YWxpZENoYXJzfSkgd2lsbCBiZSByZW1vdmVkIGZvciAnYWNjb3VudHMnIHZvY2FidWxhcnkgZW50cnkgXCIke3ZhbHVlfS5cImApO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHNlbGYudmFsaWRJZENoYXJzKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VsZi5hY2NvdW50Vm9jYWIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhbHVlIGluIGRhdGEuc3RyYXRlZ2llcykge1xuICAgICAgICAgICAgICAgIHNlbGYuc3RyYXRlZ3lWb2NhYi5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gV2F0Y2ggZm9yIG5ldyB0cmFkZXMuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIE5PVEUsIGNvbnRyYXJ5IHRvIHRoZSBldmVudCBuYW1lIChcImNoaWxkX2FkZGVkXCIpLCB0aGlzIHdpbGwgYWxzb1xuICAgICAgICAvLyB0cmlnZ2VyIG9uY2UgZm9yIGVhY2ggY2hpbGQgcHJlc2VudCBpbml0aWFsbHkgKG5vdCBKVVNUIHdoZW4gbmV3IGNoaWxkcmVuIGFyZSBhZGRlZCkuXG4gICAgICAgIC8vXG5cbiAgICAgICAgdmFyIGRiVXNlcklkID0gc2VsZi5wYXJlbnQuZGJVc2VySWQoKTtcblxuICAgICAgICBzZWxmLmZiUmVmLmNoaWxkKGRiVXNlcklkKS5jaGlsZCgndHJhZGVzJykub24oJ2NoaWxkX2FkZGVkJywgZnVuY3Rpb24odHJhZGVEYXRhLCBwcmV2Q2hpbGRLZXkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVnaXN0ZXJpbmcgbmV3IHRyYWRlXCIsIHRyYWRlRGF0YSk7XG4gICAgICAgICAgICBzZWxmLmhhbmRsZVRyYWRlRGlzcGxheSh0cmFkZURhdGEudmFsKCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoYW5kbGVUcmFkZURpc3BsYXkodHJhZGVPYmopIHtcbiAgICAgICAgaWYgKHRyYWRlT2JqLnN0YXR1cyAhPT0gJ29wZW4nKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIGlnbm9yZSwgY2xvc2VkIHRyYWRlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbnNlcnQgaW50byBsaXN0IGFjY29yZGluZyB0byBvcGVuRGF0ZVxuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgdGhpcy50cmFkZXMubGVuZ3RoICYmIHRyYWRlT2JqLm9wZW5EYXRlID49IHRoaXMudHJhZGVzW2ldLm9wZW5EYXRlKSB7XG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbnNlcnQgaW50byBsaXN0XG4gICAgICAgIHRoaXMudHJhZGVzLnNwbGljZShpLCAwLCB0cmFkZU9iaik7XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBUcmFjayBEcm9wZG93biBjaGlsZCBjb21wb25lbnRzXG4gICAgLy8gXG5cbiAgICByZWdpc3RlckRyb3Bkb3duKGRyb3Bkb3duQ29tcCkge1xuICAgICAgICB0aGlzLmRyb3Bkb3duc1tkcm9wZG93bkNvbXAubmFtZV0gPSBkcm9wZG93bkNvbXA7XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBIYW5kbGluZyBjcmVhdGlvbiBvZiBuZXcgdHJhZGVzXG4gICAgLy9cblxuICAgIG5ld1RyYWRlKGV4cGlyYXRpb24pIHtcbiAgICAgICAgdmFyIGRhdGVTdHIgID0gZm9ybWF0RGF0ZXRpbWUoKTsgIC8vIHVzZXMgY3VycmVudCBkYXRlL3RpbWUgYnkgZGVmYXVsdFxuICAgICAgICB2YXIgc3RyYXRlZ3kgPSB0aGlzLmRyb3Bkb3ducy5zdHJhdGVneS5jdXJyZW50VmFsdWUoKTtcbiAgICAgICAgdmFyIGFjY291bnQgID0gdGhpcy5kcm9wZG93bnMuYWNjb3VudC5jdXJyZW50VmFsdWUoKTtcblxuICAgICAgICAvL1xuICAgICAgICAvLyBGaXJzdCwgdmFsaWRhdGUgaW5mb3JtYXRpb24gZm9yIG5ldyB0cmFkZVxuICAgICAgICAvL1xuXG4gICAgICAgIHRoaXMubmV3VHJhZGVFcnIgPSBcIlwiO1xuXG4gICAgICAgIGlmICghc3RyYXRlZ3kpIHtcbiAgICAgICAgICAgIHRoaXMubmV3VHJhZGVFcnIgPSBcIk11c3Qgc2VsZWN0IGEgc3RyYXRlZ3lcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYWNjb3VudCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubmV3VHJhZGVFcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5ld1RyYWRlRXJyICs9IFwiLCBhbmQgYW4gYWNjb3VudFwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5ld1RyYWRlRXJyID0gXCJNdXN0IHNlbGVjdCBhbiBhY2NvdW50XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHBpcmF0aW9uID0galF1ZXJ5LnRyaW0oZXhwaXJhdGlvbik7XG5cbiAgICAgICAgaWYgKCFleHBpcmF0aW9uKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5uZXdUcmFkZUVycikge1xuICAgICAgICAgICAgICAgIHRoaXMubmV3VHJhZGVFcnIgKz0gXCIsIGFuZCBhbiBleHBpcmF0aW9uXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubmV3VHJhZGVFcnIgPSBcIk11c3QgZW50ZXIgYW4gZXhwaXJhdGlvblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGludmFsaWRDaGFycyA9IHRoaXMuaW52YWxpZElkQ2hhcnNGcmllbmRseShleHBpcmF0aW9uKTtcbiAgICAgICAgICAgIGlmIChpbnZhbGlkQ2hhcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5uZXdUcmFkZUVycikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5ld1RyYWRlRXJyICs9IGAsIGFuZCBleHBpcmF0aW9uIGNvbnRhaW5zIGludmFsaWQgY2hhcnMgKCR7aW52YWxpZENoYXJzfSlgO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmV3VHJhZGVFcnIgPSBgRXhwaXJhdGlvbiBjb250YWlucyBpbnZhbGlkIGNoYXJzICgke2ludmFsaWRDaGFyc30pYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5uZXdUcmFkZUVycikge1xuICAgICAgICAgICAgdGhpcy5uZXdUcmFkZUVyciArPSAnLic7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvL1xuICAgICAgICAvLyBGaW5hbGx5LCBjaGVjayB0byBiZSBzdXJlIHRoaXMga2V5IGlzbid0IGFscmVhZHkgYmVpbmcgdXNlZFxuICAgICAgICAvL1xuXG4gICAgICAgIHZhciBuZXdUcmFkZU9iaiA9IHtcbiAgICAgICAgICAgIHN0cmF0ZWd5ICAgOiBzdHJhdGVneSxcbiAgICAgICAgICAgIGV4cGlyYXRpb24gOiBleHBpcmF0aW9uLFxuICAgICAgICAgICAgYWNjb3VudCAgICA6IGFjY291bnQsXG5cbiAgICAgICAgICAgIG9wZW5EYXRlICAgOiBkYXRlU3RyLFxuICAgICAgICAgICAgc3RhdHVzICAgICA6ICdvcGVuJ1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRiVXNlcklkICAgPSB0aGlzLnBhcmVudC5kYlVzZXJJZCgpO1xuICAgICAgICB2YXIgdHJhZGVJZFN0ciA9IHRoaXMudHJhZGVJZFN0cihuZXdUcmFkZU9iaik7XG4gICAgICAgIHZhciBzZWxmICAgICAgID0gdGhpcztcblxuICAgICAgICB0aGlzLmZiUmVmLmNoaWxkKGRiVXNlcklkKS5jaGlsZCgndHJhZGVzJykub25jZSgndmFsdWUnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5jaGlsZCh0cmFkZUlkU3RyKS5leGlzdHMoKSkge1xuICAgICAgICAgICAgICAgIHNlbGYubmV3VHJhZGVFcnIgPSBgU29ycnksIHlvdSBoYXZlIGFscmVhZHkgdXNlZCB0aGlzIGNvbWJpbmF0aW9uIG9mIHN0cmF0ZWd5X2V4cGlyYXRpb25fYWNjb3VudCAoJHt0cmFkZUlkU3RyfSkuYDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBQcm9jZWVkIHdpdGggYWRkaW5nIG5ldyB0cmFkZSB0byBEQlxuICAgICAgICAgICAgICAgIC8vXG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk5ldyB0cmFkZTpcIiwgbmV3VHJhZGVPYmopO1xuXG4gICAgICAgICAgICAgICAgdmFyIGRiT2JqID0ge307XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZGJPYmpbdHJhZGVJZFN0cl0gPSBuZXdUcmFkZU9iajtcblxuICAgICAgICAgICAgICAgIHNlbGYuZmJSZWYuY2hpbGQoZGJVc2VySWQpLmNoaWxkKCd0cmFkZXMnKS51cGRhdGUoZGJPYmosIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnBhcmVudC5mbGFzaFNhdmVkKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vXG4gICAgLy8gTWV0aG9kcyB0byBzdXBwb3J0IEpvdXJuYWxFbnRyaWVzIGNoaWxkIGNvbXBvbmVudHNcbiAgICAvL1xuXG4gICAgcmVnaXN0ZXJKb3VybmFsRW50cmllcyhqRW50cnlDb21wKSB7XG4gICAgICAgIHRoaXMuakVudHJ5Q29tcHNbdGhpcy50cmFkZUlkU3RyKGpFbnRyeUNvbXApXSA9IGpFbnRyeUNvbXA7XG4gICAgICAgIFxuICAgICAgICBqRW50cnlDb21wLnJlZ2lzdGVyUGFyZW50KHRoaXMsIHRoaXMuZmJSZWYpO1xuICAgICAgICBjb25zb2xlLmxvZyhcInJlZ2lzdGVySm91cm5hbEVudHJpZXM6IEpvdXJuYWxFbnRyaWVzIGluZm9cIiwgakVudHJ5Q29tcCk7XG4gICAgfVxuXG4gICAgdG9nZ2xlRW50cmllcyh0cmFkZU9iaikge1xuICAgICAgICAvLyB1c2luZyBqcXVlcnkgdG8gdG9nZ2xlIHZpc2liaWxpdHkgb2YgYXNzb2NpYXRlZCBqb3VybmFsIGVudHJpZXNcbiAgICAgICAgLy8gVW5mb3J0dW5hdGVseSwgY2FuJ3QgdXNlIHNsaWRlVXAvRG93biBhbmltYXRpb25zIG9uIHRhYmxlIHJvd3NcbiAgICAgICAgdmFyICRvYmogPSBqUXVlcnkoJyMnICsgdGhpcy5qb3VybmFsSWQodHJhZGVPYmopKTtcbiAgICAgICAgaWYgKCRvYmouaXMoXCI6dmlzaWJsZVwiKSkge1xuICAgICAgICAgICAgJG9iai5mYWRlT3V0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkb2JqLmZhZGVJbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBUcmFkZSBJRCAmIGpvdXJuYWwgSUQgXG4gICAgLy9cblxuICAgIHRyYWRlSWQodHJhZGVPYmopIHtcbiAgICAgICAgcmV0dXJuIFwidHJhZGUtXCIgKyB0aGlzLnRyYWRlSWRTdHIodHJhZGVPYmopO1xuICAgIH1cblxuICAgIGpvdXJuYWxJZCh0cmFkZU9iaikge1xuICAgICAgICByZXR1cm4gXCJqb3VybmFsLVwiICsgdGhpcy50cmFkZUlkU3RyKHRyYWRlT2JqKTtcbiAgICB9XG5cbiAgICB0cmFkZUlkU3RyKHRyYWRlT2JqKSB7XG4gICAgICAgIHJldHVybiBqUXVlcnkudHJpbSh0cmFkZU9iai5zdHJhdGVneSkudG9Mb3dlckNhc2UoKSAgICsgJ18nICsgXG4gICAgICAgICAgICAgICBqUXVlcnkudHJpbSh0cmFkZU9iai5leHBpcmF0aW9uKS50b0xvd2VyQ2FzZSgpICsgJ18nICsgXG4gICAgICAgICAgICAgICBqUXVlcnkudHJpbSh0cmFkZU9iai5hY2NvdW50KS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGludmFsaWRJZENoYXJzRnJpZW5kbHkodmFsdWUpIHtcbiAgICAgICAgdmFyIGludmFsaWRDaGFycyA9IHRoaXMucGFyZW50LmludmFsaWRJZENoYXJzKHZhbHVlKTtcbiAgICAgICAgdmFyIHJlcyA9ICcnO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW52YWxpZENoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSA+IDApIHsgcmVzICs9ICcsICc7IH1cblxuICAgICAgICAgICAgc3dpdGNoKGludmFsaWRDaGFyc1tpXSkge1xuICAgICAgICAgICAgY2FzZSAnICc6XG4gICAgICAgICAgICAgICAgcmVzICs9ICc8U1BBQ0U+JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmVzICs9IGludmFsaWRDaGFyc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIHZhbGlkSWRDaGFycyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQudmFsaWRJZENoYXJzKHZhbHVlKTtcbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy9hbmd1bGFyMi9hbmd1bGFyMi5kLnRzXCIgLz5cblxuZGVjbGFyZSB2YXIgalF1ZXJ5OmFueTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1xuLy8gU3RyaW5nICYgZm9ybWF0dGluZyB1dGlsaXRpZXNcbi8vXG4vLyBBbHNvIHNlZSB1bmRlcnNjb3JlLnN0cmluZyBtb2R1bGVcbi8vIGh0dHA6Ly9lcGVsaS5naXRodWIuaW8vdW5kZXJzY29yZS5zdHJpbmcvI2FwaVxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGV0aW1lKGR0PzpEYXRlKVxue1xuICAgIGlmIChkdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGR0ID0gbmV3IERhdGUoKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gZHQudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxOSk7XG4gICAgcmVzID0gcmVzLnJlcGxhY2UoJ1QnLCAnICcpO1xuXG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGUoZHQ/OkRhdGUpXG57XG4gICAgaWYgKGR0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZHQgPSBuZXcgRGF0ZSgpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSBkdC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcblxuICAgIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW1lbENhc2UoczpzdHJpbmcpXG57XG4gICAgdmFyIHBhcnRzID0gcy5zcGxpdCgnXycpO1xuICAgIGlmIChwYXJ0cy5sZW5ndGggPD0gMSkgeyByZXR1cm4gczsgfVxuXG4gICAgdmFyIHJlcyA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgd2hpbGUocGFydHMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXMgKz0gY2FwaXRhbGl6ZShwYXJ0cy5zaGlmdCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcGl0YWxpemUoczpzdHJpbmcpXG57XG4gICAgcmV0dXJuIHNbMF0udG9VcHBlckNhc2UoKSArIHMuc2xpY2UoMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmRzV2l0aChzdHIsIHN1ZmZpeCkge1xuICAgIHJldHVybiBzdHIuaW5kZXhPZihzdWZmaXgsIHN0ci5sZW5ndGggLSBzdWZmaXgubGVuZ3RoKSAhPT0gLTE7XG59XG5cbi8vXG4vLyBGb3JtYXQgbnVtYmVyIHdpdGggY29tbWEgc2VwYXJhdG9yc1xuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE51bWJlcih4KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIHBhcnRzID0geC50b1N0cmluZygpLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgcGFydHNbMF0gID0gcGFydHNbMF0ucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgXCIsXCIpO1xuICAgICAgICByZXR1cm4gcGFydHMuam9pbihcIi5cIik7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJHVlV0aWxzLmZvcm1hdE51bWJlcjogJXNcIiwgZXJyKTtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuXG4gICAgLy8gQnJvd3NlciBzdXBwb3J0IHVuY2xlYXIgJiBtYXkgdHJ1bmNhdGUgZGVjaW1hbCBwb2ludHM/XG4gICAgLy8gcmV0dXJuIHgudG9Mb2NhbGVTdHJpbmcoKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1xuLy8gT2JqZWN0IGNvbnZlcnNpb24gdXRpbGl0aWVzXG4vL1xuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydE9iak9mT2Jqc1RvTGlzdChvYmo6YW55LCBvcHRpb25zPzphbnkpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtvcHRpb25zID0ge307fVxuXG4gICAgaWYgKCFvcHRpb25zLmtleUZpZWxkTmFtZSkge1xuICAgICAgICBvcHRpb25zLmtleUZpZWxkTmFtZSA9IFwiX29iamVjdF9rZXlfaW5kZXhfXCI7XG4gICAgfVxuXG4gICAgdmFyIG9iakxpc3QgPSBbXTtcbiAgICB2YXIgaW5kZXhlcyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgdmFyIGluZGV4O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmRleGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGluZGV4ID0gaW5kZXhlc1tpXTtcblxuICAgICAgICAvLyBzZXQgdGhlIGtleSBmaWVsZCBvbiB0aGUgb2JqZWN0IHRvb1xuICAgICAgICBvYmpbaW5kZXhdW29wdGlvbnMua2V5RmllbGROYW1lXSA9IGluZGV4OyAgXG5cbiAgICAgICAgLy8gQWRkIHRvIGxpc3RcbiAgICAgICAgb2JqTGlzdC5wdXNoKG9ialtpbmRleF0pO1xuICAgIH1cblxuICAgIC8vIFNvcnQgb2JqTGlzdCBieSBvcHRpb25zLmtleUZpZWxkTmFtZVxuICAgIG9iakxpc3Quc29ydChmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHZhciB2MSwgdjI7XG4gICAgICAgIGlmICggaXNOdW1iZXIoeFtvcHRpb25zLmtleUZpZWxkTmFtZV0pICYmIGlzTnVtYmVyKHlbb3B0aW9ucy5rZXlGaWVsZE5hbWVdKSApIHtcbiAgICAgICAgICAgIHYxID0gcGFyc2VGbG9hdCh4W29wdGlvbnMua2V5RmllbGROYW1lXSk7XG4gICAgICAgICAgICB2MiA9IHBhcnNlRmxvYXQoeVtvcHRpb25zLmtleUZpZWxkTmFtZV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdjEgPSB4W29wdGlvbnMua2V5RmllbGROYW1lXTtcbiAgICAgICAgICAgIHYyID0geVtvcHRpb25zLmtleUZpZWxkTmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodjEgPCB2MikgeyByZXR1cm4gLTE7IH1cbiAgICAgICAgZWxzZSAgICAgICAgIHsgcmV0dXJuICAxOyB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqTGlzdDtcbn1cblxuLy9cbi8vIFdlIGhhdmUgYW4gb2JqZWN0IGZ1bGwgb2Ygb2JqZWN0cyB0byBiZSBsaXN0ZWQgaW4gQ1NWIGZpbGVcbi8vXG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0T2JqT2ZPYmpzVG9DU1ZTdHIob2JqOmFueSwgb3B0aW9ucz86YW55KSB7XG4gICAgaWYgKCFvcHRpb25zKSB7b3B0aW9ucyA9IHt9O31cblxuICAgIHZhciBvYmpMaXN0ICAgPSBjb252ZXJ0T2JqT2ZPYmpzVG9MaXN0KG9iaiwgb3B0aW9ucyk7XG4gICAgdmFyIGZpZWxkTGlzdCA9IG9wdGlvbnMuZmllbGRMaXN0O1xuXG4gICAgaWYgKCFmaWVsZExpc3QpIHtcbiAgICAgICAgdmFyIGZpZWxkcyAgPSB7fTtcbiAgICAgICAgdmFyIGluZGV4ZXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgIHZhciBuZXdGaWVsZHM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmRleGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpbmRleCA9IGluZGV4ZXNbaV07XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBuZXcgZmllbGRzXG4gICAgICAgICAgICBuZXdGaWVsZHMgPSBPYmplY3Qua2V5cyhvYmpbaW5kZXhdKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmV3RmllbGRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEgKG5ld0ZpZWxkc1tqXSBpbiBmaWVsZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkc1tuZXdGaWVsZHNbal1dID0gbmV3RmllbGRzW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnZlcnQgdG8gZmllbGRzIHRvIGxpc3RcbiAgICAgICAgdmFyIGZpZWxkUHJvcHMgPSBPYmplY3Qua2V5cyhmaWVsZHMpO1xuICAgICAgICBmaWVsZExpc3QgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGZpZWxkUHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZpZWxkTGlzdC5wdXNoKCB7J3Byb3AnIDogZmllbGRQcm9wc1tpXSwgJ25hbWUnIDogZmllbGRzW2ZpZWxkUHJvcHNbaV1dfSApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29ydCBieSBmaWVsZCB0aXRsZVxuICAgICAgICBmaWVsZExpc3Quc29ydChmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgICAgICBpZiAoeC5uYW1lIDwgeS5uYW1lKSB7IHJldHVybiAtMTsgfVxuICAgICAgICAgICAgZWxzZSAgICAgICAgICAgICAgICAgeyByZXR1cm4gIDE7IH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnZlcnRMaXN0T2ZPYmpzVG9DU1ZTdHIob2JqTGlzdCwge2ZpZWxkTGlzdCA6IGZpZWxkTGlzdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydExpc3RPZk9ianNUb0NTVlN0cihvYmpMaXN0OmFueSwgb3B0aW9ucz86YW55KSB7XG4gICAgaWYgKCFvcHRpb25zKSB7IG9wdGlvbnMgPSB7fTsgfVxuXG4gICAgaWYgKCFvcHRpb25zLmZpZWxkTGlzdCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiR1ZVdGlsczpjb252ZXJ0TGlzdE9mT2Jqc1RvQ1NWU3RyIC0gY3VycmVudGx5IG11c3QgaW5jbHVkZSBmaWVsZExpc3RcIik7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXdWYWx1ZShyb3dTdHIsIHZhbHVlLCB0eXBlPykge1xuICAgICAgICB2YXIgcmVzID0gJyc7XG5cbiAgICAgICAgaWYgKHJvd1N0ci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXMgKz0gJywnOyAgIC8vIGJlIHN1cmUgbm90IHRvIGFkZCBzcGFjZXMuLi4gY2FuIGNvbmZ1c2UgRXhjZWwgd2l0aCBjb21tYXMgaW4gcXVvdGVkIGZpZWxkcyBcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2ludCcpIHsgcmV0dXJuIHJlcyArICcwJzsgfVxuICAgICAgICAgICAgZWxzZSAgICAgICAgICAgICAgICB7IHJldHVybiByZXMgKyAnJzsgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMgKyB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXCIvZywgJ1wiXCInKTsgIC8vIGVzY2FwZSBkb3VibGUtcXVvdGVzIHdpdGggdHdvIGRvdWJsZS1xdW90ZXNcbiAgICAgICAgICAgIHJldHVybiByZXMgKyAnXCInICsgdmFsdWUgKyAnXCInO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3Um93KHJvd1N0cikge1xuICAgICAgICByZXR1cm4gcm93U3RyICsgJ1xcbic7XG4gICAgfVxuXG4gICAgdmFyIGZpZWxkcyA9IG9wdGlvbnMuZmllbGRMaXN0O1xuICAgIHZhciByZXMgICAgPSAnJztcbiAgICB2YXIgcm93O1xuICAgIHZhciBwcm9wTmFtZTtcblxuICAgIC8vIEhlYWRlclxuICAgIHJvdyA9ICcnXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcm93ICs9IG5ld1ZhbHVlKHJvdywgZmllbGRzW2ldLm5hbWUpO1xuICAgIH1cbiAgICByZXMgKz0gbmV3Um93KHJvdyk7XG5cbiAgICAvLyBFYWNoIHJlY29yZFxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqTGlzdC5sZW5ndGg7IGorKykge1xuICAgICAgICByb3cgPSAnJ1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcHJvcE5hbWUgPSBmaWVsZHNbaV0ucHJvcDtcbiAgICAgICAgICAgIHJvdyArPSBuZXdWYWx1ZShyb3csIG9iakxpc3Rbal1bcHJvcE5hbWVdLCBmaWVsZHNbaV0udHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzICs9IG5ld1Jvdyhyb3cpXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1xuLy8gT2JqZWN0IHV0aWxpdGllc1xuLy9cblxuLy9cbi8vIENsb25lIG9iamVjdCwgYXZvaWRpbmcgaW5oZXJpdGVkIHByb3BlcnRpZXNcbi8vXG4vLyBCVFcsIGFuIGFsdGVybmF0ZSBzaW1wbGUgbWV0aG9kIGlzOiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKG9iajphbnksIGlnbm9yZXM/OnN0cmluZ1tdKSB7XG4gICAgdmFyIGNvcHkgICAgOiBhbnk7XG4gICAgdmFyIG5ld0l0ZW0gOiBhbnk7XG4gICAgdmFyIHByb3BzICAgOiBzdHJpbmdbXTtcbiAgICB2YXIgcHJvcCAgICA6IHN0cmluZztcbiAgICB2YXIgaSAgICAgICA6IG51bWJlcjtcblxuICAgIC8vIEFsd2F5cyBzZXQgZnVuY3Rpb24gdmFsdWVzIHRvIG51bGwgYWNyb3NzIGFwaVxuICAgIGlmICh0eXBlb2Yob2JqKSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7ICAvLyAgbnVsbCByYXRoZXIgdGhhbiB1bmRlZmluZWQgc28sIGUuZy4sIG9iamVjdHMgYXJlIHNldCB3aXRoIGtleXMgYnV0IHZhbHVlcyBzZXQgdG8gbnVsbFxuICAgIH1cblxuICAgIC8vIFNpbXBsZSB0eXBlc1xuICAgIGlmIChudWxsID09IG9iaiB8fCBcIm9iamVjdFwiICE9IHR5cGVvZiBvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICAvLyBEYXRlXG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgY29weSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGNvcHkuc2V0VGltZShvYmouZ2V0VGltZSgpKTtcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfVxuXG4gICAgLy8gQXJyYXlzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICBjb3B5ID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvcHlbaV0gPSBjbG9uZShvYmpbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cblxuICAgIC8vIFBsYWluIG9iamVjdHNcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgIGNvcHkgPSB7fTtcbiAgICAgICAgcHJvcHMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHByb3AgPSBwcm9wc1tpXTtcbiAgICAgICAgICAgIGlmICghaWdub3JlcyB8fCBpZ25vcmVzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbmV3SXRlbSAgICA9IGNsb25lKG9ialtwcm9wXSk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0l0ZW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjb3B5W3Byb3BdID0gbmV3SXRlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGNvcHkgb2JqISBJdHMgdHlwZSBpc24ndCBzdXBwb3J0ZWQuXCIpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vXG4vLyBNaXNjZWxsYW5lb3VzXG4vL1xuXG4vL1xuLy8gY2hlY2sgd2hldGhlciBhIHZhbGlkIG51bWJlclxuLy9cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcihuKSB7XG4gICAgaWYgKGlzTmFOKHBhcnNlRmxvYXQobikpKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGlmICghIGlzRmluaXRlKG4pKSAgICAgICAgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vL1xuLy8gUmFuZG9tIGludGVnZXJcbi8vXG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21JbnQobWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIChNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xufVxuXG4vL1xuLy8gQmVlcCBzb3VuZFxuLy8gXG4vLyBBbHRlcm5hdGl2ZWx5LCBmb3IgYSBiZWVwLCBtYWtlIGEgc291bmQgZmlsZSBhbmQgcGxheSB0aGF0IVxuLy8gICAobmV3IEF1ZGlvKFwiZmlsZS53YXZcIikpLnBsYXkoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGJlZXAoKSB7XG4gICAgdmFyIHNuZCA9IG5ldyBBdWRpbyhcImRhdGE6YXVkaW8vd2F2O2Jhc2U2NCwvL3VRUkFBQUFXTVNMd1VJWUFBc1lrWGdvUXdBRWFZTFdma1dnQUkwd1dzL0l0QUFBR0RnWXRBZ0F5TitRV2FBQWlod01XbTRHOFFRUkRpTWNDQmNIM0NjK0NEdi83eEE0VHZoOVJ6L3k4UUFEQndNV2dRQVpHL0lMTkFBUlE0R0xUY0RlSUlJaHhHT0JBdUQ3aE9mQkIzLzk0Z2NKM3crbzUvNWVJQUlBQUFWd1dnUUFWUTJPUmFJUXdFTUFKaURnOTVHNG5RTDdtUVZXSTZHd1JjZnNaQWNzS2tKdnhneEVqekZVZ2ZIb1NROVFxN0tOd3FId3VCMTNNQTRhMXEvRG1CckhnUGNtamlHb2gvL0V3QzVuR1BFbVM0UmNma1ZLT2hKZitXT2dveEpjbEZ6M2tnbi8vZEJBK3lhMUdodXJObjh6Yi8vOU5OdXROdWh6MzFmLy8vLzl2dC8vL3orSWRBRUFBQUs0TFFJQUtvYkhJdEVJWUNHQUV4QndlOGpjVG9GOXpJS3JFZERZSXVQMk1nT1dGU0UzNHdZaVI1aXFRUGowSkllb1ZkbEc0VkQ0WEE2N21BY05hMWZoekExandIdVRSeERVUS8vaVlCY3pqSGlUSmNJdVB5S2xIUWt2L0xIUVVZa3VTaTU3eVFULy91Z2dmWk5halEzVm16K1p0Ly8rbW0zV20zUTU3NnYvLy8vKzMyLy8vNS9FT2dBQUFEVmdoUUFBQUFBLy91UVpBVUFCMVdJMFBadWdBQUFBQW9Rd0FBQUVrM25SZDJxQUFBQUFDaURnQUFBQUFBQUJDcUVFUVJMQ2d3cEJHTWxKa0l6OGpLaEd2ajRrNmp6Um5xYXNOS0llb2g1Z0k3QkphQzFBMUFvTkJqSmdieUFwVlM0SURsWmdEVTVXVUF4RUtETm1tQUxIelpwMEZrejFGTVRtR0ZsMUZNRXlvZElhdmNDQVVIRFdyS0FJQTRhYTJvQ2dJTEVCdXBaZ0h2QWhFQmNaNmpvUUJ4Uzc2QWdjY3JGbGN6QnZLTEMwUUkyY0JvQ0Z2ZlREQW83ZW9PUUlucURQQnR2ckRFWkJOWU41eHdOd3hRUmZ3OFpRNXdRVkx2TzhPWVUrbUh2RkxsRGgwNU1kZzdCVDZZclJQcENCem5NQjJyLy94S0pqeXlPaCtjSW1yMi80ZG9zY3dENm5lWmp1WlI0QWdBQUJZQUFBQUJ5MXhjZFF0eFlCWVlaZGlma1VEZ3p6WGFYbjk4WjBvaTlJTFU1bUJqRkFObVJ3bFZKMy82allEQW14YWlERzMvNnhqUVFDQ0trUmIvNmtnL3dXK2tTSjUvL3JMb2JrTFNpS21xUC8waWtKdURhU2FTZi82SmlMWUxFWW5XLytrWGcxV1JWSkwvOUVtUTFZWklzdi82UXp3eTVxazcvK3RFVTBua2xzMy96SVVNUEtOWC82eVpMZitrRmdBZmdHeUxGQVV3WS8vdVFaQVVBQmNkNVVpTlBWWEFBQUFwQUFBQUFFMFZaUUt3OUlTQUFBQ2dBQUFBQVZRSXlnSUVsVnJGa0JTK0poaStFQXV1K2xLQWtZVUVJc21FQUVvTWVEbUNFVE12ZlNIVEdrRjVSV0g3a3ovRVNIV1BBcS9rY0NSaHFCdE1kb2tQZE03dmlsN1JHOThBMnNjN3pPNlp2VGRNN3BtT1VBWlRuSlcrTlh4cW1kNDFkcUo2bUxUWHhyUHBuVjhhdmFJZjVTdkw3cG5kUHZQcG5kSlI5S3V1OGZlUHZ1aXVob3JnV2pwN01mL1BSanhjRkNQRGtXMzFzcmlvQ0V4aXZ2OWxjd0tFYUhzZi83b3cyRmwxVC85UmtYZ0VoWUVsQW9DTEZ0TUFyeHdpdkRKSitiUjFIVEtKZGxFb1RFTENJcWdFd1ZHU1EraEltME5iSzhXWGNURUkwVVBvYTJOYkc0eTJLMDBKRVdiWmF2SlhrWWFxbzlDUkhTNTVGY1pUaktFazNOS29DWVVuU1Ewcld4clpiRktiS0loT0tQWmUxY0pLelpTYVFySXlVTEhEWm1WNUs0eHlTc0RSS1dPcnVhbkd0akxKWEZFbXdhSWJETFgwaElQQlVRUFZGVmtRa0RvVU5mU29EZ1FHS1Bla294ZUd6QTREVXZubjRieHpjWnJ0SnlpcEtmUE55NXcrOWxuWHdncXNpeUhOZVNWcGVtdzRiV2I5cHNZZXEvL3VRWkJvQUJRdDR5TVZ4WUFJQUFBa1FvQUFBSHZZcEw1bTZBQWdBQUNYREFBQUFENTlqYmxUaXJRZTl1cEZzbVpicE11ZHk3THoxWDFEWXN4T09TV3BmUHFOWDJXcWt0SzBETXZ1R3dsYk5qNDRUbGVMUFErR3NmYitHT1dPS0pvSXJXYjNjSU1lZU9ONmx6MnVtVHFNWFY4TWozMHlXUHBqb1NhOXVqSzhTeWVKUDV5NW1PVzFENmh2TGVwZXZlRUFFRG8wbWdDUkNsT0VnQU52M0I5YTZmaWtnVVN1L0RtQU1BVHJHeDdubmc1cDVpaW1QTlpzZlFMWUIyc0RMSWt6UktaT0hHQWFVeURjcEZCU0xHOU1DUUFMZ0FJZ1FzMll1bk9zekxTQXlRWVBWQzJZZEdHZUhEMmRUZEprMXBBSEdBV0RqbmtjTEtGeW1TM1JRWlRJbnp5U29Cd01HMFF1ZUMzZ01zQ0VZeFVxbHJjeEs2azFMUVFjc215WWVRUGRDMllmdUdQQVNDQmtjVk1RUXFwVkpzaHVpMXRrWFFKUVYwT1hHQVpNWFNPRUVCUmlyWGJWUlFXN3VncTdJTTdyUFdTWnlEbE0zSXVORWt4ekNPSjBueTJUaE5reVJhaTFiNmV2Ly8zZHpOR3pOYi8vNHVBdkhUNXNVUmNaQ0ZjdUtMaE9GczhtTEFBRUF0NFVXQUFJQUJBQUFBQUI0cWJIbzB0SWpWa1VVLy91UVpBd0FCZlNGejNacVFBQUFBQW5nd0FBQUUxSGpNcDJxQUFBQUFDWkRnQUFBRDVVa1RFMVVnWkVVRXhxWXluTjFxWnZxSU9SRUVGbUJjSlFrd2R4aUZ0dzBxRU9rR1lmUkRpZkJ1aTlNUWc0UUFIQXFXdEFXSG9DeHUxWWY0VmZXTFBJTTJtSERGc2JRRVZHd3lxUW9RY3duZkhlSWtOdDlZbmtpYVMxb2l6eWNxSnJ4NEtPUWphaFp4V2JjWmd6dGoyYzQ5bktta0lkNDRTNzFqMGM4ZVY5eURLNnVQUnp4NVgxOGVEdmp2UTZ5S285WlNTNmwvLzhlbGVQSy9MZi8vSUluck9GL0Z2RG9BRFlBR0JNR2I3RnRFcm01TVhNbG1QQUpRVmdXdGE3WngyZ28rOHhKMFVpQ2I4TEhIZGZ0V3lMSkUwUUlBSXNJK1ViWHU2N2RaTWptZ0RHQ0dsMUgrdnBGNE5TRGNrU0lrazdWZCtzeEVoQlFNUlU4ai8xMlVJUmh6U2FVZFErclFVNWtHZUZ4bStoYjFvaDZwV1dtdjN1dm1SZURsMFVudnRhcFZhSXpvMWpaYmYvcEQ2RWxMcVNYK3JVbU9RTnBKRmEvcitzYTRlL3BCbEFBQm9BQUFBQTNDVWdTaExkR0l4c1k3QVVBQlBScmdDQUJkRHVRNUdDN0RxUFFDZ2JiSlVBb1JTVWorTklFaWcwWWZ5V1VobzFWQkJCQS8vdVFaQjRBQlp4NXpmTWFrZUFBQUFtd0FBQUFGNUYzUDB3OUd0QUFBQ2ZBQUFBQXdMaE1EbUFZV01nVkVHMVUwRklHQ0JnWEJYQXRmTUgxMDAwMEVFRUVFRUNVQllsbjAzVFRUZE5CRFpvcG9wWXZyVFRkTmEzMjVtSW1OZzNUVFBWOXEzcG1ZMHhvTzZidjNyMDB5K0lER2lkLzlhYWFaVEdNdWo5bXB1OU1waW8xZFhycjVIRVJUWlNtcVUzNkEzQ3Vtek4vOVJvYnYvWHg0djlpamtTUlNOTFFoQVd1bWFwODJXUlNCVXFYU3RWL1ljUytYVkxuU1MrV0xEcm9xQXJGa01Fc0FTK2VXbXJVenJPMG9FbUU0MFJsTVo1K09ESWtBeUtBR1V3WjNtVkttY2FtY0puTVcyNk1SUGdVdzZqK0xraHlIR1ZHWWpTVVVLTnB1SlVRb09JQXlEdkV5RzhTNXlmSzZkaFpjMFR4MUtJL2d2aUtMNnF2dkZzMStiV3RhejU4dVVObnJ5cTZrdDVSek9Da1BXbFZxVlgyYS9FRUJVZFUxS3JYTGY0MEdvaWlGWEsvLy9xcG9pRFhyT2dxRFIzOEpCMGJ3N1NvTCtaQjlvMVJDa1FqUTJDQllaS2QvK1ZKeFpSUlpscVNrS2l3czBXRnhVeUN3c0tpTXk3aFVWRmhJYUNyTlFzS2tUSXNMaXZ3S0tpZ3NqOFhZbHd0L1dLaTJONGQvL3VRUkNTQUFqVVJOSUhwTVpCR1lpYVFQU1l5QUFBQkxBQUFBQUFBQUNXQUFBQUFwVUYvTWcrMGFvaFNJUm9iQkFzTWxPLy9LazRzb29zeTFKU0ZSWVdhTEM0cVpCWVdGUkdaZHdxS2l3a05CVm1vV0ZTSmtXRnhYNEZGUlFXUitMc1M0Vy9yRlJiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vVkVGSEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFVMjkxYm1SaWIza3VaR1VBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU1qQXdOR2gwZEhBNkx5OTNkM2N1YzI5MWJtUmliM2t1WkdVQUFBQUFBQUFBQUNVPVwiKTsgIFxuICAgIHNuZC5wbGF5KCk7XG59XG4iLCIndXNlIHN0cmljdCc7ZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vY29yZScpKTtcclxuX19leHBvcnQocmVxdWlyZSgnLi9wcm9maWxlJykpO1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL2xpZmVjeWNsZV9ob29rcycpKTtcclxuX19leHBvcnQocmVxdWlyZSgnLi9ib290c3RyYXAnKSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuZ3VsYXIyLmpzLm1hcCIsIid1c2Ugc3RyaWN0JzsvKipcclxuICogVGhpcyBmaWxlIGlzIG9ubHkgdXNlZCBmb3IgZGFydCBhcHBsaWNhdGlvbnMgYW5kIGZvciBpbnRlcm5hbCBleGFtcGxlc1xyXG4gKiB0aGF0IGNvbXBpbGUgd2l0aCBib3RoIEphdmFTY3JpcHQgYW5kIERhcnQuXHJcbiAqL1xyXG52YXIgYm9vdHN0cmFwXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9ib290c3RyYXAnKTtcclxuZXhwb3J0cy5ib290c3RyYXAgPSBib290c3RyYXBfMS5ib290c3RyYXA7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJvb3RzdHJhcC5qcy5tYXAiLCIndXNlIHN0cmljdCc7ZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbi8qKlxyXG4gKiBAbW9kdWxlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBTdGFydGluZyBwb2ludCB0byBpbXBvcnQgYWxsIHB1YmxpYyBjb3JlIEFQSXMuXHJcbiAqL1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL3NyYy9jb3JlL21ldGFkYXRhJykpO1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL3NyYy9jb3JlL3V0aWwnKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vc3JjL2NvcmUvZGknKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vc3JjL2NvcmUvcGlwZXMnKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vc3JjL2NvcmUvZmFjYWRlJykpO1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL3NyYy9jb3JlL2FwcGxpY2F0aW9uJykpO1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL3NyYy9jb3JlL2Jvb3RzdHJhcCcpKTtcclxuX19leHBvcnQocmVxdWlyZSgnLi9zcmMvY29yZS9zZXJ2aWNlcycpKTtcclxuX19leHBvcnQocmVxdWlyZSgnLi9zcmMvY29yZS9saW5rZXInKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vc3JjL2NvcmUvbGlmZWN5Y2xlJykpO1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL3NyYy9jb3JlL3pvbmUnKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vc3JjL2NvcmUvcmVuZGVyJykpO1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL3NyYy9jb3JlL2RpcmVjdGl2ZXMnKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vc3JjL2NvcmUvZm9ybXMnKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vc3JjL2NvcmUvZGVidWcnKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbicpKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29yZS5qcy5tYXAiLCIndXNlIHN0cmljdCc7LyoqXHJcbiAqIEBtb2R1bGVcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIERlZmluZXMgaW50ZXJmYWNlcyB0byBiZSBpbXBsZW1lbnRlZCBieSBkaXJlY3RpdmVzIHdoZW4gdGhleSBuZWVkIHRvIGhvb2sgaW50byB0aGUgY2hhbmdlXHJcbiAqIGRldGVjdGlvbiBtZWNoYW5pc20uXHJcbiAqL1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWZlY3ljbGVfaG9va3MuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG52YXIgX1N1YnNjcmliZXIgPSByZXF1aXJlKCcuL1N1YnNjcmliZXInKTtcblxudmFyIF9TdWJzY3JpYmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N1YnNjcmliZXIpO1xuXG52YXIgX3V0aWxSb290ID0gcmVxdWlyZSgnLi91dGlsL3Jvb3QnKTtcblxudmFyIF91dGlsU3ltYm9sX29ic2VydmFibGUgPSByZXF1aXJlKCcuL3V0aWwvU3ltYm9sX29ic2VydmFibGUnKTtcblxudmFyIF91dGlsU3ltYm9sX29ic2VydmFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbFN5bWJvbF9vYnNlcnZhYmxlKTtcblxuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIGFueSBzZXQgb2YgdmFsdWVzIG92ZXIgYW55IGFtb3VudCBvZiB0aW1lLiBUaGlzIHRoZSBtb3N0IGJhc2ljIGJ1aWxkaW5nIGJsb2NrXG4gKiBvZiBSeEpTLlxuICpcbiAqIEBjbGFzcyBPYnNlcnZhYmxlPFQ+XG4gKi9cblxudmFyIE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN1YnNjcmliZSB0aGUgZnVuY3Rpb24gdGhhdCBpc1xuICAgICAqIGNhbGxlZCB3aGVuIHRoZSBPYnNlcnZhYmxlIGlzIGluaXRpYWxseSBzdWJzY3JpYmVkIHRvLiBUaGlzIGZ1bmN0aW9uIGlzIGdpdmVuIGEgU3Vic2NyaWJlciwgdG8gd2hpY2ggbmV3IHZhbHVlc1xuICAgICAqIGNhbiBiZSBgbmV4dGBlZCwgb3IgYW4gYGVycm9yYCBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByYWlzZSBhbiBlcnJvciwgb3IgYGNvbXBsZXRlYCBjYW4gYmUgY2FsbGVkIHRvIG5vdGlmeVxuICAgICAqIG9mIGEgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uLlxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9ic2VydmFibGUpO1xuXG4gICAgICAgIHRoaXMuX2lzU2NhbGFyID0gZmFsc2U7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhBQ0s6IFNpbmNlIFR5cGVTY3JpcHQgaW5oZXJpdHMgc3RhdGljIHByb3BlcnRpZXMgdG9vLCB3ZSBoYXZlIHRvXG4gICAgLy8gZmlnaHQgYWdhaW5zdCBUeXBlU2NyaXB0IGhlcmUgc28gU3ViamVjdCBjYW4gaGF2ZSBhIGRpZmZlcmVudCBzdGF0aWMgY3JlYXRlIHNpZ25hdHVyZVxuICAgIC8qKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN1YnNjcmliZT8gdGhlIHN1YnNjcmliZXIgZnVuY3Rpb24gdG8gYmUgcGFzc2VkIHRvIHRoZSBPYnNlcnZhYmxlIGNvbnN0cnVjdG9yXG4gICAgICogQHJldHVybnMge09ic2VydmFibGV9IGEgbmV3IGNvbGQgb2JzZXJ2YWJsZVxuICAgICAqIEBkZXNjcmlwdGlvbiBjcmVhdGVzIGEgbmV3IGNvbGQgT2JzZXJ2YWJsZSBieSBjYWxsaW5nIHRoZSBPYnNlcnZhYmxlIGNvbnN0cnVjdG9yXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIGxpZnRcbiAgICAgKiBAcGFyYW0ge09wZXJhdG9yfSBvcGVyYXRvciB0aGUgb3BlcmF0b3IgZGVmaW5pbmcgdGhlIG9wZXJhdGlvbiB0byB0YWtlIG9uIHRoZSBvYnNlcnZhYmxlXG4gICAgICogQHJldHVybnMge09ic2VydmFibGV9IGEgbmV3IG9ic2VydmFibGUgd2l0aCB0aGUgT3BlcmF0b3IgYXBwbGllZFxuICAgICAqIEBkZXNjcmlwdGlvbiBjcmVhdGVzIGEgbmV3IE9ic2VydmFibGUsIHdpdGggdGhpcyBPYnNlcnZhYmxlIGFzIHRoZSBzb3VyY2UsIGFuZCB0aGUgcGFzc2VkXG4gICAgICogb3BlcmF0b3IgZGVmaW5lZCBhcyB0aGUgbmV3IG9ic2VydmFibGUncyBvcGVyYXRvci5cbiAgICAgKi9cblxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiBsaWZ0KG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIFN5bWJvbC5vYnNlcnZhYmxlXG4gICAgICogQHJldHVybnMge09ic2VydmFibGV9IHRoaXMgaW5zdGFuY2Ugb2YgdGhlIG9ic2VydmFibGVcbiAgICAgKiBAZGVzY3JpcHRpb24gYW4gaW50ZXJvcCBwb2ludCBkZWZpbmVkIGJ5IHRoZSBlczctb2JzZXJ2YWJsZSBzcGVjIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbiAgICAgKi9cblxuICAgIE9ic2VydmFibGUucHJvdG90eXBlW191dGlsU3ltYm9sX29ic2VydmFibGUyWydkZWZhdWx0J11dID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBzdWJzY3JpYmVcbiAgICAgKiBAcGFyYW0ge09ic2VydmVyfEZ1bmN0aW9ufSBvYnNlcnZlck9yTmV4dCAob3B0aW9uYWwpIGVpdGhlciBhbiBvYnNlcnZlciBkZWZpbmluZyBhbGwgZnVuY3Rpb25zIHRvIGJlIGNhbGxlZCxcbiAgICAgKiAgb3IgdGhlIGZpcnN0IG9mIHRocmVlIHBvc3NpYmxlIGhhbmRsZXJzLCB3aGljaCBpcyB0aGUgaGFuZGxlciBmb3IgZWFjaCB2YWx1ZSBlbWl0dGVkIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXJyb3IgKG9wdGlvbmFsKSBhIGhhbmRsZXIgZm9yIGEgdGVybWluYWwgZXZlbnQgcmVzdWx0aW5nIGZyb20gYW4gZXJyb3IuIElmIG5vIGVycm9yIGhhbmRsZXIgaXMgcHJvdmlkZWQsXG4gICAgICogIHRoZSBlcnJvciB3aWxsIGJlIHRocm93biBhcyB1bmhhbmRsZWRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wbGV0ZSAob3B0aW9uYWwpIGEgaGFuZGxlciBmb3IgYSB0ZXJtaW5hbCBldmVudCByZXN1bHRpbmcgZnJvbSBzdWNjZXNzZnVsIGNvbXBsZXRpb24uXG4gICAgICogQHJldHVybnMge1N1YnNjcmlwdGlvbn0gYSBzdWJzY3JpcHRpb24gcmVmZXJlbmNlIHRvIHRoZSByZWdpc3RlcmVkIGhhbmRsZXJzXG4gICAgICogQGRlc2NyaXB0aW9uIHJlZ2lzdGVycyBoYW5kbGVycyBmb3IgaGFuZGxpbmcgZW1pdHRlZCB2YWx1ZXMsIGVycm9yIGFuZCBjb21wbGV0aW9ucyBmcm9tIHRoZSBvYnNlcnZhYmxlLCBhbmRcbiAgICAgKiAgZXhlY3V0ZXMgdGhlIG9ic2VydmFibGUncyBzdWJzY3JpYmVyIGZ1bmN0aW9uLCB3aGljaCB3aWxsIHRha2UgYWN0aW9uIHRvIHNldCB1cCB0aGUgdW5kZXJseWluZyBkYXRhIHN0cmVhbVxuICAgICAqL1xuXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChvYnNlcnZlck9yTmV4dCAmJiB0eXBlb2Ygb2JzZXJ2ZXJPck5leHQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGlmIChvYnNlcnZlck9yTmV4dCBpbnN0YW5jZW9mIF9TdWJzY3JpYmVyMlsnZGVmYXVsdCddKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlciA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyID0gbmV3IF9TdWJzY3JpYmVyMlsnZGVmYXVsdCddKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBuZXh0ID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgICAgICBzdWJzY3JpYmVyID0gX1N1YnNjcmliZXIyWydkZWZhdWx0J10uY3JlYXRlKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5hZGQodGhpcy5fc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgZm9yRWFjaFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHQgYSBoYW5kbGVyIGZvciBlYWNoIHZhbHVlIGVtaXR0ZWQgYnkgdGhlIG9ic2VydmFibGVcbiAgICAgKiBAcGFyYW0ge1Byb21pc2VDb25zdHJ1Y3Rvcn0gUHJvbWlzZUN0b3I/IGEgY29uc3RydWN0b3IgZnVuY3Rpb24gdXNlZCB0byBpbnN0YW50aWF0ZSB0aGUgUHJvbWlzZVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCBlaXRoZXIgcmVzb2x2ZXMgb24gb2JzZXJ2YWJsZSBjb21wbGV0aW9uIG9yXG4gICAgICogIHJlamVjdHMgd2l0aCB0aGUgaGFuZGxlZCBlcnJvclxuICAgICAqL1xuXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2gobmV4dCwgUHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAoIVByb21pc2VDdG9yKSB7XG4gICAgICAgICAgICBpZiAoX3V0aWxSb290LnJvb3QuUnggJiYgX3V0aWxSb290LnJvb3QuUnguY29uZmlnICYmIF91dGlsUm9vdC5yb290LlJ4LmNvbmZpZy5Qcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgUHJvbWlzZUN0b3IgPSBfdXRpbFJvb3Qucm9vdC5SeC5jb25maWcuUHJvbWlzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX3V0aWxSb290LnJvb3QuUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIFByb21pc2VDdG9yID0gX3V0aWxSb290LnJvb3QuUHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIVByb21pc2VDdG9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIFByb21pc2UgaW1wbCBmb3VuZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKG5leHQsIHJlamVjdCwgcmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gX3N1YnNjcmliZShzdWJzY3JpYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZS5fc3Vic2NyaWJlKHRoaXMub3BlcmF0b3IuY2FsbChzdWJzY3JpYmVyKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSkoKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gT2JzZXJ2YWJsZTtcbk9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9PYnNlcnZhYmxlMiA9IHJlcXVpcmUoJy4vT2JzZXJ2YWJsZScpO1xuXG52YXIgX09ic2VydmFibGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT2JzZXJ2YWJsZTIpO1xuXG52YXIgX1N1YnNjcmliZXIgPSByZXF1aXJlKCcuL1N1YnNjcmliZXInKTtcblxudmFyIF9TdWJzY3JpYmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N1YnNjcmliZXIpO1xuXG52YXIgX1N1YnNjcmlwdGlvbiA9IHJlcXVpcmUoJy4vU3Vic2NyaXB0aW9uJyk7XG5cbnZhciBfU3Vic2NyaXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N1YnNjcmlwdGlvbik7XG5cbnZhciBfc3ViamVjdHNTdWJqZWN0U3Vic2NyaXB0aW9uID0gcmVxdWlyZSgnLi9zdWJqZWN0cy9TdWJqZWN0U3Vic2NyaXB0aW9uJyk7XG5cbnZhciBfc3ViamVjdHNTdWJqZWN0U3Vic2NyaXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N1YmplY3RzU3ViamVjdFN1YnNjcmlwdGlvbik7XG5cbnZhciBzdWJzY3JpcHRpb25BZGQgPSBfU3Vic2NyaXB0aW9uMlsnZGVmYXVsdCddLnByb3RvdHlwZS5hZGQ7XG52YXIgc3Vic2NyaXB0aW9uUmVtb3ZlID0gX1N1YnNjcmlwdGlvbjJbJ2RlZmF1bHQnXS5wcm90b3R5cGUucmVtb3ZlO1xudmFyIHN1YnNjcmlwdGlvblVuc3Vic2NyaWJlID0gX1N1YnNjcmlwdGlvbjJbJ2RlZmF1bHQnXS5wcm90b3R5cGUudW5zdWJzY3JpYmU7XG52YXIgc3Vic2NyaWJlck5leHQgPSBfU3Vic2NyaWJlcjJbJ2RlZmF1bHQnXS5wcm90b3R5cGUubmV4dDtcbnZhciBzdWJzY3JpYmVyRXJyb3IgPSBfU3Vic2NyaWJlcjJbJ2RlZmF1bHQnXS5wcm90b3R5cGUuZXJyb3I7XG52YXIgc3Vic2NyaWJlckNvbXBsZXRlID0gX1N1YnNjcmliZXIyWydkZWZhdWx0J10ucHJvdG90eXBlLmNvbXBsZXRlO1xudmFyIF9zdWJzY3JpYmVyTmV4dCA9IF9TdWJzY3JpYmVyMlsnZGVmYXVsdCddLnByb3RvdHlwZS5fbmV4dDtcbnZhciBfc3Vic2NyaWJlckVycm9yID0gX1N1YnNjcmliZXIyWydkZWZhdWx0J10ucHJvdG90eXBlLl9lcnJvcjtcbnZhciBfc3Vic2NyaWJlckNvbXBsZXRlID0gX1N1YnNjcmliZXIyWydkZWZhdWx0J10ucHJvdG90eXBlLl9jb21wbGV0ZTtcblxudmFyIFN1YmplY3QgPSAoZnVuY3Rpb24gKF9PYnNlcnZhYmxlKSB7XG4gICAgX2luaGVyaXRzKFN1YmplY3QsIF9PYnNlcnZhYmxlKTtcblxuICAgIGZ1bmN0aW9uIFN1YmplY3QoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJqZWN0KTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9PYnNlcnZhYmxlLmNhbGwuYXBwbHkoX09ic2VydmFibGUsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuICAgICAgICB0aGlzLm9ic2VydmVycyA9IFtdO1xuICAgICAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lcnJvclNpZ25hbCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbXBsZXRlU2lnbmFsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgU3ViamVjdC5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoc291cmNlLCBkZXN0aW5hdGlvbikge1xuICAgICAgICByZXR1cm4gbmV3IEJpZGlyZWN0aW9uYWxTdWJqZWN0KHNvdXJjZSwgZGVzdGluYXRpb24pO1xuICAgIH07XG5cbiAgICBTdWJqZWN0LnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gbGlmdChvcGVyYXRvcikge1xuICAgICAgICB2YXIgc3ViamVjdCA9IG5ldyBCaWRpcmVjdGlvbmFsU3ViamVjdCh0aGlzLCB0aGlzLmRlc3RpbmF0aW9uIHx8IHRoaXMpO1xuICAgICAgICBzdWJqZWN0Lm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgIH07XG5cbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gX3N1YnNjcmliZShzdWJzY3JpYmVyKSB7XG4gICAgICAgIGlmIChzdWJzY3JpYmVyLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5lcnJvclNpZ25hbCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aGlzLmVycm9ySW5zdGFuY2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY29tcGxldGVTaWduYWwpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3Vic2NyaWJlIHRvIGEgZGlzcG9zZWQgU3ViamVjdC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIG5ldyBfc3ViamVjdHNTdWJqZWN0U3Vic2NyaXB0aW9uMlsnZGVmYXVsdCddKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgIH07XG5cbiAgICBTdWJqZWN0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbkFkZC5jYWxsKHRoaXMsIHN1YnNjcmlwdGlvbik7XG4gICAgfTtcblxuICAgIFN1YmplY3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uUmVtb3ZlLmNhbGwodGhpcywgc3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuXG4gICAgU3ViamVjdC5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSB2b2lkIDA7XG4gICAgICAgIHN1YnNjcmlwdGlvblVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgfTtcblxuICAgIFN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmVycm9yU2lnbmFsKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yKHRoaXMuZXJyb3JJbnN0YW5jZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb21wbGV0ZVNpZ25hbCkge1xuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFN1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gZXJyb3IoX2Vycm9yKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVW5zdWJzY3JpYmVkIHx8IHRoaXMuY29tcGxldGVTaWduYWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVycm9yU2lnbmFsID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lcnJvckluc3RhbmNlID0gX2Vycm9yO1xuICAgICAgICBpZiAodGhpcy5kaXNwYXRjaGluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Vycm9yKF9lcnJvcik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuXG4gICAgU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNVbnN1YnNjcmliZWQgfHwgdGhpcy5lcnJvclNpZ25hbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29tcGxldGVTaWduYWwgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5kaXNwYXRjaGluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuXG4gICAgU3ViamVjdC5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzLnNsaWNlKDApO1xuICAgICAgICB2YXIgbGVuID0gb2JzZXJ2ZXJzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIG9ic2VydmVyc1tpbmRleF0ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gX2Vycm9yKGVycm9yKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICAvLyBvcHRpbWl6YXRpb24gLS0gYmxvY2sgbmV4dCwgY29tcGxldGUsIGFuZCB1bnN1YnNjcmliZSB3aGlsZSBkaXNwYXRjaGluZ1xuICAgICAgICB0aGlzLm9ic2VydmVycyA9IHZvaWQgMDtcbiAgICAgICAgdGhpcy5pc1Vuc3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBvYnNlcnZlcnNbaW5kZXhdLmVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgfTtcblxuICAgIFN1YmplY3QucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uIF9jb21wbGV0ZSgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgdmFyIGxlbiA9IG9ic2VydmVycy5sZW5ndGg7XG4gICAgICAgIC8vIG9wdGltaXphdGlvbiAtLSBibG9jayBuZXh0LCBjb21wbGV0ZSwgYW5kIHVuc3Vic2NyaWJlIHdoaWxlIGRpc3BhdGNoaW5nXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gdm9pZCAwOyAvLyBvcHRpbWl6YXRpb25cbiAgICAgICAgdGhpcy5pc1Vuc3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBvYnNlcnZlcnNbaW5kZXhdLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1Vuc3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gU3ViamVjdDtcbn0pKF9PYnNlcnZhYmxlM1snZGVmYXVsdCddKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU3ViamVjdDtcblxudmFyIEJpZGlyZWN0aW9uYWxTdWJqZWN0ID0gKGZ1bmN0aW9uIChfU3ViamVjdCkge1xuICAgIF9pbmhlcml0cyhCaWRpcmVjdGlvbmFsU3ViamVjdCwgX1N1YmplY3QpO1xuXG4gICAgZnVuY3Rpb24gQmlkaXJlY3Rpb25hbFN1YmplY3Qoc291cmNlLCBkZXN0aW5hdGlvbikge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmlkaXJlY3Rpb25hbFN1YmplY3QpO1xuXG4gICAgICAgIF9TdWJqZWN0LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgfVxuXG4gICAgQmlkaXJlY3Rpb25hbFN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiBfc3Vic2NyaWJlKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIG9wZXJhdG9yID0gdGhpcy5vcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLnNvdXJjZSwgb3BlcmF0b3IgPyBvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIpIDogc3Vic2NyaWJlcik7XG4gICAgfTtcblxuICAgIEJpZGlyZWN0aW9uYWxTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gbmV4dCh4KSB7XG4gICAgICAgIHN1YnNjcmliZXJOZXh0LmNhbGwodGhpcywgeCk7XG4gICAgfTtcblxuICAgIEJpZGlyZWN0aW9uYWxTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgc3Vic2NyaWJlckVycm9yLmNhbGwodGhpcywgZSk7XG4gICAgfTtcblxuICAgIEJpZGlyZWN0aW9uYWxTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBzdWJzY3JpYmVyQ29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuXG4gICAgQmlkaXJlY3Rpb25hbFN1YmplY3QucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gX25leHQoeCkge1xuICAgICAgICBfc3Vic2NyaWJlck5leHQuY2FsbCh0aGlzLCB4KTtcbiAgICB9O1xuXG4gICAgQmlkaXJlY3Rpb25hbFN1YmplY3QucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIF9lcnJvcihlKSB7XG4gICAgICAgIF9zdWJzY3JpYmVyRXJyb3IuY2FsbCh0aGlzLCBlKTtcbiAgICB9O1xuXG4gICAgQmlkaXJlY3Rpb25hbFN1YmplY3QucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uIF9jb21wbGV0ZSgpIHtcbiAgICAgICAgX3N1YnNjcmliZXJDb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQmlkaXJlY3Rpb25hbFN1YmplY3Q7XG59KShTdWJqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX3V0aWxOb29wID0gcmVxdWlyZSgnLi91dGlsL25vb3AnKTtcblxudmFyIF91dGlsTm9vcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsTm9vcCk7XG5cbnZhciBfdXRpbFRocm93RXJyb3IgPSByZXF1aXJlKCcuL3V0aWwvdGhyb3dFcnJvcicpO1xuXG52YXIgX3V0aWxUaHJvd0Vycm9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3V0aWxUaHJvd0Vycm9yKTtcblxudmFyIF91dGlsVHJ5T3JPbkVycm9yID0gcmVxdWlyZSgnLi91dGlsL3RyeU9yT25FcnJvcicpO1xuXG52YXIgX3V0aWxUcnlPck9uRXJyb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbFRyeU9yT25FcnJvcik7XG5cbnZhciBfU3Vic2NyaXB0aW9uMiA9IHJlcXVpcmUoJy4vU3Vic2NyaXB0aW9uJyk7XG5cbnZhciBfU3Vic2NyaXB0aW9uMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N1YnNjcmlwdGlvbjIpO1xuXG52YXIgU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX1N1YnNjcmlwdGlvbikge1xuICAgIF9pbmhlcml0cyhTdWJzY3JpYmVyLCBfU3Vic2NyaXB0aW9uKTtcblxuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN1YnNjcmliZXIpO1xuXG4gICAgICAgIF9TdWJzY3JpcHRpb24uY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5faXNVbnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoIWRlc3RpbmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IGRlc3RpbmF0aW9uLl9zdWJzY3JpcHRpb247XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmIChkZXN0aW5hdGlvbiBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgU3Vic2NyaWJlci5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFN1YnNjcmliZXIoKTtcbiAgICAgICAgc3Vic2NyaWJlci5fbmV4dCA9IHR5cGVvZiBuZXh0ID09PSBcImZ1bmN0aW9uXCIgJiYgX3V0aWxUcnlPck9uRXJyb3IyWydkZWZhdWx0J10obmV4dCkgfHwgX3V0aWxOb29wMlsnZGVmYXVsdCddO1xuICAgICAgICBzdWJzY3JpYmVyLl9lcnJvciA9IHR5cGVvZiBlcnJvciA9PT0gXCJmdW5jdGlvblwiICYmIGVycm9yIHx8IF91dGlsVGhyb3dFcnJvcjJbJ2RlZmF1bHQnXTtcbiAgICAgICAgc3Vic2NyaWJlci5fY29tcGxldGUgPSB0eXBlb2YgY29tcGxldGUgPT09IFwiZnVuY3Rpb25cIiAmJiBjb21wbGV0ZSB8fCBfdXRpbE5vb3AyWydkZWZhdWx0J107XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG5cbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIF9lcnJvcihlcnIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG5cbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiBfY29tcGxldGUoKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9O1xuXG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHN1Yikge1xuICAgICAgICAvLyByb3V0ZSBhZGQgdG8gdGhlIHNoYXJlZCBTdWJzY3JpcHRpb24gaWYgaXQgZXhpc3RzXG4gICAgICAgIHZhciBfc3Vic2NyaXB0aW9uID0gdGhpcy5fc3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoX3N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgX3N1YnNjcmlwdGlvbi5hZGQoc3ViKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9TdWJzY3JpcHRpb24ucHJvdG90eXBlLmFkZC5jYWxsKHRoaXMsIHN1Yik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHN1Yikge1xuICAgICAgICAvLyByb3V0ZSByZW1vdmUgdG8gdGhlIHNoYXJlZCBTdWJzY3JpcHRpb24gaWYgaXQgZXhpc3RzXG4gICAgICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbi5yZW1vdmUoc3ViKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9TdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZS5jYWxsKHRoaXMsIHN1Yik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1Vuc3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiBlcnJvcihfZXJyb3IyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoX2Vycm9yMik7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhTdWJzY3JpYmVyLCBbe1xuICAgICAgICBrZXk6ICdpc1Vuc3Vic2NyaWJlZCcsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3N1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAvLyByb3V0ZSB0byB0aGUgc2hhcmVkIFN1YnNjcmlwdGlvbiBpZiBpdCBleGlzdHNcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVbnN1YnNjcmliZWQgfHwgc3Vic2NyaXB0aW9uLmlzVW5zdWJzY3JpYmVkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVbnN1YnNjcmliZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIC8vIHJvdXRlIHRvIHRoZSBzaGFyZWQgU3Vic2NyaXB0aW9uIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5pc1Vuc3Vic2NyaWJlZCA9IEJvb2xlYW4odmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc1Vuc3Vic2NyaWJlZCA9IEJvb2xlYW4odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KShfU3Vic2NyaXB0aW9uM1snZGVmYXVsdCddKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU3Vic2NyaWJlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgU3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oX3Vuc3Vic2NyaWJlKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJzY3JpcHRpb24pO1xuXG4gICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKF91bnN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSBfdW5zdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uIF91bnN1YnNjcmliZSgpIHt9O1xuXG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAodGhpcy5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSB0aGlzLl91bnN1YnNjcmliZTtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gdm9pZCAwO1xuICAgICAgICBpZiAodW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgICAgICB2YXIgbGVuID0gc3Vic2NyaXB0aW9ucy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnNbaW5kZXhdLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIC8vIHJldHVybiBlYXJseSBpZjpcbiAgICAgICAgLy8gIDEuIHRoZSBzdWJzY3JpcHRpb24gaXMgbnVsbFxuICAgICAgICAvLyAgMi4gd2UncmUgYXR0ZW1wdGluZyB0byBhZGQgb3VyIHRoaXNcbiAgICAgICAgLy8gIDMuIHdlJ3JlIGF0dGVtcHRpbmcgdG8gYWRkIHRoZSBzdGF0aWMgYGVtcHR5YCBTdWJzY3JpcHRpb25cbiAgICAgICAgaWYgKCFzdWJzY3JpcHRpb24gfHwgc3Vic2NyaXB0aW9uID09PSB0aGlzIHx8IHN1YnNjcmlwdGlvbiA9PT0gU3Vic2NyaXB0aW9uLkVNUFRZKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YiA9IHN1YnNjcmlwdGlvbjtcbiAgICAgICAgc3dpdGNoICh0eXBlb2Ygc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgICAgICBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICAgICAgaWYgKHN1Yi5pc1Vuc3Vic2NyaWJlZCB8fCB0eXBlb2Ygc3ViLnVuc3Vic2NyaWJlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gdGhpcy5fc3Vic2NyaXB0aW9ucyB8fCAodGhpcy5fc3Vic2NyaXB0aW9ucyA9IFtdKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKHN1Yik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VucmVjb2duaXplZCBzdWJzY3JpcHRpb24gJyArIHN1YnNjcmlwdGlvbiArICcgYWRkZWQgdG8gU3Vic2NyaXB0aW9uLicpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAvLyByZXR1cm4gZWFybHkgaWY6XG4gICAgICAgIC8vICAxLiB0aGUgc3Vic2NyaXB0aW9uIGlzIG51bGxcbiAgICAgICAgLy8gIDIuIHdlJ3JlIGF0dGVtcHRpbmcgdG8gcmVtb3ZlIG91cnRoaXNcbiAgICAgICAgLy8gIDMuIHdlJ3JlIGF0dGVtcHRpbmcgdG8gcmVtb3ZlIHRoZSBzdGF0aWMgYGVtcHR5YCBTdWJzY3JpcHRpb25cbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbiA9PSBudWxsIHx8IHN1YnNjcmlwdGlvbiA9PT0gdGhpcyB8fCBzdWJzY3JpcHRpb24gPT09IFN1YnNjcmlwdGlvbi5FTVBUWSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gdGhpcy5fc3Vic2NyaXB0aW9ucztcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb25JbmRleCA9IHN1YnNjcmlwdGlvbnMuaW5kZXhPZihzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbkluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuc3BsaWNlKHN1YnNjcmlwdGlvbkluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSkoKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBTdWJzY3JpcHRpb247XG5cblN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoZW1wdHkpIHtcbiAgICBlbXB0eS5pc1Vuc3Vic2NyaWJlZCA9IHRydWU7XG4gICAgcmV0dXJuIGVtcHR5O1xufSkobmV3IFN1YnNjcmlwdGlvbigpKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX1N1YnNjcmlwdGlvbjIgPSByZXF1aXJlKCcuLi9TdWJzY3JpcHRpb24nKTtcblxudmFyIF9TdWJzY3JpcHRpb24zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3Vic2NyaXB0aW9uMik7XG5cbnZhciBfU3Vic2NyaWJlciA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcblxudmFyIF9TdWJzY3JpYmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N1YnNjcmliZXIpO1xuXG52YXIgU3ViamVjdFN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoX1N1YnNjcmlwdGlvbikge1xuICAgIF9pbmhlcml0cyhTdWJqZWN0U3Vic2NyaXB0aW9uLCBfU3Vic2NyaXB0aW9uKTtcblxuICAgIGZ1bmN0aW9uIFN1YmplY3RTdWJzY3JpcHRpb24oc3ViamVjdCwgb2JzZXJ2ZXIpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN1YmplY3RTdWJzY3JpcHRpb24pO1xuXG4gICAgICAgIF9TdWJzY3JpcHRpb24uY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdWJqZWN0ID0gc3ViamVjdDtcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG9ic2VydmVyO1xuICAgICAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgU3ViamVjdFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLnN1YmplY3Q7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSBzdWJqZWN0Lm9ic2VydmVycztcbiAgICAgICAgdGhpcy5zdWJqZWN0ID0gdm9pZCAwO1xuICAgICAgICBpZiAoIW9ic2VydmVycyB8fCBvYnNlcnZlcnMubGVuZ3RoID09PSAwIHx8IHN1YmplY3QuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vYnNlcnZlciBpbnN0YW5jZW9mIF9TdWJzY3JpYmVyMlsnZGVmYXVsdCddKSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YnNjcmliZXJJbmRleCA9IG9ic2VydmVycy5pbmRleE9mKHRoaXMub2JzZXJ2ZXIpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlckluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXJzLnNwbGljZShzdWJzY3JpYmVySW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBTdWJqZWN0U3Vic2NyaXB0aW9uO1xufSkoX1N1YnNjcmlwdGlvbjNbJ2RlZmF1bHQnXSk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFN1YmplY3RTdWJzY3JpcHRpb247XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcm9vdCA9IHJlcXVpcmUoJy4vcm9vdCcpO1xuXG5pZiAoIV9yb290LnJvb3QuU3ltYm9sKSB7XG4gICAgX3Jvb3Qucm9vdC5TeW1ib2wgPSB7fTtcbn1cbmlmICghX3Jvb3Qucm9vdC5TeW1ib2wub2JzZXJ2YWJsZSkge1xuICAgIGlmICh0eXBlb2YgX3Jvb3Qucm9vdC5TeW1ib2xbJ2ZvciddID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIF9yb290LnJvb3QuU3ltYm9sLm9ic2VydmFibGUgPSBfcm9vdC5yb290LlN5bWJvbFsnZm9yJ10oJ29ic2VydmFibGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBfcm9vdC5yb290LlN5bWJvbC5vYnNlcnZhYmxlID0gJ0BAb2JzZXJ2YWJsZSc7XG4gICAgfVxufVxuZXhwb3J0c1snZGVmYXVsdCddID0gX3Jvb3Qucm9vdC5TeW1ib2wub2JzZXJ2YWJsZTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBub29wO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgb2JqZWN0VHlwZXMgPSB7XG4gICAgJ2Jvb2xlYW4nOiBmYWxzZSxcbiAgICAnZnVuY3Rpb24nOiB0cnVlLFxuICAgICdvYmplY3QnOiB0cnVlLFxuICAgICdudW1iZXInOiBmYWxzZSxcbiAgICAnc3RyaW5nJzogZmFsc2UsXG4gICAgJ3VuZGVmaW5lZCc6IGZhbHNlXG59O1xudmFyIHJvb3QgPSBvYmplY3RUeXBlc1t0eXBlb2Ygc2VsZl0gJiYgc2VsZiB8fCBvYmplY3RUeXBlc1t0eXBlb2Ygd2luZG93XSAmJiB3aW5kb3c7XG5leHBvcnRzLnJvb3QgPSByb290O1xudmFyIGZyZWVFeHBvcnRzID0gb2JqZWN0VHlwZXNbdHlwZW9mIGV4cG9ydHNdICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcbnZhciBmcmVlTW9kdWxlID0gb2JqZWN0VHlwZXNbdHlwZW9mIG1vZHVsZV0gJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xudmFyIGZyZWVHbG9iYWwgPSBvYmplY3RUeXBlc1t0eXBlb2YgZ2xvYmFsXSAmJiBnbG9iYWw7XG5pZiAoZnJlZUdsb2JhbCAmJiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwpKSB7XG4gICAgZXhwb3J0cy5yb290ID0gcm9vdCA9IGZyZWVHbG9iYWw7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHRocm93RXJyb3I7XG5cbmZ1bmN0aW9uIHRocm93RXJyb3IoZSkge1xuICB0aHJvdyBlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB0cnlPck9uRXJyb3I7XG5cbmZ1bmN0aW9uIHRyeU9yT25FcnJvcih0YXJnZXQpIHtcbiAgICBmdW5jdGlvbiB0cnlDYXRjaGVyKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHJ5Q2F0Y2hlci50YXJnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0cnlDYXRjaGVyLnRhcmdldCA9IHRhcmdldDtcbiAgICByZXR1cm4gdHJ5Q2F0Y2hlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7dmFyIHByb2ZpbGVfMSA9IHJlcXVpcmUoJy4vc3JjL2NvcmUvcHJvZmlsZS9wcm9maWxlJyk7XHJcbmV4cG9ydHMud3RmQ3JlYXRlU2NvcGUgPSBwcm9maWxlXzEud3RmQ3JlYXRlU2NvcGU7XHJcbmV4cG9ydHMud3RmTGVhdmUgPSBwcm9maWxlXzEud3RmTGVhdmU7XHJcbmV4cG9ydHMud3RmU3RhcnRUaW1lUmFuZ2UgPSBwcm9maWxlXzEud3RmU3RhcnRUaW1lUmFuZ2U7XHJcbmV4cG9ydHMud3RmRW5kVGltZVJhbmdlID0gcHJvZmlsZV8xLnd0ZkVuZFRpbWVSYW5nZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvZmlsZS5qcy5tYXAiLCIndXNlIHN0cmljdCc7ZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIGZpbGUgaXMgb25seSB1c2VkIGZvciBkYXJ0IGFwcGxpY2F0aW9ucyBhbmQgZm9yIGludGVybmFsIGV4YW1wbGVzXHJcbiAqIHRoYXQgY29tcGlsZSB3aXRoIGJvdGggSmF2YVNjcmlwdCBhbmQgRGFydC5cclxuICpcclxuICogSmF2YVNjcmlwdCB1c2VycyBzaG91bGQgaW1wb3J0IGZyb20gYW5ndWxhcjIvY29yZS5cclxuICovXHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vc3JjL2NvcmUvcmVuZGVyJykpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW5kZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgbWF0aF8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL21hdGgnKTtcclxudmFyIHV0aWxfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL3JlbmRlci9kb20vdXRpbCcpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIGRvbV9hZGFwdGVyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kb20vZG9tX2FkYXB0ZXInKTtcclxudmFyIEFuaW1hdGlvbiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIFN0b3JlcyB0aGUgc3RhcnQgdGltZSBhbmQgc3RhcnRzIHRoZSBhbmltYXRpb25cclxuICAgICAqIEBwYXJhbSBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0gZGF0YVxyXG4gICAgICogQHBhcmFtIGJyb3dzZXJEZXRhaWxzXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEFuaW1hdGlvbihlbGVtZW50LCBkYXRhLCBicm93c2VyRGV0YWlscykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuYnJvd3NlckRldGFpbHMgPSBicm93c2VyRGV0YWlscztcclxuICAgICAgICAvKiogZnVuY3Rpb25zIHRvIGJlIGNhbGxlZCB1cG9uIGNvbXBsZXRpb24gKi9cclxuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IFtdO1xyXG4gICAgICAgIC8qKiBmdW5jdGlvbnMgZm9yIHJlbW92aW5nIGV2ZW50IGxpc3RlbmVycyAqL1xyXG4gICAgICAgIHRoaXMuZXZlbnRDbGVhckZ1bmN0aW9ucyA9IFtdO1xyXG4gICAgICAgIC8qKiBmbGFnIHVzZWQgdG8gdHJhY2sgd2hldGhlciBvciBub3QgdGhlIGFuaW1hdGlvbiBoYXMgZmluaXNoZWQgKi9cclxuICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX3N0cmluZ1ByZWZpeCA9ICcnO1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gbGFuZ18xLkRhdGVXcmFwcGVyLnRvTWlsbGlzKGxhbmdfMS5EYXRlV3JhcHBlci5ub3coKSk7XHJcbiAgICAgICAgdGhpcy5fc3RyaW5nUHJlZml4ID0gZG9tX2FkYXB0ZXJfMS5ET00uZ2V0QW5pbWF0aW9uUHJlZml4KCk7XHJcbiAgICAgICAgdGhpcy5zZXR1cCgpO1xyXG4gICAgICAgIHRoaXMud2FpdChmdW5jdGlvbiAodGltZXN0YW1wKSB7IHJldHVybiBfdGhpcy5zdGFydCgpOyB9KTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb24ucHJvdG90eXBlLCBcInRvdGFsVGltZVwiLCB7XHJcbiAgICAgICAgLyoqIHRvdGFsIGFtb3VudCBvZiB0aW1lIHRoYXQgdGhlIGFuaW1hdGlvbiBzaG91bGQgdGFrZSBpbmNsdWRpbmcgZGVsYXkgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGRlbGF5ID0gdGhpcy5jb21wdXRlZERlbGF5ICE9IG51bGwgPyB0aGlzLmNvbXB1dGVkRGVsYXkgOiAwO1xyXG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSB0aGlzLmNvbXB1dGVkRHVyYXRpb24gIT0gbnVsbCA/IHRoaXMuY29tcHV0ZWREdXJhdGlvbiA6IDA7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWxheSArIGR1cmF0aW9uO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgQW5pbWF0aW9uLnByb3RvdHlwZS53YWl0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgLy8gRmlyZWZveCByZXF1aXJlcyAyIGZyYW1lcyBmb3Igc29tZSByZWFzb25cclxuICAgICAgICB0aGlzLmJyb3dzZXJEZXRhaWxzLnJhZihjYWxsYmFjaywgMik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHVwIHRoZSBpbml0aWFsIHN0eWxlcyBiZWZvcmUgdGhlIGFuaW1hdGlvbiBpcyBzdGFydGVkXHJcbiAgICAgKi9cclxuICAgIEFuaW1hdGlvbi5wcm90b3R5cGUuc2V0dXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5mcm9tU3R5bGVzICE9IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlTdHlsZXModGhpcy5kYXRhLmZyb21TdHlsZXMpO1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGEuZHVyYXRpb24gIT0gbnVsbClcclxuICAgICAgICAgICAgdGhpcy5hcHBseVN0eWxlcyh7ICd0cmFuc2l0aW9uRHVyYXRpb24nOiB0aGlzLmRhdGEuZHVyYXRpb24udG9TdHJpbmcoKSArICdtcycgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5kZWxheSAhPSBudWxsKVxyXG4gICAgICAgICAgICB0aGlzLmFwcGx5U3R5bGVzKHsgJ3RyYW5zaXRpb25EZWxheSc6IHRoaXMuZGF0YS5kZWxheS50b1N0cmluZygpICsgJ21zJyB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFmdGVyIHRoZSBpbml0aWFsIHNldHVwIGhhcyBvY2N1cnJlZCwgdGhpcyBtZXRob2QgYWRkcyB0aGUgYW5pbWF0aW9uIHN0eWxlc1xyXG4gICAgICovXHJcbiAgICBBbmltYXRpb24ucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuYWRkQ2xhc3Nlcyh0aGlzLmRhdGEuY2xhc3Nlc1RvQWRkKTtcclxuICAgICAgICB0aGlzLmFkZENsYXNzZXModGhpcy5kYXRhLmFuaW1hdGlvbkNsYXNzZXMpO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQ2xhc3Nlcyh0aGlzLmRhdGEuY2xhc3Nlc1RvUmVtb3ZlKTtcclxuICAgICAgICBpZiAodGhpcy5kYXRhLnRvU3R5bGVzICE9IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlTdHlsZXModGhpcy5kYXRhLnRvU3R5bGVzKTtcclxuICAgICAgICB2YXIgY29tcHV0ZWRTdHlsZXMgPSBkb21fYWRhcHRlcl8xLkRPTS5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5jb21wdXRlZERlbGF5ID1cclxuICAgICAgICAgICAgbWF0aF8xLk1hdGgubWF4KHRoaXMucGFyc2VEdXJhdGlvblN0cmluZyhjb21wdXRlZFN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKHRoaXMuX3N0cmluZ1ByZWZpeCArICd0cmFuc2l0aW9uLWRlbGF5JykpLCB0aGlzLnBhcnNlRHVyYXRpb25TdHJpbmcodGhpcy5lbGVtZW50LnN0eWxlLmdldFByb3BlcnR5VmFsdWUodGhpcy5fc3RyaW5nUHJlZml4ICsgJ3RyYW5zaXRpb24tZGVsYXknKSkpO1xyXG4gICAgICAgIHRoaXMuY29tcHV0ZWREdXJhdGlvbiA9IG1hdGhfMS5NYXRoLm1heCh0aGlzLnBhcnNlRHVyYXRpb25TdHJpbmcoY29tcHV0ZWRTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSh0aGlzLl9zdHJpbmdQcmVmaXggKyAndHJhbnNpdGlvbi1kdXJhdGlvbicpKSwgdGhpcy5wYXJzZUR1cmF0aW9uU3RyaW5nKHRoaXMuZWxlbWVudC5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHRoaXMuX3N0cmluZ1ByZWZpeCArICd0cmFuc2l0aW9uLWR1cmF0aW9uJykpKTtcclxuICAgICAgICB0aGlzLmFkZEV2ZW50cygpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQXBwbGllcyB0aGUgcHJvdmlkZWQgc3R5bGVzIHRvIHRoZSBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0gc3R5bGVzXHJcbiAgICAgKi9cclxuICAgIEFuaW1hdGlvbi5wcm90b3R5cGUuYXBwbHlTdHlsZXMgPSBmdW5jdGlvbiAoc3R5bGVzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5mb3JFYWNoKHN0eWxlcywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgdmFyIGRhc2hDYXNlS2V5ID0gdXRpbF8xLmNhbWVsQ2FzZVRvRGFzaENhc2Uoa2V5KTtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoZG9tX2FkYXB0ZXJfMS5ET00uZ2V0U3R5bGUoX3RoaXMuZWxlbWVudCwgZGFzaENhc2VLZXkpKSkge1xyXG4gICAgICAgICAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00uc2V0U3R5bGUoX3RoaXMuZWxlbWVudCwgZGFzaENhc2VLZXksIHZhbHVlLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00uc2V0U3R5bGUoX3RoaXMuZWxlbWVudCwgX3RoaXMuX3N0cmluZ1ByZWZpeCArIGRhc2hDYXNlS2V5LCB2YWx1ZS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgcHJvdmlkZWQgY2xhc3NlcyB0byB0aGUgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIGNsYXNzZXNcclxuICAgICAqL1xyXG4gICAgQW5pbWF0aW9uLnByb3RvdHlwZS5hZGRDbGFzc2VzID0gZnVuY3Rpb24gKGNsYXNzZXMpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2xhc3Nlcy5sZW5ndGg7IGkgPCBsZW47IGkrKylcclxuICAgICAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00uYWRkQ2xhc3ModGhpcy5lbGVtZW50LCBjbGFzc2VzW2ldKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgdGhlIHByb3ZpZGVkIGNsYXNzZXMgZnJvbSB0aGUgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIGNsYXNzZXNcclxuICAgICAqL1xyXG4gICAgQW5pbWF0aW9uLnByb3RvdHlwZS5yZW1vdmVDbGFzc2VzID0gZnVuY3Rpb24gKGNsYXNzZXMpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2xhc3Nlcy5sZW5ndGg7IGkgPCBsZW47IGkrKylcclxuICAgICAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00ucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50LCBjbGFzc2VzW2ldKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgZXZlbnRzIHRvIHRyYWNrIHdoZW4gYW5pbWF0aW9ucyBoYXZlIGZpbmlzaGVkXHJcbiAgICAgKi9cclxuICAgIEFuaW1hdGlvbi5wcm90b3R5cGUuYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMudG90YWxUaW1lID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50Q2xlYXJGdW5jdGlvbnMucHVzaChkb21fYWRhcHRlcl8xLkRPTS5vbkFuZENhbmNlbCh0aGlzLmVsZW1lbnQsIGRvbV9hZGFwdGVyXzEuRE9NLmdldFRyYW5zaXRpb25FbmQoKSwgZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBfdGhpcy5oYW5kbGVBbmltYXRpb25FdmVudChldmVudCk7IH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQW5pbWF0aW9uQ29tcGxldGVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFuaW1hdGlvbi5wcm90b3R5cGUuaGFuZGxlQW5pbWF0aW9uRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgZWxhcHNlZFRpbWUgPSBtYXRoXzEuTWF0aC5yb3VuZChldmVudC5lbGFwc2VkVGltZSAqIDEwMDApO1xyXG4gICAgICAgIGlmICghdGhpcy5icm93c2VyRGV0YWlscy5lbGFwc2VkVGltZUluY2x1ZGVzRGVsYXkpXHJcbiAgICAgICAgICAgIGVsYXBzZWRUaW1lICs9IHRoaXMuY29tcHV0ZWREZWxheTtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBpZiAoZWxhcHNlZFRpbWUgPj0gdGhpcy50b3RhbFRpbWUpXHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQW5pbWF0aW9uQ29tcGxldGVkKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSdW5zIGFsbCBhbmltYXRpb24gY2FsbGJhY2tzIGFuZCByZW1vdmVzIHRlbXBvcmFyeSBjbGFzc2VzXHJcbiAgICAgKi9cclxuICAgIEFuaW1hdGlvbi5wcm90b3R5cGUuaGFuZGxlQW5pbWF0aW9uQ29tcGxldGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQ2xhc3Nlcyh0aGlzLmRhdGEuYW5pbWF0aW9uQ2xhc3Nlcyk7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIGNhbGxiYWNrKCk7IH0pO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgdGhpcy5ldmVudENsZWFyRnVuY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbigpOyB9KTtcclxuICAgICAgICB0aGlzLmV2ZW50Q2xlYXJGdW5jdGlvbnMgPSBbXTtcclxuICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGFuaW1hdGlvbiBjYWxsYmFja3MgdG8gYmUgY2FsbGVkIHVwb24gY29tcGxldGlvblxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrXHJcbiAgICAgKiBAcmV0dXJucyB7QW5pbWF0aW9ufVxyXG4gICAgICovXHJcbiAgICBBbmltYXRpb24ucHJvdG90eXBlLm9uQ29tcGxldGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICBpZiAodGhpcy5jb21wbGV0ZWQpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoZSBkdXJhdGlvbiBzdHJpbmcgdG8gdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHNcclxuICAgICAqIEBwYXJhbSBkdXJhdGlvblxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgQW5pbWF0aW9uLnByb3RvdHlwZS5wYXJzZUR1cmF0aW9uU3RyaW5nID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1heFZhbHVlID0gMDtcclxuICAgICAgICAvLyBkdXJhdGlvbiBtdXN0IGhhdmUgYXQgbGVhc3QgMiBjaGFyYWN0ZXJzIHRvIGJlIHZhbGlkLiAobnVtYmVyICsgdHlwZSlcclxuICAgICAgICBpZiAoZHVyYXRpb24gPT0gbnVsbCB8fCBkdXJhdGlvbi5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXhWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZHVyYXRpb24uc3Vic3RyaW5nKGR1cmF0aW9uLmxlbmd0aCAtIDIpID09ICdtcycpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gbGFuZ18xLk51bWJlcldyYXBwZXIucGFyc2VJbnQodGhpcy5zdHJpcExldHRlcnMoZHVyYXRpb24pLCAxMCk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IG1heFZhbHVlKVxyXG4gICAgICAgICAgICAgICAgbWF4VmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZHVyYXRpb24uc3Vic3RyaW5nKGR1cmF0aW9uLmxlbmd0aCAtIDEpID09ICdzJykge1xyXG4gICAgICAgICAgICB2YXIgbXMgPSBsYW5nXzEuTnVtYmVyV3JhcHBlci5wYXJzZUZsb2F0KHRoaXMuc3RyaXBMZXR0ZXJzKGR1cmF0aW9uKSkgKiAxMDAwO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBtYXRoXzEuTWF0aC5mbG9vcihtcyk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IG1heFZhbHVlKVxyXG4gICAgICAgICAgICAgICAgbWF4VmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1heFZhbHVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3RyaXBzIHRoZSBsZXR0ZXJzIGZyb20gdGhlIGR1cmF0aW9uIHN0cmluZ1xyXG4gICAgICogQHBhcmFtIHN0clxyXG4gICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgQW5pbWF0aW9uLnByb3RvdHlwZS5zdHJpcExldHRlcnMgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICAgICAgcmV0dXJuIGxhbmdfMS5TdHJpbmdXcmFwcGVyLnJlcGxhY2VBbGwoc3RyLCBsYW5nXzEuUmVnRXhwV3JhcHBlci5jcmVhdGUoJ1teMC05XSskJywgJycpLCAnJyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFuaW1hdGlvbjtcclxufSkoKTtcclxuZXhwb3J0cy5BbmltYXRpb24gPSBBbmltYXRpb247XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuaW1hdGlvbi5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgY3NzX2FuaW1hdGlvbl9idWlsZGVyXzEgPSByZXF1aXJlKCcuL2Nzc19hbmltYXRpb25fYnVpbGRlcicpO1xyXG52YXIgYnJvd3Nlcl9kZXRhaWxzXzEgPSByZXF1aXJlKCcuL2Jyb3dzZXJfZGV0YWlscycpO1xyXG52YXIgQW5pbWF0aW9uQnVpbGRlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgZm9yIERJXHJcbiAgICAgKiBAcGFyYW0gYnJvd3NlckRldGFpbHNcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uQnVpbGRlcihicm93c2VyRGV0YWlscykge1xyXG4gICAgICAgIHRoaXMuYnJvd3NlckRldGFpbHMgPSBicm93c2VyRGV0YWlscztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDU1MgQW5pbWF0aW9uXHJcbiAgICAgKiBAcmV0dXJucyB7Q3NzQW5pbWF0aW9uQnVpbGRlcn1cclxuICAgICAqL1xyXG4gICAgQW5pbWF0aW9uQnVpbGRlci5wcm90b3R5cGUuY3NzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IGNzc19hbmltYXRpb25fYnVpbGRlcl8xLkNzc0FuaW1hdGlvbkJ1aWxkZXIodGhpcy5icm93c2VyRGV0YWlscyk7IH07XHJcbiAgICBBbmltYXRpb25CdWlsZGVyID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgZGlfMS5JbmplY3RhYmxlKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW2Jyb3dzZXJfZGV0YWlsc18xLkJyb3dzZXJEZXRhaWxzXSlcclxuICAgIF0sIEFuaW1hdGlvbkJ1aWxkZXIpO1xyXG4gICAgcmV0dXJuIEFuaW1hdGlvbkJ1aWxkZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQW5pbWF0aW9uQnVpbGRlciA9IEFuaW1hdGlvbkJ1aWxkZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuaW1hdGlvbl9idWlsZGVyLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBtYXRoXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbWF0aCcpO1xyXG52YXIgZG9tX2FkYXB0ZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RvbS9kb21fYWRhcHRlcicpO1xyXG52YXIgQnJvd3NlckRldGFpbHMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQnJvd3NlckRldGFpbHMoKSB7XHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZUluY2x1ZGVzRGVsYXkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmRvZXNFbGFwc2VkVGltZUluY2x1ZGVzRGVsYXkoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGV0ZXJtaW5lcyBpZiBgZXZlbnQuZWxhcHNlZFRpbWVgIGluY2x1ZGVzIHRyYW5zaXRpb24gZGVsYXkgaW4gdGhlIGN1cnJlbnQgYnJvd3Nlci4gIEF0IHRoaXNcclxuICAgICAqIHRpbWUsIENocm9tZSBhbmQgT3BlcmEgc2VlbSB0byBiZSB0aGUgb25seSBicm93c2VycyB0aGF0IGluY2x1ZGUgdGhpcy5cclxuICAgICAqL1xyXG4gICAgQnJvd3NlckRldGFpbHMucHJvdG90eXBlLmRvZXNFbGFwc2VkVGltZUluY2x1ZGVzRGVsYXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgZGl2ID0gZG9tX2FkYXB0ZXJfMS5ET00uY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00uc2V0QXR0cmlidXRlKGRpdiwgJ3N0eWxlJywgXCJwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogLTk5OTlweDsgbGVmdDogLTk5OTlweDsgd2lkdGg6IDFweDtcXG4gICAgICBoZWlnaHQ6IDFweDsgdHJhbnNpdGlvbjogYWxsIDFtcyBsaW5lYXIgMW1zO1wiKTtcclxuICAgICAgICAvLyBGaXJlZm94IHJlcXVpcmVzIHRoYXQgd2Ugd2FpdCBmb3IgMiBmcmFtZXMgZm9yIHNvbWUgcmVhc29uXHJcbiAgICAgICAgdGhpcy5yYWYoZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xyXG4gICAgICAgICAgICBkb21fYWRhcHRlcl8xLkRPTS5vbihkaXYsICd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxhcHNlZCA9IG1hdGhfMS5NYXRoLnJvdW5kKGV2ZW50LmVsYXBzZWRUaW1lICogMTAwMCk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5lbGFwc2VkVGltZUluY2x1ZGVzRGVsYXkgPSBlbGFwc2VkID09IDI7XHJcbiAgICAgICAgICAgICAgICBkb21fYWRhcHRlcl8xLkRPTS5yZW1vdmUoZGl2KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGRvbV9hZGFwdGVyXzEuRE9NLnNldFN0eWxlKGRpdiwgJ3dpZHRoJywgJzJweCcpO1xyXG4gICAgICAgIH0sIDIpO1xyXG4gICAgfTtcclxuICAgIEJyb3dzZXJEZXRhaWxzLnByb3RvdHlwZS5yYWYgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGZyYW1lcykge1xyXG4gICAgICAgIGlmIChmcmFtZXMgPT09IHZvaWQgMCkgeyBmcmFtZXMgPSAxOyB9XHJcbiAgICAgICAgdmFyIHF1ZXVlID0gbmV3IFJhZlF1ZXVlKGNhbGxiYWNrLCBmcmFtZXMpO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBxdWV1ZS5jYW5jZWwoKTsgfTtcclxuICAgIH07XHJcbiAgICBCcm93c2VyRGV0YWlscyA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgQnJvd3NlckRldGFpbHMpO1xyXG4gICAgcmV0dXJuIEJyb3dzZXJEZXRhaWxzO1xyXG59KSgpO1xyXG5leHBvcnRzLkJyb3dzZXJEZXRhaWxzID0gQnJvd3NlckRldGFpbHM7XHJcbnZhciBSYWZRdWV1ZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSYWZRdWV1ZShjYWxsYmFjaywgZnJhbWVzKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuZnJhbWVzID0gZnJhbWVzO1xyXG4gICAgICAgIHRoaXMuX3JhZigpO1xyXG4gICAgfVxyXG4gICAgUmFmUXVldWUucHJvdG90eXBlLl9yYWYgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmN1cnJlbnRGcmFtZUlkID0gZG9tX2FkYXB0ZXJfMS5ET00ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICh0aW1lc3RhbXApIHsgcmV0dXJuIF90aGlzLl9uZXh0RnJhbWUodGltZXN0YW1wKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgUmFmUXVldWUucHJvdG90eXBlLl9uZXh0RnJhbWUgPSBmdW5jdGlvbiAodGltZXN0YW1wKSB7XHJcbiAgICAgICAgdGhpcy5mcmFtZXMtLTtcclxuICAgICAgICBpZiAodGhpcy5mcmFtZXMgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JhZigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jYWxsYmFjayh0aW1lc3RhbXApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSYWZRdWV1ZS5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGRvbV9hZGFwdGVyXzEuRE9NLmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuY3VycmVudEZyYW1lSWQpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEZyYW1lSWQgPSBudWxsO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBSYWZRdWV1ZTtcclxufSkoKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlcl9kZXRhaWxzLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgY3NzX2FuaW1hdGlvbl9vcHRpb25zXzEgPSByZXF1aXJlKCcuL2Nzc19hbmltYXRpb25fb3B0aW9ucycpO1xyXG52YXIgYW5pbWF0aW9uXzEgPSByZXF1aXJlKCcuL2FuaW1hdGlvbicpO1xyXG52YXIgQ3NzQW5pbWF0aW9uQnVpbGRlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEFjY2VwdHMgcHVibGljIHByb3BlcnRpZXMgZm9yIENzc0FuaW1hdGlvbkJ1aWxkZXJcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gQ3NzQW5pbWF0aW9uQnVpbGRlcihicm93c2VyRGV0YWlscykge1xyXG4gICAgICAgIHRoaXMuYnJvd3NlckRldGFpbHMgPSBicm93c2VyRGV0YWlscztcclxuICAgICAgICAvKiogQHR5cGUge0Nzc0FuaW1hdGlvbk9wdGlvbnN9ICovXHJcbiAgICAgICAgdGhpcy5kYXRhID0gbmV3IGNzc19hbmltYXRpb25fb3B0aW9uc18xLkNzc0FuaW1hdGlvbk9wdGlvbnMoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIHRlbXBvcmFyeSBjbGFzcyB0aGF0IHdpbGwgYmUgcmVtb3ZlZCBhdCB0aGUgZW5kIG9mIHRoZSBhbmltYXRpb25cclxuICAgICAqIEBwYXJhbSBjbGFzc05hbWVcclxuICAgICAqL1xyXG4gICAgQ3NzQW5pbWF0aW9uQnVpbGRlci5wcm90b3R5cGUuYWRkQW5pbWF0aW9uQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhLmFuaW1hdGlvbkNsYXNzZXMucHVzaChjbGFzc05hbWUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIGNsYXNzIHRoYXQgd2lsbCByZW1haW4gb24gdGhlIGVsZW1lbnQgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBoYXMgZmluaXNoZWRcclxuICAgICAqIEBwYXJhbSBjbGFzc05hbWVcclxuICAgICAqL1xyXG4gICAgQ3NzQW5pbWF0aW9uQnVpbGRlci5wcm90b3R5cGUuYWRkQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhLmNsYXNzZXNUb0FkZC5wdXNoKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGEgY2xhc3MgZnJvbSB0aGUgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIGNsYXNzTmFtZVxyXG4gICAgICovXHJcbiAgICBDc3NBbmltYXRpb25CdWlsZGVyLnByb3RvdHlwZS5yZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcclxuICAgICAgICB0aGlzLmRhdGEuY2xhc3Nlc1RvUmVtb3ZlLnB1c2goY2xhc3NOYW1lKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGFuaW1hdGlvbiBkdXJhdGlvbiAoYW5kIG92ZXJyaWRlcyBhbnkgZGVmaW5lZCB0aHJvdWdoIENTUylcclxuICAgICAqIEBwYXJhbSBkdXJhdGlvblxyXG4gICAgICovXHJcbiAgICBDc3NBbmltYXRpb25CdWlsZGVyLnByb3RvdHlwZS5zZXREdXJhdGlvbiA9IGZ1bmN0aW9uIChkdXJhdGlvbikge1xyXG4gICAgICAgIHRoaXMuZGF0YS5kdXJhdGlvbiA9IGR1cmF0aW9uO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgYW5pbWF0aW9uIGRlbGF5IChhbmQgb3ZlcnJpZGVzIGFueSBkZWZpbmVkIHRocm91Z2ggQ1NTKVxyXG4gICAgICogQHBhcmFtIGRlbGF5XHJcbiAgICAgKi9cclxuICAgIENzc0FuaW1hdGlvbkJ1aWxkZXIucHJvdG90eXBlLnNldERlbGF5ID0gZnVuY3Rpb24gKGRlbGF5KSB7XHJcbiAgICAgICAgdGhpcy5kYXRhLmRlbGF5ID0gZGVsYXk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHN0eWxlcyBmb3IgYm90aCB0aGUgaW5pdGlhbCBzdGF0ZSBhbmQgdGhlIGRlc3RpbmF0aW9uIHN0YXRlXHJcbiAgICAgKiBAcGFyYW0gZnJvbVxyXG4gICAgICogQHBhcmFtIHRvXHJcbiAgICAgKi9cclxuICAgIENzc0FuaW1hdGlvbkJ1aWxkZXIucHJvdG90eXBlLnNldFN0eWxlcyA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldEZyb21TdHlsZXMoZnJvbSkuc2V0VG9TdHlsZXModG8pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgaW5pdGlhbCBzdHlsZXMgZm9yIHRoZSBhbmltYXRpb25cclxuICAgICAqIEBwYXJhbSBmcm9tXHJcbiAgICAgKi9cclxuICAgIENzc0FuaW1hdGlvbkJ1aWxkZXIucHJvdG90eXBlLnNldEZyb21TdHlsZXMgPSBmdW5jdGlvbiAoZnJvbSkge1xyXG4gICAgICAgIHRoaXMuZGF0YS5mcm9tU3R5bGVzID0gZnJvbTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGRlc3RpbmF0aW9uIHN0eWxlcyBmb3IgdGhlIGFuaW1hdGlvblxyXG4gICAgICogQHBhcmFtIHRvXHJcbiAgICAgKi9cclxuICAgIENzc0FuaW1hdGlvbkJ1aWxkZXIucHJvdG90eXBlLnNldFRvU3R5bGVzID0gZnVuY3Rpb24gKHRvKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhLnRvU3R5bGVzID0gdG87XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdGFydHMgdGhlIGFuaW1hdGlvbiBhbmQgcmV0dXJucyBhIHByb21pc2VcclxuICAgICAqIEBwYXJhbSBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIENzc0FuaW1hdGlvbkJ1aWxkZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IGFuaW1hdGlvbl8xLkFuaW1hdGlvbihlbGVtZW50LCB0aGlzLmRhdGEsIHRoaXMuYnJvd3NlckRldGFpbHMpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDc3NBbmltYXRpb25CdWlsZGVyO1xyXG59KSgpO1xyXG5leHBvcnRzLkNzc0FuaW1hdGlvbkJ1aWxkZXIgPSBDc3NBbmltYXRpb25CdWlsZGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3NfYW5pbWF0aW9uX2J1aWxkZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBDc3NBbmltYXRpb25PcHRpb25zID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENzc0FuaW1hdGlvbk9wdGlvbnMoKSB7XHJcbiAgICAgICAgLyoqIGNsYXNzZXMgdG8gYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnQgKi9cclxuICAgICAgICB0aGlzLmNsYXNzZXNUb0FkZCA9IFtdO1xyXG4gICAgICAgIC8qKiBjbGFzc2VzIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCAqL1xyXG4gICAgICAgIHRoaXMuY2xhc3Nlc1RvUmVtb3ZlID0gW107XHJcbiAgICAgICAgLyoqIGNsYXNzZXMgdG8gYmUgYWRkZWQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uICovXHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25DbGFzc2VzID0gW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQ3NzQW5pbWF0aW9uT3B0aW9ucztcclxufSkoKTtcclxuZXhwb3J0cy5Dc3NBbmltYXRpb25PcHRpb25zID0gQ3NzQW5pbWF0aW9uT3B0aW9ucztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3NzX2FuaW1hdGlvbl9vcHRpb25zLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGNvbXBpbGVyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci9jb21waWxlcicpO1xyXG52YXIgYXBwbGljYXRpb25fY29tbW9uXzEgPSByZXF1aXJlKCcuL2FwcGxpY2F0aW9uX2NvbW1vbicpO1xyXG52YXIgYXBwbGljYXRpb25fdG9rZW5zXzEgPSByZXF1aXJlKCcuL2FwcGxpY2F0aW9uX3Rva2VucycpO1xyXG5leHBvcnRzLkFQUF9DT01QT05FTlQgPSBhcHBsaWNhdGlvbl90b2tlbnNfMS5BUFBfQ09NUE9ORU5UO1xyXG5leHBvcnRzLkFQUF9JRCA9IGFwcGxpY2F0aW9uX3Rva2Vuc18xLkFQUF9JRDtcclxudmFyIGFwcGxpY2F0aW9uX2NvbW1vbl8yID0gcmVxdWlyZSgnLi9hcHBsaWNhdGlvbl9jb21tb24nKTtcclxuZXhwb3J0cy5wbGF0Zm9ybSA9IGFwcGxpY2F0aW9uX2NvbW1vbl8yLnBsYXRmb3JtO1xyXG52YXIgYXBwbGljYXRpb25fcmVmXzEgPSByZXF1aXJlKCcuL2FwcGxpY2F0aW9uX3JlZicpO1xyXG5leHBvcnRzLlBsYXRmb3JtUmVmID0gYXBwbGljYXRpb25fcmVmXzEuUGxhdGZvcm1SZWY7XHJcbmV4cG9ydHMuQXBwbGljYXRpb25SZWYgPSBhcHBsaWNhdGlvbl9yZWZfMS5BcHBsaWNhdGlvblJlZjtcclxuZXhwb3J0cy5hcHBsaWNhdGlvbkNvbW1vbkJpbmRpbmdzID0gYXBwbGljYXRpb25fcmVmXzEuYXBwbGljYXRpb25Db21tb25CaW5kaW5ncztcclxuZXhwb3J0cy5jcmVhdGVOZ1pvbmUgPSBhcHBsaWNhdGlvbl9yZWZfMS5jcmVhdGVOZ1pvbmU7XHJcbmV4cG9ydHMucGxhdGZvcm1Db21tb24gPSBhcHBsaWNhdGlvbl9yZWZfMS5wbGF0Zm9ybUNvbW1vbjtcclxuZXhwb3J0cy5wbGF0Zm9ybUJpbmRpbmdzID0gYXBwbGljYXRpb25fcmVmXzEucGxhdGZvcm1CaW5kaW5ncztcclxuLy8vIFNlZSBbY29tbW9uQm9vdHN0cmFwXSBmb3IgZGV0YWlsZWQgZG9jdW1lbnRhdGlvbi5cclxuZnVuY3Rpb24gYm9vdHN0cmFwKGFwcENvbXBvbmVudFR5cGUsIGFwcEJpbmRpbmdzKSB7XHJcbiAgICBpZiAoYXBwQmluZGluZ3MgPT09IHZvaWQgMCkgeyBhcHBCaW5kaW5ncyA9IG51bGw7IH1cclxuICAgIHZhciBiaW5kaW5ncyA9IFtjb21waWxlcl8xLmNvbXBpbGVyUHJvdmlkZXJzKCldO1xyXG4gICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoYXBwQmluZGluZ3MpKSB7XHJcbiAgICAgICAgYmluZGluZ3MucHVzaChhcHBCaW5kaW5ncyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXBwbGljYXRpb25fY29tbW9uXzEuY29tbW9uQm9vdHN0cmFwKGFwcENvbXBvbmVudFR5cGUsIGJpbmRpbmdzKTtcclxufVxyXG5leHBvcnRzLmJvb3RzdHJhcCA9IGJvb3RzdHJhcDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbGljYXRpb24uanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBmb3Jtc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZm9ybXMnKTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGJyb3dzZXJfYWRhcHRlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZG9tL2Jyb3dzZXJfYWRhcHRlcicpO1xyXG52YXIgYnJvd3Nlcl90ZXN0YWJpbGl0eV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvdGVzdGFiaWxpdHkvYnJvd3Nlcl90ZXN0YWJpbGl0eScpO1xyXG52YXIgZG9tX2FkYXB0ZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RvbS9kb21fYWRhcHRlcicpO1xyXG52YXIgeGhyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci94aHInKTtcclxudmFyIHhocl9pbXBsXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci94aHJfaW1wbCcpO1xyXG52YXIgZXZlbnRfbWFuYWdlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvcmVuZGVyL2RvbS9ldmVudHMvZXZlbnRfbWFuYWdlcicpO1xyXG52YXIga2V5X2V2ZW50c18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvcmVuZGVyL2RvbS9ldmVudHMva2V5X2V2ZW50cycpO1xyXG52YXIgaGFtbWVyX2dlc3R1cmVzXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9yZW5kZXIvZG9tL2V2ZW50cy9oYW1tZXJfZ2VzdHVyZXMnKTtcclxudmFyIHRlc3RhYmlsaXR5XzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS90ZXN0YWJpbGl0eS90ZXN0YWJpbGl0eScpO1xyXG52YXIgYXBpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9yZW5kZXIvYXBpJyk7XHJcbnZhciByZW5kZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL3JlbmRlci9yZW5kZXInKTtcclxudmFyIHNoYXJlZF9zdHlsZXNfaG9zdF8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvcmVuZGVyL2RvbS9zaGFyZWRfc3R5bGVzX2hvc3QnKTtcclxudmFyIHBsYXRmb3JtX2JpbmRpbmdzXzEgPSByZXF1aXJlKCcuL3BsYXRmb3JtX2JpbmRpbmdzJyk7XHJcbnZhciBhbmltYXRpb25fYnVpbGRlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2FuaW1hdGUvYW5pbWF0aW9uX2J1aWxkZXInKTtcclxudmFyIGJyb3dzZXJfZGV0YWlsc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2FuaW1hdGUvYnJvd3Nlcl9kZXRhaWxzJyk7XHJcbnZhciB3dGZfaW5pdF8xID0gcmVxdWlyZSgnLi9wcm9maWxlL3d0Zl9pbml0Jyk7XHJcbnZhciBhcHBsaWNhdGlvbl9yZWZfMSA9IHJlcXVpcmUoJy4vYXBwbGljYXRpb25fcmVmJyk7XHJcbi8qKlxyXG4gKiBBIGRlZmF1bHQgc2V0IG9mIHByb3ZpZGVycyB3aGljaCBhcHBseSBvbmx5IHRvIGFuIEFuZ3VsYXIgYXBwbGljYXRpb24gcnVubmluZyBvblxyXG4gKiB0aGUgVUkgdGhyZWFkLlxyXG4gKi9cclxuZnVuY3Rpb24gYXBwbGljYXRpb25Eb21CaW5kaW5ncygpIHtcclxuICAgIGlmIChsYW5nXzEuaXNCbGFuayhkb21fYWRhcHRlcl8xLkRPTSkpIHtcclxuICAgICAgICB0aHJvdyBcIk11c3Qgc2V0IGEgcm9vdCBET00gYWRhcHRlciBmaXJzdC5cIjtcclxuICAgIH1cclxuICAgIHJldHVybiBbXHJcbiAgICAgICAgZGlfMS5wcm92aWRlKHJlbmRlcl8xLkRPQ1VNRU5ULCB7IHVzZVZhbHVlOiBkb21fYWRhcHRlcl8xLkRPTS5kZWZhdWx0RG9jKCkgfSksXHJcbiAgICAgICAgZXZlbnRfbWFuYWdlcl8xLkV2ZW50TWFuYWdlcixcclxuICAgICAgICBuZXcgZGlfMS5Qcm92aWRlcihldmVudF9tYW5hZ2VyXzEuRVZFTlRfTUFOQUdFUl9QTFVHSU5TLCB7IHVzZUNsYXNzOiBldmVudF9tYW5hZ2VyXzEuRG9tRXZlbnRzUGx1Z2luLCBtdWx0aTogdHJ1ZSB9KSxcclxuICAgICAgICBuZXcgZGlfMS5Qcm92aWRlcihldmVudF9tYW5hZ2VyXzEuRVZFTlRfTUFOQUdFUl9QTFVHSU5TLCB7IHVzZUNsYXNzOiBrZXlfZXZlbnRzXzEuS2V5RXZlbnRzUGx1Z2luLCBtdWx0aTogdHJ1ZSB9KSxcclxuICAgICAgICBuZXcgZGlfMS5Qcm92aWRlcihldmVudF9tYW5hZ2VyXzEuRVZFTlRfTUFOQUdFUl9QTFVHSU5TLCB7IHVzZUNsYXNzOiBoYW1tZXJfZ2VzdHVyZXNfMS5IYW1tZXJHZXN0dXJlc1BsdWdpbiwgbXVsdGk6IHRydWUgfSksXHJcbiAgICAgICAgZGlfMS5wcm92aWRlKHJlbmRlcl8xLkRvbVJlbmRlcmVyLCB7IHVzZUNsYXNzOiByZW5kZXJfMS5Eb21SZW5kZXJlcl8gfSksXHJcbiAgICAgICAgZGlfMS5wcm92aWRlKGFwaV8xLlJlbmRlcmVyLCB7IHVzZUV4aXN0aW5nOiByZW5kZXJfMS5Eb21SZW5kZXJlciB9KSxcclxuICAgICAgICBzaGFyZWRfc3R5bGVzX2hvc3RfMS5Eb21TaGFyZWRTdHlsZXNIb3N0LFxyXG4gICAgICAgIGRpXzEucHJvdmlkZShzaGFyZWRfc3R5bGVzX2hvc3RfMS5TaGFyZWRTdHlsZXNIb3N0LCB7IHVzZUV4aXN0aW5nOiBzaGFyZWRfc3R5bGVzX2hvc3RfMS5Eb21TaGFyZWRTdHlsZXNIb3N0IH0pLFxyXG4gICAgICAgIHBsYXRmb3JtX2JpbmRpbmdzXzEuRVhDRVBUSU9OX1BST1ZJREVSLFxyXG4gICAgICAgIGRpXzEucHJvdmlkZSh4aHJfMS5YSFIsIHsgdXNlVmFsdWU6IG5ldyB4aHJfaW1wbF8xLlhIUkltcGwoKSB9KSxcclxuICAgICAgICB0ZXN0YWJpbGl0eV8xLlRlc3RhYmlsaXR5LFxyXG4gICAgICAgIGJyb3dzZXJfZGV0YWlsc18xLkJyb3dzZXJEZXRhaWxzLFxyXG4gICAgICAgIGFuaW1hdGlvbl9idWlsZGVyXzEuQW5pbWF0aW9uQnVpbGRlcixcclxuICAgICAgICBmb3Jtc18xLkZPUk1fUFJPVklERVJTXHJcbiAgICBdO1xyXG59XHJcbmV4cG9ydHMuYXBwbGljYXRpb25Eb21CaW5kaW5ncyA9IGFwcGxpY2F0aW9uRG9tQmluZGluZ3M7XHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIHRoZSBBbmd1bGFyICdwbGF0Zm9ybScgb24gdGhlIHBhZ2UuXHJcbiAqXHJcbiAqIFNlZSB7QGxpbmsgUGxhdGZvcm1SZWZ9IGZvciBkZXRhaWxzIG9uIHRoZSBBbmd1bGFyIHBsYXRmb3JtLlxyXG4gKlxyXG4gKiAjIFdpdGhvdXQgc3BlY2lmaWVkIHByb3ZpZGVyc1xyXG4gKlxyXG4gKiBJZiBubyBwcm92aWRlcnMgYXJlIHNwZWNpZmllZCwgYHBsYXRmb3JtYCdzIGJlaGF2aW9yIGRlcGVuZHMgb24gd2hldGhlciBhbiBleGlzdGluZ1xyXG4gKiBwbGF0Zm9ybSBleGlzdHM6XHJcbiAqXHJcbiAqIElmIG5vIHBsYXRmb3JtIGV4aXN0cywgYSBuZXcgb25lIHdpbGwgYmUgY3JlYXRlZCB3aXRoIHRoZSBkZWZhdWx0IHtAbGluayBwbGF0Zm9ybUJpbmRpbmdzfS5cclxuICpcclxuICogSWYgYSBwbGF0Zm9ybSBhbHJlYWR5IGV4aXN0cywgaXQgd2lsbCBiZSByZXR1cm5lZCAocmVnYXJkbGVzcyBvZiB3aGF0IHByb3ZpZGVycyBpdFxyXG4gKiB3YXMgY3JlYXRlZCB3aXRoKS4gVGhpcyBpcyBhIGNvbnZlbmllbmNlIGZlYXR1cmUsIGFsbG93aW5nIGZvciBtdWx0aXBsZSBhcHBsaWNhdGlvbnNcclxuICogdG8gYmUgbG9hZGVkIGludG8gdGhlIHNhbWUgcGxhdGZvcm0gd2l0aG91dCBhd2FyZW5lc3Mgb2YgZWFjaCBvdGhlci5cclxuICpcclxuICogIyBXaXRoIHNwZWNpZmllZCBwcm92aWRlcnNcclxuICpcclxuICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBzcGVjaWZ5IHByb3ZpZGVycyB0byBiZSBtYWRlIGluIHRoZSBuZXcgcGxhdGZvcm0uIFRoZXNlIHByb3ZpZGVyc1xyXG4gKiB3aWxsIGJlIHNoYXJlZCBiZXR3ZWVuIGFsbCBhcHBsaWNhdGlvbnMgb24gdGhlIHBhZ2UuIEZvciBleGFtcGxlLCBhbiBhYnN0cmFjdGlvbiBmb3JcclxuICogdGhlIGJyb3dzZXIgY29va2llIGphciBzaG91bGQgYmUgYm91bmQgYXQgdGhlIHBsYXRmb3JtIGxldmVsLCBiZWNhdXNlIHRoZXJlIGlzIG9ubHkgb25lXHJcbiAqIGNvb2tpZSBqYXIgcmVnYXJkbGVzcyBvZiBob3cgbWFueSBhcHBsaWNhdGlvbnMgb24gdGhlIGFnZSB3aWxsIGJlIGFjY2Vzc2luZyBpdC5cclxuICpcclxuICogSWYgcHJvdmlkZXJzIGFyZSBzcGVjaWZpZWQgZGlyZWN0bHksIGBwbGF0Zm9ybWAgd2lsbCBjcmVhdGUgdGhlIEFuZ3VsYXIgcGxhdGZvcm0gd2l0aFxyXG4gKiB0aGVtIGlmIGEgcGxhdGZvcm0gZGlkIG5vdCBleGlzdCBhbHJlYWR5LiBJZiBpdCBkaWQgZXhpc3QsIGhvd2V2ZXIsIGFuIGVycm9yIHdpbGwgYmVcclxuICogdGhyb3duLlxyXG4gKlxyXG4gKiAjIERPTSBBcHBsaWNhdGlvbnNcclxuICpcclxuICogVGhpcyB2ZXJzaW9uIG9mIGBwbGF0Zm9ybWAgaW5pdGlhbGl6ZXMgQW5ndWxhciB0byBydW4gaW4gdGhlIFVJIHRocmVhZCwgd2l0aCBkaXJlY3RcclxuICogRE9NIGFjY2Vzcy4gV2ViLXdvcmtlciBhcHBsaWNhdGlvbnMgc2hvdWxkIGNhbGwgYHBsYXRmb3JtYCBmcm9tXHJcbiAqIGBzcmMvd2ViX3dvcmtlcnMvd29ya2VyL2FwcGxpY2F0aW9uX2NvbW1vbmAgaW5zdGVhZC5cclxuICovXHJcbmZ1bmN0aW9uIHBsYXRmb3JtKGJpbmRpbmdzKSB7XHJcbiAgICByZXR1cm4gYXBwbGljYXRpb25fcmVmXzEucGxhdGZvcm1Db21tb24oYmluZGluZ3MsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBicm93c2VyX2FkYXB0ZXJfMS5Ccm93c2VyRG9tQWRhcHRlci5tYWtlQ3VycmVudCgpO1xyXG4gICAgICAgIHd0Zl9pbml0XzEud3RmSW5pdCgpO1xyXG4gICAgICAgIGJyb3dzZXJfdGVzdGFiaWxpdHlfMS5Ccm93c2VyR2V0VGVzdGFiaWxpdHkuaW5pdCgpO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5wbGF0Zm9ybSA9IHBsYXRmb3JtO1xyXG4vKipcclxuICogQm9vdHN0cmFwcGluZyBmb3IgQW5ndWxhciBhcHBsaWNhdGlvbnMuXHJcbiAqXHJcbiAqIFlvdSBpbnN0YW50aWF0ZSBhbiBBbmd1bGFyIGFwcGxpY2F0aW9uIGJ5IGV4cGxpY2l0bHkgc3BlY2lmeWluZyBhIGNvbXBvbmVudCB0byB1c2VcclxuICogYXMgdGhlIHJvb3QgY29tcG9uZW50IGZvciB5b3VyIGFwcGxpY2F0aW9uIHZpYSB0aGUgYGJvb3RzdHJhcCgpYCBtZXRob2QuXHJcbiAqXHJcbiAqICMjIFNpbXBsZSBFeGFtcGxlXHJcbiAqXHJcbiAqIEFzc3VtaW5nIHRoaXMgYGluZGV4Lmh0bWxgOlxyXG4gKlxyXG4gKiBgYGBodG1sXHJcbiAqIDxodG1sPlxyXG4gKiAgIDwhLS0gbG9hZCBBbmd1bGFyIHNjcmlwdCB0YWdzIGhlcmUuIC0tPlxyXG4gKiAgIDxib2R5PlxyXG4gKiAgICAgPG15LWFwcD5sb2FkaW5nLi4uPC9teS1hcHA+XHJcbiAqICAgPC9ib2R5PlxyXG4gKiA8L2h0bWw+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBBbiBhcHBsaWNhdGlvbiBpcyBib290c3RyYXBwZWQgaW5zaWRlIGFuIGV4aXN0aW5nIGJyb3dzZXIgRE9NLCB0eXBpY2FsbHkgYGluZGV4Lmh0bWxgLlxyXG4gKiBVbmxpa2UgQW5ndWxhciAxLCBBbmd1bGFyIDIgZG9lcyBub3QgY29tcGlsZS9wcm9jZXNzIHByb3ZpZGVycyBpbiBgaW5kZXguaHRtbGAuIFRoaXMgaXNcclxuICogbWFpbmx5IGZvciBzZWN1cml0eSByZWFzb25zLCBhcyB3ZWxsIGFzIGFyY2hpdGVjdHVyYWwgY2hhbmdlcyBpbiBBbmd1bGFyIDIuIFRoaXMgbWVhbnNcclxuICogdGhhdCBgaW5kZXguaHRtbGAgY2FuIHNhZmVseSBiZSBwcm9jZXNzZWQgdXNpbmcgc2VydmVyLXNpZGUgdGVjaG5vbG9naWVzIHN1Y2ggYXNcclxuICogcHJvdmlkZXJzLiBCaW5kaW5ncyBjYW4gdGh1cyB1c2UgZG91YmxlLWN1cmx5IGB7eyBzeW50YXggfX1gIHdpdGhvdXQgY29sbGlzaW9uIGZyb21cclxuICogQW5ndWxhciAyIGNvbXBvbmVudCBkb3VibGUtY3VybHkgYHt7IHN5bnRheCB9fWAuXHJcbiAqXHJcbiAqIFdlIGNhbiB1c2UgdGhpcyBzY3JpcHQgY29kZTpcclxuICpcclxuICogYGBgXHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgICBzZWxlY3RvcjogJ215LWFwcCcsXHJcbiAqICAgIHRlbXBsYXRlOiAnSGVsbG8ge3sgbmFtZSB9fSEnXHJcbiAqIH0pXHJcbiAqIGNsYXNzIE15QXBwIHtcclxuICogICBuYW1lOnN0cmluZztcclxuICpcclxuICogICBjb25zdHJ1Y3RvcigpIHtcclxuICogICAgIHRoaXMubmFtZSA9ICdXb3JsZCc7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqXHJcbiAqIG1haW4oKSB7XHJcbiAqICAgcmV0dXJuIGJvb3RzdHJhcChNeUFwcCk7XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIFdoZW4gdGhlIGFwcCBkZXZlbG9wZXIgaW52b2tlcyBgYm9vdHN0cmFwKClgIHdpdGggdGhlIHJvb3QgY29tcG9uZW50IGBNeUFwcGAgYXMgaXRzXHJcbiAqIGFyZ3VtZW50LCBBbmd1bGFyIHBlcmZvcm1zIHRoZSBmb2xsb3dpbmcgdGFza3M6XHJcbiAqXHJcbiAqICAxLiBJdCB1c2VzIHRoZSBjb21wb25lbnQncyBgc2VsZWN0b3JgIHByb3BlcnR5IHRvIGxvY2F0ZSB0aGUgRE9NIGVsZW1lbnQgd2hpY2ggbmVlZHNcclxuICogICAgIHRvIGJlIHVwZ3JhZGVkIGludG8gdGhlIGFuZ3VsYXIgY29tcG9uZW50LlxyXG4gKiAgMi4gSXQgY3JlYXRlcyBhIG5ldyBjaGlsZCBpbmplY3RvciAoZnJvbSB0aGUgcGxhdGZvcm0gaW5qZWN0b3IpLiBPcHRpb25hbGx5LCB5b3UgY2FuXHJcbiAqICAgICBhbHNvIG92ZXJyaWRlIHRoZSBpbmplY3RvciBjb25maWd1cmF0aW9uIGZvciBhbiBhcHAgYnkgaW52b2tpbmcgYGJvb3RzdHJhcGAgd2l0aCB0aGVcclxuICogICAgIGBjb21wb25lbnRJbmplY3RhYmxlQmluZGluZ3NgIGFyZ3VtZW50LlxyXG4gKiAgMy4gSXQgY3JlYXRlcyBhIG5ldyBgWm9uZWAgYW5kIGNvbm5lY3RzIGl0IHRvIHRoZSBhbmd1bGFyIGFwcGxpY2F0aW9uJ3MgY2hhbmdlIGRldGVjdGlvblxyXG4gKiAgICAgZG9tYWluIGluc3RhbmNlLlxyXG4gKiAgNC4gSXQgY3JlYXRlcyBhIHNoYWRvdyBET00gb24gdGhlIHNlbGVjdGVkIGNvbXBvbmVudCdzIGhvc3QgZWxlbWVudCBhbmQgbG9hZHMgdGhlXHJcbiAqICAgICB0ZW1wbGF0ZSBpbnRvIGl0LlxyXG4gKiAgNS4gSXQgaW5zdGFudGlhdGVzIHRoZSBzcGVjaWZpZWQgY29tcG9uZW50LlxyXG4gKiAgNi4gRmluYWxseSwgQW5ndWxhciBwZXJmb3JtcyBjaGFuZ2UgZGV0ZWN0aW9uIHRvIGFwcGx5IHRoZSBpbml0aWFsIGRhdGEgcHJvdmlkZXJzIGZvciB0aGVcclxuICogICAgIGFwcGxpY2F0aW9uLlxyXG4gKlxyXG4gKlxyXG4gKiAjIyBJbnN0YW50aWF0aW5nIE11bHRpcGxlIEFwcGxpY2F0aW9ucyBvbiBhIFNpbmdsZSBQYWdlXHJcbiAqXHJcbiAqIFRoZXJlIGFyZSB0d28gd2F5cyB0byBkbyB0aGlzLlxyXG4gKlxyXG4gKiAjIyMgSXNvbGF0ZWQgQXBwbGljYXRpb25zXHJcbiAqXHJcbiAqIEFuZ3VsYXIgY3JlYXRlcyBhIG5ldyBhcHBsaWNhdGlvbiBlYWNoIHRpbWUgdGhhdCB0aGUgYGJvb3RzdHJhcCgpYCBtZXRob2QgaXMgaW52b2tlZC5cclxuICogV2hlbiBtdWx0aXBsZSBhcHBsaWNhdGlvbnMgYXJlIGNyZWF0ZWQgZm9yIGEgcGFnZSwgQW5ndWxhciB0cmVhdHMgZWFjaCBhcHBsaWNhdGlvbiBhc1xyXG4gKiBpbmRlcGVuZGVudCB3aXRoaW4gYW4gaXNvbGF0ZWQgY2hhbmdlIGRldGVjdGlvbiBhbmQgYFpvbmVgIGRvbWFpbi4gSWYgeW91IG5lZWQgdG8gc2hhcmVcclxuICogZGF0YSBiZXR3ZWVuIGFwcGxpY2F0aW9ucywgdXNlIHRoZSBzdHJhdGVneSBkZXNjcmliZWQgaW4gdGhlIG5leHQgc2VjdGlvbiwgXCJBcHBsaWNhdGlvbnNcclxuICogVGhhdCBTaGFyZSBDaGFuZ2UgRGV0ZWN0aW9uLlwiXHJcbiAqXHJcbiAqXHJcbiAqICMjIyBBcHBsaWNhdGlvbnMgVGhhdCBTaGFyZSBDaGFuZ2UgRGV0ZWN0aW9uXHJcbiAqXHJcbiAqIElmIHlvdSBuZWVkIHRvIGJvb3RzdHJhcCBtdWx0aXBsZSBhcHBsaWNhdGlvbnMgdGhhdCBzaGFyZSBjb21tb24gZGF0YSwgdGhlIGFwcGxpY2F0aW9uc1xyXG4gKiBtdXN0IHNoYXJlIGEgY29tbW9uIGNoYW5nZSBkZXRlY3Rpb24gYW5kIHpvbmUuIFRvIGRvIHRoYXQsIGNyZWF0ZSBhIG1ldGEtY29tcG9uZW50IHRoYXRcclxuICogbGlzdHMgdGhlIGFwcGxpY2F0aW9uIGNvbXBvbmVudHMgaW4gaXRzIHRlbXBsYXRlLlxyXG4gKlxyXG4gKiBCeSBvbmx5IGludm9raW5nIHRoZSBgYm9vdHN0cmFwKClgIG1ldGhvZCBvbmNlLCB3aXRoIHRoZSBtZXRhLWNvbXBvbmVudCBhcyBpdHMgYXJndW1lbnQsXHJcbiAqIHlvdSBlbnN1cmUgdGhhdCBvbmx5IGEgc2luZ2xlIGNoYW5nZSBkZXRlY3Rpb24gem9uZSBpcyBjcmVhdGVkIGFuZCB0aGVyZWZvcmUgZGF0YSBjYW4gYmVcclxuICogc2hhcmVkIGFjcm9zcyB0aGUgYXBwbGljYXRpb25zLlxyXG4gKlxyXG4gKlxyXG4gKiAjIyBQbGF0Zm9ybSBJbmplY3RvclxyXG4gKlxyXG4gKiBXaGVuIHdvcmtpbmcgd2l0aGluIGEgYnJvd3NlciB3aW5kb3csIHRoZXJlIGFyZSBtYW55IHNpbmdsZXRvbiByZXNvdXJjZXM6IGNvb2tpZXMsIHRpdGxlLFxyXG4gKiBsb2NhdGlvbiwgYW5kIG90aGVycy4gQW5ndWxhciBzZXJ2aWNlcyB0aGF0IHJlcHJlc2VudCB0aGVzZSByZXNvdXJjZXMgbXVzdCBsaWtld2lzZSBiZVxyXG4gKiBzaGFyZWQgYWNyb3NzIGFsbCBBbmd1bGFyIGFwcGxpY2F0aW9ucyB0aGF0IG9jY3VweSB0aGUgc2FtZSBicm93c2VyIHdpbmRvdy4gRm9yIHRoaXNcclxuICogcmVhc29uLCBBbmd1bGFyIGNyZWF0ZXMgZXhhY3RseSBvbmUgZ2xvYmFsIHBsYXRmb3JtIGluamVjdG9yIHdoaWNoIHN0b3JlcyBhbGwgc2hhcmVkXHJcbiAqIHNlcnZpY2VzLCBhbmQgZWFjaCBhbmd1bGFyIGFwcGxpY2F0aW9uIGluamVjdG9yIGhhcyB0aGUgcGxhdGZvcm0gaW5qZWN0b3IgYXMgaXRzIHBhcmVudC5cclxuICpcclxuICogRWFjaCBhcHBsaWNhdGlvbiBoYXMgaXRzIG93biBwcml2YXRlIGluamVjdG9yIGFzIHdlbGwuIFdoZW4gdGhlcmUgYXJlIG11bHRpcGxlXHJcbiAqIGFwcGxpY2F0aW9ucyBvbiBhIHBhZ2UsIEFuZ3VsYXIgdHJlYXRzIGVhY2ggYXBwbGljYXRpb24gaW5qZWN0b3IncyBzZXJ2aWNlcyBhcyBwcml2YXRlXHJcbiAqIHRvIHRoYXQgYXBwbGljYXRpb24uXHJcbiAqXHJcbiAqXHJcbiAqICMgQVBJXHJcbiAqIC0gYGFwcENvbXBvbmVudFR5cGVgOiBUaGUgcm9vdCBjb21wb25lbnQgd2hpY2ggc2hvdWxkIGFjdCBhcyB0aGUgYXBwbGljYXRpb24uIFRoaXMgaXNcclxuICogICBhIHJlZmVyZW5jZSB0byBhIGBUeXBlYCB3aGljaCBpcyBhbm5vdGF0ZWQgd2l0aCBgQENvbXBvbmVudCguLi4pYC5cclxuICogLSBgY29tcG9uZW50SW5qZWN0YWJsZUJpbmRpbmdzYDogQW4gYWRkaXRpb25hbCBzZXQgb2YgcHJvdmlkZXJzIHRoYXQgY2FuIGJlIGFkZGVkIHRvIHRoZVxyXG4gKiAgIGFwcCBpbmplY3RvciB0byBvdmVycmlkZSBkZWZhdWx0IGluamVjdGlvbiBiZWhhdmlvci5cclxuICogLSBgZXJyb3JSZXBvcnRlcmA6IGBmdW5jdGlvbihleGNlcHRpb246YW55LCBzdGFja1RyYWNlOnN0cmluZylgIGEgZGVmYXVsdCBlcnJvciByZXBvcnRlclxyXG4gKiAgIGZvciB1bmhhbmRsZWQgZXhjZXB0aW9ucy5cclxuICpcclxuICogUmV0dXJucyBhIGBQcm9taXNlYCBvZiB7QGxpbmsgQ29tcG9uZW50UmVmfS5cclxuICovXHJcbmZ1bmN0aW9uIGNvbW1vbkJvb3RzdHJhcChhcHBDb21wb25lbnRUeXBlLCBhcHBCaW5kaW5ncykge1xyXG4gICAgaWYgKGFwcEJpbmRpbmdzID09PSB2b2lkIDApIHsgYXBwQmluZGluZ3MgPSBudWxsOyB9XHJcbiAgICB2YXIgcCA9IHBsYXRmb3JtKCk7XHJcbiAgICB2YXIgYmluZGluZ3MgPSBbYXBwbGljYXRpb25fcmVmXzEuYXBwbGljYXRpb25Db21tb25CaW5kaW5ncygpLCBhcHBsaWNhdGlvbkRvbUJpbmRpbmdzKCldO1xyXG4gICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoYXBwQmluZGluZ3MpKSB7XHJcbiAgICAgICAgYmluZGluZ3MucHVzaChhcHBCaW5kaW5ncyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcC5hcHBsaWNhdGlvbihiaW5kaW5ncykuYm9vdHN0cmFwKGFwcENvbXBvbmVudFR5cGUpO1xyXG59XHJcbmV4cG9ydHMuY29tbW9uQm9vdHN0cmFwID0gY29tbW9uQm9vdHN0cmFwO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHBsaWNhdGlvbl9jb21tb24uanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBuZ196b25lXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS96b25lL25nX3pvbmUnKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIGFwcGxpY2F0aW9uX3Rva2Vuc18xID0gcmVxdWlyZSgnLi9hcHBsaWNhdGlvbl90b2tlbnMnKTtcclxudmFyIGFzeW5jXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvYXN5bmMnKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciByZWZsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9yZWZsZWN0aW9uL3JlZmxlY3Rpb24nKTtcclxudmFyIHRlc3RhYmlsaXR5XzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS90ZXN0YWJpbGl0eS90ZXN0YWJpbGl0eScpO1xyXG52YXIgZHluYW1pY19jb21wb25lbnRfbG9hZGVyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvZHluYW1pY19jb21wb25lbnRfbG9hZGVyJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgZG9tX2FkYXB0ZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RvbS9kb21fYWRhcHRlcicpO1xyXG52YXIgdmlld19yZWZfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci92aWV3X3JlZicpO1xyXG52YXIgbGlmZV9jeWNsZV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbGlmZV9jeWNsZS9saWZlX2N5Y2xlJyk7XHJcbnZhciBjaGFuZ2VfZGV0ZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uL2NoYW5nZV9kZXRlY3Rpb24nKTtcclxudmFyIHZpZXdfcG9vbF8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL3ZpZXdfcG9vbCcpO1xyXG52YXIgdmlld19tYW5hZ2VyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvdmlld19tYW5hZ2VyJyk7XHJcbnZhciB2aWV3X21hbmFnZXJfdXRpbHNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci92aWV3X21hbmFnZXJfdXRpbHMnKTtcclxudmFyIHZpZXdfbGlzdGVuZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci92aWV3X2xpc3RlbmVyJyk7XHJcbnZhciBwcm90b192aWV3X2ZhY3RvcnlfMSA9IHJlcXVpcmUoJy4vbGlua2VyL3Byb3RvX3ZpZXdfZmFjdG9yeScpO1xyXG52YXIgcGlwZXNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL3BpcGVzJyk7XHJcbnZhciB2aWV3X3Jlc29sdmVyXzEgPSByZXF1aXJlKCcuL2xpbmtlci92aWV3X3Jlc29sdmVyJyk7XHJcbnZhciBkaXJlY3RpdmVfcmVzb2x2ZXJfMSA9IHJlcXVpcmUoJy4vbGlua2VyL2RpcmVjdGl2ZV9yZXNvbHZlcicpO1xyXG52YXIgcGlwZV9yZXNvbHZlcl8xID0gcmVxdWlyZSgnLi9saW5rZXIvcGlwZV9yZXNvbHZlcicpO1xyXG52YXIgY29tcGlsZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci9jb21waWxlcicpO1xyXG52YXIgZHluYW1pY19jb21wb25lbnRfbG9hZGVyXzIgPSByZXF1aXJlKFwiLi9saW5rZXIvZHluYW1pY19jb21wb25lbnRfbG9hZGVyXCIpO1xyXG52YXIgdmlld19tYW5hZ2VyXzIgPSByZXF1aXJlKFwiLi9saW5rZXIvdmlld19tYW5hZ2VyXCIpO1xyXG52YXIgY29tcGlsZXJfMiA9IHJlcXVpcmUoXCIuL2xpbmtlci9jb21waWxlclwiKTtcclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgdGhlIHNldCBvZiBwcm92aWRlcnMgbWVhbnQgZm9yIHVzZSBhdCB0aGUgcGxhdGZvcm0gbGV2ZWwuXHJcbiAqXHJcbiAqIFRoZXNlIGFyZSBwcm92aWRlcnMgdGhhdCBzaG91bGQgYmUgc2luZ2xldG9ucyBzaGFyZWQgYW1vbmcgYWxsIEFuZ3VsYXIgYXBwbGljYXRpb25zXHJcbiAqIHJ1bm5pbmcgb24gdGhlIHBhZ2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBwbGF0Zm9ybUJpbmRpbmdzKCkge1xyXG4gICAgcmV0dXJuIFtkaV8xLnByb3ZpZGUocmVmbGVjdGlvbl8xLlJlZmxlY3RvciwgeyB1c2VWYWx1ZTogcmVmbGVjdGlvbl8xLnJlZmxlY3RvciB9KSwgdGVzdGFiaWxpdHlfMS5UZXN0YWJpbGl0eVJlZ2lzdHJ5XTtcclxufVxyXG5leHBvcnRzLnBsYXRmb3JtQmluZGluZ3MgPSBwbGF0Zm9ybUJpbmRpbmdzO1xyXG4vKipcclxuICogQ29uc3RydWN0IHByb3ZpZGVycyBzcGVjaWZpYyB0byBhbiBpbmRpdmlkdWFsIHJvb3QgY29tcG9uZW50LlxyXG4gKi9cclxuZnVuY3Rpb24gX2NvbXBvbmVudFByb3ZpZGVycyhhcHBDb21wb25lbnRUeXBlKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIGRpXzEucHJvdmlkZShhcHBsaWNhdGlvbl90b2tlbnNfMS5BUFBfQ09NUE9ORU5ULCB7IHVzZVZhbHVlOiBhcHBDb21wb25lbnRUeXBlIH0pLFxyXG4gICAgICAgIGRpXzEucHJvdmlkZShhcHBsaWNhdGlvbl90b2tlbnNfMS5BUFBfQ09NUE9ORU5UX1JFRl9QUk9NSVNFLCB7XHJcbiAgICAgICAgICAgIHVzZUZhY3Rvcnk6IGZ1bmN0aW9uIChkeW5hbWljQ29tcG9uZW50TG9hZGVyLCBpbmplY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhyYWRvKTogaW52ZXN0aWdhdGUgd2hldGhlciB0byBzdXBwb3J0IGJpbmRpbmdzIG9uIHJvb3QgY29tcG9uZW50LlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGR5bmFtaWNDb21wb25lbnRMb2FkZXIubG9hZEFzUm9vdChhcHBDb21wb25lbnRUeXBlLCBudWxsLCBpbmplY3RvcilcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY29tcG9uZW50UmVmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoY29tcG9uZW50UmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluamVjdG9yLmdldCh0ZXN0YWJpbGl0eV8xLlRlc3RhYmlsaXR5UmVnaXN0cnkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVnaXN0ZXJBcHBsaWNhdGlvbihjb21wb25lbnRSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudCwgaW5qZWN0b3IuZ2V0KHRlc3RhYmlsaXR5XzEuVGVzdGFiaWxpdHkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudFJlZjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZXBzOiBbZHluYW1pY19jb21wb25lbnRfbG9hZGVyXzEuRHluYW1pY0NvbXBvbmVudExvYWRlciwgZGlfMS5JbmplY3Rvcl1cclxuICAgICAgICB9KSxcclxuICAgICAgICBkaV8xLnByb3ZpZGUoYXBwQ29tcG9uZW50VHlwZSwge1xyXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBmdW5jdGlvbiAocCkgeyByZXR1cm4gcC50aGVuKGZ1bmN0aW9uIChyZWYpIHsgcmV0dXJuIHJlZi5pbnN0YW5jZTsgfSk7IH0sXHJcbiAgICAgICAgICAgIGRlcHM6IFthcHBsaWNhdGlvbl90b2tlbnNfMS5BUFBfQ09NUE9ORU5UX1JFRl9QUk9NSVNFXVxyXG4gICAgICAgIH0pLFxyXG4gICAgXTtcclxufVxyXG4vKipcclxuICogQ29uc3RydWN0IGEgZGVmYXVsdCBzZXQgb2YgcHJvdmlkZXJzIHdoaWNoIHNob3VsZCBiZSBpbmNsdWRlZCBpbiBhbnkgQW5ndWxhclxyXG4gKiBhcHBsaWNhdGlvbiwgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIGl0IHJ1bnMgb24gdGhlIFVJIHRocmVhZCBvciBpbiBhIHdlYiB3b3JrZXIuXHJcbiAqL1xyXG5mdW5jdGlvbiBhcHBsaWNhdGlvbkNvbW1vbkJpbmRpbmdzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICBkaV8xLnByb3ZpZGUoY29tcGlsZXJfMS5Db21waWxlciwgeyB1c2VDbGFzczogY29tcGlsZXJfMi5Db21waWxlcl8gfSksXHJcbiAgICAgICAgYXBwbGljYXRpb25fdG9rZW5zXzEuQVBQX0lEX1JBTkRPTV9QUk9WSURFUixcclxuICAgICAgICB2aWV3X3Bvb2xfMS5BcHBWaWV3UG9vbCxcclxuICAgICAgICBkaV8xLnByb3ZpZGUodmlld19wb29sXzEuQVBQX1ZJRVdfUE9PTF9DQVBBQ0lUWSwgeyB1c2VWYWx1ZTogMTAwMDAgfSksXHJcbiAgICAgICAgZGlfMS5wcm92aWRlKHZpZXdfbWFuYWdlcl8xLkFwcFZpZXdNYW5hZ2VyLCB7IHVzZUNsYXNzOiB2aWV3X21hbmFnZXJfMi5BcHBWaWV3TWFuYWdlcl8gfSksXHJcbiAgICAgICAgdmlld19tYW5hZ2VyX3V0aWxzXzEuQXBwVmlld01hbmFnZXJVdGlscyxcclxuICAgICAgICB2aWV3X2xpc3RlbmVyXzEuQXBwVmlld0xpc3RlbmVyLFxyXG4gICAgICAgIHByb3RvX3ZpZXdfZmFjdG9yeV8xLlByb3RvVmlld0ZhY3RvcnksXHJcbiAgICAgICAgdmlld19yZXNvbHZlcl8xLlZpZXdSZXNvbHZlcixcclxuICAgICAgICBwaXBlc18xLkRFRkFVTFRfUElQRVMsXHJcbiAgICAgICAgZGlfMS5wcm92aWRlKGNoYW5nZV9kZXRlY3Rpb25fMS5JdGVyYWJsZURpZmZlcnMsIHsgdXNlVmFsdWU6IGNoYW5nZV9kZXRlY3Rpb25fMS5kZWZhdWx0SXRlcmFibGVEaWZmZXJzIH0pLFxyXG4gICAgICAgIGRpXzEucHJvdmlkZShjaGFuZ2VfZGV0ZWN0aW9uXzEuS2V5VmFsdWVEaWZmZXJzLCB7IHVzZVZhbHVlOiBjaGFuZ2VfZGV0ZWN0aW9uXzEuZGVmYXVsdEtleVZhbHVlRGlmZmVycyB9KSxcclxuICAgICAgICBkaXJlY3RpdmVfcmVzb2x2ZXJfMS5EaXJlY3RpdmVSZXNvbHZlcixcclxuICAgICAgICBwaXBlX3Jlc29sdmVyXzEuUGlwZVJlc29sdmVyLFxyXG4gICAgICAgIGRpXzEucHJvdmlkZShkeW5hbWljX2NvbXBvbmVudF9sb2FkZXJfMS5EeW5hbWljQ29tcG9uZW50TG9hZGVyLCB7IHVzZUNsYXNzOiBkeW5hbWljX2NvbXBvbmVudF9sb2FkZXJfMi5EeW5hbWljQ29tcG9uZW50TG9hZGVyXyB9KSxcclxuICAgICAgICBkaV8xLnByb3ZpZGUobGlmZV9jeWNsZV8xLkxpZmVDeWNsZSwge1xyXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBmdW5jdGlvbiAoZXhjZXB0aW9uSGFuZGxlcikgeyByZXR1cm4gbmV3IGxpZmVfY3ljbGVfMS5MaWZlQ3ljbGVfKG51bGwsIGxhbmdfMS5hc3NlcnRpb25zRW5hYmxlZCgpKTsgfSxcclxuICAgICAgICAgICAgZGVwczogW2V4Y2VwdGlvbnNfMS5FeGNlcHRpb25IYW5kbGVyXVxyXG4gICAgICAgIH0pXHJcbiAgICBdO1xyXG59XHJcbmV4cG9ydHMuYXBwbGljYXRpb25Db21tb25CaW5kaW5ncyA9IGFwcGxpY2F0aW9uQ29tbW9uQmluZGluZ3M7XHJcbi8qKlxyXG4gKiBDcmVhdGUgYW4gQW5ndWxhciB6b25lLlxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlTmdab25lKCkge1xyXG4gICAgcmV0dXJuIG5ldyBuZ196b25lXzEuTmdab25lKHsgZW5hYmxlTG9uZ1N0YWNrVHJhY2U6IGxhbmdfMS5hc3NlcnRpb25zRW5hYmxlZCgpIH0pO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlTmdab25lID0gY3JlYXRlTmdab25lO1xyXG52YXIgX3BsYXRmb3JtO1xyXG5mdW5jdGlvbiBwbGF0Zm9ybUNvbW1vbihiaW5kaW5ncywgaW5pdGlhbGl6ZXIpIHtcclxuICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KF9wbGF0Zm9ybSkpIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoYmluZGluZ3MpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfcGxhdGZvcm07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IFwicGxhdGZvcm0oKSBjYW4gb25seSBiZSBjYWxsZWQgb25jZSBwZXIgcGFnZVwiO1xyXG4gICAgfVxyXG4gICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoaW5pdGlhbGl6ZXIpKSB7XHJcbiAgICAgICAgaW5pdGlhbGl6ZXIoKTtcclxuICAgIH1cclxuICAgIGlmIChsYW5nXzEuaXNCbGFuayhiaW5kaW5ncykpIHtcclxuICAgICAgICBiaW5kaW5ncyA9IHBsYXRmb3JtQmluZGluZ3MoKTtcclxuICAgIH1cclxuICAgIF9wbGF0Zm9ybSA9IG5ldyBQbGF0Zm9ybVJlZl8oZGlfMS5JbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKGJpbmRpbmdzKSwgZnVuY3Rpb24gKCkgeyBfcGxhdGZvcm0gPSBudWxsOyB9KTtcclxuICAgIHJldHVybiBfcGxhdGZvcm07XHJcbn1cclxuZXhwb3J0cy5wbGF0Zm9ybUNvbW1vbiA9IHBsYXRmb3JtQ29tbW9uO1xyXG4vKipcclxuICogVGhlIEFuZ3VsYXIgcGxhdGZvcm0gaXMgdGhlIGVudHJ5IHBvaW50IGZvciBBbmd1bGFyIG9uIGEgd2ViIHBhZ2UuIEVhY2ggcGFnZVxyXG4gKiBoYXMgZXhhY3RseSBvbmUgcGxhdGZvcm0sIGFuZCBzZXJ2aWNlcyAoc3VjaCBhcyByZWZsZWN0aW9uKSB3aGljaCBhcmUgY29tbW9uXHJcbiAqIHRvIGV2ZXJ5IEFuZ3VsYXIgYXBwbGljYXRpb24gcnVubmluZyBvbiB0aGUgcGFnZSBhcmUgYm91bmQgaW4gaXRzIHNjb3BlLlxyXG4gKlxyXG4gKiBBIHBhZ2UncyBwbGF0Zm9ybSBpcyBpbml0aWFsaXplZCBpbXBsaWNpdGx5IHdoZW4ge0BsaW5rIGJvb3RzdHJhcH0oKSBpcyBjYWxsZWQsIG9yXHJcbiAqIGV4cGxpY2l0bHkgYnkgY2FsbGluZyB7QGxpbmsgcGxhdGZvcm19KCkuXHJcbiAqL1xyXG52YXIgUGxhdGZvcm1SZWYgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGxhdGZvcm1SZWYoKSB7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUGxhdGZvcm1SZWYucHJvdG90eXBlLCBcImluamVjdG9yXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXRyaWV2ZSB0aGUgcGxhdGZvcm0ge0BsaW5rIEluamVjdG9yfSwgd2hpY2ggaXMgdGhlIHBhcmVudCBpbmplY3RvciBmb3JcclxuICAgICAgICAgKiBldmVyeSBBbmd1bGFyIGFwcGxpY2F0aW9uIG9uIHRoZSBwYWdlIGFuZCBwcm92aWRlcyBzaW5nbGV0b24gcHJvdmlkZXJzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhjZXB0aW9uc18xLnVuaW1wbGVtZW50ZWQoKTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICA7XHJcbiAgICByZXR1cm4gUGxhdGZvcm1SZWY7XHJcbn0pKCk7XHJcbmV4cG9ydHMuUGxhdGZvcm1SZWYgPSBQbGF0Zm9ybVJlZjtcclxudmFyIFBsYXRmb3JtUmVmXyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUGxhdGZvcm1SZWZfLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gUGxhdGZvcm1SZWZfKF9pbmplY3RvciwgX2Rpc3Bvc2UpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLl9pbmplY3RvciA9IF9pbmplY3RvcjtcclxuICAgICAgICB0aGlzLl9kaXNwb3NlID0gX2Rpc3Bvc2U7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX2FwcGxpY2F0aW9ucyA9IFtdO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFBsYXRmb3JtUmVmXy5wcm90b3R5cGUsIFwiaW5qZWN0b3JcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5faW5qZWN0b3I7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgUGxhdGZvcm1SZWZfLnByb3RvdHlwZS5hcHBsaWNhdGlvbiA9IGZ1bmN0aW9uIChiaW5kaW5ncykge1xyXG4gICAgICAgIHZhciBhcHAgPSB0aGlzLl9pbml0QXBwKGNyZWF0ZU5nWm9uZSgpLCBiaW5kaW5ncyk7XHJcbiAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgIH07XHJcbiAgICBQbGF0Zm9ybVJlZl8ucHJvdG90eXBlLmFzeW5jQXBwbGljYXRpb24gPSBmdW5jdGlvbiAoYmluZGluZ0ZuKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgem9uZSA9IGNyZWF0ZU5nWm9uZSgpO1xyXG4gICAgICAgIHZhciBjb21wbGV0ZXIgPSBhc3luY18xLlByb21pc2VXcmFwcGVyLmNvbXBsZXRlcigpO1xyXG4gICAgICAgIHpvbmUucnVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgYXN5bmNfMS5Qcm9taXNlV3JhcHBlci50aGVuKGJpbmRpbmdGbih6b25lKSwgZnVuY3Rpb24gKGJpbmRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZXIucmVzb2x2ZShfdGhpcy5faW5pdEFwcCh6b25lLCBiaW5kaW5ncykpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY29tcGxldGVyLnByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgUGxhdGZvcm1SZWZfLnByb3RvdHlwZS5faW5pdEFwcCA9IGZ1bmN0aW9uICh6b25lLCBwcm92aWRlcnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBpbmplY3RvcjtcclxuICAgICAgICB2YXIgYXBwO1xyXG4gICAgICAgIHpvbmUucnVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcHJvdmlkZXJzLnB1c2goZGlfMS5wcm92aWRlKG5nX3pvbmVfMS5OZ1pvbmUsIHsgdXNlVmFsdWU6IHpvbmUgfSkpO1xyXG4gICAgICAgICAgICBwcm92aWRlcnMucHVzaChkaV8xLnByb3ZpZGUoQXBwbGljYXRpb25SZWYsIHsgdXNlRmFjdG9yeTogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXBwOyB9LCBkZXBzOiBbXSB9KSk7XHJcbiAgICAgICAgICAgIHZhciBleGNlcHRpb25IYW5kbGVyO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaW5qZWN0b3IgPSBfdGhpcy5pbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlQ2hpbGQocHJvdmlkZXJzKTtcclxuICAgICAgICAgICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIgPSBpbmplY3Rvci5nZXQoZXhjZXB0aW9uc18xLkV4Y2VwdGlvbkhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgem9uZS5vdmVycmlkZU9uRXJyb3JIYW5kbGVyKGZ1bmN0aW9uIChlLCBzKSB7IHJldHVybiBleGNlcHRpb25IYW5kbGVyLmNhbGwoZSwgcyk7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChleGNlcHRpb25IYW5kbGVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIuY2FsbChlLCBlLnN0YWNrKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbV9hZGFwdGVyXzEuRE9NLmxvZ0Vycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXBwID0gbmV3IEFwcGxpY2F0aW9uUmVmXyh0aGlzLCB6b25lLCBpbmplY3Rvcik7XHJcbiAgICAgICAgdGhpcy5fYXBwbGljYXRpb25zLnB1c2goYXBwKTtcclxuICAgICAgICByZXR1cm4gYXBwO1xyXG4gICAgfTtcclxuICAgIFBsYXRmb3JtUmVmXy5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9hcHBsaWNhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYXBwKSB7IHJldHVybiBhcHAuZGlzcG9zZSgpOyB9KTtcclxuICAgICAgICB0aGlzLl9kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgUGxhdGZvcm1SZWZfLnByb3RvdHlwZS5fYXBwbGljYXRpb25EaXNwb3NlZCA9IGZ1bmN0aW9uIChhcHApIHsgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLnJlbW92ZSh0aGlzLl9hcHBsaWNhdGlvbnMsIGFwcCk7IH07XHJcbiAgICByZXR1cm4gUGxhdGZvcm1SZWZfO1xyXG59KShQbGF0Zm9ybVJlZik7XHJcbmV4cG9ydHMuUGxhdGZvcm1SZWZfID0gUGxhdGZvcm1SZWZfO1xyXG4vKipcclxuICogQSByZWZlcmVuY2UgdG8gYW4gQW5ndWxhciBhcHBsaWNhdGlvbiBydW5uaW5nIG9uIGEgcGFnZS5cclxuICpcclxuICogRm9yIG1vcmUgYWJvdXQgQW5ndWxhciBhcHBsaWNhdGlvbnMsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3Ige0BsaW5rIGJvb3RzdHJhcH0uXHJcbiAqL1xyXG52YXIgQXBwbGljYXRpb25SZWYgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXBwbGljYXRpb25SZWYoKSB7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXBwbGljYXRpb25SZWYucHJvdG90eXBlLCBcImluamVjdG9yXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXRyaWV2ZSB0aGUgYXBwbGljYXRpb24ge0BsaW5rIEluamVjdG9yfS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4Y2VwdGlvbnNfMS51bmltcGxlbWVudGVkKCk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFwcGxpY2F0aW9uUmVmLnByb3RvdHlwZSwgXCJ6b25lXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXRyaWV2ZSB0aGUgYXBwbGljYXRpb24ge0BsaW5rIE5nWm9uZX0uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleGNlcHRpb25zXzEudW5pbXBsZW1lbnRlZCgpOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIDtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcHBsaWNhdGlvblJlZi5wcm90b3R5cGUsIFwiY29tcG9uZW50VHlwZXNcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldCBhIGxpc3Qgb2YgY29tcG9uZW50IHR5cGVzIHJlZ2lzdGVyZWQgdG8gdGhpcyBhcHBsaWNhdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4Y2VwdGlvbnNfMS51bmltcGxlbWVudGVkKCk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgO1xyXG4gICAgcmV0dXJuIEFwcGxpY2F0aW9uUmVmO1xyXG59KSgpO1xyXG5leHBvcnRzLkFwcGxpY2F0aW9uUmVmID0gQXBwbGljYXRpb25SZWY7XHJcbnZhciBBcHBsaWNhdGlvblJlZl8gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEFwcGxpY2F0aW9uUmVmXywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEFwcGxpY2F0aW9uUmVmXyhfcGxhdGZvcm0sIF96b25lLCBfaW5qZWN0b3IpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLl9wbGF0Zm9ybSA9IF9wbGF0Zm9ybTtcclxuICAgICAgICB0aGlzLl96b25lID0gX3pvbmU7XHJcbiAgICAgICAgdGhpcy5faW5qZWN0b3IgPSBfaW5qZWN0b3I7XHJcbiAgICAgICAgdGhpcy5fYm9vdHN0cmFwTGlzdGVuZXJzID0gW107XHJcbiAgICAgICAgdGhpcy5fcm9vdENvbXBvbmVudHMgPSBbXTtcclxuICAgICAgICB0aGlzLl9yb290Q29tcG9uZW50VHlwZXMgPSBbXTtcclxuICAgIH1cclxuICAgIEFwcGxpY2F0aW9uUmVmXy5wcm90b3R5cGUucmVnaXN0ZXJCb290c3RyYXBMaXN0ZW5lciA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMuX2Jvb3RzdHJhcExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH07XHJcbiAgICBBcHBsaWNhdGlvblJlZl8ucHJvdG90eXBlLmJvb3RzdHJhcCA9IGZ1bmN0aW9uIChjb21wb25lbnRUeXBlLCBwcm92aWRlcnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjb21wbGV0ZXIgPSBhc3luY18xLlByb21pc2VXcmFwcGVyLmNvbXBsZXRlcigpO1xyXG4gICAgICAgIHRoaXMuX3pvbmUucnVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGNvbXBvbmVudFByb3ZpZGVycyA9IF9jb21wb25lbnRQcm92aWRlcnMoY29tcG9uZW50VHlwZSk7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHByb3ZpZGVycykpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudFByb3ZpZGVycy5wdXNoKHByb3ZpZGVycyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGV4Y2VwdGlvbkhhbmRsZXIgPSBfdGhpcy5faW5qZWN0b3IuZ2V0KGV4Y2VwdGlvbnNfMS5FeGNlcHRpb25IYW5kbGVyKTtcclxuICAgICAgICAgICAgX3RoaXMuX3Jvb3RDb21wb25lbnRUeXBlcy5wdXNoKGNvbXBvbmVudFR5cGUpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluamVjdG9yID0gX3RoaXMuX2luamVjdG9yLnJlc29sdmVBbmRDcmVhdGVDaGlsZChjb21wb25lbnRQcm92aWRlcnMpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBSZWZUb2tlbiA9IGluamVjdG9yLmdldChhcHBsaWNhdGlvbl90b2tlbnNfMS5BUFBfQ09NUE9ORU5UX1JFRl9QUk9NSVNFKTtcclxuICAgICAgICAgICAgICAgIHZhciB0aWNrID0gZnVuY3Rpb24gKGNvbXBvbmVudFJlZikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcHBDaGFuZ2VEZXRlY3RvciA9IHZpZXdfcmVmXzEuaW50ZXJuYWxWaWV3KGNvbXBvbmVudFJlZi5ob3N0VmlldykuY2hhbmdlRGV0ZWN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxjID0gaW5qZWN0b3IuZ2V0KGxpZmVfY3ljbGVfMS5MaWZlQ3ljbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxjLnJlZ2lzdGVyV2l0aChfdGhpcy5fem9uZSwgYXBwQ2hhbmdlRGV0ZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxjLnRpY2soKTtcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZXIucmVzb2x2ZShjb21wb25lbnRSZWYpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9yb290Q29tcG9uZW50cy5wdXNoKGNvbXBvbmVudFJlZik7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2Jvb3RzdHJhcExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikgeyByZXR1cm4gbGlzdGVuZXIoY29tcG9uZW50UmVmKTsgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIHRpY2tSZXN1bHQgPSBhc3luY18xLlByb21pc2VXcmFwcGVyLnRoZW4oY29tcFJlZlRva2VuLCB0aWNrKTtcclxuICAgICAgICAgICAgICAgIGFzeW5jXzEuUHJvbWlzZVdyYXBwZXIudGhlbih0aWNrUmVzdWx0LCBmdW5jdGlvbiAoXykgeyB9KTtcclxuICAgICAgICAgICAgICAgIGFzeW5jXzEuUHJvbWlzZVdyYXBwZXIudGhlbih0aWNrUmVzdWx0LCBudWxsLCBmdW5jdGlvbiAoZXJyLCBzdGFja1RyYWNlKSB7IHJldHVybiBjb21wbGV0ZXIucmVqZWN0KGVyciwgc3RhY2tUcmFjZSk7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBleGNlcHRpb25IYW5kbGVyLmNhbGwoZSwgZS5zdGFjayk7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZXIucmVqZWN0KGUsIGUuc3RhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGNvbXBsZXRlci5wcm9taXNlO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcHBsaWNhdGlvblJlZl8ucHJvdG90eXBlLCBcImluamVjdG9yXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2luamVjdG9yOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcHBsaWNhdGlvblJlZl8ucHJvdG90eXBlLCBcInpvbmVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fem9uZTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBBcHBsaWNhdGlvblJlZl8ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gVE9ETyhhbHhodWIpOiBEaXNwb3NlIG9mIHRoZSBOZ1pvbmUuXHJcbiAgICAgICAgdGhpcy5fcm9vdENvbXBvbmVudHMuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7IHJldHVybiByZWYuZGlzcG9zZSgpOyB9KTtcclxuICAgICAgICB0aGlzLl9wbGF0Zm9ybS5fYXBwbGljYXRpb25EaXNwb3NlZCh0aGlzKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXBwbGljYXRpb25SZWZfLnByb3RvdHlwZSwgXCJjb21wb25lbnRUeXBlc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9yb290Q29tcG9uZW50VHlwZXM7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIEFwcGxpY2F0aW9uUmVmXztcclxufSkoQXBwbGljYXRpb25SZWYpO1xyXG5leHBvcnRzLkFwcGxpY2F0aW9uUmVmXyA9IEFwcGxpY2F0aW9uUmVmXztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbGljYXRpb25fcmVmLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG4vKipcclxuICogIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0cy5BUFBfQ09NUE9ORU5UX1JFRl9QUk9NSVNFID0gbGFuZ18xLkNPTlNUX0VYUFIobmV3IGRpXzEuT3BhcXVlVG9rZW4oJ1Byb21pc2U8Q29tcG9uZW50UmVmPicpKTtcclxuLyoqXHJcbiAqIEFuIHtAbGluayBhbmd1bGFyMi9kaS9PcGFxdWVUb2tlbn0gcmVwcmVzZW50aW5nIHRoZSBhcHBsaWNhdGlvbiByb290IHR5cGUgaW4gdGhlIHtAbGlua1xyXG4gKiBJbmplY3Rvcn0uXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAQ29tcG9uZW50KC4uLilcclxuICogY2xhc3MgTXlBcHAge1xyXG4gKiAgIC4uLlxyXG4gKiB9XHJcbiAqXHJcbiAqIGJvb3RzdHJhcChNeUFwcCkudGhlbigoYXBwUmVmOkFwcGxpY2F0aW9uUmVmKSB7XHJcbiAqICAgZXhwZWN0KGFwcFJlZi5pbmplY3Rvci5nZXQoYXBwQ29tcG9uZW50VHlwZVRva2VuKSkudG9FcXVhbChNeUFwcCk7XHJcbiAqIH0pO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydHMuQVBQX0NPTVBPTkVOVCA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBkaV8xLk9wYXF1ZVRva2VuKCdBcHBDb21wb25lbnQnKSk7XHJcbi8qKlxyXG4gKiBBIERJIFRva2VuIHJlcHJlc2VudGluZyBhIHVuaXF1ZSBzdHJpbmcgaWQgYXNzaWduZWQgdG8gdGhlIGFwcGxpY2F0aW9uIGJ5IEFuZ3VsYXIgYW5kIHVzZWRcclxuICogcHJpbWFyaWx5IGZvciBwcmVmaXhpbmcgYXBwbGljYXRpb24gYXR0cmlidXRlcyBhbmQgQ1NTIHN0eWxlcyB3aGVuXHJcbiAqIHtAbGluayBWaWV3RW5jYXBzdWxhdGlvbiNFbXVsYXRlZH0gaXMgYmVpbmcgdXNlZC5cclxuICpcclxuICogSWYgeW91IG5lZWQgdG8gYXZvaWQgcmFuZG9tbHkgZ2VuZXJhdGVkIHZhbHVlIHRvIGJlIHVzZWQgYXMgYW4gYXBwbGljYXRpb24gaWQsIHlvdSBjYW4gcHJvdmlkZVxyXG4gKiBhIGN1c3RvbSB2YWx1ZSB2aWEgYSBESSBwcm92aWRlciA8IS0tIFRPRE86IHByb3ZpZGVyIC0tPiBjb25maWd1cmluZyB0aGUgcm9vdCB7QGxpbmsgSW5qZWN0b3J9XHJcbiAqIHVzaW5nIHRoaXMgdG9rZW4uXHJcbiAqL1xyXG5leHBvcnRzLkFQUF9JRCA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBkaV8xLk9wYXF1ZVRva2VuKCdBcHBJZCcpKTtcclxuZnVuY3Rpb24gX2FwcElkUmFuZG9tUHJvdmlkZXJGYWN0b3J5KCkge1xyXG4gICAgcmV0dXJuIFwiXCIgKyBfcmFuZG9tQ2hhcigpICsgX3JhbmRvbUNoYXIoKSArIF9yYW5kb21DaGFyKCk7XHJcbn1cclxuLyoqXHJcbiAqIEJpbmRpbmdzIHRoYXQgd2lsbCBnZW5lcmF0ZSBhIHJhbmRvbSBBUFBfSURfVE9LRU4uXHJcbiAqL1xyXG5leHBvcnRzLkFQUF9JRF9SQU5ET01fUFJPVklERVIgPSBsYW5nXzEuQ09OU1RfRVhQUihuZXcgZGlfMS5Qcm92aWRlcihleHBvcnRzLkFQUF9JRCwgeyB1c2VGYWN0b3J5OiBfYXBwSWRSYW5kb21Qcm92aWRlckZhY3RvcnksIGRlcHM6IFtdIH0pKTtcclxuZnVuY3Rpb24gX3JhbmRvbUNoYXIoKSB7XHJcbiAgICByZXR1cm4gbGFuZ18xLlN0cmluZ1dyYXBwZXIuZnJvbUNoYXJDb2RlKDk3ICsgbGFuZ18xLk1hdGguZmxvb3IobGFuZ18xLk1hdGgucmFuZG9tKCkgKiAyNSkpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcGxpY2F0aW9uX3Rva2Vucy5qcy5tYXAiLCIndXNlIHN0cmljdCc7Ly8gTm90ZTogVGhpcyBmaWxlIG9ubHkgZXhpc3RzIHNvIHRoYXQgRGFydCB1c2VycyBjYW4gaW1wb3J0XHJcbi8vIGJvb3RzdHJhcCBmcm9tIGFuZ3VsYXIyL2Jvb3RzdHJhcC4gSlMgdXNlcnMgc2hvdWxkIGltcG9ydFxyXG4vLyBmcm9tIGFuZ3VsYXIyL2NvcmUuXHJcbnZhciBhcHBsaWNhdGlvbl8xID0gcmVxdWlyZSgnLi9hcHBsaWNhdGlvbicpO1xyXG5leHBvcnRzLmJvb3RzdHJhcCA9IGFwcGxpY2F0aW9uXzEuYm9vdHN0cmFwO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib290c3RyYXAuanMubWFwIiwiJ3VzZSBzdHJpY3QnOy8qKlxyXG4gKiBAbW9kdWxlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDaGFuZ2UgZGV0ZWN0aW9uIGVuYWJsZXMgZGF0YSBiaW5kaW5nIGluIEFuZ3VsYXIuXHJcbiAqL1xyXG52YXIgY2hhbmdlX2RldGVjdGlvbl8xID0gcmVxdWlyZSgnLi9jaGFuZ2VfZGV0ZWN0aW9uL2NoYW5nZV9kZXRlY3Rpb24nKTtcclxuZXhwb3J0cy5DaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSA9IGNoYW5nZV9kZXRlY3Rpb25fMS5DaGFuZ2VEZXRlY3Rpb25TdHJhdGVneTtcclxuZXhwb3J0cy5FeHByZXNzaW9uQ2hhbmdlZEFmdGVySXRIYXNCZWVuQ2hlY2tlZEV4Y2VwdGlvbiA9IGNoYW5nZV9kZXRlY3Rpb25fMS5FeHByZXNzaW9uQ2hhbmdlZEFmdGVySXRIYXNCZWVuQ2hlY2tlZEV4Y2VwdGlvbjtcclxuZXhwb3J0cy5DaGFuZ2VEZXRlY3Rpb25FcnJvciA9IGNoYW5nZV9kZXRlY3Rpb25fMS5DaGFuZ2VEZXRlY3Rpb25FcnJvcjtcclxuZXhwb3J0cy5DaGFuZ2VEZXRlY3RvclJlZiA9IGNoYW5nZV9kZXRlY3Rpb25fMS5DaGFuZ2VEZXRlY3RvclJlZjtcclxuZXhwb3J0cy5XcmFwcGVkVmFsdWUgPSBjaGFuZ2VfZGV0ZWN0aW9uXzEuV3JhcHBlZFZhbHVlO1xyXG5leHBvcnRzLlNpbXBsZUNoYW5nZSA9IGNoYW5nZV9kZXRlY3Rpb25fMS5TaW1wbGVDaGFuZ2U7XHJcbmV4cG9ydHMuSXRlcmFibGVEaWZmZXJzID0gY2hhbmdlX2RldGVjdGlvbl8xLkl0ZXJhYmxlRGlmZmVycztcclxuZXhwb3J0cy5LZXlWYWx1ZURpZmZlcnMgPSBjaGFuZ2VfZGV0ZWN0aW9uXzEuS2V5VmFsdWVEaWZmZXJzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFuZ2VfZGV0ZWN0aW9uLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgY2hhbmdlX2RldGVjdGlvbl91dGlsXzEgPSByZXF1aXJlKCcuL2NoYW5nZV9kZXRlY3Rpb25fdXRpbCcpO1xyXG52YXIgY2hhbmdlX2RldGVjdG9yX3JlZl8xID0gcmVxdWlyZSgnLi9jaGFuZ2VfZGV0ZWN0b3JfcmVmJyk7XHJcbnZhciBleGNlcHRpb25zXzIgPSByZXF1aXJlKCcuL2V4Y2VwdGlvbnMnKTtcclxudmFyIGNvbnN0YW50c18xID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcclxudmFyIHByb2ZpbGVfMSA9IHJlcXVpcmUoJy4uL3Byb2ZpbGUvcHJvZmlsZScpO1xyXG52YXIgb2JzZXJ2YWJsZV9mYWNhZGVfMSA9IHJlcXVpcmUoJy4vb2JzZXJ2YWJsZV9mYWNhZGUnKTtcclxudmFyIF9zY29wZV9jaGVjayA9IHByb2ZpbGVfMS53dGZDcmVhdGVTY29wZShcIkNoYW5nZURldGVjdG9yI2NoZWNrKGFzY2lpIGlkLCBib29sIHRocm93T25DaGFuZ2UpXCIpO1xyXG52YXIgX0NvbnRleHQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gX0NvbnRleHQoZWxlbWVudCwgY29tcG9uZW50RWxlbWVudCwgY29udGV4dCwgbG9jYWxzLCBpbmplY3RvciwgZXhwcmVzc2lvbikge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRFbGVtZW50ID0gY29tcG9uZW50RWxlbWVudDtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMubG9jYWxzID0gbG9jYWxzO1xyXG4gICAgICAgIHRoaXMuaW5qZWN0b3IgPSBpbmplY3RvcjtcclxuICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9Db250ZXh0O1xyXG59KSgpO1xyXG52YXIgQWJzdHJhY3RDaGFuZ2VEZXRlY3RvciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBYnN0cmFjdENoYW5nZURldGVjdG9yKGlkLCBkaXNwYXRjaGVyLCBudW1iZXJPZlByb3BlcnR5UHJvdG9SZWNvcmRzLCBiaW5kaW5nVGFyZ2V0cywgZGlyZWN0aXZlSW5kaWNlcywgc3RyYXRlZ3kpIHtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyID0gZGlzcGF0Y2hlcjtcclxuICAgICAgICB0aGlzLm51bWJlck9mUHJvcGVydHlQcm90b1JlY29yZHMgPSBudW1iZXJPZlByb3BlcnR5UHJvdG9SZWNvcmRzO1xyXG4gICAgICAgIHRoaXMuYmluZGluZ1RhcmdldHMgPSBiaW5kaW5nVGFyZ2V0cztcclxuICAgICAgICB0aGlzLmRpcmVjdGl2ZUluZGljZXMgPSBkaXJlY3RpdmVJbmRpY2VzO1xyXG4gICAgICAgIHRoaXMuc3RyYXRlZ3kgPSBzdHJhdGVneTtcclxuICAgICAgICB0aGlzLmxpZ2h0RG9tQ2hpbGRyZW4gPSBbXTtcclxuICAgICAgICB0aGlzLnNoYWRvd0RvbUNoaWxkcmVuID0gW107XHJcbiAgICAgICAgLy8gVGhlIG5hbWVzIG9mIHRoZSBiZWxvdyBmaWVsZHMgbXVzdCBiZSBrZXB0IGluIHN5bmMgd2l0aCBjb2RlZ2VuX25hbWVfdXRpbC50cyBvclxyXG4gICAgICAgIC8vIGNoYW5nZSBkZXRlY3Rpb24gd2lsbCBmYWlsLlxyXG4gICAgICAgIHRoaXMuYWxyZWFkeUNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxvY2FscyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5tb2RlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnBpcGVzID0gbnVsbDtcclxuICAgICAgICB0aGlzLnJlZiA9IG5ldyBjaGFuZ2VfZGV0ZWN0b3JfcmVmXzEuQ2hhbmdlRGV0ZWN0b3JSZWZfKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiAoY2QpIHtcclxuICAgICAgICB0aGlzLmxpZ2h0RG9tQ2hpbGRyZW4ucHVzaChjZCk7XHJcbiAgICAgICAgY2QucGFyZW50ID0gdGhpcztcclxuICAgIH07XHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIChjZCkgeyBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIucmVtb3ZlKHRoaXMubGlnaHREb21DaGlsZHJlbiwgY2QpOyB9O1xyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuYWRkU2hhZG93RG9tQ2hpbGQgPSBmdW5jdGlvbiAoY2QpIHtcclxuICAgICAgICB0aGlzLnNoYWRvd0RvbUNoaWxkcmVuLnB1c2goY2QpO1xyXG4gICAgICAgIGNkLnBhcmVudCA9IHRoaXM7XHJcbiAgICB9O1xyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUucmVtb3ZlU2hhZG93RG9tQ2hpbGQgPSBmdW5jdGlvbiAoY2QpIHsgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLnJlbW92ZSh0aGlzLnNoYWRvd0RvbUNoaWxkcmVuLCBjZCk7IH07XHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7IHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpOyB9O1xyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBlbEluZGV4LCBsb2NhbHMpIHtcclxuICAgICAgICB2YXIgcmVzID0gdGhpcy5oYW5kbGVFdmVudEludGVybmFsKGV2ZW50TmFtZSwgZWxJbmRleCwgbG9jYWxzKTtcclxuICAgICAgICB0aGlzLm1hcmtQYXRoVG9Sb290QXNDaGVja09uY2UoKTtcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxuICAgIEFic3RyYWN0Q2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLmhhbmRsZUV2ZW50SW50ZXJuYWwgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBlbEluZGV4LCBsb2NhbHMpIHsgcmV0dXJuIGZhbHNlOyB9O1xyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuZGV0ZWN0Q2hhbmdlcyA9IGZ1bmN0aW9uICgpIHsgdGhpcy5ydW5EZXRlY3RDaGFuZ2VzKGZhbHNlKTsgfTtcclxuICAgIEFic3RyYWN0Q2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLmNoZWNrTm9DaGFuZ2VzID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oXCJOb3QgaW1wbGVtZW50ZWRcIik7IH07XHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5ydW5EZXRlY3RDaGFuZ2VzID0gZnVuY3Rpb24gKHRocm93T25DaGFuZ2UpIHtcclxuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBjb25zdGFudHNfMS5DaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5EZXRhY2hlZCB8fFxyXG4gICAgICAgICAgICB0aGlzLm1vZGUgPT09IGNvbnN0YW50c18xLkNoYW5nZURldGVjdGlvblN0cmF0ZWd5LkNoZWNrZWQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB2YXIgcyA9IF9zY29wZV9jaGVjayh0aGlzLmlkLCB0aHJvd09uQ2hhbmdlKTtcclxuICAgICAgICB0aGlzLmRldGVjdENoYW5nZXNJblJlY29yZHModGhyb3dPbkNoYW5nZSk7XHJcbiAgICAgICAgdGhpcy5fZGV0ZWN0Q2hhbmdlc0luTGlnaHREb21DaGlsZHJlbih0aHJvd09uQ2hhbmdlKTtcclxuICAgICAgICBpZiAoIXRocm93T25DaGFuZ2UpXHJcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJDb250ZW50TGlmZWN5Y2xlQ2FsbGJhY2tzKCk7XHJcbiAgICAgICAgdGhpcy5fZGV0ZWN0Q2hhbmdlc0luU2hhZG93RG9tQ2hpbGRyZW4odGhyb3dPbkNoYW5nZSk7XHJcbiAgICAgICAgaWYgKCF0aHJvd09uQ2hhbmdlKVxyXG4gICAgICAgICAgICB0aGlzLmFmdGVyVmlld0xpZmVjeWNsZUNhbGxiYWNrcygpO1xyXG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IGNvbnN0YW50c18xLkNoYW5nZURldGVjdGlvblN0cmF0ZWd5LkNoZWNrT25jZSlcclxuICAgICAgICAgICAgdGhpcy5tb2RlID0gY29uc3RhbnRzXzEuQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuQ2hlY2tlZDtcclxuICAgICAgICB0aGlzLmFscmVhZHlDaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICBwcm9maWxlXzEud3RmTGVhdmUocyk7XHJcbiAgICB9O1xyXG4gICAgLy8gVGhpcyBtZXRob2QgaXMgbm90IGludGVuZGVkIHRvIGJlIG92ZXJyaWRkZW4uIFN1YmNsYXNzZXMgc2hvdWxkIGluc3RlYWQgcHJvdmlkZSBhblxyXG4gICAgLy8gaW1wbGVtZW50YXRpb24gb2YgYGRldGVjdENoYW5nZXNJblJlY29yZHNJbnRlcm5hbGAgd2hpY2ggZG9lcyB0aGUgd29yayBvZiBkZXRlY3RpbmcgY2hhbmdlc1xyXG4gICAgLy8gYW5kIHdoaWNoIHRoaXMgbWV0aG9kIHdpbGwgY2FsbC5cclxuICAgIC8vIFRoaXMgbWV0aG9kIGV4cGVjdHMgdGhhdCBgZGV0ZWN0Q2hhbmdlc0luUmVjb3Jkc0ludGVybmFsYCB3aWxsIHNldCB0aGUgcHJvcGVydHlcclxuICAgIC8vIGB0aGlzLnByb3BlcnR5QmluZGluZ0luZGV4YCB0byB0aGUgcHJvcGVydHlCaW5kaW5nSW5kZXggb2YgdGhlIGZpcnN0IHByb3RvIHJlY29yZC4gVGhpcyBpcyB0b1xyXG4gICAgLy8gZmFjaWxpdGF0ZSBlcnJvciByZXBvcnRpbmcuXHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5kZXRlY3RDaGFuZ2VzSW5SZWNvcmRzID0gZnVuY3Rpb24gKHRocm93T25DaGFuZ2UpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaHlkcmF0ZWQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnRocm93RGVoeWRyYXRlZEVycm9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGV0ZWN0Q2hhbmdlc0luUmVjb3Jkc0ludGVybmFsKHRocm93T25DaGFuZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLl90aHJvd0Vycm9yKGUsIGUuc3RhY2spO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBTdWJjbGFzc2VzIHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwZXJmb3JtIGFueSB3b3JrIG5lY2Vzc2FyeSB0byBkZXRlY3QgYW5kIHJlcG9ydFxyXG4gICAgLy8gY2hhbmdlcy4gRm9yIGV4YW1wbGUsIGNoYW5nZXMgc2hvdWxkIGJlIHJlcG9ydGVkIHZpYSBgQ2hhbmdlRGV0ZWN0aW9uVXRpbC5hZGRDaGFuZ2VgLCBsaWZlY3ljbGVcclxuICAgIC8vIG1ldGhvZHMgc2hvdWxkIGJlIGNhbGxlZCwgZXRjLlxyXG4gICAgLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBzaG91bGQgYWxzbyBzZXQgYHRoaXMucHJvcGVydHlCaW5kaW5nSW5kZXhgIHRvIHRoZSBwcm9wZXJ0eUJpbmRpbmdJbmRleCBvZlxyXG4gICAgLy8gdGhlXHJcbiAgICAvLyBmaXJzdCBwcm90byByZWNvcmQgdG8gZmFjaWxpdGF0ZSBlcnJvciByZXBvcnRpbmcuIFNlZSB7QGxpbmsgI2RldGVjdENoYW5nZXNJblJlY29yZHN9LlxyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuZGV0ZWN0Q2hhbmdlc0luUmVjb3Jkc0ludGVybmFsID0gZnVuY3Rpb24gKHRocm93T25DaGFuZ2UpIHsgfTtcclxuICAgIC8vIFRoaXMgbWV0aG9kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSBvdmVycmlkZGVuLiBTdWJjbGFzc2VzIHNob3VsZCBpbnN0ZWFkIHByb3ZpZGUgYW5cclxuICAgIC8vIGltcGxlbWVudGF0aW9uIG9mIGBoeWRyYXRlRGlyZWN0aXZlc2AuXHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5oeWRyYXRlID0gZnVuY3Rpb24gKGNvbnRleHQsIGxvY2FscywgZGlyZWN0aXZlcywgcGlwZXMpIHtcclxuICAgICAgICB0aGlzLm1vZGUgPSBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLmNoYW5nZURldGVjdGlvbk1vZGUodGhpcy5zdHJhdGVneSk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICBpZiAodGhpcy5zdHJhdGVneSA9PT0gY29uc3RhbnRzXzEuQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoT2JzZXJ2ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmVDb21wb25lbnQoY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubG9jYWxzID0gbG9jYWxzO1xyXG4gICAgICAgIHRoaXMucGlwZXMgPSBwaXBlcztcclxuICAgICAgICB0aGlzLmh5ZHJhdGVEaXJlY3RpdmVzKGRpcmVjdGl2ZXMpO1xyXG4gICAgICAgIHRoaXMuYWxyZWFkeUNoZWNrZWQgPSBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvLyBTdWJjbGFzc2VzIHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBoeWRyYXRlIGFueSBkaXJlY3RpdmVzLlxyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuaHlkcmF0ZURpcmVjdGl2ZXMgPSBmdW5jdGlvbiAoZGlyZWN0aXZlcykgeyB9O1xyXG4gICAgLy8gVGhpcyBtZXRob2QgaXMgbm90IGludGVuZGVkIHRvIGJlIG92ZXJyaWRkZW4uIFN1YmNsYXNzZXMgc2hvdWxkIGluc3RlYWQgcHJvdmlkZSBhblxyXG4gICAgLy8gaW1wbGVtZW50YXRpb24gb2YgYGRlaHlkcmF0ZURpcmVjdGl2ZXNgLlxyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuZGVoeWRyYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuZGVoeWRyYXRlRGlyZWN0aXZlcyh0cnVlKTtcclxuICAgICAgICAvLyBUaGlzIGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlLiBXb3JrcyBvbmx5IGluIERhcnQuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RyYXRlZ3kgPT09IGNvbnN0YW50c18xLkNoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaE9ic2VydmUpIHtcclxuICAgICAgICAgICAgdGhpcy5fdW5zdWJzcmliZUZyb21PYnNlcnZhYmxlcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubG9jYWxzID0gbnVsbDtcclxuICAgICAgICB0aGlzLnBpcGVzID0gbnVsbDtcclxuICAgIH07XHJcbiAgICAvLyBTdWJjbGFzc2VzIHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBkZWh5ZHJhdGUgYW55IGRpcmVjdGl2ZXMuIFRoaXMgbWV0aG9kIHNob3VsZCByZXZlcnNlXHJcbiAgICAvLyBhbnkgd29yayBkb25lIGluIGBoeWRyYXRlRGlyZWN0aXZlc2AuXHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5kZWh5ZHJhdGVEaXJlY3RpdmVzID0gZnVuY3Rpb24gKGRlc3Ryb3lQaXBlcykgeyB9O1xyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuaHlkcmF0ZWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmNvbnRleHQgIT09IG51bGw7IH07XHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5hZnRlckNvbnRlbnRMaWZlY3ljbGVDYWxsYmFja3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyLm5vdGlmeUFmdGVyQ29udGVudENoZWNrZWQoKTtcclxuICAgICAgICB0aGlzLmFmdGVyQ29udGVudExpZmVjeWNsZUNhbGxiYWNrc0ludGVybmFsKCk7XHJcbiAgICB9O1xyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuYWZ0ZXJDb250ZW50TGlmZWN5Y2xlQ2FsbGJhY2tzSW50ZXJuYWwgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5hZnRlclZpZXdMaWZlY3ljbGVDYWxsYmFja3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyLm5vdGlmeUFmdGVyVmlld0NoZWNrZWQoKTtcclxuICAgICAgICB0aGlzLmFmdGVyVmlld0xpZmVjeWNsZUNhbGxiYWNrc0ludGVybmFsKCk7XHJcbiAgICB9O1xyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuYWZ0ZXJWaWV3TGlmZWN5Y2xlQ2FsbGJhY2tzSW50ZXJuYWwgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5fZGV0ZWN0Q2hhbmdlc0luTGlnaHREb21DaGlsZHJlbiA9IGZ1bmN0aW9uICh0aHJvd09uQ2hhbmdlKSB7XHJcbiAgICAgICAgdmFyIGMgPSB0aGlzLmxpZ2h0RG9tQ2hpbGRyZW47XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNbaV0ucnVuRGV0ZWN0Q2hhbmdlcyh0aHJvd09uQ2hhbmdlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuX2RldGVjdENoYW5nZXNJblNoYWRvd0RvbUNoaWxkcmVuID0gZnVuY3Rpb24gKHRocm93T25DaGFuZ2UpIHtcclxuICAgICAgICB2YXIgYyA9IHRoaXMuc2hhZG93RG9tQ2hpbGRyZW47XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNbaV0ucnVuRGV0ZWN0Q2hhbmdlcyh0aHJvd09uQ2hhbmdlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUubWFya0FzQ2hlY2tPbmNlID0gZnVuY3Rpb24gKCkgeyB0aGlzLm1vZGUgPSBjb25zdGFudHNfMS5DaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5DaGVja09uY2U7IH07XHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5tYXJrUGF0aFRvUm9vdEFzQ2hlY2tPbmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjID0gdGhpcztcclxuICAgICAgICB3aGlsZSAobGFuZ18xLmlzUHJlc2VudChjKSAmJiBjLm1vZGUgIT09IGNvbnN0YW50c18xLkNoYW5nZURldGVjdGlvblN0cmF0ZWd5LkRldGFjaGVkKSB7XHJcbiAgICAgICAgICAgIGlmIChjLm1vZGUgPT09IGNvbnN0YW50c18xLkNoYW5nZURldGVjdGlvblN0cmF0ZWd5LkNoZWNrZWQpXHJcbiAgICAgICAgICAgICAgICBjLm1vZGUgPSBjb25zdGFudHNfMS5DaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5DaGVja09uY2U7XHJcbiAgICAgICAgICAgIGMgPSBjLnBhcmVudDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gVGhpcyBpcyBhbiBleHBlcmltZW50YWwgZmVhdHVyZS4gV29ya3Mgb25seSBpbiBEYXJ0LlxyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuX3Vuc3Vic3JpYmVGcm9tT2JzZXJ2YWJsZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5zdWJzY3JpcHRpb25zKSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHMgPSB0aGlzLnN1YnNjcmlwdGlvbnNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLnN1YnNjcmlwdGlvbnNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcy5jYW5jZWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnNbaV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIFRoaXMgaXMgYW4gZXhwZXJpbWVudGFsIGZlYXR1cmUuIFdvcmtzIG9ubHkgaW4gRGFydC5cclxuICAgIEFic3RyYWN0Q2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLm9ic2VydmVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChvYnNlcnZhYmxlX2ZhY2FkZV8xLmlzT2JzZXJ2YWJsZSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlQXJyYXlUb1N0b3JlT2JzZXJ2YWJsZXMoKTtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHRoaXMuc3Vic2NyaXB0aW9uc1tpbmRleF0pKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbXNbaW5kZXhdID0gdmFsdWUuY2hhbmdlcztcclxuICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uc1tpbmRleF0gPSB2YWx1ZS5jaGFuZ2VzLmxpc3RlbihmdW5jdGlvbiAoXykgeyByZXR1cm4gX3RoaXMucmVmLm1hcmtGb3JDaGVjaygpOyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnN0cmVhbXNbaW5kZXhdICE9PSB2YWx1ZS5jaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnNbaW5kZXhdLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1zW2luZGV4XSA9IHZhbHVlLmNoYW5nZXM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnNbaW5kZXhdID0gdmFsdWUuY2hhbmdlcy5saXN0ZW4oZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF90aGlzLnJlZi5tYXJrRm9yQ2hlY2soKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuICAgIC8vIFRoaXMgaXMgYW4gZXhwZXJpbWVudGFsIGZlYXR1cmUuIFdvcmtzIG9ubHkgaW4gRGFydC5cclxuICAgIEFic3RyYWN0Q2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLm9ic2VydmVEaXJlY3RpdmUgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAob2JzZXJ2YWJsZV9mYWNhZGVfMS5pc09ic2VydmFibGUodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUFycmF5VG9TdG9yZU9ic2VydmFibGVzKCk7XHJcbiAgICAgICAgICAgIHZhciBhcnJheUluZGV4ID0gdGhpcy5udW1iZXJPZlByb3BlcnR5UHJvdG9SZWNvcmRzICsgaW5kZXggKyAyOyAvLyArMSBpcyBjb21wb25lbnRcclxuICAgICAgICAgICAgdGhpcy5zdHJlYW1zW2FycmF5SW5kZXhdID0gdmFsdWUuY2hhbmdlcztcclxuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2FycmF5SW5kZXhdID0gdmFsdWUuY2hhbmdlcy5saXN0ZW4oZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF90aGlzLnJlZi5tYXJrRm9yQ2hlY2soKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcbiAgICAvLyBUaGlzIGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlLiBXb3JrcyBvbmx5IGluIERhcnQuXHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5vYnNlcnZlQ29tcG9uZW50ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAob2JzZXJ2YWJsZV9mYWNhZGVfMS5pc09ic2VydmFibGUodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUFycmF5VG9TdG9yZU9ic2VydmFibGVzKCk7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMubnVtYmVyT2ZQcm9wZXJ0eVByb3RvUmVjb3JkcyArIDE7XHJcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtc1tpbmRleF0gPSB2YWx1ZS5jaGFuZ2VzO1xyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnNbaW5kZXhdID0gdmFsdWUuY2hhbmdlcy5saXN0ZW4oZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF90aGlzLnJlZi5tYXJrRm9yQ2hlY2soKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5fY3JlYXRlQXJyYXlUb1N0b3JlT2JzZXJ2YWJsZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHRoaXMuc3Vic2NyaXB0aW9ucykpIHtcclxuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNyZWF0ZUZpeGVkU2l6ZSh0aGlzLm51bWJlck9mUHJvcGVydHlQcm90b1JlY29yZHMgK1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVJbmRpY2VzLmxlbmd0aCArIDIpO1xyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbXMgPSBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuY3JlYXRlRml4ZWRTaXplKHRoaXMubnVtYmVyT2ZQcm9wZXJ0eVByb3RvUmVjb3JkcyArXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGl2ZUluZGljZXMubGVuZ3RoICsgMik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFic3RyYWN0Q2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLmdldERpcmVjdGl2ZUZvciA9IGZ1bmN0aW9uIChkaXJlY3RpdmVzLCBpbmRleCkge1xyXG4gICAgICAgIHJldHVybiBkaXJlY3RpdmVzLmdldERpcmVjdGl2ZUZvcih0aGlzLmRpcmVjdGl2ZUluZGljZXNbaW5kZXhdKTtcclxuICAgIH07XHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5nZXREZXRlY3RvckZvciA9IGZ1bmN0aW9uIChkaXJlY3RpdmVzLCBpbmRleCkge1xyXG4gICAgICAgIHJldHVybiBkaXJlY3RpdmVzLmdldERldGVjdG9yRm9yKHRoaXMuZGlyZWN0aXZlSW5kaWNlc1tpbmRleF0pO1xyXG4gICAgfTtcclxuICAgIEFic3RyYWN0Q2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLm5vdGlmeURpc3BhdGNoZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoZXIubm90aWZ5T25CaW5kaW5nKHRoaXMuX2N1cnJlbnRCaW5kaW5nKCksIHZhbHVlKTtcclxuICAgIH07XHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5sb2dCaW5kaW5nVXBkYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyLmxvZ0JpbmRpbmdVcGRhdGUodGhpcy5fY3VycmVudEJpbmRpbmcoKSwgdmFsdWUpO1xyXG4gICAgfTtcclxuICAgIEFic3RyYWN0Q2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLmFkZENoYW5nZSA9IGZ1bmN0aW9uIChjaGFuZ2VzLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoY2hhbmdlcykpIHtcclxuICAgICAgICAgICAgY2hhbmdlcyA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjaGFuZ2VzW3RoaXMuX2N1cnJlbnRCaW5kaW5nKCkubmFtZV0gPSBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLnNpbXBsZUNoYW5nZShvbGRWYWx1ZSwgbmV3VmFsdWUpO1xyXG4gICAgICAgIHJldHVybiBjaGFuZ2VzO1xyXG4gICAgfTtcclxuICAgIEFic3RyYWN0Q2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLl90aHJvd0Vycm9yID0gZnVuY3Rpb24gKGV4Y2VwdGlvbiwgc3RhY2spIHtcclxuICAgICAgICB2YXIgZXJyb3I7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmRpc3BhdGNoZXIuZ2V0RGVidWdDb250ZXh0KHRoaXMuX2N1cnJlbnRCaW5kaW5nKCkuZWxlbWVudEluZGV4LCBudWxsKTtcclxuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBsYW5nXzEuaXNQcmVzZW50KGMpID8gbmV3IF9Db250ZXh0KGMuZWxlbWVudCwgYy5jb21wb25lbnRFbGVtZW50LCBjLmNvbnRleHQsIGMubG9jYWxzLCBjLmluamVjdG9yLCB0aGlzLl9jdXJyZW50QmluZGluZygpLmRlYnVnKSA6XHJcbiAgICAgICAgICAgICAgICBudWxsO1xyXG4gICAgICAgICAgICBlcnJvciA9IG5ldyBleGNlcHRpb25zXzIuQ2hhbmdlRGV0ZWN0aW9uRXJyb3IodGhpcy5fY3VycmVudEJpbmRpbmcoKS5kZWJ1ZywgZXhjZXB0aW9uLCBzdGFjaywgY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIC8vIGlmIGFuIGVycm9yIGhhcHBlbnMgZHVyaW5nIGdldHRpbmcgdGhlIGRlYnVnIGNvbnRleHQsIHdlIHRocm93IGEgQ2hhbmdlRGV0ZWN0aW9uRXJyb3JcclxuICAgICAgICAgICAgLy8gd2l0aG91dCB0aGUgZXh0cmEgaW5mb3JtYXRpb24uXHJcbiAgICAgICAgICAgIGVycm9yID0gbmV3IGV4Y2VwdGlvbnNfMi5DaGFuZ2VEZXRlY3Rpb25FcnJvcihudWxsLCBleGNlcHRpb24sIHN0YWNrLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9O1xyXG4gICAgQWJzdHJhY3RDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUudGhyb3dPbkNoYW5nZUVycm9yID0gZnVuY3Rpb24gKG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzIuRXhwcmVzc2lvbkNoYW5nZWRBZnRlckl0SGFzQmVlbkNoZWNrZWRFeGNlcHRpb24odGhpcy5fY3VycmVudEJpbmRpbmcoKS5kZWJ1Zywgb2xkVmFsdWUsIG5ld1ZhbHVlLCBudWxsKTtcclxuICAgIH07XHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS50aHJvd0RlaHlkcmF0ZWRFcnJvciA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMi5EZWh5ZHJhdGVkRXhjZXB0aW9uKCk7IH07XHJcbiAgICBBYnN0cmFjdENoYW5nZURldGVjdG9yLnByb3RvdHlwZS5fY3VycmVudEJpbmRpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmluZGluZ1RhcmdldHNbdGhpcy5wcm9wZXJ0eUJpbmRpbmdJbmRleF07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFic3RyYWN0Q2hhbmdlRGV0ZWN0b3I7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQWJzdHJhY3RDaGFuZ2VEZXRlY3RvciA9IEFic3RyYWN0Q2hhbmdlRGV0ZWN0b3I7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFic3RyYWN0X2NoYW5nZV9kZXRlY3Rvci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBESVJFQ1RJVkVfTElGRUNZQ0xFID0gXCJkaXJlY3RpdmVMaWZlY3ljbGVcIjtcclxudmFyIEJJTkRJTkcgPSBcIm5hdGl2ZVwiO1xyXG52YXIgRElSRUNUSVZFID0gXCJkaXJlY3RpdmVcIjtcclxudmFyIEVMRU1FTlRfUFJPUEVSVFkgPSBcImVsZW1lbnRQcm9wZXJ0eVwiO1xyXG52YXIgRUxFTUVOVF9BVFRSSUJVVEUgPSBcImVsZW1lbnRBdHRyaWJ1dGVcIjtcclxudmFyIEVMRU1FTlRfQ0xBU1MgPSBcImVsZW1lbnRDbGFzc1wiO1xyXG52YXIgRUxFTUVOVF9TVFlMRSA9IFwiZWxlbWVudFN0eWxlXCI7XHJcbnZhciBURVhUX05PREUgPSBcInRleHROb2RlXCI7XHJcbnZhciBFVkVOVCA9IFwiZXZlbnRcIjtcclxudmFyIEhPU1RfRVZFTlQgPSBcImhvc3RFdmVudFwiO1xyXG52YXIgQmluZGluZ1RhcmdldCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCaW5kaW5nVGFyZ2V0KG1vZGUsIGVsZW1lbnRJbmRleCwgbmFtZSwgdW5pdCwgZGVidWcpIHtcclxuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudEluZGV4ID0gZWxlbWVudEluZGV4O1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy51bml0ID0gdW5pdDtcclxuICAgICAgICB0aGlzLmRlYnVnID0gZGVidWc7XHJcbiAgICB9XHJcbiAgICBCaW5kaW5nVGFyZ2V0LnByb3RvdHlwZS5pc0RpcmVjdGl2ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMubW9kZSA9PT0gRElSRUNUSVZFOyB9O1xyXG4gICAgQmluZGluZ1RhcmdldC5wcm90b3R5cGUuaXNFbGVtZW50UHJvcGVydHkgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm1vZGUgPT09IEVMRU1FTlRfUFJPUEVSVFk7IH07XHJcbiAgICBCaW5kaW5nVGFyZ2V0LnByb3RvdHlwZS5pc0VsZW1lbnRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm1vZGUgPT09IEVMRU1FTlRfQVRUUklCVVRFOyB9O1xyXG4gICAgQmluZGluZ1RhcmdldC5wcm90b3R5cGUuaXNFbGVtZW50Q2xhc3MgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm1vZGUgPT09IEVMRU1FTlRfQ0xBU1M7IH07XHJcbiAgICBCaW5kaW5nVGFyZ2V0LnByb3RvdHlwZS5pc0VsZW1lbnRTdHlsZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMubW9kZSA9PT0gRUxFTUVOVF9TVFlMRTsgfTtcclxuICAgIEJpbmRpbmdUYXJnZXQucHJvdG90eXBlLmlzVGV4dE5vZGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm1vZGUgPT09IFRFWFRfTk9ERTsgfTtcclxuICAgIHJldHVybiBCaW5kaW5nVGFyZ2V0O1xyXG59KSgpO1xyXG5leHBvcnRzLkJpbmRpbmdUYXJnZXQgPSBCaW5kaW5nVGFyZ2V0O1xyXG52YXIgQmluZGluZ1JlY29yZCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCaW5kaW5nUmVjb3JkKG1vZGUsIHRhcmdldCwgaW1wbGljaXRSZWNlaXZlciwgYXN0LCBzZXR0ZXIsIGxpZmVjeWNsZUV2ZW50LCBkaXJlY3RpdmVSZWNvcmQpIHtcclxuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgIHRoaXMuaW1wbGljaXRSZWNlaXZlciA9IGltcGxpY2l0UmVjZWl2ZXI7XHJcbiAgICAgICAgdGhpcy5hc3QgPSBhc3Q7XHJcbiAgICAgICAgdGhpcy5zZXR0ZXIgPSBzZXR0ZXI7XHJcbiAgICAgICAgdGhpcy5saWZlY3ljbGVFdmVudCA9IGxpZmVjeWNsZUV2ZW50O1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aXZlUmVjb3JkID0gZGlyZWN0aXZlUmVjb3JkO1xyXG4gICAgfVxyXG4gICAgQmluZGluZ1JlY29yZC5wcm90b3R5cGUuaXNEaXJlY3RpdmVMaWZlY3ljbGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm1vZGUgPT09IERJUkVDVElWRV9MSUZFQ1lDTEU7IH07XHJcbiAgICBCaW5kaW5nUmVjb3JkLnByb3RvdHlwZS5jYWxsT25DaGFuZ2VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHRoaXMuZGlyZWN0aXZlUmVjb3JkKSAmJiB0aGlzLmRpcmVjdGl2ZVJlY29yZC5jYWxsT25DaGFuZ2VzO1xyXG4gICAgfTtcclxuICAgIEJpbmRpbmdSZWNvcmQucHJvdG90eXBlLmlzRGVmYXVsdENoYW5nZURldGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbGFuZ18xLmlzQmxhbmsodGhpcy5kaXJlY3RpdmVSZWNvcmQpIHx8IHRoaXMuZGlyZWN0aXZlUmVjb3JkLmlzRGVmYXVsdENoYW5nZURldGVjdGlvbigpO1xyXG4gICAgfTtcclxuICAgIEJpbmRpbmdSZWNvcmQuY3JlYXRlRGlyZWN0aXZlRG9DaGVjayA9IGZ1bmN0aW9uIChkaXJlY3RpdmVSZWNvcmQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdSZWNvcmQoRElSRUNUSVZFX0xJRkVDWUNMRSwgbnVsbCwgMCwgbnVsbCwgbnVsbCwgXCJEb0NoZWNrXCIsIGRpcmVjdGl2ZVJlY29yZCk7XHJcbiAgICB9O1xyXG4gICAgQmluZGluZ1JlY29yZC5jcmVhdGVEaXJlY3RpdmVPbkluaXQgPSBmdW5jdGlvbiAoZGlyZWN0aXZlUmVjb3JkKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nUmVjb3JkKERJUkVDVElWRV9MSUZFQ1lDTEUsIG51bGwsIDAsIG51bGwsIG51bGwsIFwiT25Jbml0XCIsIGRpcmVjdGl2ZVJlY29yZCk7XHJcbiAgICB9O1xyXG4gICAgQmluZGluZ1JlY29yZC5jcmVhdGVEaXJlY3RpdmVPbkNoYW5nZXMgPSBmdW5jdGlvbiAoZGlyZWN0aXZlUmVjb3JkKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nUmVjb3JkKERJUkVDVElWRV9MSUZFQ1lDTEUsIG51bGwsIDAsIG51bGwsIG51bGwsIFwiT25DaGFuZ2VzXCIsIGRpcmVjdGl2ZVJlY29yZCk7XHJcbiAgICB9O1xyXG4gICAgQmluZGluZ1JlY29yZC5jcmVhdGVGb3JEaXJlY3RpdmUgPSBmdW5jdGlvbiAoYXN0LCBwcm9wZXJ0eU5hbWUsIHNldHRlciwgZGlyZWN0aXZlUmVjb3JkKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnRJbmRleCA9IGRpcmVjdGl2ZVJlY29yZC5kaXJlY3RpdmVJbmRleC5lbGVtZW50SW5kZXg7XHJcbiAgICAgICAgdmFyIHQgPSBuZXcgQmluZGluZ1RhcmdldChESVJFQ1RJVkUsIGVsZW1lbnRJbmRleCwgcHJvcGVydHlOYW1lLCBudWxsLCBhc3QudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nUmVjb3JkKERJUkVDVElWRSwgdCwgMCwgYXN0LCBzZXR0ZXIsIG51bGwsIGRpcmVjdGl2ZVJlY29yZCk7XHJcbiAgICB9O1xyXG4gICAgQmluZGluZ1JlY29yZC5jcmVhdGVGb3JFbGVtZW50UHJvcGVydHkgPSBmdW5jdGlvbiAoYXN0LCBlbGVtZW50SW5kZXgsIHByb3BlcnR5TmFtZSkge1xyXG4gICAgICAgIHZhciB0ID0gbmV3IEJpbmRpbmdUYXJnZXQoRUxFTUVOVF9QUk9QRVJUWSwgZWxlbWVudEluZGV4LCBwcm9wZXJ0eU5hbWUsIG51bGwsIGFzdC50b1N0cmluZygpKTtcclxuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdSZWNvcmQoQklORElORywgdCwgMCwgYXN0LCBudWxsLCBudWxsLCBudWxsKTtcclxuICAgIH07XHJcbiAgICBCaW5kaW5nUmVjb3JkLmNyZWF0ZUZvckVsZW1lbnRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoYXN0LCBlbGVtZW50SW5kZXgsIGF0dHJpYnV0ZU5hbWUpIHtcclxuICAgICAgICB2YXIgdCA9IG5ldyBCaW5kaW5nVGFyZ2V0KEVMRU1FTlRfQVRUUklCVVRFLCBlbGVtZW50SW5kZXgsIGF0dHJpYnV0ZU5hbWUsIG51bGwsIGFzdC50b1N0cmluZygpKTtcclxuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdSZWNvcmQoQklORElORywgdCwgMCwgYXN0LCBudWxsLCBudWxsLCBudWxsKTtcclxuICAgIH07XHJcbiAgICBCaW5kaW5nUmVjb3JkLmNyZWF0ZUZvckVsZW1lbnRDbGFzcyA9IGZ1bmN0aW9uIChhc3QsIGVsZW1lbnRJbmRleCwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgdmFyIHQgPSBuZXcgQmluZGluZ1RhcmdldChFTEVNRU5UX0NMQVNTLCBlbGVtZW50SW5kZXgsIGNsYXNzTmFtZSwgbnVsbCwgYXN0LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ1JlY29yZChCSU5ESU5HLCB0LCAwLCBhc3QsIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgfTtcclxuICAgIEJpbmRpbmdSZWNvcmQuY3JlYXRlRm9yRWxlbWVudFN0eWxlID0gZnVuY3Rpb24gKGFzdCwgZWxlbWVudEluZGV4LCBzdHlsZU5hbWUsIHVuaXQpIHtcclxuICAgICAgICB2YXIgdCA9IG5ldyBCaW5kaW5nVGFyZ2V0KEVMRU1FTlRfU1RZTEUsIGVsZW1lbnRJbmRleCwgc3R5bGVOYW1lLCB1bml0LCBhc3QudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nUmVjb3JkKEJJTkRJTkcsIHQsIDAsIGFzdCwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbiAgICB9O1xyXG4gICAgQmluZGluZ1JlY29yZC5jcmVhdGVGb3JIb3N0UHJvcGVydHkgPSBmdW5jdGlvbiAoZGlyZWN0aXZlSW5kZXgsIGFzdCwgcHJvcGVydHlOYW1lKSB7XHJcbiAgICAgICAgdmFyIHQgPSBuZXcgQmluZGluZ1RhcmdldChFTEVNRU5UX1BST1BFUlRZLCBkaXJlY3RpdmVJbmRleC5lbGVtZW50SW5kZXgsIHByb3BlcnR5TmFtZSwgbnVsbCwgYXN0LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ1JlY29yZChCSU5ESU5HLCB0LCBkaXJlY3RpdmVJbmRleCwgYXN0LCBudWxsLCBudWxsLCBudWxsKTtcclxuICAgIH07XHJcbiAgICBCaW5kaW5nUmVjb3JkLmNyZWF0ZUZvckhvc3RBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoZGlyZWN0aXZlSW5kZXgsIGFzdCwgYXR0cmlidXRlTmFtZSkge1xyXG4gICAgICAgIHZhciB0ID0gbmV3IEJpbmRpbmdUYXJnZXQoRUxFTUVOVF9BVFRSSUJVVEUsIGRpcmVjdGl2ZUluZGV4LmVsZW1lbnRJbmRleCwgYXR0cmlidXRlTmFtZSwgbnVsbCwgYXN0LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ1JlY29yZChCSU5ESU5HLCB0LCBkaXJlY3RpdmVJbmRleCwgYXN0LCBudWxsLCBudWxsLCBudWxsKTtcclxuICAgIH07XHJcbiAgICBCaW5kaW5nUmVjb3JkLmNyZWF0ZUZvckhvc3RDbGFzcyA9IGZ1bmN0aW9uIChkaXJlY3RpdmVJbmRleCwgYXN0LCBjbGFzc05hbWUpIHtcclxuICAgICAgICB2YXIgdCA9IG5ldyBCaW5kaW5nVGFyZ2V0KEVMRU1FTlRfQ0xBU1MsIGRpcmVjdGl2ZUluZGV4LmVsZW1lbnRJbmRleCwgY2xhc3NOYW1lLCBudWxsLCBhc3QudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nUmVjb3JkKEJJTkRJTkcsIHQsIGRpcmVjdGl2ZUluZGV4LCBhc3QsIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgfTtcclxuICAgIEJpbmRpbmdSZWNvcmQuY3JlYXRlRm9ySG9zdFN0eWxlID0gZnVuY3Rpb24gKGRpcmVjdGl2ZUluZGV4LCBhc3QsIHN0eWxlTmFtZSwgdW5pdCkge1xyXG4gICAgICAgIHZhciB0ID0gbmV3IEJpbmRpbmdUYXJnZXQoRUxFTUVOVF9TVFlMRSwgZGlyZWN0aXZlSW5kZXguZWxlbWVudEluZGV4LCBzdHlsZU5hbWUsIHVuaXQsIGFzdC50b1N0cmluZygpKTtcclxuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdSZWNvcmQoQklORElORywgdCwgZGlyZWN0aXZlSW5kZXgsIGFzdCwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbiAgICB9O1xyXG4gICAgQmluZGluZ1JlY29yZC5jcmVhdGVGb3JUZXh0Tm9kZSA9IGZ1bmN0aW9uIChhc3QsIGVsZW1lbnRJbmRleCkge1xyXG4gICAgICAgIHZhciB0ID0gbmV3IEJpbmRpbmdUYXJnZXQoVEVYVF9OT0RFLCBlbGVtZW50SW5kZXgsIG51bGwsIG51bGwsIGFzdC50b1N0cmluZygpKTtcclxuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdSZWNvcmQoQklORElORywgdCwgMCwgYXN0LCBudWxsLCBudWxsLCBudWxsKTtcclxuICAgIH07XHJcbiAgICBCaW5kaW5nUmVjb3JkLmNyZWF0ZUZvckV2ZW50ID0gZnVuY3Rpb24gKGFzdCwgZXZlbnROYW1lLCBlbGVtZW50SW5kZXgpIHtcclxuICAgICAgICB2YXIgdCA9IG5ldyBCaW5kaW5nVGFyZ2V0KEVWRU5ULCBlbGVtZW50SW5kZXgsIGV2ZW50TmFtZSwgbnVsbCwgYXN0LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ1JlY29yZChFVkVOVCwgdCwgMCwgYXN0LCBudWxsLCBudWxsLCBudWxsKTtcclxuICAgIH07XHJcbiAgICBCaW5kaW5nUmVjb3JkLmNyZWF0ZUZvckhvc3RFdmVudCA9IGZ1bmN0aW9uIChhc3QsIGV2ZW50TmFtZSwgZGlyZWN0aXZlUmVjb3JkKSB7XHJcbiAgICAgICAgdmFyIGRpcmVjdGl2ZUluZGV4ID0gZGlyZWN0aXZlUmVjb3JkLmRpcmVjdGl2ZUluZGV4O1xyXG4gICAgICAgIHZhciB0ID0gbmV3IEJpbmRpbmdUYXJnZXQoSE9TVF9FVkVOVCwgZGlyZWN0aXZlSW5kZXguZWxlbWVudEluZGV4LCBldmVudE5hbWUsIG51bGwsIGFzdC50b1N0cmluZygpKTtcclxuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdSZWNvcmQoSE9TVF9FVkVOVCwgdCwgZGlyZWN0aXZlSW5kZXgsIGFzdCwgbnVsbCwgbnVsbCwgZGlyZWN0aXZlUmVjb3JkKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQmluZGluZ1JlY29yZDtcclxufSkoKTtcclxuZXhwb3J0cy5CaW5kaW5nUmVjb3JkID0gQmluZGluZ1JlY29yZDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZGluZ19yZWNvcmQuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBpdGVyYWJsZV9kaWZmZXJzXzEgPSByZXF1aXJlKCcuL2RpZmZlcnMvaXRlcmFibGVfZGlmZmVycycpO1xyXG52YXIgZGVmYXVsdF9pdGVyYWJsZV9kaWZmZXJfMSA9IHJlcXVpcmUoJy4vZGlmZmVycy9kZWZhdWx0X2l0ZXJhYmxlX2RpZmZlcicpO1xyXG52YXIga2V5dmFsdWVfZGlmZmVyc18xID0gcmVxdWlyZSgnLi9kaWZmZXJzL2tleXZhbHVlX2RpZmZlcnMnKTtcclxudmFyIGRlZmF1bHRfa2V5dmFsdWVfZGlmZmVyXzEgPSByZXF1aXJlKCcuL2RpZmZlcnMvZGVmYXVsdF9rZXl2YWx1ZV9kaWZmZXInKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBhc3RfMSA9IHJlcXVpcmUoJy4vcGFyc2VyL2FzdCcpO1xyXG5leHBvcnRzLkFTVFdpdGhTb3VyY2UgPSBhc3RfMS5BU1RXaXRoU291cmNlO1xyXG5leHBvcnRzLkFTVCA9IGFzdF8xLkFTVDtcclxuZXhwb3J0cy5Bc3RUcmFuc2Zvcm1lciA9IGFzdF8xLkFzdFRyYW5zZm9ybWVyO1xyXG5leHBvcnRzLlByb3BlcnR5UmVhZCA9IGFzdF8xLlByb3BlcnR5UmVhZDtcclxuZXhwb3J0cy5MaXRlcmFsQXJyYXkgPSBhc3RfMS5MaXRlcmFsQXJyYXk7XHJcbmV4cG9ydHMuSW1wbGljaXRSZWNlaXZlciA9IGFzdF8xLkltcGxpY2l0UmVjZWl2ZXI7XHJcbnZhciBsZXhlcl8xID0gcmVxdWlyZSgnLi9wYXJzZXIvbGV4ZXInKTtcclxuZXhwb3J0cy5MZXhlciA9IGxleGVyXzEuTGV4ZXI7XHJcbnZhciBwYXJzZXJfMSA9IHJlcXVpcmUoJy4vcGFyc2VyL3BhcnNlcicpO1xyXG5leHBvcnRzLlBhcnNlciA9IHBhcnNlcl8xLlBhcnNlcjtcclxudmFyIGxvY2Fsc18xID0gcmVxdWlyZSgnLi9wYXJzZXIvbG9jYWxzJyk7XHJcbmV4cG9ydHMuTG9jYWxzID0gbG9jYWxzXzEuTG9jYWxzO1xyXG52YXIgZXhjZXB0aW9uc18xID0gcmVxdWlyZSgnLi9leGNlcHRpb25zJyk7XHJcbmV4cG9ydHMuRGVoeWRyYXRlZEV4Y2VwdGlvbiA9IGV4Y2VwdGlvbnNfMS5EZWh5ZHJhdGVkRXhjZXB0aW9uO1xyXG5leHBvcnRzLkV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXhjZXB0aW9uID0gZXhjZXB0aW9uc18xLkV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXhjZXB0aW9uO1xyXG5leHBvcnRzLkNoYW5nZURldGVjdGlvbkVycm9yID0gZXhjZXB0aW9uc18xLkNoYW5nZURldGVjdGlvbkVycm9yO1xyXG52YXIgaW50ZXJmYWNlc18xID0gcmVxdWlyZSgnLi9pbnRlcmZhY2VzJyk7XHJcbmV4cG9ydHMuQ2hhbmdlRGV0ZWN0b3JEZWZpbml0aW9uID0gaW50ZXJmYWNlc18xLkNoYW5nZURldGVjdG9yRGVmaW5pdGlvbjtcclxuZXhwb3J0cy5EZWJ1Z0NvbnRleHQgPSBpbnRlcmZhY2VzXzEuRGVidWdDb250ZXh0O1xyXG5leHBvcnRzLkNoYW5nZURldGVjdG9yR2VuQ29uZmlnID0gaW50ZXJmYWNlc18xLkNoYW5nZURldGVjdG9yR2VuQ29uZmlnO1xyXG52YXIgY29uc3RhbnRzXzEgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xyXG5leHBvcnRzLkNoYW5nZURldGVjdGlvblN0cmF0ZWd5ID0gY29uc3RhbnRzXzEuQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3k7XHJcbmV4cG9ydHMuQ0hBTkdFX0RFQ1RJT05fU1RSQVRFR1lfVkFMVUVTID0gY29uc3RhbnRzXzEuQ0hBTkdFX0RFQ1RJT05fU1RSQVRFR1lfVkFMVUVTO1xyXG52YXIgcHJvdG9fY2hhbmdlX2RldGVjdG9yXzEgPSByZXF1aXJlKCcuL3Byb3RvX2NoYW5nZV9kZXRlY3RvcicpO1xyXG5leHBvcnRzLkR5bmFtaWNQcm90b0NoYW5nZURldGVjdG9yID0gcHJvdG9fY2hhbmdlX2RldGVjdG9yXzEuRHluYW1pY1Byb3RvQ2hhbmdlRGV0ZWN0b3I7XHJcbnZhciBqaXRfcHJvdG9fY2hhbmdlX2RldGVjdG9yXzEgPSByZXF1aXJlKCcuL2ppdF9wcm90b19jaGFuZ2VfZGV0ZWN0b3InKTtcclxuZXhwb3J0cy5KaXRQcm90b0NoYW5nZURldGVjdG9yID0gaml0X3Byb3RvX2NoYW5nZV9kZXRlY3Rvcl8xLkppdFByb3RvQ2hhbmdlRGV0ZWN0b3I7XHJcbnZhciBiaW5kaW5nX3JlY29yZF8xID0gcmVxdWlyZSgnLi9iaW5kaW5nX3JlY29yZCcpO1xyXG5leHBvcnRzLkJpbmRpbmdSZWNvcmQgPSBiaW5kaW5nX3JlY29yZF8xLkJpbmRpbmdSZWNvcmQ7XHJcbmV4cG9ydHMuQmluZGluZ1RhcmdldCA9IGJpbmRpbmdfcmVjb3JkXzEuQmluZGluZ1RhcmdldDtcclxudmFyIGRpcmVjdGl2ZV9yZWNvcmRfMSA9IHJlcXVpcmUoJy4vZGlyZWN0aXZlX3JlY29yZCcpO1xyXG5leHBvcnRzLkRpcmVjdGl2ZUluZGV4ID0gZGlyZWN0aXZlX3JlY29yZF8xLkRpcmVjdGl2ZUluZGV4O1xyXG5leHBvcnRzLkRpcmVjdGl2ZVJlY29yZCA9IGRpcmVjdGl2ZV9yZWNvcmRfMS5EaXJlY3RpdmVSZWNvcmQ7XHJcbnZhciBkeW5hbWljX2NoYW5nZV9kZXRlY3Rvcl8xID0gcmVxdWlyZSgnLi9keW5hbWljX2NoYW5nZV9kZXRlY3RvcicpO1xyXG5leHBvcnRzLkR5bmFtaWNDaGFuZ2VEZXRlY3RvciA9IGR5bmFtaWNfY2hhbmdlX2RldGVjdG9yXzEuRHluYW1pY0NoYW5nZURldGVjdG9yO1xyXG52YXIgY2hhbmdlX2RldGVjdG9yX3JlZl8xID0gcmVxdWlyZSgnLi9jaGFuZ2VfZGV0ZWN0b3JfcmVmJyk7XHJcbmV4cG9ydHMuQ2hhbmdlRGV0ZWN0b3JSZWYgPSBjaGFuZ2VfZGV0ZWN0b3JfcmVmXzEuQ2hhbmdlRGV0ZWN0b3JSZWY7XHJcbnZhciBpdGVyYWJsZV9kaWZmZXJzXzIgPSByZXF1aXJlKCcuL2RpZmZlcnMvaXRlcmFibGVfZGlmZmVycycpO1xyXG5leHBvcnRzLkl0ZXJhYmxlRGlmZmVycyA9IGl0ZXJhYmxlX2RpZmZlcnNfMi5JdGVyYWJsZURpZmZlcnM7XHJcbnZhciBrZXl2YWx1ZV9kaWZmZXJzXzIgPSByZXF1aXJlKCcuL2RpZmZlcnMva2V5dmFsdWVfZGlmZmVycycpO1xyXG5leHBvcnRzLktleVZhbHVlRGlmZmVycyA9IGtleXZhbHVlX2RpZmZlcnNfMi5LZXlWYWx1ZURpZmZlcnM7XHJcbnZhciBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMSA9IHJlcXVpcmUoJy4vY2hhbmdlX2RldGVjdGlvbl91dGlsJyk7XHJcbmV4cG9ydHMuV3JhcHBlZFZhbHVlID0gY2hhbmdlX2RldGVjdGlvbl91dGlsXzEuV3JhcHBlZFZhbHVlO1xyXG5leHBvcnRzLlNpbXBsZUNoYW5nZSA9IGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLlNpbXBsZUNoYW5nZTtcclxuLyoqXHJcbiAqIFN0cnVjdHVyYWwgZGlmZmluZyBmb3IgYE9iamVjdGBzIGFuZCBgTWFwYHMuXHJcbiAqL1xyXG5leHBvcnRzLmtleVZhbERpZmYgPSBsYW5nXzEuQ09OU1RfRVhQUihbbGFuZ18xLkNPTlNUX0VYUFIobmV3IGRlZmF1bHRfa2V5dmFsdWVfZGlmZmVyXzEuRGVmYXVsdEtleVZhbHVlRGlmZmVyRmFjdG9yeSgpKV0pO1xyXG4vKipcclxuICogU3RydWN0dXJhbCBkaWZmaW5nIGZvciBgSXRlcmFibGVgIHR5cGVzIHN1Y2ggYXMgYEFycmF5YHMuXHJcbiAqL1xyXG5leHBvcnRzLml0ZXJhYmxlRGlmZiA9IGxhbmdfMS5DT05TVF9FWFBSKFtsYW5nXzEuQ09OU1RfRVhQUihuZXcgZGVmYXVsdF9pdGVyYWJsZV9kaWZmZXJfMS5EZWZhdWx0SXRlcmFibGVEaWZmZXJGYWN0b3J5KCkpXSk7XHJcbmV4cG9ydHMuZGVmYXVsdEl0ZXJhYmxlRGlmZmVycyA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBpdGVyYWJsZV9kaWZmZXJzXzEuSXRlcmFibGVEaWZmZXJzKGV4cG9ydHMuaXRlcmFibGVEaWZmKSk7XHJcbmV4cG9ydHMuZGVmYXVsdEtleVZhbHVlRGlmZmVycyA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBrZXl2YWx1ZV9kaWZmZXJzXzEuS2V5VmFsdWVEaWZmZXJzKGV4cG9ydHMua2V5VmFsRGlmZikpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFuZ2VfZGV0ZWN0aW9uLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBhYnN0cmFjdF9jaGFuZ2VfZGV0ZWN0b3JfMSA9IHJlcXVpcmUoJy4vYWJzdHJhY3RfY2hhbmdlX2RldGVjdG9yJyk7XHJcbnZhciBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMSA9IHJlcXVpcmUoJy4vY2hhbmdlX2RldGVjdGlvbl91dGlsJyk7XHJcbnZhciBjb2RlZ2VuX25hbWVfdXRpbF8xID0gcmVxdWlyZSgnLi9jb2RlZ2VuX25hbWVfdXRpbCcpO1xyXG52YXIgY29kZWdlbl9sb2dpY191dGlsXzEgPSByZXF1aXJlKCcuL2NvZGVnZW5fbG9naWNfdXRpbCcpO1xyXG52YXIgY29kZWdlbl9mYWNhZGVfMSA9IHJlcXVpcmUoJy4vY29kZWdlbl9mYWNhZGUnKTtcclxudmFyIHByb3RvX2NoYW5nZV9kZXRlY3Rvcl8xID0gcmVxdWlyZSgnLi9wcm90b19jaGFuZ2VfZGV0ZWN0b3InKTtcclxuLyoqXHJcbiAqIFRoZSBjb2RlIGdlbmVyYXRvciB0YWtlcyBhIGxpc3Qgb2YgcHJvdG8gcmVjb3JkcyBhbmQgY3JlYXRlcyBhIGZ1bmN0aW9uL2NsYXNzXHJcbiAqIHRoYXQgXCJlbXVsYXRlc1wiIHdoYXQgdGhlIGRldmVsb3BlciB3b3VsZCB3cml0ZSBieSBoYW5kIHRvIGltcGxlbWVudCB0aGUgc2FtZVxyXG4gKiBraW5kIG9mIGJlaGF2aW91ci5cclxuICpcclxuICogVGhpcyBjb2RlIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgRGFydCB0cmFuc2Zvcm1lcidzXHJcbiAqIGBhbmd1bGFyMi50cmFuc2Zvcm0udGVtcGxhdGVfY29tcGlsZXIuY2hhbmdlX2RldGVjdG9yX2NvZGVnZW5gIGxpYnJhcnkuIElmIHlvdSBtYWtlIHVwZGF0ZXNcclxuICogaGVyZSwgcGxlYXNlIG1ha2UgZXF1aXZhbGVudCBjaGFuZ2VzIHRoZXJlLlxyXG4qL1xyXG52YXIgSVNfQ0hBTkdFRF9MT0NBTCA9IFwiaXNDaGFuZ2VkXCI7XHJcbnZhciBDSEFOR0VTX0xPQ0FMID0gXCJjaGFuZ2VzXCI7XHJcbnZhciBDaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvcihkZWZpbml0aW9uLCBjaGFuZ2VEZXRlY3Rpb25VdGlsVmFyTmFtZSwgYWJzdHJhY3RDaGFuZ2VEZXRlY3RvclZhck5hbWUpIHtcclxuICAgICAgICB0aGlzLmNoYW5nZURldGVjdGlvblV0aWxWYXJOYW1lID0gY2hhbmdlRGV0ZWN0aW9uVXRpbFZhck5hbWU7XHJcbiAgICAgICAgdGhpcy5hYnN0cmFjdENoYW5nZURldGVjdG9yVmFyTmFtZSA9IGFic3RyYWN0Q2hhbmdlRGV0ZWN0b3JWYXJOYW1lO1xyXG4gICAgICAgIHZhciBwcm9wZXJ0eUJpbmRpbmdSZWNvcmRzID0gcHJvdG9fY2hhbmdlX2RldGVjdG9yXzEuY3JlYXRlUHJvcGVydHlSZWNvcmRzKGRlZmluaXRpb24pO1xyXG4gICAgICAgIHZhciBldmVudEJpbmRpbmdSZWNvcmRzID0gcHJvdG9fY2hhbmdlX2RldGVjdG9yXzEuY3JlYXRlRXZlbnRSZWNvcmRzKGRlZmluaXRpb24pO1xyXG4gICAgICAgIHZhciBwcm9wZXJ0eUJpbmRpbmdUYXJnZXRzID0gZGVmaW5pdGlvbi5iaW5kaW5nUmVjb3Jkcy5tYXAoZnVuY3Rpb24gKGIpIHsgcmV0dXJuIGIudGFyZ2V0OyB9KTtcclxuICAgICAgICB0aGlzLmlkID0gZGVmaW5pdGlvbi5pZDtcclxuICAgICAgICB0aGlzLmNoYW5nZURldGVjdGlvblN0cmF0ZWd5ID0gZGVmaW5pdGlvbi5zdHJhdGVneTtcclxuICAgICAgICB0aGlzLmdlbkNvbmZpZyA9IGRlZmluaXRpb24uZ2VuQ29uZmlnO1xyXG4gICAgICAgIHRoaXMucmVjb3JkcyA9IHByb3BlcnR5QmluZGluZ1JlY29yZHM7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0eUJpbmRpbmdUYXJnZXRzID0gcHJvcGVydHlCaW5kaW5nVGFyZ2V0cztcclxuICAgICAgICB0aGlzLmV2ZW50QmluZGluZ3MgPSBldmVudEJpbmRpbmdSZWNvcmRzO1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aXZlUmVjb3JkcyA9IGRlZmluaXRpb24uZGlyZWN0aXZlUmVjb3JkcztcclxuICAgICAgICB0aGlzLl9uYW1lcyA9IG5ldyBjb2RlZ2VuX25hbWVfdXRpbF8xLkNvZGVnZW5OYW1lVXRpbCh0aGlzLnJlY29yZHMsIHRoaXMuZXZlbnRCaW5kaW5ncywgdGhpcy5kaXJlY3RpdmVSZWNvcmRzLCB0aGlzLmNoYW5nZURldGVjdGlvblV0aWxWYXJOYW1lKTtcclxuICAgICAgICB0aGlzLl9sb2dpYyA9IG5ldyBjb2RlZ2VuX2xvZ2ljX3V0aWxfMS5Db2RlZ2VuTG9naWNVdGlsKHRoaXMuX25hbWVzLCB0aGlzLmNoYW5nZURldGVjdGlvblV0aWxWYXJOYW1lLCB0aGlzLmNoYW5nZURldGVjdGlvblN0cmF0ZWd5KTtcclxuICAgICAgICB0aGlzLnR5cGVOYW1lID0gY29kZWdlbl9uYW1lX3V0aWxfMS5zYW5pdGl6ZU5hbWUoXCJDaGFuZ2VEZXRlY3Rvcl9cIiArIHRoaXMuaWQpO1xyXG4gICAgfVxyXG4gICAgQ2hhbmdlRGV0ZWN0b3JKSVRHZW5lcmF0b3IucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmYWN0b3J5U291cmNlID0gXCJcXG4gICAgICBcIiArIHRoaXMuZ2VuZXJhdGVTb3VyY2UoKSArIFwiXFxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRpc3BhdGNoZXIpIHtcXG4gICAgICAgIHJldHVybiBuZXcgXCIgKyB0aGlzLnR5cGVOYW1lICsgXCIoZGlzcGF0Y2hlcik7XFxuICAgICAgfVxcbiAgICBcIjtcclxuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKHRoaXMuYWJzdHJhY3RDaGFuZ2VEZXRlY3RvclZhck5hbWUsIHRoaXMuY2hhbmdlRGV0ZWN0aW9uVXRpbFZhck5hbWUsIGZhY3RvcnlTb3VyY2UpKGFic3RyYWN0X2NoYW5nZV9kZXRlY3Rvcl8xLkFic3RyYWN0Q2hhbmdlRGV0ZWN0b3IsIGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwpO1xyXG4gICAgfTtcclxuICAgIENoYW5nZURldGVjdG9ySklUR2VuZXJhdG9yLnByb3RvdHlwZS5nZW5lcmF0ZVNvdXJjZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBcIlxcbiAgICAgIHZhciBcIiArIHRoaXMudHlwZU5hbWUgKyBcIiA9IGZ1bmN0aW9uIFwiICsgdGhpcy50eXBlTmFtZSArIFwiKGRpc3BhdGNoZXIpIHtcXG4gICAgICAgIFwiICsgdGhpcy5hYnN0cmFjdENoYW5nZURldGVjdG9yVmFyTmFtZSArIFwiLmNhbGwoXFxuICAgICAgICAgICAgdGhpcywgXCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLmlkKSArIFwiLCBkaXNwYXRjaGVyLCBcIiArIHRoaXMucmVjb3Jkcy5sZW5ndGggKyBcIixcXG4gICAgICAgICAgICBcIiArIHRoaXMudHlwZU5hbWUgKyBcIi5nZW5fcHJvcGVydHlCaW5kaW5nVGFyZ2V0cywgXCIgKyB0aGlzLnR5cGVOYW1lICsgXCIuZ2VuX2RpcmVjdGl2ZUluZGljZXMsXFxuICAgICAgICAgICAgXCIgKyBjb2RlZ2VuX2ZhY2FkZV8xLmNvZGlmeSh0aGlzLmNoYW5nZURldGVjdGlvblN0cmF0ZWd5KSArIFwiKTtcXG4gICAgICAgIHRoaXMuZGVoeWRyYXRlRGlyZWN0aXZlcyhmYWxzZSk7XFxuICAgICAgfVxcblxcbiAgICAgIFwiICsgdGhpcy50eXBlTmFtZSArIFwiLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoXCIgKyB0aGlzLmFic3RyYWN0Q2hhbmdlRGV0ZWN0b3JWYXJOYW1lICsgXCIucHJvdG90eXBlKTtcXG5cXG4gICAgICBcIiArIHRoaXMudHlwZU5hbWUgKyBcIi5wcm90b3R5cGUuZGV0ZWN0Q2hhbmdlc0luUmVjb3Jkc0ludGVybmFsID0gZnVuY3Rpb24odGhyb3dPbkNoYW5nZSkge1xcbiAgICAgICAgXCIgKyB0aGlzLl9uYW1lcy5nZW5Jbml0TG9jYWxzKCkgKyBcIlxcbiAgICAgICAgdmFyIFwiICsgSVNfQ0hBTkdFRF9MT0NBTCArIFwiID0gZmFsc2U7XFxuICAgICAgICB2YXIgXCIgKyBDSEFOR0VTX0xPQ0FMICsgXCIgPSBudWxsO1xcblxcbiAgICAgICAgXCIgKyB0aGlzLnJlY29yZHMubWFwKGZ1bmN0aW9uIChyKSB7IHJldHVybiBfdGhpcy5fZ2VuUmVjb3JkKHIpOyB9KS5qb2luKFwiXFxuXCIpICsgXCJcXG4gICAgICB9XFxuXFxuICAgICAgXCIgKyB0aGlzLl9tYXliZUdlbkhhbmRsZUV2ZW50SW50ZXJuYWwoKSArIFwiXFxuXFxuICAgICAgXCIgKyB0aGlzLl9nZW5DaGVja05vQ2hhbmdlcygpICsgXCJcXG5cXG4gICAgICBcIiArIHRoaXMuX21heWJlR2VuQWZ0ZXJDb250ZW50TGlmZWN5Y2xlQ2FsbGJhY2tzKCkgKyBcIlxcblxcbiAgICAgIFwiICsgdGhpcy5fbWF5YmVHZW5BZnRlclZpZXdMaWZlY3ljbGVDYWxsYmFja3MoKSArIFwiXFxuXFxuICAgICAgXCIgKyB0aGlzLl9tYXliZUdlbkh5ZHJhdGVEaXJlY3RpdmVzKCkgKyBcIlxcblxcbiAgICAgIFwiICsgdGhpcy5fbWF5YmVHZW5EZWh5ZHJhdGVEaXJlY3RpdmVzKCkgKyBcIlxcblxcbiAgICAgIFwiICsgdGhpcy5fZ2VuUHJvcGVydHlCaW5kaW5nVGFyZ2V0cygpICsgXCJcXG5cXG4gICAgICBcIiArIHRoaXMuX2dlbkRpcmVjdGl2ZUluZGljZXMoKSArIFwiXFxuICAgIFwiO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIENoYW5nZURldGVjdG9ySklUR2VuZXJhdG9yLnByb3RvdHlwZS5fZ2VuUHJvcGVydHlCaW5kaW5nVGFyZ2V0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0cyA9IHRoaXMuX2xvZ2ljLmdlblByb3BlcnR5QmluZGluZ1RhcmdldHModGhpcy5wcm9wZXJ0eUJpbmRpbmdUYXJnZXRzLCB0aGlzLmdlbkNvbmZpZy5nZW5EZWJ1Z0luZm8pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGVOYW1lICsgXCIuZ2VuX3Byb3BlcnR5QmluZGluZ1RhcmdldHMgPSBcIiArIHRhcmdldHMgKyBcIjtcIjtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBDaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvci5wcm90b3R5cGUuX2dlbkRpcmVjdGl2ZUluZGljZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGluZGljZXMgPSB0aGlzLl9sb2dpYy5nZW5EaXJlY3RpdmVJbmRpY2VzKHRoaXMuZGlyZWN0aXZlUmVjb3Jkcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZU5hbWUgKyBcIi5nZW5fZGlyZWN0aXZlSW5kaWNlcyA9IFwiICsgaW5kaWNlcyArIFwiO1wiO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIENoYW5nZURldGVjdG9ySklUR2VuZXJhdG9yLnByb3RvdHlwZS5fbWF5YmVHZW5IYW5kbGVFdmVudEludGVybmFsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRCaW5kaW5ncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuZXZlbnRCaW5kaW5ncy5tYXAoZnVuY3Rpb24gKGViKSB7IHJldHVybiBfdGhpcy5fZ2VuRXZlbnRCaW5kaW5nKGViKTsgfSkuam9pbihcIlxcblwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXFxuICAgICAgICBcIiArIHRoaXMudHlwZU5hbWUgKyBcIi5wcm90b3R5cGUuaGFuZGxlRXZlbnRJbnRlcm5hbCA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgZWxJbmRleCwgbG9jYWxzKSB7XFxuICAgICAgICAgIHZhciBcIiArIHRoaXMuX25hbWVzLmdldFByZXZlbnREZWZhdWx0QWNjZXNvcigpICsgXCIgPSBmYWxzZTtcXG4gICAgICAgICAgXCIgKyB0aGlzLl9uYW1lcy5nZW5Jbml0RXZlbnRMb2NhbHMoKSArIFwiXFxuICAgICAgICAgIFwiICsgaGFuZGxlcnMgKyBcIlxcbiAgICAgICAgICByZXR1cm4gXCIgKyB0aGlzLl9uYW1lcy5nZXRQcmV2ZW50RGVmYXVsdEFjY2Vzb3IoKSArIFwiO1xcbiAgICAgICAgfVxcbiAgICAgIFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBDaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvci5wcm90b3R5cGUuX2dlbkV2ZW50QmluZGluZyA9IGZ1bmN0aW9uIChlYikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHJlY3MgPSBlYi5yZWNvcmRzLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gX3RoaXMuX2dlbkV2ZW50QmluZGluZ0V2YWwoZWIsIHIpOyB9KS5qb2luKFwiXFxuXCIpO1xyXG4gICAgICAgIHJldHVybiBcIlxcbiAgICBpZiAoZXZlbnROYW1lID09PSBcXFwiXCIgKyBlYi5ldmVudE5hbWUgKyBcIlxcXCIgJiYgZWxJbmRleCA9PT0gXCIgKyBlYi5lbEluZGV4ICsgXCIpIHtcXG4gICAgICBcIiArIHJlY3MgKyBcIlxcbiAgICB9XCI7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQ2hhbmdlRGV0ZWN0b3JKSVRHZW5lcmF0b3IucHJvdG90eXBlLl9nZW5FdmVudEJpbmRpbmdFdmFsID0gZnVuY3Rpb24gKGViLCByKSB7XHJcbiAgICAgICAgaWYgKHIubGFzdEluQmluZGluZykge1xyXG4gICAgICAgICAgICB2YXIgZXZhbFJlY29yZCA9IHRoaXMuX2xvZ2ljLmdlbkV2ZW50QmluZGluZ0V2YWxWYWx1ZShlYiwgcik7XHJcbiAgICAgICAgICAgIHZhciBtYXJrUGF0aCA9IHRoaXMuX2dlbk1hcmtQYXRoVG9Sb290QXNDaGVja09uY2Uocik7XHJcbiAgICAgICAgICAgIHZhciBwcmV2RGVmYXVsdCA9IHRoaXMuX2dlblVwZGF0ZVByZXZlbnREZWZhdWx0KGViLCByKTtcclxuICAgICAgICAgICAgcmV0dXJuIGV2YWxSZWNvcmQgKyBcIlxcblwiICsgbWFya1BhdGggKyBcIlxcblwiICsgcHJldkRlZmF1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9naWMuZ2VuRXZlbnRCaW5kaW5nRXZhbFZhbHVlKGViLCByKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQ2hhbmdlRGV0ZWN0b3JKSVRHZW5lcmF0b3IucHJvdG90eXBlLl9nZW5NYXJrUGF0aFRvUm9vdEFzQ2hlY2tPbmNlID0gZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICB2YXIgYnIgPSByLmJpbmRpbmdSZWNvcmQ7XHJcbiAgICAgICAgaWYgKGJyLmlzRGVmYXVsdENoYW5nZURldGVjdGlvbigpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25hbWVzLmdldERldGVjdG9yTmFtZShici5kaXJlY3RpdmVSZWNvcmQuZGlyZWN0aXZlSW5kZXgpICsgXCIubWFya1BhdGhUb1Jvb3RBc0NoZWNrT25jZSgpO1wiO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBDaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvci5wcm90b3R5cGUuX2dlblVwZGF0ZVByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24gKGViLCByKSB7XHJcbiAgICAgICAgdmFyIGxvY2FsID0gdGhpcy5fbmFtZXMuZ2V0RXZlbnRMb2NhbE5hbWUoZWIsIHIuc2VsZkluZGV4KTtcclxuICAgICAgICByZXR1cm4gXCJpZiAoXCIgKyBsb2NhbCArIFwiID09PSBmYWxzZSkgeyBcIiArIHRoaXMuX25hbWVzLmdldFByZXZlbnREZWZhdWx0QWNjZXNvcigpICsgXCIgPSB0cnVlfTtcIjtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBDaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvci5wcm90b3R5cGUuX21heWJlR2VuRGVoeWRyYXRlRGlyZWN0aXZlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZGVzdHJveVBpcGVzQ29kZSA9IHRoaXMuX25hbWVzLmdlblBpcGVPbkRlc3Ryb3koKTtcclxuICAgICAgICBpZiAoZGVzdHJveVBpcGVzQ29kZSkge1xyXG4gICAgICAgICAgICBkZXN0cm95UGlwZXNDb2RlID0gXCJpZiAoZGVzdHJveVBpcGVzKSB7IFwiICsgZGVzdHJveVBpcGVzQ29kZSArIFwiIH1cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGRlaHlkcmF0ZUZpZWxkc0NvZGUgPSB0aGlzLl9uYW1lcy5nZW5EZWh5ZHJhdGVGaWVsZHMoKTtcclxuICAgICAgICBpZiAoIWRlc3Ryb3lQaXBlc0NvZGUgJiYgIWRlaHlkcmF0ZUZpZWxkc0NvZGUpXHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICByZXR1cm4gdGhpcy50eXBlTmFtZSArIFwiLnByb3RvdHlwZS5kZWh5ZHJhdGVEaXJlY3RpdmVzID0gZnVuY3Rpb24oZGVzdHJveVBpcGVzKSB7XFxuICAgICAgICBcIiArIGRlc3Ryb3lQaXBlc0NvZGUgKyBcIlxcbiAgICAgICAgXCIgKyBkZWh5ZHJhdGVGaWVsZHNDb2RlICsgXCJcXG4gICAgfVwiO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIENoYW5nZURldGVjdG9ySklUR2VuZXJhdG9yLnByb3RvdHlwZS5fbWF5YmVHZW5IeWRyYXRlRGlyZWN0aXZlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaHlkcmF0ZURpcmVjdGl2ZXNDb2RlID0gdGhpcy5fbG9naWMuZ2VuSHlkcmF0ZURpcmVjdGl2ZXModGhpcy5kaXJlY3RpdmVSZWNvcmRzKTtcclxuICAgICAgICB2YXIgaHlkcmF0ZURldGVjdG9yc0NvZGUgPSB0aGlzLl9sb2dpYy5nZW5IeWRyYXRlRGV0ZWN0b3JzKHRoaXMuZGlyZWN0aXZlUmVjb3Jkcyk7XHJcbiAgICAgICAgaWYgKCFoeWRyYXRlRGlyZWN0aXZlc0NvZGUgJiYgIWh5ZHJhdGVEZXRlY3RvcnNDb2RlKVxyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZU5hbWUgKyBcIi5wcm90b3R5cGUuaHlkcmF0ZURpcmVjdGl2ZXMgPSBmdW5jdGlvbihkaXJlY3RpdmVzKSB7XFxuICAgICAgXCIgKyBoeWRyYXRlRGlyZWN0aXZlc0NvZGUgKyBcIlxcbiAgICAgIFwiICsgaHlkcmF0ZURldGVjdG9yc0NvZGUgKyBcIlxcbiAgICB9XCI7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQ2hhbmdlRGV0ZWN0b3JKSVRHZW5lcmF0b3IucHJvdG90eXBlLl9tYXliZUdlbkFmdGVyQ29udGVudExpZmVjeWNsZUNhbGxiYWNrcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbm90aWZpY2F0aW9ucyA9IHRoaXMuX2xvZ2ljLmdlbkNvbnRlbnRMaWZlY3ljbGVDYWxsYmFja3ModGhpcy5kaXJlY3RpdmVSZWNvcmRzKTtcclxuICAgICAgICBpZiAobm90aWZpY2F0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciBkaXJlY3RpdmVOb3RpZmljYXRpb25zID0gbm90aWZpY2F0aW9ucy5qb2luKFwiXFxuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gXCJcXG4gICAgICAgIFwiICsgdGhpcy50eXBlTmFtZSArIFwiLnByb3RvdHlwZS5hZnRlckNvbnRlbnRMaWZlY3ljbGVDYWxsYmFja3NJbnRlcm5hbCA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICBcIiArIGRpcmVjdGl2ZU5vdGlmaWNhdGlvbnMgKyBcIlxcbiAgICAgICAgfVxcbiAgICAgIFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBDaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvci5wcm90b3R5cGUuX21heWJlR2VuQWZ0ZXJWaWV3TGlmZWN5Y2xlQ2FsbGJhY2tzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBub3RpZmljYXRpb25zID0gdGhpcy5fbG9naWMuZ2VuVmlld0xpZmVjeWNsZUNhbGxiYWNrcyh0aGlzLmRpcmVjdGl2ZVJlY29yZHMpO1xyXG4gICAgICAgIGlmIChub3RpZmljYXRpb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZU5vdGlmaWNhdGlvbnMgPSBub3RpZmljYXRpb25zLmpvaW4oXCJcXG5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlxcbiAgICAgICAgXCIgKyB0aGlzLnR5cGVOYW1lICsgXCIucHJvdG90eXBlLmFmdGVyVmlld0xpZmVjeWNsZUNhbGxiYWNrc0ludGVybmFsID0gZnVuY3Rpb24oKSB7XFxuICAgICAgICAgIFwiICsgZGlyZWN0aXZlTm90aWZpY2F0aW9ucyArIFwiXFxuICAgICAgICB9XFxuICAgICAgXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIENoYW5nZURldGVjdG9ySklUR2VuZXJhdG9yLnByb3RvdHlwZS5fZ2VuUmVjb3JkID0gZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICB2YXIgcmVjO1xyXG4gICAgICAgIGlmIChyLmlzTGlmZUN5Y2xlUmVjb3JkKCkpIHtcclxuICAgICAgICAgICAgcmVjID0gdGhpcy5fZ2VuRGlyZWN0aXZlTGlmZWN5Y2xlKHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChyLmlzUGlwZVJlY29yZCgpKSB7XHJcbiAgICAgICAgICAgIHJlYyA9IHRoaXMuX2dlblBpcGVDaGVjayhyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlYyA9IHRoaXMuX2dlblJlZmVyZW5jZUNoZWNrKHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gXCJcXG4gICAgICBcIiArIHRoaXMuX21heWJlRmlyc3RJbkJpbmRpbmcocikgKyBcIlxcbiAgICAgIFwiICsgcmVjICsgXCJcXG4gICAgICBcIiArIHRoaXMuX21heWJlR2VuTGFzdEluRGlyZWN0aXZlKHIpICsgXCJcXG4gICAgXCI7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQ2hhbmdlRGV0ZWN0b3JKSVRHZW5lcmF0b3IucHJvdG90eXBlLl9nZW5EaXJlY3RpdmVMaWZlY3ljbGUgPSBmdW5jdGlvbiAocikge1xyXG4gICAgICAgIGlmIChyLm5hbWUgPT09IFwiRG9DaGVja1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZW5PbkNoZWNrKHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChyLm5hbWUgPT09IFwiT25Jbml0XCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dlbk9uSW5pdChyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoci5uYW1lID09PSBcIk9uQ2hhbmdlc1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZW5PbkNoYW5nZShyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihcIlVua25vd24gbGlmZWN5Y2xlIGV2ZW50ICdcIiArIHIubmFtZSArIFwiJ1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQ2hhbmdlRGV0ZWN0b3JKSVRHZW5lcmF0b3IucHJvdG90eXBlLl9nZW5QaXBlQ2hlY2sgPSBmdW5jdGlvbiAocikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9uYW1lcy5nZXRMb2NhbE5hbWUoci5jb250ZXh0SW5kZXgpO1xyXG4gICAgICAgIHZhciBhcmdTdHJpbmcgPSByLmFyZ3MubWFwKGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIF90aGlzLl9uYW1lcy5nZXRMb2NhbE5hbWUoYXJnKTsgfSkuam9pbihcIiwgXCIpO1xyXG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMuX25hbWVzLmdldEZpZWxkTmFtZShyLnNlbGZJbmRleCk7XHJcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gdGhpcy5fbmFtZXMuZ2V0TG9jYWxOYW1lKHIuc2VsZkluZGV4KTtcclxuICAgICAgICB2YXIgcGlwZSA9IHRoaXMuX25hbWVzLmdldFBpcGVOYW1lKHIuc2VsZkluZGV4KTtcclxuICAgICAgICB2YXIgcGlwZU5hbWUgPSByLm5hbWU7XHJcbiAgICAgICAgdmFyIGluaXQgPSBcIlxcbiAgICAgIGlmIChcIiArIHBpcGUgKyBcIiA9PT0gXCIgKyB0aGlzLmNoYW5nZURldGVjdGlvblV0aWxWYXJOYW1lICsgXCIudW5pbml0aWFsaXplZCkge1xcbiAgICAgICAgXCIgKyBwaXBlICsgXCIgPSBcIiArIHRoaXMuX25hbWVzLmdldFBpcGVzQWNjZXNzb3JOYW1lKCkgKyBcIi5nZXQoJ1wiICsgcGlwZU5hbWUgKyBcIicpO1xcbiAgICAgIH1cXG4gICAgXCI7XHJcbiAgICAgICAgdmFyIHJlYWQgPSBuZXdWYWx1ZSArIFwiID0gXCIgKyBwaXBlICsgXCIucGlwZS50cmFuc2Zvcm0oXCIgKyBjb250ZXh0ICsgXCIsIFtcIiArIGFyZ1N0cmluZyArIFwiXSk7XCI7XHJcbiAgICAgICAgdmFyIGNvbnRleE9yQXJnQ2hlY2sgPSByLmFyZ3MubWFwKGZ1bmN0aW9uIChhKSB7IHJldHVybiBfdGhpcy5fbmFtZXMuZ2V0Q2hhbmdlTmFtZShhKTsgfSk7XHJcbiAgICAgICAgY29udGV4T3JBcmdDaGVjay5wdXNoKHRoaXMuX25hbWVzLmdldENoYW5nZU5hbWUoci5jb250ZXh0SW5kZXgpKTtcclxuICAgICAgICB2YXIgY29uZGl0aW9uID0gXCIhXCIgKyBwaXBlICsgXCIucHVyZSB8fCAoXCIgKyBjb250ZXhPckFyZ0NoZWNrLmpvaW4oXCIgfHwgXCIpICsgXCIpXCI7XHJcbiAgICAgICAgdmFyIGNoZWNrID0gXCJcXG4gICAgICBpZiAoXCIgKyBvbGRWYWx1ZSArIFwiICE9PSBcIiArIG5ld1ZhbHVlICsgXCIpIHtcXG4gICAgICAgIFwiICsgbmV3VmFsdWUgKyBcIiA9IFwiICsgdGhpcy5jaGFuZ2VEZXRlY3Rpb25VdGlsVmFyTmFtZSArIFwiLnVud3JhcFZhbHVlKFwiICsgbmV3VmFsdWUgKyBcIilcXG4gICAgICAgIFwiICsgdGhpcy5fZ2VuQ2hhbmdlTWFya2VyKHIpICsgXCJcXG4gICAgICAgIFwiICsgdGhpcy5fZ2VuVXBkYXRlRGlyZWN0aXZlT3JFbGVtZW50KHIpICsgXCJcXG4gICAgICAgIFwiICsgdGhpcy5fZ2VuQWRkVG9DaGFuZ2VzKHIpICsgXCJcXG4gICAgICAgIFwiICsgb2xkVmFsdWUgKyBcIiA9IFwiICsgbmV3VmFsdWUgKyBcIjtcXG4gICAgICB9XFxuICAgIFwiO1xyXG4gICAgICAgIHZhciBnZW5Db2RlID0gci5zaG91bGRCZUNoZWNrZWQoKSA/IFwiXCIgKyByZWFkICsgY2hlY2sgOiByZWFkO1xyXG4gICAgICAgIGlmIChyLmlzVXNlZEJ5T3RoZXJSZWNvcmQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5pdCArIFwiIGlmIChcIiArIGNvbmRpdGlvbiArIFwiKSB7IFwiICsgZ2VuQ29kZSArIFwiIH0gZWxzZSB7IFwiICsgbmV3VmFsdWUgKyBcIiA9IFwiICsgb2xkVmFsdWUgKyBcIjsgfVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluaXQgKyBcIiBpZiAoXCIgKyBjb25kaXRpb24gKyBcIikgeyBcIiArIGdlbkNvZGUgKyBcIiB9XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIENoYW5nZURldGVjdG9ySklUR2VuZXJhdG9yLnByb3RvdHlwZS5fZ2VuUmVmZXJlbmNlQ2hlY2sgPSBmdW5jdGlvbiAocikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5fbmFtZXMuZ2V0RmllbGROYW1lKHIuc2VsZkluZGV4KTtcclxuICAgICAgICB2YXIgbmV3VmFsdWUgPSB0aGlzLl9uYW1lcy5nZXRMb2NhbE5hbWUoci5zZWxmSW5kZXgpO1xyXG4gICAgICAgIHZhciByZWFkID0gXCJcXG4gICAgICBcIiArIHRoaXMuX2xvZ2ljLmdlblByb3BlcnR5QmluZGluZ0V2YWxWYWx1ZShyKSArIFwiXFxuICAgIFwiO1xyXG4gICAgICAgIHZhciBjaGVjayA9IFwiXFxuICAgICAgaWYgKFwiICsgbmV3VmFsdWUgKyBcIiAhPT0gXCIgKyBvbGRWYWx1ZSArIFwiKSB7XFxuICAgICAgICBcIiArIHRoaXMuX2dlbkNoYW5nZU1hcmtlcihyKSArIFwiXFxuICAgICAgICBcIiArIHRoaXMuX2dlblVwZGF0ZURpcmVjdGl2ZU9yRWxlbWVudChyKSArIFwiXFxuICAgICAgICBcIiArIHRoaXMuX2dlbkFkZFRvQ2hhbmdlcyhyKSArIFwiXFxuICAgICAgICBcIiArIG9sZFZhbHVlICsgXCIgPSBcIiArIG5ld1ZhbHVlICsgXCI7XFxuICAgICAgfVxcbiAgICBcIjtcclxuICAgICAgICB2YXIgZ2VuQ29kZSA9IHIuc2hvdWxkQmVDaGVja2VkKCkgPyBcIlwiICsgcmVhZCArIGNoZWNrIDogcmVhZDtcclxuICAgICAgICBpZiAoci5pc1B1cmVGdW5jdGlvbigpKSB7XHJcbiAgICAgICAgICAgIHZhciBjb25kaXRpb24gPSByLmFyZ3MubWFwKGZ1bmN0aW9uIChhKSB7IHJldHVybiBfdGhpcy5fbmFtZXMuZ2V0Q2hhbmdlTmFtZShhKTsgfSkuam9pbihcIiB8fCBcIik7XHJcbiAgICAgICAgICAgIGlmIChyLmlzVXNlZEJ5T3RoZXJSZWNvcmQoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaWYgKFwiICsgY29uZGl0aW9uICsgXCIpIHsgXCIgKyBnZW5Db2RlICsgXCIgfSBlbHNlIHsgXCIgKyBuZXdWYWx1ZSArIFwiID0gXCIgKyBvbGRWYWx1ZSArIFwiOyB9XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJpZiAoXCIgKyBjb25kaXRpb24gKyBcIikgeyBcIiArIGdlbkNvZGUgKyBcIiB9XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZW5Db2RlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBDaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvci5wcm90b3R5cGUuX2dlbkNoYW5nZU1hcmtlciA9IGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgcmV0dXJuIHIuYXJndW1lbnRUb1B1cmVGdW5jdGlvbiA/IHRoaXMuX25hbWVzLmdldENoYW5nZU5hbWUoci5zZWxmSW5kZXgpICsgXCIgPSB0cnVlXCIgOiBcIlwiO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIENoYW5nZURldGVjdG9ySklUR2VuZXJhdG9yLnByb3RvdHlwZS5fZ2VuVXBkYXRlRGlyZWN0aXZlT3JFbGVtZW50ID0gZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICBpZiAoIXIubGFzdEluQmluZGluZylcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gdGhpcy5fbmFtZXMuZ2V0TG9jYWxOYW1lKHIuc2VsZkluZGV4KTtcclxuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLl9uYW1lcy5nZXRGaWVsZE5hbWUoci5zZWxmSW5kZXgpO1xyXG4gICAgICAgIHZhciBub3RpZnlEZWJ1ZyA9IHRoaXMuZ2VuQ29uZmlnLmxvZ0JpbmRpbmdVcGRhdGUgPyBcInRoaXMubG9nQmluZGluZ1VwZGF0ZShcIiArIG5ld1ZhbHVlICsgXCIpO1wiIDogXCJcIjtcclxuICAgICAgICB2YXIgYnIgPSByLmJpbmRpbmdSZWNvcmQ7XHJcbiAgICAgICAgaWYgKGJyLnRhcmdldC5pc0RpcmVjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIHZhciBkaXJlY3RpdmVQcm9wZXJ0eSA9IHRoaXMuX25hbWVzLmdldERpcmVjdGl2ZU5hbWUoYnIuZGlyZWN0aXZlUmVjb3JkLmRpcmVjdGl2ZUluZGV4KSArIFwiLlwiICsgYnIudGFyZ2V0Lm5hbWU7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlxcbiAgICAgICAgXCIgKyB0aGlzLl9nZW5UaHJvd09uQ2hhbmdlQ2hlY2sob2xkVmFsdWUsIG5ld1ZhbHVlKSArIFwiXFxuICAgICAgICBcIiArIGRpcmVjdGl2ZVByb3BlcnR5ICsgXCIgPSBcIiArIG5ld1ZhbHVlICsgXCI7XFxuICAgICAgICBcIiArIG5vdGlmeURlYnVnICsgXCJcXG4gICAgICAgIFwiICsgSVNfQ0hBTkdFRF9MT0NBTCArIFwiID0gdHJ1ZTtcXG4gICAgICBcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlxcbiAgICAgICAgXCIgKyB0aGlzLl9nZW5UaHJvd09uQ2hhbmdlQ2hlY2sob2xkVmFsdWUsIG5ld1ZhbHVlKSArIFwiXFxuICAgICAgICB0aGlzLm5vdGlmeURpc3BhdGNoZXIoXCIgKyBuZXdWYWx1ZSArIFwiKTtcXG4gICAgICAgIFwiICsgbm90aWZ5RGVidWcgKyBcIlxcbiAgICAgIFwiO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBDaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvci5wcm90b3R5cGUuX2dlblRocm93T25DaGFuZ2VDaGVjayA9IGZ1bmN0aW9uIChvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcclxuICAgICAgICBpZiAodGhpcy5nZW5Db25maWcuZ2VuQ2hlY2tOb0NoYW5nZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXFxuICAgICAgICBpZih0aHJvd09uQ2hhbmdlKSB7XFxuICAgICAgICAgIHRoaXMudGhyb3dPbkNoYW5nZUVycm9yKFwiICsgb2xkVmFsdWUgKyBcIiwgXCIgKyBuZXdWYWx1ZSArIFwiKTtcXG4gICAgICAgIH1cXG4gICAgICAgIFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBDaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvci5wcm90b3R5cGUuX2dlbkNoZWNrTm9DaGFuZ2VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmdlbkNvbmZpZy5nZW5DaGVja05vQ2hhbmdlcykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50eXBlTmFtZSArIFwiLnByb3RvdHlwZS5jaGVja05vQ2hhbmdlcyA9IGZ1bmN0aW9uKCkgeyB0aGlzLnJ1bkRldGVjdENoYW5nZXModHJ1ZSk7IH1cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQ2hhbmdlRGV0ZWN0b3JKSVRHZW5lcmF0b3IucHJvdG90eXBlLl9nZW5BZGRUb0NoYW5nZXMgPSBmdW5jdGlvbiAocikge1xyXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IHRoaXMuX25hbWVzLmdldExvY2FsTmFtZShyLnNlbGZJbmRleCk7XHJcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5fbmFtZXMuZ2V0RmllbGROYW1lKHIuc2VsZkluZGV4KTtcclxuICAgICAgICBpZiAoIXIuYmluZGluZ1JlY29yZC5jYWxsT25DaGFuZ2VzKCkpXHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIHJldHVybiBDSEFOR0VTX0xPQ0FMICsgXCIgPSB0aGlzLmFkZENoYW5nZShcIiArIENIQU5HRVNfTE9DQUwgKyBcIiwgXCIgKyBvbGRWYWx1ZSArIFwiLCBcIiArIG5ld1ZhbHVlICsgXCIpO1wiO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIENoYW5nZURldGVjdG9ySklUR2VuZXJhdG9yLnByb3RvdHlwZS5fbWF5YmVGaXJzdEluQmluZGluZyA9IGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgdmFyIHByZXYgPSBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLnByb3RvQnlJbmRleCh0aGlzLnJlY29yZHMsIHIuc2VsZkluZGV4IC0gMSk7XHJcbiAgICAgICAgdmFyIGZpcnN0SW5CaW5kbmcgPSBsYW5nXzEuaXNCbGFuayhwcmV2KSB8fCBwcmV2LmJpbmRpbmdSZWNvcmQgIT09IHIuYmluZGluZ1JlY29yZDtcclxuICAgICAgICByZXR1cm4gZmlyc3RJbkJpbmRuZyAmJiAhci5iaW5kaW5nUmVjb3JkLmlzRGlyZWN0aXZlTGlmZWN5Y2xlKCkgP1xyXG4gICAgICAgICAgICB0aGlzLl9uYW1lcy5nZXRQcm9wZXJ0eUJpbmRpbmdJbmRleCgpICsgXCIgPSBcIiArIHIucHJvcGVydHlCaW5kaW5nSW5kZXggKyBcIjtcIiA6XHJcbiAgICAgICAgICAgICcnO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIENoYW5nZURldGVjdG9ySklUR2VuZXJhdG9yLnByb3RvdHlwZS5fbWF5YmVHZW5MYXN0SW5EaXJlY3RpdmUgPSBmdW5jdGlvbiAocikge1xyXG4gICAgICAgIGlmICghci5sYXN0SW5EaXJlY3RpdmUpXHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIHJldHVybiBcIlxcbiAgICAgIFwiICsgQ0hBTkdFU19MT0NBTCArIFwiID0gbnVsbDtcXG4gICAgICBcIiArIHRoaXMuX2dlbk5vdGlmeU9uUHVzaERldGVjdG9ycyhyKSArIFwiXFxuICAgICAgXCIgKyBJU19DSEFOR0VEX0xPQ0FMICsgXCIgPSBmYWxzZTtcXG4gICAgXCI7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQ2hhbmdlRGV0ZWN0b3JKSVRHZW5lcmF0b3IucHJvdG90eXBlLl9nZW5PbkNoZWNrID0gZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICB2YXIgYnIgPSByLmJpbmRpbmdSZWNvcmQ7XHJcbiAgICAgICAgcmV0dXJuIFwiaWYgKCF0aHJvd09uQ2hhbmdlKSBcIiArIHRoaXMuX25hbWVzLmdldERpcmVjdGl2ZU5hbWUoYnIuZGlyZWN0aXZlUmVjb3JkLmRpcmVjdGl2ZUluZGV4KSArIFwiLmRvQ2hlY2soKTtcIjtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBDaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvci5wcm90b3R5cGUuX2dlbk9uSW5pdCA9IGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgdmFyIGJyID0gci5iaW5kaW5nUmVjb3JkO1xyXG4gICAgICAgIHJldHVybiBcImlmICghdGhyb3dPbkNoYW5nZSAmJiAhXCIgKyB0aGlzLl9uYW1lcy5nZXRBbHJlYWR5Q2hlY2tlZE5hbWUoKSArIFwiKSBcIiArIHRoaXMuX25hbWVzLmdldERpcmVjdGl2ZU5hbWUoYnIuZGlyZWN0aXZlUmVjb3JkLmRpcmVjdGl2ZUluZGV4KSArIFwiLm9uSW5pdCgpO1wiO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIENoYW5nZURldGVjdG9ySklUR2VuZXJhdG9yLnByb3RvdHlwZS5fZ2VuT25DaGFuZ2UgPSBmdW5jdGlvbiAocikge1xyXG4gICAgICAgIHZhciBiciA9IHIuYmluZGluZ1JlY29yZDtcclxuICAgICAgICByZXR1cm4gXCJpZiAoIXRocm93T25DaGFuZ2UgJiYgXCIgKyBDSEFOR0VTX0xPQ0FMICsgXCIpIFwiICsgdGhpcy5fbmFtZXMuZ2V0RGlyZWN0aXZlTmFtZShici5kaXJlY3RpdmVSZWNvcmQuZGlyZWN0aXZlSW5kZXgpICsgXCIub25DaGFuZ2VzKFwiICsgQ0hBTkdFU19MT0NBTCArIFwiKTtcIjtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBDaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvci5wcm90b3R5cGUuX2dlbk5vdGlmeU9uUHVzaERldGVjdG9ycyA9IGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgdmFyIGJyID0gci5iaW5kaW5nUmVjb3JkO1xyXG4gICAgICAgIGlmICghci5sYXN0SW5EaXJlY3RpdmUgfHwgYnIuaXNEZWZhdWx0Q2hhbmdlRGV0ZWN0aW9uKCkpXHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIHZhciByZXRWYWwgPSBcIlxcbiAgICAgIGlmKFwiICsgSVNfQ0hBTkdFRF9MT0NBTCArIFwiKSB7XFxuICAgICAgICBcIiArIHRoaXMuX25hbWVzLmdldERldGVjdG9yTmFtZShici5kaXJlY3RpdmVSZWNvcmQuZGlyZWN0aXZlSW5kZXgpICsgXCIubWFya0FzQ2hlY2tPbmNlKCk7XFxuICAgICAgfVxcbiAgICBcIjtcclxuICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvcjtcclxufSkoKTtcclxuZXhwb3J0cy5DaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvciA9IENoYW5nZURldGVjdG9ySklUR2VuZXJhdG9yO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFuZ2VfZGV0ZWN0aW9uX2ppdF9nZW5lcmF0b3IuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgZXhjZXB0aW9uc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2V4Y2VwdGlvbnMnKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XHJcbnZhciBwaXBlX2xpZmVjeWNsZV9yZWZsZWN0b3JfMSA9IHJlcXVpcmUoJy4vcGlwZV9saWZlY3ljbGVfcmVmbGVjdG9yJyk7XHJcbnZhciBiaW5kaW5nX3JlY29yZF8xID0gcmVxdWlyZSgnLi9iaW5kaW5nX3JlY29yZCcpO1xyXG52YXIgZGlyZWN0aXZlX3JlY29yZF8xID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVfcmVjb3JkJyk7XHJcbi8qKlxyXG4gKiBJbmRpY2F0ZXMgdGhhdCB0aGUgcmVzdWx0IG9mIGEge0BsaW5rIFBpcGVNZXRhZGF0YX0gdHJhbnNmb3JtYXRpb24gaGFzIGNoYW5nZWQgZXZlbiB0aG91Z2ggdGhlXHJcbiAqIHJlZmVyZW5jZVxyXG4gKiBoYXMgbm90IGNoYW5nZWQuXHJcbiAqXHJcbiAqIFRoZSB3cmFwcGVkIHZhbHVlIHdpbGwgYmUgdW53cmFwcGVkIGJ5IGNoYW5nZSBkZXRlY3Rpb24sIGFuZCB0aGUgdW53cmFwcGVkIHZhbHVlIHdpbGwgYmUgc3RvcmVkLlxyXG4gKlxyXG4gKiBFeGFtcGxlOlxyXG4gKlxyXG4gKiBgYGBcclxuICogaWYgKHRoaXMuX2xhdGVzdFZhbHVlID09PSB0aGlzLl9sYXRlc3RSZXR1cm5lZFZhbHVlKSB7XHJcbiAqICAgIHJldHVybiB0aGlzLl9sYXRlc3RSZXR1cm5lZFZhbHVlO1xyXG4gKiAgfSBlbHNlIHtcclxuICogICAgdGhpcy5fbGF0ZXN0UmV0dXJuZWRWYWx1ZSA9IHRoaXMuX2xhdGVzdFZhbHVlO1xyXG4gKiAgICByZXR1cm4gV3JhcHBlZFZhbHVlLndyYXAodGhpcy5fbGF0ZXN0VmFsdWUpOyAvLyB0aGlzIHdpbGwgZm9yY2UgdXBkYXRlXHJcbiAqICB9XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIFdyYXBwZWRWYWx1ZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBXcmFwcGVkVmFsdWUod3JhcHBlZCkge1xyXG4gICAgICAgIHRoaXMud3JhcHBlZCA9IHdyYXBwZWQ7XHJcbiAgICB9XHJcbiAgICBXcmFwcGVkVmFsdWUud3JhcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHZhciB3ID0gX3dyYXBwZWRWYWx1ZXNbX3dyYXBwZWRJbmRleCsrICUgNV07XHJcbiAgICAgICAgdy53cmFwcGVkID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHc7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFdyYXBwZWRWYWx1ZTtcclxufSkoKTtcclxuZXhwb3J0cy5XcmFwcGVkVmFsdWUgPSBXcmFwcGVkVmFsdWU7XHJcbnZhciBfd3JhcHBlZFZhbHVlcyA9IFtcclxuICAgIG5ldyBXcmFwcGVkVmFsdWUobnVsbCksXHJcbiAgICBuZXcgV3JhcHBlZFZhbHVlKG51bGwpLFxyXG4gICAgbmV3IFdyYXBwZWRWYWx1ZShudWxsKSxcclxuICAgIG5ldyBXcmFwcGVkVmFsdWUobnVsbCksXHJcbiAgICBuZXcgV3JhcHBlZFZhbHVlKG51bGwpXHJcbl07XHJcbnZhciBfd3JhcHBlZEluZGV4ID0gMDtcclxudmFyIFNpbXBsZUNoYW5nZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTaW1wbGVDaGFuZ2UocHJldmlvdXNWYWx1ZSwgY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5wcmV2aW91c1ZhbHVlID0gcHJldmlvdXNWYWx1ZTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IGN1cnJlbnRWYWx1ZTtcclxuICAgIH1cclxuICAgIFNpbXBsZUNoYW5nZS5wcm90b3R5cGUuaXNGaXJzdENoYW5nZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMucHJldmlvdXNWYWx1ZSA9PT0gQ2hhbmdlRGV0ZWN0aW9uVXRpbC51bmluaXRpYWxpemVkOyB9O1xyXG4gICAgcmV0dXJuIFNpbXBsZUNoYW5nZTtcclxufSkoKTtcclxuZXhwb3J0cy5TaW1wbGVDaGFuZ2UgPSBTaW1wbGVDaGFuZ2U7XHJcbnZhciBfc2ltcGxlQ2hhbmdlc0luZGV4ID0gMDtcclxudmFyIF9zaW1wbGVDaGFuZ2VzID0gW1xyXG4gICAgbmV3IFNpbXBsZUNoYW5nZShudWxsLCBudWxsKSxcclxuICAgIG5ldyBTaW1wbGVDaGFuZ2UobnVsbCwgbnVsbCksXHJcbiAgICBuZXcgU2ltcGxlQ2hhbmdlKG51bGwsIG51bGwpLFxyXG4gICAgbmV3IFNpbXBsZUNoYW5nZShudWxsLCBudWxsKSxcclxuICAgIG5ldyBTaW1wbGVDaGFuZ2UobnVsbCwgbnVsbCksXHJcbiAgICBuZXcgU2ltcGxlQ2hhbmdlKG51bGwsIG51bGwpLFxyXG4gICAgbmV3IFNpbXBsZUNoYW5nZShudWxsLCBudWxsKSxcclxuICAgIG5ldyBTaW1wbGVDaGFuZ2UobnVsbCwgbnVsbCksXHJcbiAgICBuZXcgU2ltcGxlQ2hhbmdlKG51bGwsIG51bGwpLFxyXG4gICAgbmV3IFNpbXBsZUNoYW5nZShudWxsLCBudWxsKSxcclxuICAgIG5ldyBTaW1wbGVDaGFuZ2UobnVsbCwgbnVsbCksXHJcbiAgICBuZXcgU2ltcGxlQ2hhbmdlKG51bGwsIG51bGwpLFxyXG4gICAgbmV3IFNpbXBsZUNoYW5nZShudWxsLCBudWxsKSxcclxuICAgIG5ldyBTaW1wbGVDaGFuZ2UobnVsbCwgbnVsbCksXHJcbiAgICBuZXcgU2ltcGxlQ2hhbmdlKG51bGwsIG51bGwpLFxyXG4gICAgbmV3IFNpbXBsZUNoYW5nZShudWxsLCBudWxsKSxcclxuICAgIG5ldyBTaW1wbGVDaGFuZ2UobnVsbCwgbnVsbCksXHJcbiAgICBuZXcgU2ltcGxlQ2hhbmdlKG51bGwsIG51bGwpLFxyXG4gICAgbmV3IFNpbXBsZUNoYW5nZShudWxsLCBudWxsKSxcclxuICAgIG5ldyBTaW1wbGVDaGFuZ2UobnVsbCwgbnVsbClcclxuXTtcclxuZnVuY3Rpb24gX3NpbXBsZUNoYW5nZShwcmV2aW91c1ZhbHVlLCBjdXJyZW50VmFsdWUpIHtcclxuICAgIHZhciBpbmRleCA9IF9zaW1wbGVDaGFuZ2VzSW5kZXgrKyAlIDIwO1xyXG4gICAgdmFyIHMgPSBfc2ltcGxlQ2hhbmdlc1tpbmRleF07XHJcbiAgICBzLnByZXZpb3VzVmFsdWUgPSBwcmV2aW91c1ZhbHVlO1xyXG4gICAgcy5jdXJyZW50VmFsdWUgPSBjdXJyZW50VmFsdWU7XHJcbiAgICByZXR1cm4gcztcclxufVxyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpyZXF1aXJlUGFyYW1ldGVyVHlwZSAqL1xyXG52YXIgQ2hhbmdlRGV0ZWN0aW9uVXRpbCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDaGFuZ2VEZXRlY3Rpb25VdGlsKCkge1xyXG4gICAgfVxyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uVXRpbC5hcnJheUZuMCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdOyB9O1xyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uVXRpbC5hcnJheUZuMSA9IGZ1bmN0aW9uIChhMSkgeyByZXR1cm4gW2ExXTsgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwuYXJyYXlGbjIgPSBmdW5jdGlvbiAoYTEsIGEyKSB7IHJldHVybiBbYTEsIGEyXTsgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwuYXJyYXlGbjMgPSBmdW5jdGlvbiAoYTEsIGEyLCBhMykgeyByZXR1cm4gW2ExLCBhMiwgYTNdOyB9O1xyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uVXRpbC5hcnJheUZuNCA9IGZ1bmN0aW9uIChhMSwgYTIsIGEzLCBhNCkgeyByZXR1cm4gW2ExLCBhMiwgYTMsIGE0XTsgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwuYXJyYXlGbjUgPSBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1KSB7IHJldHVybiBbYTEsIGEyLCBhMywgYTQsIGE1XTsgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwuYXJyYXlGbjYgPSBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNikgeyByZXR1cm4gW2ExLCBhMiwgYTMsIGE0LCBhNSwgYTZdOyB9O1xyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uVXRpbC5hcnJheUZuNyA9IGZ1bmN0aW9uIChhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNykgeyByZXR1cm4gW2ExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3XTsgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwuYXJyYXlGbjggPSBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KSB7XHJcbiAgICAgICAgcmV0dXJuIFthMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYThdO1xyXG4gICAgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwuYXJyYXlGbjkgPSBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSkge1xyXG4gICAgICAgIHJldHVybiBbYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOV07XHJcbiAgICB9O1xyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uVXRpbC5vcGVyYXRpb25fbmVnYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAhdmFsdWU7IH07XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25VdGlsLm9wZXJhdGlvbl9hZGQgPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHsgcmV0dXJuIGxlZnQgKyByaWdodDsgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwub3BlcmF0aW9uX3N1YnRyYWN0ID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0KSB7IHJldHVybiBsZWZ0IC0gcmlnaHQ7IH07XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25VdGlsLm9wZXJhdGlvbl9tdWx0aXBseSA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCkgeyByZXR1cm4gbGVmdCAqIHJpZ2h0OyB9O1xyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uVXRpbC5vcGVyYXRpb25fZGl2aWRlID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0KSB7IHJldHVybiBsZWZ0IC8gcmlnaHQ7IH07XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25VdGlsLm9wZXJhdGlvbl9yZW1haW5kZXIgPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHsgcmV0dXJuIGxlZnQgJSByaWdodDsgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwub3BlcmF0aW9uX2VxdWFscyA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCkgeyByZXR1cm4gbGVmdCA9PSByaWdodDsgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwub3BlcmF0aW9uX25vdF9lcXVhbHMgPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHsgcmV0dXJuIGxlZnQgIT0gcmlnaHQ7IH07XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25VdGlsLm9wZXJhdGlvbl9pZGVudGljYWwgPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHsgcmV0dXJuIGxlZnQgPT09IHJpZ2h0OyB9O1xyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uVXRpbC5vcGVyYXRpb25fbm90X2lkZW50aWNhbCA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCkgeyByZXR1cm4gbGVmdCAhPT0gcmlnaHQ7IH07XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25VdGlsLm9wZXJhdGlvbl9sZXNzX3RoZW4gPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHsgcmV0dXJuIGxlZnQgPCByaWdodDsgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwub3BlcmF0aW9uX2dyZWF0ZXJfdGhlbiA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCkgeyByZXR1cm4gbGVmdCA+IHJpZ2h0OyB9O1xyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uVXRpbC5vcGVyYXRpb25fbGVzc19vcl9lcXVhbHNfdGhlbiA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCkgeyByZXR1cm4gbGVmdCA8PSByaWdodDsgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwub3BlcmF0aW9uX2dyZWF0ZXJfb3JfZXF1YWxzX3RoZW4gPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHsgcmV0dXJuIGxlZnQgPj0gcmlnaHQ7IH07XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25VdGlsLm9wZXJhdGlvbl9sb2dpY2FsX2FuZCA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCkgeyByZXR1cm4gbGVmdCAmJiByaWdodDsgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwub3BlcmF0aW9uX2xvZ2ljYWxfb3IgPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHsgcmV0dXJuIGxlZnQgfHwgcmlnaHQ7IH07XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25VdGlsLmNvbmQgPSBmdW5jdGlvbiAoY29uZCwgdHJ1ZVZhbCwgZmFsc2VWYWwpIHsgcmV0dXJuIGNvbmQgPyB0cnVlVmFsIDogZmFsc2VWYWw7IH07XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25VdGlsLm1hcEZuID0gZnVuY3Rpb24gKGtleXMpIHtcclxuICAgICAgICBmdW5jdGlvbiBidWlsZE1hcCh2YWx1ZXMpIHtcclxuICAgICAgICAgICAgdmFyIHJlcyA9IGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLnNldChyZXMsIGtleXNbaV0sIHZhbHVlc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgc3dpdGNoIChrZXlzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH07XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEpIHsgcmV0dXJuIGJ1aWxkTWFwKFthMV0pOyB9O1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGExLCBhMikgeyByZXR1cm4gYnVpbGRNYXAoW2ExLCBhMl0pOyB9O1xyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGExLCBhMiwgYTMpIHsgcmV0dXJuIGJ1aWxkTWFwKFthMSwgYTIsIGEzXSk7IH07XHJcbiAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQpIHsgcmV0dXJuIGJ1aWxkTWFwKFthMSwgYTIsIGEzLCBhNF0pOyB9O1xyXG4gICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0LCBhNSkgeyByZXR1cm4gYnVpbGRNYXAoW2ExLCBhMiwgYTMsIGE0LCBhNV0pOyB9O1xyXG4gICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHsgcmV0dXJuIGJ1aWxkTWFwKFthMSwgYTIsIGEzLCBhNCwgYTUsIGE2XSk7IH07XHJcbiAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHsgcmV0dXJuIGJ1aWxkTWFwKFthMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhN10pOyB9O1xyXG4gICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCkgeyByZXR1cm4gYnVpbGRNYXAoW2ExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOF0pOyB9O1xyXG4gICAgICAgICAgICBjYXNlIDk6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnVpbGRNYXAoW2ExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTldKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oXCJEb2VzIG5vdCBzdXBwb3J0IGxpdGVyYWwgbWFwcyB3aXRoIG1vcmUgdGhhbiA5IGVsZW1lbnRzXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25VdGlsLmtleWVkQWNjZXNzID0gZnVuY3Rpb24gKG9iaiwgYXJncykgeyByZXR1cm4gb2JqW2FyZ3NbMF1dOyB9O1xyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uVXRpbC51bndyYXBWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFdyYXBwZWRWYWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUud3JhcHBlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uVXRpbC5jaGFuZ2VEZXRlY3Rpb25Nb2RlID0gZnVuY3Rpb24gKHN0cmF0ZWd5KSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLmlzRGVmYXVsdENoYW5nZURldGVjdGlvblN0cmF0ZWd5KHN0cmF0ZWd5KSA/IGNvbnN0YW50c18xLkNoYW5nZURldGVjdGlvblN0cmF0ZWd5LkNoZWNrQWx3YXlzIDpcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuQ2hlY2tPbmNlO1xyXG4gICAgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwuc2ltcGxlQ2hhbmdlID0gZnVuY3Rpb24gKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRWYWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBfc2ltcGxlQ2hhbmdlKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRWYWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uVXRpbC5pc1ZhbHVlQmxhbmsgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGxhbmdfMS5pc0JsYW5rKHZhbHVlKTsgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwucyA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gbGFuZ18xLmlzUHJlc2VudCh2YWx1ZSkgPyBcIlwiICsgdmFsdWUgOiAnJzsgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwucHJvdG9CeUluZGV4ID0gZnVuY3Rpb24gKHByb3Rvcywgc2VsZkluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGZJbmRleCA8IDEgP1xyXG4gICAgICAgICAgICBudWxsIDpcclxuICAgICAgICAgICAgcHJvdG9zW3NlbGZJbmRleCAtIDFdOyAvLyBzZWxmIGluZGV4IGlzIHNoaWZ0ZWQgYnkgb25lIGJlY2F1c2Ugb2YgY29udGV4dFxyXG4gICAgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwuY2FsbFBpcGVPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoc2VsZWN0ZWRQaXBlKSB7XHJcbiAgICAgICAgaWYgKHBpcGVfbGlmZWN5Y2xlX3JlZmxlY3Rvcl8xLmltcGxlbWVudHNPbkRlc3Ryb3koc2VsZWN0ZWRQaXBlLnBpcGUpKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkUGlwZS5waXBlLm9uRGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25VdGlsLmJpbmRpbmdUYXJnZXQgPSBmdW5jdGlvbiAobW9kZSwgZWxlbWVudEluZGV4LCBuYW1lLCB1bml0LCBkZWJ1Zykge1xyXG4gICAgICAgIHJldHVybiBuZXcgYmluZGluZ19yZWNvcmRfMS5CaW5kaW5nVGFyZ2V0KG1vZGUsIGVsZW1lbnRJbmRleCwgbmFtZSwgdW5pdCwgZGVidWcpO1xyXG4gICAgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwuZGlyZWN0aXZlSW5kZXggPSBmdW5jdGlvbiAoZWxlbWVudEluZGV4LCBkaXJlY3RpdmVJbmRleCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgZGlyZWN0aXZlX3JlY29yZF8xLkRpcmVjdGl2ZUluZGV4KGVsZW1lbnRJbmRleCwgZGlyZWN0aXZlSW5kZXgpO1xyXG4gICAgfTtcclxuICAgIENoYW5nZURldGVjdGlvblV0aWwudW5pbml0aWFsaXplZCA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBPYmplY3QoKSk7XHJcbiAgICByZXR1cm4gQ2hhbmdlRGV0ZWN0aW9uVXRpbDtcclxufSkoKTtcclxuZXhwb3J0cy5DaGFuZ2VEZXRlY3Rpb25VdGlsID0gQ2hhbmdlRGV0ZWN0aW9uVXRpbDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhbmdlX2RldGVjdGlvbl91dGlsLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgY29uc3RhbnRzXzEgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xyXG52YXIgQ2hhbmdlRGV0ZWN0b3JSZWYgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ2hhbmdlRGV0ZWN0b3JSZWYoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQ2hhbmdlRGV0ZWN0b3JSZWY7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQ2hhbmdlRGV0ZWN0b3JSZWYgPSBDaGFuZ2VEZXRlY3RvclJlZjtcclxudmFyIENoYW5nZURldGVjdG9yUmVmXyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQ2hhbmdlRGV0ZWN0b3JSZWZfLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ2hhbmdlRGV0ZWN0b3JSZWZfKF9jZCkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX2NkID0gX2NkO1xyXG4gICAgfVxyXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWZfLnByb3RvdHlwZS5tYXJrRm9yQ2hlY2sgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX2NkLm1hcmtQYXRoVG9Sb290QXNDaGVja09uY2UoKTsgfTtcclxuICAgIENoYW5nZURldGVjdG9yUmVmXy5wcm90b3R5cGUuZGV0YWNoID0gZnVuY3Rpb24gKCkgeyB0aGlzLl9jZC5tb2RlID0gY29uc3RhbnRzXzEuQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGV0YWNoZWQ7IH07XHJcbiAgICBDaGFuZ2VEZXRlY3RvclJlZl8ucHJvdG90eXBlLmRldGVjdENoYW5nZXMgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX2NkLmRldGVjdENoYW5nZXMoKTsgfTtcclxuICAgIENoYW5nZURldGVjdG9yUmVmXy5wcm90b3R5cGUucmVhdHRhY2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fY2QubW9kZSA9IGNvbnN0YW50c18xLkNoYW5nZURldGVjdGlvblN0cmF0ZWd5LkNoZWNrQWx3YXlzO1xyXG4gICAgICAgIHRoaXMubWFya0ZvckNoZWNrKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENoYW5nZURldGVjdG9yUmVmXztcclxufSkoQ2hhbmdlRGV0ZWN0b3JSZWYpO1xyXG5leHBvcnRzLkNoYW5nZURldGVjdG9yUmVmXyA9IENoYW5nZURldGVjdG9yUmVmXztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhbmdlX2RldGVjdG9yX3JlZi5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgcHJvdG9fcmVjb3JkXzEgPSByZXF1aXJlKCcuL3Byb3RvX3JlY29yZCcpO1xyXG4vKipcclxuICogUmVtb3ZlcyBcImR1cGxpY2F0ZVwiIHJlY29yZHMuIEl0IGFzc3VtaW5nIHRoYXQgcmVjb3JkIGV2YWx1YXRpb24gZG9lcyBub3RcclxuICogaGF2ZSBzaWRlLWVmZmVjdHMuXHJcbiAqXHJcbiAqIFJlY29yZHMgdGhhdCBhcmUgbm90IGxhc3QgaW4gYmluZGluZ3MgYXJlIHJlbW92ZWQgYW5kIGFsbCB0aGUgaW5kaWNlc1xyXG4gKiBvZiB0aGUgcmVjb3JkcyB0aGF0IGRlcGVuZCBvbiB0aGVtIGFyZSB1cGRhdGVkLlxyXG4gKlxyXG4gKiBSZWNvcmRzIHRoYXQgYXJlIGxhc3QgaW4gYmluZGluZ3MgQ0FOTk9UIGJlIHJlbW92ZWQsIGFuZCBpbnN0ZWFkIGFyZVxyXG4gKiByZXBsYWNlZCB3aXRoIHZlcnkgY2hlYXAgU0VMRiByZWNvcmRzLlxyXG4gKi9cclxuZnVuY3Rpb24gY29hbGVzY2UocmVjb3Jkcykge1xyXG4gICAgdmFyIHJlcyA9IFtdO1xyXG4gICAgdmFyIGluZGV4TWFwID0gbmV3IGNvbGxlY3Rpb25fMS5NYXAoKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVjb3Jkcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIHZhciByID0gcmVjb3Jkc1tpXTtcclxuICAgICAgICB2YXIgcmVjb3JkID0gX3JlcGxhY2VJbmRpY2VzKHIsIHJlcy5sZW5ndGggKyAxLCBpbmRleE1hcCk7XHJcbiAgICAgICAgdmFyIG1hdGNoaW5nUmVjb3JkID0gX2ZpbmRNYXRjaGluZyhyZWNvcmQsIHJlcyk7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQobWF0Y2hpbmdSZWNvcmQpICYmIHJlY29yZC5sYXN0SW5CaW5kaW5nKSB7XHJcbiAgICAgICAgICAgIHJlcy5wdXNoKF9zZWxmUmVjb3JkKHJlY29yZCwgbWF0Y2hpbmdSZWNvcmQuc2VsZkluZGV4LCByZXMubGVuZ3RoICsgMSkpO1xyXG4gICAgICAgICAgICBpbmRleE1hcC5zZXQoci5zZWxmSW5kZXgsIG1hdGNoaW5nUmVjb3JkLnNlbGZJbmRleCk7XHJcbiAgICAgICAgICAgIG1hdGNoaW5nUmVjb3JkLnJlZmVyZW5jZWRCeVNlbGYgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsYW5nXzEuaXNQcmVzZW50KG1hdGNoaW5nUmVjb3JkKSAmJiAhcmVjb3JkLmxhc3RJbkJpbmRpbmcpIHtcclxuICAgICAgICAgICAgaWYgKHJlY29yZC5hcmd1bWVudFRvUHVyZUZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGluZ1JlY29yZC5hcmd1bWVudFRvUHVyZUZ1bmN0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbmRleE1hcC5zZXQoci5zZWxmSW5kZXgsIG1hdGNoaW5nUmVjb3JkLnNlbGZJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXMucHVzaChyZWNvcmQpO1xyXG4gICAgICAgICAgICBpbmRleE1hcC5zZXQoci5zZWxmSW5kZXgsIHJlY29yZC5zZWxmSW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZXhwb3J0cy5jb2FsZXNjZSA9IGNvYWxlc2NlO1xyXG5mdW5jdGlvbiBfc2VsZlJlY29yZChyLCBjb250ZXh0SW5kZXgsIHNlbGZJbmRleCkge1xyXG4gICAgcmV0dXJuIG5ldyBwcm90b19yZWNvcmRfMS5Qcm90b1JlY29yZChwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLlNlbGYsIFwic2VsZlwiLCBudWxsLCBbXSwgci5maXhlZEFyZ3MsIGNvbnRleHRJbmRleCwgci5kaXJlY3RpdmVJbmRleCwgc2VsZkluZGV4LCByLmJpbmRpbmdSZWNvcmQsIHIubGFzdEluQmluZGluZywgci5sYXN0SW5EaXJlY3RpdmUsIGZhbHNlLCBmYWxzZSwgci5wcm9wZXJ0eUJpbmRpbmdJbmRleCk7XHJcbn1cclxuZnVuY3Rpb24gX2ZpbmRNYXRjaGluZyhyLCBycykge1xyXG4gICAgcmV0dXJuIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5maW5kKHJzLCBmdW5jdGlvbiAocnIpIHsgcmV0dXJuIHJyLm1vZGUgIT09IHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuRGlyZWN0aXZlTGlmZWN5Y2xlICYmIF9zYW1lRGlySW5kZXgocnIsIHIpICYmXHJcbiAgICAgICAgcnIubW9kZSA9PT0gci5tb2RlICYmIGxhbmdfMS5sb29zZUlkZW50aWNhbChyci5mdW5jT3JWYWx1ZSwgci5mdW5jT3JWYWx1ZSkgJiZcclxuICAgICAgICByci5jb250ZXh0SW5kZXggPT09IHIuY29udGV4dEluZGV4ICYmIGxhbmdfMS5sb29zZUlkZW50aWNhbChyci5uYW1lLCByLm5hbWUpICYmXHJcbiAgICAgICAgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmVxdWFscyhyci5hcmdzLCByLmFyZ3MpOyB9KTtcclxufVxyXG5mdW5jdGlvbiBfc2FtZURpckluZGV4KGEsIGIpIHtcclxuICAgIHZhciBkaTEgPSBsYW5nXzEuaXNCbGFuayhhLmRpcmVjdGl2ZUluZGV4KSA/IG51bGwgOiBhLmRpcmVjdGl2ZUluZGV4LmRpcmVjdGl2ZUluZGV4O1xyXG4gICAgdmFyIGVpMSA9IGxhbmdfMS5pc0JsYW5rKGEuZGlyZWN0aXZlSW5kZXgpID8gbnVsbCA6IGEuZGlyZWN0aXZlSW5kZXguZWxlbWVudEluZGV4O1xyXG4gICAgdmFyIGRpMiA9IGxhbmdfMS5pc0JsYW5rKGIuZGlyZWN0aXZlSW5kZXgpID8gbnVsbCA6IGIuZGlyZWN0aXZlSW5kZXguZGlyZWN0aXZlSW5kZXg7XHJcbiAgICB2YXIgZWkyID0gbGFuZ18xLmlzQmxhbmsoYi5kaXJlY3RpdmVJbmRleCkgPyBudWxsIDogYi5kaXJlY3RpdmVJbmRleC5lbGVtZW50SW5kZXg7XHJcbiAgICByZXR1cm4gZGkxID09PSBkaTIgJiYgZWkxID09PSBlaTI7XHJcbn1cclxuZnVuY3Rpb24gX3JlcGxhY2VJbmRpY2VzKHIsIHNlbGZJbmRleCwgaW5kZXhNYXApIHtcclxuICAgIHZhciBhcmdzID0gci5hcmdzLm1hcChmdW5jdGlvbiAoYSkgeyByZXR1cm4gX21hcChpbmRleE1hcCwgYSk7IH0pO1xyXG4gICAgdmFyIGNvbnRleHRJbmRleCA9IF9tYXAoaW5kZXhNYXAsIHIuY29udGV4dEluZGV4KTtcclxuICAgIHJldHVybiBuZXcgcHJvdG9fcmVjb3JkXzEuUHJvdG9SZWNvcmQoci5tb2RlLCByLm5hbWUsIHIuZnVuY09yVmFsdWUsIGFyZ3MsIHIuZml4ZWRBcmdzLCBjb250ZXh0SW5kZXgsIHIuZGlyZWN0aXZlSW5kZXgsIHNlbGZJbmRleCwgci5iaW5kaW5nUmVjb3JkLCByLmxhc3RJbkJpbmRpbmcsIHIubGFzdEluRGlyZWN0aXZlLCByLmFyZ3VtZW50VG9QdXJlRnVuY3Rpb24sIHIucmVmZXJlbmNlZEJ5U2VsZiwgci5wcm9wZXJ0eUJpbmRpbmdJbmRleCk7XHJcbn1cclxuZnVuY3Rpb24gX21hcChpbmRleE1hcCwgdmFsdWUpIHtcclxuICAgIHZhciByID0gaW5kZXhNYXAuZ2V0KHZhbHVlKTtcclxuICAgIHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHIpID8gciA6IHZhbHVlO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvYWxlc2NlLmpzLm1hcCIsIid1c2Ugc3RyaWN0JzsvKipcclxuICogQ29udmVydHMgYGZ1bmNPclZhbHVlYCB0byBhIHN0cmluZyB3aGljaCBjYW4gYmUgdXNlZCBpbiBnZW5lcmF0ZWQgY29kZS5cclxuICovXHJcbmZ1bmN0aW9uIGNvZGlmeShvYmopIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmopO1xyXG59XHJcbmV4cG9ydHMuY29kaWZ5ID0gY29kaWZ5O1xyXG5mdW5jdGlvbiByYXdTdHJpbmcoc3RyKSB7XHJcbiAgICByZXR1cm4gXCInXCIgKyBzdHIgKyBcIidcIjtcclxufVxyXG5leHBvcnRzLnJhd1N0cmluZyA9IHJhd1N0cmluZztcclxuLyoqXHJcbiAqIENvbWJpbmUgdGhlIHN0cmluZ3Mgb2YgZ2VuZXJhdGVkIGNvZGUgaW50byBhIHNpbmdsZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLlxyXG4gKiBFYWNoIGVsZW1lbnQgb2YgYHZhbHNgIGlzIGV4cGVjdGVkIHRvIGJlIGEgc3RyaW5nIGxpdGVyYWwgb3IgYSBjb2RlZ2VuJ2RcclxuICogY2FsbCB0byBhIG1ldGhvZCByZXR1cm5pbmcgYSBzdHJpbmcuXHJcbiAqL1xyXG5mdW5jdGlvbiBjb21iaW5lR2VuZXJhdGVkU3RyaW5ncyh2YWxzKSB7XHJcbiAgICByZXR1cm4gdmFscy5qb2luKCcgKyAnKTtcclxufVxyXG5leHBvcnRzLmNvbWJpbmVHZW5lcmF0ZWRTdHJpbmdzID0gY29tYmluZUdlbmVyYXRlZFN0cmluZ3M7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvZGVnZW5fZmFjYWRlLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGNvZGVnZW5fZmFjYWRlXzEgPSByZXF1aXJlKCcuL2NvZGVnZW5fZmFjYWRlJyk7XHJcbnZhciBwcm90b19yZWNvcmRfMSA9IHJlcXVpcmUoJy4vcHJvdG9fcmVjb3JkJyk7XHJcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG4vKipcclxuICogQ2xhc3MgcmVzcG9uc2libGUgZm9yIHByb3ZpZGluZyBjaGFuZ2UgZGV0ZWN0aW9uIGxvZ2ljIGZvciBjaGFuZ2UgZGV0ZWN0b3IgY2xhc3Nlcy5cclxuICovXHJcbnZhciBDb2RlZ2VuTG9naWNVdGlsID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvZGVnZW5Mb2dpY1V0aWwoX25hbWVzLCBfdXRpbE5hbWUsIF9jaGFuZ2VEZXRlY3Rpb24pIHtcclxuICAgICAgICB0aGlzLl9uYW1lcyA9IF9uYW1lcztcclxuICAgICAgICB0aGlzLl91dGlsTmFtZSA9IF91dGlsTmFtZTtcclxuICAgICAgICB0aGlzLl9jaGFuZ2VEZXRlY3Rpb24gPSBfY2hhbmdlRGV0ZWN0aW9uO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZW5lcmF0ZXMgYSBzdGF0ZW1lbnQgd2hpY2ggdXBkYXRlcyB0aGUgbG9jYWwgdmFyaWFibGUgcmVwcmVzZW50aW5nIGBwcm90b1JlY2Agd2l0aCB0aGUgY3VycmVudFxyXG4gICAgICogdmFsdWUgb2YgdGhlIHJlY29yZC4gVXNlZCBieSBwcm9wZXJ0eSBiaW5kaW5ncy5cclxuICAgICAqL1xyXG4gICAgQ29kZWdlbkxvZ2ljVXRpbC5wcm90b3R5cGUuZ2VuUHJvcGVydHlCaW5kaW5nRXZhbFZhbHVlID0gZnVuY3Rpb24gKHByb3RvUmVjKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2VuRXZhbFZhbHVlKHByb3RvUmVjLCBmdW5jdGlvbiAoaWR4KSB7IHJldHVybiBfdGhpcy5fbmFtZXMuZ2V0TG9jYWxOYW1lKGlkeCk7IH0sIHRoaXMuX25hbWVzLmdldExvY2Fsc0FjY2Vzc29yTmFtZSgpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBhIHN0YXRlbWVudCB3aGljaCB1cGRhdGVzIHRoZSBsb2NhbCB2YXJpYWJsZSByZXByZXNlbnRpbmcgYHByb3RvUmVjYCB3aXRoIHRoZSBjdXJyZW50XHJcbiAgICAgKiB2YWx1ZSBvZiB0aGUgcmVjb3JkLiBVc2VkIGJ5IGV2ZW50IGJpbmRpbmdzLlxyXG4gICAgICovXHJcbiAgICBDb2RlZ2VuTG9naWNVdGlsLnByb3RvdHlwZS5nZW5FdmVudEJpbmRpbmdFdmFsVmFsdWUgPSBmdW5jdGlvbiAoZXZlbnRSZWNvcmQsIHByb3RvUmVjKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2VuRXZhbFZhbHVlKHByb3RvUmVjLCBmdW5jdGlvbiAoaWR4KSB7IHJldHVybiBfdGhpcy5fbmFtZXMuZ2V0RXZlbnRMb2NhbE5hbWUoZXZlbnRSZWNvcmQsIGlkeCk7IH0sIFwibG9jYWxzXCIpO1xyXG4gICAgfTtcclxuICAgIENvZGVnZW5Mb2dpY1V0aWwucHJvdG90eXBlLl9nZW5FdmFsVmFsdWUgPSBmdW5jdGlvbiAocHJvdG9SZWMsIGdldExvY2FsTmFtZSwgbG9jYWxzQWNjZXNzb3IpIHtcclxuICAgICAgICB2YXIgY29udGV4dCA9IChwcm90b1JlYy5jb250ZXh0SW5kZXggPT0gLTEpID9cclxuICAgICAgICAgICAgdGhpcy5fbmFtZXMuZ2V0RGlyZWN0aXZlTmFtZShwcm90b1JlYy5kaXJlY3RpdmVJbmRleCkgOlxyXG4gICAgICAgICAgICBnZXRMb2NhbE5hbWUocHJvdG9SZWMuY29udGV4dEluZGV4KTtcclxuICAgICAgICB2YXIgYXJnU3RyaW5nID0gcHJvdG9SZWMuYXJncy5tYXAoZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gZ2V0TG9jYWxOYW1lKGFyZyk7IH0pLmpvaW4oXCIsIFwiKTtcclxuICAgICAgICB2YXIgcmhzO1xyXG4gICAgICAgIHN3aXRjaCAocHJvdG9SZWMubW9kZSkge1xyXG4gICAgICAgICAgICBjYXNlIHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuU2VsZjpcclxuICAgICAgICAgICAgICAgIHJocyA9IGNvbnRleHQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLkNvbnN0OlxyXG4gICAgICAgICAgICAgICAgcmhzID0gY29kZWdlbl9mYWNhZGVfMS5jb2RpZnkocHJvdG9SZWMuZnVuY09yVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgcHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5Qcm9wZXJ0eVJlYWQ6XHJcbiAgICAgICAgICAgICAgICByaHMgPSB0aGlzLl9vYnNlcnZlKGNvbnRleHQgKyBcIi5cIiArIHByb3RvUmVjLm5hbWUsIHByb3RvUmVjKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuU2FmZVByb3BlcnR5OlxyXG4gICAgICAgICAgICAgICAgdmFyIHJlYWQgPSB0aGlzLl9vYnNlcnZlKGNvbnRleHQgKyBcIi5cIiArIHByb3RvUmVjLm5hbWUsIHByb3RvUmVjKTtcclxuICAgICAgICAgICAgICAgIHJocyA9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXRpbE5hbWUgKyBcIi5pc1ZhbHVlQmxhbmsoXCIgKyBjb250ZXh0ICsgXCIpID8gbnVsbCA6IFwiICsgdGhpcy5fb2JzZXJ2ZShyZWFkLCBwcm90b1JlYyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLlByb3BlcnR5V3JpdGU6XHJcbiAgICAgICAgICAgICAgICByaHMgPSBjb250ZXh0ICsgXCIuXCIgKyBwcm90b1JlYy5uYW1lICsgXCIgPSBcIiArIGdldExvY2FsTmFtZShwcm90b1JlYy5hcmdzWzBdKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuTG9jYWw6XHJcbiAgICAgICAgICAgICAgICByaHMgPSB0aGlzLl9vYnNlcnZlKGxvY2Fsc0FjY2Vzc29yICsgXCIuZ2V0KFwiICsgY29kZWdlbl9mYWNhZGVfMS5yYXdTdHJpbmcocHJvdG9SZWMubmFtZSkgKyBcIilcIiwgcHJvdG9SZWMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgcHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5JbnZva2VNZXRob2Q6XHJcbiAgICAgICAgICAgICAgICByaHMgPSB0aGlzLl9vYnNlcnZlKGNvbnRleHQgKyBcIi5cIiArIHByb3RvUmVjLm5hbWUgKyBcIihcIiArIGFyZ1N0cmluZyArIFwiKVwiLCBwcm90b1JlYyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLlNhZmVNZXRob2RJbnZva2U6XHJcbiAgICAgICAgICAgICAgICB2YXIgaW52b2tlID0gY29udGV4dCArIFwiLlwiICsgcHJvdG9SZWMubmFtZSArIFwiKFwiICsgYXJnU3RyaW5nICsgXCIpXCI7XHJcbiAgICAgICAgICAgICAgICByaHMgPVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3V0aWxOYW1lICsgXCIuaXNWYWx1ZUJsYW5rKFwiICsgY29udGV4dCArIFwiKSA/IG51bGwgOiBcIiArIHRoaXMuX29ic2VydmUoaW52b2tlLCBwcm90b1JlYyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLkludm9rZUNsb3N1cmU6XHJcbiAgICAgICAgICAgICAgICByaHMgPSBjb250ZXh0ICsgXCIoXCIgKyBhcmdTdHJpbmcgKyBcIilcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuUHJpbWl0aXZlT3A6XHJcbiAgICAgICAgICAgICAgICByaHMgPSB0aGlzLl91dGlsTmFtZSArIFwiLlwiICsgcHJvdG9SZWMubmFtZSArIFwiKFwiICsgYXJnU3RyaW5nICsgXCIpXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLkNvbGxlY3Rpb25MaXRlcmFsOlxyXG4gICAgICAgICAgICAgICAgcmhzID0gdGhpcy5fdXRpbE5hbWUgKyBcIi5cIiArIHByb3RvUmVjLm5hbWUgKyBcIihcIiArIGFyZ1N0cmluZyArIFwiKVwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgcHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5JbnRlcnBvbGF0ZTpcclxuICAgICAgICAgICAgICAgIHJocyA9IHRoaXMuX2dlbkludGVycG9sYXRpb24ocHJvdG9SZWMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgcHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5LZXllZFJlYWQ6XHJcbiAgICAgICAgICAgICAgICByaHMgPSB0aGlzLl9vYnNlcnZlKGNvbnRleHQgKyBcIltcIiArIGdldExvY2FsTmFtZShwcm90b1JlYy5hcmdzWzBdKSArIFwiXVwiLCBwcm90b1JlYyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLktleWVkV3JpdGU6XHJcbiAgICAgICAgICAgICAgICByaHMgPSBjb250ZXh0ICsgXCJbXCIgKyBnZXRMb2NhbE5hbWUocHJvdG9SZWMuYXJnc1swXSkgKyBcIl0gPSBcIiArIGdldExvY2FsTmFtZShwcm90b1JlYy5hcmdzWzFdKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuQ2hhaW46XHJcbiAgICAgICAgICAgICAgICByaHMgPSAnbnVsbCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihcIlVua25vd24gb3BlcmF0aW9uIFwiICsgcHJvdG9SZWMubW9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBnZXRMb2NhbE5hbWUocHJvdG9SZWMuc2VsZkluZGV4KSArIFwiID0gXCIgKyByaHMgKyBcIjtcIjtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBDb2RlZ2VuTG9naWNVdGlsLnByb3RvdHlwZS5fb2JzZXJ2ZSA9IGZ1bmN0aW9uIChleHAsIHJlYykge1xyXG4gICAgICAgIC8vIFRoaXMgaXMgYW4gZXhwZXJpbWVudGFsIGZlYXR1cmUuIFdvcmtzIG9ubHkgaW4gRGFydC5cclxuICAgICAgICBpZiAodGhpcy5fY2hhbmdlRGV0ZWN0aW9uID09PSBjb25zdGFudHNfMS5DaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hPYnNlcnZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcInRoaXMub2JzZXJ2ZVZhbHVlKFwiICsgZXhwICsgXCIsIFwiICsgcmVjLnNlbGZJbmRleCArIFwiKVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGV4cDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ29kZWdlbkxvZ2ljVXRpbC5wcm90b3R5cGUuZ2VuUHJvcGVydHlCaW5kaW5nVGFyZ2V0cyA9IGZ1bmN0aW9uIChwcm9wZXJ0eUJpbmRpbmdUYXJnZXRzLCBnZW5EZWJ1Z0luZm8pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBicyA9IHByb3BlcnR5QmluZGluZ1RhcmdldHMubWFwKGZ1bmN0aW9uIChiKSB7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhiKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIm51bGxcIjtcclxuICAgICAgICAgICAgdmFyIGRlYnVnID0gZ2VuRGVidWdJbmZvID8gY29kZWdlbl9mYWNhZGVfMS5jb2RpZnkoYi5kZWJ1ZykgOiBcIm51bGxcIjtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl91dGlsTmFtZSArIFwiLmJpbmRpbmdUYXJnZXQoXCIgKyBjb2RlZ2VuX2ZhY2FkZV8xLmNvZGlmeShiLm1vZGUpICsgXCIsIFwiICsgYi5lbGVtZW50SW5kZXggKyBcIiwgXCIgKyBjb2RlZ2VuX2ZhY2FkZV8xLmNvZGlmeShiLm5hbWUpICsgXCIsIFwiICsgY29kZWdlbl9mYWNhZGVfMS5jb2RpZnkoYi51bml0KSArIFwiLCBcIiArIGRlYnVnICsgXCIpXCI7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIFwiW1wiICsgYnMuam9pbihcIiwgXCIpICsgXCJdXCI7XHJcbiAgICB9O1xyXG4gICAgQ29kZWdlbkxvZ2ljVXRpbC5wcm90b3R5cGUuZ2VuRGlyZWN0aXZlSW5kaWNlcyA9IGZ1bmN0aW9uIChkaXJlY3RpdmVSZWNvcmRzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgYnMgPSBkaXJlY3RpdmVSZWNvcmRzLm1hcChmdW5jdGlvbiAoYikge1xyXG4gICAgICAgICAgICByZXR1cm4gKF90aGlzLl91dGlsTmFtZSArIFwiLmRpcmVjdGl2ZUluZGV4KFwiICsgYi5kaXJlY3RpdmVJbmRleC5lbGVtZW50SW5kZXggKyBcIiwgXCIgKyBiLmRpcmVjdGl2ZUluZGV4LmRpcmVjdGl2ZUluZGV4ICsgXCIpXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBcIltcIiArIGJzLmpvaW4oXCIsIFwiKSArIFwiXVwiO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIENvZGVnZW5Mb2dpY1V0aWwucHJvdG90eXBlLl9nZW5JbnRlcnBvbGF0aW9uID0gZnVuY3Rpb24gKHByb3RvUmVjKSB7XHJcbiAgICAgICAgdmFyIGlWYWxzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm90b1JlYy5hcmdzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlWYWxzLnB1c2goY29kZWdlbl9mYWNhZGVfMS5jb2RpZnkocHJvdG9SZWMuZml4ZWRBcmdzW2ldKSk7XHJcbiAgICAgICAgICAgIGlWYWxzLnB1c2godGhpcy5fdXRpbE5hbWUgKyBcIi5zKFwiICsgdGhpcy5fbmFtZXMuZ2V0TG9jYWxOYW1lKHByb3RvUmVjLmFyZ3NbaV0pICsgXCIpXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpVmFscy5wdXNoKGNvZGVnZW5fZmFjYWRlXzEuY29kaWZ5KHByb3RvUmVjLmZpeGVkQXJnc1twcm90b1JlYy5hcmdzLmxlbmd0aF0pKTtcclxuICAgICAgICByZXR1cm4gY29kZWdlbl9mYWNhZGVfMS5jb21iaW5lR2VuZXJhdGVkU3RyaW5ncyhpVmFscyk7XHJcbiAgICB9O1xyXG4gICAgQ29kZWdlbkxvZ2ljVXRpbC5wcm90b3R5cGUuZ2VuSHlkcmF0ZURpcmVjdGl2ZXMgPSBmdW5jdGlvbiAoZGlyZWN0aXZlUmVjb3Jkcykge1xyXG4gICAgICAgIHZhciByZXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcmVjdGl2ZVJlY29yZHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIHIgPSBkaXJlY3RpdmVSZWNvcmRzW2ldO1xyXG4gICAgICAgICAgICByZXMucHVzaCh0aGlzLl9uYW1lcy5nZXREaXJlY3RpdmVOYW1lKHIuZGlyZWN0aXZlSW5kZXgpICsgXCIgPSBcIiArIHRoaXMuX2dlblJlYWREaXJlY3RpdmUoaSkgKyBcIjtcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXMuam9pbihcIlxcblwiKTtcclxuICAgIH07XHJcbiAgICBDb2RlZ2VuTG9naWNVdGlsLnByb3RvdHlwZS5fZ2VuUmVhZERpcmVjdGl2ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIC8vIFRoaXMgaXMgYW4gZXhwZXJpbWVudGFsIGZlYXR1cmUuIFdvcmtzIG9ubHkgaW4gRGFydC5cclxuICAgICAgICBpZiAodGhpcy5fY2hhbmdlRGV0ZWN0aW9uID09PSBjb25zdGFudHNfMS5DaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hPYnNlcnZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcInRoaXMub2JzZXJ2ZURpcmVjdGl2ZSh0aGlzLmdldERpcmVjdGl2ZUZvcihkaXJlY3RpdmVzLCBcIiArIGluZGV4ICsgXCIpLCBcIiArIGluZGV4ICsgXCIpXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJ0aGlzLmdldERpcmVjdGl2ZUZvcihkaXJlY3RpdmVzLCBcIiArIGluZGV4ICsgXCIpXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvZGVnZW5Mb2dpY1V0aWwucHJvdG90eXBlLmdlbkh5ZHJhdGVEZXRlY3RvcnMgPSBmdW5jdGlvbiAoZGlyZWN0aXZlUmVjb3Jkcykge1xyXG4gICAgICAgIHZhciByZXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcmVjdGl2ZVJlY29yZHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIHIgPSBkaXJlY3RpdmVSZWNvcmRzW2ldO1xyXG4gICAgICAgICAgICBpZiAoIXIuaXNEZWZhdWx0Q2hhbmdlRGV0ZWN0aW9uKCkpIHtcclxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMuX25hbWVzLmdldERldGVjdG9yTmFtZShyLmRpcmVjdGl2ZUluZGV4KSArIFwiID0gdGhpcy5nZXREZXRlY3RvckZvcihkaXJlY3RpdmVzLCBcIiArIGkgKyBcIik7XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXMuam9pbihcIlxcblwiKTtcclxuICAgIH07XHJcbiAgICBDb2RlZ2VuTG9naWNVdGlsLnByb3RvdHlwZS5nZW5Db250ZW50TGlmZWN5Y2xlQ2FsbGJhY2tzID0gZnVuY3Rpb24gKGRpcmVjdGl2ZVJlY29yZHMpIHtcclxuICAgICAgICB2YXIgcmVzID0gW107XHJcbiAgICAgICAgLy8gTk9URShrZWdsdW5lcSk6IE9yZGVyIGlzIGltcG9ydGFudCFcclxuICAgICAgICBmb3IgKHZhciBpID0gZGlyZWN0aXZlUmVjb3Jkcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICAgICAgICB2YXIgZGlyID0gZGlyZWN0aXZlUmVjb3Jkc1tpXTtcclxuICAgICAgICAgICAgaWYgKGRpci5jYWxsQWZ0ZXJDb250ZW50SW5pdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzLnB1c2goXCJpZighIFwiICsgdGhpcy5fbmFtZXMuZ2V0QWxyZWFkeUNoZWNrZWROYW1lKCkgKyBcIikgXCIgKyB0aGlzLl9uYW1lcy5nZXREaXJlY3RpdmVOYW1lKGRpci5kaXJlY3RpdmVJbmRleCkgKyBcIi5hZnRlckNvbnRlbnRJbml0KCk7XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkaXIuY2FsbEFmdGVyQ29udGVudENoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMuX25hbWVzLmdldERpcmVjdGl2ZU5hbWUoZGlyLmRpcmVjdGl2ZUluZGV4KSArIFwiLmFmdGVyQ29udGVudENoZWNrZWQoKTtcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH07XHJcbiAgICBDb2RlZ2VuTG9naWNVdGlsLnByb3RvdHlwZS5nZW5WaWV3TGlmZWN5Y2xlQ2FsbGJhY2tzID0gZnVuY3Rpb24gKGRpcmVjdGl2ZVJlY29yZHMpIHtcclxuICAgICAgICB2YXIgcmVzID0gW107XHJcbiAgICAgICAgLy8gTk9URShrZWdsdW5lcSk6IE9yZGVyIGlzIGltcG9ydGFudCFcclxuICAgICAgICBmb3IgKHZhciBpID0gZGlyZWN0aXZlUmVjb3Jkcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICAgICAgICB2YXIgZGlyID0gZGlyZWN0aXZlUmVjb3Jkc1tpXTtcclxuICAgICAgICAgICAgaWYgKGRpci5jYWxsQWZ0ZXJWaWV3SW5pdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzLnB1c2goXCJpZighIFwiICsgdGhpcy5fbmFtZXMuZ2V0QWxyZWFkeUNoZWNrZWROYW1lKCkgKyBcIikgXCIgKyB0aGlzLl9uYW1lcy5nZXREaXJlY3RpdmVOYW1lKGRpci5kaXJlY3RpdmVJbmRleCkgKyBcIi5hZnRlclZpZXdJbml0KCk7XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkaXIuY2FsbEFmdGVyVmlld0NoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMuX25hbWVzLmdldERpcmVjdGl2ZU5hbWUoZGlyLmRpcmVjdGl2ZUluZGV4KSArIFwiLmFmdGVyVmlld0NoZWNrZWQoKTtcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29kZWdlbkxvZ2ljVXRpbDtcclxufSkoKTtcclxuZXhwb3J0cy5Db2RlZ2VuTG9naWNVdGlsID0gQ29kZWdlbkxvZ2ljVXRpbDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29kZWdlbl9sb2dpY191dGlsLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbi8vIFRoZSBuYW1lcyBvZiB0aGVzZSBmaWVsZHMgbXVzdCBiZSBrZXB0IGluIHN5bmMgd2l0aCBhYnN0cmFjdF9jaGFuZ2VfZGV0ZWN0b3IudHMgb3IgY2hhbmdlXHJcbi8vIGRldGVjdGlvbiB3aWxsIGZhaWwuXHJcbnZhciBfQUxSRUFEWV9DSEVDS0VEX0FDQ0VTU09SID0gXCJhbHJlYWR5Q2hlY2tlZFwiO1xyXG52YXIgX0NPTlRFWFRfQUNDRVNTT1IgPSBcImNvbnRleHRcIjtcclxudmFyIF9QUk9QX0JJTkRJTkdfSU5ERVggPSBcInByb3BlcnR5QmluZGluZ0luZGV4XCI7XHJcbnZhciBfRElSRUNUSVZFU19BQ0NFU1NPUiA9IFwiZGlyZWN0aXZlSW5kaWNlc1wiO1xyXG52YXIgX0RJU1BBVENIRVJfQUNDRVNTT1IgPSBcImRpc3BhdGNoZXJcIjtcclxudmFyIF9MT0NBTFNfQUNDRVNTT1IgPSBcImxvY2Fsc1wiO1xyXG52YXIgX01PREVfQUNDRVNTT1IgPSBcIm1vZGVcIjtcclxudmFyIF9QSVBFU19BQ0NFU1NPUiA9IFwicGlwZXNcIjtcclxudmFyIF9QUk9UT1NfQUNDRVNTT1IgPSBcInByb3Rvc1wiO1xyXG4vLyBgY29udGV4dGAgaXMgYWx3YXlzIGZpcnN0LlxyXG5leHBvcnRzLkNPTlRFWFRfSU5ERVggPSAwO1xyXG52YXIgX0ZJRUxEX1BSRUZJWCA9ICd0aGlzLic7XHJcbnZhciBfd2hpdGVTcGFjZVJlZ0V4cCA9IGxhbmdfMS5SZWdFeHBXcmFwcGVyLmNyZWF0ZShcIlxcXFxXXCIsIFwiZ1wiKTtcclxuLyoqXHJcbiAqIFJldHVybnMgYHNgIHdpdGggYWxsIG5vbi1pZGVudGlmaWVyIGNoYXJhY3RlcnMgcmVtb3ZlZC5cclxuICovXHJcbmZ1bmN0aW9uIHNhbml0aXplTmFtZShzKSB7XHJcbiAgICByZXR1cm4gbGFuZ18xLlN0cmluZ1dyYXBwZXIucmVwbGFjZUFsbChzLCBfd2hpdGVTcGFjZVJlZ0V4cCwgJycpO1xyXG59XHJcbmV4cG9ydHMuc2FuaXRpemVOYW1lID0gc2FuaXRpemVOYW1lO1xyXG4vKipcclxuICogQ2xhc3MgcmVzcG9uc2libGUgZm9yIHByb3ZpZGluZyBmaWVsZCBhbmQgbG9jYWwgdmFyaWFibGUgbmFtZXMgZm9yIGNoYW5nZSBkZXRlY3RvciBjbGFzc2VzLlxyXG4gKiBBbHNvIHByb3ZpZGVzIHNvbWUgY29udmVuaWVuY2UgZnVuY3Rpb25zLCBmb3IgZXhhbXBsZSwgZGVjbGFyaW5nIHZhcmlhYmxlcywgZGVzdHJveWluZyBwaXBlcyxcclxuICogYW5kIGRlaHlkcmF0aW5nIHRoZSBkZXRlY3Rvci5cclxuICovXHJcbnZhciBDb2RlZ2VuTmFtZVV0aWwgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ29kZWdlbk5hbWVVdGlsKF9yZWNvcmRzLCBfZXZlbnRCaW5kaW5ncywgX2RpcmVjdGl2ZVJlY29yZHMsIF91dGlsTmFtZSkge1xyXG4gICAgICAgIHRoaXMuX3JlY29yZHMgPSBfcmVjb3JkcztcclxuICAgICAgICB0aGlzLl9ldmVudEJpbmRpbmdzID0gX2V2ZW50QmluZGluZ3M7XHJcbiAgICAgICAgdGhpcy5fZGlyZWN0aXZlUmVjb3JkcyA9IF9kaXJlY3RpdmVSZWNvcmRzO1xyXG4gICAgICAgIHRoaXMuX3V0aWxOYW1lID0gX3V0aWxOYW1lO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9zYW5pdGl6ZWRFdmVudE5hbWVzID0gbmV3IGNvbGxlY3Rpb25fMS5NYXAoKTtcclxuICAgICAgICB0aGlzLl9zYW5pdGl6ZWROYW1lcyA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jcmVhdGVGaXhlZFNpemUodGhpcy5fcmVjb3Jkcy5sZW5ndGggKyAxKTtcclxuICAgICAgICB0aGlzLl9zYW5pdGl6ZWROYW1lc1tleHBvcnRzLkNPTlRFWFRfSU5ERVhdID0gX0NPTlRFWFRfQUNDRVNTT1I7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlMZW4gPSB0aGlzLl9yZWNvcmRzLmxlbmd0aDsgaSA8IGlMZW47ICsraSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zYW5pdGl6ZWROYW1lc1tpICsgMV0gPSBzYW5pdGl6ZU5hbWUoXCJcIiArIHRoaXMuX3JlY29yZHNbaV0ubmFtZSArIGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBlYkluZGV4ID0gMDsgZWJJbmRleCA8IF9ldmVudEJpbmRpbmdzLmxlbmd0aDsgKytlYkluZGV4KSB7XHJcbiAgICAgICAgICAgIHZhciBlYiA9IF9ldmVudEJpbmRpbmdzW2ViSW5kZXhdO1xyXG4gICAgICAgICAgICB2YXIgbmFtZXMgPSBbX0NPTlRFWFRfQUNDRVNTT1JdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaUxlbiA9IGViLnJlY29yZHMubGVuZ3RoOyBpIDwgaUxlbjsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lcy5wdXNoKHNhbml0aXplTmFtZShcIlwiICsgZWIucmVjb3Jkc1tpXS5uYW1lICsgaSArIFwiX1wiICsgZWJJbmRleCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3Nhbml0aXplZEV2ZW50TmFtZXMuc2V0KGViLCBuYW1lcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQ29kZWdlbk5hbWVVdGlsLnByb3RvdHlwZS5fYWRkRmllbGRQcmVmaXggPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gXCJcIiArIF9GSUVMRF9QUkVGSVggKyBuYW1lOyB9O1xyXG4gICAgQ29kZWdlbk5hbWVVdGlsLnByb3RvdHlwZS5nZXREaXNwYXRjaGVyTmFtZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2FkZEZpZWxkUHJlZml4KF9ESVNQQVRDSEVSX0FDQ0VTU09SKTsgfTtcclxuICAgIENvZGVnZW5OYW1lVXRpbC5wcm90b3R5cGUuZ2V0UGlwZXNBY2Nlc3Nvck5hbWUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9hZGRGaWVsZFByZWZpeChfUElQRVNfQUNDRVNTT1IpOyB9O1xyXG4gICAgQ29kZWdlbk5hbWVVdGlsLnByb3RvdHlwZS5nZXRQcm90b3NOYW1lID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fYWRkRmllbGRQcmVmaXgoX1BST1RPU19BQ0NFU1NPUik7IH07XHJcbiAgICBDb2RlZ2VuTmFtZVV0aWwucHJvdG90eXBlLmdldERpcmVjdGl2ZXNBY2Nlc3Nvck5hbWUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9hZGRGaWVsZFByZWZpeChfRElSRUNUSVZFU19BQ0NFU1NPUik7IH07XHJcbiAgICBDb2RlZ2VuTmFtZVV0aWwucHJvdG90eXBlLmdldExvY2Fsc0FjY2Vzc29yTmFtZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2FkZEZpZWxkUHJlZml4KF9MT0NBTFNfQUNDRVNTT1IpOyB9O1xyXG4gICAgQ29kZWdlbk5hbWVVdGlsLnByb3RvdHlwZS5nZXRBbHJlYWR5Q2hlY2tlZE5hbWUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9hZGRGaWVsZFByZWZpeChfQUxSRUFEWV9DSEVDS0VEX0FDQ0VTU09SKTsgfTtcclxuICAgIENvZGVnZW5OYW1lVXRpbC5wcm90b3R5cGUuZ2V0TW9kZU5hbWUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9hZGRGaWVsZFByZWZpeChfTU9ERV9BQ0NFU1NPUik7IH07XHJcbiAgICBDb2RlZ2VuTmFtZVV0aWwucHJvdG90eXBlLmdldFByb3BlcnR5QmluZGluZ0luZGV4ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fYWRkRmllbGRQcmVmaXgoX1BST1BfQklORElOR19JTkRFWCk7IH07XHJcbiAgICBDb2RlZ2VuTmFtZVV0aWwucHJvdG90eXBlLmdldExvY2FsTmFtZSA9IGZ1bmN0aW9uIChpZHgpIHsgcmV0dXJuIFwibF9cIiArIHRoaXMuX3Nhbml0aXplZE5hbWVzW2lkeF07IH07XHJcbiAgICBDb2RlZ2VuTmFtZVV0aWwucHJvdG90eXBlLmdldEV2ZW50TG9jYWxOYW1lID0gZnVuY3Rpb24gKGViLCBpZHgpIHtcclxuICAgICAgICByZXR1cm4gXCJsX1wiICsgdGhpcy5fc2FuaXRpemVkRXZlbnROYW1lcy5nZXQoZWIpW2lkeF07XHJcbiAgICB9O1xyXG4gICAgQ29kZWdlbk5hbWVVdGlsLnByb3RvdHlwZS5nZXRDaGFuZ2VOYW1lID0gZnVuY3Rpb24gKGlkeCkgeyByZXR1cm4gXCJjX1wiICsgdGhpcy5fc2FuaXRpemVkTmFtZXNbaWR4XTsgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGUgYSBzdGF0ZW1lbnQgaW5pdGlhbGl6aW5nIGxvY2FsIHZhcmlhYmxlcyB1c2VkIHdoZW4gZGV0ZWN0aW5nIGNoYW5nZXMuXHJcbiAgICAgKi9cclxuICAgIENvZGVnZW5OYW1lVXRpbC5wcm90b3R5cGUuZ2VuSW5pdExvY2FscyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZGVjbGFyYXRpb25zID0gW107XHJcbiAgICAgICAgdmFyIGFzc2lnbm1lbnRzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlMZW4gPSB0aGlzLmdldEZpZWxkQ291bnQoKTsgaSA8IGlMZW47ICsraSkge1xyXG4gICAgICAgICAgICBpZiAoaSA9PSBleHBvcnRzLkNPTlRFWFRfSU5ERVgpIHtcclxuICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9ucy5wdXNoKHRoaXMuZ2V0TG9jYWxOYW1lKGkpICsgXCIgPSBcIiArIHRoaXMuZ2V0RmllbGROYW1lKGkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciByZWMgPSB0aGlzLl9yZWNvcmRzW2kgLSAxXTtcclxuICAgICAgICAgICAgICAgIGlmIChyZWMuYXJndW1lbnRUb1B1cmVGdW5jdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VOYW1lID0gdGhpcy5nZXRDaGFuZ2VOYW1lKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9ucy5wdXNoKHRoaXMuZ2V0TG9jYWxOYW1lKGkpICsgXCIsXCIgKyBjaGFuZ2VOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBhc3NpZ25tZW50cy5wdXNoKGNoYW5nZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zLnB1c2goXCJcIiArIHRoaXMuZ2V0TG9jYWxOYW1lKGkpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYXNzaWdubWVudHNDb2RlID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmlzRW1wdHkoYXNzaWdubWVudHMpID8gJycgOiBhc3NpZ25tZW50cy5qb2luKCc9JykgKyBcIiA9IGZhbHNlO1wiO1xyXG4gICAgICAgIHJldHVybiBcInZhciBcIiArIGRlY2xhcmF0aW9ucy5qb2luKCcsJykgKyBcIjtcIiArIGFzc2lnbm1lbnRzQ29kZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIGEgc3RhdGVtZW50IGluaXRpYWxpemluZyBsb2NhbCB2YXJpYWJsZXMgZm9yIGV2ZW50IGhhbmRsZXJzLlxyXG4gICAgICovXHJcbiAgICBDb2RlZ2VuTmFtZVV0aWwucHJvdG90eXBlLmdlbkluaXRFdmVudExvY2FscyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciByZXMgPSBbKHRoaXMuZ2V0TG9jYWxOYW1lKGV4cG9ydHMuQ09OVEVYVF9JTkRFWCkgKyBcIiA9IFwiICsgdGhpcy5nZXRGaWVsZE5hbWUoZXhwb3J0cy5DT05URVhUX0lOREVYKSldO1xyXG4gICAgICAgIHRoaXMuX3Nhbml0aXplZEV2ZW50TmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZXMsIGViKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpICE9PSBleHBvcnRzLkNPTlRFWFRfSU5ERVgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChcIlwiICsgX3RoaXMuZ2V0RXZlbnRMb2NhbE5hbWUoZWIsIGkpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXMubGVuZ3RoID4gMSA/IFwidmFyIFwiICsgcmVzLmpvaW4oJywnKSArIFwiO1wiIDogJyc7XHJcbiAgICB9O1xyXG4gICAgQ29kZWdlbk5hbWVVdGlsLnByb3RvdHlwZS5nZXRQcmV2ZW50RGVmYXVsdEFjY2Vzb3IgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcInByZXZlbnREZWZhdWx0XCI7IH07XHJcbiAgICBDb2RlZ2VuTmFtZVV0aWwucHJvdG90eXBlLmdldEZpZWxkQ291bnQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9zYW5pdGl6ZWROYW1lcy5sZW5ndGg7IH07XHJcbiAgICBDb2RlZ2VuTmFtZVV0aWwucHJvdG90eXBlLmdldEZpZWxkTmFtZSA9IGZ1bmN0aW9uIChpZHgpIHsgcmV0dXJuIHRoaXMuX2FkZEZpZWxkUHJlZml4KHRoaXMuX3Nhbml0aXplZE5hbWVzW2lkeF0pOyB9O1xyXG4gICAgQ29kZWdlbk5hbWVVdGlsLnByb3RvdHlwZS5nZXRBbGxGaWVsZE5hbWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmaWVsZExpc3QgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBrID0gMCwga0xlbiA9IHRoaXMuZ2V0RmllbGRDb3VudCgpOyBrIDwga0xlbjsgKytrKSB7XHJcbiAgICAgICAgICAgIGlmIChrID09PSAwIHx8IHRoaXMuX3JlY29yZHNbayAtIDFdLnNob3VsZEJlQ2hlY2tlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZExpc3QucHVzaCh0aGlzLmdldEZpZWxkTmFtZShrKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlMZW4gPSB0aGlzLl9yZWNvcmRzLmxlbmd0aDsgaSA8IGlMZW47ICsraSkge1xyXG4gICAgICAgICAgICB2YXIgcmVjID0gdGhpcy5fcmVjb3Jkc1tpXTtcclxuICAgICAgICAgICAgaWYgKHJlYy5pc1BpcGVSZWNvcmQoKSkge1xyXG4gICAgICAgICAgICAgICAgZmllbGRMaXN0LnB1c2godGhpcy5nZXRQaXBlTmFtZShyZWMuc2VsZkluZGV4KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpMZW4gPSB0aGlzLl9kaXJlY3RpdmVSZWNvcmRzLmxlbmd0aDsgaiA8IGpMZW47ICsraikge1xyXG4gICAgICAgICAgICB2YXIgZFJlYyA9IHRoaXMuX2RpcmVjdGl2ZVJlY29yZHNbal07XHJcbiAgICAgICAgICAgIGZpZWxkTGlzdC5wdXNoKHRoaXMuZ2V0RGlyZWN0aXZlTmFtZShkUmVjLmRpcmVjdGl2ZUluZGV4KSk7XHJcbiAgICAgICAgICAgIGlmICghZFJlYy5pc0RlZmF1bHRDaGFuZ2VEZXRlY3Rpb24oKSkge1xyXG4gICAgICAgICAgICAgICAgZmllbGRMaXN0LnB1c2godGhpcy5nZXREZXRlY3Rvck5hbWUoZFJlYy5kaXJlY3RpdmVJbmRleCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmaWVsZExpc3Q7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZW5lcmF0ZXMgc3RhdGVtZW50cyB3aGljaCBjbGVhciBhbGwgZmllbGRzIHNvIHRoYXQgdGhlIGNoYW5nZSBkZXRlY3RvciBpcyBkZWh5ZHJhdGVkLlxyXG4gICAgICovXHJcbiAgICBDb2RlZ2VuTmFtZVV0aWwucHJvdG90eXBlLmdlbkRlaHlkcmF0ZUZpZWxkcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZmllbGRzID0gdGhpcy5nZXRBbGxGaWVsZE5hbWVzKCk7XHJcbiAgICAgICAgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLnJlbW92ZUF0KGZpZWxkcywgZXhwb3J0cy5DT05URVhUX0lOREVYKTtcclxuICAgICAgICBpZiAoY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmlzRW1wdHkoZmllbGRzKSlcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIC8vIEF0IGxlYXN0IG9uZSBhc3NpZ25tZW50LlxyXG4gICAgICAgIGZpZWxkcy5wdXNoKHRoaXMuX3V0aWxOYW1lICsgXCIudW5pbml0aWFsaXplZDtcIik7XHJcbiAgICAgICAgcmV0dXJuIGZpZWxkcy5qb2luKCcgPSAnKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBzdGF0ZW1lbnRzIGRlc3Ryb3lpbmcgYWxsIHBpcGUgdmFyaWFibGVzLlxyXG4gICAgICovXHJcbiAgICBDb2RlZ2VuTmFtZVV0aWwucHJvdG90eXBlLmdlblBpcGVPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmZpbHRlcih0aGlzLl9yZWNvcmRzLCBmdW5jdGlvbiAocikgeyByZXR1cm4gci5pc1BpcGVSZWNvcmQoKTsgfSlcclxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gKF90aGlzLl91dGlsTmFtZSArIFwiLmNhbGxQaXBlT25EZXN0cm95KFwiICsgX3RoaXMuZ2V0UGlwZU5hbWUoci5zZWxmSW5kZXgpICsgXCIpO1wiKTsgfSlcclxuICAgICAgICAgICAgLmpvaW4oJ1xcbicpO1xyXG4gICAgfTtcclxuICAgIENvZGVnZW5OYW1lVXRpbC5wcm90b3R5cGUuZ2V0UGlwZU5hbWUgPSBmdW5jdGlvbiAoaWR4KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZEZpZWxkUHJlZml4KHRoaXMuX3Nhbml0aXplZE5hbWVzW2lkeF0gKyBcIl9waXBlXCIpO1xyXG4gICAgfTtcclxuICAgIENvZGVnZW5OYW1lVXRpbC5wcm90b3R5cGUuZ2V0RGlyZWN0aXZlTmFtZSA9IGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZEZpZWxkUHJlZml4KFwiZGlyZWN0aXZlX1wiICsgZC5uYW1lKTtcclxuICAgIH07XHJcbiAgICBDb2RlZ2VuTmFtZVV0aWwucHJvdG90eXBlLmdldERldGVjdG9yTmFtZSA9IGZ1bmN0aW9uIChkKSB7IHJldHVybiB0aGlzLl9hZGRGaWVsZFByZWZpeChcImRldGVjdG9yX1wiICsgZC5uYW1lKTsgfTtcclxuICAgIHJldHVybiBDb2RlZ2VuTmFtZVV0aWw7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQ29kZWdlbk5hbWVVdGlsID0gQ29kZWdlbk5hbWVVdGlsO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2RlZ2VuX25hbWVfdXRpbC5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbihmdW5jdGlvbiAoQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kpIHtcclxuICAgIC8qKlxyXG4gICAgICogYENoZWNrZWRPbmNlYCBtZWFucyB0aGF0IGFmdGVyIGNhbGxpbmcgZGV0ZWN0Q2hhbmdlcyB0aGUgbW9kZSBvZiB0aGUgY2hhbmdlIGRldGVjdG9yXHJcbiAgICAgKiB3aWxsIGJlY29tZSBgQ2hlY2tlZGAuXHJcbiAgICAgKi9cclxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5W0NoYW5nZURldGVjdGlvblN0cmF0ZWd5W1wiQ2hlY2tPbmNlXCJdID0gMF0gPSBcIkNoZWNrT25jZVwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBgQ2hlY2tlZGAgbWVhbnMgdGhhdCB0aGUgY2hhbmdlIGRldGVjdG9yIHNob3VsZCBiZSBza2lwcGVkIHVudGlsIGl0cyBtb2RlIGNoYW5nZXMgdG9cclxuICAgICAqIGBDaGVja09uY2VgLlxyXG4gICAgICovXHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVtcIkNoZWNrZWRcIl0gPSAxXSA9IFwiQ2hlY2tlZFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBgQ2hlY2tBbHdheXNgIG1lYW5zIHRoYXQgYWZ0ZXIgY2FsbGluZyBkZXRlY3RDaGFuZ2VzIHRoZSBtb2RlIG9mIHRoZSBjaGFuZ2UgZGV0ZWN0b3JcclxuICAgICAqIHdpbGwgcmVtYWluIGBDaGVja0Fsd2F5c2AuXHJcbiAgICAgKi9cclxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5W0NoYW5nZURldGVjdGlvblN0cmF0ZWd5W1wiQ2hlY2tBbHdheXNcIl0gPSAyXSA9IFwiQ2hlY2tBbHdheXNcIjtcclxuICAgIC8qKlxyXG4gICAgICogYERldGFjaGVkYCBtZWFucyB0aGF0IHRoZSBjaGFuZ2UgZGV0ZWN0b3Igc3ViIHRyZWUgaXMgbm90IGEgcGFydCBvZiB0aGUgbWFpbiB0cmVlIGFuZFxyXG4gICAgICogc2hvdWxkIGJlIHNraXBwZWQuXHJcbiAgICAgKi9cclxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5W0NoYW5nZURldGVjdGlvblN0cmF0ZWd5W1wiRGV0YWNoZWRcIl0gPSAzXSA9IFwiRGV0YWNoZWRcIjtcclxuICAgIC8qKlxyXG4gICAgICogYE9uUHVzaGAgbWVhbnMgdGhhdCB0aGUgY2hhbmdlIGRldGVjdG9yJ3MgbW9kZSB3aWxsIGJlIHNldCB0byBgQ2hlY2tPbmNlYCBkdXJpbmcgaHlkcmF0aW9uLlxyXG4gICAgICovXHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVtcIk9uUHVzaFwiXSA9IDRdID0gXCJPblB1c2hcIjtcclxuICAgIC8qKlxyXG4gICAgICogYERlZmF1bHRgIG1lYW5zIHRoYXQgdGhlIGNoYW5nZSBkZXRlY3RvcidzIG1vZGUgd2lsbCBiZSBzZXQgdG8gYENoZWNrQWx3YXlzYCBkdXJpbmcgaHlkcmF0aW9uLlxyXG4gICAgICovXHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVtcIkRlZmF1bHRcIl0gPSA1XSA9IFwiRGVmYXVsdFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlLiBXb3JrcyBvbmx5IGluIERhcnQuXHJcbiAgICAgKi9cclxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5W0NoYW5nZURldGVjdGlvblN0cmF0ZWd5W1wiT25QdXNoT2JzZXJ2ZVwiXSA9IDZdID0gXCJPblB1c2hPYnNlcnZlXCI7XHJcbn0pKGV4cG9ydHMuQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfHwgKGV4cG9ydHMuQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgPSB7fSkpO1xyXG52YXIgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgPSBleHBvcnRzLkNoYW5nZURldGVjdGlvblN0cmF0ZWd5O1xyXG5leHBvcnRzLkNIQU5HRV9ERUNUSU9OX1NUUkFURUdZX1ZBTFVFUyA9IFtcclxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LkNoZWNrT25jZSxcclxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LkNoZWNrZWQsXHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5DaGVja0Fsd2F5cyxcclxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LkRldGFjaGVkLFxyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGVmYXVsdCxcclxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaE9ic2VydmVcclxuXTtcclxuZnVuY3Rpb24gaXNEZWZhdWx0Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3koY2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kpIHtcclxuICAgIHJldHVybiBsYW5nXzEuaXNCbGFuayhjaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSkgfHxcclxuICAgICAgICBjaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSA9PT0gQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGVmYXVsdDtcclxufVxyXG5leHBvcnRzLmlzRGVmYXVsdENoYW5nZURldGVjdGlvblN0cmF0ZWd5ID0gaXNEZWZhdWx0Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3k7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIGxhbmdfMiA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBEZWZhdWx0SXRlcmFibGVEaWZmZXJGYWN0b3J5ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERlZmF1bHRJdGVyYWJsZURpZmZlckZhY3RvcnkoKSB7XHJcbiAgICB9XHJcbiAgICBEZWZhdWx0SXRlcmFibGVEaWZmZXJGYWN0b3J5LnByb3RvdHlwZS5zdXBwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIGNvbGxlY3Rpb25fMS5pc0xpc3RMaWtlSXRlcmFibGUob2JqKTsgfTtcclxuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlckZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChjZFJlZikgeyByZXR1cm4gbmV3IERlZmF1bHRJdGVyYWJsZURpZmZlcigpOyB9O1xyXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyRmFjdG9yeSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGxhbmdfMS5DT05TVCgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyRmFjdG9yeSk7XHJcbiAgICByZXR1cm4gRGVmYXVsdEl0ZXJhYmxlRGlmZmVyRmFjdG9yeTtcclxufSkoKTtcclxuZXhwb3J0cy5EZWZhdWx0SXRlcmFibGVEaWZmZXJGYWN0b3J5ID0gRGVmYXVsdEl0ZXJhYmxlRGlmZmVyRmFjdG9yeTtcclxudmFyIERlZmF1bHRJdGVyYWJsZURpZmZlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEZWZhdWx0SXRlcmFibGVEaWZmZXIoKSB7XHJcbiAgICAgICAgdGhpcy5fY29sbGVjdGlvbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gbnVsbDtcclxuICAgICAgICAvLyBLZWVwcyB0cmFjayBvZiB0aGUgdXNlZCByZWNvcmRzIGF0IGFueSBwb2ludCBpbiB0aW1lIChkdXJpbmcgJiBhY3Jvc3MgYF9jaGVjaygpYCBjYWxscylcclxuICAgICAgICB0aGlzLl9saW5rZWRSZWNvcmRzID0gbnVsbDtcclxuICAgICAgICAvLyBLZWVwcyB0cmFjayBvZiB0aGUgcmVtb3ZlZCByZWNvcmRzIGF0IGFueSBwb2ludCBpbiB0aW1lIGR1cmluZyBgX2NoZWNrKClgIGNhbGxzLlxyXG4gICAgICAgIHRoaXMuX3VubGlua2VkUmVjb3JkcyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fcHJldmlvdXNJdEhlYWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2l0SGVhZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5faXRUYWlsID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9hZGRpdGlvbnNIZWFkID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9hZGRpdGlvbnNUYWlsID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9tb3Zlc0hlYWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX21vdmVzVGFpbCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fcmVtb3ZhbHNIZWFkID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9yZW1vdmFsc1RhaWwgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUsIFwiY29sbGVjdGlvblwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9jb2xsZWN0aW9uOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLCBcImxlbmd0aFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9sZW5ndGg7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5mb3JFYWNoSXRlbSA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICAgIHZhciByZWNvcmQ7XHJcbiAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9pdEhlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0KSB7XHJcbiAgICAgICAgICAgIGZuKHJlY29yZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuZm9yRWFjaFByZXZpb3VzSXRlbSA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICAgIHZhciByZWNvcmQ7XHJcbiAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9wcmV2aW91c0l0SGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRQcmV2aW91cykge1xyXG4gICAgICAgICAgICBmbihyZWNvcmQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLmZvckVhY2hBZGRlZEl0ZW0gPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICB2YXIgcmVjb3JkO1xyXG4gICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5fYWRkaXRpb25zSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRBZGRlZCkge1xyXG4gICAgICAgICAgICBmbihyZWNvcmQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLmZvckVhY2hNb3ZlZEl0ZW0gPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICB2YXIgcmVjb3JkO1xyXG4gICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5fbW92ZXNIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dE1vdmVkKSB7XHJcbiAgICAgICAgICAgIGZuKHJlY29yZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuZm9yRWFjaFJlbW92ZWRJdGVtID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgdmFyIHJlY29yZDtcclxuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX3JlbW92YWxzSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRSZW1vdmVkKSB7XHJcbiAgICAgICAgICAgIGZuKHJlY29yZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuZGlmZiA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMi5pc0JsYW5rKGNvbGxlY3Rpb24pKVxyXG4gICAgICAgICAgICBjb2xsZWN0aW9uID0gW107XHJcbiAgICAgICAgaWYgKCFjb2xsZWN0aW9uXzEuaXNMaXN0TGlrZUl0ZXJhYmxlKGNvbGxlY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihcIkVycm9yIHRyeWluZyB0byBkaWZmICdcIiArIGNvbGxlY3Rpb24gKyBcIidcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrKGNvbGxlY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUub25EZXN0cm95ID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgLy8gdG9kbyh2aWNiKTogb3B0aW0gZm9yIFVubW9kaWZpYWJsZUxpc3RWaWV3IChmcm96ZW4gYXJyYXlzKVxyXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9yZXNldCgpO1xyXG4gICAgICAgIHZhciByZWNvcmQgPSB0aGlzLl9pdEhlYWQ7XHJcbiAgICAgICAgdmFyIG1heUJlRGlydHkgPSBmYWxzZTtcclxuICAgICAgICB2YXIgaW5kZXg7XHJcbiAgICAgICAgdmFyIGl0ZW07XHJcbiAgICAgICAgaWYgKGxhbmdfMi5pc0FycmF5KGNvbGxlY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHZhciBsaXN0ID0gY29sbGVjdGlvbjtcclxuICAgICAgICAgICAgdGhpcy5fbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX2xlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgaXRlbSA9IGxpc3RbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlY29yZCA9PT0gbnVsbCB8fCAhbGFuZ18yLmxvb3NlSWRlbnRpY2FsKHJlY29yZC5pdGVtLCBpdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZCA9IHRoaXMuX21pc21hdGNoKHJlY29yZCwgaXRlbSwgaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heUJlRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobWF5QmVEaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8obWlza28pOiBjYW4gd2UgbGltaXQgdGhpcyB0byBkdXBsaWNhdGVzIG9ubHk/XHJcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkID0gdGhpcy5fdmVyaWZ5UmVpbnNlcnRpb24ocmVjb3JkLCBpdGVtLCBpbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZWNvcmQgPSByZWNvcmQuX25leHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gMDtcclxuICAgICAgICAgICAgY29sbGVjdGlvbl8xLml0ZXJhdGVMaXN0TGlrZShjb2xsZWN0aW9uLCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlY29yZCA9PT0gbnVsbCB8fCAhbGFuZ18yLmxvb3NlSWRlbnRpY2FsKHJlY29yZC5pdGVtLCBpdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZCA9IF90aGlzLl9taXNtYXRjaChyZWNvcmQsIGl0ZW0sIGluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBtYXlCZURpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1heUJlRGlydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKG1pc2tvKTogY2FuIHdlIGxpbWl0IHRoaXMgdG8gZHVwbGljYXRlcyBvbmx5P1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZCA9IF90aGlzLl92ZXJpZnlSZWluc2VydGlvbihyZWNvcmQsIGl0ZW0sIGluZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlY29yZCA9IHJlY29yZC5fbmV4dDtcclxuICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLl9sZW5ndGggPSBpbmRleDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdHJ1bmNhdGUocmVjb3JkKTtcclxuICAgICAgICB0aGlzLl9jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0RpcnR5O1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLCBcImlzRGlydHlcIiwge1xyXG4gICAgICAgIC8vIENvbGxlY3Rpb25DaGFuZ2VzIGlzIGNvbnNpZGVyZWQgZGlydHkgaWYgaXQgaGFzIGFueSBhZGRpdGlvbnMsIG1vdmVzIG9yIHJlbW92YWxzLlxyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWRkaXRpb25zSGVhZCAhPT0gbnVsbCB8fCB0aGlzLl9tb3Zlc0hlYWQgIT09IG51bGwgfHwgdGhpcy5fcmVtb3ZhbHNIZWFkICE9PSBudWxsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNldCB0aGUgc3RhdGUgb2YgdGhlIGNoYW5nZSBvYmplY3RzIHRvIHNob3cgbm8gY2hhbmdlcy4gVGhpcyBtZWFucyBzZXQgcHJldmlvdXNLZXkgdG9cclxuICAgICAqIGN1cnJlbnRLZXksIGFuZCBjbGVhciBhbGwgb2YgdGhlIHF1ZXVlcyAoYWRkaXRpb25zLCBtb3ZlcywgcmVtb3ZhbHMpLlxyXG4gICAgICogU2V0IHRoZSBwcmV2aW91c0luZGV4ZXMgb2YgbW92ZWQgYW5kIGFkZGVkIGl0ZW1zIHRvIHRoZWlyIGN1cnJlbnRJbmRleGVzXHJcbiAgICAgKiBSZXNldCB0aGUgbGlzdCBvZiBhZGRpdGlvbnMsIG1vdmVzIGFuZCByZW1vdmFsc1xyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLl9yZXNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0RpcnR5KSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmQ7XHJcbiAgICAgICAgICAgIHZhciBuZXh0UmVjb3JkO1xyXG4gICAgICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX3ByZXZpb3VzSXRIZWFkID0gdGhpcy5faXRIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dCkge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLl9uZXh0UHJldmlvdXMgPSByZWNvcmQuX25leHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9hZGRpdGlvbnNIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dEFkZGVkKSB7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQucHJldmlvdXNJbmRleCA9IHJlY29yZC5jdXJyZW50SW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fYWRkaXRpb25zSGVhZCA9IHRoaXMuX2FkZGl0aW9uc1RhaWwgPSBudWxsO1xyXG4gICAgICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX21vdmVzSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSBuZXh0UmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQucHJldmlvdXNJbmRleCA9IHJlY29yZC5jdXJyZW50SW5kZXg7XHJcbiAgICAgICAgICAgICAgICBuZXh0UmVjb3JkID0gcmVjb3JkLl9uZXh0TW92ZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbW92ZXNIZWFkID0gdGhpcy5fbW92ZXNUYWlsID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNIZWFkID0gdGhpcy5fcmVtb3ZhbHNUYWlsID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGlzIHRoZSBjb3JlIGZ1bmN0aW9uIHdoaWNoIGhhbmRsZXMgZGlmZmVyZW5jZXMgYmV0d2VlbiBjb2xsZWN0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiAtIGByZWNvcmRgIGlzIHRoZSByZWNvcmQgd2hpY2ggd2Ugc2F3IGF0IHRoaXMgcG9zaXRpb24gbGFzdCB0aW1lLiBJZiBudWxsIHRoZW4gaXQgaXMgYSBuZXdcclxuICAgICAqICAgaXRlbS5cclxuICAgICAqIC0gYGl0ZW1gIGlzIHRoZSBjdXJyZW50IGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb25cclxuICAgICAqIC0gYGluZGV4YCBpcyB0aGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb25cclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5fbWlzbWF0Y2ggPSBmdW5jdGlvbiAocmVjb3JkLCBpdGVtLCBpbmRleCkge1xyXG4gICAgICAgIC8vIFRoZSBwcmV2aW91cyByZWNvcmQgYWZ0ZXIgd2hpY2ggd2Ugd2lsbCBhcHBlbmQgdGhlIGN1cnJlbnQgb25lLlxyXG4gICAgICAgIHZhciBwcmV2aW91c1JlY29yZDtcclxuICAgICAgICBpZiAocmVjb3JkID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHByZXZpb3VzUmVjb3JkID0gdGhpcy5faXRUYWlsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcHJldmlvdXNSZWNvcmQgPSByZWNvcmQuX3ByZXY7XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgcmVjb3JkIGZyb20gdGhlIGNvbGxlY3Rpb24gc2luY2Ugd2Uga25vdyBpdCBkb2VzIG5vdCBtYXRjaCB0aGUgaXRlbS5cclxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlKHJlY29yZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEF0dGVtcHQgdG8gc2VlIGlmIHdlIGhhdmUgc2VlbiB0aGUgaXRlbSBiZWZvcmUuXHJcbiAgICAgICAgcmVjb3JkID0gdGhpcy5fbGlua2VkUmVjb3JkcyA9PT0gbnVsbCA/IG51bGwgOiB0aGlzLl9saW5rZWRSZWNvcmRzLmdldChpdGVtLCBpbmRleCk7XHJcbiAgICAgICAgaWYgKHJlY29yZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBXZSBoYXZlIHNlZW4gdGhpcyBiZWZvcmUsIHdlIG5lZWQgdG8gbW92ZSBpdCBmb3J3YXJkIGluIHRoZSBjb2xsZWN0aW9uLlxyXG4gICAgICAgICAgICB0aGlzLl9tb3ZlQWZ0ZXIocmVjb3JkLCBwcmV2aW91c1JlY29yZCwgaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gTmV2ZXIgc2VlbiBpdCwgY2hlY2sgZXZpY3RlZCBsaXN0LlxyXG4gICAgICAgICAgICByZWNvcmQgPSB0aGlzLl91bmxpbmtlZFJlY29yZHMgPT09IG51bGwgPyBudWxsIDogdGhpcy5fdW5saW5rZWRSZWNvcmRzLmdldChpdGVtKTtcclxuICAgICAgICAgICAgaWYgKHJlY29yZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSXQgaXMgYW4gaXRlbSB3aGljaCB3ZSBoYXZlIGV2aWN0ZWQgZWFybGllcjogcmVpbnNlcnQgaXQgYmFjayBpbnRvIHRoZSBsaXN0LlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVpbnNlcnRBZnRlcihyZWNvcmQsIHByZXZpb3VzUmVjb3JkLCBpbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJdCBpcyBhIG5ldyBpdGVtOiBhZGQgaXQuXHJcbiAgICAgICAgICAgICAgICByZWNvcmQgPSB0aGlzLl9hZGRBZnRlcihuZXcgQ29sbGVjdGlvbkNoYW5nZVJlY29yZChpdGVtKSwgcHJldmlvdXNSZWNvcmQsIGluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBjaGVjayBpcyBvbmx5IG5lZWRlZCBpZiBhbiBhcnJheSBjb250YWlucyBkdXBsaWNhdGVzLiAoU2hvcnQgY2lyY3VpdCBvZiBub3RoaW5nIGRpcnR5KVxyXG4gICAgICpcclxuICAgICAqIFVzZSBjYXNlOiBgW2EsIGFdYCA9PiBgW2IsIGEsIGFdYFxyXG4gICAgICpcclxuICAgICAqIElmIHdlIGRpZCBub3QgaGF2ZSB0aGlzIGNoZWNrIHRoZW4gdGhlIGluc2VydGlvbiBvZiBgYmAgd291bGQ6XHJcbiAgICAgKiAgIDEpIGV2aWN0IGZpcnN0IGBhYFxyXG4gICAgICogICAyKSBpbnNlcnQgYGJgIGF0IGAwYCBpbmRleC5cclxuICAgICAqICAgMykgbGVhdmUgYGFgIGF0IGluZGV4IGAxYCBhcyBpcy4gPC0tIHRoaXMgaXMgd3JvbmchXHJcbiAgICAgKiAgIDMpIHJlaW5zZXJ0IGBhYCBhdCBpbmRleCAyLiA8LS0gdGhpcyBpcyB3cm9uZyFcclxuICAgICAqXHJcbiAgICAgKiBUaGUgY29ycmVjdCBiZWhhdmlvciBpczpcclxuICAgICAqICAgMSkgZXZpY3QgZmlyc3QgYGFgXHJcbiAgICAgKiAgIDIpIGluc2VydCBgYmAgYXQgYDBgIGluZGV4LlxyXG4gICAgICogICAzKSByZWluc2VydCBgYWAgYXQgaW5kZXggMS5cclxuICAgICAqICAgMykgbW92ZSBgYWAgYXQgZnJvbSBgMWAgdG8gYDJgLlxyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiBEb3VibGUgY2hlY2sgdGhhdCB3ZSBoYXZlIG5vdCBldmljdGVkIGEgZHVwbGljYXRlIGl0ZW0uIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIGl0ZW0gdHlwZSBtYXlcclxuICAgICAqIGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQ6XHJcbiAgICAgKiBUaGUgaW5zZXJ0aW9uIG9mIGIgd2lsbCBldmljdCB0aGUgZmlyc3QgJ2EnLiBJZiB3ZSBkb24ndCByZWluc2VydCBpdCBub3cgaXQgd2lsbCBiZSByZWluc2VydGVkXHJcbiAgICAgKiBhdCB0aGUgZW5kLiBXaGljaCB3aWxsIHNob3cgdXAgYXMgdGhlIHR3byAnYSdzIHN3aXRjaGluZyBwb3NpdGlvbi4gVGhpcyBpcyBpbmNvcnJlY3QsIHNpbmNlIGFcclxuICAgICAqIGJldHRlciB3YXkgdG8gdGhpbmsgb2YgaXQgaXMgYXMgaW5zZXJ0IG9mICdiJyByYXRoZXIgdGhlbiBzd2l0Y2ggJ2EnIHdpdGggJ2InIGFuZCB0aGVuIGFkZCAnYSdcclxuICAgICAqIGF0IHRoZSBlbmQuXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuX3ZlcmlmeVJlaW5zZXJ0aW9uID0gZnVuY3Rpb24gKHJlY29yZCwgaXRlbSwgaW5kZXgpIHtcclxuICAgICAgICB2YXIgcmVpbnNlcnRSZWNvcmQgPSB0aGlzLl91bmxpbmtlZFJlY29yZHMgPT09IG51bGwgPyBudWxsIDogdGhpcy5fdW5saW5rZWRSZWNvcmRzLmdldChpdGVtKTtcclxuICAgICAgICBpZiAocmVpbnNlcnRSZWNvcmQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmVjb3JkID0gdGhpcy5fcmVpbnNlcnRBZnRlcihyZWluc2VydFJlY29yZCwgcmVjb3JkLl9wcmV2LCBpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHJlY29yZC5jdXJyZW50SW5kZXggIT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgcmVjb3JkLmN1cnJlbnRJbmRleCA9IGluZGV4O1xyXG4gICAgICAgICAgICB0aGlzLl9hZGRUb01vdmVzKHJlY29yZCwgaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0IHJpZCBvZiBhbnkgZXhjZXNzIHtAbGluayBDb2xsZWN0aW9uQ2hhbmdlUmVjb3JkfXMgZnJvbSB0aGUgcHJldmlvdXMgY29sbGVjdGlvblxyXG4gICAgICpcclxuICAgICAqIC0gYHJlY29yZGAgVGhlIGZpcnN0IGV4Y2VzcyB7QGxpbmsgQ29sbGVjdGlvbkNoYW5nZVJlY29yZH0uXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuX3RydW5jYXRlID0gZnVuY3Rpb24gKHJlY29yZCkge1xyXG4gICAgICAgIC8vIEFueXRoaW5nIGFmdGVyIHRoYXQgbmVlZHMgdG8gYmUgcmVtb3ZlZDtcclxuICAgICAgICB3aGlsZSAocmVjb3JkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBuZXh0UmVjb3JkID0gcmVjb3JkLl9uZXh0O1xyXG4gICAgICAgICAgICB0aGlzLl9hZGRUb1JlbW92YWxzKHRoaXMuX3VubGluayhyZWNvcmQpKTtcclxuICAgICAgICAgICAgcmVjb3JkID0gbmV4dFJlY29yZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3VubGlua2VkUmVjb3JkcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl91bmxpbmtlZFJlY29yZHMuY2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2FkZGl0aW9uc1RhaWwgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fYWRkaXRpb25zVGFpbC5fbmV4dEFkZGVkID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX21vdmVzVGFpbCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9tb3Zlc1RhaWwuX25leHRNb3ZlZCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9pdFRhaWwgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5faXRUYWlsLl9uZXh0ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3JlbW92YWxzVGFpbCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmFsc1RhaWwuX25leHRSZW1vdmVkID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5fcmVpbnNlcnRBZnRlciA9IGZ1bmN0aW9uIChyZWNvcmQsIHByZXZSZWNvcmQsIGluZGV4KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3VubGlua2VkUmVjb3JkcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl91bmxpbmtlZFJlY29yZHMucmVtb3ZlKHJlY29yZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBwcmV2ID0gcmVjb3JkLl9wcmV2UmVtb3ZlZDtcclxuICAgICAgICB2YXIgbmV4dCA9IHJlY29yZC5fbmV4dFJlbW92ZWQ7XHJcbiAgICAgICAgaWYgKHByZXYgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNIZWFkID0gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHByZXYuX25leHRSZW1vdmVkID0gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5leHQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNUYWlsID0gcHJldjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5leHQuX3ByZXZSZW1vdmVkID0gcHJldjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faW5zZXJ0QWZ0ZXIocmVjb3JkLCBwcmV2UmVjb3JkLCBpbmRleCk7XHJcbiAgICAgICAgdGhpcy5fYWRkVG9Nb3ZlcyhyZWNvcmQsIGluZGV4KTtcclxuICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuX21vdmVBZnRlciA9IGZ1bmN0aW9uIChyZWNvcmQsIHByZXZSZWNvcmQsIGluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5fdW5saW5rKHJlY29yZCk7XHJcbiAgICAgICAgdGhpcy5faW5zZXJ0QWZ0ZXIocmVjb3JkLCBwcmV2UmVjb3JkLCBpbmRleCk7XHJcbiAgICAgICAgdGhpcy5fYWRkVG9Nb3ZlcyhyZWNvcmQsIGluZGV4KTtcclxuICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuX2FkZEFmdGVyID0gZnVuY3Rpb24gKHJlY29yZCwgcHJldlJlY29yZCwgaW5kZXgpIHtcclxuICAgICAgICB0aGlzLl9pbnNlcnRBZnRlcihyZWNvcmQsIHByZXZSZWNvcmQsIGluZGV4KTtcclxuICAgICAgICBpZiAodGhpcy5fYWRkaXRpb25zVGFpbCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyB0b2RvKHZpY2IpXHJcbiAgICAgICAgICAgIC8vIGFzc2VydCh0aGlzLl9hZGRpdGlvbnNIZWFkID09PSBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5fYWRkaXRpb25zVGFpbCA9IHRoaXMuX2FkZGl0aW9uc0hlYWQgPSByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0b2RvKHZpY2IpXHJcbiAgICAgICAgICAgIC8vIGFzc2VydChfYWRkaXRpb25zVGFpbC5fbmV4dEFkZGVkID09PSBudWxsKTtcclxuICAgICAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5fbmV4dEFkZGVkID09PSBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5fYWRkaXRpb25zVGFpbCA9IHRoaXMuX2FkZGl0aW9uc1RhaWwuX25leHRBZGRlZCA9IHJlY29yZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLl9pbnNlcnRBZnRlciA9IGZ1bmN0aW9uIChyZWNvcmQsIHByZXZSZWNvcmQsIGluZGV4KSB7XHJcbiAgICAgICAgLy8gdG9kbyh2aWNiKVxyXG4gICAgICAgIC8vIGFzc2VydChyZWNvcmQgIT0gcHJldlJlY29yZCk7XHJcbiAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5fbmV4dCA9PT0gbnVsbCk7XHJcbiAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5fcHJldiA9PT0gbnVsbCk7XHJcbiAgICAgICAgdmFyIG5leHQgPSBwcmV2UmVjb3JkID09PSBudWxsID8gdGhpcy5faXRIZWFkIDogcHJldlJlY29yZC5fbmV4dDtcclxuICAgICAgICAvLyB0b2RvKHZpY2IpXHJcbiAgICAgICAgLy8gYXNzZXJ0KG5leHQgIT0gcmVjb3JkKTtcclxuICAgICAgICAvLyBhc3NlcnQocHJldlJlY29yZCAhPSByZWNvcmQpO1xyXG4gICAgICAgIHJlY29yZC5fbmV4dCA9IG5leHQ7XHJcbiAgICAgICAgcmVjb3JkLl9wcmV2ID0gcHJldlJlY29yZDtcclxuICAgICAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pdFRhaWwgPSByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBuZXh0Ll9wcmV2ID0gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHJldlJlY29yZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pdEhlYWQgPSByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwcmV2UmVjb3JkLl9uZXh0ID0gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fbGlua2VkUmVjb3JkcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9saW5rZWRSZWNvcmRzID0gbmV3IF9EdXBsaWNhdGVNYXAoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbGlua2VkUmVjb3Jkcy5wdXQocmVjb3JkKTtcclxuICAgICAgICByZWNvcmQuY3VycmVudEluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLl9yZW1vdmUgPSBmdW5jdGlvbiAocmVjb3JkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZFRvUmVtb3ZhbHModGhpcy5fdW5saW5rKHJlY29yZCkpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuX3VubGluayA9IGZ1bmN0aW9uIChyZWNvcmQpIHtcclxuICAgICAgICBpZiAodGhpcy5fbGlua2VkUmVjb3JkcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9saW5rZWRSZWNvcmRzLnJlbW92ZShyZWNvcmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcHJldiA9IHJlY29yZC5fcHJldjtcclxuICAgICAgICB2YXIgbmV4dCA9IHJlY29yZC5fbmV4dDtcclxuICAgICAgICAvLyB0b2RvKHZpY2IpXHJcbiAgICAgICAgLy8gYXNzZXJ0KChyZWNvcmQuX3ByZXYgPSBudWxsKSA9PT0gbnVsbCk7XHJcbiAgICAgICAgLy8gYXNzZXJ0KChyZWNvcmQuX25leHQgPSBudWxsKSA9PT0gbnVsbCk7XHJcbiAgICAgICAgaWYgKHByZXYgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5faXRIZWFkID0gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHByZXYuX25leHQgPSBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pdFRhaWwgPSBwcmV2O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbmV4dC5fcHJldiA9IHByZXY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5fYWRkVG9Nb3ZlcyA9IGZ1bmN0aW9uIChyZWNvcmQsIHRvSW5kZXgpIHtcclxuICAgICAgICAvLyB0b2RvKHZpY2IpXHJcbiAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5fbmV4dE1vdmVkID09PSBudWxsKTtcclxuICAgICAgICBpZiAocmVjb3JkLnByZXZpb3VzSW5kZXggPT09IHRvSW5kZXgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX21vdmVzVGFpbCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyB0b2RvKHZpY2IpXHJcbiAgICAgICAgICAgIC8vIGFzc2VydChfbW92ZXNIZWFkID09PSBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5fbW92ZXNUYWlsID0gdGhpcy5fbW92ZXNIZWFkID0gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdG9kbyh2aWNiKVxyXG4gICAgICAgICAgICAvLyBhc3NlcnQoX21vdmVzVGFpbC5fbmV4dE1vdmVkID09PSBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5fbW92ZXNUYWlsID0gdGhpcy5fbW92ZXNUYWlsLl9uZXh0TW92ZWQgPSByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5fYWRkVG9SZW1vdmFscyA9IGZ1bmN0aW9uIChyZWNvcmQpIHtcclxuICAgICAgICBpZiAodGhpcy5fdW5saW5rZWRSZWNvcmRzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VubGlua2VkUmVjb3JkcyA9IG5ldyBfRHVwbGljYXRlTWFwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3VubGlua2VkUmVjb3Jkcy5wdXQocmVjb3JkKTtcclxuICAgICAgICByZWNvcmQuY3VycmVudEluZGV4ID0gbnVsbDtcclxuICAgICAgICByZWNvcmQuX25leHRSZW1vdmVkID0gbnVsbDtcclxuICAgICAgICBpZiAodGhpcy5fcmVtb3ZhbHNUYWlsID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIHRvZG8odmljYilcclxuICAgICAgICAgICAgLy8gYXNzZXJ0KF9yZW1vdmFsc0hlYWQgPT09IG51bGwpO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmFsc1RhaWwgPSB0aGlzLl9yZW1vdmFsc0hlYWQgPSByZWNvcmQ7XHJcbiAgICAgICAgICAgIHJlY29yZC5fcHJldlJlbW92ZWQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdG9kbyh2aWNiKVxyXG4gICAgICAgICAgICAvLyBhc3NlcnQoX3JlbW92YWxzVGFpbC5fbmV4dFJlbW92ZWQgPT09IG51bGwpO1xyXG4gICAgICAgICAgICAvLyBhc3NlcnQocmVjb3JkLl9uZXh0UmVtb3ZlZCA9PT0gbnVsbCk7XHJcbiAgICAgICAgICAgIHJlY29yZC5fcHJldlJlbW92ZWQgPSB0aGlzLl9yZW1vdmFsc1RhaWw7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbW92YWxzVGFpbCA9IHRoaXMuX3JlbW92YWxzVGFpbC5fbmV4dFJlbW92ZWQgPSByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICB9O1xyXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVjb3JkO1xyXG4gICAgICAgIHZhciBsaXN0ID0gW107XHJcbiAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9pdEhlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0KSB7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaChyZWNvcmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcHJldmlvdXMgPSBbXTtcclxuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX3ByZXZpb3VzSXRIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dFByZXZpb3VzKSB7XHJcbiAgICAgICAgICAgIHByZXZpb3VzLnB1c2gocmVjb3JkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGFkZGl0aW9ucyA9IFtdO1xyXG4gICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5fYWRkaXRpb25zSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRBZGRlZCkge1xyXG4gICAgICAgICAgICBhZGRpdGlvbnMucHVzaChyZWNvcmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbW92ZXMgPSBbXTtcclxuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX21vdmVzSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRNb3ZlZCkge1xyXG4gICAgICAgICAgICBtb3Zlcy5wdXNoKHJlY29yZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZW1vdmFscyA9IFtdO1xyXG4gICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5fcmVtb3ZhbHNIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dFJlbW92ZWQpIHtcclxuICAgICAgICAgICAgcmVtb3ZhbHMucHVzaChyZWNvcmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gXCJjb2xsZWN0aW9uOiBcIiArIGxpc3Quam9pbignLCAnKSArIFwiXFxuXCIgKyBcInByZXZpb3VzOiBcIiArIHByZXZpb3VzLmpvaW4oJywgJykgKyBcIlxcblwiICtcclxuICAgICAgICAgICAgXCJhZGRpdGlvbnM6IFwiICsgYWRkaXRpb25zLmpvaW4oJywgJykgKyBcIlxcblwiICsgXCJtb3ZlczogXCIgKyBtb3Zlcy5qb2luKCcsICcpICsgXCJcXG5cIiArXHJcbiAgICAgICAgICAgIFwicmVtb3ZhbHM6IFwiICsgcmVtb3ZhbHMuam9pbignLCAnKSArIFwiXFxuXCI7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERlZmF1bHRJdGVyYWJsZURpZmZlcjtcclxufSkoKTtcclxuZXhwb3J0cy5EZWZhdWx0SXRlcmFibGVEaWZmZXIgPSBEZWZhdWx0SXRlcmFibGVEaWZmZXI7XHJcbnZhciBDb2xsZWN0aW9uQ2hhbmdlUmVjb3JkID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbGxlY3Rpb25DaGFuZ2VSZWNvcmQoaXRlbSkge1xyXG4gICAgICAgIHRoaXMuaXRlbSA9IGl0ZW07XHJcbiAgICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSBudWxsO1xyXG4gICAgICAgIHRoaXMucHJldmlvdXNJbmRleCA9IG51bGw7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX25leHRQcmV2aW91cyA9IG51bGw7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX3ByZXYgPSBudWxsO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9uZXh0ID0gbnVsbDtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5fcHJldkR1cCA9IG51bGw7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX25leHREdXAgPSBudWxsO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9wcmV2UmVtb3ZlZCA9IG51bGw7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX25leHRSZW1vdmVkID0gbnVsbDtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5fbmV4dEFkZGVkID0gbnVsbDtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5fbmV4dE1vdmVkID0gbnVsbDtcclxuICAgIH1cclxuICAgIENvbGxlY3Rpb25DaGFuZ2VSZWNvcmQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByZXZpb3VzSW5kZXggPT09IHRoaXMuY3VycmVudEluZGV4ID9cclxuICAgICAgICAgICAgbGFuZ18yLnN0cmluZ2lmeSh0aGlzLml0ZW0pIDpcclxuICAgICAgICAgICAgbGFuZ18yLnN0cmluZ2lmeSh0aGlzLml0ZW0pICsgJ1snICsgbGFuZ18yLnN0cmluZ2lmeSh0aGlzLnByZXZpb3VzSW5kZXgpICsgJy0+JyArXHJcbiAgICAgICAgICAgICAgICBsYW5nXzIuc3RyaW5naWZ5KHRoaXMuY3VycmVudEluZGV4KSArICddJztcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29sbGVjdGlvbkNoYW5nZVJlY29yZDtcclxufSkoKTtcclxuZXhwb3J0cy5Db2xsZWN0aW9uQ2hhbmdlUmVjb3JkID0gQ29sbGVjdGlvbkNoYW5nZVJlY29yZDtcclxuLy8gQSBsaW5rZWQgbGlzdCBvZiBDb2xsZWN0aW9uQ2hhbmdlUmVjb3JkcyB3aXRoIHRoZSBzYW1lIENvbGxlY3Rpb25DaGFuZ2VSZWNvcmQuaXRlbVxyXG52YXIgX0R1cGxpY2F0ZUl0ZW1SZWNvcmRMaXN0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIF9EdXBsaWNhdGVJdGVtUmVjb3JkTGlzdCgpIHtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5faGVhZCA9IG51bGw7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX3RhaWwgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBlbmQgdGhlIHJlY29yZCB0byB0aGUgbGlzdCBvZiBkdXBsaWNhdGVzLlxyXG4gICAgICpcclxuICAgICAqIE5vdGU6IGJ5IGRlc2lnbiBhbGwgcmVjb3JkcyBpbiB0aGUgbGlzdCBvZiBkdXBsaWNhdGVzIGhvbGQgdGhlIHNhbWUgdmFsdWUgaW4gcmVjb3JkLml0ZW0uXHJcbiAgICAgKi9cclxuICAgIF9EdXBsaWNhdGVJdGVtUmVjb3JkTGlzdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHJlY29yZCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9oZWFkID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYWQgPSB0aGlzLl90YWlsID0gcmVjb3JkO1xyXG4gICAgICAgICAgICByZWNvcmQuX25leHREdXAgPSBudWxsO1xyXG4gICAgICAgICAgICByZWNvcmQuX3ByZXZEdXAgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdG9kbyh2aWNiKVxyXG4gICAgICAgICAgICAvLyBhc3NlcnQocmVjb3JkLml0ZW0gPT0gIF9oZWFkLml0ZW0gfHxcclxuICAgICAgICAgICAgLy8gICAgICAgcmVjb3JkLml0ZW0gaXMgbnVtICYmIHJlY29yZC5pdGVtLmlzTmFOICYmIF9oZWFkLml0ZW0gaXMgbnVtICYmIF9oZWFkLml0ZW0uaXNOYU4pO1xyXG4gICAgICAgICAgICB0aGlzLl90YWlsLl9uZXh0RHVwID0gcmVjb3JkO1xyXG4gICAgICAgICAgICByZWNvcmQuX3ByZXZEdXAgPSB0aGlzLl90YWlsO1xyXG4gICAgICAgICAgICByZWNvcmQuX25leHREdXAgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl90YWlsID0gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBSZXR1cm5zIGEgQ29sbGVjdGlvbkNoYW5nZVJlY29yZCBoYXZpbmcgQ29sbGVjdGlvbkNoYW5nZVJlY29yZC5pdGVtID09IGl0ZW0gYW5kXHJcbiAgICAvLyBDb2xsZWN0aW9uQ2hhbmdlUmVjb3JkLmN1cnJlbnRJbmRleCA+PSBhZnRlckluZGV4XHJcbiAgICBfRHVwbGljYXRlSXRlbVJlY29yZExpc3QucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChpdGVtLCBhZnRlckluZGV4KSB7XHJcbiAgICAgICAgdmFyIHJlY29yZDtcclxuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX2hlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0RHVwKSB7XHJcbiAgICAgICAgICAgIGlmICgoYWZ0ZXJJbmRleCA9PT0gbnVsbCB8fCBhZnRlckluZGV4IDwgcmVjb3JkLmN1cnJlbnRJbmRleCkgJiZcclxuICAgICAgICAgICAgICAgIGxhbmdfMi5sb29zZUlkZW50aWNhbChyZWNvcmQuaXRlbSwgaXRlbSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgb25lIHtAbGluayBDb2xsZWN0aW9uQ2hhbmdlUmVjb3JkfSBmcm9tIHRoZSBsaXN0IG9mIGR1cGxpY2F0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBsaXN0IG9mIGR1cGxpY2F0ZXMgaXMgZW1wdHkuXHJcbiAgICAgKi9cclxuICAgIF9EdXBsaWNhdGVJdGVtUmVjb3JkTGlzdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHJlY29yZCkge1xyXG4gICAgICAgIC8vIHRvZG8odmljYilcclxuICAgICAgICAvLyBhc3NlcnQoKCkge1xyXG4gICAgICAgIC8vICAvLyB2ZXJpZnkgdGhhdCB0aGUgcmVjb3JkIGJlaW5nIHJlbW92ZWQgaXMgaW4gdGhlIGxpc3QuXHJcbiAgICAgICAgLy8gIGZvciAoQ29sbGVjdGlvbkNoYW5nZVJlY29yZCBjdXJzb3IgPSBfaGVhZDsgY3Vyc29yICE9IG51bGw7IGN1cnNvciA9IGN1cnNvci5fbmV4dER1cCkge1xyXG4gICAgICAgIC8vICAgIGlmIChpZGVudGljYWwoY3Vyc29yLCByZWNvcmQpKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAvLyAgfVxyXG4gICAgICAgIC8vICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgLy99KTtcclxuICAgICAgICB2YXIgcHJldiA9IHJlY29yZC5fcHJldkR1cDtcclxuICAgICAgICB2YXIgbmV4dCA9IHJlY29yZC5fbmV4dER1cDtcclxuICAgICAgICBpZiAocHJldiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9oZWFkID0gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHByZXYuX25leHREdXAgPSBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl90YWlsID0gcHJldjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5leHQuX3ByZXZEdXAgPSBwcmV2O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5faGVhZCA9PT0gbnVsbDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX0R1cGxpY2F0ZUl0ZW1SZWNvcmRMaXN0O1xyXG59KSgpO1xyXG52YXIgX0R1cGxpY2F0ZU1hcCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBfRHVwbGljYXRlTWFwKCkge1xyXG4gICAgICAgIHRoaXMubWFwID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgX0R1cGxpY2F0ZU1hcC5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKHJlY29yZCkge1xyXG4gICAgICAgIC8vIHRvZG8odmljYikgaGFuZGxlIGNvcm5lciBjYXNlc1xyXG4gICAgICAgIHZhciBrZXkgPSBsYW5nXzIuZ2V0TWFwS2V5KHJlY29yZC5pdGVtKTtcclxuICAgICAgICB2YXIgZHVwbGljYXRlcyA9IHRoaXMubWFwLmdldChrZXkpO1xyXG4gICAgICAgIGlmICghbGFuZ18yLmlzUHJlc2VudChkdXBsaWNhdGVzKSkge1xyXG4gICAgICAgICAgICBkdXBsaWNhdGVzID0gbmV3IF9EdXBsaWNhdGVJdGVtUmVjb3JkTGlzdCgpO1xyXG4gICAgICAgICAgICB0aGlzLm1hcC5zZXQoa2V5LCBkdXBsaWNhdGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZHVwbGljYXRlcy5hZGQocmVjb3JkKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHJpZXZlIHRoZSBgdmFsdWVgIHVzaW5nIGtleS4gQmVjYXVzZSB0aGUgQ29sbGVjdGlvbkNoYW5nZVJlY29yZCB2YWx1ZSBtYXliZSBvbmUgd2hpY2ggd2VcclxuICAgICAqIGhhdmUgYWxyZWFkeSBpdGVyYXRlZCBvdmVyLCB3ZSB1c2UgdGhlIGFmdGVySW5kZXggdG8gcHJldGVuZCBpdCBpcyBub3QgdGhlcmUuXHJcbiAgICAgKlxyXG4gICAgICogVXNlIGNhc2U6IGBbYSwgYiwgYywgYSwgYV1gIGlmIHdlIGFyZSBhdCBpbmRleCBgM2Agd2hpY2ggaXMgdGhlIHNlY29uZCBgYWAgdGhlbiBhc2tpbmcgaWYgd2VcclxuICAgICAqIGhhdmUgYW55IG1vcmUgYGFgcyBuZWVkcyB0byByZXR1cm4gdGhlIGxhc3QgYGFgIG5vdCB0aGUgZmlyc3Qgb3Igc2Vjb25kLlxyXG4gICAgICovXHJcbiAgICBfRHVwbGljYXRlTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAodmFsdWUsIGFmdGVySW5kZXgpIHtcclxuICAgICAgICBpZiAoYWZ0ZXJJbmRleCA9PT0gdm9pZCAwKSB7IGFmdGVySW5kZXggPSBudWxsOyB9XHJcbiAgICAgICAgdmFyIGtleSA9IGxhbmdfMi5nZXRNYXBLZXkodmFsdWUpO1xyXG4gICAgICAgIHZhciByZWNvcmRMaXN0ID0gdGhpcy5tYXAuZ2V0KGtleSk7XHJcbiAgICAgICAgcmV0dXJuIGxhbmdfMi5pc0JsYW5rKHJlY29yZExpc3QpID8gbnVsbCA6IHJlY29yZExpc3QuZ2V0KHZhbHVlLCBhZnRlckluZGV4KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgYSB7QGxpbmsgQ29sbGVjdGlvbkNoYW5nZVJlY29yZH0gZnJvbSB0aGUgbGlzdCBvZiBkdXBsaWNhdGVzLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBsaXN0IG9mIGR1cGxpY2F0ZXMgYWxzbyBpcyByZW1vdmVkIGZyb20gdGhlIG1hcCBpZiBpdCBnZXRzIGVtcHR5LlxyXG4gICAgICovXHJcbiAgICBfRHVwbGljYXRlTWFwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAocmVjb3JkKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IGxhbmdfMi5nZXRNYXBLZXkocmVjb3JkLml0ZW0pO1xyXG4gICAgICAgIC8vIHRvZG8odmljYilcclxuICAgICAgICAvLyBhc3NlcnQodGhpcy5tYXAuY29udGFpbnNLZXkoa2V5KSk7XHJcbiAgICAgICAgdmFyIHJlY29yZExpc3QgPSB0aGlzLm1hcC5nZXQoa2V5KTtcclxuICAgICAgICAvLyBSZW1vdmUgdGhlIGxpc3Qgb2YgZHVwbGljYXRlcyB3aGVuIGl0IGdldHMgZW1wdHlcclxuICAgICAgICBpZiAocmVjb3JkTGlzdC5yZW1vdmUocmVjb3JkKSkge1xyXG4gICAgICAgICAgICB0aGlzLm1hcC5kZWxldGUoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX0R1cGxpY2F0ZU1hcC5wcm90b3R5cGUsIFwiaXNFbXB0eVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm1hcC5zaXplID09PSAwOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIF9EdXBsaWNhdGVNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkgeyB0aGlzLm1hcC5jbGVhcigpOyB9O1xyXG4gICAgX0R1cGxpY2F0ZU1hcC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnX0R1cGxpY2F0ZU1hcCgnICsgbGFuZ18yLnN0cmluZ2lmeSh0aGlzLm1hcCkgKyAnKSc7IH07XHJcbiAgICByZXR1cm4gX0R1cGxpY2F0ZU1hcDtcclxufSkoKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdF9pdGVyYWJsZV9kaWZmZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERlZmF1bHRLZXlWYWx1ZURpZmZlckZhY3RvcnkoKSB7XHJcbiAgICB9XHJcbiAgICBEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5LnByb3RvdHlwZS5zdXBwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE1hcCB8fCBsYW5nXzEuaXNKc09iamVjdChvYmopOyB9O1xyXG4gICAgRGVmYXVsdEtleVZhbHVlRGlmZmVyRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKGNkUmVmKSB7IHJldHVybiBuZXcgRGVmYXVsdEtleVZhbHVlRGlmZmVyKCk7IH07XHJcbiAgICBEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5ID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXHJcbiAgICBdLCBEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5KTtcclxuICAgIHJldHVybiBEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5O1xyXG59KSgpO1xyXG5leHBvcnRzLkRlZmF1bHRLZXlWYWx1ZURpZmZlckZhY3RvcnkgPSBEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5O1xyXG52YXIgRGVmYXVsdEtleVZhbHVlRGlmZmVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERlZmF1bHRLZXlWYWx1ZURpZmZlcigpIHtcclxuICAgICAgICB0aGlzLl9yZWNvcmRzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuX21hcEhlYWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3ByZXZpb3VzTWFwSGVhZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fY2hhbmdlc0hlYWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2NoYW5nZXNUYWlsID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9hZGRpdGlvbnNIZWFkID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9hZGRpdGlvbnNUYWlsID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9yZW1vdmFsc0hlYWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3JlbW92YWxzVGFpbCA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVmYXVsdEtleVZhbHVlRGlmZmVyLnByb3RvdHlwZSwgXCJpc0RpcnR5XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FkZGl0aW9uc0hlYWQgIT09IG51bGwgfHwgdGhpcy5fY2hhbmdlc0hlYWQgIT09IG51bGwgfHxcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92YWxzSGVhZCAhPT0gbnVsbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIERlZmF1bHRLZXlWYWx1ZURpZmZlci5wcm90b3R5cGUuZm9yRWFjaEl0ZW0gPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICB2YXIgcmVjb3JkO1xyXG4gICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5fbWFwSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHQpIHtcclxuICAgICAgICAgICAgZm4ocmVjb3JkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRGVmYXVsdEtleVZhbHVlRGlmZmVyLnByb3RvdHlwZS5mb3JFYWNoUHJldmlvdXNJdGVtID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgdmFyIHJlY29yZDtcclxuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX3ByZXZpb3VzTWFwSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRQcmV2aW91cykge1xyXG4gICAgICAgICAgICBmbihyZWNvcmQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEZWZhdWx0S2V5VmFsdWVEaWZmZXIucHJvdG90eXBlLmZvckVhY2hDaGFuZ2VkSXRlbSA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICAgIHZhciByZWNvcmQ7XHJcbiAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9jaGFuZ2VzSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgIGZuKHJlY29yZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIERlZmF1bHRLZXlWYWx1ZURpZmZlci5wcm90b3R5cGUuZm9yRWFjaEFkZGVkSXRlbSA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICAgIHZhciByZWNvcmQ7XHJcbiAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9hZGRpdGlvbnNIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dEFkZGVkKSB7XHJcbiAgICAgICAgICAgIGZuKHJlY29yZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIERlZmF1bHRLZXlWYWx1ZURpZmZlci5wcm90b3R5cGUuZm9yRWFjaFJlbW92ZWRJdGVtID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgdmFyIHJlY29yZDtcclxuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX3JlbW92YWxzSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRSZW1vdmVkKSB7XHJcbiAgICAgICAgICAgIGZuKHJlY29yZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIERlZmF1bHRLZXlWYWx1ZURpZmZlci5wcm90b3R5cGUuZGlmZiA9IGZ1bmN0aW9uIChtYXApIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsobWFwKSlcclxuICAgICAgICAgICAgbWFwID0gY29sbGVjdGlvbl8xLk1hcFdyYXBwZXIuY3JlYXRlRnJvbVBhaXJzKFtdKTtcclxuICAgICAgICBpZiAoIShtYXAgaW5zdGFuY2VvZiBNYXAgfHwgbGFuZ18xLmlzSnNPYmplY3QobWFwKSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKFwiRXJyb3IgdHJ5aW5nIHRvIGRpZmYgJ1wiICsgbWFwICsgXCInXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jaGVjayhtYXApKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIERlZmF1bHRLZXlWYWx1ZURpZmZlci5wcm90b3R5cGUub25EZXN0cm95ID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgRGVmYXVsdEtleVZhbHVlRGlmZmVyLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uIChtYXApIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX3Jlc2V0KCk7XHJcbiAgICAgICAgdmFyIHJlY29yZHMgPSB0aGlzLl9yZWNvcmRzO1xyXG4gICAgICAgIHZhciBvbGRTZXFSZWNvcmQgPSB0aGlzLl9tYXBIZWFkO1xyXG4gICAgICAgIHZhciBsYXN0T2xkU2VxUmVjb3JkID0gbnVsbDtcclxuICAgICAgICB2YXIgbGFzdE5ld1NlcVJlY29yZCA9IG51bGw7XHJcbiAgICAgICAgdmFyIHNlcUNoYW5nZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9mb3JFYWNoKG1hcCwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgdmFyIG5ld1NlcVJlY29yZDtcclxuICAgICAgICAgICAgaWYgKG9sZFNlcVJlY29yZCAhPT0gbnVsbCAmJiBrZXkgPT09IG9sZFNlcVJlY29yZC5rZXkpIHtcclxuICAgICAgICAgICAgICAgIG5ld1NlcVJlY29yZCA9IG9sZFNlcVJlY29yZDtcclxuICAgICAgICAgICAgICAgIGlmICghbGFuZ18xLmxvb3NlSWRlbnRpY2FsKHZhbHVlLCBvbGRTZXFSZWNvcmQuY3VycmVudFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9sZFNlcVJlY29yZC5wcmV2aW91c1ZhbHVlID0gb2xkU2VxUmVjb3JkLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBvbGRTZXFSZWNvcmQuY3VycmVudFZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2FkZFRvQ2hhbmdlcyhvbGRTZXFSZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VxQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAob2xkU2VxUmVjb3JkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2xkU2VxUmVjb3JkLl9uZXh0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcmVtb3ZlRnJvbVNlcShsYXN0T2xkU2VxUmVjb3JkLCBvbGRTZXFSZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9hZGRUb1JlbW92YWxzKG9sZFNlcVJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocmVjb3Jkcy5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1NlcVJlY29yZCA9IHJlY29yZHMuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdTZXFSZWNvcmQgPSBuZXcgS1ZDaGFuZ2VSZWNvcmQoa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICByZWNvcmRzLnNldChrZXksIG5ld1NlcVJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U2VxUmVjb3JkLmN1cnJlbnRWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9hZGRUb0FkZGl0aW9ucyhuZXdTZXFSZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzZXFDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2lzSW5SZW1vdmFscyhuZXdTZXFSZWNvcmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3JlbW92ZUZyb21SZW1vdmFscyhuZXdTZXFSZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGxhc3ROZXdTZXFSZWNvcmQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9tYXBIZWFkID0gbmV3U2VxUmVjb3JkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdE5ld1NlcVJlY29yZC5fbmV4dCA9IG5ld1NlcVJlY29yZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsYXN0T2xkU2VxUmVjb3JkID0gb2xkU2VxUmVjb3JkO1xyXG4gICAgICAgICAgICBsYXN0TmV3U2VxUmVjb3JkID0gbmV3U2VxUmVjb3JkO1xyXG4gICAgICAgICAgICBvbGRTZXFSZWNvcmQgPSBvbGRTZXFSZWNvcmQgPT09IG51bGwgPyBudWxsIDogb2xkU2VxUmVjb3JkLl9uZXh0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX3RydW5jYXRlKGxhc3RPbGRTZXFSZWNvcmQsIG9sZFNlcVJlY29yZCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNEaXJ0eTtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBEZWZhdWx0S2V5VmFsdWVEaWZmZXIucHJvdG90eXBlLl9yZXNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0RpcnR5KSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmQ7XHJcbiAgICAgICAgICAgIC8vIFJlY29yZCB0aGUgc3RhdGUgb2YgdGhlIG1hcHBpbmdcclxuICAgICAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9wcmV2aW91c01hcEhlYWQgPSB0aGlzLl9tYXBIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dCkge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLl9uZXh0UHJldmlvdXMgPSByZWNvcmQuX25leHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9jaGFuZ2VzSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQucHJldmlvdXNWYWx1ZSA9IHJlY29yZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9hZGRpdGlvbnNIZWFkOyByZWNvcmQgIT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0QWRkZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlY29yZC5wcmV2aW91c1ZhbHVlID0gcmVjb3JkLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB0b2RvKHZpY2IpIG9uY2UgYXNzZXJ0IGlzIHN1cHBvcnRlZFxyXG4gICAgICAgICAgICAvLyBhc3NlcnQoKCkge1xyXG4gICAgICAgICAgICAvLyAgdmFyIHIgPSBfY2hhbmdlc0hlYWQ7XHJcbiAgICAgICAgICAgIC8vICB3aGlsZSAociAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vICAgIHZhciBuZXh0UmVjb3JkID0gci5fbmV4dENoYW5nZWQ7XHJcbiAgICAgICAgICAgIC8vICAgIHIuX25leHRDaGFuZ2VkID0gbnVsbDtcclxuICAgICAgICAgICAgLy8gICAgciA9IG5leHRSZWNvcmQ7XHJcbiAgICAgICAgICAgIC8vICB9XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIC8vICByID0gX2FkZGl0aW9uc0hlYWQ7XHJcbiAgICAgICAgICAgIC8vICB3aGlsZSAociAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vICAgIHZhciBuZXh0UmVjb3JkID0gci5fbmV4dEFkZGVkO1xyXG4gICAgICAgICAgICAvLyAgICByLl9uZXh0QWRkZWQgPSBudWxsO1xyXG4gICAgICAgICAgICAvLyAgICByID0gbmV4dFJlY29yZDtcclxuICAgICAgICAgICAgLy8gIH1cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgLy8gIHIgPSBfcmVtb3ZhbHNIZWFkO1xyXG4gICAgICAgICAgICAvLyAgd2hpbGUgKHIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyAgICB2YXIgbmV4dFJlY29yZCA9IHIuX25leHRSZW1vdmVkO1xyXG4gICAgICAgICAgICAvLyAgICByLl9uZXh0UmVtb3ZlZCA9IG51bGw7XHJcbiAgICAgICAgICAgIC8vICAgIHIgPSBuZXh0UmVjb3JkO1xyXG4gICAgICAgICAgICAvLyAgfVxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAvLyAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIC8vfSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZXNIZWFkID0gdGhpcy5fY2hhbmdlc1RhaWwgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9hZGRpdGlvbnNIZWFkID0gdGhpcy5fYWRkaXRpb25zVGFpbCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbW92YWxzSGVhZCA9IHRoaXMuX3JlbW92YWxzVGFpbCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIERlZmF1bHRLZXlWYWx1ZURpZmZlci5wcm90b3R5cGUuX3RydW5jYXRlID0gZnVuY3Rpb24gKGxhc3RSZWNvcmQsIHJlY29yZCkge1xyXG4gICAgICAgIHdoaWxlIChyZWNvcmQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKGxhc3RSZWNvcmQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcEhlYWQgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGFzdFJlY29yZC5fbmV4dCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG5leHRSZWNvcmQgPSByZWNvcmQuX25leHQ7XHJcbiAgICAgICAgICAgIC8vIHRvZG8odmljYikgYXNzZXJ0XHJcbiAgICAgICAgICAgIC8vIGFzc2VydCgoKCkge1xyXG4gICAgICAgICAgICAvLyAgcmVjb3JkLl9uZXh0ID0gbnVsbDtcclxuICAgICAgICAgICAgLy8gIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAvL30pKTtcclxuICAgICAgICAgICAgdGhpcy5fYWRkVG9SZW1vdmFscyhyZWNvcmQpO1xyXG4gICAgICAgICAgICBsYXN0UmVjb3JkID0gcmVjb3JkO1xyXG4gICAgICAgICAgICByZWNvcmQgPSBuZXh0UmVjb3JkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciByZWMgPSB0aGlzLl9yZW1vdmFsc0hlYWQ7IHJlYyAhPT0gbnVsbDsgcmVjID0gcmVjLl9uZXh0UmVtb3ZlZCkge1xyXG4gICAgICAgICAgICByZWMucHJldmlvdXNWYWx1ZSA9IHJlYy5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIHJlYy5jdXJyZW50VmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzLmRlbGV0ZShyZWMua2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRGVmYXVsdEtleVZhbHVlRGlmZmVyLnByb3RvdHlwZS5faXNJblJlbW92YWxzID0gZnVuY3Rpb24gKHJlY29yZCkge1xyXG4gICAgICAgIHJldHVybiByZWNvcmQgPT09IHRoaXMuX3JlbW92YWxzSGVhZCB8fCByZWNvcmQuX25leHRSZW1vdmVkICE9PSBudWxsIHx8XHJcbiAgICAgICAgICAgIHJlY29yZC5fcHJldlJlbW92ZWQgIT09IG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRGVmYXVsdEtleVZhbHVlRGlmZmVyLnByb3RvdHlwZS5fYWRkVG9SZW1vdmFscyA9IGZ1bmN0aW9uIChyZWNvcmQpIHtcclxuICAgICAgICAvLyB0b2RvKHZpY2IpIGFzc2VydFxyXG4gICAgICAgIC8vIGFzc2VydChyZWNvcmQuX25leHQgPT0gbnVsbCk7XHJcbiAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5fbmV4dEFkZGVkID09IG51bGwpO1xyXG4gICAgICAgIC8vIGFzc2VydChyZWNvcmQuX25leHRDaGFuZ2VkID09IG51bGwpO1xyXG4gICAgICAgIC8vIGFzc2VydChyZWNvcmQuX25leHRSZW1vdmVkID09IG51bGwpO1xyXG4gICAgICAgIC8vIGFzc2VydChyZWNvcmQuX3ByZXZSZW1vdmVkID09IG51bGwpO1xyXG4gICAgICAgIGlmICh0aGlzLl9yZW1vdmFsc0hlYWQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNIZWFkID0gdGhpcy5fcmVtb3ZhbHNUYWlsID0gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNUYWlsLl9uZXh0UmVtb3ZlZCA9IHJlY29yZDtcclxuICAgICAgICAgICAgcmVjb3JkLl9wcmV2UmVtb3ZlZCA9IHRoaXMuX3JlbW92YWxzVGFpbDtcclxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNUYWlsID0gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBEZWZhdWx0S2V5VmFsdWVEaWZmZXIucHJvdG90eXBlLl9yZW1vdmVGcm9tU2VxID0gZnVuY3Rpb24gKHByZXYsIHJlY29yZCkge1xyXG4gICAgICAgIHZhciBuZXh0ID0gcmVjb3JkLl9uZXh0O1xyXG4gICAgICAgIGlmIChwcmV2ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcEhlYWQgPSBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcHJldi5fbmV4dCA9IG5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRvZG8odmljYikgYXNzZXJ0XHJcbiAgICAgICAgLy8gYXNzZXJ0KCgoKSB7XHJcbiAgICAgICAgLy8gIHJlY29yZC5fbmV4dCA9IG51bGw7XHJcbiAgICAgICAgLy8gIHJldHVybiB0cnVlO1xyXG4gICAgICAgIC8vfSkoKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRGVmYXVsdEtleVZhbHVlRGlmZmVyLnByb3RvdHlwZS5fcmVtb3ZlRnJvbVJlbW92YWxzID0gZnVuY3Rpb24gKHJlY29yZCkge1xyXG4gICAgICAgIC8vIHRvZG8odmljYikgYXNzZXJ0XHJcbiAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5fbmV4dCA9PSBudWxsKTtcclxuICAgICAgICAvLyBhc3NlcnQocmVjb3JkLl9uZXh0QWRkZWQgPT0gbnVsbCk7XHJcbiAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5fbmV4dENoYW5nZWQgPT0gbnVsbCk7XHJcbiAgICAgICAgdmFyIHByZXYgPSByZWNvcmQuX3ByZXZSZW1vdmVkO1xyXG4gICAgICAgIHZhciBuZXh0ID0gcmVjb3JkLl9uZXh0UmVtb3ZlZDtcclxuICAgICAgICBpZiAocHJldiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmFsc0hlYWQgPSBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcHJldi5fbmV4dFJlbW92ZWQgPSBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmFsc1RhaWwgPSBwcmV2O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbmV4dC5fcHJldlJlbW92ZWQgPSBwcmV2O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZWNvcmQuX3ByZXZSZW1vdmVkID0gcmVjb3JkLl9uZXh0UmVtb3ZlZCA9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRGVmYXVsdEtleVZhbHVlRGlmZmVyLnByb3RvdHlwZS5fYWRkVG9BZGRpdGlvbnMgPSBmdW5jdGlvbiAocmVjb3JkKSB7XHJcbiAgICAgICAgLy8gdG9kbyh2aWNiKTogYXNzZXJ0XHJcbiAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5fbmV4dCA9PSBudWxsKTtcclxuICAgICAgICAvLyBhc3NlcnQocmVjb3JkLl9uZXh0QWRkZWQgPT0gbnVsbCk7XHJcbiAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5fbmV4dENoYW5nZWQgPT0gbnVsbCk7XHJcbiAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5fbmV4dFJlbW92ZWQgPT0gbnVsbCk7XHJcbiAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5fcHJldlJlbW92ZWQgPT0gbnVsbCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX2FkZGl0aW9uc0hlYWQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fYWRkaXRpb25zSGVhZCA9IHRoaXMuX2FkZGl0aW9uc1RhaWwgPSByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9hZGRpdGlvbnNUYWlsLl9uZXh0QWRkZWQgPSByZWNvcmQ7XHJcbiAgICAgICAgICAgIHRoaXMuX2FkZGl0aW9uc1RhaWwgPSByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIERlZmF1bHRLZXlWYWx1ZURpZmZlci5wcm90b3R5cGUuX2FkZFRvQ2hhbmdlcyA9IGZ1bmN0aW9uIChyZWNvcmQpIHtcclxuICAgICAgICAvLyB0b2RvKHZpY2IpIGFzc2VydFxyXG4gICAgICAgIC8vIGFzc2VydChyZWNvcmQuX25leHRBZGRlZCA9PSBudWxsKTtcclxuICAgICAgICAvLyBhc3NlcnQocmVjb3JkLl9uZXh0Q2hhbmdlZCA9PSBudWxsKTtcclxuICAgICAgICAvLyBhc3NlcnQocmVjb3JkLl9uZXh0UmVtb3ZlZCA9PSBudWxsKTtcclxuICAgICAgICAvLyBhc3NlcnQocmVjb3JkLl9wcmV2UmVtb3ZlZCA9PSBudWxsKTtcclxuICAgICAgICBpZiAodGhpcy5fY2hhbmdlc0hlYWQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2hhbmdlc0hlYWQgPSB0aGlzLl9jaGFuZ2VzVGFpbCA9IHJlY29yZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZXNUYWlsLl9uZXh0Q2hhbmdlZCA9IHJlY29yZDtcclxuICAgICAgICAgICAgdGhpcy5fY2hhbmdlc1RhaWwgPSByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIERlZmF1bHRLZXlWYWx1ZURpZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGl0ZW1zID0gW107XHJcbiAgICAgICAgdmFyIHByZXZpb3VzID0gW107XHJcbiAgICAgICAgdmFyIGNoYW5nZXMgPSBbXTtcclxuICAgICAgICB2YXIgYWRkaXRpb25zID0gW107XHJcbiAgICAgICAgdmFyIHJlbW92YWxzID0gW107XHJcbiAgICAgICAgdmFyIHJlY29yZDtcclxuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX21hcEhlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0KSB7XHJcbiAgICAgICAgICAgIGl0ZW1zLnB1c2gobGFuZ18xLnN0cmluZ2lmeShyZWNvcmQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9wcmV2aW91c01hcEhlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0UHJldmlvdXMpIHtcclxuICAgICAgICAgICAgcHJldmlvdXMucHVzaChsYW5nXzEuc3RyaW5naWZ5KHJlY29yZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX2NoYW5nZXNIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dENoYW5nZWQpIHtcclxuICAgICAgICAgICAgY2hhbmdlcy5wdXNoKGxhbmdfMS5zdHJpbmdpZnkocmVjb3JkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5fYWRkaXRpb25zSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRBZGRlZCkge1xyXG4gICAgICAgICAgICBhZGRpdGlvbnMucHVzaChsYW5nXzEuc3RyaW5naWZ5KHJlY29yZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX3JlbW92YWxzSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRSZW1vdmVkKSB7XHJcbiAgICAgICAgICAgIHJlbW92YWxzLnB1c2gobGFuZ18xLnN0cmluZ2lmeShyZWNvcmQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwibWFwOiBcIiArIGl0ZW1zLmpvaW4oJywgJykgKyBcIlxcblwiICsgXCJwcmV2aW91czogXCIgKyBwcmV2aW91cy5qb2luKCcsICcpICsgXCJcXG5cIiArXHJcbiAgICAgICAgICAgIFwiYWRkaXRpb25zOiBcIiArIGFkZGl0aW9ucy5qb2luKCcsICcpICsgXCJcXG5cIiArIFwiY2hhbmdlczogXCIgKyBjaGFuZ2VzLmpvaW4oJywgJykgKyBcIlxcblwiICtcclxuICAgICAgICAgICAgXCJyZW1vdmFsczogXCIgKyByZW1vdmFscy5qb2luKCcsICcpICsgXCJcXG5cIjtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBEZWZhdWx0S2V5VmFsdWVEaWZmZXIucHJvdG90eXBlLl9mb3JFYWNoID0gZnVuY3Rpb24gKG9iaiwgZm4pIHtcclxuICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgTWFwKSB7XHJcbiAgICAgICAgICAgIG9iai5mb3JFYWNoKGZuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLmZvckVhY2gob2JqLCBmbik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBEZWZhdWx0S2V5VmFsdWVEaWZmZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuRGVmYXVsdEtleVZhbHVlRGlmZmVyID0gRGVmYXVsdEtleVZhbHVlRGlmZmVyO1xyXG52YXIgS1ZDaGFuZ2VSZWNvcmQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gS1ZDaGFuZ2VSZWNvcmQoa2V5KSB7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy5wcmV2aW91c1ZhbHVlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IG51bGw7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX25leHRQcmV2aW91cyA9IG51bGw7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX25leHQgPSBudWxsO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9uZXh0QWRkZWQgPSBudWxsO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9uZXh0UmVtb3ZlZCA9IG51bGw7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX3ByZXZSZW1vdmVkID0gbnVsbDtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5fbmV4dENoYW5nZWQgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgS1ZDaGFuZ2VSZWNvcmQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBsYW5nXzEubG9vc2VJZGVudGljYWwodGhpcy5wcmV2aW91c1ZhbHVlLCB0aGlzLmN1cnJlbnRWYWx1ZSkgP1xyXG4gICAgICAgICAgICBsYW5nXzEuc3RyaW5naWZ5KHRoaXMua2V5KSA6XHJcbiAgICAgICAgICAgIChsYW5nXzEuc3RyaW5naWZ5KHRoaXMua2V5KSArICdbJyArIGxhbmdfMS5zdHJpbmdpZnkodGhpcy5wcmV2aW91c1ZhbHVlKSArICctPicgK1xyXG4gICAgICAgICAgICAgICAgbGFuZ18xLnN0cmluZ2lmeSh0aGlzLmN1cnJlbnRWYWx1ZSkgKyAnXScpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBLVkNoYW5nZVJlY29yZDtcclxufSkoKTtcclxuZXhwb3J0cy5LVkNoYW5nZVJlY29yZCA9IEtWQ2hhbmdlUmVjb3JkO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0X2tleXZhbHVlX2RpZmZlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG4vKipcclxuICogQSByZXBvc2l0b3J5IG9mIGRpZmZlcmVudCBpdGVyYWJsZSBkaWZmaW5nIHN0cmF0ZWdpZXMgdXNlZCBieSBOZ0ZvciwgTmdDbGFzcywgYW5kIG90aGVycy5cclxuICovXHJcbnZhciBJdGVyYWJsZURpZmZlcnMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSXRlcmFibGVEaWZmZXJzKGZhY3Rvcmllcykge1xyXG4gICAgICAgIHRoaXMuZmFjdG9yaWVzID0gZmFjdG9yaWVzO1xyXG4gICAgfVxyXG4gICAgSXRlcmFibGVEaWZmZXJzLmNyZWF0ZSA9IGZ1bmN0aW9uIChmYWN0b3JpZXMsIHBhcmVudCkge1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHBhcmVudCkpIHtcclxuICAgICAgICAgICAgdmFyIGNvcGllZCA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jbG9uZShwYXJlbnQuZmFjdG9yaWVzKTtcclxuICAgICAgICAgICAgZmFjdG9yaWVzID0gZmFjdG9yaWVzLmNvbmNhdChjb3BpZWQpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEl0ZXJhYmxlRGlmZmVycyhmYWN0b3JpZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJdGVyYWJsZURpZmZlcnMoZmFjdG9yaWVzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUYWtlcyBhbiBhcnJheSBvZiB7QGxpbmsgSXRlcmFibGVEaWZmZXJGYWN0b3J5fSBhbmQgcmV0dXJucyBhIHByb3ZpZGVyIHVzZWQgdG8gZXh0ZW5kIHRoZVxyXG4gICAgICogaW5oZXJpdGVkIHtAbGluayBJdGVyYWJsZURpZmZlcnN9IGluc3RhbmNlIHdpdGggdGhlIHByb3ZpZGVkIGZhY3RvcmllcyBhbmQgcmV0dXJuIGEgbmV3XHJcbiAgICAgKiB7QGxpbmsgSXRlcmFibGVEaWZmZXJzfSBpbnN0YW5jZS5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGV4dGVuZCBhbiBleGlzdGluZyBsaXN0IG9mIGZhY3RvcmllcyxcclxuICAgICAgICAgICAqIHdoaWNoIHdpbGwgb25seSBiZSBhcHBsaWVkIHRvIHRoZSBpbmplY3RvciBmb3IgdGhpcyBjb21wb25lbnQgYW5kIGl0cyBjaGlsZHJlbi5cclxuICAgICAgICAgICAqIFRoaXMgc3RlcCBpcyBhbGwgdGhhdCdzIHJlcXVpcmVkIHRvIG1ha2UgYSBuZXcge0BsaW5rIEl0ZXJhYmxlRGlmZmVyfSBhdmFpbGFibGUuXHJcbiAgICAgKlxyXG4gICAgICogIyBFeGFtcGxlXHJcbiAgICAgKlxyXG4gICAgICogYGBgXHJcbiAgICAgKiBAQ29tcG9uZW50KHtcclxuICAgICAqICAgdmlld1Byb3ZpZGVyczogW1xyXG4gICAgICogICAgIEl0ZXJhYmxlRGlmZmVycy5leHRlbmQoW25ldyBJbW11dGFibGVMaXN0RGlmZmVyKCldKVxyXG4gICAgICogICBdXHJcbiAgICAgKiB9KVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIEl0ZXJhYmxlRGlmZmVycy5leHRlbmQgPSBmdW5jdGlvbiAoZmFjdG9yaWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBkaV8xLlByb3ZpZGVyKEl0ZXJhYmxlRGlmZmVycywge1xyXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBmdW5jdGlvbiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsocGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFR5cGljYWxseSB3b3VsZCBvY2N1ciB3aGVuIGNhbGxpbmcgSXRlcmFibGVEaWZmZXJzLmV4dGVuZCBpbnNpZGUgb2YgZGVwZW5kZW5jaWVzIHBhc3NlZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYm9vdHN0cmFwKCksIHdoaWNoIHdvdWxkIG92ZXJyaWRlIGRlZmF1bHQgcGlwZXMgaW5zdGVhZCBvZiBleHRlbmRpbmcgdGhlbS5cclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oJ0Nhbm5vdCBleHRlbmQgSXRlcmFibGVEaWZmZXJzIHdpdGhvdXQgYSBwYXJlbnQgaW5qZWN0b3InKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBJdGVyYWJsZURpZmZlcnMuY3JlYXRlKGZhY3RvcmllcywgcGFyZW50KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gRGVwZW5kZW5jeSB0ZWNobmljYWxseSBpc24ndCBvcHRpb25hbCwgYnV0IHdlIGNhbiBwcm92aWRlIGEgYmV0dGVyIGVycm9yIG1lc3NhZ2UgdGhpcyB3YXkuXHJcbiAgICAgICAgICAgIGRlcHM6IFtbSXRlcmFibGVEaWZmZXJzLCBuZXcgZGlfMS5Ta2lwU2VsZk1ldGFkYXRhKCksIG5ldyBkaV8xLk9wdGlvbmFsTWV0YWRhdGEoKV1dXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSXRlcmFibGVEaWZmZXJzLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XHJcbiAgICAgICAgdmFyIGZhY3RvcnkgPSBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuZmluZCh0aGlzLmZhY3RvcmllcywgZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYuc3VwcG9ydHMoaXRlcmFibGUpOyB9KTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChmYWN0b3J5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFjdG9yeTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihcIkNhbm5vdCBmaW5kIGEgZGlmZmVyIHN1cHBvcnRpbmcgb2JqZWN0ICdcIiArIGl0ZXJhYmxlICsgXCInXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBJdGVyYWJsZURpZmZlcnMgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSxcclxuICAgICAgICBsYW5nXzEuQ09OU1QoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbQXJyYXldKVxyXG4gICAgXSwgSXRlcmFibGVEaWZmZXJzKTtcclxuICAgIHJldHVybiBJdGVyYWJsZURpZmZlcnM7XHJcbn0pKCk7XHJcbmV4cG9ydHMuSXRlcmFibGVEaWZmZXJzID0gSXRlcmFibGVEaWZmZXJzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYWJsZV9kaWZmZXJzLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbi8qKlxyXG4gKiBBIHJlcG9zaXRvcnkgb2YgZGlmZmVyZW50IE1hcCBkaWZmaW5nIHN0cmF0ZWdpZXMgdXNlZCBieSBOZ0NsYXNzLCBOZ1N0eWxlLCBhbmQgb3RoZXJzLlxyXG4gKi9cclxudmFyIEtleVZhbHVlRGlmZmVycyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBLZXlWYWx1ZURpZmZlcnMoZmFjdG9yaWVzKSB7XHJcbiAgICAgICAgdGhpcy5mYWN0b3JpZXMgPSBmYWN0b3JpZXM7XHJcbiAgICB9XHJcbiAgICBLZXlWYWx1ZURpZmZlcnMuY3JlYXRlID0gZnVuY3Rpb24gKGZhY3RvcmllcywgcGFyZW50KSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQocGFyZW50KSkge1xyXG4gICAgICAgICAgICB2YXIgY29waWVkID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNsb25lKHBhcmVudC5mYWN0b3JpZXMpO1xyXG4gICAgICAgICAgICBmYWN0b3JpZXMgPSBmYWN0b3JpZXMuY29uY2F0KGNvcGllZCk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgS2V5VmFsdWVEaWZmZXJzKGZhY3Rvcmllcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEtleVZhbHVlRGlmZmVycyhmYWN0b3JpZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRha2VzIGFuIGFycmF5IG9mIHtAbGluayBLZXlWYWx1ZURpZmZlckZhY3Rvcnl9IGFuZCByZXR1cm5zIGEgcHJvdmlkZXIgdXNlZCB0byBleHRlbmQgdGhlXHJcbiAgICAgKiBpbmhlcml0ZWQge0BsaW5rIEtleVZhbHVlRGlmZmVyc30gaW5zdGFuY2Ugd2l0aCB0aGUgcHJvdmlkZWQgZmFjdG9yaWVzIGFuZCByZXR1cm4gYSBuZXdcclxuICAgICAqIHtAbGluayBLZXlWYWx1ZURpZmZlcnN9IGluc3RhbmNlLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gZXh0ZW5kIGFuIGV4aXN0aW5nIGxpc3Qgb2YgZmFjdG9yaWVzLFxyXG4gICAgICAgICAgICogd2hpY2ggd2lsbCBvbmx5IGJlIGFwcGxpZWQgdG8gdGhlIGluamVjdG9yIGZvciB0aGlzIGNvbXBvbmVudCBhbmQgaXRzIGNoaWxkcmVuLlxyXG4gICAgICAgICAgICogVGhpcyBzdGVwIGlzIGFsbCB0aGF0J3MgcmVxdWlyZWQgdG8gbWFrZSBhIG5ldyB7QGxpbmsgS2V5VmFsdWVEaWZmZXJ9IGF2YWlsYWJsZS5cclxuICAgICAqXHJcbiAgICAgKiAjIEV4YW1wbGVcclxuICAgICAqXHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBDb21wb25lbnQoe1xyXG4gICAgICogICB2aWV3UHJvdmlkZXJzOiBbXHJcbiAgICAgKiAgICAgS2V5VmFsdWVEaWZmZXJzLmV4dGVuZChbbmV3IEltbXV0YWJsZU1hcERpZmZlcigpXSlcclxuICAgICAqICAgXVxyXG4gICAgICogfSlcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBLZXlWYWx1ZURpZmZlcnMuZXh0ZW5kID0gZnVuY3Rpb24gKGZhY3Rvcmllcykge1xyXG4gICAgICAgIHJldHVybiBuZXcgZGlfMS5Qcm92aWRlcihLZXlWYWx1ZURpZmZlcnMsIHtcclxuICAgICAgICAgICAgdXNlRmFjdG9yeTogZnVuY3Rpb24gKHBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHBhcmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUeXBpY2FsbHkgd291bGQgb2NjdXIgd2hlbiBjYWxsaW5nIEtleVZhbHVlRGlmZmVycy5leHRlbmQgaW5zaWRlIG9mIGRlcGVuZGVuY2llcyBwYXNzZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyB0b1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGJvb3RzdHJhcCgpLCB3aGljaCB3b3VsZCBvdmVycmlkZSBkZWZhdWx0IHBpcGVzIGluc3RlYWQgb2YgZXh0ZW5kaW5nIHRoZW0uXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKCdDYW5ub3QgZXh0ZW5kIEtleVZhbHVlRGlmZmVycyB3aXRob3V0IGEgcGFyZW50IGluamVjdG9yJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gS2V5VmFsdWVEaWZmZXJzLmNyZWF0ZShmYWN0b3JpZXMsIHBhcmVudCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIERlcGVuZGVuY3kgdGVjaG5pY2FsbHkgaXNuJ3Qgb3B0aW9uYWwsIGJ1dCB3ZSBjYW4gcHJvdmlkZSBhIGJldHRlciBlcnJvciBtZXNzYWdlIHRoaXMgd2F5LlxyXG4gICAgICAgICAgICBkZXBzOiBbW0tleVZhbHVlRGlmZmVycywgbmV3IGRpXzEuU2tpcFNlbGZNZXRhZGF0YSgpLCBuZXcgZGlfMS5PcHRpb25hbE1ldGFkYXRhKCldXVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtleVZhbHVlRGlmZmVycy5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uIChrdikge1xyXG4gICAgICAgIHZhciBmYWN0b3J5ID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmZpbmQodGhpcy5mYWN0b3JpZXMsIGZ1bmN0aW9uIChmKSB7IHJldHVybiBmLnN1cHBvcnRzKGt2KTsgfSk7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoZmFjdG9yeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oXCJDYW5ub3QgZmluZCBhIGRpZmZlciBzdXBwb3J0aW5nIG9iamVjdCAnXCIgKyBrdiArIFwiJ1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgS2V5VmFsdWVEaWZmZXJzID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgZGlfMS5JbmplY3RhYmxlKCksXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW0FycmF5XSlcclxuICAgIF0sIEtleVZhbHVlRGlmZmVycyk7XHJcbiAgICByZXR1cm4gS2V5VmFsdWVEaWZmZXJzO1xyXG59KSgpO1xyXG5leHBvcnRzLktleVZhbHVlRGlmZmVycyA9IEtleVZhbHVlRGlmZmVycztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2V5dmFsdWVfZGlmZmVycy5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XHJcbnZhciBEaXJlY3RpdmVJbmRleCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEaXJlY3RpdmVJbmRleChlbGVtZW50SW5kZXgsIGRpcmVjdGl2ZUluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50SW5kZXggPSBlbGVtZW50SW5kZXg7XHJcbiAgICAgICAgdGhpcy5kaXJlY3RpdmVJbmRleCA9IGRpcmVjdGl2ZUluZGV4O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERpcmVjdGl2ZUluZGV4LnByb3RvdHlwZSwgXCJuYW1lXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZWxlbWVudEluZGV4ICsgXCJfXCIgKyB0aGlzLmRpcmVjdGl2ZUluZGV4OyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBEaXJlY3RpdmVJbmRleDtcclxufSkoKTtcclxuZXhwb3J0cy5EaXJlY3RpdmVJbmRleCA9IERpcmVjdGl2ZUluZGV4O1xyXG52YXIgRGlyZWN0aXZlUmVjb3JkID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERpcmVjdGl2ZVJlY29yZChfYSkge1xyXG4gICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBkaXJlY3RpdmVJbmRleCA9IF9iLmRpcmVjdGl2ZUluZGV4LCBjYWxsQWZ0ZXJDb250ZW50SW5pdCA9IF9iLmNhbGxBZnRlckNvbnRlbnRJbml0LCBjYWxsQWZ0ZXJDb250ZW50Q2hlY2tlZCA9IF9iLmNhbGxBZnRlckNvbnRlbnRDaGVja2VkLCBjYWxsQWZ0ZXJWaWV3SW5pdCA9IF9iLmNhbGxBZnRlclZpZXdJbml0LCBjYWxsQWZ0ZXJWaWV3Q2hlY2tlZCA9IF9iLmNhbGxBZnRlclZpZXdDaGVja2VkLCBjYWxsT25DaGFuZ2VzID0gX2IuY2FsbE9uQ2hhbmdlcywgY2FsbERvQ2hlY2sgPSBfYi5jYWxsRG9DaGVjaywgY2FsbE9uSW5pdCA9IF9iLmNhbGxPbkluaXQsIGNoYW5nZURldGVjdGlvbiA9IF9iLmNoYW5nZURldGVjdGlvbjtcclxuICAgICAgICB0aGlzLmRpcmVjdGl2ZUluZGV4ID0gZGlyZWN0aXZlSW5kZXg7XHJcbiAgICAgICAgdGhpcy5jYWxsQWZ0ZXJDb250ZW50SW5pdCA9IGxhbmdfMS5ub3JtYWxpemVCb29sKGNhbGxBZnRlckNvbnRlbnRJbml0KTtcclxuICAgICAgICB0aGlzLmNhbGxBZnRlckNvbnRlbnRDaGVja2VkID0gbGFuZ18xLm5vcm1hbGl6ZUJvb2woY2FsbEFmdGVyQ29udGVudENoZWNrZWQpO1xyXG4gICAgICAgIHRoaXMuY2FsbE9uQ2hhbmdlcyA9IGxhbmdfMS5ub3JtYWxpemVCb29sKGNhbGxPbkNoYW5nZXMpO1xyXG4gICAgICAgIHRoaXMuY2FsbEFmdGVyVmlld0luaXQgPSBsYW5nXzEubm9ybWFsaXplQm9vbChjYWxsQWZ0ZXJWaWV3SW5pdCk7XHJcbiAgICAgICAgdGhpcy5jYWxsQWZ0ZXJWaWV3Q2hlY2tlZCA9IGxhbmdfMS5ub3JtYWxpemVCb29sKGNhbGxBZnRlclZpZXdDaGVja2VkKTtcclxuICAgICAgICB0aGlzLmNhbGxEb0NoZWNrID0gbGFuZ18xLm5vcm1hbGl6ZUJvb2woY2FsbERvQ2hlY2spO1xyXG4gICAgICAgIHRoaXMuY2FsbE9uSW5pdCA9IGxhbmdfMS5ub3JtYWxpemVCb29sKGNhbGxPbkluaXQpO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0aW9uID0gY2hhbmdlRGV0ZWN0aW9uO1xyXG4gICAgfVxyXG4gICAgRGlyZWN0aXZlUmVjb3JkLnByb3RvdHlwZS5pc0RlZmF1bHRDaGFuZ2VEZXRlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLmlzRGVmYXVsdENoYW5nZURldGVjdGlvblN0cmF0ZWd5KHRoaXMuY2hhbmdlRGV0ZWN0aW9uKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGlyZWN0aXZlUmVjb3JkO1xyXG59KSgpO1xyXG5leHBvcnRzLkRpcmVjdGl2ZVJlY29yZCA9IERpcmVjdGl2ZVJlY29yZDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlX3JlY29yZC5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIGFic3RyYWN0X2NoYW5nZV9kZXRlY3Rvcl8xID0gcmVxdWlyZSgnLi9hYnN0cmFjdF9jaGFuZ2VfZGV0ZWN0b3InKTtcclxudmFyIGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xID0gcmVxdWlyZSgnLi9jaGFuZ2VfZGV0ZWN0aW9uX3V0aWwnKTtcclxudmFyIGNvbnN0YW50c18xID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcclxudmFyIHByb3RvX3JlY29yZF8xID0gcmVxdWlyZSgnLi9wcm90b19yZWNvcmQnKTtcclxudmFyIER5bmFtaWNDaGFuZ2VEZXRlY3RvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRHluYW1pY0NoYW5nZURldGVjdG9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRHluYW1pY0NoYW5nZURldGVjdG9yKGlkLCBkaXNwYXRjaGVyLCBudW1iZXJPZlByb3BlcnR5UHJvdG9SZWNvcmRzLCBwcm9wZXJ0eUJpbmRpbmdUYXJnZXRzLCBkaXJlY3RpdmVJbmRpY2VzLCBzdHJhdGVneSwgX3JlY29yZHMsIF9ldmVudEJpbmRpbmdzLCBfZGlyZWN0aXZlUmVjb3JkcywgX2dlbkNvbmZpZykge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGlkLCBkaXNwYXRjaGVyLCBudW1iZXJPZlByb3BlcnR5UHJvdG9SZWNvcmRzLCBwcm9wZXJ0eUJpbmRpbmdUYXJnZXRzLCBkaXJlY3RpdmVJbmRpY2VzLCBzdHJhdGVneSk7XHJcbiAgICAgICAgdGhpcy5fcmVjb3JkcyA9IF9yZWNvcmRzO1xyXG4gICAgICAgIHRoaXMuX2V2ZW50QmluZGluZ3MgPSBfZXZlbnRCaW5kaW5ncztcclxuICAgICAgICB0aGlzLl9kaXJlY3RpdmVSZWNvcmRzID0gX2RpcmVjdGl2ZVJlY29yZHM7XHJcbiAgICAgICAgdGhpcy5fZ2VuQ29uZmlnID0gX2dlbkNvbmZpZztcclxuICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBudWxsO1xyXG4gICAgICAgIHZhciBsZW4gPSBfcmVjb3Jkcy5sZW5ndGggKyAxO1xyXG4gICAgICAgIHRoaXMudmFsdWVzID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNyZWF0ZUZpeGVkU2l6ZShsZW4pO1xyXG4gICAgICAgIHRoaXMubG9jYWxQaXBlcyA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jcmVhdGVGaXhlZFNpemUobGVuKTtcclxuICAgICAgICB0aGlzLnByZXZDb250ZXh0cyA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jcmVhdGVGaXhlZFNpemUobGVuKTtcclxuICAgICAgICB0aGlzLmNoYW5nZXMgPSBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuY3JlYXRlRml4ZWRTaXplKGxlbik7XHJcbiAgICAgICAgdGhpcy5kZWh5ZHJhdGVEaXJlY3RpdmVzKGZhbHNlKTtcclxuICAgIH1cclxuICAgIER5bmFtaWNDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuaGFuZGxlRXZlbnRJbnRlcm5hbCA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGVsSW5kZXgsIGxvY2Fscykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fbWF0Y2hpbmdFdmVudEJpbmRpbmdzKGV2ZW50TmFtZSwgZWxJbmRleClcclxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHJlYykge1xyXG4gICAgICAgICAgICB2YXIgcmVzID0gX3RoaXMuX3Byb2Nlc3NFdmVudEJpbmRpbmcocmVjLCBsb2NhbHMpO1xyXG4gICAgICAgICAgICBpZiAocmVzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHByZXZlbnREZWZhdWx0O1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIER5bmFtaWNDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuX3Byb2Nlc3NFdmVudEJpbmRpbmcgPSBmdW5jdGlvbiAoZWIsIGxvY2Fscykge1xyXG4gICAgICAgIHZhciB2YWx1ZXMgPSBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuY3JlYXRlRml4ZWRTaXplKGViLnJlY29yZHMubGVuZ3RoKTtcclxuICAgICAgICB2YWx1ZXNbMF0gPSB0aGlzLnZhbHVlc1swXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGViLnJlY29yZHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIHByb3RvID0gZWIucmVjb3Jkc1tpXTtcclxuICAgICAgICAgICAgdmFyIHJlcyA9IHRoaXMuX2NhbGN1bGF0ZUN1cnJWYWx1ZShwcm90bywgdmFsdWVzLCBsb2NhbHMpO1xyXG4gICAgICAgICAgICBpZiAocHJvdG8ubGFzdEluQmluZGluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFya1BhdGhBc0NoZWNrT25jZShwcm90byk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd3JpdGVTZWxmKHByb3RvLCByZXMsIHZhbHVlcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKFwiQ2Fubm90IGJlIHJlYWNoZWRcIik7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRHluYW1pY0NoYW5nZURldGVjdG9yLnByb3RvdHlwZS5fbWFya1BhdGhBc0NoZWNrT25jZSA9IGZ1bmN0aW9uIChwcm90bykge1xyXG4gICAgICAgIGlmICghcHJvdG8uYmluZGluZ1JlY29yZC5pc0RlZmF1bHRDaGFuZ2VEZXRlY3Rpb24oKSkge1xyXG4gICAgICAgICAgICB2YXIgZGlyID0gcHJvdG8uYmluZGluZ1JlY29yZC5kaXJlY3RpdmVSZWNvcmQ7XHJcbiAgICAgICAgICAgIHRoaXMuX2dldERldGVjdG9yRm9yKGRpci5kaXJlY3RpdmVJbmRleCkubWFya1BhdGhUb1Jvb3RBc0NoZWNrT25jZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBEeW5hbWljQ2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLl9tYXRjaGluZ0V2ZW50QmluZGluZ3MgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBlbEluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5maWx0ZXIodGhpcy5fZXZlbnRCaW5kaW5ncywgZnVuY3Rpb24gKGViKSB7IHJldHVybiBlYi5ldmVudE5hbWUgPT0gZXZlbnROYW1lICYmIGViLmVsSW5kZXggPT09IGVsSW5kZXg7IH0pO1xyXG4gICAgfTtcclxuICAgIER5bmFtaWNDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuaHlkcmF0ZURpcmVjdGl2ZXMgPSBmdW5jdGlvbiAoZGlyZWN0aXZlcykge1xyXG4gICAgICAgIHRoaXMudmFsdWVzWzBdID0gdGhpcy5jb250ZXh0O1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXM7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RyYXRlZ3kgPT09IGNvbnN0YW50c18xLkNoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaE9ic2VydmUpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmRpcmVjdGl2ZUluZGljZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuZGlyZWN0aXZlSW5kaWNlc1tpXTtcclxuICAgICAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUub2JzZXJ2ZURpcmVjdGl2ZS5jYWxsKHRoaXMsIGRpcmVjdGl2ZXMuZ2V0RGlyZWN0aXZlRm9yKGluZGV4KSwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRHluYW1pY0NoYW5nZURldGVjdG9yLnByb3RvdHlwZS5kZWh5ZHJhdGVEaXJlY3RpdmVzID0gZnVuY3Rpb24gKGRlc3Ryb3lQaXBlcykge1xyXG4gICAgICAgIGlmIChkZXN0cm95UGlwZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5fZGVzdHJveVBpcGVzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmFsdWVzWzBdID0gbnVsbDtcclxuICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBudWxsO1xyXG4gICAgICAgIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5maWxsKHRoaXMudmFsdWVzLCBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLnVuaW5pdGlhbGl6ZWQsIDEpO1xyXG4gICAgICAgIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5maWxsKHRoaXMuY2hhbmdlcywgZmFsc2UpO1xyXG4gICAgICAgIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5maWxsKHRoaXMubG9jYWxQaXBlcywgbnVsbCk7XHJcbiAgICAgICAgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmZpbGwodGhpcy5wcmV2Q29udGV4dHMsIGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwudW5pbml0aWFsaXplZCk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRHluYW1pY0NoYW5nZURldGVjdG9yLnByb3RvdHlwZS5fZGVzdHJveVBpcGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sb2NhbFBpcGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRoaXMubG9jYWxQaXBlc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgIGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwuY2FsbFBpcGVPbkRlc3Ryb3kodGhpcy5sb2NhbFBpcGVzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEeW5hbWljQ2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLmNoZWNrTm9DaGFuZ2VzID0gZnVuY3Rpb24gKCkgeyB0aGlzLnJ1bkRldGVjdENoYW5nZXModHJ1ZSk7IH07XHJcbiAgICBEeW5hbWljQ2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLmRldGVjdENoYW5nZXNJblJlY29yZHNJbnRlcm5hbCA9IGZ1bmN0aW9uICh0aHJvd09uQ2hhbmdlKSB7XHJcbiAgICAgICAgdmFyIHByb3RvcyA9IHRoaXMuX3JlY29yZHM7XHJcbiAgICAgICAgdmFyIGNoYW5nZXMgPSBudWxsO1xyXG4gICAgICAgIHZhciBpc0NoYW5nZWQgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3Rvcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB2YXIgcHJvdG8gPSBwcm90b3NbaV07XHJcbiAgICAgICAgICAgIHZhciBiaW5kaW5nUmVjb3JkID0gcHJvdG8uYmluZGluZ1JlY29yZDtcclxuICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZVJlY29yZCA9IGJpbmRpbmdSZWNvcmQuZGlyZWN0aXZlUmVjb3JkO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZmlyc3RJbkJpbmRpbmcocHJvdG8pKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BlcnR5QmluZGluZ0luZGV4ID0gcHJvdG8ucHJvcGVydHlCaW5kaW5nSW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHByb3RvLmlzTGlmZUN5Y2xlUmVjb3JkKCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcm90by5uYW1lID09PSBcIkRvQ2hlY2tcIiAmJiAhdGhyb3dPbkNoYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldERpcmVjdGl2ZUZvcihkaXJlY3RpdmVSZWNvcmQuZGlyZWN0aXZlSW5kZXgpLmRvQ2hlY2soKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3RvLm5hbWUgPT09IFwiT25Jbml0XCIgJiYgIXRocm93T25DaGFuZ2UgJiYgIXRoaXMuYWxyZWFkeUNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXREaXJlY3RpdmVGb3IoZGlyZWN0aXZlUmVjb3JkLmRpcmVjdGl2ZUluZGV4KS5vbkluaXQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3RvLm5hbWUgPT09IFwiT25DaGFuZ2VzXCIgJiYgbGFuZ18xLmlzUHJlc2VudChjaGFuZ2VzKSAmJiAhdGhyb3dPbkNoYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldERpcmVjdGl2ZUZvcihkaXJlY3RpdmVSZWNvcmQuZGlyZWN0aXZlSW5kZXgpLm9uQ2hhbmdlcyhjaGFuZ2VzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGFuZ2UgPSB0aGlzLl9jaGVjayhwcm90bywgdGhyb3dPbkNoYW5nZSwgdGhpcy52YWx1ZXMsIHRoaXMubG9jYWxzKTtcclxuICAgICAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGNoYW5nZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVEaXJlY3RpdmVPckVsZW1lbnQoY2hhbmdlLCBiaW5kaW5nUmVjb3JkKTtcclxuICAgICAgICAgICAgICAgICAgICBpc0NoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXMgPSB0aGlzLl9hZGRDaGFuZ2UoYmluZGluZ1JlY29yZCwgY2hhbmdlLCBjaGFuZ2VzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHJvdG8ubGFzdEluRGlyZWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VzID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChpc0NoYW5nZWQgJiYgIWJpbmRpbmdSZWNvcmQuaXNEZWZhdWx0Q2hhbmdlRGV0ZWN0aW9uKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXREZXRlY3RvckZvcihkaXJlY3RpdmVSZWNvcmQuZGlyZWN0aXZlSW5kZXgpLm1hcmtBc0NoZWNrT25jZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaXNDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRHluYW1pY0NoYW5nZURldGVjdG9yLnByb3RvdHlwZS5fZmlyc3RJbkJpbmRpbmcgPSBmdW5jdGlvbiAocikge1xyXG4gICAgICAgIHZhciBwcmV2ID0gY2hhbmdlX2RldGVjdGlvbl91dGlsXzEuQ2hhbmdlRGV0ZWN0aW9uVXRpbC5wcm90b0J5SW5kZXgodGhpcy5fcmVjb3Jkcywgci5zZWxmSW5kZXggLSAxKTtcclxuICAgICAgICByZXR1cm4gbGFuZ18xLmlzQmxhbmsocHJldikgfHwgcHJldi5iaW5kaW5nUmVjb3JkICE9PSByLmJpbmRpbmdSZWNvcmQ7XHJcbiAgICB9O1xyXG4gICAgRHluYW1pY0NoYW5nZURldGVjdG9yLnByb3RvdHlwZS5hZnRlckNvbnRlbnRMaWZlY3ljbGVDYWxsYmFja3NJbnRlcm5hbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZGlycyA9IHRoaXMuX2RpcmVjdGl2ZVJlY29yZHM7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IGRpcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICAgICAgdmFyIGRpciA9IGRpcnNbaV07XHJcbiAgICAgICAgICAgIGlmIChkaXIuY2FsbEFmdGVyQ29udGVudEluaXQgJiYgIXRoaXMuYWxyZWFkeUNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2dldERpcmVjdGl2ZUZvcihkaXIuZGlyZWN0aXZlSW5kZXgpLmFmdGVyQ29udGVudEluaXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGlyLmNhbGxBZnRlckNvbnRlbnRDaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9nZXREaXJlY3RpdmVGb3IoZGlyLmRpcmVjdGl2ZUluZGV4KS5hZnRlckNvbnRlbnRDaGVja2VkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRHluYW1pY0NoYW5nZURldGVjdG9yLnByb3RvdHlwZS5hZnRlclZpZXdMaWZlY3ljbGVDYWxsYmFja3NJbnRlcm5hbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZGlycyA9IHRoaXMuX2RpcmVjdGl2ZVJlY29yZHM7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IGRpcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICAgICAgdmFyIGRpciA9IGRpcnNbaV07XHJcbiAgICAgICAgICAgIGlmIChkaXIuY2FsbEFmdGVyVmlld0luaXQgJiYgIXRoaXMuYWxyZWFkeUNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2dldERpcmVjdGl2ZUZvcihkaXIuZGlyZWN0aXZlSW5kZXgpLmFmdGVyVmlld0luaXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGlyLmNhbGxBZnRlclZpZXdDaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9nZXREaXJlY3RpdmVGb3IoZGlyLmRpcmVjdGl2ZUluZGV4KS5hZnRlclZpZXdDaGVja2VkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRHluYW1pY0NoYW5nZURldGVjdG9yLnByb3RvdHlwZS5fdXBkYXRlRGlyZWN0aXZlT3JFbGVtZW50ID0gZnVuY3Rpb24gKGNoYW5nZSwgYmluZGluZ1JlY29yZCkge1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhiaW5kaW5nUmVjb3JkLmRpcmVjdGl2ZVJlY29yZCkpIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5ub3RpZnlEaXNwYXRjaGVyLmNhbGwodGhpcywgY2hhbmdlLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgZGlyZWN0aXZlSW5kZXggPSBiaW5kaW5nUmVjb3JkLmRpcmVjdGl2ZVJlY29yZC5kaXJlY3RpdmVJbmRleDtcclxuICAgICAgICAgICAgYmluZGluZ1JlY29yZC5zZXR0ZXIodGhpcy5fZ2V0RGlyZWN0aXZlRm9yKGRpcmVjdGl2ZUluZGV4KSwgY2hhbmdlLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9nZW5Db25maWcubG9nQmluZGluZ1VwZGF0ZSkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmxvZ0JpbmRpbmdVcGRhdGUuY2FsbCh0aGlzLCBjaGFuZ2UuY3VycmVudFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRHluYW1pY0NoYW5nZURldGVjdG9yLnByb3RvdHlwZS5fYWRkQ2hhbmdlID0gZnVuY3Rpb24gKGJpbmRpbmdSZWNvcmQsIGNoYW5nZSwgY2hhbmdlcykge1xyXG4gICAgICAgIGlmIChiaW5kaW5nUmVjb3JkLmNhbGxPbkNoYW5nZXMoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5hZGRDaGFuZ2UuY2FsbCh0aGlzLCBjaGFuZ2VzLCBjaGFuZ2UucHJldmlvdXNWYWx1ZSwgY2hhbmdlLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlcztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRHluYW1pY0NoYW5nZURldGVjdG9yLnByb3RvdHlwZS5fZ2V0RGlyZWN0aXZlRm9yID0gZnVuY3Rpb24gKGRpcmVjdGl2ZUluZGV4KSB7IHJldHVybiB0aGlzLmRpcmVjdGl2ZXMuZ2V0RGlyZWN0aXZlRm9yKGRpcmVjdGl2ZUluZGV4KTsgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIER5bmFtaWNDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuX2dldERldGVjdG9yRm9yID0gZnVuY3Rpb24gKGRpcmVjdGl2ZUluZGV4KSB7IHJldHVybiB0aGlzLmRpcmVjdGl2ZXMuZ2V0RGV0ZWN0b3JGb3IoZGlyZWN0aXZlSW5kZXgpOyB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRHluYW1pY0NoYW5nZURldGVjdG9yLnByb3RvdHlwZS5fY2hlY2sgPSBmdW5jdGlvbiAocHJvdG8sIHRocm93T25DaGFuZ2UsIHZhbHVlcywgbG9jYWxzKSB7XHJcbiAgICAgICAgaWYgKHByb3RvLmlzUGlwZVJlY29yZCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9waXBlQ2hlY2socHJvdG8sIHRocm93T25DaGFuZ2UsIHZhbHVlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVmZXJlbmNlQ2hlY2socHJvdG8sIHRocm93T25DaGFuZ2UsIHZhbHVlcywgbG9jYWxzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRHluYW1pY0NoYW5nZURldGVjdG9yLnByb3RvdHlwZS5fcmVmZXJlbmNlQ2hlY2sgPSBmdW5jdGlvbiAocHJvdG8sIHRocm93T25DaGFuZ2UsIHZhbHVlcywgbG9jYWxzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3B1cmVGdW5jQW5kQXJnc0RpZE5vdENoYW5nZShwcm90bykpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0Q2hhbmdlZChwcm90bywgZmFsc2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGN1cnJWYWx1ZSA9IHRoaXMuX2NhbGN1bGF0ZUN1cnJWYWx1ZShwcm90bywgdmFsdWVzLCBsb2NhbHMpO1xyXG4gICAgICAgIGlmICh0aGlzLnN0cmF0ZWd5ID09PSBjb25zdGFudHNfMS5DaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hPYnNlcnZlKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUub2JzZXJ2ZVZhbHVlLmNhbGwodGhpcywgY3VyclZhbHVlLCBwcm90by5zZWxmSW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHJvdG8uc2hvdWxkQmVDaGVja2VkKCkpIHtcclxuICAgICAgICAgICAgdmFyIHByZXZWYWx1ZSA9IHRoaXMuX3JlYWRTZWxmKHByb3RvLCB2YWx1ZXMpO1xyXG4gICAgICAgICAgICBpZiAoIWlzU2FtZShwcmV2VmFsdWUsIGN1cnJWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcm90by5sYXN0SW5CaW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwuc2ltcGxlQ2hhbmdlKHByZXZWYWx1ZSwgY3VyclZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhyb3dPbkNoYW5nZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd09uQ2hhbmdlRXJyb3IocHJldlZhbHVlLCBjdXJyVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3dyaXRlU2VsZihwcm90bywgY3VyclZhbHVlLCB2YWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldENoYW5nZWQocHJvdG8sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl93cml0ZVNlbGYocHJvdG8sIGN1cnJWYWx1ZSwgdmFsdWVzKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRDaGFuZ2VkKHByb3RvLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldENoYW5nZWQocHJvdG8sIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl93cml0ZVNlbGYocHJvdG8sIGN1cnJWYWx1ZSwgdmFsdWVzKTtcclxuICAgICAgICAgICAgdGhpcy5fc2V0Q2hhbmdlZChwcm90bywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBEeW5hbWljQ2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLl9jYWxjdWxhdGVDdXJyVmFsdWUgPSBmdW5jdGlvbiAocHJvdG8sIHZhbHVlcywgbG9jYWxzKSB7XHJcbiAgICAgICAgc3dpdGNoIChwcm90by5tb2RlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgcHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5TZWxmOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWRDb250ZXh0KHByb3RvLCB2YWx1ZXMpO1xyXG4gICAgICAgICAgICBjYXNlIHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuQ29uc3Q6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG8uZnVuY09yVmFsdWU7XHJcbiAgICAgICAgICAgIGNhc2UgcHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5Qcm9wZXJ0eVJlYWQ6XHJcbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuX3JlYWRDb250ZXh0KHByb3RvLCB2YWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvLmZ1bmNPclZhbHVlKGNvbnRleHQpO1xyXG4gICAgICAgICAgICBjYXNlIHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuU2FmZVByb3BlcnR5OlxyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9yZWFkQ29udGV4dChwcm90bywgdmFsdWVzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsYW5nXzEuaXNCbGFuayhjb250ZXh0KSA/IG51bGwgOiBwcm90by5mdW5jT3JWYWx1ZShjb250ZXh0KTtcclxuICAgICAgICAgICAgY2FzZSBwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLlByb3BlcnR5V3JpdGU6XHJcbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuX3JlYWRDb250ZXh0KHByb3RvLCB2YWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fcmVhZEFyZ3MocHJvdG8sIHZhbHVlcylbMF07XHJcbiAgICAgICAgICAgICAgICBwcm90by5mdW5jT3JWYWx1ZShjb250ZXh0LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIGNhc2UgcHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5LZXllZFdyaXRlOlxyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9yZWFkQ29udGV4dChwcm90bywgdmFsdWVzKTtcclxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9yZWFkQXJncyhwcm90bywgdmFsdWVzKVswXTtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX3JlYWRBcmdzKHByb3RvLCB2YWx1ZXMpWzFdO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dFtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIGNhc2UgcHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5Mb2NhbDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbHMuZ2V0KHByb3RvLm5hbWUpO1xyXG4gICAgICAgICAgICBjYXNlIHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuSW52b2tlTWV0aG9kOlxyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9yZWFkQ29udGV4dChwcm90bywgdmFsdWVzKTtcclxuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gdGhpcy5fcmVhZEFyZ3MocHJvdG8sIHZhbHVlcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG8uZnVuY09yVmFsdWUoY29udGV4dCwgYXJncyk7XHJcbiAgICAgICAgICAgIGNhc2UgcHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5TYWZlTWV0aG9kSW52b2tlOlxyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9yZWFkQ29udGV4dChwcm90bywgdmFsdWVzKTtcclxuICAgICAgICAgICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhjb250ZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSB0aGlzLl9yZWFkQXJncyhwcm90bywgdmFsdWVzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcm90by5mdW5jT3JWYWx1ZShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICAgICAgY2FzZSBwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLktleWVkUmVhZDpcclxuICAgICAgICAgICAgICAgIHZhciBhcmcgPSB0aGlzLl9yZWFkQXJncyhwcm90bywgdmFsdWVzKVswXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkQ29udGV4dChwcm90bywgdmFsdWVzKVthcmddO1xyXG4gICAgICAgICAgICBjYXNlIHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuQ2hhaW46XHJcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IHRoaXMuX3JlYWRBcmdzKHByb3RvLCB2YWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgY2FzZSBwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLkludm9rZUNsb3N1cmU6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFuZ18xLkZ1bmN0aW9uV3JhcHBlci5hcHBseSh0aGlzLl9yZWFkQ29udGV4dChwcm90bywgdmFsdWVzKSwgdGhpcy5fcmVhZEFyZ3MocHJvdG8sIHZhbHVlcykpO1xyXG4gICAgICAgICAgICBjYXNlIHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuSW50ZXJwb2xhdGU6XHJcbiAgICAgICAgICAgIGNhc2UgcHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5QcmltaXRpdmVPcDpcclxuICAgICAgICAgICAgY2FzZSBwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLkNvbGxlY3Rpb25MaXRlcmFsOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhbmdfMS5GdW5jdGlvbldyYXBwZXIuYXBwbHkocHJvdG8uZnVuY09yVmFsdWUsIHRoaXMuX3JlYWRBcmdzKHByb3RvLCB2YWx1ZXMpKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihcIlVua25vd24gb3BlcmF0aW9uIFwiICsgcHJvdG8ubW9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIER5bmFtaWNDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuX3BpcGVDaGVjayA9IGZ1bmN0aW9uIChwcm90bywgdGhyb3dPbkNoYW5nZSwgdmFsdWVzKSB7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9yZWFkQ29udGV4dChwcm90bywgdmFsdWVzKTtcclxuICAgICAgICB2YXIgc2VsZWN0ZWRQaXBlID0gdGhpcy5fcGlwZUZvcihwcm90bywgY29udGV4dCk7XHJcbiAgICAgICAgaWYgKCFzZWxlY3RlZFBpcGUucHVyZSB8fCB0aGlzLl9hcmdzT3JDb250ZXh0Q2hhbmdlZChwcm90bykpIHtcclxuICAgICAgICAgICAgdmFyIGFyZ3MgPSB0aGlzLl9yZWFkQXJncyhwcm90bywgdmFsdWVzKTtcclxuICAgICAgICAgICAgdmFyIGN1cnJWYWx1ZSA9IHNlbGVjdGVkUGlwZS5waXBlLnRyYW5zZm9ybShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICAgICAgaWYgKHByb3RvLnNob3VsZEJlQ2hlY2tlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJldlZhbHVlID0gdGhpcy5fcmVhZFNlbGYocHJvdG8sIHZhbHVlcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzU2FtZShwcmV2VmFsdWUsIGN1cnJWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyVmFsdWUgPSBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLnVud3JhcFZhbHVlKGN1cnJWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3RvLmxhc3RJbkJpbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwuc2ltcGxlQ2hhbmdlKHByZXZWYWx1ZSwgY3VyclZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRocm93T25DaGFuZ2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93T25DaGFuZ2VFcnJvcihwcmV2VmFsdWUsIGN1cnJWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3dyaXRlU2VsZihwcm90bywgY3VyclZhbHVlLCB2YWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRDaGFuZ2VkKHByb3RvLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5nZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3dyaXRlU2VsZihwcm90bywgY3VyclZhbHVlLCB2YWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRDaGFuZ2VkKHByb3RvLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0Q2hhbmdlZChwcm90bywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd3JpdGVTZWxmKHByb3RvLCBjdXJyVmFsdWUsIHZhbHVlcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRDaGFuZ2VkKHByb3RvLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIER5bmFtaWNDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuX3BpcGVGb3IgPSBmdW5jdGlvbiAocHJvdG8sIGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgc3RvcmVkUGlwZSA9IHRoaXMuX3JlYWRQaXBlKHByb3RvKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChzdG9yZWRQaXBlKSlcclxuICAgICAgICAgICAgcmV0dXJuIHN0b3JlZFBpcGU7XHJcbiAgICAgICAgdmFyIHBpcGUgPSB0aGlzLnBpcGVzLmdldChwcm90by5uYW1lKTtcclxuICAgICAgICB0aGlzLl93cml0ZVBpcGUocHJvdG8sIHBpcGUpO1xyXG4gICAgICAgIHJldHVybiBwaXBlO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIER5bmFtaWNDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuX3JlYWRDb250ZXh0ID0gZnVuY3Rpb24gKHByb3RvLCB2YWx1ZXMpIHtcclxuICAgICAgICBpZiAocHJvdG8uY29udGV4dEluZGV4ID09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXREaXJlY3RpdmVGb3IocHJvdG8uZGlyZWN0aXZlSW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlc1twcm90by5jb250ZXh0SW5kZXhdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWVzW3Byb3RvLmNvbnRleHRJbmRleF07XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRHluYW1pY0NoYW5nZURldGVjdG9yLnByb3RvdHlwZS5fcmVhZFNlbGYgPSBmdW5jdGlvbiAocHJvdG8sIHZhbHVlcykgeyByZXR1cm4gdmFsdWVzW3Byb3RvLnNlbGZJbmRleF07IH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBEeW5hbWljQ2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLl93cml0ZVNlbGYgPSBmdW5jdGlvbiAocHJvdG8sIHZhbHVlLCB2YWx1ZXMpIHsgdmFsdWVzW3Byb3RvLnNlbGZJbmRleF0gPSB2YWx1ZTsgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIER5bmFtaWNDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuX3JlYWRQaXBlID0gZnVuY3Rpb24gKHByb3RvKSB7IHJldHVybiB0aGlzLmxvY2FsUGlwZXNbcHJvdG8uc2VsZkluZGV4XTsgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIER5bmFtaWNDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuX3dyaXRlUGlwZSA9IGZ1bmN0aW9uIChwcm90bywgdmFsdWUpIHsgdGhpcy5sb2NhbFBpcGVzW3Byb3RvLnNlbGZJbmRleF0gPSB2YWx1ZTsgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIER5bmFtaWNDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuX3NldENoYW5nZWQgPSBmdW5jdGlvbiAocHJvdG8sIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHByb3RvLmFyZ3VtZW50VG9QdXJlRnVuY3Rpb24pXHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlc1twcm90by5zZWxmSW5kZXhdID0gdmFsdWU7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRHluYW1pY0NoYW5nZURldGVjdG9yLnByb3RvdHlwZS5fcHVyZUZ1bmNBbmRBcmdzRGlkTm90Q2hhbmdlID0gZnVuY3Rpb24gKHByb3RvKSB7XHJcbiAgICAgICAgcmV0dXJuIHByb3RvLmlzUHVyZUZ1bmN0aW9uKCkgJiYgIXRoaXMuX2FyZ3NDaGFuZ2VkKHByb3RvKTtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBEeW5hbWljQ2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLl9hcmdzQ2hhbmdlZCA9IGZ1bmN0aW9uIChwcm90bykge1xyXG4gICAgICAgIHZhciBhcmdzID0gcHJvdG8uYXJncztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2hhbmdlc1thcmdzW2ldXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIER5bmFtaWNDaGFuZ2VEZXRlY3Rvci5wcm90b3R5cGUuX2FyZ3NPckNvbnRleHRDaGFuZ2VkID0gZnVuY3Rpb24gKHByb3RvKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FyZ3NDaGFuZ2VkKHByb3RvKSB8fCB0aGlzLmNoYW5nZXNbcHJvdG8uY29udGV4dEluZGV4XTtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBEeW5hbWljQ2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLl9yZWFkQXJncyA9IGZ1bmN0aW9uIChwcm90bywgdmFsdWVzKSB7XHJcbiAgICAgICAgdmFyIHJlcyA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jcmVhdGVGaXhlZFNpemUocHJvdG8uYXJncy5sZW5ndGgpO1xyXG4gICAgICAgIHZhciBhcmdzID0gcHJvdG8uYXJncztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgcmVzW2ldID0gdmFsdWVzW2FyZ3NbaV1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEeW5hbWljQ2hhbmdlRGV0ZWN0b3I7XHJcbn0pKGFic3RyYWN0X2NoYW5nZV9kZXRlY3Rvcl8xLkFic3RyYWN0Q2hhbmdlRGV0ZWN0b3IpO1xyXG5leHBvcnRzLkR5bmFtaWNDaGFuZ2VEZXRlY3RvciA9IER5bmFtaWNDaGFuZ2VEZXRlY3RvcjtcclxuZnVuY3Rpb24gaXNTYW1lKGEsIGIpIHtcclxuICAgIGlmIChhID09PSBiKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgaWYgKGEgaW5zdGFuY2VvZiBTdHJpbmcgJiYgYiBpbnN0YW5jZW9mIFN0cmluZyAmJiBhID09IGIpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICBpZiAoKGEgIT09IGEpICYmIChiICE9PSBiKSlcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1keW5hbWljX2NoYW5nZV9kZXRlY3Rvci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIEV2ZW50QmluZGluZyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFdmVudEJpbmRpbmcoZXZlbnROYW1lLCBlbEluZGV4LCBkaXJJbmRleCwgcmVjb3Jkcykge1xyXG4gICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lO1xyXG4gICAgICAgIHRoaXMuZWxJbmRleCA9IGVsSW5kZXg7XHJcbiAgICAgICAgdGhpcy5kaXJJbmRleCA9IGRpckluZGV4O1xyXG4gICAgICAgIHRoaXMucmVjb3JkcyA9IHJlY29yZHM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRXZlbnRCaW5kaW5nO1xyXG59KSgpO1xyXG5leHBvcnRzLkV2ZW50QmluZGluZyA9IEV2ZW50QmluZGluZztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRfYmluZGluZy5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoXCJhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9uc1wiKTtcclxuLyoqXHJcbiAqIEFuIGVycm9yIHRocm93biBpZiBhcHBsaWNhdGlvbiBjaGFuZ2VzIG1vZGVsIGJyZWFraW5nIHRoZSB0b3AtZG93biBkYXRhIGZsb3cuXHJcbiAqXHJcbiAqIFRoaXMgZXhjZXB0aW9uIGlzIG9ubHkgdGhyb3duIGluIGRldiBtb2RlLlxyXG4gKlxyXG4gKiA8IS0tIFRPRE86IEFkZCBhIGxpbmsgb25jZSB0aGUgZGV2IG1vZGUgb3B0aW9uIGlzIGNvbmZpZ3VyYWJsZSAtLT5cclxuICpcclxuICogIyMjIEV4YW1wbGVcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ3BhcmVudCcsXHJcbiAqICAgdGVtcGxhdGU6IGBcclxuICogICAgIDxjaGlsZCBbcHJvcF09XCJwYXJlbnRQcm9wXCI+PC9jaGlsZD5cclxuICogICBgLFxyXG4gKiAgIGRpcmVjdGl2ZXM6IFtmb3J3YXJkUmVmKCgpID0+IENoaWxkKV1cclxuICogfSlcclxuICogY2xhc3MgUGFyZW50IHtcclxuICogICBwYXJlbnRQcm9wID0gXCJpbml0XCI7XHJcbiAqIH1cclxuICpcclxuICogQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdjaGlsZCcsIGlucHV0czogWydwcm9wJ119KVxyXG4gKiBjbGFzcyBDaGlsZCB7XHJcbiAqICAgY29uc3RydWN0b3IocHVibGljIHBhcmVudDogUGFyZW50KSB7fVxyXG4gKlxyXG4gKiAgIHNldCBwcm9wKHYpIHtcclxuICogICAgIC8vIHRoaXMgdXBkYXRlcyB0aGUgcGFyZW50IHByb3BlcnR5LCB3aGljaCBpcyBkaXNhbGxvd2VkIGR1cmluZyBjaGFuZ2UgZGV0ZWN0aW9uXHJcbiAqICAgICAvLyB0aGlzIHdpbGwgcmVzdWx0IGluIEV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXhjZXB0aW9uXHJcbiAqICAgICB0aGlzLnBhcmVudC5wYXJlbnRQcm9wID0gXCJ1cGRhdGVkXCI7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIEV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXhjZXB0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhFeHByZXNzaW9uQ2hhbmdlZEFmdGVySXRIYXNCZWVuQ2hlY2tlZEV4Y2VwdGlvbiwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXhjZXB0aW9uKGV4cCwgb2xkVmFsdWUsIGN1cnJWYWx1ZSwgY29udGV4dCkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIChcIkV4cHJlc3Npb24gJ1wiICsgZXhwICsgXCInIGhhcyBjaGFuZ2VkIGFmdGVyIGl0IHdhcyBjaGVja2VkLiBcIikgK1xyXG4gICAgICAgICAgICAoXCJQcmV2aW91cyB2YWx1ZTogJ1wiICsgb2xkVmFsdWUgKyBcIicuIEN1cnJlbnQgdmFsdWU6ICdcIiArIGN1cnJWYWx1ZSArIFwiJ1wiKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRXhwcmVzc2lvbkNoYW5nZWRBZnRlckl0SGFzQmVlbkNoZWNrZWRFeGNlcHRpb247XHJcbn0pKGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKTtcclxuZXhwb3J0cy5FeHByZXNzaW9uQ2hhbmdlZEFmdGVySXRIYXNCZWVuQ2hlY2tlZEV4Y2VwdGlvbiA9IEV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXhjZXB0aW9uO1xyXG4vKipcclxuICogVGhyb3duIHdoZW4gYW4gZXhwcmVzc2lvbiBldmFsdWF0aW9uIHJhaXNlcyBhbiBleGNlcHRpb24uXHJcbiAqXHJcbiAqIFRoaXMgZXJyb3Igd3JhcHMgdGhlIG9yaWdpbmFsIGV4Y2VwdGlvbiB0byBhdHRhY2ggYWRkaXRpb25hbCBjb250ZXh0dWFsIGluZm9ybWF0aW9uIHRoYXQgY2FuXHJcbiAqIGJlIHVzZWZ1bCBmb3IgZGVidWdnaW5nLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvMkt5d296P3A9cHJldmlldykpXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdjaGlsZCcsIGlucHV0czogWydwcm9wJ119KVxyXG4gKiBjbGFzcyBDaGlsZCB7XHJcbiAqICAgcHJvcDtcclxuICogfVxyXG4gKlxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ2FwcCcsXHJcbiAqICAgdGVtcGxhdGU6IGBcclxuICogICAgIDxjaGlsZCBbcHJvcF09XCJmaWVsZC5maXJzdFwiPjwvY2hpbGQ+XHJcbiAqICAgYCxcclxuICogICBkaXJlY3RpdmVzOiBbQ2hpbGRdXHJcbiAqIH0pXHJcbiAqIGNsYXNzIEFwcCB7XHJcbiAqICAgZmllbGQgPSBudWxsO1xyXG4gKiB9XHJcbiAqXHJcbiAqIGJvb3RzdHJhcChBcHApO1xyXG4gKiBgYGBcclxuICpcclxuICogWW91IGNhbiBhY2Nlc3MgdGhlIG9yaWdpbmFsIGV4Y2VwdGlvbiBhbmQgc3RhY2sgdGhyb3VnaCB0aGUgYG9yaWdpbmFsRXhjZXB0aW9uYCBhbmRcclxuICogYG9yaWdpbmFsU3RhY2tgIHByb3BlcnRpZXMuXHJcbiAqL1xyXG52YXIgQ2hhbmdlRGV0ZWN0aW9uRXJyb3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKENoYW5nZURldGVjdGlvbkVycm9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ2hhbmdlRGV0ZWN0aW9uRXJyb3IoZXhwLCBvcmlnaW5hbEV4Y2VwdGlvbiwgb3JpZ2luYWxTdGFjaywgY29udGV4dCkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIG9yaWdpbmFsRXhjZXB0aW9uICsgXCIgaW4gW1wiICsgZXhwICsgXCJdXCIsIG9yaWdpbmFsRXhjZXB0aW9uLCBvcmlnaW5hbFN0YWNrLCBjb250ZXh0KTtcclxuICAgICAgICB0aGlzLmxvY2F0aW9uID0gZXhwO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIENoYW5nZURldGVjdGlvbkVycm9yO1xyXG59KShleGNlcHRpb25zXzEuV3JhcHBlZEV4Y2VwdGlvbik7XHJcbmV4cG9ydHMuQ2hhbmdlRGV0ZWN0aW9uRXJyb3IgPSBDaGFuZ2VEZXRlY3Rpb25FcnJvcjtcclxuLyoqXHJcbiAqIFRocm93biB3aGVuIGNoYW5nZSBkZXRlY3RvciBleGVjdXRlcyBvbiBkZWh5ZHJhdGVkIHZpZXcuXHJcbiAqXHJcbiAqIFRoaXMgZXJyb3IgaW5kaWNhdGVzIGEgYnVnIGluIHRoZSBmcmFtZXdvcmsuXHJcbiAqXHJcbiAqIFRoaXMgaXMgYW4gaW50ZXJuYWwgQW5ndWxhciBlcnJvci5cclxuICovXHJcbnZhciBEZWh5ZHJhdGVkRXhjZXB0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhEZWh5ZHJhdGVkRXhjZXB0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRGVoeWRyYXRlZEV4Y2VwdGlvbigpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCAnQXR0ZW1wdCB0byBkZXRlY3QgY2hhbmdlcyBvbiBhIGRlaHlkcmF0ZWQgZGV0ZWN0b3IuJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRGVoeWRyYXRlZEV4Y2VwdGlvbjtcclxufSkoZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24pO1xyXG5leHBvcnRzLkRlaHlkcmF0ZWRFeGNlcHRpb24gPSBEZWh5ZHJhdGVkRXhjZXB0aW9uO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGNlcHRpb25zLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgRGVidWdDb250ZXh0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERlYnVnQ29udGV4dChlbGVtZW50LCBjb21wb25lbnRFbGVtZW50LCBkaXJlY3RpdmUsIGNvbnRleHQsIGxvY2FscywgaW5qZWN0b3IpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50RWxlbWVudCA9IGNvbXBvbmVudEVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5kaXJlY3RpdmUgPSBkaXJlY3RpdmU7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmxvY2FscyA9IGxvY2FscztcclxuICAgICAgICB0aGlzLmluamVjdG9yID0gaW5qZWN0b3I7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRGVidWdDb250ZXh0O1xyXG59KSgpO1xyXG5leHBvcnRzLkRlYnVnQ29udGV4dCA9IERlYnVnQ29udGV4dDtcclxudmFyIENoYW5nZURldGVjdG9yR2VuQ29uZmlnID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENoYW5nZURldGVjdG9yR2VuQ29uZmlnKGdlbkNoZWNrTm9DaGFuZ2VzLCBnZW5EZWJ1Z0luZm8sIGxvZ0JpbmRpbmdVcGRhdGUsIHVzZUppdCkge1xyXG4gICAgICAgIHRoaXMuZ2VuQ2hlY2tOb0NoYW5nZXMgPSBnZW5DaGVja05vQ2hhbmdlcztcclxuICAgICAgICB0aGlzLmdlbkRlYnVnSW5mbyA9IGdlbkRlYnVnSW5mbztcclxuICAgICAgICB0aGlzLmxvZ0JpbmRpbmdVcGRhdGUgPSBsb2dCaW5kaW5nVXBkYXRlO1xyXG4gICAgICAgIHRoaXMudXNlSml0ID0gdXNlSml0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIENoYW5nZURldGVjdG9yR2VuQ29uZmlnO1xyXG59KSgpO1xyXG5leHBvcnRzLkNoYW5nZURldGVjdG9yR2VuQ29uZmlnID0gQ2hhbmdlRGV0ZWN0b3JHZW5Db25maWc7XHJcbnZhciBDaGFuZ2VEZXRlY3RvckRlZmluaXRpb24gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ2hhbmdlRGV0ZWN0b3JEZWZpbml0aW9uKGlkLCBzdHJhdGVneSwgdmFyaWFibGVOYW1lcywgYmluZGluZ1JlY29yZHMsIGV2ZW50UmVjb3JkcywgZGlyZWN0aXZlUmVjb3JkcywgZ2VuQ29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMuc3RyYXRlZ3kgPSBzdHJhdGVneTtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlTmFtZXMgPSB2YXJpYWJsZU5hbWVzO1xyXG4gICAgICAgIHRoaXMuYmluZGluZ1JlY29yZHMgPSBiaW5kaW5nUmVjb3JkcztcclxuICAgICAgICB0aGlzLmV2ZW50UmVjb3JkcyA9IGV2ZW50UmVjb3JkcztcclxuICAgICAgICB0aGlzLmRpcmVjdGl2ZVJlY29yZHMgPSBkaXJlY3RpdmVSZWNvcmRzO1xyXG4gICAgICAgIHRoaXMuZ2VuQ29uZmlnID0gZ2VuQ29uZmlnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIENoYW5nZURldGVjdG9yRGVmaW5pdGlvbjtcclxufSkoKTtcclxuZXhwb3J0cy5DaGFuZ2VEZXRlY3RvckRlZmluaXRpb24gPSBDaGFuZ2VEZXRlY3RvckRlZmluaXRpb247XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyZmFjZXMuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBjaGFuZ2VfZGV0ZWN0aW9uX2ppdF9nZW5lcmF0b3JfMSA9IHJlcXVpcmUoJy4vY2hhbmdlX2RldGVjdGlvbl9qaXRfZ2VuZXJhdG9yJyk7XHJcbnZhciBKaXRQcm90b0NoYW5nZURldGVjdG9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEppdFByb3RvQ2hhbmdlRGV0ZWN0b3IoZGVmaW5pdGlvbikge1xyXG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbiA9IGRlZmluaXRpb247XHJcbiAgICAgICAgdGhpcy5fZmFjdG9yeSA9IHRoaXMuX2NyZWF0ZUZhY3RvcnkoZGVmaW5pdGlvbik7XHJcbiAgICB9XHJcbiAgICBKaXRQcm90b0NoYW5nZURldGVjdG9yLmlzU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcclxuICAgIEppdFByb3RvQ2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLmluc3RhbnRpYXRlID0gZnVuY3Rpb24gKGRpc3BhdGNoZXIpIHsgcmV0dXJuIHRoaXMuX2ZhY3RvcnkoZGlzcGF0Y2hlcik7IH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBKaXRQcm90b0NoYW5nZURldGVjdG9yLnByb3RvdHlwZS5fY3JlYXRlRmFjdG9yeSA9IGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBjaGFuZ2VfZGV0ZWN0aW9uX2ppdF9nZW5lcmF0b3JfMS5DaGFuZ2VEZXRlY3RvckpJVEdlbmVyYXRvcihkZWZpbml0aW9uLCAndXRpbCcsICdBYnN0cmFjdENoYW5nZURldGVjdG9yJykuZ2VuZXJhdGUoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSml0UHJvdG9DaGFuZ2VEZXRlY3RvcjtcclxufSkoKTtcclxuZXhwb3J0cy5KaXRQcm90b0NoYW5nZURldGVjdG9yID0gSml0UHJvdG9DaGFuZ2VEZXRlY3RvcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aml0X3Byb3RvX2NoYW5nZV9kZXRlY3Rvci5qcy5tYXAiLCIndXNlIHN0cmljdCc7ZnVuY3Rpb24gaXNPYnNlcnZhYmxlKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5pc09ic2VydmFibGUgPSBpc09ic2VydmFibGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGVfZmFjYWRlLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZShcImFuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nXCIpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZShcImFuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uXCIpO1xyXG52YXIgQVNUID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFTVCgpIHtcclxuICAgIH1cclxuICAgIEFTVC5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvcikgeyByZXR1cm4gbnVsbDsgfTtcclxuICAgIEFTVC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIkFTVFwiOyB9O1xyXG4gICAgcmV0dXJuIEFTVDtcclxufSkoKTtcclxuZXhwb3J0cy5BU1QgPSBBU1Q7XHJcbnZhciBFbXB0eUV4cHIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEVtcHR5RXhwciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEVtcHR5RXhwcigpIHtcclxuICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIH1cclxuICAgIEVtcHR5RXhwci5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvcikge1xyXG4gICAgICAgIC8vIGRvIG5vdGhpbmdcclxuICAgIH07XHJcbiAgICByZXR1cm4gRW1wdHlFeHByO1xyXG59KShBU1QpO1xyXG5leHBvcnRzLkVtcHR5RXhwciA9IEVtcHR5RXhwcjtcclxudmFyIEltcGxpY2l0UmVjZWl2ZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEltcGxpY2l0UmVjZWl2ZXIsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBJbXBsaWNpdFJlY2VpdmVyKCkge1xyXG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfVxyXG4gICAgSW1wbGljaXRSZWNlaXZlci5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvcikgeyByZXR1cm4gdmlzaXRvci52aXNpdEltcGxpY2l0UmVjZWl2ZXIodGhpcyk7IH07XHJcbiAgICByZXR1cm4gSW1wbGljaXRSZWNlaXZlcjtcclxufSkoQVNUKTtcclxuZXhwb3J0cy5JbXBsaWNpdFJlY2VpdmVyID0gSW1wbGljaXRSZWNlaXZlcjtcclxuLyoqXHJcbiAqIE11bHRpcGxlIGV4cHJlc3Npb25zIHNlcGFyYXRlZCBieSBhIHNlbWljb2xvbi5cclxuICovXHJcbnZhciBDaGFpbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQ2hhaW4sIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBDaGFpbihleHByZXNzaW9ucykge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZXhwcmVzc2lvbnMgPSBleHByZXNzaW9ucztcclxuICAgIH1cclxuICAgIENoYWluLnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uICh2aXNpdG9yKSB7IHJldHVybiB2aXNpdG9yLnZpc2l0Q2hhaW4odGhpcyk7IH07XHJcbiAgICByZXR1cm4gQ2hhaW47XHJcbn0pKEFTVCk7XHJcbmV4cG9ydHMuQ2hhaW4gPSBDaGFpbjtcclxudmFyIENvbmRpdGlvbmFsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhDb25kaXRpb25hbCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIENvbmRpdGlvbmFsKGNvbmRpdGlvbiwgdHJ1ZUV4cCwgZmFsc2VFeHApIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcclxuICAgICAgICB0aGlzLnRydWVFeHAgPSB0cnVlRXhwO1xyXG4gICAgICAgIHRoaXMuZmFsc2VFeHAgPSBmYWxzZUV4cDtcclxuICAgIH1cclxuICAgIENvbmRpdGlvbmFsLnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uICh2aXNpdG9yKSB7IHJldHVybiB2aXNpdG9yLnZpc2l0Q29uZGl0aW9uYWwodGhpcyk7IH07XHJcbiAgICByZXR1cm4gQ29uZGl0aW9uYWw7XHJcbn0pKEFTVCk7XHJcbmV4cG9ydHMuQ29uZGl0aW9uYWwgPSBDb25kaXRpb25hbDtcclxudmFyIElmID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhJZiwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIElmKGNvbmRpdGlvbiwgdHJ1ZUV4cCwgZmFsc2VFeHApIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcclxuICAgICAgICB0aGlzLnRydWVFeHAgPSB0cnVlRXhwO1xyXG4gICAgICAgIHRoaXMuZmFsc2VFeHAgPSBmYWxzZUV4cDtcclxuICAgIH1cclxuICAgIElmLnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uICh2aXNpdG9yKSB7IHJldHVybiB2aXNpdG9yLnZpc2l0SWYodGhpcyk7IH07XHJcbiAgICByZXR1cm4gSWY7XHJcbn0pKEFTVCk7XHJcbmV4cG9ydHMuSWYgPSBJZjtcclxudmFyIFByb3BlcnR5UmVhZCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUHJvcGVydHlSZWFkLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gUHJvcGVydHlSZWFkKHJlY2VpdmVyLCBuYW1lLCBnZXR0ZXIpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLnJlY2VpdmVyID0gcmVjZWl2ZXI7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmdldHRlciA9IGdldHRlcjtcclxuICAgIH1cclxuICAgIFByb3BlcnR5UmVhZC5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvcikgeyByZXR1cm4gdmlzaXRvci52aXNpdFByb3BlcnR5UmVhZCh0aGlzKTsgfTtcclxuICAgIHJldHVybiBQcm9wZXJ0eVJlYWQ7XHJcbn0pKEFTVCk7XHJcbmV4cG9ydHMuUHJvcGVydHlSZWFkID0gUHJvcGVydHlSZWFkO1xyXG52YXIgUHJvcGVydHlXcml0ZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUHJvcGVydHlXcml0ZSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFByb3BlcnR5V3JpdGUocmVjZWl2ZXIsIG5hbWUsIHNldHRlciwgdmFsdWUpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLnJlY2VpdmVyID0gcmVjZWl2ZXI7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLnNldHRlciA9IHNldHRlcjtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBQcm9wZXJ0eVdyaXRlLnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uICh2aXNpdG9yKSB7IHJldHVybiB2aXNpdG9yLnZpc2l0UHJvcGVydHlXcml0ZSh0aGlzKTsgfTtcclxuICAgIHJldHVybiBQcm9wZXJ0eVdyaXRlO1xyXG59KShBU1QpO1xyXG5leHBvcnRzLlByb3BlcnR5V3JpdGUgPSBQcm9wZXJ0eVdyaXRlO1xyXG52YXIgU2FmZVByb3BlcnR5UmVhZCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoU2FmZVByb3BlcnR5UmVhZCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFNhZmVQcm9wZXJ0eVJlYWQocmVjZWl2ZXIsIG5hbWUsIGdldHRlcikge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMucmVjZWl2ZXIgPSByZWNlaXZlcjtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuZ2V0dGVyID0gZ2V0dGVyO1xyXG4gICAgfVxyXG4gICAgU2FmZVByb3BlcnR5UmVhZC5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvcikgeyByZXR1cm4gdmlzaXRvci52aXNpdFNhZmVQcm9wZXJ0eVJlYWQodGhpcyk7IH07XHJcbiAgICByZXR1cm4gU2FmZVByb3BlcnR5UmVhZDtcclxufSkoQVNUKTtcclxuZXhwb3J0cy5TYWZlUHJvcGVydHlSZWFkID0gU2FmZVByb3BlcnR5UmVhZDtcclxudmFyIEtleWVkUmVhZCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoS2V5ZWRSZWFkLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gS2V5ZWRSZWFkKG9iaiwga2V5KSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5vYmogPSBvYmo7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICB9XHJcbiAgICBLZXllZFJlYWQucHJvdG90eXBlLnZpc2l0ID0gZnVuY3Rpb24gKHZpc2l0b3IpIHsgcmV0dXJuIHZpc2l0b3IudmlzaXRLZXllZFJlYWQodGhpcyk7IH07XHJcbiAgICByZXR1cm4gS2V5ZWRSZWFkO1xyXG59KShBU1QpO1xyXG5leHBvcnRzLktleWVkUmVhZCA9IEtleWVkUmVhZDtcclxudmFyIEtleWVkV3JpdGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEtleWVkV3JpdGUsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBLZXllZFdyaXRlKG9iaiwga2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMub2JqID0gb2JqO1xyXG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIEtleWVkV3JpdGUucHJvdG90eXBlLnZpc2l0ID0gZnVuY3Rpb24gKHZpc2l0b3IpIHsgcmV0dXJuIHZpc2l0b3IudmlzaXRLZXllZFdyaXRlKHRoaXMpOyB9O1xyXG4gICAgcmV0dXJuIEtleWVkV3JpdGU7XHJcbn0pKEFTVCk7XHJcbmV4cG9ydHMuS2V5ZWRXcml0ZSA9IEtleWVkV3JpdGU7XHJcbnZhciBCaW5kaW5nUGlwZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQmluZGluZ1BpcGUsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBCaW5kaW5nUGlwZShleHAsIG5hbWUsIGFyZ3MpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLmV4cCA9IGV4cDtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XHJcbiAgICB9XHJcbiAgICBCaW5kaW5nUGlwZS5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvcikgeyByZXR1cm4gdmlzaXRvci52aXNpdFBpcGUodGhpcyk7IH07XHJcbiAgICByZXR1cm4gQmluZGluZ1BpcGU7XHJcbn0pKEFTVCk7XHJcbmV4cG9ydHMuQmluZGluZ1BpcGUgPSBCaW5kaW5nUGlwZTtcclxudmFyIExpdGVyYWxQcmltaXRpdmUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKExpdGVyYWxQcmltaXRpdmUsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBMaXRlcmFsUHJpbWl0aXZlKHZhbHVlKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgTGl0ZXJhbFByaW1pdGl2ZS5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvcikgeyByZXR1cm4gdmlzaXRvci52aXNpdExpdGVyYWxQcmltaXRpdmUodGhpcyk7IH07XHJcbiAgICByZXR1cm4gTGl0ZXJhbFByaW1pdGl2ZTtcclxufSkoQVNUKTtcclxuZXhwb3J0cy5MaXRlcmFsUHJpbWl0aXZlID0gTGl0ZXJhbFByaW1pdGl2ZTtcclxudmFyIExpdGVyYWxBcnJheSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoTGl0ZXJhbEFycmF5LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTGl0ZXJhbEFycmF5KGV4cHJlc3Npb25zKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5leHByZXNzaW9ucyA9IGV4cHJlc3Npb25zO1xyXG4gICAgfVxyXG4gICAgTGl0ZXJhbEFycmF5LnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uICh2aXNpdG9yKSB7IHJldHVybiB2aXNpdG9yLnZpc2l0TGl0ZXJhbEFycmF5KHRoaXMpOyB9O1xyXG4gICAgcmV0dXJuIExpdGVyYWxBcnJheTtcclxufSkoQVNUKTtcclxuZXhwb3J0cy5MaXRlcmFsQXJyYXkgPSBMaXRlcmFsQXJyYXk7XHJcbnZhciBMaXRlcmFsTWFwID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhMaXRlcmFsTWFwLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTGl0ZXJhbE1hcChrZXlzLCB2YWx1ZXMpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLmtleXMgPSBrZXlzO1xyXG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xyXG4gICAgfVxyXG4gICAgTGl0ZXJhbE1hcC5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvcikgeyByZXR1cm4gdmlzaXRvci52aXNpdExpdGVyYWxNYXAodGhpcyk7IH07XHJcbiAgICByZXR1cm4gTGl0ZXJhbE1hcDtcclxufSkoQVNUKTtcclxuZXhwb3J0cy5MaXRlcmFsTWFwID0gTGl0ZXJhbE1hcDtcclxudmFyIEludGVycG9sYXRpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEludGVycG9sYXRpb24sIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBJbnRlcnBvbGF0aW9uKHN0cmluZ3MsIGV4cHJlc3Npb25zKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcclxuICAgICAgICB0aGlzLmV4cHJlc3Npb25zID0gZXhwcmVzc2lvbnM7XHJcbiAgICB9XHJcbiAgICBJbnRlcnBvbGF0aW9uLnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uICh2aXNpdG9yKSB7IHZpc2l0b3IudmlzaXRJbnRlcnBvbGF0aW9uKHRoaXMpOyB9O1xyXG4gICAgcmV0dXJuIEludGVycG9sYXRpb247XHJcbn0pKEFTVCk7XHJcbmV4cG9ydHMuSW50ZXJwb2xhdGlvbiA9IEludGVycG9sYXRpb247XHJcbnZhciBCaW5hcnkgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEJpbmFyeSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEJpbmFyeShvcGVyYXRpb24sIGxlZnQsIHJpZ2h0KSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5vcGVyYXRpb24gPSBvcGVyYXRpb247XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcclxuICAgICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XHJcbiAgICB9XHJcbiAgICBCaW5hcnkucHJvdG90eXBlLnZpc2l0ID0gZnVuY3Rpb24gKHZpc2l0b3IpIHsgcmV0dXJuIHZpc2l0b3IudmlzaXRCaW5hcnkodGhpcyk7IH07XHJcbiAgICByZXR1cm4gQmluYXJ5O1xyXG59KShBU1QpO1xyXG5leHBvcnRzLkJpbmFyeSA9IEJpbmFyeTtcclxudmFyIFByZWZpeE5vdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUHJlZml4Tm90LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gUHJlZml4Tm90KGV4cHJlc3Npb24pIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xyXG4gICAgfVxyXG4gICAgUHJlZml4Tm90LnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uICh2aXNpdG9yKSB7IHJldHVybiB2aXNpdG9yLnZpc2l0UHJlZml4Tm90KHRoaXMpOyB9O1xyXG4gICAgcmV0dXJuIFByZWZpeE5vdDtcclxufSkoQVNUKTtcclxuZXhwb3J0cy5QcmVmaXhOb3QgPSBQcmVmaXhOb3Q7XHJcbnZhciBNZXRob2RDYWxsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhNZXRob2RDYWxsLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTWV0aG9kQ2FsbChyZWNlaXZlciwgbmFtZSwgZm4sIGFyZ3MpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLnJlY2VpdmVyID0gcmVjZWl2ZXI7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmZuID0gZm47XHJcbiAgICAgICAgdGhpcy5hcmdzID0gYXJncztcclxuICAgIH1cclxuICAgIE1ldGhvZENhbGwucHJvdG90eXBlLnZpc2l0ID0gZnVuY3Rpb24gKHZpc2l0b3IpIHsgcmV0dXJuIHZpc2l0b3IudmlzaXRNZXRob2RDYWxsKHRoaXMpOyB9O1xyXG4gICAgcmV0dXJuIE1ldGhvZENhbGw7XHJcbn0pKEFTVCk7XHJcbmV4cG9ydHMuTWV0aG9kQ2FsbCA9IE1ldGhvZENhbGw7XHJcbnZhciBTYWZlTWV0aG9kQ2FsbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoU2FmZU1ldGhvZENhbGwsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBTYWZlTWV0aG9kQ2FsbChyZWNlaXZlciwgbmFtZSwgZm4sIGFyZ3MpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLnJlY2VpdmVyID0gcmVjZWl2ZXI7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmZuID0gZm47XHJcbiAgICAgICAgdGhpcy5hcmdzID0gYXJncztcclxuICAgIH1cclxuICAgIFNhZmVNZXRob2RDYWxsLnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uICh2aXNpdG9yKSB7IHJldHVybiB2aXNpdG9yLnZpc2l0U2FmZU1ldGhvZENhbGwodGhpcyk7IH07XHJcbiAgICByZXR1cm4gU2FmZU1ldGhvZENhbGw7XHJcbn0pKEFTVCk7XHJcbmV4cG9ydHMuU2FmZU1ldGhvZENhbGwgPSBTYWZlTWV0aG9kQ2FsbDtcclxudmFyIEZ1bmN0aW9uQ2FsbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRnVuY3Rpb25DYWxsLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRnVuY3Rpb25DYWxsKHRhcmdldCwgYXJncykge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XHJcbiAgICB9XHJcbiAgICBGdW5jdGlvbkNhbGwucHJvdG90eXBlLnZpc2l0ID0gZnVuY3Rpb24gKHZpc2l0b3IpIHsgcmV0dXJuIHZpc2l0b3IudmlzaXRGdW5jdGlvbkNhbGwodGhpcyk7IH07XHJcbiAgICByZXR1cm4gRnVuY3Rpb25DYWxsO1xyXG59KShBU1QpO1xyXG5leHBvcnRzLkZ1bmN0aW9uQ2FsbCA9IEZ1bmN0aW9uQ2FsbDtcclxudmFyIEFTVFdpdGhTb3VyY2UgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEFTVFdpdGhTb3VyY2UsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBBU1RXaXRoU291cmNlKGFzdCwgc291cmNlLCBsb2NhdGlvbikge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuYXN0ID0gYXN0O1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcclxuICAgIH1cclxuICAgIEFTVFdpdGhTb3VyY2UucHJvdG90eXBlLnZpc2l0ID0gZnVuY3Rpb24gKHZpc2l0b3IpIHsgcmV0dXJuIHRoaXMuYXN0LnZpc2l0KHZpc2l0b3IpOyB9O1xyXG4gICAgQVNUV2l0aFNvdXJjZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnNvdXJjZSArIFwiIGluIFwiICsgdGhpcy5sb2NhdGlvbjsgfTtcclxuICAgIHJldHVybiBBU1RXaXRoU291cmNlO1xyXG59KShBU1QpO1xyXG5leHBvcnRzLkFTVFdpdGhTb3VyY2UgPSBBU1RXaXRoU291cmNlO1xyXG52YXIgVGVtcGxhdGVCaW5kaW5nID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRlbXBsYXRlQmluZGluZyhrZXksIGtleUlzVmFyLCBuYW1lLCBleHByZXNzaW9uKSB7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy5rZXlJc1ZhciA9IGtleUlzVmFyO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcclxuICAgIH1cclxuICAgIHJldHVybiBUZW1wbGF0ZUJpbmRpbmc7XHJcbn0pKCk7XHJcbmV4cG9ydHMuVGVtcGxhdGVCaW5kaW5nID0gVGVtcGxhdGVCaW5kaW5nO1xyXG52YXIgUmVjdXJzaXZlQXN0VmlzaXRvciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZWN1cnNpdmVBc3RWaXNpdG9yKCkge1xyXG4gICAgfVxyXG4gICAgUmVjdXJzaXZlQXN0VmlzaXRvci5wcm90b3R5cGUudmlzaXRCaW5hcnkgPSBmdW5jdGlvbiAoYXN0KSB7XHJcbiAgICAgICAgYXN0LmxlZnQudmlzaXQodGhpcyk7XHJcbiAgICAgICAgYXN0LnJpZ2h0LnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFJlY3Vyc2l2ZUFzdFZpc2l0b3IucHJvdG90eXBlLnZpc2l0Q2hhaW4gPSBmdW5jdGlvbiAoYXN0KSB7IHJldHVybiB0aGlzLnZpc2l0QWxsKGFzdC5leHByZXNzaW9ucyk7IH07XHJcbiAgICBSZWN1cnNpdmVBc3RWaXNpdG9yLnByb3RvdHlwZS52aXNpdENvbmRpdGlvbmFsID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIGFzdC5jb25kaXRpb24udmlzaXQodGhpcyk7XHJcbiAgICAgICAgYXN0LnRydWVFeHAudmlzaXQodGhpcyk7XHJcbiAgICAgICAgYXN0LmZhbHNlRXhwLnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFJlY3Vyc2l2ZUFzdFZpc2l0b3IucHJvdG90eXBlLnZpc2l0SWYgPSBmdW5jdGlvbiAoYXN0KSB7XHJcbiAgICAgICAgYXN0LmNvbmRpdGlvbi52aXNpdCh0aGlzKTtcclxuICAgICAgICBhc3QudHJ1ZUV4cC52aXNpdCh0aGlzKTtcclxuICAgICAgICBhc3QuZmFsc2VFeHAudmlzaXQodGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgUmVjdXJzaXZlQXN0VmlzaXRvci5wcm90b3R5cGUudmlzaXRQaXBlID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIGFzdC5leHAudmlzaXQodGhpcyk7XHJcbiAgICAgICAgdGhpcy52aXNpdEFsbChhc3QuYXJncyk7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgUmVjdXJzaXZlQXN0VmlzaXRvci5wcm90b3R5cGUudmlzaXRGdW5jdGlvbkNhbGwgPSBmdW5jdGlvbiAoYXN0KSB7XHJcbiAgICAgICAgYXN0LnRhcmdldC52aXNpdCh0aGlzKTtcclxuICAgICAgICB0aGlzLnZpc2l0QWxsKGFzdC5hcmdzKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBSZWN1cnNpdmVBc3RWaXNpdG9yLnByb3RvdHlwZS52aXNpdEltcGxpY2l0UmVjZWl2ZXIgPSBmdW5jdGlvbiAoYXN0KSB7IHJldHVybiBudWxsOyB9O1xyXG4gICAgUmVjdXJzaXZlQXN0VmlzaXRvci5wcm90b3R5cGUudmlzaXRJbnRlcnBvbGF0aW9uID0gZnVuY3Rpb24gKGFzdCkgeyByZXR1cm4gdGhpcy52aXNpdEFsbChhc3QuZXhwcmVzc2lvbnMpOyB9O1xyXG4gICAgUmVjdXJzaXZlQXN0VmlzaXRvci5wcm90b3R5cGUudmlzaXRLZXllZFJlYWQgPSBmdW5jdGlvbiAoYXN0KSB7XHJcbiAgICAgICAgYXN0Lm9iai52aXNpdCh0aGlzKTtcclxuICAgICAgICBhc3Qua2V5LnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFJlY3Vyc2l2ZUFzdFZpc2l0b3IucHJvdG90eXBlLnZpc2l0S2V5ZWRXcml0ZSA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICBhc3Qub2JqLnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIGFzdC5rZXkudmlzaXQodGhpcyk7XHJcbiAgICAgICAgYXN0LnZhbHVlLnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFJlY3Vyc2l2ZUFzdFZpc2l0b3IucHJvdG90eXBlLnZpc2l0TGl0ZXJhbEFycmF5ID0gZnVuY3Rpb24gKGFzdCkgeyByZXR1cm4gdGhpcy52aXNpdEFsbChhc3QuZXhwcmVzc2lvbnMpOyB9O1xyXG4gICAgUmVjdXJzaXZlQXN0VmlzaXRvci5wcm90b3R5cGUudmlzaXRMaXRlcmFsTWFwID0gZnVuY3Rpb24gKGFzdCkgeyByZXR1cm4gdGhpcy52aXNpdEFsbChhc3QudmFsdWVzKTsgfTtcclxuICAgIFJlY3Vyc2l2ZUFzdFZpc2l0b3IucHJvdG90eXBlLnZpc2l0TGl0ZXJhbFByaW1pdGl2ZSA9IGZ1bmN0aW9uIChhc3QpIHsgcmV0dXJuIG51bGw7IH07XHJcbiAgICBSZWN1cnNpdmVBc3RWaXNpdG9yLnByb3RvdHlwZS52aXNpdE1ldGhvZENhbGwgPSBmdW5jdGlvbiAoYXN0KSB7XHJcbiAgICAgICAgYXN0LnJlY2VpdmVyLnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpc2l0QWxsKGFzdC5hcmdzKTtcclxuICAgIH07XHJcbiAgICBSZWN1cnNpdmVBc3RWaXNpdG9yLnByb3RvdHlwZS52aXNpdFByZWZpeE5vdCA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICBhc3QuZXhwcmVzc2lvbi52aXNpdCh0aGlzKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBSZWN1cnNpdmVBc3RWaXNpdG9yLnByb3RvdHlwZS52aXNpdFByb3BlcnR5UmVhZCA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICBhc3QucmVjZWl2ZXIudmlzaXQodGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgUmVjdXJzaXZlQXN0VmlzaXRvci5wcm90b3R5cGUudmlzaXRQcm9wZXJ0eVdyaXRlID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIGFzdC5yZWNlaXZlci52aXNpdCh0aGlzKTtcclxuICAgICAgICBhc3QudmFsdWUudmlzaXQodGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgUmVjdXJzaXZlQXN0VmlzaXRvci5wcm90b3R5cGUudmlzaXRTYWZlUHJvcGVydHlSZWFkID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIGFzdC5yZWNlaXZlci52aXNpdCh0aGlzKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBSZWN1cnNpdmVBc3RWaXNpdG9yLnByb3RvdHlwZS52aXNpdFNhZmVNZXRob2RDYWxsID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIGFzdC5yZWNlaXZlci52aXNpdCh0aGlzKTtcclxuICAgICAgICByZXR1cm4gdGhpcy52aXNpdEFsbChhc3QuYXJncyk7XHJcbiAgICB9O1xyXG4gICAgUmVjdXJzaXZlQXN0VmlzaXRvci5wcm90b3R5cGUudmlzaXRBbGwgPSBmdW5jdGlvbiAoYXN0cykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgYXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChhc3QpIHsgcmV0dXJuIGFzdC52aXNpdChfdGhpcyk7IH0pO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBSZWN1cnNpdmVBc3RWaXNpdG9yO1xyXG59KSgpO1xyXG5leHBvcnRzLlJlY3Vyc2l2ZUFzdFZpc2l0b3IgPSBSZWN1cnNpdmVBc3RWaXNpdG9yO1xyXG52YXIgQXN0VHJhbnNmb3JtZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXN0VHJhbnNmb3JtZXIoKSB7XHJcbiAgICB9XHJcbiAgICBBc3RUcmFuc2Zvcm1lci5wcm90b3R5cGUudmlzaXRJbXBsaWNpdFJlY2VpdmVyID0gZnVuY3Rpb24gKGFzdCkgeyByZXR1cm4gYXN0OyB9O1xyXG4gICAgQXN0VHJhbnNmb3JtZXIucHJvdG90eXBlLnZpc2l0SW50ZXJwb2xhdGlvbiA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEludGVycG9sYXRpb24oYXN0LnN0cmluZ3MsIHRoaXMudmlzaXRBbGwoYXN0LmV4cHJlc3Npb25zKSk7XHJcbiAgICB9O1xyXG4gICAgQXN0VHJhbnNmb3JtZXIucHJvdG90eXBlLnZpc2l0TGl0ZXJhbFByaW1pdGl2ZSA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICByZXR1cm4gbmV3IExpdGVyYWxQcmltaXRpdmUoYXN0LnZhbHVlKTtcclxuICAgIH07XHJcbiAgICBBc3RUcmFuc2Zvcm1lci5wcm90b3R5cGUudmlzaXRQcm9wZXJ0eVJlYWQgPSBmdW5jdGlvbiAoYXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wZXJ0eVJlYWQoYXN0LnJlY2VpdmVyLnZpc2l0KHRoaXMpLCBhc3QubmFtZSwgYXN0LmdldHRlcik7XHJcbiAgICB9O1xyXG4gICAgQXN0VHJhbnNmb3JtZXIucHJvdG90eXBlLnZpc2l0UHJvcGVydHlXcml0ZSA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb3BlcnR5V3JpdGUoYXN0LnJlY2VpdmVyLnZpc2l0KHRoaXMpLCBhc3QubmFtZSwgYXN0LnNldHRlciwgYXN0LnZhbHVlKTtcclxuICAgIH07XHJcbiAgICBBc3RUcmFuc2Zvcm1lci5wcm90b3R5cGUudmlzaXRTYWZlUHJvcGVydHlSZWFkID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgU2FmZVByb3BlcnR5UmVhZChhc3QucmVjZWl2ZXIudmlzaXQodGhpcyksIGFzdC5uYW1lLCBhc3QuZ2V0dGVyKTtcclxuICAgIH07XHJcbiAgICBBc3RUcmFuc2Zvcm1lci5wcm90b3R5cGUudmlzaXRNZXRob2RDYWxsID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTWV0aG9kQ2FsbChhc3QucmVjZWl2ZXIudmlzaXQodGhpcyksIGFzdC5uYW1lLCBhc3QuZm4sIHRoaXMudmlzaXRBbGwoYXN0LmFyZ3MpKTtcclxuICAgIH07XHJcbiAgICBBc3RUcmFuc2Zvcm1lci5wcm90b3R5cGUudmlzaXRTYWZlTWV0aG9kQ2FsbCA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNhZmVNZXRob2RDYWxsKGFzdC5yZWNlaXZlci52aXNpdCh0aGlzKSwgYXN0Lm5hbWUsIGFzdC5mbiwgdGhpcy52aXNpdEFsbChhc3QuYXJncykpO1xyXG4gICAgfTtcclxuICAgIEFzdFRyYW5zZm9ybWVyLnByb3RvdHlwZS52aXNpdEZ1bmN0aW9uQ2FsbCA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uQ2FsbChhc3QudGFyZ2V0LnZpc2l0KHRoaXMpLCB0aGlzLnZpc2l0QWxsKGFzdC5hcmdzKSk7XHJcbiAgICB9O1xyXG4gICAgQXN0VHJhbnNmb3JtZXIucHJvdG90eXBlLnZpc2l0TGl0ZXJhbEFycmF5ID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTGl0ZXJhbEFycmF5KHRoaXMudmlzaXRBbGwoYXN0LmV4cHJlc3Npb25zKSk7XHJcbiAgICB9O1xyXG4gICAgQXN0VHJhbnNmb3JtZXIucHJvdG90eXBlLnZpc2l0TGl0ZXJhbE1hcCA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICByZXR1cm4gbmV3IExpdGVyYWxNYXAoYXN0LmtleXMsIHRoaXMudmlzaXRBbGwoYXN0LnZhbHVlcykpO1xyXG4gICAgfTtcclxuICAgIEFzdFRyYW5zZm9ybWVyLnByb3RvdHlwZS52aXNpdEJpbmFyeSA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJpbmFyeShhc3Qub3BlcmF0aW9uLCBhc3QubGVmdC52aXNpdCh0aGlzKSwgYXN0LnJpZ2h0LnZpc2l0KHRoaXMpKTtcclxuICAgIH07XHJcbiAgICBBc3RUcmFuc2Zvcm1lci5wcm90b3R5cGUudmlzaXRQcmVmaXhOb3QgPSBmdW5jdGlvbiAoYXN0KSB7IHJldHVybiBuZXcgUHJlZml4Tm90KGFzdC5leHByZXNzaW9uLnZpc2l0KHRoaXMpKTsgfTtcclxuICAgIEFzdFRyYW5zZm9ybWVyLnByb3RvdHlwZS52aXNpdENvbmRpdGlvbmFsID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29uZGl0aW9uYWwoYXN0LmNvbmRpdGlvbi52aXNpdCh0aGlzKSwgYXN0LnRydWVFeHAudmlzaXQodGhpcyksIGFzdC5mYWxzZUV4cC52aXNpdCh0aGlzKSk7XHJcbiAgICB9O1xyXG4gICAgQXN0VHJhbnNmb3JtZXIucHJvdG90eXBlLnZpc2l0UGlwZSA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdQaXBlKGFzdC5leHAudmlzaXQodGhpcyksIGFzdC5uYW1lLCB0aGlzLnZpc2l0QWxsKGFzdC5hcmdzKSk7XHJcbiAgICB9O1xyXG4gICAgQXN0VHJhbnNmb3JtZXIucHJvdG90eXBlLnZpc2l0S2V5ZWRSZWFkID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgS2V5ZWRSZWFkKGFzdC5vYmoudmlzaXQodGhpcyksIGFzdC5rZXkudmlzaXQodGhpcykpO1xyXG4gICAgfTtcclxuICAgIEFzdFRyYW5zZm9ybWVyLnByb3RvdHlwZS52aXNpdEtleWVkV3JpdGUgPSBmdW5jdGlvbiAoYXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBLZXllZFdyaXRlKGFzdC5vYmoudmlzaXQodGhpcyksIGFzdC5rZXkudmlzaXQodGhpcyksIGFzdC52YWx1ZS52aXNpdCh0aGlzKSk7XHJcbiAgICB9O1xyXG4gICAgQXN0VHJhbnNmb3JtZXIucHJvdG90eXBlLnZpc2l0QWxsID0gZnVuY3Rpb24gKGFzdHMpIHtcclxuICAgICAgICB2YXIgcmVzID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNyZWF0ZUZpeGVkU2l6ZShhc3RzLmxlbmd0aCk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhc3RzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHJlc1tpXSA9IGFzdHNbaV0udmlzaXQodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG4gICAgQXN0VHJhbnNmb3JtZXIucHJvdG90eXBlLnZpc2l0Q2hhaW4gPSBmdW5jdGlvbiAoYXN0KSB7IHJldHVybiBuZXcgQ2hhaW4odGhpcy52aXNpdEFsbChhc3QuZXhwcmVzc2lvbnMpKTsgfTtcclxuICAgIEFzdFRyYW5zZm9ybWVyLnByb3RvdHlwZS52aXNpdElmID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHZhciBmYWxzZUV4cCA9IGxhbmdfMS5pc1ByZXNlbnQoYXN0LmZhbHNlRXhwKSA/IGFzdC5mYWxzZUV4cC52aXNpdCh0aGlzKSA6IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBJZihhc3QuY29uZGl0aW9uLnZpc2l0KHRoaXMpLCBhc3QudHJ1ZUV4cC52aXNpdCh0aGlzKSwgZmFsc2VFeHApO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBBc3RUcmFuc2Zvcm1lcjtcclxufSkoKTtcclxuZXhwb3J0cy5Bc3RUcmFuc2Zvcm1lciA9IEFzdFRyYW5zZm9ybWVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3QuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBkZWNvcmF0b3JzXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaS9kZWNvcmF0b3JzJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKFwiYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb25cIik7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKFwiYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmdcIik7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG4oZnVuY3Rpb24gKFRva2VuVHlwZSkge1xyXG4gICAgVG9rZW5UeXBlW1Rva2VuVHlwZVtcIkNoYXJhY3RlclwiXSA9IDBdID0gXCJDaGFyYWN0ZXJcIjtcclxuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJJZGVudGlmaWVyXCJdID0gMV0gPSBcIklkZW50aWZpZXJcIjtcclxuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJLZXl3b3JkXCJdID0gMl0gPSBcIktleXdvcmRcIjtcclxuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJTdHJpbmdcIl0gPSAzXSA9IFwiU3RyaW5nXCI7XHJcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiT3BlcmF0b3JcIl0gPSA0XSA9IFwiT3BlcmF0b3JcIjtcclxuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJOdW1iZXJcIl0gPSA1XSA9IFwiTnVtYmVyXCI7XHJcbn0pKGV4cG9ydHMuVG9rZW5UeXBlIHx8IChleHBvcnRzLlRva2VuVHlwZSA9IHt9KSk7XHJcbnZhciBUb2tlblR5cGUgPSBleHBvcnRzLlRva2VuVHlwZTtcclxudmFyIExleGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIExleGVyKCkge1xyXG4gICAgfVxyXG4gICAgTGV4ZXIucHJvdG90eXBlLnRva2VuaXplID0gZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICB2YXIgc2Nhbm5lciA9IG5ldyBfU2Nhbm5lcih0ZXh0KTtcclxuICAgICAgICB2YXIgdG9rZW5zID0gW107XHJcbiAgICAgICAgdmFyIHRva2VuID0gc2Nhbm5lci5zY2FuVG9rZW4oKTtcclxuICAgICAgICB3aGlsZSAodG9rZW4gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XHJcbiAgICAgICAgICAgIHRva2VuID0gc2Nhbm5lci5zY2FuVG9rZW4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRva2VucztcclxuICAgIH07XHJcbiAgICBMZXhlciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRlY29yYXRvcnNfMS5JbmplY3RhYmxlKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXHJcbiAgICBdLCBMZXhlcik7XHJcbiAgICByZXR1cm4gTGV4ZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuTGV4ZXIgPSBMZXhlcjtcclxudmFyIFRva2VuID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRva2VuKGluZGV4LCB0eXBlLCBudW1WYWx1ZSwgc3RyVmFsdWUpIHtcclxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLm51bVZhbHVlID0gbnVtVmFsdWU7XHJcbiAgICAgICAgdGhpcy5zdHJWYWx1ZSA9IHN0clZhbHVlO1xyXG4gICAgfVxyXG4gICAgVG9rZW4ucHJvdG90eXBlLmlzQ2hhcmFjdGVyID0gZnVuY3Rpb24gKGNvZGUpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMudHlwZSA9PSBUb2tlblR5cGUuQ2hhcmFjdGVyICYmIHRoaXMubnVtVmFsdWUgPT0gY29kZSk7XHJcbiAgICB9O1xyXG4gICAgVG9rZW4ucHJvdG90eXBlLmlzTnVtYmVyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMudHlwZSA9PSBUb2tlblR5cGUuTnVtYmVyKTsgfTtcclxuICAgIFRva2VuLnByb3RvdHlwZS5pc1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLnR5cGUgPT0gVG9rZW5UeXBlLlN0cmluZyk7IH07XHJcbiAgICBUb2tlbi5wcm90b3R5cGUuaXNPcGVyYXRvciA9IGZ1bmN0aW9uIChvcGVyYXRlcikge1xyXG4gICAgICAgIHJldHVybiAodGhpcy50eXBlID09IFRva2VuVHlwZS5PcGVyYXRvciAmJiB0aGlzLnN0clZhbHVlID09IG9wZXJhdGVyKTtcclxuICAgIH07XHJcbiAgICBUb2tlbi5wcm90b3R5cGUuaXNJZGVudGlmaWVyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMudHlwZSA9PSBUb2tlblR5cGUuSWRlbnRpZmllcik7IH07XHJcbiAgICBUb2tlbi5wcm90b3R5cGUuaXNLZXl3b3JkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMudHlwZSA9PSBUb2tlblR5cGUuS2V5d29yZCk7IH07XHJcbiAgICBUb2tlbi5wcm90b3R5cGUuaXNLZXl3b3JkVmFyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMudHlwZSA9PSBUb2tlblR5cGUuS2V5d29yZCAmJiB0aGlzLnN0clZhbHVlID09IFwidmFyXCIpOyB9O1xyXG4gICAgVG9rZW4ucHJvdG90eXBlLmlzS2V5d29yZE51bGwgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy50eXBlID09IFRva2VuVHlwZS5LZXl3b3JkICYmIHRoaXMuc3RyVmFsdWUgPT0gXCJudWxsXCIpOyB9O1xyXG4gICAgVG9rZW4ucHJvdG90eXBlLmlzS2V5d29yZFVuZGVmaW5lZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMudHlwZSA9PSBUb2tlblR5cGUuS2V5d29yZCAmJiB0aGlzLnN0clZhbHVlID09IFwidW5kZWZpbmVkXCIpO1xyXG4gICAgfTtcclxuICAgIFRva2VuLnByb3RvdHlwZS5pc0tleXdvcmRUcnVlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMudHlwZSA9PSBUb2tlblR5cGUuS2V5d29yZCAmJiB0aGlzLnN0clZhbHVlID09IFwidHJ1ZVwiKTsgfTtcclxuICAgIFRva2VuLnByb3RvdHlwZS5pc0tleXdvcmRJZiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLnR5cGUgPT0gVG9rZW5UeXBlLktleXdvcmQgJiYgdGhpcy5zdHJWYWx1ZSA9PSBcImlmXCIpOyB9O1xyXG4gICAgVG9rZW4ucHJvdG90eXBlLmlzS2V5d29yZEVsc2UgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy50eXBlID09IFRva2VuVHlwZS5LZXl3b3JkICYmIHRoaXMuc3RyVmFsdWUgPT0gXCJlbHNlXCIpOyB9O1xyXG4gICAgVG9rZW4ucHJvdG90eXBlLmlzS2V5d29yZEZhbHNlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMudHlwZSA9PSBUb2tlblR5cGUuS2V5d29yZCAmJiB0aGlzLnN0clZhbHVlID09IFwiZmFsc2VcIik7IH07XHJcbiAgICBUb2tlbi5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gLTEgaW5zdGVhZCBvZiBOVUxMIG9rP1xyXG4gICAgICAgIHJldHVybiAodGhpcy50eXBlID09IFRva2VuVHlwZS5OdW1iZXIpID8gdGhpcy5udW1WYWx1ZSA6IC0xO1xyXG4gICAgfTtcclxuICAgIFRva2VuLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFRva2VuVHlwZS5DaGFyYWN0ZXI6XHJcbiAgICAgICAgICAgIGNhc2UgVG9rZW5UeXBlLklkZW50aWZpZXI6XHJcbiAgICAgICAgICAgIGNhc2UgVG9rZW5UeXBlLktleXdvcmQ6XHJcbiAgICAgICAgICAgIGNhc2UgVG9rZW5UeXBlLk9wZXJhdG9yOlxyXG4gICAgICAgICAgICBjYXNlIFRva2VuVHlwZS5TdHJpbmc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJWYWx1ZTtcclxuICAgICAgICAgICAgY2FzZSBUb2tlblR5cGUuTnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtVmFsdWUudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gVG9rZW47XHJcbn0pKCk7XHJcbmV4cG9ydHMuVG9rZW4gPSBUb2tlbjtcclxuZnVuY3Rpb24gbmV3Q2hhcmFjdGVyVG9rZW4oaW5kZXgsIGNvZGUpIHtcclxuICAgIHJldHVybiBuZXcgVG9rZW4oaW5kZXgsIFRva2VuVHlwZS5DaGFyYWN0ZXIsIGNvZGUsIGxhbmdfMS5TdHJpbmdXcmFwcGVyLmZyb21DaGFyQ29kZShjb2RlKSk7XHJcbn1cclxuZnVuY3Rpb24gbmV3SWRlbnRpZmllclRva2VuKGluZGV4LCB0ZXh0KSB7XHJcbiAgICByZXR1cm4gbmV3IFRva2VuKGluZGV4LCBUb2tlblR5cGUuSWRlbnRpZmllciwgMCwgdGV4dCk7XHJcbn1cclxuZnVuY3Rpb24gbmV3S2V5d29yZFRva2VuKGluZGV4LCB0ZXh0KSB7XHJcbiAgICByZXR1cm4gbmV3IFRva2VuKGluZGV4LCBUb2tlblR5cGUuS2V5d29yZCwgMCwgdGV4dCk7XHJcbn1cclxuZnVuY3Rpb24gbmV3T3BlcmF0b3JUb2tlbihpbmRleCwgdGV4dCkge1xyXG4gICAgcmV0dXJuIG5ldyBUb2tlbihpbmRleCwgVG9rZW5UeXBlLk9wZXJhdG9yLCAwLCB0ZXh0KTtcclxufVxyXG5mdW5jdGlvbiBuZXdTdHJpbmdUb2tlbihpbmRleCwgdGV4dCkge1xyXG4gICAgcmV0dXJuIG5ldyBUb2tlbihpbmRleCwgVG9rZW5UeXBlLlN0cmluZywgMCwgdGV4dCk7XHJcbn1cclxuZnVuY3Rpb24gbmV3TnVtYmVyVG9rZW4oaW5kZXgsIG4pIHtcclxuICAgIHJldHVybiBuZXcgVG9rZW4oaW5kZXgsIFRva2VuVHlwZS5OdW1iZXIsIG4sIFwiXCIpO1xyXG59XHJcbmV4cG9ydHMuRU9GID0gbmV3IFRva2VuKC0xLCBUb2tlblR5cGUuQ2hhcmFjdGVyLCAwLCBcIlwiKTtcclxuZXhwb3J0cy4kRU9GID0gMDtcclxuZXhwb3J0cy4kVEFCID0gOTtcclxuZXhwb3J0cy4kTEYgPSAxMDtcclxuZXhwb3J0cy4kVlRBQiA9IDExO1xyXG5leHBvcnRzLiRGRiA9IDEyO1xyXG5leHBvcnRzLiRDUiA9IDEzO1xyXG5leHBvcnRzLiRTUEFDRSA9IDMyO1xyXG5leHBvcnRzLiRCQU5HID0gMzM7XHJcbmV4cG9ydHMuJERRID0gMzQ7XHJcbmV4cG9ydHMuJEhBU0ggPSAzNTtcclxuZXhwb3J0cy4kJCA9IDM2O1xyXG5leHBvcnRzLiRQRVJDRU5UID0gMzc7XHJcbmV4cG9ydHMuJEFNUEVSU0FORCA9IDM4O1xyXG5leHBvcnRzLiRTUSA9IDM5O1xyXG5leHBvcnRzLiRMUEFSRU4gPSA0MDtcclxuZXhwb3J0cy4kUlBBUkVOID0gNDE7XHJcbmV4cG9ydHMuJFNUQVIgPSA0MjtcclxuZXhwb3J0cy4kUExVUyA9IDQzO1xyXG5leHBvcnRzLiRDT01NQSA9IDQ0O1xyXG5leHBvcnRzLiRNSU5VUyA9IDQ1O1xyXG5leHBvcnRzLiRQRVJJT0QgPSA0NjtcclxuZXhwb3J0cy4kU0xBU0ggPSA0NztcclxuZXhwb3J0cy4kQ09MT04gPSA1ODtcclxuZXhwb3J0cy4kU0VNSUNPTE9OID0gNTk7XHJcbmV4cG9ydHMuJExUID0gNjA7XHJcbmV4cG9ydHMuJEVRID0gNjE7XHJcbmV4cG9ydHMuJEdUID0gNjI7XHJcbmV4cG9ydHMuJFFVRVNUSU9OID0gNjM7XHJcbnZhciAkMCA9IDQ4O1xyXG52YXIgJDkgPSA1NztcclxudmFyICRBID0gNjUsICRFID0gNjksICRaID0gOTA7XHJcbmV4cG9ydHMuJExCUkFDS0VUID0gOTE7XHJcbmV4cG9ydHMuJEJBQ0tTTEFTSCA9IDkyO1xyXG5leHBvcnRzLiRSQlJBQ0tFVCA9IDkzO1xyXG52YXIgJENBUkVUID0gOTQ7XHJcbnZhciAkXyA9IDk1O1xyXG52YXIgJGEgPSA5NywgJGUgPSAxMDEsICRmID0gMTAyLCAkbiA9IDExMCwgJHIgPSAxMTQsICR0ID0gMTE2LCAkdSA9IDExNywgJHYgPSAxMTgsICR6ID0gMTIyO1xyXG5leHBvcnRzLiRMQlJBQ0UgPSAxMjM7XHJcbmV4cG9ydHMuJEJBUiA9IDEyNDtcclxuZXhwb3J0cy4kUkJSQUNFID0gMTI1O1xyXG52YXIgJE5CU1AgPSAxNjA7XHJcbnZhciBTY2FubmVyRXJyb3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFNjYW5uZXJFcnJvciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFNjYW5uZXJFcnJvcihtZXNzYWdlKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxuICAgIH1cclxuICAgIFNjYW5uZXJFcnJvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm1lc3NhZ2U7IH07XHJcbiAgICByZXR1cm4gU2Nhbm5lckVycm9yO1xyXG59KShleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbik7XHJcbmV4cG9ydHMuU2Nhbm5lckVycm9yID0gU2Nhbm5lckVycm9yO1xyXG52YXIgX1NjYW5uZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gX1NjYW5uZXIoaW5wdXQpIHtcclxuICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XHJcbiAgICAgICAgdGhpcy5wZWVrID0gMDtcclxuICAgICAgICB0aGlzLmluZGV4ID0gLTE7XHJcbiAgICAgICAgdGhpcy5sZW5ndGggPSBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5hZHZhbmNlKCk7XHJcbiAgICB9XHJcbiAgICBfU2Nhbm5lci5wcm90b3R5cGUuYWR2YW5jZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnBlZWsgPVxyXG4gICAgICAgICAgICArK3RoaXMuaW5kZXggPj0gdGhpcy5sZW5ndGggPyBleHBvcnRzLiRFT0YgOiBsYW5nXzEuU3RyaW5nV3JhcHBlci5jaGFyQ29kZUF0KHRoaXMuaW5wdXQsIHRoaXMuaW5kZXgpO1xyXG4gICAgfTtcclxuICAgIF9TY2FubmVyLnByb3RvdHlwZS5zY2FuVG9rZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGlucHV0ID0gdGhpcy5pbnB1dCwgbGVuZ3RoID0gdGhpcy5sZW5ndGgsIHBlZWsgPSB0aGlzLnBlZWssIGluZGV4ID0gdGhpcy5pbmRleDtcclxuICAgICAgICAvLyBTa2lwIHdoaXRlc3BhY2UuXHJcbiAgICAgICAgd2hpbGUgKHBlZWsgPD0gZXhwb3J0cy4kU1BBQ0UpIHtcclxuICAgICAgICAgICAgaWYgKCsraW5kZXggPj0gbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBwZWVrID0gZXhwb3J0cy4kRU9GO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwZWVrID0gbGFuZ18xLlN0cmluZ1dyYXBwZXIuY2hhckNvZGVBdChpbnB1dCwgaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGVlayA9IHBlZWs7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xyXG4gICAgICAgIGlmIChpbmRleCA+PSBsZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEhhbmRsZSBpZGVudGlmaWVycyBhbmQgbnVtYmVycy5cclxuICAgICAgICBpZiAoaXNJZGVudGlmaWVyU3RhcnQocGVlaykpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5JZGVudGlmaWVyKCk7XHJcbiAgICAgICAgaWYgKGlzRGlnaXQocGVlaykpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5OdW1iZXIoaW5kZXgpO1xyXG4gICAgICAgIHZhciBzdGFydCA9IGluZGV4O1xyXG4gICAgICAgIHN3aXRjaCAocGVlaykge1xyXG4gICAgICAgICAgICBjYXNlIGV4cG9ydHMuJFBFUklPRDpcclxuICAgICAgICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRGlnaXQodGhpcy5wZWVrKSA/IHRoaXMuc2Nhbk51bWJlcihzdGFydCkgOiBuZXdDaGFyYWN0ZXJUb2tlbihzdGFydCwgZXhwb3J0cy4kUEVSSU9EKTtcclxuICAgICAgICAgICAgY2FzZSBleHBvcnRzLiRMUEFSRU46XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kUlBBUkVOOlxyXG4gICAgICAgICAgICBjYXNlIGV4cG9ydHMuJExCUkFDRTpcclxuICAgICAgICAgICAgY2FzZSBleHBvcnRzLiRSQlJBQ0U6XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kTEJSQUNLRVQ6XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kUkJSQUNLRVQ6XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kQ09NTUE6XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kQ09MT046XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kU0VNSUNPTE9OOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhbkNoYXJhY3RlcihzdGFydCwgcGVlayk7XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kU1E6XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kRFE6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kSEFTSDpcclxuICAgICAgICAgICAgY2FzZSBleHBvcnRzLiRQTFVTOlxyXG4gICAgICAgICAgICBjYXNlIGV4cG9ydHMuJE1JTlVTOlxyXG4gICAgICAgICAgICBjYXNlIGV4cG9ydHMuJFNUQVI6XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kU0xBU0g6XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kUEVSQ0VOVDpcclxuICAgICAgICAgICAgY2FzZSAkQ0FSRVQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuT3BlcmF0b3Ioc3RhcnQsIGxhbmdfMS5TdHJpbmdXcmFwcGVyLmZyb21DaGFyQ29kZShwZWVrKSk7XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kUVVFU1RJT046XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuQ29tcGxleE9wZXJhdG9yKHN0YXJ0LCAnPycsIGV4cG9ydHMuJFBFUklPRCwgJy4nKTtcclxuICAgICAgICAgICAgY2FzZSBleHBvcnRzLiRMVDpcclxuICAgICAgICAgICAgY2FzZSBleHBvcnRzLiRHVDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5Db21wbGV4T3BlcmF0b3Ioc3RhcnQsIGxhbmdfMS5TdHJpbmdXcmFwcGVyLmZyb21DaGFyQ29kZShwZWVrKSwgZXhwb3J0cy4kRVEsICc9Jyk7XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kQkFORzpcclxuICAgICAgICAgICAgY2FzZSBleHBvcnRzLiRFUTpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5Db21wbGV4T3BlcmF0b3Ioc3RhcnQsIGxhbmdfMS5TdHJpbmdXcmFwcGVyLmZyb21DaGFyQ29kZShwZWVrKSwgZXhwb3J0cy4kRVEsICc9JywgZXhwb3J0cy4kRVEsICc9Jyk7XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kQU1QRVJTQU5EOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhbkNvbXBsZXhPcGVyYXRvcihzdGFydCwgJyYnLCBleHBvcnRzLiRBTVBFUlNBTkQsICcmJyk7XHJcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy4kQkFSOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhbkNvbXBsZXhPcGVyYXRvcihzdGFydCwgJ3wnLCBleHBvcnRzLiRCQVIsICd8Jyk7XHJcbiAgICAgICAgICAgIGNhc2UgJE5CU1A6XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaXNXaGl0ZXNwYWNlKHRoaXMucGVlaykpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZHZhbmNlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2FuVG9rZW4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lcnJvcihcIlVuZXhwZWN0ZWQgY2hhcmFjdGVyIFtcIiArIGxhbmdfMS5TdHJpbmdXcmFwcGVyLmZyb21DaGFyQ29kZShwZWVrKSArIFwiXVwiLCAwKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBfU2Nhbm5lci5wcm90b3R5cGUuc2NhbkNoYXJhY3RlciA9IGZ1bmN0aW9uIChzdGFydCwgY29kZSkge1xyXG4gICAgICAgIGFzc2VydCh0aGlzLnBlZWsgPT0gY29kZSk7XHJcbiAgICAgICAgdGhpcy5hZHZhbmNlKCk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0NoYXJhY3RlclRva2VuKHN0YXJ0LCBjb2RlKTtcclxuICAgIH07XHJcbiAgICBfU2Nhbm5lci5wcm90b3R5cGUuc2Nhbk9wZXJhdG9yID0gZnVuY3Rpb24gKHN0YXJ0LCBzdHIpIHtcclxuICAgICAgICBhc3NlcnQodGhpcy5wZWVrID09IGxhbmdfMS5TdHJpbmdXcmFwcGVyLmNoYXJDb2RlQXQoc3RyLCAwKSk7XHJcbiAgICAgICAgYXNzZXJ0KGNvbGxlY3Rpb25fMS5TZXRXcmFwcGVyLmhhcyhPUEVSQVRPUlMsIHN0cikpO1xyXG4gICAgICAgIHRoaXMuYWR2YW5jZSgpO1xyXG4gICAgICAgIHJldHVybiBuZXdPcGVyYXRvclRva2VuKHN0YXJ0LCBzdHIpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVG9rZW5pemUgYSAyLzMgY2hhciBsb25nIG9wZXJhdG9yXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHN0YXJ0IHN0YXJ0IGluZGV4IGluIHRoZSBleHByZXNzaW9uXHJcbiAgICAgKiBAcGFyYW0gb25lIGZpcnN0IHN5bWJvbCAoYWx3YXlzIHBhcnQgb2YgdGhlIG9wZXJhdG9yKVxyXG4gICAgICogQHBhcmFtIHR3b0NvZGUgY29kZSBwb2ludCBmb3IgdGhlIHNlY29uZCBzeW1ib2xcclxuICAgICAqIEBwYXJhbSB0d28gc2Vjb25kIHN5bWJvbCAocGFydCBvZiB0aGUgb3BlcmF0b3Igd2hlbiB0aGUgc2Vjb25kIGNvZGUgcG9pbnQgbWF0Y2hlcylcclxuICAgICAqIEBwYXJhbSB0aHJlZUNvZGUgY29kZSBwb2ludCBmb3IgdGhlIHRoaXJkIHN5bWJvbFxyXG4gICAgICogQHBhcmFtIHRocmVlIHRoaXJkIHN5bWJvbCAocGFydCBvZiB0aGUgb3BlcmF0b3Igd2hlbiBwcm92aWRlZCBhbmQgbWF0Y2hlcyBzb3VyY2UgZXhwcmVzc2lvbilcclxuICAgICAqIEByZXR1cm5zIHtUb2tlbn1cclxuICAgICAqL1xyXG4gICAgX1NjYW5uZXIucHJvdG90eXBlLnNjYW5Db21wbGV4T3BlcmF0b3IgPSBmdW5jdGlvbiAoc3RhcnQsIG9uZSwgdHdvQ29kZSwgdHdvLCB0aHJlZUNvZGUsIHRocmVlKSB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMucGVlayA9PSBsYW5nXzEuU3RyaW5nV3JhcHBlci5jaGFyQ29kZUF0KG9uZSwgMCkpO1xyXG4gICAgICAgIHRoaXMuYWR2YW5jZSgpO1xyXG4gICAgICAgIHZhciBzdHIgPSBvbmU7XHJcbiAgICAgICAgaWYgKHRoaXMucGVlayA9PSB0d29Db2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xyXG4gICAgICAgICAgICBzdHIgKz0gdHdvO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aHJlZUNvZGUpICYmIHRoaXMucGVlayA9PSB0aHJlZUNvZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5hZHZhbmNlKCk7XHJcbiAgICAgICAgICAgIHN0ciArPSB0aHJlZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXNzZXJ0KGNvbGxlY3Rpb25fMS5TZXRXcmFwcGVyLmhhcyhPUEVSQVRPUlMsIHN0cikpO1xyXG4gICAgICAgIHJldHVybiBuZXdPcGVyYXRvclRva2VuKHN0YXJ0LCBzdHIpO1xyXG4gICAgfTtcclxuICAgIF9TY2FubmVyLnByb3RvdHlwZS5zY2FuSWRlbnRpZmllciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBhc3NlcnQoaXNJZGVudGlmaWVyU3RhcnQodGhpcy5wZWVrKSk7XHJcbiAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDtcclxuICAgICAgICB0aGlzLmFkdmFuY2UoKTtcclxuICAgICAgICB3aGlsZSAoaXNJZGVudGlmaWVyUGFydCh0aGlzLnBlZWspKVxyXG4gICAgICAgICAgICB0aGlzLmFkdmFuY2UoKTtcclxuICAgICAgICB2YXIgc3RyID0gdGhpcy5pbnB1dC5zdWJzdHJpbmcoc3RhcnQsIHRoaXMuaW5kZXgpO1xyXG4gICAgICAgIGlmIChjb2xsZWN0aW9uXzEuU2V0V3JhcHBlci5oYXMoS0VZV09SRFMsIHN0cikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ld0tleXdvcmRUb2tlbihzdGFydCwgc3RyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXdJZGVudGlmaWVyVG9rZW4oc3RhcnQsIHN0cik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIF9TY2FubmVyLnByb3RvdHlwZS5zY2FuTnVtYmVyID0gZnVuY3Rpb24gKHN0YXJ0KSB7XHJcbiAgICAgICAgYXNzZXJ0KGlzRGlnaXQodGhpcy5wZWVrKSk7XHJcbiAgICAgICAgdmFyIHNpbXBsZSA9ICh0aGlzLmluZGV4ID09PSBzdGFydCk7XHJcbiAgICAgICAgdGhpcy5hZHZhbmNlKCk7IC8vIFNraXAgaW5pdGlhbCBkaWdpdC5cclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAoaXNEaWdpdCh0aGlzLnBlZWspKSB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5wZWVrID09IGV4cG9ydHMuJFBFUklPRCkge1xyXG4gICAgICAgICAgICAgICAgc2ltcGxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNFeHBvbmVudFN0YXJ0KHRoaXMucGVlaykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzRXhwb25lbnRTaWduKHRoaXMucGVlaykpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZHZhbmNlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzRGlnaXQodGhpcy5wZWVrKSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKCdJbnZhbGlkIGV4cG9uZW50JywgLTEpO1xyXG4gICAgICAgICAgICAgICAgc2ltcGxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmFkdmFuY2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN0ciA9IHRoaXMuaW5wdXQuc3Vic3RyaW5nKHN0YXJ0LCB0aGlzLmluZGV4KTtcclxuICAgICAgICAvLyBUT0RPXHJcbiAgICAgICAgdmFyIHZhbHVlID0gc2ltcGxlID8gbGFuZ18xLk51bWJlcldyYXBwZXIucGFyc2VJbnRBdXRvUmFkaXgoc3RyKSA6IGxhbmdfMS5OdW1iZXJXcmFwcGVyLnBhcnNlRmxvYXQoc3RyKTtcclxuICAgICAgICByZXR1cm4gbmV3TnVtYmVyVG9rZW4oc3RhcnQsIHZhbHVlKTtcclxuICAgIH07XHJcbiAgICBfU2Nhbm5lci5wcm90b3R5cGUuc2NhblN0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBhc3NlcnQodGhpcy5wZWVrID09IGV4cG9ydHMuJFNRIHx8IHRoaXMucGVlayA9PSBleHBvcnRzLiREUSk7XHJcbiAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDtcclxuICAgICAgICB2YXIgcXVvdGUgPSB0aGlzLnBlZWs7XHJcbiAgICAgICAgdGhpcy5hZHZhbmNlKCk7IC8vIFNraXAgaW5pdGlhbCBxdW90ZS5cclxuICAgICAgICB2YXIgYnVmZmVyO1xyXG4gICAgICAgIHZhciBtYXJrZXIgPSB0aGlzLmluZGV4O1xyXG4gICAgICAgIHZhciBpbnB1dCA9IHRoaXMuaW5wdXQ7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMucGVlayAhPSBxdW90ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wZWVrID09IGV4cG9ydHMuJEJBQ0tTTEFTSCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ1ZmZlciA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IG5ldyBsYW5nXzEuU3RyaW5nSm9pbmVyKCk7XHJcbiAgICAgICAgICAgICAgICBidWZmZXIuYWRkKGlucHV0LnN1YnN0cmluZyhtYXJrZXIsIHRoaXMuaW5kZXgpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHVuZXNjYXBlZENvZGU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wZWVrID09ICR1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gNCBjaGFyYWN0ZXIgaGV4IGNvZGUgZm9yIHVuaWNvZGUgY2hhcmFjdGVyLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoZXggPSBpbnB1dC5zdWJzdHJpbmcodGhpcy5pbmRleCArIDEsIHRoaXMuaW5kZXggKyA1KTtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmVzY2FwZWRDb2RlID0gbGFuZ18xLk51bWJlcldyYXBwZXIucGFyc2VJbnQoaGV4LCAxNik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoXCJJbnZhbGlkIHVuaWNvZGUgZXNjYXBlIFtcXFxcdVwiICsgaGV4ICsgXCJdXCIsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkdmFuY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB1bmVzY2FwZWRDb2RlID0gdW5lc2NhcGUodGhpcy5wZWVrKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkdmFuY2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJ1ZmZlci5hZGQobGFuZ18xLlN0cmluZ1dyYXBwZXIuZnJvbUNoYXJDb2RlKHVuZXNjYXBlZENvZGUpKTtcclxuICAgICAgICAgICAgICAgIG1hcmtlciA9IHRoaXMuaW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5wZWVrID09IGV4cG9ydHMuJEVPRikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcignVW50ZXJtaW5hdGVkIHF1b3RlJywgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkdmFuY2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbGFzdCA9IGlucHV0LnN1YnN0cmluZyhtYXJrZXIsIHRoaXMuaW5kZXgpO1xyXG4gICAgICAgIHRoaXMuYWR2YW5jZSgpOyAvLyBTa2lwIHRlcm1pbmF0aW5nIHF1b3RlLlxyXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHVuZXNjYXBlZCBzdHJpbmcgdmFsdWUuXHJcbiAgICAgICAgdmFyIHVuZXNjYXBlZCA9IGxhc3Q7XHJcbiAgICAgICAgaWYgKGJ1ZmZlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGJ1ZmZlci5hZGQobGFzdCk7XHJcbiAgICAgICAgICAgIHVuZXNjYXBlZCA9IGJ1ZmZlci50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3U3RyaW5nVG9rZW4oc3RhcnQsIHVuZXNjYXBlZCk7XHJcbiAgICB9O1xyXG4gICAgX1NjYW5uZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG9mZnNldCkge1xyXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuaW5kZXggKyBvZmZzZXQ7XHJcbiAgICAgICAgdGhyb3cgbmV3IFNjYW5uZXJFcnJvcihcIkxleGVyIEVycm9yOiBcIiArIG1lc3NhZ2UgKyBcIiBhdCBjb2x1bW4gXCIgKyBwb3NpdGlvbiArIFwiIGluIGV4cHJlc3Npb24gW1wiICsgdGhpcy5pbnB1dCArIFwiXVwiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX1NjYW5uZXI7XHJcbn0pKCk7XHJcbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZShjb2RlKSB7XHJcbiAgICByZXR1cm4gKGNvZGUgPj0gZXhwb3J0cy4kVEFCICYmIGNvZGUgPD0gZXhwb3J0cy4kU1BBQ0UpIHx8IChjb2RlID09ICROQlNQKTtcclxufVxyXG5mdW5jdGlvbiBpc0lkZW50aWZpZXJTdGFydChjb2RlKSB7XHJcbiAgICByZXR1cm4gKCRhIDw9IGNvZGUgJiYgY29kZSA8PSAkeikgfHwgKCRBIDw9IGNvZGUgJiYgY29kZSA8PSAkWikgfHwgKGNvZGUgPT0gJF8pIHx8IChjb2RlID09IGV4cG9ydHMuJCQpO1xyXG59XHJcbmZ1bmN0aW9uIGlzSWRlbnRpZmllclBhcnQoY29kZSkge1xyXG4gICAgcmV0dXJuICgkYSA8PSBjb2RlICYmIGNvZGUgPD0gJHopIHx8ICgkQSA8PSBjb2RlICYmIGNvZGUgPD0gJFopIHx8ICgkMCA8PSBjb2RlICYmIGNvZGUgPD0gJDkpIHx8XHJcbiAgICAgICAgKGNvZGUgPT0gJF8pIHx8IChjb2RlID09IGV4cG9ydHMuJCQpO1xyXG59XHJcbmZ1bmN0aW9uIGlzRGlnaXQoY29kZSkge1xyXG4gICAgcmV0dXJuICQwIDw9IGNvZGUgJiYgY29kZSA8PSAkOTtcclxufVxyXG5mdW5jdGlvbiBpc0V4cG9uZW50U3RhcnQoY29kZSkge1xyXG4gICAgcmV0dXJuIGNvZGUgPT0gJGUgfHwgY29kZSA9PSAkRTtcclxufVxyXG5mdW5jdGlvbiBpc0V4cG9uZW50U2lnbihjb2RlKSB7XHJcbiAgICByZXR1cm4gY29kZSA9PSBleHBvcnRzLiRNSU5VUyB8fCBjb2RlID09IGV4cG9ydHMuJFBMVVM7XHJcbn1cclxuZnVuY3Rpb24gdW5lc2NhcGUoY29kZSkge1xyXG4gICAgc3dpdGNoIChjb2RlKSB7XHJcbiAgICAgICAgY2FzZSAkbjpcclxuICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMuJExGO1xyXG4gICAgICAgIGNhc2UgJGY6XHJcbiAgICAgICAgICAgIHJldHVybiBleHBvcnRzLiRGRjtcclxuICAgICAgICBjYXNlICRyOlxyXG4gICAgICAgICAgICByZXR1cm4gZXhwb3J0cy4kQ1I7XHJcbiAgICAgICAgY2FzZSAkdDpcclxuICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMuJFRBQjtcclxuICAgICAgICBjYXNlICR2OlxyXG4gICAgICAgICAgICByZXR1cm4gZXhwb3J0cy4kVlRBQjtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gY29kZTtcclxuICAgIH1cclxufVxyXG52YXIgT1BFUkFUT1JTID0gY29sbGVjdGlvbl8xLlNldFdyYXBwZXIuY3JlYXRlRnJvbUxpc3QoW1xyXG4gICAgJysnLFxyXG4gICAgJy0nLFxyXG4gICAgJyonLFxyXG4gICAgJy8nLFxyXG4gICAgJyUnLFxyXG4gICAgJ14nLFxyXG4gICAgJz0nLFxyXG4gICAgJz09JyxcclxuICAgICchPScsXHJcbiAgICAnPT09JyxcclxuICAgICchPT0nLFxyXG4gICAgJzwnLFxyXG4gICAgJz4nLFxyXG4gICAgJzw9JyxcclxuICAgICc+PScsXHJcbiAgICAnJiYnLFxyXG4gICAgJ3x8JyxcclxuICAgICcmJyxcclxuICAgICd8JyxcclxuICAgICchJyxcclxuICAgICc/JyxcclxuICAgICcjJyxcclxuICAgICc/LidcclxuXSk7XHJcbnZhciBLRVlXT1JEUyA9IGNvbGxlY3Rpb25fMS5TZXRXcmFwcGVyLmNyZWF0ZUZyb21MaXN0KFsndmFyJywgJ251bGwnLCAndW5kZWZpbmVkJywgJ3RydWUnLCAnZmFsc2UnLCAnaWYnLCAnZWxzZSddKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGV4ZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgZXhjZXB0aW9uc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2V4Y2VwdGlvbnMnKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBMb2NhbHMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTG9jYWxzKHBhcmVudCwgY3VycmVudCkge1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgIHRoaXMuY3VycmVudCA9IGN1cnJlbnQ7XHJcbiAgICB9XHJcbiAgICBMb2NhbHMucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50LmhhcyhuYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5wYXJlbnQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5jb250YWlucyhuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIExvY2Fscy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50LmhhcyhuYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50LmdldChuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5wYXJlbnQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5nZXQobmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihcIkNhbm5vdCBmaW5kICdcIiArIG5hbWUgKyBcIidcIik7XHJcbiAgICB9O1xyXG4gICAgTG9jYWxzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAvLyBUT0RPKHJhZG8pOiBjb25zaWRlciByZW1vdmluZyB0aGlzIGNoZWNrIGlmIHdlIGNhbiBndWFyYW50ZWUgdGhpcyBpcyBub3RcclxuICAgICAgICAvLyBleHBvc2VkIHRvIHRoZSBwdWJsaWMgQVBJLlxyXG4gICAgICAgIC8vIFRPRE86IHZzYXZraW4gbWF5YmUgaXQgc2hvdWxkIGNoZWNrIG9ubHkgdGhlIGxvY2FsIG1hcFxyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnQuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudC5zZXQobmFtZSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKFwiU2V0dGluZyBvZiBuZXcga2V5cyBwb3N0LWNvbnN0cnVjdGlvbiBpcyBub3Qgc3VwcG9ydGVkLiBLZXk6IFwiICsgbmFtZSArIFwiLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTG9jYWxzLnByb3RvdHlwZS5jbGVhclZhbHVlcyA9IGZ1bmN0aW9uICgpIHsgY29sbGVjdGlvbl8xLk1hcFdyYXBwZXIuY2xlYXJWYWx1ZXModGhpcy5jdXJyZW50KTsgfTtcclxuICAgIHJldHVybiBMb2NhbHM7XHJcbn0pKCk7XHJcbmV4cG9ydHMuTG9jYWxzID0gTG9jYWxzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2NhbHMuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBkZWNvcmF0b3JzXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaS9kZWNvcmF0b3JzJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgZXhjZXB0aW9uc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2V4Y2VwdGlvbnMnKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBsZXhlcl8xID0gcmVxdWlyZSgnLi9sZXhlcicpO1xyXG52YXIgcmVmbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvcmVmbGVjdGlvbi9yZWZsZWN0aW9uJyk7XHJcbnZhciBhc3RfMSA9IHJlcXVpcmUoJy4vYXN0Jyk7XHJcbnZhciBfaW1wbGljaXRSZWNlaXZlciA9IG5ldyBhc3RfMS5JbXBsaWNpdFJlY2VpdmVyKCk7XHJcbi8vIFRPRE8odGJvc2NoKTogQ2Fubm90IG1ha2UgdGhpcyBjb25zdC9maW5hbCByaWdodCBub3cgYmVjYXVzZSBvZiB0aGUgdHJhbnNwaWxlci4uLlxyXG52YXIgSU5URVJQT0xBVElPTl9SRUdFWFAgPSAvXFx7XFx7KC4qPylcXH1cXH0vZztcclxudmFyIFBhcnNlRXhjZXB0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhQYXJzZUV4Y2VwdGlvbiwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFBhcnNlRXhjZXB0aW9uKG1lc3NhZ2UsIGlucHV0LCBlcnJMb2NhdGlvbiwgY3R4TG9jYXRpb24pIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBcIlBhcnNlciBFcnJvcjogXCIgKyBtZXNzYWdlICsgXCIgXCIgKyBlcnJMb2NhdGlvbiArIFwiIFtcIiArIGlucHV0ICsgXCJdIGluIFwiICsgY3R4TG9jYXRpb24pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFBhcnNlRXhjZXB0aW9uO1xyXG59KShleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbik7XHJcbnZhciBQYXJzZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGFyc2VyKC8qKiBAaW50ZXJuYWwgKi8gX2xleGVyLCBwcm92aWRlZFJlZmxlY3Rvcikge1xyXG4gICAgICAgIGlmIChwcm92aWRlZFJlZmxlY3RvciA9PT0gdm9pZCAwKSB7IHByb3ZpZGVkUmVmbGVjdG9yID0gbnVsbDsgfVxyXG4gICAgICAgIHRoaXMuX2xleGVyID0gX2xleGVyO1xyXG4gICAgICAgIHRoaXMuX3JlZmxlY3RvciA9IGxhbmdfMS5pc1ByZXNlbnQocHJvdmlkZWRSZWZsZWN0b3IpID8gcHJvdmlkZWRSZWZsZWN0b3IgOiByZWZsZWN0aW9uXzEucmVmbGVjdG9yO1xyXG4gICAgfVxyXG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUFjdGlvbiA9IGZ1bmN0aW9uIChpbnB1dCwgbG9jYXRpb24pIHtcclxuICAgICAgICB0aGlzLl9jaGVja05vSW50ZXJwb2xhdGlvbihpbnB1dCwgbG9jYXRpb24pO1xyXG4gICAgICAgIHZhciB0b2tlbnMgPSB0aGlzLl9sZXhlci50b2tlbml6ZShpbnB1dCk7XHJcbiAgICAgICAgdmFyIGFzdCA9IG5ldyBfUGFyc2VBU1QoaW5wdXQsIGxvY2F0aW9uLCB0b2tlbnMsIHRoaXMuX3JlZmxlY3RvciwgdHJ1ZSkucGFyc2VDaGFpbigpO1xyXG4gICAgICAgIHJldHVybiBuZXcgYXN0XzEuQVNUV2l0aFNvdXJjZShhc3QsIGlucHV0LCBsb2NhdGlvbik7XHJcbiAgICB9O1xyXG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUJpbmRpbmcgPSBmdW5jdGlvbiAoaW5wdXQsIGxvY2F0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fY2hlY2tOb0ludGVycG9sYXRpb24oaW5wdXQsIGxvY2F0aW9uKTtcclxuICAgICAgICB2YXIgdG9rZW5zID0gdGhpcy5fbGV4ZXIudG9rZW5pemUoaW5wdXQpO1xyXG4gICAgICAgIHZhciBhc3QgPSBuZXcgX1BhcnNlQVNUKGlucHV0LCBsb2NhdGlvbiwgdG9rZW5zLCB0aGlzLl9yZWZsZWN0b3IsIGZhbHNlKS5wYXJzZUNoYWluKCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBhc3RfMS5BU1RXaXRoU291cmNlKGFzdCwgaW5wdXQsIGxvY2F0aW9uKTtcclxuICAgIH07XHJcbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlU2ltcGxlQmluZGluZyA9IGZ1bmN0aW9uIChpbnB1dCwgbG9jYXRpb24pIHtcclxuICAgICAgICB0aGlzLl9jaGVja05vSW50ZXJwb2xhdGlvbihpbnB1dCwgbG9jYXRpb24pO1xyXG4gICAgICAgIHZhciB0b2tlbnMgPSB0aGlzLl9sZXhlci50b2tlbml6ZShpbnB1dCk7XHJcbiAgICAgICAgdmFyIGFzdCA9IG5ldyBfUGFyc2VBU1QoaW5wdXQsIGxvY2F0aW9uLCB0b2tlbnMsIHRoaXMuX3JlZmxlY3RvciwgZmFsc2UpLnBhcnNlU2ltcGxlQmluZGluZygpO1xyXG4gICAgICAgIHJldHVybiBuZXcgYXN0XzEuQVNUV2l0aFNvdXJjZShhc3QsIGlucHV0LCBsb2NhdGlvbik7XHJcbiAgICB9O1xyXG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVRlbXBsYXRlQmluZGluZ3MgPSBmdW5jdGlvbiAoaW5wdXQsIGxvY2F0aW9uKSB7XHJcbiAgICAgICAgdmFyIHRva2VucyA9IHRoaXMuX2xleGVyLnRva2VuaXplKGlucHV0KTtcclxuICAgICAgICByZXR1cm4gbmV3IF9QYXJzZUFTVChpbnB1dCwgbG9jYXRpb24sIHRva2VucywgdGhpcy5fcmVmbGVjdG9yLCBmYWxzZSkucGFyc2VUZW1wbGF0ZUJpbmRpbmdzKCk7XHJcbiAgICB9O1xyXG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUludGVycG9sYXRpb24gPSBmdW5jdGlvbiAoaW5wdXQsIGxvY2F0aW9uKSB7XHJcbiAgICAgICAgdmFyIHBhcnRzID0gbGFuZ18xLlN0cmluZ1dyYXBwZXIuc3BsaXQoaW5wdXQsIElOVEVSUE9MQVRJT05fUkVHRVhQKTtcclxuICAgICAgICBpZiAocGFydHMubGVuZ3RoIDw9IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzdHJpbmdzID0gW107XHJcbiAgICAgICAgdmFyIGV4cHJlc3Npb25zID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xyXG4gICAgICAgICAgICBpZiAoaSAlIDIgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIGZpeGVkIHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgc3RyaW5ncy5wdXNoKHBhcnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcnQudHJpbSgpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciB0b2tlbnMgPSB0aGlzLl9sZXhlci50b2tlbml6ZShwYXJ0KTtcclxuICAgICAgICAgICAgICAgIHZhciBhc3QgPSBuZXcgX1BhcnNlQVNUKGlucHV0LCBsb2NhdGlvbiwgdG9rZW5zLCB0aGlzLl9yZWZsZWN0b3IsIGZhbHNlKS5wYXJzZUNoYWluKCk7XHJcbiAgICAgICAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKGFzdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFeGNlcHRpb24oJ0JsYW5rIGV4cHJlc3Npb25zIGFyZSBub3QgYWxsb3dlZCBpbiBpbnRlcnBvbGF0ZWQgc3RyaW5ncycsIGlucHV0LCBcImF0IGNvbHVtbiBcIiArIHRoaXMuX2ZpbmRJbnRlcnBvbGF0aW9uRXJyb3JDb2x1bW4ocGFydHMsIGkpICsgXCIgaW5cIiwgbG9jYXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgYXN0XzEuQVNUV2l0aFNvdXJjZShuZXcgYXN0XzEuSW50ZXJwb2xhdGlvbihzdHJpbmdzLCBleHByZXNzaW9ucyksIGlucHV0LCBsb2NhdGlvbik7XHJcbiAgICB9O1xyXG4gICAgUGFyc2VyLnByb3RvdHlwZS53cmFwTGl0ZXJhbFByaW1pdGl2ZSA9IGZ1bmN0aW9uIChpbnB1dCwgbG9jYXRpb24pIHtcclxuICAgICAgICByZXR1cm4gbmV3IGFzdF8xLkFTVFdpdGhTb3VyY2UobmV3IGFzdF8xLkxpdGVyYWxQcmltaXRpdmUoaW5wdXQpLCBpbnB1dCwgbG9jYXRpb24pO1xyXG4gICAgfTtcclxuICAgIFBhcnNlci5wcm90b3R5cGUuX2NoZWNrTm9JbnRlcnBvbGF0aW9uID0gZnVuY3Rpb24gKGlucHV0LCBsb2NhdGlvbikge1xyXG4gICAgICAgIHZhciBwYXJ0cyA9IGxhbmdfMS5TdHJpbmdXcmFwcGVyLnNwbGl0KGlucHV0LCBJTlRFUlBPTEFUSU9OX1JFR0VYUCk7XHJcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKCdHb3QgaW50ZXJwb2xhdGlvbiAoe3t9fSkgd2hlcmUgZXhwcmVzc2lvbiB3YXMgZXhwZWN0ZWQnLCBpbnB1dCwgXCJhdCBjb2x1bW4gXCIgKyB0aGlzLl9maW5kSW50ZXJwb2xhdGlvbkVycm9yQ29sdW1uKHBhcnRzLCAxKSArIFwiIGluXCIsIGxvY2F0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUGFyc2VyLnByb3RvdHlwZS5fZmluZEludGVycG9sYXRpb25FcnJvckNvbHVtbiA9IGZ1bmN0aW9uIChwYXJ0cywgcGFydEluRXJySWR4KSB7XHJcbiAgICAgICAgdmFyIGVyckxvY2F0aW9uID0gJyc7XHJcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXJ0SW5FcnJJZHg7IGorKykge1xyXG4gICAgICAgICAgICBlcnJMb2NhdGlvbiArPSBqICUgMiA9PT0gMCA/IHBhcnRzW2pdIDogXCJ7e1wiICsgcGFydHNbal0gKyBcIn19XCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlcnJMb2NhdGlvbi5sZW5ndGg7XHJcbiAgICB9O1xyXG4gICAgUGFyc2VyID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgZGVjb3JhdG9yc18xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbbGV4ZXJfMS5MZXhlciwgcmVmbGVjdGlvbl8xLlJlZmxlY3Rvcl0pXHJcbiAgICBdLCBQYXJzZXIpO1xyXG4gICAgcmV0dXJuIFBhcnNlcjtcclxufSkoKTtcclxuZXhwb3J0cy5QYXJzZXIgPSBQYXJzZXI7XHJcbnZhciBfUGFyc2VBU1QgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gX1BhcnNlQVNUKGlucHV0LCBsb2NhdGlvbiwgdG9rZW5zLCByZWZsZWN0b3IsIHBhcnNlQWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xyXG4gICAgICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcclxuICAgICAgICB0aGlzLnRva2VucyA9IHRva2VucztcclxuICAgICAgICB0aGlzLnJlZmxlY3RvciA9IHJlZmxlY3RvcjtcclxuICAgICAgICB0aGlzLnBhcnNlQWN0aW9uID0gcGFyc2VBY3Rpb247XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XHJcbiAgICB9XHJcbiAgICBfUGFyc2VBU1QucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbiAob2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIGkgPSB0aGlzLmluZGV4ICsgb2Zmc2V0O1xyXG4gICAgICAgIHJldHVybiBpIDwgdGhpcy50b2tlbnMubGVuZ3RoID8gdGhpcy50b2tlbnNbaV0gOiBsZXhlcl8xLkVPRjtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX1BhcnNlQVNULnByb3RvdHlwZSwgXCJuZXh0XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMucGVlaygwKTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX1BhcnNlQVNULnByb3RvdHlwZSwgXCJpbnB1dEluZGV4XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmluZGV4IDwgdGhpcy50b2tlbnMubGVuZ3RoKSA/IHRoaXMubmV4dC5pbmRleCA6IHRoaXMuaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5hZHZhbmNlID0gZnVuY3Rpb24gKCkgeyB0aGlzLmluZGV4Kys7IH07XHJcbiAgICBfUGFyc2VBU1QucHJvdG90eXBlLm9wdGlvbmFsQ2hhcmFjdGVyID0gZnVuY3Rpb24gKGNvZGUpIHtcclxuICAgICAgICBpZiAodGhpcy5uZXh0LmlzQ2hhcmFjdGVyKGNvZGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5vcHRpb25hbEtleXdvcmRWYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGVla0tleXdvcmRWYXIoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFkdmFuY2UoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIF9QYXJzZUFTVC5wcm90b3R5cGUucGVla0tleXdvcmRWYXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm5leHQuaXNLZXl3b3JkVmFyKCkgfHwgdGhpcy5uZXh0LmlzT3BlcmF0b3IoJyMnKTsgfTtcclxuICAgIF9QYXJzZUFTVC5wcm90b3R5cGUuZXhwZWN0Q2hhcmFjdGVyID0gZnVuY3Rpb24gKGNvZGUpIHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25hbENoYXJhY3Rlcihjb2RlKSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuZXJyb3IoXCJNaXNzaW5nIGV4cGVjdGVkIFwiICsgbGFuZ18xLlN0cmluZ1dyYXBwZXIuZnJvbUNoYXJDb2RlKGNvZGUpKTtcclxuICAgIH07XHJcbiAgICBfUGFyc2VBU1QucHJvdG90eXBlLm9wdGlvbmFsT3BlcmF0b3IgPSBmdW5jdGlvbiAob3ApIHtcclxuICAgICAgICBpZiAodGhpcy5uZXh0LmlzT3BlcmF0b3Iob3ApKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5leHBlY3RPcGVyYXRvciA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbmFsT3BlcmF0b3Iob3BlcmF0b3IpKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdGhpcy5lcnJvcihcIk1pc3NpbmcgZXhwZWN0ZWQgb3BlcmF0b3IgXCIgKyBvcGVyYXRvcik7XHJcbiAgICB9O1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5leHBlY3RJZGVudGlmaWVyT3JLZXl3b3JkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuID0gdGhpcy5uZXh0O1xyXG4gICAgICAgIGlmICghbi5pc0lkZW50aWZpZXIoKSAmJiAhbi5pc0tleXdvcmQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yKFwiVW5leHBlY3RlZCB0b2tlbiBcIiArIG4gKyBcIiwgZXhwZWN0ZWQgaWRlbnRpZmllciBvciBrZXl3b3JkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFkdmFuY2UoKTtcclxuICAgICAgICByZXR1cm4gbi50b1N0cmluZygpO1xyXG4gICAgfTtcclxuICAgIF9QYXJzZUFTVC5wcm90b3R5cGUuZXhwZWN0SWRlbnRpZmllck9yS2V5d29yZE9yU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuID0gdGhpcy5uZXh0O1xyXG4gICAgICAgIGlmICghbi5pc0lkZW50aWZpZXIoKSAmJiAhbi5pc0tleXdvcmQoKSAmJiAhbi5pc1N0cmluZygpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoXCJVbmV4cGVjdGVkIHRva2VuIFwiICsgbiArIFwiLCBleHBlY3RlZCBpZGVudGlmaWVyLCBrZXl3b3JkLCBvciBzdHJpbmdcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYWR2YW5jZSgpO1xyXG4gICAgICAgIHJldHVybiBuLnRvU3RyaW5nKCk7XHJcbiAgICB9O1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5wYXJzZUNoYWluID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBleHBycyA9IFtdO1xyXG4gICAgICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50b2tlbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciBleHByID0gdGhpcy5wYXJzZVBpcGUoKTtcclxuICAgICAgICAgICAgZXhwcnMucHVzaChleHByKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9uYWxDaGFyYWN0ZXIobGV4ZXJfMS4kU0VNSUNPTE9OKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBhcnNlQWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihcIkJpbmRpbmcgZXhwcmVzc2lvbiBjYW5ub3QgY29udGFpbiBjaGFpbmVkIGV4cHJlc3Npb25cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5vcHRpb25hbENoYXJhY3RlcihsZXhlcl8xLiRTRU1JQ09MT04pKSB7XHJcbiAgICAgICAgICAgICAgICB9IC8vIHJlYWQgYWxsIHNlbWljb2xvbnNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmluZGV4IDwgdGhpcy50b2tlbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKFwiVW5leHBlY3RlZCB0b2tlbiAnXCIgKyB0aGlzLm5leHQgKyBcIidcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV4cHJzLmxlbmd0aCA9PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGFzdF8xLkVtcHR5RXhwcigpO1xyXG4gICAgICAgIGlmIChleHBycy5sZW5ndGggPT0gMSlcclxuICAgICAgICAgICAgcmV0dXJuIGV4cHJzWzBdO1xyXG4gICAgICAgIHJldHVybiBuZXcgYXN0XzEuQ2hhaW4oZXhwcnMpO1xyXG4gICAgfTtcclxuICAgIF9QYXJzZUFTVC5wcm90b3R5cGUucGFyc2VTaW1wbGVCaW5kaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhc3QgPSB0aGlzLnBhcnNlQ2hhaW4oKTtcclxuICAgICAgICBpZiAoIVNpbXBsZUV4cHJlc3Npb25DaGVja2VyLmNoZWNrKGFzdCkpIHtcclxuICAgICAgICAgICAgdGhpcy5lcnJvcihcIlNpbXBsZSBiaW5kaW5nIGV4cHJlc3Npb24gY2FuIG9ubHkgY29udGFpbiBmaWVsZCBhY2Nlc3MgYW5kIGNvbnN0YW50cydcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhc3Q7XHJcbiAgICB9O1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5wYXJzZVBpcGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uYWxPcGVyYXRvcihcInxcIikpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGFyc2VBY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoXCJDYW5ub3QgaGF2ZSBhIHBpcGUgaW4gYW4gYWN0aW9uIGV4cHJlc3Npb25cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSB0aGlzLmV4cGVjdElkZW50aWZpZXJPcktleXdvcmQoKTtcclxuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5vcHRpb25hbENoYXJhY3RlcihsZXhlcl8xLiRDT0xPTikpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2godGhpcy5wYXJzZVBpcGUoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgYXN0XzEuQmluZGluZ1BpcGUocmVzdWx0LCBuYW1lLCBhcmdzKTtcclxuICAgICAgICAgICAgfSB3aGlsZSAodGhpcy5vcHRpb25hbE9wZXJhdG9yKFwifFwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5wYXJzZUV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnBhcnNlQ29uZGl0aW9uYWwoKTsgfTtcclxuICAgIF9QYXJzZUFTVC5wcm90b3R5cGUucGFyc2VDb25kaXRpb25hbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmlucHV0SW5kZXg7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VMb2dpY2FsT3IoKTtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25hbE9wZXJhdG9yKCc/JykpIHtcclxuICAgICAgICAgICAgdmFyIHllcyA9IHRoaXMucGFyc2VQaXBlKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25hbENoYXJhY3RlcihsZXhlcl8xLiRDT0xPTikpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlbmQgPSB0aGlzLmlucHV0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IHRoaXMuaW5wdXQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcihcIkNvbmRpdGlvbmFsIGV4cHJlc3Npb24gXCIgKyBleHByZXNzaW9uICsgXCIgcmVxdWlyZXMgYWxsIDMgZXhwcmVzc2lvbnNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG5vID0gdGhpcy5wYXJzZVBpcGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBhc3RfMS5Db25kaXRpb25hbChyZXN1bHQsIHllcywgbm8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5wYXJzZUxvZ2ljYWxPciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyAnfHwnXHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VMb2dpY2FsQW5kKCk7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMub3B0aW9uYWxPcGVyYXRvcignfHwnKSkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgYXN0XzEuQmluYXJ5KCd8fCcsIHJlc3VsdCwgdGhpcy5wYXJzZUxvZ2ljYWxBbmQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5wYXJzZUxvZ2ljYWxBbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gJyYmJ1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlRXF1YWxpdHkoKTtcclxuICAgICAgICB3aGlsZSAodGhpcy5vcHRpb25hbE9wZXJhdG9yKCcmJicpKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBhc3RfMS5CaW5hcnkoJyYmJywgcmVzdWx0LCB0aGlzLnBhcnNlRXF1YWxpdHkoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5wYXJzZUVxdWFsaXR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vICc9PScsJyE9JywnPT09JywnIT09J1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlUmVsYXRpb25hbCgpO1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbmFsT3BlcmF0b3IoJz09JykpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBhc3RfMS5CaW5hcnkoJz09JywgcmVzdWx0LCB0aGlzLnBhcnNlUmVsYXRpb25hbCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLm9wdGlvbmFsT3BlcmF0b3IoJz09PScpKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgYXN0XzEuQmluYXJ5KCc9PT0nLCByZXN1bHQsIHRoaXMucGFyc2VSZWxhdGlvbmFsKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9uYWxPcGVyYXRvcignIT0nKSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IGFzdF8xLkJpbmFyeSgnIT0nLCByZXN1bHQsIHRoaXMucGFyc2VSZWxhdGlvbmFsKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9uYWxPcGVyYXRvcignIT09JykpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBhc3RfMS5CaW5hcnkoJyE9PScsIHJlc3VsdCwgdGhpcy5wYXJzZVJlbGF0aW9uYWwoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIF9QYXJzZUFTVC5wcm90b3R5cGUucGFyc2VSZWxhdGlvbmFsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vICc8JywgJz4nLCAnPD0nLCAnPj0nXHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VBZGRpdGl2ZSgpO1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbmFsT3BlcmF0b3IoJzwnKSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IGFzdF8xLkJpbmFyeSgnPCcsIHJlc3VsdCwgdGhpcy5wYXJzZUFkZGl0aXZlKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9uYWxPcGVyYXRvcignPicpKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgYXN0XzEuQmluYXJ5KCc+JywgcmVzdWx0LCB0aGlzLnBhcnNlQWRkaXRpdmUoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5vcHRpb25hbE9wZXJhdG9yKCc8PScpKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgYXN0XzEuQmluYXJ5KCc8PScsIHJlc3VsdCwgdGhpcy5wYXJzZUFkZGl0aXZlKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9uYWxPcGVyYXRvcignPj0nKSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IGFzdF8xLkJpbmFyeSgnPj0nLCByZXN1bHQsIHRoaXMucGFyc2VBZGRpdGl2ZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5wYXJzZUFkZGl0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vICcrJywgJy0nXHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VNdWx0aXBsaWNhdGl2ZSgpO1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbmFsT3BlcmF0b3IoJysnKSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IGFzdF8xLkJpbmFyeSgnKycsIHJlc3VsdCwgdGhpcy5wYXJzZU11bHRpcGxpY2F0aXZlKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9uYWxPcGVyYXRvcignLScpKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgYXN0XzEuQmluYXJ5KCctJywgcmVzdWx0LCB0aGlzLnBhcnNlTXVsdGlwbGljYXRpdmUoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIF9QYXJzZUFTVC5wcm90b3R5cGUucGFyc2VNdWx0aXBsaWNhdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyAnKicsICclJywgJy8nXHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VQcmVmaXgoKTtcclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25hbE9wZXJhdG9yKCcqJykpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBhc3RfMS5CaW5hcnkoJyonLCByZXN1bHQsIHRoaXMucGFyc2VQcmVmaXgoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5vcHRpb25hbE9wZXJhdG9yKCclJykpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBhc3RfMS5CaW5hcnkoJyUnLCByZXN1bHQsIHRoaXMucGFyc2VQcmVmaXgoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5vcHRpb25hbE9wZXJhdG9yKCcvJykpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBhc3RfMS5CaW5hcnkoJy8nLCByZXN1bHQsIHRoaXMucGFyc2VQcmVmaXgoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIF9QYXJzZUFTVC5wcm90b3R5cGUucGFyc2VQcmVmaXggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uYWxPcGVyYXRvcignKycpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlUHJlZml4KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9uYWxPcGVyYXRvcignLScpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgYXN0XzEuQmluYXJ5KCctJywgbmV3IGFzdF8xLkxpdGVyYWxQcmltaXRpdmUoMCksIHRoaXMucGFyc2VQcmVmaXgoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9uYWxPcGVyYXRvcignIScpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgYXN0XzEuUHJlZml4Tm90KHRoaXMucGFyc2VQcmVmaXgoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUNhbGxDaGFpbigpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBfUGFyc2VBU1QucHJvdG90eXBlLnBhcnNlQ2FsbENoYWluID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlUHJpbWFyeSgpO1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbmFsQ2hhcmFjdGVyKGxleGVyXzEuJFBFUklPRCkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucGFyc2VBY2Nlc3NNZW1iZXJPck1ldGhvZENhbGwocmVzdWx0LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5vcHRpb25hbE9wZXJhdG9yKCc/LicpKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLnBhcnNlQWNjZXNzTWVtYmVyT3JNZXRob2RDYWxsKHJlc3VsdCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5vcHRpb25hbENoYXJhY3RlcihsZXhlcl8xLiRMQlJBQ0tFVCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLnBhcnNlUGlwZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5leHBlY3RDaGFyYWN0ZXIobGV4ZXJfMS4kUkJSQUNLRVQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9uYWxPcGVyYXRvcihcIj1cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnBhcnNlQ29uZGl0aW9uYWwoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgYXN0XzEuS2V5ZWRXcml0ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IGFzdF8xLktleWVkUmVhZChyZXN1bHQsIGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5vcHRpb25hbENoYXJhY3RlcihsZXhlcl8xLiRMUEFSRU4pKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IHRoaXMucGFyc2VDYWxsQXJndW1lbnRzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdENoYXJhY3RlcihsZXhlcl8xLiRSUEFSRU4pO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IGFzdF8xLkZ1bmN0aW9uQ2FsbChyZXN1bHQsIGFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBfUGFyc2VBU1QucHJvdG90eXBlLnBhcnNlUHJpbWFyeSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25hbENoYXJhY3RlcihsZXhlcl8xLiRMUEFSRU4pKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlUGlwZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmV4cGVjdENoYXJhY3RlcihsZXhlcl8xLiRSUEFSRU4pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLm5leHQuaXNLZXl3b3JkTnVsbCgpIHx8IHRoaXMubmV4dC5pc0tleXdvcmRVbmRlZmluZWQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFkdmFuY2UoKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBhc3RfMS5MaXRlcmFsUHJpbWl0aXZlKG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLm5leHQuaXNLZXl3b3JkVHJ1ZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGFzdF8xLkxpdGVyYWxQcmltaXRpdmUodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMubmV4dC5pc0tleXdvcmRGYWxzZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGFzdF8xLkxpdGVyYWxQcmltaXRpdmUoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnBhcnNlQWN0aW9uICYmIHRoaXMubmV4dC5pc0tleXdvcmRJZigpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmV4cGVjdENoYXJhY3RlcihsZXhlcl8xLiRMUEFSRU4pO1xyXG4gICAgICAgICAgICB2YXIgY29uZGl0aW9uID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcclxuICAgICAgICAgICAgdGhpcy5leHBlY3RDaGFyYWN0ZXIobGV4ZXJfMS4kUlBBUkVOKTtcclxuICAgICAgICAgICAgdmFyIGlmRXhwID0gdGhpcy5wYXJzZUV4cHJlc3Npb25PckJsb2NrKCk7XHJcbiAgICAgICAgICAgIHZhciBlbHNlRXhwO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5uZXh0LmlzS2V5d29yZEVsc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZHZhbmNlKCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlRXhwID0gdGhpcy5wYXJzZUV4cHJlc3Npb25PckJsb2NrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBhc3RfMS5JZihjb25kaXRpb24sIGlmRXhwLCBlbHNlRXhwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5vcHRpb25hbENoYXJhY3RlcihsZXhlcl8xLiRMQlJBQ0tFVCkpIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gdGhpcy5wYXJzZUV4cHJlc3Npb25MaXN0KGxleGVyXzEuJFJCUkFDS0VUKTtcclxuICAgICAgICAgICAgdGhpcy5leHBlY3RDaGFyYWN0ZXIobGV4ZXJfMS4kUkJSQUNLRVQpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGFzdF8xLkxpdGVyYWxBcnJheShlbGVtZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMubmV4dC5pc0NoYXJhY3RlcihsZXhlcl8xLiRMQlJBQ0UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlTGl0ZXJhbE1hcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLm5leHQuaXNJZGVudGlmaWVyKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VBY2Nlc3NNZW1iZXJPck1ldGhvZENhbGwoX2ltcGxpY2l0UmVjZWl2ZXIsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5uZXh0LmlzTnVtYmVyKCkpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5uZXh0LnRvTnVtYmVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGFzdF8xLkxpdGVyYWxQcmltaXRpdmUodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLm5leHQuaXNTdHJpbmcoKSkge1xyXG4gICAgICAgICAgICB2YXIgbGl0ZXJhbFZhbHVlID0gdGhpcy5uZXh0LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWR2YW5jZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGFzdF8xLkxpdGVyYWxQcmltaXRpdmUobGl0ZXJhbFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5pbmRleCA+PSB0aGlzLnRva2Vucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5lcnJvcihcIlVuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IFwiICsgdGhpcy5pbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yKFwiVW5leHBlY3RlZCB0b2tlbiBcIiArIHRoaXMubmV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGVycm9yKCkgdGhyb3dzLCBzbyB3ZSBkb24ndCByZWFjaCBoZXJlLlxyXG4gICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihcIkZlbGwgdGhyb3VnaCBhbGwgY2FzZXMgaW4gcGFyc2VQcmltYXJ5XCIpO1xyXG4gICAgfTtcclxuICAgIF9QYXJzZUFTVC5wcm90b3R5cGUucGFyc2VFeHByZXNzaW9uTGlzdCA9IGZ1bmN0aW9uICh0ZXJtaW5hdG9yKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIGlmICghdGhpcy5uZXh0LmlzQ2hhcmFjdGVyKHRlcm1pbmF0b3IpKSB7XHJcbiAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMucGFyc2VQaXBlKCkpO1xyXG4gICAgICAgICAgICB9IHdoaWxlICh0aGlzLm9wdGlvbmFsQ2hhcmFjdGVyKGxleGVyXzEuJENPTU1BKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5wYXJzZUxpdGVyYWxNYXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGtleXMgPSBbXTtcclxuICAgICAgICB2YXIgdmFsdWVzID0gW107XHJcbiAgICAgICAgdGhpcy5leHBlY3RDaGFyYWN0ZXIobGV4ZXJfMS4kTEJSQUNFKTtcclxuICAgICAgICBpZiAoIXRoaXMub3B0aW9uYWxDaGFyYWN0ZXIobGV4ZXJfMS4kUkJSQUNFKSkge1xyXG4gICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5leHBlY3RJZGVudGlmaWVyT3JLZXl3b3JkT3JTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5leHBlY3RDaGFyYWN0ZXIobGV4ZXJfMS4kQ09MT04pO1xyXG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2godGhpcy5wYXJzZVBpcGUoKSk7XHJcbiAgICAgICAgICAgIH0gd2hpbGUgKHRoaXMub3B0aW9uYWxDaGFyYWN0ZXIobGV4ZXJfMS4kQ09NTUEpKTtcclxuICAgICAgICAgICAgdGhpcy5leHBlY3RDaGFyYWN0ZXIobGV4ZXJfMS4kUkJSQUNFKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBhc3RfMS5MaXRlcmFsTWFwKGtleXMsIHZhbHVlcyk7XHJcbiAgICB9O1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5wYXJzZUFjY2Vzc01lbWJlck9yTWV0aG9kQ2FsbCA9IGZ1bmN0aW9uIChyZWNlaXZlciwgaXNTYWZlKSB7XHJcbiAgICAgICAgaWYgKGlzU2FmZSA9PT0gdm9pZCAwKSB7IGlzU2FmZSA9IGZhbHNlOyB9XHJcbiAgICAgICAgdmFyIGlkID0gdGhpcy5leHBlY3RJZGVudGlmaWVyT3JLZXl3b3JkKCk7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uYWxDaGFyYWN0ZXIobGV4ZXJfMS4kTFBBUkVOKSkge1xyXG4gICAgICAgICAgICB2YXIgYXJncyA9IHRoaXMucGFyc2VDYWxsQXJndW1lbnRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZXhwZWN0Q2hhcmFjdGVyKGxleGVyXzEuJFJQQVJFTik7XHJcbiAgICAgICAgICAgIHZhciBmbiA9IHRoaXMucmVmbGVjdG9yLm1ldGhvZChpZCk7XHJcbiAgICAgICAgICAgIHJldHVybiBpc1NhZmUgPyBuZXcgYXN0XzEuU2FmZU1ldGhvZENhbGwocmVjZWl2ZXIsIGlkLCBmbiwgYXJncykgOlxyXG4gICAgICAgICAgICAgICAgbmV3IGFzdF8xLk1ldGhvZENhbGwocmVjZWl2ZXIsIGlkLCBmbiwgYXJncyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoaXNTYWZlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25hbE9wZXJhdG9yKFwiPVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoXCJUaGUgJz8uJyBvcGVyYXRvciBjYW5ub3QgYmUgdXNlZCBpbiB0aGUgYXNzaWdubWVudFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgYXN0XzEuU2FmZVByb3BlcnR5UmVhZChyZWNlaXZlciwgaWQsIHRoaXMucmVmbGVjdG9yLmdldHRlcihpZCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9uYWxPcGVyYXRvcihcIj1cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucGFyc2VBY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihcIkJpbmRpbmdzIGNhbm5vdCBjb250YWluIGFzc2lnbm1lbnRzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnBhcnNlQ29uZGl0aW9uYWwoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGFzdF8xLlByb3BlcnR5V3JpdGUocmVjZWl2ZXIsIGlkLCB0aGlzLnJlZmxlY3Rvci5zZXR0ZXIoaWQpLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGFzdF8xLlByb3BlcnR5UmVhZChyZWNlaXZlciwgaWQsIHRoaXMucmVmbGVjdG9yLmdldHRlcihpZCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIF9QYXJzZUFTVC5wcm90b3R5cGUucGFyc2VDYWxsQXJndW1lbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm5leHQuaXNDaGFyYWN0ZXIobGV4ZXJfMS4kUlBBUkVOKSlcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIHZhciBwb3NpdGlvbmFscyA9IFtdO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgcG9zaXRpb25hbHMucHVzaCh0aGlzLnBhcnNlUGlwZSgpKTtcclxuICAgICAgICB9IHdoaWxlICh0aGlzLm9wdGlvbmFsQ2hhcmFjdGVyKGxleGVyXzEuJENPTU1BKSk7XHJcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uYWxzO1xyXG4gICAgfTtcclxuICAgIF9QYXJzZUFTVC5wcm90b3R5cGUucGFyc2VFeHByZXNzaW9uT3JCbG9jayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25hbENoYXJhY3RlcihsZXhlcl8xLiRMQlJBQ0UpKSB7XHJcbiAgICAgICAgICAgIHZhciBibG9jayA9IHRoaXMucGFyc2VCbG9ja0NvbnRlbnQoKTtcclxuICAgICAgICAgICAgdGhpcy5leHBlY3RDaGFyYWN0ZXIobGV4ZXJfMS4kUkJSQUNFKTtcclxuICAgICAgICAgICAgcmV0dXJuIGJsb2NrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcclxuICAgIH07XHJcbiAgICBfUGFyc2VBU1QucHJvdG90eXBlLnBhcnNlQmxvY2tDb250ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5wYXJzZUFjdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yKFwiQmluZGluZyBleHByZXNzaW9uIGNhbm5vdCBjb250YWluIGNoYWluZWQgZXhwcmVzc2lvblwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGV4cHJzID0gW107XHJcbiAgICAgICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRva2Vucy5sZW5ndGggJiYgIXRoaXMubmV4dC5pc0NoYXJhY3RlcihsZXhlcl8xLiRSQlJBQ0UpKSB7XHJcbiAgICAgICAgICAgIHZhciBleHByID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcclxuICAgICAgICAgICAgZXhwcnMucHVzaChleHByKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9uYWxDaGFyYWN0ZXIobGV4ZXJfMS4kU0VNSUNPTE9OKSkge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMub3B0aW9uYWxDaGFyYWN0ZXIobGV4ZXJfMS4kU0VNSUNPTE9OKSkge1xyXG4gICAgICAgICAgICAgICAgfSAvLyByZWFkIGFsbCBzZW1pY29sb25zXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV4cHJzLmxlbmd0aCA9PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGFzdF8xLkVtcHR5RXhwcigpO1xyXG4gICAgICAgIGlmIChleHBycy5sZW5ndGggPT0gMSlcclxuICAgICAgICAgICAgcmV0dXJuIGV4cHJzWzBdO1xyXG4gICAgICAgIHJldHVybiBuZXcgYXN0XzEuQ2hhaW4oZXhwcnMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQW4gaWRlbnRpZmllciwgYSBrZXl3b3JkLCBhIHN0cmluZyB3aXRoIGFuIG9wdGlvbmFsIGAtYCBpbmJldHdlZW4uXHJcbiAgICAgKi9cclxuICAgIF9QYXJzZUFTVC5wcm90b3R5cGUuZXhwZWN0VGVtcGxhdGVCaW5kaW5nS2V5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcclxuICAgICAgICB2YXIgb3BlcmF0b3JGb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgcmVzdWx0ICs9IHRoaXMuZXhwZWN0SWRlbnRpZmllck9yS2V5d29yZE9yU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIG9wZXJhdG9yRm91bmQgPSB0aGlzLm9wdGlvbmFsT3BlcmF0b3IoJy0nKTtcclxuICAgICAgICAgICAgaWYgKG9wZXJhdG9yRm91bmQpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnLSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IHdoaWxlIChvcGVyYXRvckZvdW5kKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0LnRvU3RyaW5nKCk7XHJcbiAgICB9O1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5wYXJzZVRlbXBsYXRlQmluZGluZ3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGJpbmRpbmdzID0gW107XHJcbiAgICAgICAgdmFyIHByZWZpeCA9IG51bGw7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRva2Vucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdmFyIGtleUlzVmFyID0gdGhpcy5vcHRpb25hbEtleXdvcmRWYXIoKTtcclxuICAgICAgICAgICAgdmFyIGtleSA9IHRoaXMuZXhwZWN0VGVtcGxhdGVCaW5kaW5nS2V5KCk7XHJcbiAgICAgICAgICAgIGlmICgha2V5SXNWYXIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcmVmaXggPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZWZpeCA9IGtleTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IHByZWZpeCArICctJyArIGtleTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbmFsQ2hhcmFjdGVyKGxleGVyXzEuJENPTE9OKTtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSBudWxsO1xyXG4gICAgICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChrZXlJc1Zhcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9uYWxPcGVyYXRvcihcIj1cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lID0gdGhpcy5leHBlY3RUZW1wbGF0ZUJpbmRpbmdLZXkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSAnXFwkaW1wbGljaXQnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubmV4dCAhPT0gbGV4ZXJfMS5FT0YgJiYgIXRoaXMucGVla0tleXdvcmRWYXIoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5pbnB1dEluZGV4O1xyXG4gICAgICAgICAgICAgICAgdmFyIGFzdCA9IHRoaXMucGFyc2VQaXBlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gdGhpcy5pbnB1dC5zdWJzdHJpbmcoc3RhcnQsIHRoaXMuaW5wdXRJbmRleCk7XHJcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uID0gbmV3IGFzdF8xLkFTVFdpdGhTb3VyY2UoYXN0LCBzb3VyY2UsIHRoaXMubG9jYXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJpbmRpbmdzLnB1c2gobmV3IGFzdF8xLlRlbXBsYXRlQmluZGluZyhrZXksIGtleUlzVmFyLCBuYW1lLCBleHByZXNzaW9uKSk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25hbENoYXJhY3RlcihsZXhlcl8xLiRTRU1JQ09MT04pKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbmFsQ2hhcmFjdGVyKGxleGVyXzEuJENPTU1BKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYmluZGluZ3M7XHJcbiAgICB9O1xyXG4gICAgX1BhcnNlQVNULnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlLCBpbmRleCkge1xyXG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7IGluZGV4ID0gbnVsbDsgfVxyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhpbmRleCkpXHJcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5pbmRleDtcclxuICAgICAgICB2YXIgbG9jYXRpb24gPSAoaW5kZXggPCB0aGlzLnRva2Vucy5sZW5ndGgpID8gXCJhdCBjb2x1bW4gXCIgKyAodGhpcy50b2tlbnNbaW5kZXhdLmluZGV4ICsgMSkgKyBcIiBpblwiIDpcclxuICAgICAgICAgICAgXCJhdCB0aGUgZW5kIG9mIHRoZSBleHByZXNzaW9uXCI7XHJcbiAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXhjZXB0aW9uKG1lc3NhZ2UsIHRoaXMuaW5wdXQsIGxvY2F0aW9uLCB0aGlzLmxvY2F0aW9uKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX1BhcnNlQVNUO1xyXG59KSgpO1xyXG5leHBvcnRzLl9QYXJzZUFTVCA9IF9QYXJzZUFTVDtcclxudmFyIFNpbXBsZUV4cHJlc3Npb25DaGVja2VyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNpbXBsZUV4cHJlc3Npb25DaGVja2VyKCkge1xyXG4gICAgICAgIHRoaXMuc2ltcGxlID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIFNpbXBsZUV4cHJlc3Npb25DaGVja2VyLmNoZWNrID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHZhciBzID0gbmV3IFNpbXBsZUV4cHJlc3Npb25DaGVja2VyKCk7XHJcbiAgICAgICAgYXN0LnZpc2l0KHMpO1xyXG4gICAgICAgIHJldHVybiBzLnNpbXBsZTtcclxuICAgIH07XHJcbiAgICBTaW1wbGVFeHByZXNzaW9uQ2hlY2tlci5wcm90b3R5cGUudmlzaXRJbXBsaWNpdFJlY2VpdmVyID0gZnVuY3Rpb24gKGFzdCkgeyB9O1xyXG4gICAgU2ltcGxlRXhwcmVzc2lvbkNoZWNrZXIucHJvdG90eXBlLnZpc2l0SW50ZXJwb2xhdGlvbiA9IGZ1bmN0aW9uIChhc3QpIHsgdGhpcy5zaW1wbGUgPSBmYWxzZTsgfTtcclxuICAgIFNpbXBsZUV4cHJlc3Npb25DaGVja2VyLnByb3RvdHlwZS52aXNpdExpdGVyYWxQcmltaXRpdmUgPSBmdW5jdGlvbiAoYXN0KSB7IH07XHJcbiAgICBTaW1wbGVFeHByZXNzaW9uQ2hlY2tlci5wcm90b3R5cGUudmlzaXRQcm9wZXJ0eVJlYWQgPSBmdW5jdGlvbiAoYXN0KSB7IH07XHJcbiAgICBTaW1wbGVFeHByZXNzaW9uQ2hlY2tlci5wcm90b3R5cGUudmlzaXRQcm9wZXJ0eVdyaXRlID0gZnVuY3Rpb24gKGFzdCkgeyB0aGlzLnNpbXBsZSA9IGZhbHNlOyB9O1xyXG4gICAgU2ltcGxlRXhwcmVzc2lvbkNoZWNrZXIucHJvdG90eXBlLnZpc2l0U2FmZVByb3BlcnR5UmVhZCA9IGZ1bmN0aW9uIChhc3QpIHsgdGhpcy5zaW1wbGUgPSBmYWxzZTsgfTtcclxuICAgIFNpbXBsZUV4cHJlc3Npb25DaGVja2VyLnByb3RvdHlwZS52aXNpdE1ldGhvZENhbGwgPSBmdW5jdGlvbiAoYXN0KSB7IHRoaXMuc2ltcGxlID0gZmFsc2U7IH07XHJcbiAgICBTaW1wbGVFeHByZXNzaW9uQ2hlY2tlci5wcm90b3R5cGUudmlzaXRTYWZlTWV0aG9kQ2FsbCA9IGZ1bmN0aW9uIChhc3QpIHsgdGhpcy5zaW1wbGUgPSBmYWxzZTsgfTtcclxuICAgIFNpbXBsZUV4cHJlc3Npb25DaGVja2VyLnByb3RvdHlwZS52aXNpdEZ1bmN0aW9uQ2FsbCA9IGZ1bmN0aW9uIChhc3QpIHsgdGhpcy5zaW1wbGUgPSBmYWxzZTsgfTtcclxuICAgIFNpbXBsZUV4cHJlc3Npb25DaGVja2VyLnByb3RvdHlwZS52aXNpdExpdGVyYWxBcnJheSA9IGZ1bmN0aW9uIChhc3QpIHsgdGhpcy52aXNpdEFsbChhc3QuZXhwcmVzc2lvbnMpOyB9O1xyXG4gICAgU2ltcGxlRXhwcmVzc2lvbkNoZWNrZXIucHJvdG90eXBlLnZpc2l0TGl0ZXJhbE1hcCA9IGZ1bmN0aW9uIChhc3QpIHsgdGhpcy52aXNpdEFsbChhc3QudmFsdWVzKTsgfTtcclxuICAgIFNpbXBsZUV4cHJlc3Npb25DaGVja2VyLnByb3RvdHlwZS52aXNpdEJpbmFyeSA9IGZ1bmN0aW9uIChhc3QpIHsgdGhpcy5zaW1wbGUgPSBmYWxzZTsgfTtcclxuICAgIFNpbXBsZUV4cHJlc3Npb25DaGVja2VyLnByb3RvdHlwZS52aXNpdFByZWZpeE5vdCA9IGZ1bmN0aW9uIChhc3QpIHsgdGhpcy5zaW1wbGUgPSBmYWxzZTsgfTtcclxuICAgIFNpbXBsZUV4cHJlc3Npb25DaGVja2VyLnByb3RvdHlwZS52aXNpdENvbmRpdGlvbmFsID0gZnVuY3Rpb24gKGFzdCkgeyB0aGlzLnNpbXBsZSA9IGZhbHNlOyB9O1xyXG4gICAgU2ltcGxlRXhwcmVzc2lvbkNoZWNrZXIucHJvdG90eXBlLnZpc2l0UGlwZSA9IGZ1bmN0aW9uIChhc3QpIHsgdGhpcy5zaW1wbGUgPSBmYWxzZTsgfTtcclxuICAgIFNpbXBsZUV4cHJlc3Npb25DaGVja2VyLnByb3RvdHlwZS52aXNpdEtleWVkUmVhZCA9IGZ1bmN0aW9uIChhc3QpIHsgdGhpcy5zaW1wbGUgPSBmYWxzZTsgfTtcclxuICAgIFNpbXBsZUV4cHJlc3Npb25DaGVja2VyLnByb3RvdHlwZS52aXNpdEtleWVkV3JpdGUgPSBmdW5jdGlvbiAoYXN0KSB7IHRoaXMuc2ltcGxlID0gZmFsc2U7IH07XHJcbiAgICBTaW1wbGVFeHByZXNzaW9uQ2hlY2tlci5wcm90b3R5cGUudmlzaXRBbGwgPSBmdW5jdGlvbiAoYXN0cykge1xyXG4gICAgICAgIHZhciByZXMgPSBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuY3JlYXRlRml4ZWRTaXplKGFzdHMubGVuZ3RoKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFzdHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgcmVzW2ldID0gYXN0c1tpXS52aXNpdCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH07XHJcbiAgICBTaW1wbGVFeHByZXNzaW9uQ2hlY2tlci5wcm90b3R5cGUudmlzaXRDaGFpbiA9IGZ1bmN0aW9uIChhc3QpIHsgdGhpcy5zaW1wbGUgPSBmYWxzZTsgfTtcclxuICAgIFNpbXBsZUV4cHJlc3Npb25DaGVja2VyLnByb3RvdHlwZS52aXNpdElmID0gZnVuY3Rpb24gKGFzdCkgeyB0aGlzLnNpbXBsZSA9IGZhbHNlOyB9O1xyXG4gICAgcmV0dXJuIFNpbXBsZUV4cHJlc3Npb25DaGVja2VyO1xyXG59KSgpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGltcGxlbWVudHNPbkRlc3Ryb3kocGlwZSkge1xyXG4gICAgcmV0dXJuIHBpcGUuY29uc3RydWN0b3IucHJvdG90eXBlLm9uRGVzdHJveTtcclxufVxyXG5leHBvcnRzLmltcGxlbWVudHNPbkRlc3Ryb3kgPSBpbXBsZW1lbnRzT25EZXN0cm95O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlX2xpZmVjeWNsZV9yZWZsZWN0b3IuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBTZWxlY3RlZFBpcGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2VsZWN0ZWRQaXBlKHBpcGUsIHB1cmUpIHtcclxuICAgICAgICB0aGlzLnBpcGUgPSBwaXBlO1xyXG4gICAgICAgIHRoaXMucHVyZSA9IHB1cmU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU2VsZWN0ZWRQaXBlO1xyXG59KSgpO1xyXG5leHBvcnRzLlNlbGVjdGVkUGlwZSA9IFNlbGVjdGVkUGlwZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZXMuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgZXhjZXB0aW9uc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2V4Y2VwdGlvbnMnKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBhc3RfMSA9IHJlcXVpcmUoJy4vcGFyc2VyL2FzdCcpO1xyXG52YXIgY2hhbmdlX2RldGVjdGlvbl91dGlsXzEgPSByZXF1aXJlKCcuL2NoYW5nZV9kZXRlY3Rpb25fdXRpbCcpO1xyXG52YXIgZHluYW1pY19jaGFuZ2VfZGV0ZWN0b3JfMSA9IHJlcXVpcmUoJy4vZHluYW1pY19jaGFuZ2VfZGV0ZWN0b3InKTtcclxudmFyIGRpcmVjdGl2ZV9yZWNvcmRfMSA9IHJlcXVpcmUoJy4vZGlyZWN0aXZlX3JlY29yZCcpO1xyXG52YXIgZXZlbnRfYmluZGluZ18xID0gcmVxdWlyZSgnLi9ldmVudF9iaW5kaW5nJyk7XHJcbnZhciBjb2FsZXNjZV8xID0gcmVxdWlyZSgnLi9jb2FsZXNjZScpO1xyXG52YXIgcHJvdG9fcmVjb3JkXzEgPSByZXF1aXJlKCcuL3Byb3RvX3JlY29yZCcpO1xyXG52YXIgRHluYW1pY1Byb3RvQ2hhbmdlRGV0ZWN0b3IgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRHluYW1pY1Byb3RvQ2hhbmdlRGV0ZWN0b3IoX2RlZmluaXRpb24pIHtcclxuICAgICAgICB0aGlzLl9kZWZpbml0aW9uID0gX2RlZmluaXRpb247XHJcbiAgICAgICAgdGhpcy5fcHJvcGVydHlCaW5kaW5nUmVjb3JkcyA9IGNyZWF0ZVByb3BlcnR5UmVjb3JkcyhfZGVmaW5pdGlvbik7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRCaW5kaW5nUmVjb3JkcyA9IGNyZWF0ZUV2ZW50UmVjb3JkcyhfZGVmaW5pdGlvbik7XHJcbiAgICAgICAgdGhpcy5fcHJvcGVydHlCaW5kaW5nVGFyZ2V0cyA9IHRoaXMuX2RlZmluaXRpb24uYmluZGluZ1JlY29yZHMubWFwKGZ1bmN0aW9uIChiKSB7IHJldHVybiBiLnRhcmdldDsgfSk7XHJcbiAgICAgICAgdGhpcy5fZGlyZWN0aXZlSW5kaWNlcyA9IHRoaXMuX2RlZmluaXRpb24uZGlyZWN0aXZlUmVjb3Jkcy5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGlyZWN0aXZlSW5kZXg7IH0pO1xyXG4gICAgfVxyXG4gICAgRHluYW1pY1Byb3RvQ2hhbmdlRGV0ZWN0b3IucHJvdG90eXBlLmluc3RhbnRpYXRlID0gZnVuY3Rpb24gKGRpc3BhdGNoZXIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IGR5bmFtaWNfY2hhbmdlX2RldGVjdG9yXzEuRHluYW1pY0NoYW5nZURldGVjdG9yKHRoaXMuX2RlZmluaXRpb24uaWQsIGRpc3BhdGNoZXIsIHRoaXMuX3Byb3BlcnR5QmluZGluZ1JlY29yZHMubGVuZ3RoLCB0aGlzLl9wcm9wZXJ0eUJpbmRpbmdUYXJnZXRzLCB0aGlzLl9kaXJlY3RpdmVJbmRpY2VzLCB0aGlzLl9kZWZpbml0aW9uLnN0cmF0ZWd5LCB0aGlzLl9wcm9wZXJ0eUJpbmRpbmdSZWNvcmRzLCB0aGlzLl9ldmVudEJpbmRpbmdSZWNvcmRzLCB0aGlzLl9kZWZpbml0aW9uLmRpcmVjdGl2ZVJlY29yZHMsIHRoaXMuX2RlZmluaXRpb24uZ2VuQ29uZmlnKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRHluYW1pY1Byb3RvQ2hhbmdlRGV0ZWN0b3I7XHJcbn0pKCk7XHJcbmV4cG9ydHMuRHluYW1pY1Byb3RvQ2hhbmdlRGV0ZWN0b3IgPSBEeW5hbWljUHJvdG9DaGFuZ2VEZXRlY3RvcjtcclxuZnVuY3Rpb24gY3JlYXRlUHJvcGVydHlSZWNvcmRzKGRlZmluaXRpb24pIHtcclxuICAgIHZhciByZWNvcmRCdWlsZGVyID0gbmV3IFByb3RvUmVjb3JkQnVpbGRlcigpO1xyXG4gICAgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmZvckVhY2hXaXRoSW5kZXgoZGVmaW5pdGlvbi5iaW5kaW5nUmVjb3JkcywgZnVuY3Rpb24gKGIsIGluZGV4KSB7IHJldHVybiByZWNvcmRCdWlsZGVyLmFkZChiLCBkZWZpbml0aW9uLnZhcmlhYmxlTmFtZXMsIGluZGV4KTsgfSk7XHJcbiAgICByZXR1cm4gY29hbGVzY2VfMS5jb2FsZXNjZShyZWNvcmRCdWlsZGVyLnJlY29yZHMpO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlUHJvcGVydHlSZWNvcmRzID0gY3JlYXRlUHJvcGVydHlSZWNvcmRzO1xyXG5mdW5jdGlvbiBjcmVhdGVFdmVudFJlY29yZHMoZGVmaW5pdGlvbikge1xyXG4gICAgLy8gVE9ETzogdnNhdmtpbjogcmVtb3ZlICRldmVudCB3aGVuIHRoZSBjb21waWxlciBoYW5kbGVzIHJlbmRlci1zaWRlIHZhcmlhYmxlcyBwcm9wZXJseVxyXG4gICAgdmFyIHZhck5hbWVzID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNvbmNhdChbJyRldmVudCddLCBkZWZpbml0aW9uLnZhcmlhYmxlTmFtZXMpO1xyXG4gICAgcmV0dXJuIGRlZmluaXRpb24uZXZlbnRSZWNvcmRzLm1hcChmdW5jdGlvbiAoZXIpIHtcclxuICAgICAgICB2YXIgcmVjb3JkcyA9IF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3Jkcy5jcmVhdGUoZXIsIHZhck5hbWVzKTtcclxuICAgICAgICB2YXIgZGlySW5kZXggPSBlci5pbXBsaWNpdFJlY2VpdmVyIGluc3RhbmNlb2YgZGlyZWN0aXZlX3JlY29yZF8xLkRpcmVjdGl2ZUluZGV4ID8gZXIuaW1wbGljaXRSZWNlaXZlciA6IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBldmVudF9iaW5kaW5nXzEuRXZlbnRCaW5kaW5nKGVyLnRhcmdldC5uYW1lLCBlci50YXJnZXQuZWxlbWVudEluZGV4LCBkaXJJbmRleCwgcmVjb3Jkcyk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmNyZWF0ZUV2ZW50UmVjb3JkcyA9IGNyZWF0ZUV2ZW50UmVjb3JkcztcclxudmFyIFByb3RvUmVjb3JkQnVpbGRlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQcm90b1JlY29yZEJ1aWxkZXIoKSB7XHJcbiAgICAgICAgdGhpcy5yZWNvcmRzID0gW107XHJcbiAgICB9XHJcbiAgICBQcm90b1JlY29yZEJ1aWxkZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChiLCB2YXJpYWJsZU5hbWVzLCBiaW5kaW5nSW5kZXgpIHtcclxuICAgICAgICB2YXIgb2xkTGFzdCA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5sYXN0KHRoaXMucmVjb3Jkcyk7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQob2xkTGFzdCkgJiYgb2xkTGFzdC5iaW5kaW5nUmVjb3JkLmRpcmVjdGl2ZVJlY29yZCA9PSBiLmRpcmVjdGl2ZVJlY29yZCkge1xyXG4gICAgICAgICAgICBvbGRMYXN0Lmxhc3RJbkRpcmVjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbnVtYmVyT2ZSZWNvcmRzQmVmb3JlID0gdGhpcy5yZWNvcmRzLmxlbmd0aDtcclxuICAgICAgICB0aGlzLl9hcHBlbmRSZWNvcmRzKGIsIHZhcmlhYmxlTmFtZXMsIGJpbmRpbmdJbmRleCk7XHJcbiAgICAgICAgdmFyIG5ld0xhc3QgPSBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIubGFzdCh0aGlzLnJlY29yZHMpO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KG5ld0xhc3QpICYmIG5ld0xhc3QgIT09IG9sZExhc3QpIHtcclxuICAgICAgICAgICAgbmV3TGFzdC5sYXN0SW5CaW5kaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgbmV3TGFzdC5sYXN0SW5EaXJlY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRBcmd1bWVudFRvUHVyZUZ1bmN0aW9uKG51bWJlck9mUmVjb3Jkc0JlZm9yZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIFByb3RvUmVjb3JkQnVpbGRlci5wcm90b3R5cGUuX3NldEFyZ3VtZW50VG9QdXJlRnVuY3Rpb24gPSBmdW5jdGlvbiAoc3RhcnRJbmRleCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCB0aGlzLnJlY29yZHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIHJlYyA9IHRoaXMucmVjb3Jkc1tpXTtcclxuICAgICAgICAgICAgaWYgKHJlYy5pc1B1cmVGdW5jdGlvbigpKSB7XHJcbiAgICAgICAgICAgICAgICByZWMuYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNvcmRJbmRleCkgeyByZXR1cm4gX3RoaXMucmVjb3Jkc1tyZWNvcmRJbmRleCAtIDFdLmFyZ3VtZW50VG9QdXJlRnVuY3Rpb24gPVxyXG4gICAgICAgICAgICAgICAgICAgIHRydWU7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZWMubW9kZSA9PT0gcHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5QaXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZWMuYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNvcmRJbmRleCkgeyByZXR1cm4gX3RoaXMucmVjb3Jkc1tyZWNvcmRJbmRleCAtIDFdLmFyZ3VtZW50VG9QdXJlRnVuY3Rpb24gPVxyXG4gICAgICAgICAgICAgICAgICAgIHRydWU7IH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvcmRzW3JlYy5jb250ZXh0SW5kZXggLSAxXS5hcmd1bWVudFRvUHVyZUZ1bmN0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBQcm90b1JlY29yZEJ1aWxkZXIucHJvdG90eXBlLl9hcHBlbmRSZWNvcmRzID0gZnVuY3Rpb24gKGIsIHZhcmlhYmxlTmFtZXMsIGJpbmRpbmdJbmRleCkge1xyXG4gICAgICAgIGlmIChiLmlzRGlyZWN0aXZlTGlmZWN5Y2xlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZWNvcmRzLnB1c2gobmV3IHByb3RvX3JlY29yZF8xLlByb3RvUmVjb3JkKHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuRGlyZWN0aXZlTGlmZWN5Y2xlLCBiLmxpZmVjeWNsZUV2ZW50LCBudWxsLCBbXSwgW10sIC0xLCBudWxsLCB0aGlzLnJlY29yZHMubGVuZ3RoICsgMSwgYiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIG51bGwpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3Jkcy5hcHBlbmQodGhpcy5yZWNvcmRzLCBiLCB2YXJpYWJsZU5hbWVzLCBiaW5kaW5nSW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gUHJvdG9SZWNvcmRCdWlsZGVyO1xyXG59KSgpO1xyXG5leHBvcnRzLlByb3RvUmVjb3JkQnVpbGRlciA9IFByb3RvUmVjb3JkQnVpbGRlcjtcclxudmFyIF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3JkcyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBfQ29udmVydEFzdEludG9Qcm90b1JlY29yZHMoX3JlY29yZHMsIF9iaW5kaW5nUmVjb3JkLCBfdmFyaWFibGVOYW1lcywgX2JpbmRpbmdJbmRleCkge1xyXG4gICAgICAgIHRoaXMuX3JlY29yZHMgPSBfcmVjb3JkcztcclxuICAgICAgICB0aGlzLl9iaW5kaW5nUmVjb3JkID0gX2JpbmRpbmdSZWNvcmQ7XHJcbiAgICAgICAgdGhpcy5fdmFyaWFibGVOYW1lcyA9IF92YXJpYWJsZU5hbWVzO1xyXG4gICAgICAgIHRoaXMuX2JpbmRpbmdJbmRleCA9IF9iaW5kaW5nSW5kZXg7XHJcbiAgICB9XHJcbiAgICBfQ29udmVydEFzdEludG9Qcm90b1JlY29yZHMuYXBwZW5kID0gZnVuY3Rpb24gKHJlY29yZHMsIGIsIHZhcmlhYmxlTmFtZXMsIGJpbmRpbmdJbmRleCkge1xyXG4gICAgICAgIHZhciBjID0gbmV3IF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3JkcyhyZWNvcmRzLCBiLCB2YXJpYWJsZU5hbWVzLCBiaW5kaW5nSW5kZXgpO1xyXG4gICAgICAgIGIuYXN0LnZpc2l0KGMpO1xyXG4gICAgfTtcclxuICAgIF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3Jkcy5jcmVhdGUgPSBmdW5jdGlvbiAoYiwgdmFyaWFibGVOYW1lcykge1xyXG4gICAgICAgIHZhciByZWMgPSBbXTtcclxuICAgICAgICBfQ29udmVydEFzdEludG9Qcm90b1JlY29yZHMuYXBwZW5kKHJlYywgYiwgdmFyaWFibGVOYW1lcywgbnVsbCk7XHJcbiAgICAgICAgcmVjW3JlYy5sZW5ndGggLSAxXS5sYXN0SW5CaW5kaW5nID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gcmVjO1xyXG4gICAgfTtcclxuICAgIF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3Jkcy5wcm90b3R5cGUudmlzaXRJbXBsaWNpdFJlY2VpdmVyID0gZnVuY3Rpb24gKGFzdCkgeyByZXR1cm4gdGhpcy5fYmluZGluZ1JlY29yZC5pbXBsaWNpdFJlY2VpdmVyOyB9O1xyXG4gICAgX0NvbnZlcnRBc3RJbnRvUHJvdG9SZWNvcmRzLnByb3RvdHlwZS52aXNpdEludGVycG9sYXRpb24gPSBmdW5jdGlvbiAoYXN0KSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSB0aGlzLl92aXNpdEFsbChhc3QuZXhwcmVzc2lvbnMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRSZWNvcmQocHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5JbnRlcnBvbGF0ZSwgXCJpbnRlcnBvbGF0ZVwiLCBfaW50ZXJwb2xhdGlvbkZuKGFzdC5zdHJpbmdzKSwgYXJncywgYXN0LnN0cmluZ3MsIDApO1xyXG4gICAgfTtcclxuICAgIF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3Jkcy5wcm90b3R5cGUudmlzaXRMaXRlcmFsUHJpbWl0aXZlID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRSZWNvcmQocHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5Db25zdCwgXCJsaXRlcmFsXCIsIGFzdC52YWx1ZSwgW10sIG51bGwsIDApO1xyXG4gICAgfTtcclxuICAgIF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3Jkcy5wcm90b3R5cGUudmlzaXRQcm9wZXJ0eVJlYWQgPSBmdW5jdGlvbiAoYXN0KSB7XHJcbiAgICAgICAgdmFyIHJlY2VpdmVyID0gYXN0LnJlY2VpdmVyLnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRoaXMuX3ZhcmlhYmxlTmFtZXMpICYmIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jb250YWlucyh0aGlzLl92YXJpYWJsZU5hbWVzLCBhc3QubmFtZSkgJiZcclxuICAgICAgICAgICAgYXN0LnJlY2VpdmVyIGluc3RhbmNlb2YgYXN0XzEuSW1wbGljaXRSZWNlaXZlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWRkUmVjb3JkKHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuTG9jYWwsIGFzdC5uYW1lLCBhc3QubmFtZSwgW10sIG51bGwsIHJlY2VpdmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hZGRSZWNvcmQocHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5Qcm9wZXJ0eVJlYWQsIGFzdC5uYW1lLCBhc3QuZ2V0dGVyLCBbXSwgbnVsbCwgcmVjZWl2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBfQ29udmVydEFzdEludG9Qcm90b1JlY29yZHMucHJvdG90eXBlLnZpc2l0UHJvcGVydHlXcml0ZSA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLl92YXJpYWJsZU5hbWVzKSAmJiBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuY29udGFpbnModGhpcy5fdmFyaWFibGVOYW1lcywgYXN0Lm5hbWUpICYmXHJcbiAgICAgICAgICAgIGFzdC5yZWNlaXZlciBpbnN0YW5jZW9mIGFzdF8xLkltcGxpY2l0UmVjZWl2ZXIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKFwiQ2Fubm90IHJlYXNzaWduIGEgdmFyaWFibGUgYmluZGluZyBcIiArIGFzdC5uYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciByZWNlaXZlciA9IGFzdC5yZWNlaXZlci52aXNpdCh0aGlzKTtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gYXN0LnZhbHVlLnZpc2l0KHRoaXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWRkUmVjb3JkKHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuUHJvcGVydHlXcml0ZSwgYXN0Lm5hbWUsIGFzdC5zZXR0ZXIsIFt2YWx1ZV0sIG51bGwsIHJlY2VpdmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgX0NvbnZlcnRBc3RJbnRvUHJvdG9SZWNvcmRzLnByb3RvdHlwZS52aXNpdEtleWVkV3JpdGUgPSBmdW5jdGlvbiAoYXN0KSB7XHJcbiAgICAgICAgdmFyIG9iaiA9IGFzdC5vYmoudmlzaXQodGhpcyk7XHJcbiAgICAgICAgdmFyIGtleSA9IGFzdC5rZXkudmlzaXQodGhpcyk7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gYXN0LnZhbHVlLnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRSZWNvcmQocHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5LZXllZFdyaXRlLCBudWxsLCBudWxsLCBba2V5LCB2YWx1ZV0sIG51bGwsIG9iaik7XHJcbiAgICB9O1xyXG4gICAgX0NvbnZlcnRBc3RJbnRvUHJvdG9SZWNvcmRzLnByb3RvdHlwZS52aXNpdFNhZmVQcm9wZXJ0eVJlYWQgPSBmdW5jdGlvbiAoYXN0KSB7XHJcbiAgICAgICAgdmFyIHJlY2VpdmVyID0gYXN0LnJlY2VpdmVyLnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRSZWNvcmQocHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5TYWZlUHJvcGVydHksIGFzdC5uYW1lLCBhc3QuZ2V0dGVyLCBbXSwgbnVsbCwgcmVjZWl2ZXIpO1xyXG4gICAgfTtcclxuICAgIF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3Jkcy5wcm90b3R5cGUudmlzaXRNZXRob2RDYWxsID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHZhciByZWNlaXZlciA9IGFzdC5yZWNlaXZlci52aXNpdCh0aGlzKTtcclxuICAgICAgICB2YXIgYXJncyA9IHRoaXMuX3Zpc2l0QWxsKGFzdC5hcmdzKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLl92YXJpYWJsZU5hbWVzKSAmJiBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuY29udGFpbnModGhpcy5fdmFyaWFibGVOYW1lcywgYXN0Lm5hbWUpKSB7XHJcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLl9hZGRSZWNvcmQocHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5Mb2NhbCwgYXN0Lm5hbWUsIGFzdC5uYW1lLCBbXSwgbnVsbCwgcmVjZWl2ZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWRkUmVjb3JkKHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuSW52b2tlQ2xvc3VyZSwgXCJjbG9zdXJlXCIsIG51bGwsIGFyZ3MsIG51bGwsIHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWRkUmVjb3JkKHByb3RvX3JlY29yZF8xLlJlY29yZFR5cGUuSW52b2tlTWV0aG9kLCBhc3QubmFtZSwgYXN0LmZuLCBhcmdzLCBudWxsLCByZWNlaXZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3Jkcy5wcm90b3R5cGUudmlzaXRTYWZlTWV0aG9kQ2FsbCA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICB2YXIgcmVjZWl2ZXIgPSBhc3QucmVjZWl2ZXIudmlzaXQodGhpcyk7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSB0aGlzLl92aXNpdEFsbChhc3QuYXJncyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZFJlY29yZChwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLlNhZmVNZXRob2RJbnZva2UsIGFzdC5uYW1lLCBhc3QuZm4sIGFyZ3MsIG51bGwsIHJlY2VpdmVyKTtcclxuICAgIH07XHJcbiAgICBfQ29udmVydEFzdEludG9Qcm90b1JlY29yZHMucHJvdG90eXBlLnZpc2l0RnVuY3Rpb25DYWxsID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHZhciB0YXJnZXQgPSBhc3QudGFyZ2V0LnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIHZhciBhcmdzID0gdGhpcy5fdmlzaXRBbGwoYXN0LmFyZ3MpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRSZWNvcmQocHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5JbnZva2VDbG9zdXJlLCBcImNsb3N1cmVcIiwgbnVsbCwgYXJncywgbnVsbCwgdGFyZ2V0KTtcclxuICAgIH07XHJcbiAgICBfQ29udmVydEFzdEludG9Qcm90b1JlY29yZHMucHJvdG90eXBlLnZpc2l0TGl0ZXJhbEFycmF5ID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHZhciBwcmltaXRpdmVOYW1lID0gXCJhcnJheUZuXCIgKyBhc3QuZXhwcmVzc2lvbnMubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRSZWNvcmQocHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5Db2xsZWN0aW9uTGl0ZXJhbCwgcHJpbWl0aXZlTmFtZSwgX2FycmF5Rm4oYXN0LmV4cHJlc3Npb25zLmxlbmd0aCksIHRoaXMuX3Zpc2l0QWxsKGFzdC5leHByZXNzaW9ucyksIG51bGwsIDApO1xyXG4gICAgfTtcclxuICAgIF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3Jkcy5wcm90b3R5cGUudmlzaXRMaXRlcmFsTWFwID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRSZWNvcmQocHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5Db2xsZWN0aW9uTGl0ZXJhbCwgX21hcFByaW1pdGl2ZU5hbWUoYXN0LmtleXMpLCBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLm1hcEZuKGFzdC5rZXlzKSwgdGhpcy5fdmlzaXRBbGwoYXN0LnZhbHVlcyksIG51bGwsIDApO1xyXG4gICAgfTtcclxuICAgIF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3Jkcy5wcm90b3R5cGUudmlzaXRCaW5hcnkgPSBmdW5jdGlvbiAoYXN0KSB7XHJcbiAgICAgICAgdmFyIGxlZnQgPSBhc3QubGVmdC52aXNpdCh0aGlzKTtcclxuICAgICAgICB2YXIgcmlnaHQgPSBhc3QucmlnaHQudmlzaXQodGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZFJlY29yZChwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLlByaW1pdGl2ZU9wLCBfb3BlcmF0aW9uVG9QcmltaXRpdmVOYW1lKGFzdC5vcGVyYXRpb24pLCBfb3BlcmF0aW9uVG9GdW5jdGlvbihhc3Qub3BlcmF0aW9uKSwgW2xlZnQsIHJpZ2h0XSwgbnVsbCwgMCk7XHJcbiAgICB9O1xyXG4gICAgX0NvbnZlcnRBc3RJbnRvUHJvdG9SZWNvcmRzLnByb3RvdHlwZS52aXNpdFByZWZpeE5vdCA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICB2YXIgZXhwID0gYXN0LmV4cHJlc3Npb24udmlzaXQodGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZFJlY29yZChwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLlByaW1pdGl2ZU9wLCBcIm9wZXJhdGlvbl9uZWdhdGVcIiwgY2hhbmdlX2RldGVjdGlvbl91dGlsXzEuQ2hhbmdlRGV0ZWN0aW9uVXRpbC5vcGVyYXRpb25fbmVnYXRlLCBbZXhwXSwgbnVsbCwgMCk7XHJcbiAgICB9O1xyXG4gICAgX0NvbnZlcnRBc3RJbnRvUHJvdG9SZWNvcmRzLnByb3RvdHlwZS52aXNpdENvbmRpdGlvbmFsID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHZhciBjID0gYXN0LmNvbmRpdGlvbi52aXNpdCh0aGlzKTtcclxuICAgICAgICB2YXIgdCA9IGFzdC50cnVlRXhwLnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIHZhciBmID0gYXN0LmZhbHNlRXhwLnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRSZWNvcmQocHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5QcmltaXRpdmVPcCwgXCJjb25kXCIsIGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwuY29uZCwgW2MsIHQsIGZdLCBudWxsLCAwKTtcclxuICAgIH07XHJcbiAgICBfQ29udmVydEFzdEludG9Qcm90b1JlY29yZHMucHJvdG90eXBlLnZpc2l0UGlwZSA9IGZ1bmN0aW9uIChhc3QpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSBhc3QuZXhwLnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIHZhciBhcmdzID0gdGhpcy5fdmlzaXRBbGwoYXN0LmFyZ3MpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRSZWNvcmQocHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5QaXBlLCBhc3QubmFtZSwgYXN0Lm5hbWUsIGFyZ3MsIG51bGwsIHZhbHVlKTtcclxuICAgIH07XHJcbiAgICBfQ29udmVydEFzdEludG9Qcm90b1JlY29yZHMucHJvdG90eXBlLnZpc2l0S2V5ZWRSZWFkID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHZhciBvYmogPSBhc3Qub2JqLnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIHZhciBrZXkgPSBhc3Qua2V5LnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRSZWNvcmQocHJvdG9fcmVjb3JkXzEuUmVjb3JkVHlwZS5LZXllZFJlYWQsIFwia2V5ZWRBY2Nlc3NcIiwgY2hhbmdlX2RldGVjdGlvbl91dGlsXzEuQ2hhbmdlRGV0ZWN0aW9uVXRpbC5rZXllZEFjY2VzcywgW2tleV0sIG51bGwsIG9iaik7XHJcbiAgICB9O1xyXG4gICAgX0NvbnZlcnRBc3RJbnRvUHJvdG9SZWNvcmRzLnByb3RvdHlwZS52aXNpdENoYWluID0gZnVuY3Rpb24gKGFzdCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBhc3QuZXhwcmVzc2lvbnMubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnZpc2l0KF90aGlzKTsgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZFJlY29yZChwcm90b19yZWNvcmRfMS5SZWNvcmRUeXBlLkNoYWluLCBcImNoYWluXCIsIG51bGwsIGFyZ3MsIG51bGwsIDApO1xyXG4gICAgfTtcclxuICAgIF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3Jkcy5wcm90b3R5cGUudmlzaXRJZiA9IGZ1bmN0aW9uIChhc3QpIHsgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKCdOb3Qgc3VwcG9ydGVkJyk7IH07XHJcbiAgICBfQ29udmVydEFzdEludG9Qcm90b1JlY29yZHMucHJvdG90eXBlLl92aXNpdEFsbCA9IGZ1bmN0aW9uIChhc3RzKSB7XHJcbiAgICAgICAgdmFyIHJlcyA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jcmVhdGVGaXhlZFNpemUoYXN0cy5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXN0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICByZXNbaV0gPSBhc3RzW2ldLnZpc2l0KHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxuICAgIF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3Jkcy5wcm90b3R5cGUuX2FkZFJlY29yZCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBmdW5jT3JWYWx1ZSwgYXJncywgZml4ZWRBcmdzLCBjb250ZXh0KSB7XHJcbiAgICAgICAgdmFyIHNlbGZJbmRleCA9IHRoaXMuX3JlY29yZHMubGVuZ3RoICsgMTtcclxuICAgICAgICBpZiAoY29udGV4dCBpbnN0YW5jZW9mIGRpcmVjdGl2ZV9yZWNvcmRfMS5EaXJlY3RpdmVJbmRleCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yZWNvcmRzLnB1c2gobmV3IHByb3RvX3JlY29yZF8xLlByb3RvUmVjb3JkKHR5cGUsIG5hbWUsIGZ1bmNPclZhbHVlLCBhcmdzLCBmaXhlZEFyZ3MsIC0xLCBjb250ZXh0LCBzZWxmSW5kZXgsIHRoaXMuX2JpbmRpbmdSZWNvcmQsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCB0aGlzLl9iaW5kaW5nSW5kZXgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlY29yZHMucHVzaChuZXcgcHJvdG9fcmVjb3JkXzEuUHJvdG9SZWNvcmQodHlwZSwgbmFtZSwgZnVuY09yVmFsdWUsIGFyZ3MsIGZpeGVkQXJncywgY29udGV4dCwgbnVsbCwgc2VsZkluZGV4LCB0aGlzLl9iaW5kaW5nUmVjb3JkLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgdGhpcy5fYmluZGluZ0luZGV4KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZWxmSW5kZXg7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9Db252ZXJ0QXN0SW50b1Byb3RvUmVjb3JkcztcclxufSkoKTtcclxuZnVuY3Rpb24gX2FycmF5Rm4obGVuZ3RoKSB7XHJcbiAgICBzd2l0Y2ggKGxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwuYXJyYXlGbjA7XHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlX2RldGVjdGlvbl91dGlsXzEuQ2hhbmdlRGV0ZWN0aW9uVXRpbC5hcnJheUZuMTtcclxuICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLmFycmF5Rm4yO1xyXG4gICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwuYXJyYXlGbjM7XHJcbiAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlX2RldGVjdGlvbl91dGlsXzEuQ2hhbmdlRGV0ZWN0aW9uVXRpbC5hcnJheUZuNDtcclxuICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLmFycmF5Rm41O1xyXG4gICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwuYXJyYXlGbjY7XHJcbiAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlX2RldGVjdGlvbl91dGlsXzEuQ2hhbmdlRGV0ZWN0aW9uVXRpbC5hcnJheUZuNztcclxuICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLmFycmF5Rm44O1xyXG4gICAgICAgIGNhc2UgOTpcclxuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwuYXJyYXlGbjk7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKFwiRG9lcyBub3Qgc3VwcG9ydCBsaXRlcmFsIG1hcHMgd2l0aCBtb3JlIHRoYW4gOSBlbGVtZW50c1wiKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBfbWFwUHJpbWl0aXZlTmFtZShrZXlzKSB7XHJcbiAgICB2YXIgc3RyaW5naWZpZWRLZXlzID0ga2V5cy5tYXAoZnVuY3Rpb24gKGspIHsgcmV0dXJuIGxhbmdfMS5pc1N0cmluZyhrKSA/IFwiXFxcIlwiICsgayArIFwiXFxcIlwiIDogXCJcIiArIGs7IH0pLmpvaW4oJywgJyk7XHJcbiAgICByZXR1cm4gXCJtYXBGbihbXCIgKyBzdHJpbmdpZmllZEtleXMgKyBcIl0pXCI7XHJcbn1cclxuZnVuY3Rpb24gX29wZXJhdGlvblRvUHJpbWl0aXZlTmFtZShvcGVyYXRpb24pIHtcclxuICAgIHN3aXRjaCAob3BlcmF0aW9uKSB7XHJcbiAgICAgICAgY2FzZSAnKyc6XHJcbiAgICAgICAgICAgIHJldHVybiBcIm9wZXJhdGlvbl9hZGRcIjtcclxuICAgICAgICBjYXNlICctJzpcclxuICAgICAgICAgICAgcmV0dXJuIFwib3BlcmF0aW9uX3N1YnRyYWN0XCI7XHJcbiAgICAgICAgY2FzZSAnKic6XHJcbiAgICAgICAgICAgIHJldHVybiBcIm9wZXJhdGlvbl9tdWx0aXBseVwiO1xyXG4gICAgICAgIGNhc2UgJy8nOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJvcGVyYXRpb25fZGl2aWRlXCI7XHJcbiAgICAgICAgY2FzZSAnJSc6XHJcbiAgICAgICAgICAgIHJldHVybiBcIm9wZXJhdGlvbl9yZW1haW5kZXJcIjtcclxuICAgICAgICBjYXNlICc9PSc6XHJcbiAgICAgICAgICAgIHJldHVybiBcIm9wZXJhdGlvbl9lcXVhbHNcIjtcclxuICAgICAgICBjYXNlICchPSc6XHJcbiAgICAgICAgICAgIHJldHVybiBcIm9wZXJhdGlvbl9ub3RfZXF1YWxzXCI7XHJcbiAgICAgICAgY2FzZSAnPT09JzpcclxuICAgICAgICAgICAgcmV0dXJuIFwib3BlcmF0aW9uX2lkZW50aWNhbFwiO1xyXG4gICAgICAgIGNhc2UgJyE9PSc6XHJcbiAgICAgICAgICAgIHJldHVybiBcIm9wZXJhdGlvbl9ub3RfaWRlbnRpY2FsXCI7XHJcbiAgICAgICAgY2FzZSAnPCc6XHJcbiAgICAgICAgICAgIHJldHVybiBcIm9wZXJhdGlvbl9sZXNzX3RoZW5cIjtcclxuICAgICAgICBjYXNlICc+JzpcclxuICAgICAgICAgICAgcmV0dXJuIFwib3BlcmF0aW9uX2dyZWF0ZXJfdGhlblwiO1xyXG4gICAgICAgIGNhc2UgJzw9JzpcclxuICAgICAgICAgICAgcmV0dXJuIFwib3BlcmF0aW9uX2xlc3Nfb3JfZXF1YWxzX3RoZW5cIjtcclxuICAgICAgICBjYXNlICc+PSc6XHJcbiAgICAgICAgICAgIHJldHVybiBcIm9wZXJhdGlvbl9ncmVhdGVyX29yX2VxdWFsc190aGVuXCI7XHJcbiAgICAgICAgY2FzZSAnJiYnOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJvcGVyYXRpb25fbG9naWNhbF9hbmRcIjtcclxuICAgICAgICBjYXNlICd8fCc6XHJcbiAgICAgICAgICAgIHJldHVybiBcIm9wZXJhdGlvbl9sb2dpY2FsX29yXCI7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKFwiVW5zdXBwb3J0ZWQgb3BlcmF0aW9uIFwiICsgb3BlcmF0aW9uKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBfb3BlcmF0aW9uVG9GdW5jdGlvbihvcGVyYXRpb24pIHtcclxuICAgIHN3aXRjaCAob3BlcmF0aW9uKSB7XHJcbiAgICAgICAgY2FzZSAnKyc6XHJcbiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLm9wZXJhdGlvbl9hZGQ7XHJcbiAgICAgICAgY2FzZSAnLSc6XHJcbiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLm9wZXJhdGlvbl9zdWJ0cmFjdDtcclxuICAgICAgICBjYXNlICcqJzpcclxuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwub3BlcmF0aW9uX211bHRpcGx5O1xyXG4gICAgICAgIGNhc2UgJy8nOlxyXG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlX2RldGVjdGlvbl91dGlsXzEuQ2hhbmdlRGV0ZWN0aW9uVXRpbC5vcGVyYXRpb25fZGl2aWRlO1xyXG4gICAgICAgIGNhc2UgJyUnOlxyXG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlX2RldGVjdGlvbl91dGlsXzEuQ2hhbmdlRGV0ZWN0aW9uVXRpbC5vcGVyYXRpb25fcmVtYWluZGVyO1xyXG4gICAgICAgIGNhc2UgJz09JzpcclxuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwub3BlcmF0aW9uX2VxdWFscztcclxuICAgICAgICBjYXNlICchPSc6XHJcbiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLm9wZXJhdGlvbl9ub3RfZXF1YWxzO1xyXG4gICAgICAgIGNhc2UgJz09PSc6XHJcbiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLm9wZXJhdGlvbl9pZGVudGljYWw7XHJcbiAgICAgICAgY2FzZSAnIT09JzpcclxuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwub3BlcmF0aW9uX25vdF9pZGVudGljYWw7XHJcbiAgICAgICAgY2FzZSAnPCc6XHJcbiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLm9wZXJhdGlvbl9sZXNzX3RoZW47XHJcbiAgICAgICAgY2FzZSAnPic6XHJcbiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLm9wZXJhdGlvbl9ncmVhdGVyX3RoZW47XHJcbiAgICAgICAgY2FzZSAnPD0nOlxyXG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlX2RldGVjdGlvbl91dGlsXzEuQ2hhbmdlRGV0ZWN0aW9uVXRpbC5vcGVyYXRpb25fbGVzc19vcl9lcXVhbHNfdGhlbjtcclxuICAgICAgICBjYXNlICc+PSc6XHJcbiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VfZGV0ZWN0aW9uX3V0aWxfMS5DaGFuZ2VEZXRlY3Rpb25VdGlsLm9wZXJhdGlvbl9ncmVhdGVyX29yX2VxdWFsc190aGVuO1xyXG4gICAgICAgIGNhc2UgJyYmJzpcclxuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwub3BlcmF0aW9uX2xvZ2ljYWxfYW5kO1xyXG4gICAgICAgIGNhc2UgJ3x8JzpcclxuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZV9kZXRlY3Rpb25fdXRpbF8xLkNoYW5nZURldGVjdGlvblV0aWwub3BlcmF0aW9uX2xvZ2ljYWxfb3I7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKFwiVW5zdXBwb3J0ZWQgb3BlcmF0aW9uIFwiICsgb3BlcmF0aW9uKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzKHYpIHtcclxuICAgIHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHYpID8gXCJcIiArIHYgOiAnJztcclxufVxyXG5mdW5jdGlvbiBfaW50ZXJwb2xhdGlvbkZuKHN0cmluZ3MpIHtcclxuICAgIHZhciBsZW5ndGggPSBzdHJpbmdzLmxlbmd0aDtcclxuICAgIHZhciBjMCA9IGxlbmd0aCA+IDAgPyBzdHJpbmdzWzBdIDogbnVsbDtcclxuICAgIHZhciBjMSA9IGxlbmd0aCA+IDEgPyBzdHJpbmdzWzFdIDogbnVsbDtcclxuICAgIHZhciBjMiA9IGxlbmd0aCA+IDIgPyBzdHJpbmdzWzJdIDogbnVsbDtcclxuICAgIHZhciBjMyA9IGxlbmd0aCA+IDMgPyBzdHJpbmdzWzNdIDogbnVsbDtcclxuICAgIHZhciBjNCA9IGxlbmd0aCA+IDQgPyBzdHJpbmdzWzRdIDogbnVsbDtcclxuICAgIHZhciBjNSA9IGxlbmd0aCA+IDUgPyBzdHJpbmdzWzVdIDogbnVsbDtcclxuICAgIHZhciBjNiA9IGxlbmd0aCA+IDYgPyBzdHJpbmdzWzZdIDogbnVsbDtcclxuICAgIHZhciBjNyA9IGxlbmd0aCA+IDcgPyBzdHJpbmdzWzddIDogbnVsbDtcclxuICAgIHZhciBjOCA9IGxlbmd0aCA+IDggPyBzdHJpbmdzWzhdIDogbnVsbDtcclxuICAgIHZhciBjOSA9IGxlbmd0aCA+IDkgPyBzdHJpbmdzWzldIDogbnVsbDtcclxuICAgIHN3aXRjaCAobGVuZ3RoIC0gMSkge1xyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMSkgeyByZXR1cm4gYzAgKyBzKGExKSArIGMxOyB9O1xyXG4gICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMSwgYTIpIHsgcmV0dXJuIGMwICsgcyhhMSkgKyBjMSArIHMoYTIpICsgYzI7IH07XHJcbiAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGExLCBhMiwgYTMpIHsgcmV0dXJuIGMwICsgcyhhMSkgKyBjMSArIHMoYTIpICsgYzIgKyBzKGEzKSArIGMzOyB9O1xyXG4gICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMSwgYTIsIGEzLCBhNCkgeyByZXR1cm4gYzAgKyBzKGExKSArIGMxICsgcyhhMikgKyBjMiArIHMoYTMpICsgYzMgKyBzKGE0KSArIGM0OyB9O1xyXG4gICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMSwgYTIsIGEzLCBhNCwgYTUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjMCArIHMoYTEpICsgYzEgKyBzKGEyKSArIGMyICsgcyhhMykgKyBjMyArIHMoYTQpICsgYzQgKyBzKGE1KSArIGM1O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYzAgKyBzKGExKSArIGMxICsgcyhhMikgKyBjMiArIHMoYTMpICsgYzMgKyBzKGE0KSArIGM0ICsgcyhhNSkgKyBjNSArIHMoYTYpICsgYzY7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7IHJldHVybiBjMCArIHMoYTEpICsgYzEgKyBzKGEyKSArIGMyICsgcyhhMykgKyBjMyArIHMoYTQpICtcclxuICAgICAgICAgICAgICAgIGM0ICsgcyhhNSkgKyBjNSArIHMoYTYpICsgYzYgKyBzKGE3KSArIGM3OyB9O1xyXG4gICAgICAgIGNhc2UgODpcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHsgcmV0dXJuIGMwICsgcyhhMSkgKyBjMSArIHMoYTIpICsgYzIgKyBzKGEzKSArIGMzICsgcyhhNCkgK1xyXG4gICAgICAgICAgICAgICAgYzQgKyBzKGE1KSArIGM1ICsgcyhhNikgKyBjNiArIHMoYTcpICsgYzcgKyBzKGE4KSArXHJcbiAgICAgICAgICAgICAgICBjODsgfTtcclxuICAgICAgICBjYXNlIDk6XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSkgeyByZXR1cm4gYzAgKyBzKGExKSArIGMxICsgcyhhMikgKyBjMiArIHMoYTMpICsgYzMgK1xyXG4gICAgICAgICAgICAgICAgcyhhNCkgKyBjNCArIHMoYTUpICsgYzUgKyBzKGE2KSArIGM2ICsgcyhhNykgK1xyXG4gICAgICAgICAgICAgICAgYzcgKyBzKGE4KSArIGM4ICsgcyhhOSkgKyBjOTsgfTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oXCJEb2VzIG5vdCBzdXBwb3J0IG1vcmUgdGhhbiA5IGV4cHJlc3Npb25zXCIpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3RvX2NoYW5nZV9kZXRlY3Rvci5qcy5tYXAiLCIndXNlIHN0cmljdCc7KGZ1bmN0aW9uIChSZWNvcmRUeXBlKSB7XHJcbiAgICBSZWNvcmRUeXBlW1JlY29yZFR5cGVbXCJTZWxmXCJdID0gMF0gPSBcIlNlbGZcIjtcclxuICAgIFJlY29yZFR5cGVbUmVjb3JkVHlwZVtcIkNvbnN0XCJdID0gMV0gPSBcIkNvbnN0XCI7XHJcbiAgICBSZWNvcmRUeXBlW1JlY29yZFR5cGVbXCJQcmltaXRpdmVPcFwiXSA9IDJdID0gXCJQcmltaXRpdmVPcFwiO1xyXG4gICAgUmVjb3JkVHlwZVtSZWNvcmRUeXBlW1wiUHJvcGVydHlSZWFkXCJdID0gM10gPSBcIlByb3BlcnR5UmVhZFwiO1xyXG4gICAgUmVjb3JkVHlwZVtSZWNvcmRUeXBlW1wiUHJvcGVydHlXcml0ZVwiXSA9IDRdID0gXCJQcm9wZXJ0eVdyaXRlXCI7XHJcbiAgICBSZWNvcmRUeXBlW1JlY29yZFR5cGVbXCJMb2NhbFwiXSA9IDVdID0gXCJMb2NhbFwiO1xyXG4gICAgUmVjb3JkVHlwZVtSZWNvcmRUeXBlW1wiSW52b2tlTWV0aG9kXCJdID0gNl0gPSBcIkludm9rZU1ldGhvZFwiO1xyXG4gICAgUmVjb3JkVHlwZVtSZWNvcmRUeXBlW1wiSW52b2tlQ2xvc3VyZVwiXSA9IDddID0gXCJJbnZva2VDbG9zdXJlXCI7XHJcbiAgICBSZWNvcmRUeXBlW1JlY29yZFR5cGVbXCJLZXllZFJlYWRcIl0gPSA4XSA9IFwiS2V5ZWRSZWFkXCI7XHJcbiAgICBSZWNvcmRUeXBlW1JlY29yZFR5cGVbXCJLZXllZFdyaXRlXCJdID0gOV0gPSBcIktleWVkV3JpdGVcIjtcclxuICAgIFJlY29yZFR5cGVbUmVjb3JkVHlwZVtcIlBpcGVcIl0gPSAxMF0gPSBcIlBpcGVcIjtcclxuICAgIFJlY29yZFR5cGVbUmVjb3JkVHlwZVtcIkludGVycG9sYXRlXCJdID0gMTFdID0gXCJJbnRlcnBvbGF0ZVwiO1xyXG4gICAgUmVjb3JkVHlwZVtSZWNvcmRUeXBlW1wiU2FmZVByb3BlcnR5XCJdID0gMTJdID0gXCJTYWZlUHJvcGVydHlcIjtcclxuICAgIFJlY29yZFR5cGVbUmVjb3JkVHlwZVtcIkNvbGxlY3Rpb25MaXRlcmFsXCJdID0gMTNdID0gXCJDb2xsZWN0aW9uTGl0ZXJhbFwiO1xyXG4gICAgUmVjb3JkVHlwZVtSZWNvcmRUeXBlW1wiU2FmZU1ldGhvZEludm9rZVwiXSA9IDE0XSA9IFwiU2FmZU1ldGhvZEludm9rZVwiO1xyXG4gICAgUmVjb3JkVHlwZVtSZWNvcmRUeXBlW1wiRGlyZWN0aXZlTGlmZWN5Y2xlXCJdID0gMTVdID0gXCJEaXJlY3RpdmVMaWZlY3ljbGVcIjtcclxuICAgIFJlY29yZFR5cGVbUmVjb3JkVHlwZVtcIkNoYWluXCJdID0gMTZdID0gXCJDaGFpblwiO1xyXG59KShleHBvcnRzLlJlY29yZFR5cGUgfHwgKGV4cG9ydHMuUmVjb3JkVHlwZSA9IHt9KSk7XHJcbnZhciBSZWNvcmRUeXBlID0gZXhwb3J0cy5SZWNvcmRUeXBlO1xyXG52YXIgUHJvdG9SZWNvcmQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUHJvdG9SZWNvcmQobW9kZSwgbmFtZSwgZnVuY09yVmFsdWUsIGFyZ3MsIGZpeGVkQXJncywgY29udGV4dEluZGV4LCBkaXJlY3RpdmVJbmRleCwgc2VsZkluZGV4LCBiaW5kaW5nUmVjb3JkLCBsYXN0SW5CaW5kaW5nLCBsYXN0SW5EaXJlY3RpdmUsIGFyZ3VtZW50VG9QdXJlRnVuY3Rpb24sIHJlZmVyZW5jZWRCeVNlbGYsIHByb3BlcnR5QmluZGluZ0luZGV4KSB7XHJcbiAgICAgICAgdGhpcy5tb2RlID0gbW9kZTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuZnVuY09yVmFsdWUgPSBmdW5jT3JWYWx1ZTtcclxuICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xyXG4gICAgICAgIHRoaXMuZml4ZWRBcmdzID0gZml4ZWRBcmdzO1xyXG4gICAgICAgIHRoaXMuY29udGV4dEluZGV4ID0gY29udGV4dEluZGV4O1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aXZlSW5kZXggPSBkaXJlY3RpdmVJbmRleDtcclxuICAgICAgICB0aGlzLnNlbGZJbmRleCA9IHNlbGZJbmRleDtcclxuICAgICAgICB0aGlzLmJpbmRpbmdSZWNvcmQgPSBiaW5kaW5nUmVjb3JkO1xyXG4gICAgICAgIHRoaXMubGFzdEluQmluZGluZyA9IGxhc3RJbkJpbmRpbmc7XHJcbiAgICAgICAgdGhpcy5sYXN0SW5EaXJlY3RpdmUgPSBsYXN0SW5EaXJlY3RpdmU7XHJcbiAgICAgICAgdGhpcy5hcmd1bWVudFRvUHVyZUZ1bmN0aW9uID0gYXJndW1lbnRUb1B1cmVGdW5jdGlvbjtcclxuICAgICAgICB0aGlzLnJlZmVyZW5jZWRCeVNlbGYgPSByZWZlcmVuY2VkQnlTZWxmO1xyXG4gICAgICAgIHRoaXMucHJvcGVydHlCaW5kaW5nSW5kZXggPSBwcm9wZXJ0eUJpbmRpbmdJbmRleDtcclxuICAgIH1cclxuICAgIFByb3RvUmVjb3JkLnByb3RvdHlwZS5pc1B1cmVGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tb2RlID09PSBSZWNvcmRUeXBlLkludGVycG9sYXRlIHx8IHRoaXMubW9kZSA9PT0gUmVjb3JkVHlwZS5Db2xsZWN0aW9uTGl0ZXJhbDtcclxuICAgIH07XHJcbiAgICBQcm90b1JlY29yZC5wcm90b3R5cGUuaXNVc2VkQnlPdGhlclJlY29yZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICF0aGlzLmxhc3RJbkJpbmRpbmcgfHwgdGhpcy5yZWZlcmVuY2VkQnlTZWxmOyB9O1xyXG4gICAgUHJvdG9SZWNvcmQucHJvdG90eXBlLnNob3VsZEJlQ2hlY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcmd1bWVudFRvUHVyZUZ1bmN0aW9uIHx8IHRoaXMubGFzdEluQmluZGluZyB8fCB0aGlzLmlzUHVyZUZ1bmN0aW9uKCkgfHxcclxuICAgICAgICAgICAgdGhpcy5pc1BpcGVSZWNvcmQoKTtcclxuICAgIH07XHJcbiAgICBQcm90b1JlY29yZC5wcm90b3R5cGUuaXNQaXBlUmVjb3JkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5tb2RlID09PSBSZWNvcmRUeXBlLlBpcGU7IH07XHJcbiAgICBQcm90b1JlY29yZC5wcm90b3R5cGUuaXNMaWZlQ3ljbGVSZWNvcmQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm1vZGUgPT09IFJlY29yZFR5cGUuRGlyZWN0aXZlTGlmZWN5Y2xlOyB9O1xyXG4gICAgcmV0dXJuIFByb3RvUmVjb3JkO1xyXG59KSgpO1xyXG5leHBvcnRzLlByb3RvUmVjb3JkID0gUHJvdG9SZWNvcmQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3RvX3JlY29yZC5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGFwcF9yb290X3VybF8xID0gcmVxdWlyZShcImFuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL2FwcF9yb290X3VybFwiKTtcclxudmFyIGRvbV9hZGFwdGVyXzEgPSByZXF1aXJlKFwiYW5ndWxhcjIvc3JjL2NvcmUvZG9tL2RvbV9hZGFwdGVyXCIpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoXCJhbmd1bGFyMi9zcmMvY29yZS9kaVwiKTtcclxuLyoqXHJcbiAqIEV4dGVuc2lvbiBvZiB7QGxpbmsgQXBwUm9vdFVybH0gdGhhdCB1c2VzIGEgRE9NIGFuY2hvciB0YWcgdG8gc2V0IHRoZSByb290IHVybCB0b1xyXG4gKiB0aGUgY3VycmVudCBwYWdlJ3MgdXJsLlxyXG4gKi9cclxudmFyIEFuY2hvckJhc2VkQXBwUm9vdFVybCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQW5jaG9yQmFzZWRBcHBSb290VXJsLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQW5jaG9yQmFzZWRBcHBSb290VXJsKCkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIFwiXCIpO1xyXG4gICAgICAgIC8vIGNvbXB1dGUgdGhlIHJvb3QgdXJsIHRvIHBhc3MgdG8gQXBwUm9vdFVybFxyXG4gICAgICAgIHZhciBhID0gZG9tX2FkYXB0ZXJfMS5ET00uY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgIGRvbV9hZGFwdGVyXzEuRE9NLnJlc29sdmVBbmRTZXRIcmVmKGEsICcuLycsIG51bGwpO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBkb21fYWRhcHRlcl8xLkRPTS5nZXRIcmVmKGEpO1xyXG4gICAgfVxyXG4gICAgQW5jaG9yQmFzZWRBcHBSb290VXJsID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgZGlfMS5JbmplY3RhYmxlKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXHJcbiAgICBdLCBBbmNob3JCYXNlZEFwcFJvb3RVcmwpO1xyXG4gICAgcmV0dXJuIEFuY2hvckJhc2VkQXBwUm9vdFVybDtcclxufSkoYXBwX3Jvb3RfdXJsXzEuQXBwUm9vdFVybCk7XHJcbmV4cG9ydHMuQW5jaG9yQmFzZWRBcHBSb290VXJsID0gQW5jaG9yQmFzZWRBcHBSb290VXJsO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmNob3JfYmFzZWRfYXBwX3Jvb3RfdXJsLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbi8qKlxyXG4gKiBTcGVjaWZpZXMgYXBwIHJvb3QgdXJsIGZvciB0aGUgYXBwbGljYXRpb24uXHJcbiAqXHJcbiAqIFVzZWQgYnkgdGhlIHtAbGluayBDb21waWxlcn0gd2hlbiByZXNvbHZpbmcgSFRNTCBhbmQgQ1NTIHRlbXBsYXRlIFVSTHMuXHJcbiAqXHJcbiAqIFRoaXMgaW50ZXJmYWNlIGNhbiBiZSBvdmVycmlkZGVuIGJ5IHRoZSBhcHBsaWNhdGlvbiBkZXZlbG9wZXIgdG8gY3JlYXRlIGN1c3RvbSBiZWhhdmlvci5cclxuICpcclxuICogU2VlIHtAbGluayBDb21waWxlcn1cclxuICovXHJcbnZhciBBcHBSb290VXJsID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFwcFJvb3RVcmwodmFsdWUpIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBBcHBSb290VXJsID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgZGlfMS5JbmplY3RhYmxlKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW1N0cmluZ10pXHJcbiAgICBdLCBBcHBSb290VXJsKTtcclxuICAgIHJldHVybiBBcHBSb290VXJsO1xyXG59KSgpO1xyXG5leHBvcnRzLkFwcFJvb3RVcmwgPSBBcHBSb290VXJsO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHBfcm9vdF91cmwuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIHJlZmxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL3JlZmxlY3Rpb24vcmVmbGVjdGlvbicpO1xyXG52YXIgY2hhbmdlX2RldGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9jaGFuZ2VfZGV0ZWN0aW9uJyk7XHJcbnZhciB0ZW1wbGF0ZV9hc3RfMSA9IHJlcXVpcmUoJy4vdGVtcGxhdGVfYXN0Jyk7XHJcbnZhciBpbnRlcmZhY2VzXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvaW50ZXJmYWNlcycpO1xyXG5mdW5jdGlvbiBjcmVhdGVDaGFuZ2VEZXRlY3RvckRlZmluaXRpb25zKGNvbXBvbmVudFR5cGUsIGNvbXBvbmVudFN0cmF0ZWd5LCBnZW5Db25maWcsIHBhcnNlZFRlbXBsYXRlKSB7XHJcbiAgICB2YXIgcHZWaXNpdG9ycyA9IFtdO1xyXG4gICAgdmFyIHZpc2l0b3IgPSBuZXcgUHJvdG9WaWV3VmlzaXRvcihudWxsLCBwdlZpc2l0b3JzLCBjb21wb25lbnRTdHJhdGVneSk7XHJcbiAgICB0ZW1wbGF0ZV9hc3RfMS50ZW1wbGF0ZVZpc2l0QWxsKHZpc2l0b3IsIHBhcnNlZFRlbXBsYXRlKTtcclxuICAgIHJldHVybiBjcmVhdGVDaGFuZ2VEZWZpbml0aW9ucyhwdlZpc2l0b3JzLCBjb21wb25lbnRUeXBlLCBnZW5Db25maWcpO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlQ2hhbmdlRGV0ZWN0b3JEZWZpbml0aW9ucyA9IGNyZWF0ZUNoYW5nZURldGVjdG9yRGVmaW5pdGlvbnM7XHJcbnZhciBQcm90b1ZpZXdWaXNpdG9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFByb3RvVmlld1Zpc2l0b3IocGFyZW50LCBhbGxWaXNpdG9ycywgc3RyYXRlZ3kpIHtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICAgICAgICB0aGlzLmFsbFZpc2l0b3JzID0gYWxsVmlzaXRvcnM7XHJcbiAgICAgICAgdGhpcy5zdHJhdGVneSA9IHN0cmF0ZWd5O1xyXG4gICAgICAgIHRoaXMuYm91bmRUZXh0Q291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuYm91bmRFbGVtZW50Q291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMudmFyaWFibGVOYW1lcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYmluZGluZ1JlY29yZHMgPSBbXTtcclxuICAgICAgICB0aGlzLmV2ZW50UmVjb3JkcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aXZlUmVjb3JkcyA9IFtdO1xyXG4gICAgICAgIHRoaXMudmlld0luZGV4ID0gYWxsVmlzaXRvcnMubGVuZ3RoO1xyXG4gICAgICAgIGFsbFZpc2l0b3JzLnB1c2godGhpcyk7XHJcbiAgICB9XHJcbiAgICBQcm90b1ZpZXdWaXNpdG9yLnByb3RvdHlwZS52aXNpdEVtYmVkZGVkVGVtcGxhdGUgPSBmdW5jdGlvbiAoYXN0LCBjb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy5ib3VuZEVsZW1lbnRDb3VudCsrO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXN0LmRpcmVjdGl2ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYXN0LmRpcmVjdGl2ZXNbaV0udmlzaXQodGhpcywgaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjaGlsZFZpc2l0b3IgPSBuZXcgUHJvdG9WaWV3VmlzaXRvcih0aGlzLCB0aGlzLmFsbFZpc2l0b3JzLCBjaGFuZ2VfZGV0ZWN0aW9uXzEuQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGVmYXVsdCk7XHJcbiAgICAgICAgLy8gQXR0ZW50aW9uOiB2YXJpYWJsZXMgcHJlc2VudCBvbiBhbiBlbWJlZGRlZCB0ZW1wbGF0ZSBjb3VudCB0b3dhcmRzXHJcbiAgICAgICAgLy8gdGhlIGVtYmVkZGVkIHRlbXBsYXRlIGFuZCBub3QgdGhlIHRlbXBsYXRlIGFuY2hvciFcclxuICAgICAgICB0ZW1wbGF0ZV9hc3RfMS50ZW1wbGF0ZVZpc2l0QWxsKGNoaWxkVmlzaXRvciwgYXN0LnZhcnMpO1xyXG4gICAgICAgIHRlbXBsYXRlX2FzdF8xLnRlbXBsYXRlVmlzaXRBbGwoY2hpbGRWaXNpdG9yLCBhc3QuY2hpbGRyZW4pO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFByb3RvVmlld1Zpc2l0b3IucHJvdG90eXBlLnZpc2l0RWxlbWVudCA9IGZ1bmN0aW9uIChhc3QsIGNvbnRleHQpIHtcclxuICAgICAgICBpZiAoYXN0LmlzQm91bmQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmJvdW5kRWxlbWVudENvdW50Kys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRlbXBsYXRlX2FzdF8xLnRlbXBsYXRlVmlzaXRBbGwodGhpcywgYXN0LmlucHV0cywgbnVsbCk7XHJcbiAgICAgICAgdGVtcGxhdGVfYXN0XzEudGVtcGxhdGVWaXNpdEFsbCh0aGlzLCBhc3Qub3V0cHV0cyk7XHJcbiAgICAgICAgdGVtcGxhdGVfYXN0XzEudGVtcGxhdGVWaXNpdEFsbCh0aGlzLCBhc3QuZXhwb3J0QXNWYXJzKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFzdC5kaXJlY3RpdmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGFzdC5kaXJlY3RpdmVzW2ldLnZpc2l0KHRoaXMsIGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0ZW1wbGF0ZV9hc3RfMS50ZW1wbGF0ZVZpc2l0QWxsKHRoaXMsIGFzdC5jaGlsZHJlbik7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgUHJvdG9WaWV3VmlzaXRvci5wcm90b3R5cGUudmlzaXROZ0NvbnRlbnQgPSBmdW5jdGlvbiAoYXN0LCBjb250ZXh0KSB7IHJldHVybiBudWxsOyB9O1xyXG4gICAgUHJvdG9WaWV3VmlzaXRvci5wcm90b3R5cGUudmlzaXRWYXJpYWJsZSA9IGZ1bmN0aW9uIChhc3QsIGNvbnRleHQpIHtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlTmFtZXMucHVzaChhc3QubmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgUHJvdG9WaWV3VmlzaXRvci5wcm90b3R5cGUudmlzaXRFdmVudCA9IGZ1bmN0aW9uIChhc3QsIGRpcmVjdGl2ZVJlY29yZCkge1xyXG4gICAgICAgIHZhciBiaW5kaW5nUmVjb3JkID0gbGFuZ18xLmlzUHJlc2VudChkaXJlY3RpdmVSZWNvcmQpID9cclxuICAgICAgICAgICAgY2hhbmdlX2RldGVjdGlvbl8xLkJpbmRpbmdSZWNvcmQuY3JlYXRlRm9ySG9zdEV2ZW50KGFzdC5oYW5kbGVyLCBhc3QuZnVsbE5hbWUsIGRpcmVjdGl2ZVJlY29yZCkgOlxyXG4gICAgICAgICAgICBjaGFuZ2VfZGV0ZWN0aW9uXzEuQmluZGluZ1JlY29yZC5jcmVhdGVGb3JFdmVudChhc3QuaGFuZGxlciwgYXN0LmZ1bGxOYW1lLCB0aGlzLmJvdW5kRWxlbWVudENvdW50IC0gMSk7XHJcbiAgICAgICAgdGhpcy5ldmVudFJlY29yZHMucHVzaChiaW5kaW5nUmVjb3JkKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBQcm90b1ZpZXdWaXNpdG9yLnByb3RvdHlwZS52aXNpdEVsZW1lbnRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChhc3QsIGRpcmVjdGl2ZVJlY29yZCkge1xyXG4gICAgICAgIHZhciBib3VuZEVsZW1lbnRJbmRleCA9IHRoaXMuYm91bmRFbGVtZW50Q291bnQgLSAxO1xyXG4gICAgICAgIHZhciBkaXJJbmRleCA9IGxhbmdfMS5pc1ByZXNlbnQoZGlyZWN0aXZlUmVjb3JkKSA/IGRpcmVjdGl2ZVJlY29yZC5kaXJlY3RpdmVJbmRleCA6IG51bGw7XHJcbiAgICAgICAgdmFyIGJpbmRpbmdSZWNvcmQ7XHJcbiAgICAgICAgaWYgKGFzdC50eXBlID09PSB0ZW1wbGF0ZV9hc3RfMS5Qcm9wZXJ0eUJpbmRpbmdUeXBlLlByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgIGJpbmRpbmdSZWNvcmQgPVxyXG4gICAgICAgICAgICAgICAgbGFuZ18xLmlzUHJlc2VudChkaXJJbmRleCkgP1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZV9kZXRlY3Rpb25fMS5CaW5kaW5nUmVjb3JkLmNyZWF0ZUZvckhvc3RQcm9wZXJ0eShkaXJJbmRleCwgYXN0LnZhbHVlLCBhc3QubmFtZSkgOlxyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZV9kZXRlY3Rpb25fMS5CaW5kaW5nUmVjb3JkLmNyZWF0ZUZvckVsZW1lbnRQcm9wZXJ0eShhc3QudmFsdWUsIGJvdW5kRWxlbWVudEluZGV4LCBhc3QubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFzdC50eXBlID09PSB0ZW1wbGF0ZV9hc3RfMS5Qcm9wZXJ0eUJpbmRpbmdUeXBlLkF0dHJpYnV0ZSkge1xyXG4gICAgICAgICAgICBiaW5kaW5nUmVjb3JkID1cclxuICAgICAgICAgICAgICAgIGxhbmdfMS5pc1ByZXNlbnQoZGlySW5kZXgpID9cclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VfZGV0ZWN0aW9uXzEuQmluZGluZ1JlY29yZC5jcmVhdGVGb3JIb3N0QXR0cmlidXRlKGRpckluZGV4LCBhc3QudmFsdWUsIGFzdC5uYW1lKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlX2RldGVjdGlvbl8xLkJpbmRpbmdSZWNvcmQuY3JlYXRlRm9yRWxlbWVudEF0dHJpYnV0ZShhc3QudmFsdWUsIGJvdW5kRWxlbWVudEluZGV4LCBhc3QubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFzdC50eXBlID09PSB0ZW1wbGF0ZV9hc3RfMS5Qcm9wZXJ0eUJpbmRpbmdUeXBlLkNsYXNzKSB7XHJcbiAgICAgICAgICAgIGJpbmRpbmdSZWNvcmQgPVxyXG4gICAgICAgICAgICAgICAgbGFuZ18xLmlzUHJlc2VudChkaXJJbmRleCkgP1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZV9kZXRlY3Rpb25fMS5CaW5kaW5nUmVjb3JkLmNyZWF0ZUZvckhvc3RDbGFzcyhkaXJJbmRleCwgYXN0LnZhbHVlLCBhc3QubmFtZSkgOlxyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZV9kZXRlY3Rpb25fMS5CaW5kaW5nUmVjb3JkLmNyZWF0ZUZvckVsZW1lbnRDbGFzcyhhc3QudmFsdWUsIGJvdW5kRWxlbWVudEluZGV4LCBhc3QubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFzdC50eXBlID09PSB0ZW1wbGF0ZV9hc3RfMS5Qcm9wZXJ0eUJpbmRpbmdUeXBlLlN0eWxlKSB7XHJcbiAgICAgICAgICAgIGJpbmRpbmdSZWNvcmQgPVxyXG4gICAgICAgICAgICAgICAgbGFuZ18xLmlzUHJlc2VudChkaXJJbmRleCkgP1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZV9kZXRlY3Rpb25fMS5CaW5kaW5nUmVjb3JkLmNyZWF0ZUZvckhvc3RTdHlsZShkaXJJbmRleCwgYXN0LnZhbHVlLCBhc3QubmFtZSwgYXN0LnVuaXQpIDpcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VfZGV0ZWN0aW9uXzEuQmluZGluZ1JlY29yZC5jcmVhdGVGb3JFbGVtZW50U3R5bGUoYXN0LnZhbHVlLCBib3VuZEVsZW1lbnRJbmRleCwgYXN0Lm5hbWUsIGFzdC51bml0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5iaW5kaW5nUmVjb3Jkcy5wdXNoKGJpbmRpbmdSZWNvcmQpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFByb3RvVmlld1Zpc2l0b3IucHJvdG90eXBlLnZpc2l0QXR0ciA9IGZ1bmN0aW9uIChhc3QsIGNvbnRleHQpIHsgcmV0dXJuIG51bGw7IH07XHJcbiAgICBQcm90b1ZpZXdWaXNpdG9yLnByb3RvdHlwZS52aXNpdEJvdW5kVGV4dCA9IGZ1bmN0aW9uIChhc3QsIGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgYm91bmRUZXh0SW5kZXggPSB0aGlzLmJvdW5kVGV4dENvdW50Kys7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5nUmVjb3Jkcy5wdXNoKGNoYW5nZV9kZXRlY3Rpb25fMS5CaW5kaW5nUmVjb3JkLmNyZWF0ZUZvclRleHROb2RlKGFzdC52YWx1ZSwgYm91bmRUZXh0SW5kZXgpKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBQcm90b1ZpZXdWaXNpdG9yLnByb3RvdHlwZS52aXNpdFRleHQgPSBmdW5jdGlvbiAoYXN0LCBjb250ZXh0KSB7IHJldHVybiBudWxsOyB9O1xyXG4gICAgUHJvdG9WaWV3VmlzaXRvci5wcm90b3R5cGUudmlzaXREaXJlY3RpdmUgPSBmdW5jdGlvbiAoYXN0LCBkaXJlY3RpdmVJbmRleEFzTnVtYmVyKSB7XHJcbiAgICAgICAgdmFyIGRpcmVjdGl2ZUluZGV4ID0gbmV3IGNoYW5nZV9kZXRlY3Rpb25fMS5EaXJlY3RpdmVJbmRleCh0aGlzLmJvdW5kRWxlbWVudENvdW50IC0gMSwgZGlyZWN0aXZlSW5kZXhBc051bWJlcik7XHJcbiAgICAgICAgdmFyIGRpcmVjdGl2ZU1ldGFkYXRhID0gYXN0LmRpcmVjdGl2ZTtcclxuICAgICAgICB2YXIgZGlyZWN0aXZlUmVjb3JkID0gbmV3IGNoYW5nZV9kZXRlY3Rpb25fMS5EaXJlY3RpdmVSZWNvcmQoe1xyXG4gICAgICAgICAgICBkaXJlY3RpdmVJbmRleDogZGlyZWN0aXZlSW5kZXgsXHJcbiAgICAgICAgICAgIGNhbGxBZnRlckNvbnRlbnRJbml0OiBkaXJlY3RpdmVNZXRhZGF0YS5saWZlY3ljbGVIb29rcy5pbmRleE9mKGludGVyZmFjZXNfMS5MaWZlY3ljbGVIb29rcy5BZnRlckNvbnRlbnRJbml0KSAhPT0gLTEsXHJcbiAgICAgICAgICAgIGNhbGxBZnRlckNvbnRlbnRDaGVja2VkOiBkaXJlY3RpdmVNZXRhZGF0YS5saWZlY3ljbGVIb29rcy5pbmRleE9mKGludGVyZmFjZXNfMS5MaWZlY3ljbGVIb29rcy5BZnRlckNvbnRlbnRDaGVja2VkKSAhPT0gLTEsXHJcbiAgICAgICAgICAgIGNhbGxBZnRlclZpZXdJbml0OiBkaXJlY3RpdmVNZXRhZGF0YS5saWZlY3ljbGVIb29rcy5pbmRleE9mKGludGVyZmFjZXNfMS5MaWZlY3ljbGVIb29rcy5BZnRlclZpZXdJbml0KSAhPT0gLTEsXHJcbiAgICAgICAgICAgIGNhbGxBZnRlclZpZXdDaGVja2VkOiBkaXJlY3RpdmVNZXRhZGF0YS5saWZlY3ljbGVIb29rcy5pbmRleE9mKGludGVyZmFjZXNfMS5MaWZlY3ljbGVIb29rcy5BZnRlclZpZXdDaGVja2VkKSAhPT0gLTEsXHJcbiAgICAgICAgICAgIGNhbGxPbkNoYW5nZXM6IGRpcmVjdGl2ZU1ldGFkYXRhLmxpZmVjeWNsZUhvb2tzLmluZGV4T2YoaW50ZXJmYWNlc18xLkxpZmVjeWNsZUhvb2tzLk9uQ2hhbmdlcykgIT09IC0xLFxyXG4gICAgICAgICAgICBjYWxsRG9DaGVjazogZGlyZWN0aXZlTWV0YWRhdGEubGlmZWN5Y2xlSG9va3MuaW5kZXhPZihpbnRlcmZhY2VzXzEuTGlmZWN5Y2xlSG9va3MuRG9DaGVjaykgIT09IC0xLFxyXG4gICAgICAgICAgICBjYWxsT25Jbml0OiBkaXJlY3RpdmVNZXRhZGF0YS5saWZlY3ljbGVIb29rcy5pbmRleE9mKGludGVyZmFjZXNfMS5MaWZlY3ljbGVIb29rcy5PbkluaXQpICE9PSAtMSxcclxuICAgICAgICAgICAgY2hhbmdlRGV0ZWN0aW9uOiBkaXJlY3RpdmVNZXRhZGF0YS5jaGFuZ2VEZXRlY3Rpb25cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmRpcmVjdGl2ZVJlY29yZHMucHVzaChkaXJlY3RpdmVSZWNvcmQpO1xyXG4gICAgICAgIHRlbXBsYXRlX2FzdF8xLnRlbXBsYXRlVmlzaXRBbGwodGhpcywgYXN0LmlucHV0cywgZGlyZWN0aXZlUmVjb3JkKTtcclxuICAgICAgICB2YXIgYmluZGluZ1JlY29yZHMgPSB0aGlzLmJpbmRpbmdSZWNvcmRzO1xyXG4gICAgICAgIGlmIChkaXJlY3RpdmVSZWNvcmQuY2FsbE9uQ2hhbmdlcykge1xyXG4gICAgICAgICAgICBiaW5kaW5nUmVjb3Jkcy5wdXNoKGNoYW5nZV9kZXRlY3Rpb25fMS5CaW5kaW5nUmVjb3JkLmNyZWF0ZURpcmVjdGl2ZU9uQ2hhbmdlcyhkaXJlY3RpdmVSZWNvcmQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpcmVjdGl2ZVJlY29yZC5jYWxsT25Jbml0KSB7XHJcbiAgICAgICAgICAgIGJpbmRpbmdSZWNvcmRzLnB1c2goY2hhbmdlX2RldGVjdGlvbl8xLkJpbmRpbmdSZWNvcmQuY3JlYXRlRGlyZWN0aXZlT25Jbml0KGRpcmVjdGl2ZVJlY29yZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlyZWN0aXZlUmVjb3JkLmNhbGxEb0NoZWNrKSB7XHJcbiAgICAgICAgICAgIGJpbmRpbmdSZWNvcmRzLnB1c2goY2hhbmdlX2RldGVjdGlvbl8xLkJpbmRpbmdSZWNvcmQuY3JlYXRlRGlyZWN0aXZlRG9DaGVjayhkaXJlY3RpdmVSZWNvcmQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGVtcGxhdGVfYXN0XzEudGVtcGxhdGVWaXNpdEFsbCh0aGlzLCBhc3QuaG9zdFByb3BlcnRpZXMsIGRpcmVjdGl2ZVJlY29yZCk7XHJcbiAgICAgICAgdGVtcGxhdGVfYXN0XzEudGVtcGxhdGVWaXNpdEFsbCh0aGlzLCBhc3QuaG9zdEV2ZW50cywgZGlyZWN0aXZlUmVjb3JkKTtcclxuICAgICAgICB0ZW1wbGF0ZV9hc3RfMS50ZW1wbGF0ZVZpc2l0QWxsKHRoaXMsIGFzdC5leHBvcnRBc1ZhcnMpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFByb3RvVmlld1Zpc2l0b3IucHJvdG90eXBlLnZpc2l0RGlyZWN0aXZlUHJvcGVydHkgPSBmdW5jdGlvbiAoYXN0LCBkaXJlY3RpdmVSZWNvcmQpIHtcclxuICAgICAgICAvLyBUT0RPOiB0aGVzZSBzZXR0ZXJzIHNob3VsZCBldmVudHVhbGx5IGJlIGNyZWF0ZWQgYnkgY2hhbmdlIGRldGVjdGlvbiwgdG8gbWFrZVxyXG4gICAgICAgIC8vIGl0IG1vbm9tb3JwaGljIVxyXG4gICAgICAgIHZhciBzZXR0ZXIgPSByZWZsZWN0aW9uXzEucmVmbGVjdG9yLnNldHRlcihhc3QuZGlyZWN0aXZlTmFtZSk7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5nUmVjb3Jkcy5wdXNoKGNoYW5nZV9kZXRlY3Rpb25fMS5CaW5kaW5nUmVjb3JkLmNyZWF0ZUZvckRpcmVjdGl2ZShhc3QudmFsdWUsIGFzdC5kaXJlY3RpdmVOYW1lLCBzZXR0ZXIsIGRpcmVjdGl2ZVJlY29yZCkpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQcm90b1ZpZXdWaXNpdG9yO1xyXG59KSgpO1xyXG5mdW5jdGlvbiBjcmVhdGVDaGFuZ2VEZWZpbml0aW9ucyhwdlZpc2l0b3JzLCBjb21wb25lbnRUeXBlLCBnZW5Db25maWcpIHtcclxuICAgIHZhciBwdlZhcmlhYmxlTmFtZXMgPSBfY29sbGVjdE5lc3RlZFByb3RvVmlld3NWYXJpYWJsZU5hbWVzKHB2VmlzaXRvcnMpO1xyXG4gICAgcmV0dXJuIHB2VmlzaXRvcnMubWFwKGZ1bmN0aW9uIChwdlZpc2l0b3IpIHtcclxuICAgICAgICB2YXIgaWQgPSBjb21wb25lbnRUeXBlLm5hbWUgKyBcIl9cIiArIHB2VmlzaXRvci52aWV3SW5kZXg7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBjaGFuZ2VfZGV0ZWN0aW9uXzEuQ2hhbmdlRGV0ZWN0b3JEZWZpbml0aW9uKGlkLCBwdlZpc2l0b3Iuc3RyYXRlZ3ksIHB2VmFyaWFibGVOYW1lc1twdlZpc2l0b3Iudmlld0luZGV4XSwgcHZWaXNpdG9yLmJpbmRpbmdSZWNvcmRzLCBwdlZpc2l0b3IuZXZlbnRSZWNvcmRzLCBwdlZpc2l0b3IuZGlyZWN0aXZlUmVjb3JkcywgZ2VuQ29uZmlnKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIF9jb2xsZWN0TmVzdGVkUHJvdG9WaWV3c1ZhcmlhYmxlTmFtZXMocHZWaXNpdG9ycykge1xyXG4gICAgdmFyIG5lc3RlZFB2VmFyaWFibGVOYW1lcyA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jcmVhdGVGaXhlZFNpemUocHZWaXNpdG9ycy5sZW5ndGgpO1xyXG4gICAgcHZWaXNpdG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChwdikge1xyXG4gICAgICAgIHZhciBwYXJlbnRWYXJpYWJsZU5hbWVzID0gbGFuZ18xLmlzUHJlc2VudChwdi5wYXJlbnQpID8gbmVzdGVkUHZWYXJpYWJsZU5hbWVzW3B2LnBhcmVudC52aWV3SW5kZXhdIDogW107XHJcbiAgICAgICAgbmVzdGVkUHZWYXJpYWJsZU5hbWVzW3B2LnZpZXdJbmRleF0gPSBwYXJlbnRWYXJpYWJsZU5hbWVzLmNvbmNhdChwdi52YXJpYWJsZU5hbWVzKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG5lc3RlZFB2VmFyaWFibGVOYW1lcztcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFuZ2VfZGVmaW5pdGlvbl9mYWN0b3J5LmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgc291cmNlX21vZHVsZV8xID0gcmVxdWlyZSgnLi9zb3VyY2VfbW9kdWxlJyk7XHJcbnZhciBjaGFuZ2VfZGV0ZWN0aW9uX2ppdF9nZW5lcmF0b3JfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2NoYW5nZV9kZXRlY3Rpb24vY2hhbmdlX2RldGVjdGlvbl9qaXRfZ2VuZXJhdG9yJyk7XHJcbnZhciBjaGFuZ2VfZGVmaW5pdGlvbl9mYWN0b3J5XzEgPSByZXF1aXJlKCcuL2NoYW5nZV9kZWZpbml0aW9uX2ZhY3RvcnknKTtcclxudmFyIGNoYW5nZV9kZXRlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2NoYW5nZV9kZXRlY3Rpb24vY2hhbmdlX2RldGVjdGlvbicpO1xyXG52YXIgY2hhbmdlX2RldGVjdG9yX2NvZGVnZW5fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy90cmFuc2Zvcm0vdGVtcGxhdGVfY29tcGlsZXIvY2hhbmdlX2RldGVjdG9yX2NvZGVnZW4nKTtcclxudmFyIHV0aWxfMSA9IHJlcXVpcmUoJy4vdXRpbCcpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBBQlNUUkFDVF9DSEFOR0VfREVURUNUT1IgPSBcIkFic3RyYWN0Q2hhbmdlRGV0ZWN0b3JcIjtcclxudmFyIFVUSUwgPSBcIkNoYW5nZURldGVjdGlvblV0aWxcIjtcclxudmFyIEFCU1RSQUNUX0NIQU5HRV9ERVRFQ1RPUl9NT0RVTEUgPSBzb3VyY2VfbW9kdWxlXzEubW9kdWxlUmVmKFwicGFja2FnZTphbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uL2Fic3RyYWN0X2NoYW5nZV9kZXRlY3RvclwiICsgdXRpbF8xLk1PRFVMRV9TVUZGSVgpO1xyXG52YXIgVVRJTF9NT0RVTEUgPSBzb3VyY2VfbW9kdWxlXzEubW9kdWxlUmVmKFwicGFja2FnZTphbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uL2NoYW5nZV9kZXRlY3Rpb25fdXRpbFwiICsgdXRpbF8xLk1PRFVMRV9TVUZGSVgpO1xyXG52YXIgUFJFR0VOX1BST1RPX0NIQU5HRV9ERVRFQ1RPUl9NT0RVTEUgPSBzb3VyY2VfbW9kdWxlXzEubW9kdWxlUmVmKFwicGFja2FnZTphbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uL3ByZWdlbl9wcm90b19jaGFuZ2VfZGV0ZWN0b3JcIiArIHV0aWxfMS5NT0RVTEVfU1VGRklYKTtcclxudmFyIENoYW5nZURldGVjdGlvbkNvbXBpbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENoYW5nZURldGVjdGlvbkNvbXBpbGVyKF9nZW5Db25maWcpIHtcclxuICAgICAgICB0aGlzLl9nZW5Db25maWcgPSBfZ2VuQ29uZmlnO1xyXG4gICAgfVxyXG4gICAgQ2hhbmdlRGV0ZWN0aW9uQ29tcGlsZXIucHJvdG90eXBlLmNvbXBpbGVDb21wb25lbnRSdW50aW1lID0gZnVuY3Rpb24gKGNvbXBvbmVudFR5cGUsIHN0cmF0ZWd5LCBwYXJzZWRUZW1wbGF0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGNoYW5nZURldGVjdG9yRGVmaW5pdGlvbnMgPSBjaGFuZ2VfZGVmaW5pdGlvbl9mYWN0b3J5XzEuY3JlYXRlQ2hhbmdlRGV0ZWN0b3JEZWZpbml0aW9ucyhjb21wb25lbnRUeXBlLCBzdHJhdGVneSwgdGhpcy5fZ2VuQ29uZmlnLCBwYXJzZWRUZW1wbGF0ZSk7XHJcbiAgICAgICAgcmV0dXJuIGNoYW5nZURldGVjdG9yRGVmaW5pdGlvbnMubWFwKGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fY3JlYXRlQ2hhbmdlRGV0ZWN0b3JGYWN0b3J5KGRlZmluaXRpb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIENoYW5nZURldGVjdGlvbkNvbXBpbGVyLnByb3RvdHlwZS5fY3JlYXRlQ2hhbmdlRGV0ZWN0b3JGYWN0b3J5ID0gZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcclxuICAgICAgICBpZiAodXRpbF8xLklTX0RBUlQgfHwgIXRoaXMuX2dlbkNvbmZpZy51c2VKaXQpIHtcclxuICAgICAgICAgICAgdmFyIHByb3RvID0gbmV3IGNoYW5nZV9kZXRlY3Rpb25fMS5EeW5hbWljUHJvdG9DaGFuZ2VEZXRlY3RvcihkZWZpbml0aW9uKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaGVyKSB7IHJldHVybiBwcm90by5pbnN0YW50aWF0ZShkaXNwYXRjaGVyKTsgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgY2hhbmdlX2RldGVjdGlvbl9qaXRfZ2VuZXJhdG9yXzEuQ2hhbmdlRGV0ZWN0b3JKSVRHZW5lcmF0b3IoZGVmaW5pdGlvbiwgVVRJTCwgQUJTVFJBQ1RfQ0hBTkdFX0RFVEVDVE9SKS5nZW5lcmF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25Db21waWxlci5wcm90b3R5cGUuY29tcGlsZUNvbXBvbmVudENvZGVHZW4gPSBmdW5jdGlvbiAoY29tcG9uZW50VHlwZSwgc3RyYXRlZ3ksIHBhcnNlZFRlbXBsYXRlKSB7XHJcbiAgICAgICAgdmFyIGNoYW5nZURldGVjdG9yRGVmaW5pdGlvbnMgPSBjaGFuZ2VfZGVmaW5pdGlvbl9mYWN0b3J5XzEuY3JlYXRlQ2hhbmdlRGV0ZWN0b3JEZWZpbml0aW9ucyhjb21wb25lbnRUeXBlLCBzdHJhdGVneSwgdGhpcy5fZ2VuQ29uZmlnLCBwYXJzZWRUZW1wbGF0ZSk7XHJcbiAgICAgICAgdmFyIGZhY3RvcmllcyA9IFtdO1xyXG4gICAgICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICAgICAgdmFyIHNvdXJjZVBhcnRzID0gY2hhbmdlRGV0ZWN0b3JEZWZpbml0aW9ucy5tYXAoZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcclxuICAgICAgICAgICAgdmFyIGNvZGVnZW47XHJcbiAgICAgICAgICAgIHZhciBzb3VyY2VQYXJ0O1xyXG4gICAgICAgICAgICAvLyBUT0RPKHRib3NjaCk6IG1vdmUgdGhlIDIgY29kZSBnZW5lcmF0b3JzIHRvIHRoZSBzYW1lIHBsYWNlLCBvbmUgd2l0aCAuZGFydCBhbmQgb25lIHdpdGggLnRzXHJcbiAgICAgICAgICAgIC8vIHN1ZmZpeFxyXG4gICAgICAgICAgICAvLyBhbmQgaGF2ZSB0aGUgc2FtZSBBUEkgZm9yIGNhbGxpbmcgdGhlbSFcclxuICAgICAgICAgICAgaWYgKHV0aWxfMS5JU19EQVJUKSB7XHJcbiAgICAgICAgICAgICAgICBjb2RlZ2VuID0gbmV3IGNoYW5nZV9kZXRlY3Rvcl9jb2RlZ2VuXzEuQ29kZWdlbihQUkVHRU5fUFJPVE9fQ0hBTkdFX0RFVEVDVE9SX01PRFVMRSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gZGVmaW5pdGlvbi5pZDtcclxuICAgICAgICAgICAgICAgIHZhciB0eXBlUmVmID0gKGluZGV4ID09PSAwICYmIGNvbXBvbmVudFR5cGUuaXNIb3N0KSA/XHJcbiAgICAgICAgICAgICAgICAgICAgJ2R5bmFtaWMnIDpcclxuICAgICAgICAgICAgICAgICAgICBcIlwiICsgc291cmNlX21vZHVsZV8xLm1vZHVsZVJlZihjb21wb25lbnRUeXBlLm1vZHVsZVVybCkgKyBjb21wb25lbnRUeXBlLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBjb2RlZ2VuLmdlbmVyYXRlKHR5cGVSZWYsIGNsYXNzTmFtZSwgZGVmaW5pdGlvbik7XHJcbiAgICAgICAgICAgICAgICBmYWN0b3JpZXMucHVzaChcIihkaXNwYXRjaGVyKSA9PiBuZXcgXCIgKyBjbGFzc05hbWUgKyBcIihkaXNwYXRjaGVyKVwiKTtcclxuICAgICAgICAgICAgICAgIHNvdXJjZVBhcnQgPSBjb2RlZ2VuLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb2RlZ2VuID0gbmV3IGNoYW5nZV9kZXRlY3Rpb25faml0X2dlbmVyYXRvcl8xLkNoYW5nZURldGVjdG9ySklUR2VuZXJhdG9yKGRlZmluaXRpb24sIFwiXCIgKyBVVElMX01PRFVMRSArIFVUSUwsIFwiXCIgKyBBQlNUUkFDVF9DSEFOR0VfREVURUNUT1JfTU9EVUxFICsgQUJTVFJBQ1RfQ0hBTkdFX0RFVEVDVE9SKTtcclxuICAgICAgICAgICAgICAgIGZhY3Rvcmllcy5wdXNoKFwiZnVuY3Rpb24oZGlzcGF0Y2hlcikgeyByZXR1cm4gbmV3IFwiICsgY29kZWdlbi50eXBlTmFtZSArIFwiKGRpc3BhdGNoZXIpOyB9XCIpO1xyXG4gICAgICAgICAgICAgICAgc291cmNlUGFydCA9IGNvZGVnZW4uZ2VuZXJhdGVTb3VyY2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICByZXR1cm4gc291cmNlUGFydDtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV3IHNvdXJjZV9tb2R1bGVfMS5Tb3VyY2VFeHByZXNzaW9ucyhzb3VyY2VQYXJ0cywgZmFjdG9yaWVzKTtcclxuICAgIH07XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25Db21waWxlciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtjaGFuZ2VfZGV0ZWN0aW9uXzEuQ2hhbmdlRGV0ZWN0b3JHZW5Db25maWddKVxyXG4gICAgXSwgQ2hhbmdlRGV0ZWN0aW9uQ29tcGlsZXIpO1xyXG4gICAgcmV0dXJuIENoYW5nZURldGVjdGlvbkNvbXBpbGVyO1xyXG59KSgpO1xyXG5leHBvcnRzLkNoYW5nZURldGVjdGlvbkNvbXBpbGVyID0gQ2hhbmdlRGV0ZWN0aW9uQ29tcGlsZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYW5nZV9kZXRlY3Rvcl9jb21waWxlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgdGVtcGxhdGVfY29tbWFuZHNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci90ZW1wbGF0ZV9jb21tYW5kcycpO1xyXG52YXIgdGVtcGxhdGVfYXN0XzEgPSByZXF1aXJlKCcuL3RlbXBsYXRlX2FzdCcpO1xyXG52YXIgc291cmNlX21vZHVsZV8xID0gcmVxdWlyZSgnLi9zb3VyY2VfbW9kdWxlJyk7XHJcbnZhciB2aWV3XzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YS92aWV3Jyk7XHJcbnZhciBzdHlsZV9jb21waWxlcl8xID0gcmVxdWlyZSgnLi9zdHlsZV9jb21waWxlcicpO1xyXG52YXIgdXRpbF8xID0gcmVxdWlyZSgnLi91dGlsJyk7XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxuZXhwb3J0cy5URU1QTEFURV9DT01NQU5EU19NT0RVTEVfUkVGID0gc291cmNlX21vZHVsZV8xLm1vZHVsZVJlZihcInBhY2thZ2U6YW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL3RlbXBsYXRlX2NvbW1hbmRzXCIgKyB1dGlsXzEuTU9EVUxFX1NVRkZJWCk7XHJcbnZhciBJTVBMSUNJVF9URU1QTEFURV9WQVIgPSAnXFwkaW1wbGljaXQnO1xyXG52YXIgQ0xBU1NfQVRUUiA9ICdjbGFzcyc7XHJcbnZhciBTVFlMRV9BVFRSID0gJ3N0eWxlJztcclxudmFyIENvbW1hbmRDb21waWxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb21tYW5kQ29tcGlsZXIoKSB7XHJcbiAgICB9XHJcbiAgICBDb21tYW5kQ29tcGlsZXIucHJvdG90eXBlLmNvbXBpbGVDb21wb25lbnRSdW50aW1lID0gZnVuY3Rpb24gKGNvbXBvbmVudCwgYXBwSWQsIHRlbXBsYXRlSWQsIHRlbXBsYXRlLCBjaGFuZ2VEZXRlY3RvckZhY3RvcmllcywgY29tcG9uZW50VGVtcGxhdGVGYWN0b3J5KSB7XHJcbiAgICAgICAgdmFyIHZpc2l0b3IgPSBuZXcgQ29tbWFuZEJ1aWxkZXJWaXNpdG9yKG5ldyBSdW50aW1lQ29tbWFuZEZhY3RvcnkoY29tcG9uZW50LCBhcHBJZCwgdGVtcGxhdGVJZCwgY29tcG9uZW50VGVtcGxhdGVGYWN0b3J5LCBjaGFuZ2VEZXRlY3RvckZhY3RvcmllcyksIDApO1xyXG4gICAgICAgIHRlbXBsYXRlX2FzdF8xLnRlbXBsYXRlVmlzaXRBbGwodmlzaXRvciwgdGVtcGxhdGUpO1xyXG4gICAgICAgIHJldHVybiB2aXNpdG9yLnJlc3VsdDtcclxuICAgIH07XHJcbiAgICBDb21tYW5kQ29tcGlsZXIucHJvdG90eXBlLmNvbXBpbGVDb21wb25lbnRDb2RlR2VuID0gZnVuY3Rpb24gKGNvbXBvbmVudCwgYXBwSWRFeHByLCB0ZW1wbGF0ZUlkRXhwciwgdGVtcGxhdGUsIGNoYW5nZURldGVjdG9yRmFjdG9yeUV4cHJlc3Npb25zLCBjb21wb25lbnRUZW1wbGF0ZUZhY3RvcnkpIHtcclxuICAgICAgICB2YXIgdmlzaXRvciA9IG5ldyBDb21tYW5kQnVpbGRlclZpc2l0b3IobmV3IENvZGVnZW5Db21tYW5kRmFjdG9yeShjb21wb25lbnQsIGFwcElkRXhwciwgdGVtcGxhdGVJZEV4cHIsIGNvbXBvbmVudFRlbXBsYXRlRmFjdG9yeSwgY2hhbmdlRGV0ZWN0b3JGYWN0b3J5RXhwcmVzc2lvbnMpLCAwKTtcclxuICAgICAgICB0ZW1wbGF0ZV9hc3RfMS50ZW1wbGF0ZVZpc2l0QWxsKHZpc2l0b3IsIHRlbXBsYXRlKTtcclxuICAgICAgICB2YXIgc291cmNlID0gXCJbXCIgKyB2aXNpdG9yLnJlc3VsdC5qb2luKCcsJykgKyBcIl1cIjtcclxuICAgICAgICByZXR1cm4gbmV3IHNvdXJjZV9tb2R1bGVfMS5Tb3VyY2VFeHByZXNzaW9uKFtdLCBzb3VyY2UpO1xyXG4gICAgfTtcclxuICAgIENvbW1hbmRDb21waWxlciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgQ29tbWFuZENvbXBpbGVyKTtcclxuICAgIHJldHVybiBDb21tYW5kQ29tcGlsZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQ29tbWFuZENvbXBpbGVyID0gQ29tbWFuZENvbXBpbGVyO1xyXG52YXIgUnVudGltZUNvbW1hbmRGYWN0b3J5ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJ1bnRpbWVDb21tYW5kRmFjdG9yeShjb21wb25lbnQsIGFwcElkLCB0ZW1wbGF0ZUlkLCBjb21wb25lbnRUZW1wbGF0ZUZhY3RvcnksIGNoYW5nZURldGVjdG9yRmFjdG9yaWVzKSB7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XHJcbiAgICAgICAgdGhpcy5hcHBJZCA9IGFwcElkO1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGVJZCA9IHRlbXBsYXRlSWQ7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRUZW1wbGF0ZUZhY3RvcnkgPSBjb21wb25lbnRUZW1wbGF0ZUZhY3Rvcnk7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvckZhY3RvcmllcyA9IGNoYW5nZURldGVjdG9yRmFjdG9yaWVzO1xyXG4gICAgfVxyXG4gICAgUnVudGltZUNvbW1hbmRGYWN0b3J5LnByb3RvdHlwZS5fbWFwRGlyZWN0aXZlcyA9IGZ1bmN0aW9uIChkaXJlY3RpdmVzKSB7XHJcbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZXMubWFwKGZ1bmN0aW9uIChkaXJlY3RpdmUpIHsgcmV0dXJuIGRpcmVjdGl2ZS50eXBlLnJ1bnRpbWU7IH0pO1xyXG4gICAgfTtcclxuICAgIFJ1bnRpbWVDb21tYW5kRmFjdG9yeS5wcm90b3R5cGUuX2FkZFN0eWxlU2hpbUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoYXR0ck5hbWVBbmRWYWx1ZXMsIGxvY2FsQ29tcG9uZW50LCBsb2NhbFRlbXBsYXRlSWQpIHtcclxuICAgICAgICB2YXIgYWRkaXRpb25hbFN0eWxlcyA9IFtdO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGxvY2FsQ29tcG9uZW50KSAmJlxyXG4gICAgICAgICAgICBsb2NhbENvbXBvbmVudC50ZW1wbGF0ZS5lbmNhcHN1bGF0aW9uID09PSB2aWV3XzEuVmlld0VuY2Fwc3VsYXRpb24uRW11bGF0ZWQpIHtcclxuICAgICAgICAgICAgYWRkaXRpb25hbFN0eWxlcy5wdXNoKHN0eWxlX2NvbXBpbGVyXzEuc2hpbUhvc3RBdHRyaWJ1dGUodGhpcy5hcHBJZCwgbG9jYWxUZW1wbGF0ZUlkKSk7XHJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxTdHlsZXMucHVzaCgnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudC50ZW1wbGF0ZS5lbmNhcHN1bGF0aW9uID09PSB2aWV3XzEuVmlld0VuY2Fwc3VsYXRpb24uRW11bGF0ZWQpIHtcclxuICAgICAgICAgICAgYWRkaXRpb25hbFN0eWxlcy5wdXNoKHN0eWxlX2NvbXBpbGVyXzEuc2hpbUNvbnRlbnRBdHRyaWJ1dGUodGhpcy5hcHBJZCwgdGhpcy50ZW1wbGF0ZUlkKSk7XHJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxTdHlsZXMucHVzaCgnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhZGRpdGlvbmFsU3R5bGVzLmNvbmNhdChhdHRyTmFtZUFuZFZhbHVlcyk7XHJcbiAgICB9O1xyXG4gICAgUnVudGltZUNvbW1hbmRGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gZnVuY3Rpb24gKHZhbHVlLCBpc0JvdW5kLCBuZ0NvbnRlbnRJbmRleCkge1xyXG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZV9jb21tYW5kc18xLnRleHQodmFsdWUsIGlzQm91bmQsIG5nQ29udGVudEluZGV4KTtcclxuICAgIH07XHJcbiAgICBSdW50aW1lQ29tbWFuZEZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZU5nQ29udGVudCA9IGZ1bmN0aW9uIChpbmRleCwgbmdDb250ZW50SW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gdGVtcGxhdGVfY29tbWFuZHNfMS5uZ0NvbnRlbnQoaW5kZXgsIG5nQ29udGVudEluZGV4KTtcclxuICAgIH07XHJcbiAgICBSdW50aW1lQ29tbWFuZEZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZUJlZ2luRWxlbWVudCA9IGZ1bmN0aW9uIChuYW1lLCBhdHRyTmFtZUFuZFZhbHVlcywgZXZlbnRUYXJnZXRBbmROYW1lcywgdmFyaWFibGVOYW1lQW5kVmFsdWVzLCBkaXJlY3RpdmVzLCBpc0JvdW5kLCBuZ0NvbnRlbnRJbmRleCkge1xyXG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZV9jb21tYW5kc18xLmJlZ2luRWxlbWVudChuYW1lLCB0aGlzLl9hZGRTdHlsZVNoaW1BdHRyaWJ1dGVzKGF0dHJOYW1lQW5kVmFsdWVzLCBudWxsLCBudWxsKSwgZXZlbnRUYXJnZXRBbmROYW1lcywgdmFyaWFibGVOYW1lQW5kVmFsdWVzLCB0aGlzLl9tYXBEaXJlY3RpdmVzKGRpcmVjdGl2ZXMpLCBpc0JvdW5kLCBuZ0NvbnRlbnRJbmRleCk7XHJcbiAgICB9O1xyXG4gICAgUnVudGltZUNvbW1hbmRGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVFbmRFbGVtZW50ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGVtcGxhdGVfY29tbWFuZHNfMS5lbmRFbGVtZW50KCk7IH07XHJcbiAgICBSdW50aW1lQ29tbWFuZEZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZUJlZ2luQ29tcG9uZW50ID0gZnVuY3Rpb24gKG5hbWUsIGF0dHJOYW1lQW5kVmFsdWVzLCBldmVudFRhcmdldEFuZE5hbWVzLCB2YXJpYWJsZU5hbWVBbmRWYWx1ZXMsIGRpcmVjdGl2ZXMsIG5hdGl2ZVNoYWRvdywgbmdDb250ZW50SW5kZXgpIHtcclxuICAgICAgICB2YXIgbmVzdGVkVGVtcGxhdGUgPSB0aGlzLmNvbXBvbmVudFRlbXBsYXRlRmFjdG9yeShkaXJlY3RpdmVzWzBdKTtcclxuICAgICAgICByZXR1cm4gdGVtcGxhdGVfY29tbWFuZHNfMS5iZWdpbkNvbXBvbmVudChuYW1lLCB0aGlzLl9hZGRTdHlsZVNoaW1BdHRyaWJ1dGVzKGF0dHJOYW1lQW5kVmFsdWVzLCBkaXJlY3RpdmVzWzBdLCBuZXN0ZWRUZW1wbGF0ZS5pZCksIGV2ZW50VGFyZ2V0QW5kTmFtZXMsIHZhcmlhYmxlTmFtZUFuZFZhbHVlcywgdGhpcy5fbWFwRGlyZWN0aXZlcyhkaXJlY3RpdmVzKSwgbmF0aXZlU2hhZG93LCBuZ0NvbnRlbnRJbmRleCwgbmVzdGVkVGVtcGxhdGUpO1xyXG4gICAgfTtcclxuICAgIFJ1bnRpbWVDb21tYW5kRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlRW5kQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGVtcGxhdGVfY29tbWFuZHNfMS5lbmRDb21wb25lbnQoKTsgfTtcclxuICAgIFJ1bnRpbWVDb21tYW5kRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlRW1iZWRkZWRUZW1wbGF0ZSA9IGZ1bmN0aW9uIChlbWJlZGRlZFRlbXBsYXRlSW5kZXgsIGF0dHJOYW1lQW5kVmFsdWVzLCB2YXJpYWJsZU5hbWVBbmRWYWx1ZXMsIGRpcmVjdGl2ZXMsIGlzTWVyZ2VkLCBuZ0NvbnRlbnRJbmRleCwgY2hpbGRyZW4pIHtcclxuICAgICAgICByZXR1cm4gdGVtcGxhdGVfY29tbWFuZHNfMS5lbWJlZGRlZFRlbXBsYXRlKGF0dHJOYW1lQW5kVmFsdWVzLCB2YXJpYWJsZU5hbWVBbmRWYWx1ZXMsIHRoaXMuX21hcERpcmVjdGl2ZXMoZGlyZWN0aXZlcyksIGlzTWVyZ2VkLCBuZ0NvbnRlbnRJbmRleCwgdGhpcy5jaGFuZ2VEZXRlY3RvckZhY3Rvcmllc1tlbWJlZGRlZFRlbXBsYXRlSW5kZXhdLCBjaGlsZHJlbik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJ1bnRpbWVDb21tYW5kRmFjdG9yeTtcclxufSkoKTtcclxudmFyIENvZGVnZW5Db21tYW5kRmFjdG9yeSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb2RlZ2VuQ29tbWFuZEZhY3RvcnkoY29tcG9uZW50LCBhcHBJZEV4cHIsIHRlbXBsYXRlSWRFeHByLCBjb21wb25lbnRUZW1wbGF0ZUZhY3RvcnksIGNoYW5nZURldGVjdG9yRmFjdG9yeUV4cHJlc3Npb25zKSB7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XHJcbiAgICAgICAgdGhpcy5hcHBJZEV4cHIgPSBhcHBJZEV4cHI7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZUlkRXhwciA9IHRlbXBsYXRlSWRFeHByO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50VGVtcGxhdGVGYWN0b3J5ID0gY29tcG9uZW50VGVtcGxhdGVGYWN0b3J5O1xyXG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JGYWN0b3J5RXhwcmVzc2lvbnMgPSBjaGFuZ2VEZXRlY3RvckZhY3RvcnlFeHByZXNzaW9ucztcclxuICAgIH1cclxuICAgIENvZGVnZW5Db21tYW5kRmFjdG9yeS5wcm90b3R5cGUuX2FkZFN0eWxlU2hpbUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoYXR0ck5hbWVBbmRWYWx1ZXMsIGxvY2FsQ29tcG9uZW50LCBsb2NhbFRlbXBsYXRlSWRFeHByKSB7XHJcbiAgICAgICAgdmFyIGFkZGl0aW9uYWxTdGx5ZXMgPSBbXTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChsb2NhbENvbXBvbmVudCkgJiZcclxuICAgICAgICAgICAgbG9jYWxDb21wb25lbnQudGVtcGxhdGUuZW5jYXBzdWxhdGlvbiA9PT0gdmlld18xLlZpZXdFbmNhcHN1bGF0aW9uLkVtdWxhdGVkKSB7XHJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxTdGx5ZXMucHVzaChuZXcgRXhwcmVzc2lvbihzdHlsZV9jb21waWxlcl8xLnNoaW1Ib3N0QXR0cmlidXRlRXhwcih0aGlzLmFwcElkRXhwciwgbG9jYWxUZW1wbGF0ZUlkRXhwcikpKTtcclxuICAgICAgICAgICAgYWRkaXRpb25hbFN0bHllcy5wdXNoKCcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50LnRlbXBsYXRlLmVuY2Fwc3VsYXRpb24gPT09IHZpZXdfMS5WaWV3RW5jYXBzdWxhdGlvbi5FbXVsYXRlZCkge1xyXG4gICAgICAgICAgICBhZGRpdGlvbmFsU3RseWVzLnB1c2gobmV3IEV4cHJlc3Npb24oc3R5bGVfY29tcGlsZXJfMS5zaGltQ29udGVudEF0dHJpYnV0ZUV4cHIodGhpcy5hcHBJZEV4cHIsIHRoaXMudGVtcGxhdGVJZEV4cHIpKSk7XHJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxTdGx5ZXMucHVzaCgnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhZGRpdGlvbmFsU3RseWVzLmNvbmNhdChhdHRyTmFtZUFuZFZhbHVlcyk7XHJcbiAgICB9O1xyXG4gICAgQ29kZWdlbkNvbW1hbmRGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gZnVuY3Rpb24gKHZhbHVlLCBpc0JvdW5kLCBuZ0NvbnRlbnRJbmRleCkge1xyXG4gICAgICAgIHJldHVybiBleHBvcnRzLlRFTVBMQVRFX0NPTU1BTkRTX01PRFVMRV9SRUYgKyBcInRleHQoXCIgKyB1dGlsXzEuZXNjYXBlU2luZ2xlUXVvdGVTdHJpbmcodmFsdWUpICsgXCIsIFwiICsgaXNCb3VuZCArIFwiLCBcIiArIG5nQ29udGVudEluZGV4ICsgXCIpXCI7XHJcbiAgICB9O1xyXG4gICAgQ29kZWdlbkNvbW1hbmRGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVOZ0NvbnRlbnQgPSBmdW5jdGlvbiAoaW5kZXgsIG5nQ29udGVudEluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuVEVNUExBVEVfQ09NTUFORFNfTU9EVUxFX1JFRiArIFwibmdDb250ZW50KFwiICsgaW5kZXggKyBcIiwgXCIgKyBuZ0NvbnRlbnRJbmRleCArIFwiKVwiO1xyXG4gICAgfTtcclxuICAgIENvZGVnZW5Db21tYW5kRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlQmVnaW5FbGVtZW50ID0gZnVuY3Rpb24gKG5hbWUsIGF0dHJOYW1lQW5kVmFsdWVzLCBldmVudFRhcmdldEFuZE5hbWVzLCB2YXJpYWJsZU5hbWVBbmRWYWx1ZXMsIGRpcmVjdGl2ZXMsIGlzQm91bmQsIG5nQ29udGVudEluZGV4KSB7XHJcbiAgICAgICAgdmFyIGF0dHJzRXhwcmVzc2lvbiA9IGNvZGVHZW5BcnJheSh0aGlzLl9hZGRTdHlsZVNoaW1BdHRyaWJ1dGVzKGF0dHJOYW1lQW5kVmFsdWVzLCBudWxsLCBudWxsKSk7XHJcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuVEVNUExBVEVfQ09NTUFORFNfTU9EVUxFX1JFRiArIFwiYmVnaW5FbGVtZW50KFwiICsgdXRpbF8xLmVzY2FwZVNpbmdsZVF1b3RlU3RyaW5nKG5hbWUpICsgXCIsIFwiICsgYXR0cnNFeHByZXNzaW9uICsgXCIsIFwiICsgY29kZUdlbkFycmF5KGV2ZW50VGFyZ2V0QW5kTmFtZXMpICsgXCIsIFwiICsgY29kZUdlbkFycmF5KHZhcmlhYmxlTmFtZUFuZFZhbHVlcykgKyBcIiwgXCIgKyBjb2RlR2VuRGlyZWN0aXZlc0FycmF5KGRpcmVjdGl2ZXMpICsgXCIsIFwiICsgaXNCb3VuZCArIFwiLCBcIiArIG5nQ29udGVudEluZGV4ICsgXCIpXCI7XHJcbiAgICB9O1xyXG4gICAgQ29kZWdlbkNvbW1hbmRGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVFbmRFbGVtZW50ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhwb3J0cy5URU1QTEFURV9DT01NQU5EU19NT0RVTEVfUkVGICsgXCJlbmRFbGVtZW50KClcIjsgfTtcclxuICAgIENvZGVnZW5Db21tYW5kRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlQmVnaW5Db21wb25lbnQgPSBmdW5jdGlvbiAobmFtZSwgYXR0ck5hbWVBbmRWYWx1ZXMsIGV2ZW50VGFyZ2V0QW5kTmFtZXMsIHZhcmlhYmxlTmFtZUFuZFZhbHVlcywgZGlyZWN0aXZlcywgbmF0aXZlU2hhZG93LCBuZ0NvbnRlbnRJbmRleCkge1xyXG4gICAgICAgIHZhciBuZXN0ZWRDb21wRXhwciA9IHRoaXMuY29tcG9uZW50VGVtcGxhdGVGYWN0b3J5KGRpcmVjdGl2ZXNbMF0pO1xyXG4gICAgICAgIHZhciBhdHRyc0V4cHJlc3Npb24gPSBjb2RlR2VuQXJyYXkodGhpcy5fYWRkU3R5bGVTaGltQXR0cmlidXRlcyhhdHRyTmFtZUFuZFZhbHVlcywgZGlyZWN0aXZlc1swXSwgbmVzdGVkQ29tcEV4cHIgKyBcIi5pZFwiKSk7XHJcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuVEVNUExBVEVfQ09NTUFORFNfTU9EVUxFX1JFRiArIFwiYmVnaW5Db21wb25lbnQoXCIgKyB1dGlsXzEuZXNjYXBlU2luZ2xlUXVvdGVTdHJpbmcobmFtZSkgKyBcIiwgXCIgKyBhdHRyc0V4cHJlc3Npb24gKyBcIiwgXCIgKyBjb2RlR2VuQXJyYXkoZXZlbnRUYXJnZXRBbmROYW1lcykgKyBcIiwgXCIgKyBjb2RlR2VuQXJyYXkodmFyaWFibGVOYW1lQW5kVmFsdWVzKSArIFwiLCBcIiArIGNvZGVHZW5EaXJlY3RpdmVzQXJyYXkoZGlyZWN0aXZlcykgKyBcIiwgXCIgKyBuYXRpdmVTaGFkb3cgKyBcIiwgXCIgKyBuZ0NvbnRlbnRJbmRleCArIFwiLCBcIiArIG5lc3RlZENvbXBFeHByICsgXCIpXCI7XHJcbiAgICB9O1xyXG4gICAgQ29kZWdlbkNvbW1hbmRGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVFbmRDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBleHBvcnRzLlRFTVBMQVRFX0NPTU1BTkRTX01PRFVMRV9SRUYgKyBcImVuZENvbXBvbmVudCgpXCI7IH07XHJcbiAgICBDb2RlZ2VuQ29tbWFuZEZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZUVtYmVkZGVkVGVtcGxhdGUgPSBmdW5jdGlvbiAoZW1iZWRkZWRUZW1wbGF0ZUluZGV4LCBhdHRyTmFtZUFuZFZhbHVlcywgdmFyaWFibGVOYW1lQW5kVmFsdWVzLCBkaXJlY3RpdmVzLCBpc01lcmdlZCwgbmdDb250ZW50SW5kZXgsIGNoaWxkcmVuKSB7XHJcbiAgICAgICAgcmV0dXJuIChleHBvcnRzLlRFTVBMQVRFX0NPTU1BTkRTX01PRFVMRV9SRUYgKyBcImVtYmVkZGVkVGVtcGxhdGUoXCIgKyBjb2RlR2VuQXJyYXkoYXR0ck5hbWVBbmRWYWx1ZXMpICsgXCIsIFwiICsgY29kZUdlbkFycmF5KHZhcmlhYmxlTmFtZUFuZFZhbHVlcykgKyBcIiwgXCIpICtcclxuICAgICAgICAgICAgKGNvZGVHZW5EaXJlY3RpdmVzQXJyYXkoZGlyZWN0aXZlcykgKyBcIiwgXCIgKyBpc01lcmdlZCArIFwiLCBcIiArIG5nQ29udGVudEluZGV4ICsgXCIsIFwiICsgdGhpcy5jaGFuZ2VEZXRlY3RvckZhY3RvcnlFeHByZXNzaW9uc1tlbWJlZGRlZFRlbXBsYXRlSW5kZXhdICsgXCIsIFtcIiArIGNoaWxkcmVuLmpvaW4oJywnKSArIFwiXSlcIik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvZGVnZW5Db21tYW5kRmFjdG9yeTtcclxufSkoKTtcclxuZnVuY3Rpb24gdmlzaXRBbmRSZXR1cm5Db250ZXh0KHZpc2l0b3IsIGFzdHMsIGNvbnRleHQpIHtcclxuICAgIHRlbXBsYXRlX2FzdF8xLnRlbXBsYXRlVmlzaXRBbGwodmlzaXRvciwgYXN0cywgY29udGV4dCk7XHJcbiAgICByZXR1cm4gY29udGV4dDtcclxufVxyXG52YXIgQ29tbWFuZEJ1aWxkZXJWaXNpdG9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbW1hbmRCdWlsZGVyVmlzaXRvcihjb21tYW5kRmFjdG9yeSwgZW1iZWRkZWRUZW1wbGF0ZUluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kRmFjdG9yeSA9IGNvbW1hbmRGYWN0b3J5O1xyXG4gICAgICAgIHRoaXMuZW1iZWRkZWRUZW1wbGF0ZUluZGV4ID0gZW1iZWRkZWRUZW1wbGF0ZUluZGV4O1xyXG4gICAgICAgIHRoaXMucmVzdWx0ID0gW107XHJcbiAgICAgICAgdGhpcy50cmFuc2l0aXZlTmdDb250ZW50Q291bnQgPSAwO1xyXG4gICAgfVxyXG4gICAgQ29tbWFuZEJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS5fcmVhZEF0dHJOYW1lQW5kVmFsdWVzID0gZnVuY3Rpb24gKGRpcmVjdGl2ZXMsIGF0dHJBc3RzKSB7XHJcbiAgICAgICAgdmFyIGF0dHJzID0ga2V5VmFsdWVBcnJheVRvTWFwKHZpc2l0QW5kUmV0dXJuQ29udGV4dCh0aGlzLCBhdHRyQXN0cywgW10pKTtcclxuICAgICAgICBkaXJlY3RpdmVzLmZvckVhY2goZnVuY3Rpb24gKGRpcmVjdGl2ZU1ldGEpIHtcclxuICAgICAgICAgICAgY29sbGVjdGlvbl8xLlN0cmluZ01hcFdyYXBwZXIuZm9yRWFjaChkaXJlY3RpdmVNZXRhLmhvc3RBdHRyaWJ1dGVzLCBmdW5jdGlvbiAodmFsdWUsIG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwcmV2VmFsdWUgPSBhdHRyc1tuYW1lXTtcclxuICAgICAgICAgICAgICAgIGF0dHJzW25hbWVdID0gbGFuZ18xLmlzUHJlc2VudChwcmV2VmFsdWUpID8gbWVyZ2VBdHRyaWJ1dGVWYWx1ZShuYW1lLCBwcmV2VmFsdWUsIHZhbHVlKSA6IHZhbHVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbWFwVG9LZXlWYWx1ZUFycmF5KGF0dHJzKTtcclxuICAgIH07XHJcbiAgICBDb21tYW5kQnVpbGRlclZpc2l0b3IucHJvdG90eXBlLnZpc2l0TmdDb250ZW50ID0gZnVuY3Rpb24gKGFzdCwgY29udGV4dCkge1xyXG4gICAgICAgIHRoaXMudHJhbnNpdGl2ZU5nQ29udGVudENvdW50Kys7XHJcbiAgICAgICAgdGhpcy5yZXN1bHQucHVzaCh0aGlzLmNvbW1hbmRGYWN0b3J5LmNyZWF0ZU5nQ29udGVudChhc3QuaW5kZXgsIGFzdC5uZ0NvbnRlbnRJbmRleCkpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIENvbW1hbmRCdWlsZGVyVmlzaXRvci5wcm90b3R5cGUudmlzaXRFbWJlZGRlZFRlbXBsYXRlID0gZnVuY3Rpb24gKGFzdCwgY29udGV4dCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5lbWJlZGRlZFRlbXBsYXRlSW5kZXgrKztcclxuICAgICAgICB2YXIgY2hpbGRWaXNpdG9yID0gbmV3IENvbW1hbmRCdWlsZGVyVmlzaXRvcih0aGlzLmNvbW1hbmRGYWN0b3J5LCB0aGlzLmVtYmVkZGVkVGVtcGxhdGVJbmRleCk7XHJcbiAgICAgICAgdGVtcGxhdGVfYXN0XzEudGVtcGxhdGVWaXNpdEFsbChjaGlsZFZpc2l0b3IsIGFzdC5jaGlsZHJlbik7XHJcbiAgICAgICAgdmFyIGlzTWVyZ2VkID0gY2hpbGRWaXNpdG9yLnRyYW5zaXRpdmVOZ0NvbnRlbnRDb3VudCA+IDA7XHJcbiAgICAgICAgdmFyIHZhcmlhYmxlTmFtZUFuZFZhbHVlcyA9IFtdO1xyXG4gICAgICAgIGFzdC52YXJzLmZvckVhY2goZnVuY3Rpb24gKHZhckFzdCkge1xyXG4gICAgICAgICAgICB2YXJpYWJsZU5hbWVBbmRWYWx1ZXMucHVzaCh2YXJBc3QubmFtZSk7XHJcbiAgICAgICAgICAgIHZhcmlhYmxlTmFtZUFuZFZhbHVlcy5wdXNoKHZhckFzdC52YWx1ZS5sZW5ndGggPiAwID8gdmFyQXN0LnZhbHVlIDogSU1QTElDSVRfVEVNUExBVEVfVkFSKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgZGlyZWN0aXZlcyA9IFtdO1xyXG4gICAgICAgIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5mb3JFYWNoV2l0aEluZGV4KGFzdC5kaXJlY3RpdmVzLCBmdW5jdGlvbiAoZGlyZWN0aXZlQXN0LCBpbmRleCkge1xyXG4gICAgICAgICAgICBkaXJlY3RpdmVBc3QudmlzaXQoX3RoaXMsIG5ldyBEaXJlY3RpdmVDb250ZXh0KGluZGV4LCBbXSwgW10sIGRpcmVjdGl2ZXMpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnJlc3VsdC5wdXNoKHRoaXMuY29tbWFuZEZhY3RvcnkuY3JlYXRlRW1iZWRkZWRUZW1wbGF0ZSh0aGlzLmVtYmVkZGVkVGVtcGxhdGVJbmRleCwgdGhpcy5fcmVhZEF0dHJOYW1lQW5kVmFsdWVzKGRpcmVjdGl2ZXMsIGFzdC5hdHRycyksIHZhcmlhYmxlTmFtZUFuZFZhbHVlcywgZGlyZWN0aXZlcywgaXNNZXJnZWQsIGFzdC5uZ0NvbnRlbnRJbmRleCwgY2hpbGRWaXNpdG9yLnJlc3VsdCkpO1xyXG4gICAgICAgIHRoaXMudHJhbnNpdGl2ZU5nQ29udGVudENvdW50ICs9IGNoaWxkVmlzaXRvci50cmFuc2l0aXZlTmdDb250ZW50Q291bnQ7XHJcbiAgICAgICAgdGhpcy5lbWJlZGRlZFRlbXBsYXRlSW5kZXggPSBjaGlsZFZpc2l0b3IuZW1iZWRkZWRUZW1wbGF0ZUluZGV4O1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIENvbW1hbmRCdWlsZGVyVmlzaXRvci5wcm90b3R5cGUudmlzaXRFbGVtZW50ID0gZnVuY3Rpb24gKGFzdCwgY29udGV4dCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IGFzdC5nZXRDb21wb25lbnQoKTtcclxuICAgICAgICB2YXIgZXZlbnRUYXJnZXRBbmROYW1lcyA9IHZpc2l0QW5kUmV0dXJuQ29udGV4dCh0aGlzLCBhc3Qub3V0cHV0cywgW10pO1xyXG4gICAgICAgIHZhciB2YXJpYWJsZU5hbWVBbmRWYWx1ZXMgPSBbXTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoY29tcG9uZW50KSkge1xyXG4gICAgICAgICAgICBhc3QuZXhwb3J0QXNWYXJzLmZvckVhY2goZnVuY3Rpb24gKHZhckFzdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyaWFibGVOYW1lQW5kVmFsdWVzLnB1c2godmFyQXN0Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgdmFyaWFibGVOYW1lQW5kVmFsdWVzLnB1c2gobnVsbCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGlyZWN0aXZlcyA9IFtdO1xyXG4gICAgICAgIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5mb3JFYWNoV2l0aEluZGV4KGFzdC5kaXJlY3RpdmVzLCBmdW5jdGlvbiAoZGlyZWN0aXZlQXN0LCBpbmRleCkge1xyXG4gICAgICAgICAgICBkaXJlY3RpdmVBc3QudmlzaXQoX3RoaXMsIG5ldyBEaXJlY3RpdmVDb250ZXh0KGluZGV4LCBldmVudFRhcmdldEFuZE5hbWVzLCB2YXJpYWJsZU5hbWVBbmRWYWx1ZXMsIGRpcmVjdGl2ZXMpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBldmVudFRhcmdldEFuZE5hbWVzID0gcmVtb3ZlS2V5VmFsdWVBcnJheUR1cGxpY2F0ZXMoZXZlbnRUYXJnZXRBbmROYW1lcyk7XHJcbiAgICAgICAgdmFyIGF0dHJOYW1lQW5kVmFsdWVzID0gdGhpcy5fcmVhZEF0dHJOYW1lQW5kVmFsdWVzKGRpcmVjdGl2ZXMsIGFzdC5hdHRycyk7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoY29tcG9uZW50KSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc3VsdC5wdXNoKHRoaXMuY29tbWFuZEZhY3RvcnkuY3JlYXRlQmVnaW5Db21wb25lbnQoYXN0Lm5hbWUsIGF0dHJOYW1lQW5kVmFsdWVzLCBldmVudFRhcmdldEFuZE5hbWVzLCB2YXJpYWJsZU5hbWVBbmRWYWx1ZXMsIGRpcmVjdGl2ZXMsIGNvbXBvbmVudC50ZW1wbGF0ZS5lbmNhcHN1bGF0aW9uID09PSB2aWV3XzEuVmlld0VuY2Fwc3VsYXRpb24uTmF0aXZlLCBhc3QubmdDb250ZW50SW5kZXgpKTtcclxuICAgICAgICAgICAgdGVtcGxhdGVfYXN0XzEudGVtcGxhdGVWaXNpdEFsbCh0aGlzLCBhc3QuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICB0aGlzLnJlc3VsdC5wdXNoKHRoaXMuY29tbWFuZEZhY3RvcnkuY3JlYXRlRW5kQ29tcG9uZW50KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yZXN1bHQucHVzaCh0aGlzLmNvbW1hbmRGYWN0b3J5LmNyZWF0ZUJlZ2luRWxlbWVudChhc3QubmFtZSwgYXR0ck5hbWVBbmRWYWx1ZXMsIGV2ZW50VGFyZ2V0QW5kTmFtZXMsIHZhcmlhYmxlTmFtZUFuZFZhbHVlcywgZGlyZWN0aXZlcywgYXN0LmlzQm91bmQoKSwgYXN0Lm5nQ29udGVudEluZGV4KSk7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlX2FzdF8xLnRlbXBsYXRlVmlzaXRBbGwodGhpcywgYXN0LmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgdGhpcy5yZXN1bHQucHVzaCh0aGlzLmNvbW1hbmRGYWN0b3J5LmNyZWF0ZUVuZEVsZW1lbnQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIENvbW1hbmRCdWlsZGVyVmlzaXRvci5wcm90b3R5cGUudmlzaXRWYXJpYWJsZSA9IGZ1bmN0aW9uIChhc3QsIGN0eCkgeyByZXR1cm4gbnVsbDsgfTtcclxuICAgIENvbW1hbmRCdWlsZGVyVmlzaXRvci5wcm90b3R5cGUudmlzaXRBdHRyID0gZnVuY3Rpb24gKGFzdCwgYXR0ck5hbWVBbmRWYWx1ZXMpIHtcclxuICAgICAgICBhdHRyTmFtZUFuZFZhbHVlcy5wdXNoKGFzdC5uYW1lKTtcclxuICAgICAgICBhdHRyTmFtZUFuZFZhbHVlcy5wdXNoKGFzdC52YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgQ29tbWFuZEJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdEJvdW5kVGV4dCA9IGZ1bmN0aW9uIChhc3QsIGNvbnRleHQpIHtcclxuICAgICAgICB0aGlzLnJlc3VsdC5wdXNoKHRoaXMuY29tbWFuZEZhY3RvcnkuY3JlYXRlVGV4dChudWxsLCB0cnVlLCBhc3QubmdDb250ZW50SW5kZXgpKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBDb21tYW5kQnVpbGRlclZpc2l0b3IucHJvdG90eXBlLnZpc2l0VGV4dCA9IGZ1bmN0aW9uIChhc3QsIGNvbnRleHQpIHtcclxuICAgICAgICB0aGlzLnJlc3VsdC5wdXNoKHRoaXMuY29tbWFuZEZhY3RvcnkuY3JlYXRlVGV4dChhc3QudmFsdWUsIGZhbHNlLCBhc3QubmdDb250ZW50SW5kZXgpKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBDb21tYW5kQnVpbGRlclZpc2l0b3IucHJvdG90eXBlLnZpc2l0RGlyZWN0aXZlID0gZnVuY3Rpb24gKGFzdCwgY3R4KSB7XHJcbiAgICAgICAgY3R4LnRhcmdldERpcmVjdGl2ZXMucHVzaChhc3QuZGlyZWN0aXZlKTtcclxuICAgICAgICB0ZW1wbGF0ZV9hc3RfMS50ZW1wbGF0ZVZpc2l0QWxsKHRoaXMsIGFzdC5ob3N0RXZlbnRzLCBjdHguZXZlbnRUYXJnZXRBbmROYW1lcyk7XHJcbiAgICAgICAgYXN0LmV4cG9ydEFzVmFycy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJBc3QpIHtcclxuICAgICAgICAgICAgY3R4LnRhcmdldFZhcmlhYmxlTmFtZUFuZFZhbHVlcy5wdXNoKHZhckFzdC5uYW1lKTtcclxuICAgICAgICAgICAgY3R4LnRhcmdldFZhcmlhYmxlTmFtZUFuZFZhbHVlcy5wdXNoKGN0eC5pbmRleCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgQ29tbWFuZEJ1aWxkZXJWaXNpdG9yLnByb3RvdHlwZS52aXNpdEV2ZW50ID0gZnVuY3Rpb24gKGFzdCwgZXZlbnRUYXJnZXRBbmROYW1lcykge1xyXG4gICAgICAgIGV2ZW50VGFyZ2V0QW5kTmFtZXMucHVzaChhc3QudGFyZ2V0KTtcclxuICAgICAgICBldmVudFRhcmdldEFuZE5hbWVzLnB1c2goYXN0Lm5hbWUpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIENvbW1hbmRCdWlsZGVyVmlzaXRvci5wcm90b3R5cGUudmlzaXREaXJlY3RpdmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChhc3QsIGNvbnRleHQpIHsgcmV0dXJuIG51bGw7IH07XHJcbiAgICBDb21tYW5kQnVpbGRlclZpc2l0b3IucHJvdG90eXBlLnZpc2l0RWxlbWVudFByb3BlcnR5ID0gZnVuY3Rpb24gKGFzdCwgY29udGV4dCkgeyByZXR1cm4gbnVsbDsgfTtcclxuICAgIHJldHVybiBDb21tYW5kQnVpbGRlclZpc2l0b3I7XHJcbn0pKCk7XHJcbmZ1bmN0aW9uIHJlbW92ZUtleVZhbHVlQXJyYXlEdXBsaWNhdGVzKGtleVZhbHVlQXJyYXkpIHtcclxuICAgIHZhciBrbm93blBhaXJzID0gbmV3IFNldCgpO1xyXG4gICAgdmFyIHJlc3VsdEtleVZhbHVlQXJyYXkgPSBbXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5VmFsdWVBcnJheS5sZW5ndGg7IGkgKz0gMikge1xyXG4gICAgICAgIHZhciBrZXkgPSBrZXlWYWx1ZUFycmF5W2ldO1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IGtleVZhbHVlQXJyYXlbaSArIDFdO1xyXG4gICAgICAgIHZhciBwYWlySWQgPSBrZXkgKyBcIjpcIiArIHZhbHVlO1xyXG4gICAgICAgIGlmICghY29sbGVjdGlvbl8xLlNldFdyYXBwZXIuaGFzKGtub3duUGFpcnMsIHBhaXJJZCkpIHtcclxuICAgICAgICAgICAgcmVzdWx0S2V5VmFsdWVBcnJheS5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgIHJlc3VsdEtleVZhbHVlQXJyYXkucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIGtub3duUGFpcnMuYWRkKHBhaXJJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdEtleVZhbHVlQXJyYXk7XHJcbn1cclxuZnVuY3Rpb24ga2V5VmFsdWVBcnJheVRvTWFwKGtleVZhbHVlQXJyKSB7XHJcbiAgICB2YXIgZGF0YSA9IHt9O1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlWYWx1ZUFyci5sZW5ndGg7IGkgKz0gMikge1xyXG4gICAgICAgIGRhdGFba2V5VmFsdWVBcnJbaV1dID0ga2V5VmFsdWVBcnJbaSArIDFdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbn1cclxuZnVuY3Rpb24gbWFwVG9LZXlWYWx1ZUFycmF5KGRhdGEpIHtcclxuICAgIHZhciBlbnRyeUFycmF5ID0gW107XHJcbiAgICBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5mb3JFYWNoKGRhdGEsIGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSkgeyBlbnRyeUFycmF5LnB1c2goW25hbWUsIHZhbHVlXSk7IH0pO1xyXG4gICAgLy8gV2UgbmVlZCB0byBzb3J0IHRvIGdldCBhIGRlZmluZWQgb3V0cHV0IG9yZGVyXHJcbiAgICAvLyBmb3IgdGVzdHMgYW5kIGZvciBjYWNoaW5nIGdlbmVyYXRlZCBhcnRpZmFjdHMuLi5cclxuICAgIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5zb3J0KGVudHJ5QXJyYXksIGZ1bmN0aW9uIChlbnRyeTEsIGVudHJ5MikgeyByZXR1cm4gbGFuZ18xLlN0cmluZ1dyYXBwZXIuY29tcGFyZShlbnRyeTFbMF0sIGVudHJ5MlswXSk7IH0pO1xyXG4gICAgdmFyIGtleVZhbHVlQXJyYXkgPSBbXTtcclxuICAgIGVudHJ5QXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgICAgICBrZXlWYWx1ZUFycmF5LnB1c2goZW50cnlbMF0pO1xyXG4gICAgICAgIGtleVZhbHVlQXJyYXkucHVzaChlbnRyeVsxXSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBrZXlWYWx1ZUFycmF5O1xyXG59XHJcbmZ1bmN0aW9uIG1lcmdlQXR0cmlidXRlVmFsdWUoYXR0ck5hbWUsIGF0dHJWYWx1ZTEsIGF0dHJWYWx1ZTIpIHtcclxuICAgIGlmIChhdHRyTmFtZSA9PSBDTEFTU19BVFRSIHx8IGF0dHJOYW1lID09IFNUWUxFX0FUVFIpIHtcclxuICAgICAgICByZXR1cm4gYXR0clZhbHVlMSArIFwiIFwiICsgYXR0clZhbHVlMjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBhdHRyVmFsdWUyO1xyXG4gICAgfVxyXG59XHJcbnZhciBEaXJlY3RpdmVDb250ZXh0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERpcmVjdGl2ZUNvbnRleHQoaW5kZXgsIGV2ZW50VGFyZ2V0QW5kTmFtZXMsIHRhcmdldFZhcmlhYmxlTmFtZUFuZFZhbHVlcywgdGFyZ2V0RGlyZWN0aXZlcykge1xyXG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcclxuICAgICAgICB0aGlzLmV2ZW50VGFyZ2V0QW5kTmFtZXMgPSBldmVudFRhcmdldEFuZE5hbWVzO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0VmFyaWFibGVOYW1lQW5kVmFsdWVzID0gdGFyZ2V0VmFyaWFibGVOYW1lQW5kVmFsdWVzO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0RGlyZWN0aXZlcyA9IHRhcmdldERpcmVjdGl2ZXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRGlyZWN0aXZlQ29udGV4dDtcclxufSkoKTtcclxudmFyIEV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRXhwcmVzc2lvbih2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBFeHByZXNzaW9uO1xyXG59KSgpO1xyXG5mdW5jdGlvbiBlc2NhcGVWYWx1ZSh2YWx1ZSkge1xyXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRXhwcmVzc2lvbikge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS52YWx1ZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGxhbmdfMS5pc1N0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdXRpbF8xLmVzY2FwZVNpbmdsZVF1b3RlU3RyaW5nKHZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGxhbmdfMS5pc0JsYW5rKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiAnbnVsbCc7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gXCJcIiArIHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNvZGVHZW5BcnJheShkYXRhKSB7XHJcbiAgICByZXR1cm4gXCJbXCIgKyBkYXRhLm1hcChlc2NhcGVWYWx1ZSkuam9pbignLCcpICsgXCJdXCI7XHJcbn1cclxuZnVuY3Rpb24gY29kZUdlbkRpcmVjdGl2ZXNBcnJheShkaXJlY3RpdmVzKSB7XHJcbiAgICB2YXIgZXhwcmVzc2lvbnMgPSBkaXJlY3RpdmVzLm1hcChmdW5jdGlvbiAoZGlyZWN0aXZlVHlwZSkgeyByZXR1cm4gKFwiXCIgKyBzb3VyY2VfbW9kdWxlXzEubW9kdWxlUmVmKGRpcmVjdGl2ZVR5cGUudHlwZS5tb2R1bGVVcmwpICsgZGlyZWN0aXZlVHlwZS50eXBlLm5hbWUpOyB9KTtcclxuICAgIHJldHVybiBcIltcIiArIGV4cHJlc3Npb25zLmpvaW4oJywnKSArIFwiXVwiO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1hbmRfY29tcGlsZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBydW50aW1lX2NvbXBpbGVyXzEgPSByZXF1aXJlKFwiLi9ydW50aW1lX2NvbXBpbGVyXCIpO1xyXG52YXIgdGVtcGxhdGVfY29tcGlsZXJfMSA9IHJlcXVpcmUoJy4vdGVtcGxhdGVfY29tcGlsZXInKTtcclxuZXhwb3J0cy5UZW1wbGF0ZUNvbXBpbGVyID0gdGVtcGxhdGVfY29tcGlsZXJfMS5UZW1wbGF0ZUNvbXBpbGVyO1xyXG52YXIgZGlyZWN0aXZlX21ldGFkYXRhXzEgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZV9tZXRhZGF0YScpO1xyXG5leHBvcnRzLkNvbXBpbGVEaXJlY3RpdmVNZXRhZGF0YSA9IGRpcmVjdGl2ZV9tZXRhZGF0YV8xLkNvbXBpbGVEaXJlY3RpdmVNZXRhZGF0YTtcclxuZXhwb3J0cy5Db21waWxlVHlwZU1ldGFkYXRhID0gZGlyZWN0aXZlX21ldGFkYXRhXzEuQ29tcGlsZVR5cGVNZXRhZGF0YTtcclxuZXhwb3J0cy5Db21waWxlVGVtcGxhdGVNZXRhZGF0YSA9IGRpcmVjdGl2ZV9tZXRhZGF0YV8xLkNvbXBpbGVUZW1wbGF0ZU1ldGFkYXRhO1xyXG52YXIgc291cmNlX21vZHVsZV8xID0gcmVxdWlyZSgnLi9zb3VyY2VfbW9kdWxlJyk7XHJcbmV4cG9ydHMuU291cmNlTW9kdWxlID0gc291cmNlX21vZHVsZV8xLlNvdXJjZU1vZHVsZTtcclxuZXhwb3J0cy5Tb3VyY2VXaXRoSW1wb3J0cyA9IHNvdXJjZV9tb2R1bGVfMS5Tb3VyY2VXaXRoSW1wb3J0cztcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIHRlbXBsYXRlX3BhcnNlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvdGVtcGxhdGVfcGFyc2VyJyk7XHJcbnZhciBodG1sX3BhcnNlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvaHRtbF9wYXJzZXInKTtcclxudmFyIHRlbXBsYXRlX25vcm1hbGl6ZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL3RlbXBsYXRlX25vcm1hbGl6ZXInKTtcclxudmFyIHJ1bnRpbWVfbWV0YWRhdGFfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL3J1bnRpbWVfbWV0YWRhdGEnKTtcclxudmFyIGNoYW5nZV9kZXRlY3Rvcl9jb21waWxlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvY2hhbmdlX2RldGVjdG9yX2NvbXBpbGVyJyk7XHJcbnZhciBzdHlsZV9jb21waWxlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvc3R5bGVfY29tcGlsZXInKTtcclxudmFyIGNvbW1hbmRfY29tcGlsZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL2NvbW1hbmRfY29tcGlsZXInKTtcclxudmFyIHRlbXBsYXRlX2NvbXBpbGVyXzIgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci90ZW1wbGF0ZV9jb21waWxlcicpO1xyXG52YXIgY2hhbmdlX2RldGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9jaGFuZ2VfZGV0ZWN0aW9uJyk7XHJcbnZhciBjb21waWxlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL2NvbXBpbGVyJyk7XHJcbnZhciBydW50aW1lX2NvbXBpbGVyXzIgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci9ydW50aW1lX2NvbXBpbGVyJyk7XHJcbnZhciBlbGVtZW50X3NjaGVtYV9yZWdpc3RyeV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvc2NoZW1hL2VsZW1lbnRfc2NoZW1hX3JlZ2lzdHJ5Jyk7XHJcbnZhciBkb21fZWxlbWVudF9zY2hlbWFfcmVnaXN0cnlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL3NjaGVtYS9kb21fZWxlbWVudF9zY2hlbWFfcmVnaXN0cnknKTtcclxudmFyIHVybF9yZXNvbHZlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvdXJsX3Jlc29sdmVyJyk7XHJcbnZhciBhcHBfcm9vdF91cmxfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL2FwcF9yb290X3VybCcpO1xyXG52YXIgYW5jaG9yX2Jhc2VkX2FwcF9yb290X3VybF8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvYW5jaG9yX2Jhc2VkX2FwcF9yb290X3VybCcpO1xyXG52YXIgY2hhbmdlX2RldGVjdGlvbl8yID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9jaGFuZ2VfZGV0ZWN0aW9uJyk7XHJcbmZ1bmN0aW9uIGNvbXBpbGVyUHJvdmlkZXJzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICBjaGFuZ2VfZGV0ZWN0aW9uXzIuTGV4ZXIsXHJcbiAgICAgICAgY2hhbmdlX2RldGVjdGlvbl8yLlBhcnNlcixcclxuICAgICAgICBodG1sX3BhcnNlcl8xLkh0bWxQYXJzZXIsXHJcbiAgICAgICAgdGVtcGxhdGVfcGFyc2VyXzEuVGVtcGxhdGVQYXJzZXIsXHJcbiAgICAgICAgdGVtcGxhdGVfbm9ybWFsaXplcl8xLlRlbXBsYXRlTm9ybWFsaXplcixcclxuICAgICAgICBydW50aW1lX21ldGFkYXRhXzEuUnVudGltZU1ldGFkYXRhUmVzb2x2ZXIsXHJcbiAgICAgICAgc3R5bGVfY29tcGlsZXJfMS5TdHlsZUNvbXBpbGVyLFxyXG4gICAgICAgIGNvbW1hbmRfY29tcGlsZXJfMS5Db21tYW5kQ29tcGlsZXIsXHJcbiAgICAgICAgY2hhbmdlX2RldGVjdG9yX2NvbXBpbGVyXzEuQ2hhbmdlRGV0ZWN0aW9uQ29tcGlsZXIsXHJcbiAgICAgICAgZGlfMS5wcm92aWRlKGNoYW5nZV9kZXRlY3Rpb25fMS5DaGFuZ2VEZXRlY3RvckdlbkNvbmZpZywge1xyXG4gICAgICAgICAgICB1c2VWYWx1ZTogbmV3IGNoYW5nZV9kZXRlY3Rpb25fMS5DaGFuZ2VEZXRlY3RvckdlbkNvbmZpZyhsYW5nXzEuYXNzZXJ0aW9uc0VuYWJsZWQoKSwgbGFuZ18xLmFzc2VydGlvbnNFbmFibGVkKCksIGZhbHNlLCB0cnVlKVxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIHRlbXBsYXRlX2NvbXBpbGVyXzIuVGVtcGxhdGVDb21waWxlcixcclxuICAgICAgICBkaV8xLnByb3ZpZGUocnVudGltZV9jb21waWxlcl8yLlJ1bnRpbWVDb21waWxlciwgeyB1c2VDbGFzczogcnVudGltZV9jb21waWxlcl8xLlJ1bnRpbWVDb21waWxlcl8gfSksXHJcbiAgICAgICAgZGlfMS5wcm92aWRlKGNvbXBpbGVyXzEuQ29tcGlsZXIsIHsgdXNlRXhpc3Rpbmc6IHJ1bnRpbWVfY29tcGlsZXJfMi5SdW50aW1lQ29tcGlsZXIgfSksXHJcbiAgICAgICAgZG9tX2VsZW1lbnRfc2NoZW1hX3JlZ2lzdHJ5XzEuRG9tRWxlbWVudFNjaGVtYVJlZ2lzdHJ5LFxyXG4gICAgICAgIGRpXzEucHJvdmlkZShlbGVtZW50X3NjaGVtYV9yZWdpc3RyeV8xLkVsZW1lbnRTY2hlbWFSZWdpc3RyeSwgeyB1c2VFeGlzdGluZzogZG9tX2VsZW1lbnRfc2NoZW1hX3JlZ2lzdHJ5XzEuRG9tRWxlbWVudFNjaGVtYVJlZ2lzdHJ5IH0pLFxyXG4gICAgICAgIGFuY2hvcl9iYXNlZF9hcHBfcm9vdF91cmxfMS5BbmNob3JCYXNlZEFwcFJvb3RVcmwsXHJcbiAgICAgICAgZGlfMS5wcm92aWRlKGFwcF9yb290X3VybF8xLkFwcFJvb3RVcmwsIHsgdXNlRXhpc3Rpbmc6IGFuY2hvcl9iYXNlZF9hcHBfcm9vdF91cmxfMS5BbmNob3JCYXNlZEFwcFJvb3RVcmwgfSksXHJcbiAgICAgICAgdXJsX3Jlc29sdmVyXzEuVXJsUmVzb2x2ZXJcclxuICAgIF07XHJcbn1cclxuZXhwb3J0cy5jb21waWxlclByb3ZpZGVycyA9IGNvbXBpbGVyUHJvdmlkZXJzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21waWxlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgY2hhbmdlX2RldGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9jaGFuZ2VfZGV0ZWN0aW9uJyk7XHJcbnZhciB2aWV3XzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YS92aWV3Jyk7XHJcbnZhciBzZWxlY3Rvcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvc2VsZWN0b3InKTtcclxudmFyIHV0aWxfMSA9IHJlcXVpcmUoJy4vdXRpbCcpO1xyXG52YXIgaW50ZXJmYWNlc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL2ludGVyZmFjZXMnKTtcclxuLy8gZ3JvdXAgMTogXCJwcm9wZXJ0eVwiIGZyb20gXCJbcHJvcGVydHldXCJcclxuLy8gZ3JvdXAgMjogXCJldmVudFwiIGZyb20gXCIoZXZlbnQpXCJcclxudmFyIEhPU1RfUkVHX0VYUCA9IC9eKD86KD86XFxbKFteXFxdXSspXFxdKXwoPzpcXCgoW15cXCldKylcXCkpKSQvZztcclxudmFyIENvbXBpbGVUeXBlTWV0YWRhdGEgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ29tcGlsZVR5cGVNZXRhZGF0YShfYSkge1xyXG4gICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBydW50aW1lID0gX2IucnVudGltZSwgbmFtZSA9IF9iLm5hbWUsIG1vZHVsZVVybCA9IF9iLm1vZHVsZVVybCwgaXNIb3N0ID0gX2IuaXNIb3N0O1xyXG4gICAgICAgIHRoaXMucnVudGltZSA9IHJ1bnRpbWU7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLm1vZHVsZVVybCA9IG1vZHVsZVVybDtcclxuICAgICAgICB0aGlzLmlzSG9zdCA9IGxhbmdfMS5ub3JtYWxpemVCb29sKGlzSG9zdCk7XHJcbiAgICB9XHJcbiAgICBDb21waWxlVHlwZU1ldGFkYXRhLmZyb21Kc29uID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVUeXBlTWV0YWRhdGEoeyBuYW1lOiBkYXRhWyduYW1lJ10sIG1vZHVsZVVybDogZGF0YVsnbW9kdWxlVXJsJ10sIGlzSG9zdDogZGF0YVsnaXNIb3N0J10gfSk7XHJcbiAgICB9O1xyXG4gICAgQ29tcGlsZVR5cGVNZXRhZGF0YS5wcm90b3R5cGUudG9Kc29uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC8vIE5vdGU6IFJ1bnRpbWUgdHlwZSBjYW4ndCBiZSBzZXJpYWxpemVkLi4uXHJcbiAgICAgICAgICAgICduYW1lJzogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICAnbW9kdWxlVXJsJzogdGhpcy5tb2R1bGVVcmwsXHJcbiAgICAgICAgICAgICdpc0hvc3QnOiB0aGlzLmlzSG9zdFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvbXBpbGVUeXBlTWV0YWRhdGE7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQ29tcGlsZVR5cGVNZXRhZGF0YSA9IENvbXBpbGVUeXBlTWV0YWRhdGE7XHJcbnZhciBDb21waWxlVGVtcGxhdGVNZXRhZGF0YSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb21waWxlVGVtcGxhdGVNZXRhZGF0YShfYSkge1xyXG4gICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBlbmNhcHN1bGF0aW9uID0gX2IuZW5jYXBzdWxhdGlvbiwgdGVtcGxhdGUgPSBfYi50ZW1wbGF0ZSwgdGVtcGxhdGVVcmwgPSBfYi50ZW1wbGF0ZVVybCwgc3R5bGVzID0gX2Iuc3R5bGVzLCBzdHlsZVVybHMgPSBfYi5zdHlsZVVybHMsIG5nQ29udGVudFNlbGVjdG9ycyA9IF9iLm5nQ29udGVudFNlbGVjdG9ycztcclxuICAgICAgICB0aGlzLmVuY2Fwc3VsYXRpb24gPSBsYW5nXzEuaXNQcmVzZW50KGVuY2Fwc3VsYXRpb24pID8gZW5jYXBzdWxhdGlvbiA6IHZpZXdfMS5WaWV3RW5jYXBzdWxhdGlvbi5FbXVsYXRlZDtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVVybCA9IHRlbXBsYXRlVXJsO1xyXG4gICAgICAgIHRoaXMuc3R5bGVzID0gbGFuZ18xLmlzUHJlc2VudChzdHlsZXMpID8gc3R5bGVzIDogW107XHJcbiAgICAgICAgdGhpcy5zdHlsZVVybHMgPSBsYW5nXzEuaXNQcmVzZW50KHN0eWxlVXJscykgPyBzdHlsZVVybHMgOiBbXTtcclxuICAgICAgICB0aGlzLm5nQ29udGVudFNlbGVjdG9ycyA9IGxhbmdfMS5pc1ByZXNlbnQobmdDb250ZW50U2VsZWN0b3JzKSA/IG5nQ29udGVudFNlbGVjdG9ycyA6IFtdO1xyXG4gICAgfVxyXG4gICAgQ29tcGlsZVRlbXBsYXRlTWV0YWRhdGEuZnJvbUpzb24gPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29tcGlsZVRlbXBsYXRlTWV0YWRhdGEoe1xyXG4gICAgICAgICAgICBlbmNhcHN1bGF0aW9uOiBsYW5nXzEuaXNQcmVzZW50KGRhdGFbJ2VuY2Fwc3VsYXRpb24nXSkgP1xyXG4gICAgICAgICAgICAgICAgdmlld18xLlZJRVdfRU5DQVBTVUxBVElPTl9WQUxVRVNbZGF0YVsnZW5jYXBzdWxhdGlvbiddXSA6XHJcbiAgICAgICAgICAgICAgICBkYXRhWydlbmNhcHN1bGF0aW9uJ10sXHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiBkYXRhWyd0ZW1wbGF0ZSddLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogZGF0YVsndGVtcGxhdGVVcmwnXSxcclxuICAgICAgICAgICAgc3R5bGVzOiBkYXRhWydzdHlsZXMnXSxcclxuICAgICAgICAgICAgc3R5bGVVcmxzOiBkYXRhWydzdHlsZVVybHMnXSxcclxuICAgICAgICAgICAgbmdDb250ZW50U2VsZWN0b3JzOiBkYXRhWyduZ0NvbnRlbnRTZWxlY3RvcnMnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIENvbXBpbGVUZW1wbGF0ZU1ldGFkYXRhLnByb3RvdHlwZS50b0pzb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ2VuY2Fwc3VsYXRpb24nOiBsYW5nXzEuaXNQcmVzZW50KHRoaXMuZW5jYXBzdWxhdGlvbikgPyBsYW5nXzEuc2VyaWFsaXplRW51bSh0aGlzLmVuY2Fwc3VsYXRpb24pIDogdGhpcy5lbmNhcHN1bGF0aW9uLFxyXG4gICAgICAgICAgICAndGVtcGxhdGUnOiB0aGlzLnRlbXBsYXRlLFxyXG4gICAgICAgICAgICAndGVtcGxhdGVVcmwnOiB0aGlzLnRlbXBsYXRlVXJsLFxyXG4gICAgICAgICAgICAnc3R5bGVzJzogdGhpcy5zdHlsZXMsXHJcbiAgICAgICAgICAgICdzdHlsZVVybHMnOiB0aGlzLnN0eWxlVXJscyxcclxuICAgICAgICAgICAgJ25nQ29udGVudFNlbGVjdG9ycyc6IHRoaXMubmdDb250ZW50U2VsZWN0b3JzXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29tcGlsZVRlbXBsYXRlTWV0YWRhdGE7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQ29tcGlsZVRlbXBsYXRlTWV0YWRhdGEgPSBDb21waWxlVGVtcGxhdGVNZXRhZGF0YTtcclxudmFyIENvbXBpbGVEaXJlY3RpdmVNZXRhZGF0YSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb21waWxlRGlyZWN0aXZlTWV0YWRhdGEoX2EpIHtcclxuICAgICAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgdHlwZSA9IF9iLnR5cGUsIGlzQ29tcG9uZW50ID0gX2IuaXNDb21wb25lbnQsIGR5bmFtaWNMb2FkYWJsZSA9IF9iLmR5bmFtaWNMb2FkYWJsZSwgc2VsZWN0b3IgPSBfYi5zZWxlY3RvciwgZXhwb3J0QXMgPSBfYi5leHBvcnRBcywgY2hhbmdlRGV0ZWN0aW9uID0gX2IuY2hhbmdlRGV0ZWN0aW9uLCBpbnB1dHMgPSBfYi5pbnB1dHMsIG91dHB1dHMgPSBfYi5vdXRwdXRzLCBob3N0TGlzdGVuZXJzID0gX2IuaG9zdExpc3RlbmVycywgaG9zdFByb3BlcnRpZXMgPSBfYi5ob3N0UHJvcGVydGllcywgaG9zdEF0dHJpYnV0ZXMgPSBfYi5ob3N0QXR0cmlidXRlcywgbGlmZWN5Y2xlSG9va3MgPSBfYi5saWZlY3ljbGVIb29rcywgdGVtcGxhdGUgPSBfYi50ZW1wbGF0ZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMuaXNDb21wb25lbnQgPSBpc0NvbXBvbmVudDtcclxuICAgICAgICB0aGlzLmR5bmFtaWNMb2FkYWJsZSA9IGR5bmFtaWNMb2FkYWJsZTtcclxuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XHJcbiAgICAgICAgdGhpcy5leHBvcnRBcyA9IGV4cG9ydEFzO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0aW9uID0gY2hhbmdlRGV0ZWN0aW9uO1xyXG4gICAgICAgIHRoaXMuaW5wdXRzID0gaW5wdXRzO1xyXG4gICAgICAgIHRoaXMub3V0cHV0cyA9IG91dHB1dHM7XHJcbiAgICAgICAgdGhpcy5ob3N0TGlzdGVuZXJzID0gaG9zdExpc3RlbmVycztcclxuICAgICAgICB0aGlzLmhvc3RQcm9wZXJ0aWVzID0gaG9zdFByb3BlcnRpZXM7XHJcbiAgICAgICAgdGhpcy5ob3N0QXR0cmlidXRlcyA9IGhvc3RBdHRyaWJ1dGVzO1xyXG4gICAgICAgIHRoaXMubGlmZWN5Y2xlSG9va3MgPSBsaWZlY3ljbGVIb29rcztcclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XHJcbiAgICB9XHJcbiAgICBDb21waWxlRGlyZWN0aXZlTWV0YWRhdGEuY3JlYXRlID0gZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIHR5cGUgPSBfYi50eXBlLCBpc0NvbXBvbmVudCA9IF9iLmlzQ29tcG9uZW50LCBkeW5hbWljTG9hZGFibGUgPSBfYi5keW5hbWljTG9hZGFibGUsIHNlbGVjdG9yID0gX2Iuc2VsZWN0b3IsIGV4cG9ydEFzID0gX2IuZXhwb3J0QXMsIGNoYW5nZURldGVjdGlvbiA9IF9iLmNoYW5nZURldGVjdGlvbiwgaW5wdXRzID0gX2IuaW5wdXRzLCBvdXRwdXRzID0gX2Iub3V0cHV0cywgaG9zdCA9IF9iLmhvc3QsIGxpZmVjeWNsZUhvb2tzID0gX2IubGlmZWN5Y2xlSG9va3MsIHRlbXBsYXRlID0gX2IudGVtcGxhdGU7XHJcbiAgICAgICAgdmFyIGhvc3RMaXN0ZW5lcnMgPSB7fTtcclxuICAgICAgICB2YXIgaG9zdFByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICB2YXIgaG9zdEF0dHJpYnV0ZXMgPSB7fTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChob3N0KSkge1xyXG4gICAgICAgICAgICBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5mb3JFYWNoKGhvc3QsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IGxhbmdfMS5SZWdFeHBXcmFwcGVyLmZpcnN0TWF0Y2goSE9TVF9SRUdfRVhQLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKG1hdGNoZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdEF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobGFuZ18xLmlzUHJlc2VudChtYXRjaGVzWzFdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvc3RQcm9wZXJ0aWVzW21hdGNoZXNbMV1dID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChsYW5nXzEuaXNQcmVzZW50KG1hdGNoZXNbMl0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdExpc3RlbmVyc1ttYXRjaGVzWzJdXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGlucHV0c01hcCA9IHt9O1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGlucHV0cykpIHtcclxuICAgICAgICAgICAgaW5wdXRzLmZvckVhY2goZnVuY3Rpb24gKGJpbmRDb25maWcpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNhbm9uaWNhbCBzeW50YXg6IGBkaXJQcm9wOiBlbFByb3BgXHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyBgOmAsIHVzZSBkaXJQcm9wID0gZWxQcm9wXHJcbiAgICAgICAgICAgICAgICB2YXIgcGFydHMgPSB1dGlsXzEuc3BsaXRBdENvbG9uKGJpbmRDb25maWcsIFtiaW5kQ29uZmlnLCBiaW5kQ29uZmlnXSk7XHJcbiAgICAgICAgICAgICAgICBpbnB1dHNNYXBbcGFydHNbMF1dID0gcGFydHNbMV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb3V0cHV0c01hcCA9IHt9O1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KG91dHB1dHMpKSB7XHJcbiAgICAgICAgICAgIG91dHB1dHMuZm9yRWFjaChmdW5jdGlvbiAoYmluZENvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgLy8gY2Fub25pY2FsIHN5bnRheDogYGRpclByb3A6IGVsUHJvcGBcclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIGA6YCwgdXNlIGRpclByb3AgPSBlbFByb3BcclxuICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IHV0aWxfMS5zcGxpdEF0Q29sb24oYmluZENvbmZpZywgW2JpbmRDb25maWcsIGJpbmRDb25maWddKTtcclxuICAgICAgICAgICAgICAgIG91dHB1dHNNYXBbcGFydHNbMF1dID0gcGFydHNbMV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVEaXJlY3RpdmVNZXRhZGF0YSh7XHJcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgICAgIGlzQ29tcG9uZW50OiBsYW5nXzEubm9ybWFsaXplQm9vbChpc0NvbXBvbmVudCksXHJcbiAgICAgICAgICAgIGR5bmFtaWNMb2FkYWJsZTogbGFuZ18xLm5vcm1hbGl6ZUJvb2woZHluYW1pY0xvYWRhYmxlKSxcclxuICAgICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxyXG4gICAgICAgICAgICBleHBvcnRBczogZXhwb3J0QXMsXHJcbiAgICAgICAgICAgIGNoYW5nZURldGVjdGlvbjogY2hhbmdlRGV0ZWN0aW9uLFxyXG4gICAgICAgICAgICBpbnB1dHM6IGlucHV0c01hcCxcclxuICAgICAgICAgICAgb3V0cHV0czogb3V0cHV0c01hcCxcclxuICAgICAgICAgICAgaG9zdExpc3RlbmVyczogaG9zdExpc3RlbmVycyxcclxuICAgICAgICAgICAgaG9zdFByb3BlcnRpZXM6IGhvc3RQcm9wZXJ0aWVzLFxyXG4gICAgICAgICAgICBob3N0QXR0cmlidXRlczogaG9zdEF0dHJpYnV0ZXMsXHJcbiAgICAgICAgICAgIGxpZmVjeWNsZUhvb2tzOiBsYW5nXzEuaXNQcmVzZW50KGxpZmVjeWNsZUhvb2tzKSA/IGxpZmVjeWNsZUhvb2tzIDogW10sIHRlbXBsYXRlOiB0ZW1wbGF0ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIENvbXBpbGVEaXJlY3RpdmVNZXRhZGF0YS5mcm9tSnNvbiA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlRGlyZWN0aXZlTWV0YWRhdGEoe1xyXG4gICAgICAgICAgICBpc0NvbXBvbmVudDogZGF0YVsnaXNDb21wb25lbnQnXSxcclxuICAgICAgICAgICAgZHluYW1pY0xvYWRhYmxlOiBkYXRhWydkeW5hbWljTG9hZGFibGUnXSxcclxuICAgICAgICAgICAgc2VsZWN0b3I6IGRhdGFbJ3NlbGVjdG9yJ10sXHJcbiAgICAgICAgICAgIGV4cG9ydEFzOiBkYXRhWydleHBvcnRBcyddLFxyXG4gICAgICAgICAgICB0eXBlOiBsYW5nXzEuaXNQcmVzZW50KGRhdGFbJ3R5cGUnXSkgPyBDb21waWxlVHlwZU1ldGFkYXRhLmZyb21Kc29uKGRhdGFbJ3R5cGUnXSkgOiBkYXRhWyd0eXBlJ10sXHJcbiAgICAgICAgICAgIGNoYW5nZURldGVjdGlvbjogbGFuZ18xLmlzUHJlc2VudChkYXRhWydjaGFuZ2VEZXRlY3Rpb24nXSkgP1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlX2RldGVjdGlvbl8xLkNIQU5HRV9ERUNUSU9OX1NUUkFURUdZX1ZBTFVFU1tkYXRhWydjaGFuZ2VEZXRlY3Rpb24nXV0gOlxyXG4gICAgICAgICAgICAgICAgZGF0YVsnY2hhbmdlRGV0ZWN0aW9uJ10sXHJcbiAgICAgICAgICAgIGlucHV0czogZGF0YVsnaW5wdXRzJ10sXHJcbiAgICAgICAgICAgIG91dHB1dHM6IGRhdGFbJ291dHB1dHMnXSxcclxuICAgICAgICAgICAgaG9zdExpc3RlbmVyczogZGF0YVsnaG9zdExpc3RlbmVycyddLFxyXG4gICAgICAgICAgICBob3N0UHJvcGVydGllczogZGF0YVsnaG9zdFByb3BlcnRpZXMnXSxcclxuICAgICAgICAgICAgaG9zdEF0dHJpYnV0ZXM6IGRhdGFbJ2hvc3RBdHRyaWJ1dGVzJ10sXHJcbiAgICAgICAgICAgIGxpZmVjeWNsZUhvb2tzOiBkYXRhWydsaWZlY3ljbGVIb29rcyddLm1hcChmdW5jdGlvbiAoaG9va1ZhbHVlKSB7IHJldHVybiBpbnRlcmZhY2VzXzEuTElGRUNZQ0xFX0hPT0tTX1ZBTFVFU1tob29rVmFsdWVdOyB9KSxcclxuICAgICAgICAgICAgdGVtcGxhdGU6IGxhbmdfMS5pc1ByZXNlbnQoZGF0YVsndGVtcGxhdGUnXSkgPyBDb21waWxlVGVtcGxhdGVNZXRhZGF0YS5mcm9tSnNvbihkYXRhWyd0ZW1wbGF0ZSddKSA6XHJcbiAgICAgICAgICAgICAgICBkYXRhWyd0ZW1wbGF0ZSddXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQ29tcGlsZURpcmVjdGl2ZU1ldGFkYXRhLnByb3RvdHlwZS50b0pzb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ2lzQ29tcG9uZW50JzogdGhpcy5pc0NvbXBvbmVudCxcclxuICAgICAgICAgICAgJ2R5bmFtaWNMb2FkYWJsZSc6IHRoaXMuZHluYW1pY0xvYWRhYmxlLFxyXG4gICAgICAgICAgICAnc2VsZWN0b3InOiB0aGlzLnNlbGVjdG9yLFxyXG4gICAgICAgICAgICAnZXhwb3J0QXMnOiB0aGlzLmV4cG9ydEFzLFxyXG4gICAgICAgICAgICAndHlwZSc6IGxhbmdfMS5pc1ByZXNlbnQodGhpcy50eXBlKSA/IHRoaXMudHlwZS50b0pzb24oKSA6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgJ2NoYW5nZURldGVjdGlvbic6IGxhbmdfMS5pc1ByZXNlbnQodGhpcy5jaGFuZ2VEZXRlY3Rpb24pID8gbGFuZ18xLnNlcmlhbGl6ZUVudW0odGhpcy5jaGFuZ2VEZXRlY3Rpb24pIDpcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0aW9uLFxyXG4gICAgICAgICAgICAnaW5wdXRzJzogdGhpcy5pbnB1dHMsXHJcbiAgICAgICAgICAgICdvdXRwdXRzJzogdGhpcy5vdXRwdXRzLFxyXG4gICAgICAgICAgICAnaG9zdExpc3RlbmVycyc6IHRoaXMuaG9zdExpc3RlbmVycyxcclxuICAgICAgICAgICAgJ2hvc3RQcm9wZXJ0aWVzJzogdGhpcy5ob3N0UHJvcGVydGllcyxcclxuICAgICAgICAgICAgJ2hvc3RBdHRyaWJ1dGVzJzogdGhpcy5ob3N0QXR0cmlidXRlcyxcclxuICAgICAgICAgICAgJ2xpZmVjeWNsZUhvb2tzJzogdGhpcy5saWZlY3ljbGVIb29rcy5tYXAoZnVuY3Rpb24gKGhvb2spIHsgcmV0dXJuIGxhbmdfMS5zZXJpYWxpemVFbnVtKGhvb2spOyB9KSxcclxuICAgICAgICAgICAgJ3RlbXBsYXRlJzogbGFuZ18xLmlzUHJlc2VudCh0aGlzLnRlbXBsYXRlKSA/IHRoaXMudGVtcGxhdGUudG9Kc29uKCkgOiB0aGlzLnRlbXBsYXRlXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29tcGlsZURpcmVjdGl2ZU1ldGFkYXRhO1xyXG59KSgpO1xyXG5leHBvcnRzLkNvbXBpbGVEaXJlY3RpdmVNZXRhZGF0YSA9IENvbXBpbGVEaXJlY3RpdmVNZXRhZGF0YTtcclxuZnVuY3Rpb24gY3JlYXRlSG9zdENvbXBvbmVudE1ldGEoY29tcG9uZW50VHlwZSwgY29tcG9uZW50U2VsZWN0b3IpIHtcclxuICAgIHZhciB0ZW1wbGF0ZSA9IHNlbGVjdG9yXzEuQ3NzU2VsZWN0b3IucGFyc2UoY29tcG9uZW50U2VsZWN0b3IpWzBdLmdldE1hdGNoaW5nRWxlbWVudFRlbXBsYXRlKCk7XHJcbiAgICByZXR1cm4gQ29tcGlsZURpcmVjdGl2ZU1ldGFkYXRhLmNyZWF0ZSh7XHJcbiAgICAgICAgdHlwZTogbmV3IENvbXBpbGVUeXBlTWV0YWRhdGEoe1xyXG4gICAgICAgICAgICBydW50aW1lOiBPYmplY3QsXHJcbiAgICAgICAgICAgIG5hbWU6IFwiSG9zdFwiICsgY29tcG9uZW50VHlwZS5uYW1lLFxyXG4gICAgICAgICAgICBtb2R1bGVVcmw6IGNvbXBvbmVudFR5cGUubW9kdWxlVXJsLFxyXG4gICAgICAgICAgICBpc0hvc3Q6IHRydWVcclxuICAgICAgICB9KSxcclxuICAgICAgICB0ZW1wbGF0ZTogbmV3IENvbXBpbGVUZW1wbGF0ZU1ldGFkYXRhKHsgdGVtcGxhdGU6IHRlbXBsYXRlLCB0ZW1wbGF0ZVVybDogJycsIHN0eWxlczogW10sIHN0eWxlVXJsczogW10sIG5nQ29udGVudFNlbGVjdG9yczogW10gfSksXHJcbiAgICAgICAgY2hhbmdlRGV0ZWN0aW9uOiBjaGFuZ2VfZGV0ZWN0aW9uXzEuQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGVmYXVsdCxcclxuICAgICAgICBpbnB1dHM6IFtdLFxyXG4gICAgICAgIG91dHB1dHM6IFtdLFxyXG4gICAgICAgIGhvc3Q6IHt9LFxyXG4gICAgICAgIGxpZmVjeWNsZUhvb2tzOiBbXSxcclxuICAgICAgICBpc0NvbXBvbmVudDogdHJ1ZSxcclxuICAgICAgICBkeW5hbWljTG9hZGFibGU6IGZhbHNlLFxyXG4gICAgICAgIHNlbGVjdG9yOiAnKidcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlSG9zdENvbXBvbmVudE1ldGEgPSBjcmVhdGVIb3N0Q29tcG9uZW50TWV0YTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlX21ldGFkYXRhLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIEh0bWxUZXh0QXN0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEh0bWxUZXh0QXN0KHZhbHVlLCBzb3VyY2VJbmZvKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuc291cmNlSW5mbyA9IHNvdXJjZUluZm87XHJcbiAgICB9XHJcbiAgICBIdG1sVGV4dEFzdC5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvciwgY29udGV4dCkgeyByZXR1cm4gdmlzaXRvci52aXNpdFRleHQodGhpcywgY29udGV4dCk7IH07XHJcbiAgICByZXR1cm4gSHRtbFRleHRBc3Q7XHJcbn0pKCk7XHJcbmV4cG9ydHMuSHRtbFRleHRBc3QgPSBIdG1sVGV4dEFzdDtcclxudmFyIEh0bWxBdHRyQXN0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEh0bWxBdHRyQXN0KG5hbWUsIHZhbHVlLCBzb3VyY2VJbmZvKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VJbmZvID0gc291cmNlSW5mbztcclxuICAgIH1cclxuICAgIEh0bWxBdHRyQXN0LnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBjb250ZXh0KSB7IHJldHVybiB2aXNpdG9yLnZpc2l0QXR0cih0aGlzLCBjb250ZXh0KTsgfTtcclxuICAgIHJldHVybiBIdG1sQXR0ckFzdDtcclxufSkoKTtcclxuZXhwb3J0cy5IdG1sQXR0ckFzdCA9IEh0bWxBdHRyQXN0O1xyXG52YXIgSHRtbEVsZW1lbnRBc3QgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSHRtbEVsZW1lbnRBc3QobmFtZSwgYXR0cnMsIGNoaWxkcmVuLCBzb3VyY2VJbmZvKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmF0dHJzID0gYXR0cnM7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xyXG4gICAgICAgIHRoaXMuc291cmNlSW5mbyA9IHNvdXJjZUluZm87XHJcbiAgICB9XHJcbiAgICBIdG1sRWxlbWVudEFzdC5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvciwgY29udGV4dCkgeyByZXR1cm4gdmlzaXRvci52aXNpdEVsZW1lbnQodGhpcywgY29udGV4dCk7IH07XHJcbiAgICByZXR1cm4gSHRtbEVsZW1lbnRBc3Q7XHJcbn0pKCk7XHJcbmV4cG9ydHMuSHRtbEVsZW1lbnRBc3QgPSBIdG1sRWxlbWVudEFzdDtcclxuZnVuY3Rpb24gaHRtbFZpc2l0QWxsKHZpc2l0b3IsIGFzdHMsIGNvbnRleHQpIHtcclxuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IG51bGw7IH1cclxuICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgIGFzdHMuZm9yRWFjaChmdW5jdGlvbiAoYXN0KSB7XHJcbiAgICAgICAgdmFyIGFzdFJlc3VsdCA9IGFzdC52aXNpdCh2aXNpdG9yLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChhc3RSZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFzdFJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmV4cG9ydHMuaHRtbFZpc2l0QWxsID0gaHRtbFZpc2l0QWxsO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1odG1sX2FzdC5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBkb21fYWRhcHRlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZG9tL2RvbV9hZGFwdGVyJyk7XHJcbnZhciBodG1sX2FzdF8xID0gcmVxdWlyZSgnLi9odG1sX2FzdCcpO1xyXG52YXIgdXRpbF8xID0gcmVxdWlyZSgnLi91dGlsJyk7XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIE5HX05PTl9CSU5EQUJMRSA9ICduZy1ub24tYmluZGFibGUnO1xyXG52YXIgSHRtbFBhcnNlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIdG1sUGFyc2VyKCkge1xyXG4gICAgfVxyXG4gICAgSHRtbFBhcnNlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAodGVtcGxhdGUsIHNvdXJjZUluZm8pIHtcclxuICAgICAgICB2YXIgcm9vdCA9IGRvbV9hZGFwdGVyXzEuRE9NLmNyZWF0ZVRlbXBsYXRlKHRlbXBsYXRlKTtcclxuICAgICAgICByZXR1cm4gcGFyc2VDaGlsZE5vZGVzKHJvb3QsIHNvdXJjZUluZm8pO1xyXG4gICAgfTtcclxuICAgIEh0bWxQYXJzZXIucHJvdG90eXBlLnVucGFyc2UgPSBmdW5jdGlvbiAobm9kZXMpIHtcclxuICAgICAgICB2YXIgdmlzaXRvciA9IG5ldyBVbnBhcnNlVmlzaXRvcigpO1xyXG4gICAgICAgIHZhciBwYXJ0cyA9IFtdO1xyXG4gICAgICAgIGh0bWxfYXN0XzEuaHRtbFZpc2l0QWxsKHZpc2l0b3IsIG5vZGVzLCBwYXJ0cyk7XHJcbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJycpO1xyXG4gICAgfTtcclxuICAgIEh0bWxQYXJzZXIgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcclxuICAgIF0sIEh0bWxQYXJzZXIpO1xyXG4gICAgcmV0dXJuIEh0bWxQYXJzZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuSHRtbFBhcnNlciA9IEh0bWxQYXJzZXI7XHJcbmZ1bmN0aW9uIHBhcnNlVGV4dCh0ZXh0LCBpbmRleEluUGFyZW50LCBwYXJlbnRTb3VyY2VJbmZvKSB7XHJcbiAgICAvLyBUT0RPKHRib3NjaCk6IGFkZCBzb3VyY2Ugcm93L2NvbHVtbiBzb3VyY2UgaW5mbyBmcm9tIHBhcnNlNSAvIHBhY2thZ2U6aHRtbFxyXG4gICAgdmFyIHZhbHVlID0gZG9tX2FkYXB0ZXJfMS5ET00uZ2V0VGV4dCh0ZXh0KTtcclxuICAgIHJldHVybiBuZXcgaHRtbF9hc3RfMS5IdG1sVGV4dEFzdCh2YWx1ZSwgcGFyZW50U291cmNlSW5mbyArIFwiID4gI3RleHQoXCIgKyB2YWx1ZSArIFwiKTpudGgtY2hpbGQoXCIgKyBpbmRleEluUGFyZW50ICsgXCIpXCIpO1xyXG59XHJcbmZ1bmN0aW9uIHBhcnNlQXR0cihlbGVtZW50LCBwYXJlbnRTb3VyY2VJbmZvLCBhdHRyTmFtZSwgYXR0clZhbHVlKSB7XHJcbiAgICAvLyBUT0RPKHRib3NjaCk6IGFkZCBzb3VyY2Ugcm93L2NvbHVtbiBzb3VyY2UgaW5mbyBmcm9tIHBhcnNlNSAvIHBhY2thZ2U6aHRtbFxyXG4gICAgdmFyIGxvd2VyQ2FzZUF0dHJOYW1lID0gYXR0ck5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgIHJldHVybiBuZXcgaHRtbF9hc3RfMS5IdG1sQXR0ckFzdChsb3dlckNhc2VBdHRyTmFtZSwgYXR0clZhbHVlLCBwYXJlbnRTb3VyY2VJbmZvICsgXCJbXCIgKyBsb3dlckNhc2VBdHRyTmFtZSArIFwiPVwiICsgYXR0clZhbHVlICsgXCJdXCIpO1xyXG59XHJcbmZ1bmN0aW9uIHBhcnNlRWxlbWVudChlbGVtZW50LCBpbmRleEluUGFyZW50LCBwYXJlbnRTb3VyY2VJbmZvKSB7XHJcbiAgICAvLyBub3JtYWxpemUgbm9kZW5hbWUgYWx3YXlzIGFzIGxvd2VyIGNhc2Ugc28gdGhhdCBmb2xsb3dpbmcgYnVpbGQgc3RlcHNcclxuICAgIC8vIGNhbiByZWx5IG9uIHRoaXNcclxuICAgIHZhciBub2RlTmFtZSA9IGRvbV9hZGFwdGVyXzEuRE9NLm5vZGVOYW1lKGVsZW1lbnQpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAvLyBUT0RPKHRib3NjaCk6IGFkZCBzb3VyY2Ugcm93L2NvbHVtbiBzb3VyY2UgaW5mbyBmcm9tIHBhcnNlNSAvIHBhY2thZ2U6aHRtbFxyXG4gICAgdmFyIHNvdXJjZUluZm8gPSBwYXJlbnRTb3VyY2VJbmZvICsgXCIgPiBcIiArIG5vZGVOYW1lICsgXCI6bnRoLWNoaWxkKFwiICsgaW5kZXhJblBhcmVudCArIFwiKVwiO1xyXG4gICAgdmFyIGF0dHJzID0gcGFyc2VBdHRycyhlbGVtZW50LCBzb3VyY2VJbmZvKTtcclxuICAgIHZhciBjaGlsZE5vZGVzID0gcGFyc2VDaGlsZE5vZGVzKGVsZW1lbnQsIHNvdXJjZUluZm8pO1xyXG4gICAgcmV0dXJuIG5ldyBodG1sX2FzdF8xLkh0bWxFbGVtZW50QXN0KG5vZGVOYW1lLCBhdHRycywgY2hpbGROb2Rlcywgc291cmNlSW5mbyk7XHJcbn1cclxuZnVuY3Rpb24gcGFyc2VBdHRycyhlbGVtZW50LCBlbGVtZW50U291cmNlSW5mbykge1xyXG4gICAgLy8gTm90ZTogc29ydCB0aGUgYXR0cmlidXRlcyBlYXJseSBpbiB0aGUgcGlwZWxpbmUgdG8gZ2V0XHJcbiAgICAvLyBjb25zaXN0ZW50IHJlc3VsdHMgdGhyb3VnaG91dCB0aGUgcGlwZWxpbmUsIGFzIGF0dHJpYnV0ZSBvcmRlciBpcyBub3QgZGVmaW5lZFxyXG4gICAgLy8gaW4gRE9NIHBhcnNlcnMhXHJcbiAgICB2YXIgYXR0ck1hcCA9IGRvbV9hZGFwdGVyXzEuRE9NLmF0dHJpYnV0ZU1hcChlbGVtZW50KTtcclxuICAgIHZhciBhdHRyTGlzdCA9IFtdO1xyXG4gICAgYXR0ck1hcC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSkgeyByZXR1cm4gYXR0ckxpc3QucHVzaChbbmFtZSwgdmFsdWVdKTsgfSk7XHJcbiAgICBhdHRyTGlzdC5zb3J0KGZ1bmN0aW9uIChlbnRyeTEsIGVudHJ5MikgeyByZXR1cm4gbGFuZ18xLlN0cmluZ1dyYXBwZXIuY29tcGFyZShlbnRyeTFbMF0sIGVudHJ5MlswXSk7IH0pO1xyXG4gICAgcmV0dXJuIGF0dHJMaXN0Lm1hcChmdW5jdGlvbiAoZW50cnkpIHsgcmV0dXJuIHBhcnNlQXR0cihlbGVtZW50LCBlbGVtZW50U291cmNlSW5mbywgZW50cnlbMF0sIGVudHJ5WzFdKTsgfSk7XHJcbn1cclxuZnVuY3Rpb24gcGFyc2VDaGlsZE5vZGVzKGVsZW1lbnQsIHBhcmVudFNvdXJjZUluZm8pIHtcclxuICAgIHZhciByb290ID0gZG9tX2FkYXB0ZXJfMS5ET00udGVtcGxhdGVBd2FyZVJvb3QoZWxlbWVudCk7XHJcbiAgICB2YXIgY2hpbGROb2RlcyA9IGRvbV9hZGFwdGVyXzEuRE9NLmNoaWxkTm9kZXNBc0xpc3Qocm9vdCk7XHJcbiAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgY2hpbGROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZE5vZGUpIHtcclxuICAgICAgICB2YXIgY2hpbGRSZXN1bHQgPSBudWxsO1xyXG4gICAgICAgIGlmIChkb21fYWRhcHRlcl8xLkRPTS5pc1RleHROb2RlKGNoaWxkTm9kZSkpIHtcclxuICAgICAgICAgICAgdmFyIHRleHQgPSBjaGlsZE5vZGU7XHJcbiAgICAgICAgICAgIGNoaWxkUmVzdWx0ID0gcGFyc2VUZXh0KHRleHQsIGluZGV4LCBwYXJlbnRTb3VyY2VJbmZvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZG9tX2FkYXB0ZXJfMS5ET00uaXNFbGVtZW50Tm9kZShjaGlsZE5vZGUpKSB7XHJcbiAgICAgICAgICAgIHZhciBlbCA9IGNoaWxkTm9kZTtcclxuICAgICAgICAgICAgY2hpbGRSZXN1bHQgPSBwYXJzZUVsZW1lbnQoZWwsIGluZGV4LCBwYXJlbnRTb3VyY2VJbmZvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoY2hpbGRSZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIC8vIFdvbid0IGhhdmUgYSBjaGlsZFJlc3VsdCBmb3IgZS5nLiBjb21tZW50IG5vZGVzXHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNoaWxkUmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5kZXgrKztcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG52YXIgVW5wYXJzZVZpc2l0b3IgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVW5wYXJzZVZpc2l0b3IoKSB7XHJcbiAgICB9XHJcbiAgICBVbnBhcnNlVmlzaXRvci5wcm90b3R5cGUudmlzaXRFbGVtZW50ID0gZnVuY3Rpb24gKGFzdCwgcGFydHMpIHtcclxuICAgICAgICBwYXJ0cy5wdXNoKFwiPFwiICsgYXN0Lm5hbWUpO1xyXG4gICAgICAgIHZhciBhdHRycyA9IFtdO1xyXG4gICAgICAgIGh0bWxfYXN0XzEuaHRtbFZpc2l0QWxsKHRoaXMsIGFzdC5hdHRycywgYXR0cnMpO1xyXG4gICAgICAgIGlmIChhc3QuYXR0cnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBwYXJ0cy5wdXNoKCcgJyk7XHJcbiAgICAgICAgICAgIHBhcnRzLnB1c2goYXR0cnMuam9pbignICcpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGFydHMucHVzaChcIj5cIik7XHJcbiAgICAgICAgaHRtbF9hc3RfMS5odG1sVmlzaXRBbGwodGhpcywgYXN0LmNoaWxkcmVuLCBwYXJ0cyk7XHJcbiAgICAgICAgcGFydHMucHVzaChcIjwvXCIgKyBhc3QubmFtZSArIFwiPlwiKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBVbnBhcnNlVmlzaXRvci5wcm90b3R5cGUudmlzaXRBdHRyID0gZnVuY3Rpb24gKGFzdCwgcGFydHMpIHtcclxuICAgICAgICBwYXJ0cy5wdXNoKGFzdC5uYW1lICsgXCI9XCIgKyB1dGlsXzEuZXNjYXBlRG91YmxlUXVvdGVTdHJpbmcoYXN0LnZhbHVlKSk7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgVW5wYXJzZVZpc2l0b3IucHJvdG90eXBlLnZpc2l0VGV4dCA9IGZ1bmN0aW9uIChhc3QsIHBhcnRzKSB7XHJcbiAgICAgICAgcGFydHMucHVzaChhc3QudmFsdWUpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBVbnBhcnNlVmlzaXRvcjtcclxufSkoKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHRtbF9wYXJzZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBjb21waWxlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL2NvbXBpbGVyJyk7XHJcbnZhciBwcm90b192aWV3X2ZhY3RvcnlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci9wcm90b192aWV3X2ZhY3RvcnknKTtcclxudmFyIHRlbXBsYXRlX2NvbXBpbGVyXzEgPSByZXF1aXJlKCcuL3RlbXBsYXRlX2NvbXBpbGVyJyk7XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIFJ1bnRpbWVDb21waWxlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUnVudGltZUNvbXBpbGVyLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gUnVudGltZUNvbXBpbGVyKCkge1xyXG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJ1bnRpbWVDb21waWxlcjtcclxufSkoY29tcGlsZXJfMS5Db21waWxlcik7XHJcbmV4cG9ydHMuUnVudGltZUNvbXBpbGVyID0gUnVudGltZUNvbXBpbGVyO1xyXG52YXIgUnVudGltZUNvbXBpbGVyXyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUnVudGltZUNvbXBpbGVyXywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFJ1bnRpbWVDb21waWxlcl8oX3Byb3RvVmlld0ZhY3RvcnksIF90ZW1wbGF0ZUNvbXBpbGVyKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgX3Byb3RvVmlld0ZhY3RvcnkpO1xyXG4gICAgICAgIHRoaXMuX3RlbXBsYXRlQ29tcGlsZXIgPSBfdGVtcGxhdGVDb21waWxlcjtcclxuICAgIH1cclxuICAgIFJ1bnRpbWVDb21waWxlcl8ucHJvdG90eXBlLmNvbXBpbGVJbkhvc3QgPSBmdW5jdGlvbiAoY29tcG9uZW50VHlwZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RlbXBsYXRlQ29tcGlsZXIuY29tcGlsZUhvc3RDb21wb25lbnRSdW50aW1lKGNvbXBvbmVudFR5cGUpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjb21waWxlZEhvc3RUZW1wbGF0ZSkgeyByZXR1cm4gY29tcGlsZXJfMS5pbnRlcm5hbENyZWF0ZVByb3RvVmlldyhfdGhpcywgY29tcGlsZWRIb3N0VGVtcGxhdGUpOyB9KTtcclxuICAgIH07XHJcbiAgICBSdW50aW1lQ29tcGlsZXJfLnByb3RvdHlwZS5jbGVhckNhY2hlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuY2xlYXJDYWNoZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX3RlbXBsYXRlQ29tcGlsZXIuY2xlYXJDYWNoZSgpO1xyXG4gICAgfTtcclxuICAgIFJ1bnRpbWVDb21waWxlcl8gPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbcHJvdG9fdmlld19mYWN0b3J5XzEuUHJvdG9WaWV3RmFjdG9yeSwgdGVtcGxhdGVfY29tcGlsZXJfMS5UZW1wbGF0ZUNvbXBpbGVyXSlcclxuICAgIF0sIFJ1bnRpbWVDb21waWxlcl8pO1xyXG4gICAgcmV0dXJuIFJ1bnRpbWVDb21waWxlcl87XHJcbn0pKGNvbXBpbGVyXzEuQ29tcGlsZXJfKTtcclxuZXhwb3J0cy5SdW50aW1lQ29tcGlsZXJfID0gUnVudGltZUNvbXBpbGVyXztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVudGltZV9jb21waWxlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgY3BsID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVfbWV0YWRhdGEnKTtcclxudmFyIGRpckFubiA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL21ldGFkYXRhL2RpcmVjdGl2ZXMnKTtcclxudmFyIGRpcmVjdGl2ZV9yZXNvbHZlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL2RpcmVjdGl2ZV9yZXNvbHZlcicpO1xyXG52YXIgdmlld19yZXNvbHZlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL3ZpZXdfcmVzb2x2ZXInKTtcclxudmFyIGRpcmVjdGl2ZV9saWZlY3ljbGVfcmVmbGVjdG9yXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvZGlyZWN0aXZlX2xpZmVjeWNsZV9yZWZsZWN0b3InKTtcclxudmFyIGludGVyZmFjZXNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci9pbnRlcmZhY2VzJyk7XHJcbnZhciByZWZsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9yZWZsZWN0aW9uL3JlZmxlY3Rpb24nKTtcclxudmFyIGRpXzIgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgdXRpbF8xID0gcmVxdWlyZSgnLi91dGlsJyk7XHJcbi8vIGdyb3VwIDE6IFwicHJvcGVydHlcIiBmcm9tIFwiW3Byb3BlcnR5XVwiXHJcbi8vIGdyb3VwIDI6IFwiZXZlbnRcIiBmcm9tIFwiKGV2ZW50KVwiXHJcbnZhciBIT1NUX1JFR19FWFAgPSAvXig/Oig/OlxcWyhbXlxcXV0rKVxcXSl8KD86XFwoKFteXFwpXSspXFwpKSkkL2c7XHJcbnZhciBSdW50aW1lTWV0YWRhdGFSZXNvbHZlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSdW50aW1lTWV0YWRhdGFSZXNvbHZlcihfZGlyZWN0aXZlUmVzb2x2ZXIsIF92aWV3UmVzb2x2ZXIpIHtcclxuICAgICAgICB0aGlzLl9kaXJlY3RpdmVSZXNvbHZlciA9IF9kaXJlY3RpdmVSZXNvbHZlcjtcclxuICAgICAgICB0aGlzLl92aWV3UmVzb2x2ZXIgPSBfdmlld1Jlc29sdmVyO1xyXG4gICAgICAgIHRoaXMuX2NhY2hlID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgUnVudGltZU1ldGFkYXRhUmVzb2x2ZXIucHJvdG90eXBlLmdldE1ldGFkYXRhID0gZnVuY3Rpb24gKGRpcmVjdGl2ZVR5cGUpIHtcclxuICAgICAgICB2YXIgbWV0YSA9IHRoaXMuX2NhY2hlLmdldChkaXJlY3RpdmVUeXBlKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsobWV0YSkpIHtcclxuICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZUFubm90YXRpb24gPSB0aGlzLl9kaXJlY3RpdmVSZXNvbHZlci5yZXNvbHZlKGRpcmVjdGl2ZVR5cGUpO1xyXG4gICAgICAgICAgICB2YXIgbW9kdWxlVXJsID0gY2FsY01vZHVsZVVybChkaXJlY3RpdmVUeXBlLCBkaXJlY3RpdmVBbm5vdGF0aW9uKTtcclxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlTWV0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChkaXJlY3RpdmVBbm5vdGF0aW9uIGluc3RhbmNlb2YgZGlyQW5uLkNvbXBvbmVudE1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29tcEFubm90YXRpb24gPSBkaXJlY3RpdmVBbm5vdGF0aW9uO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZpZXdBbm5vdGF0aW9uID0gdGhpcy5fdmlld1Jlc29sdmVyLnJlc29sdmUoZGlyZWN0aXZlVHlwZSk7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZU1ldGEgPSBuZXcgY3BsLkNvbXBpbGVUZW1wbGF0ZU1ldGFkYXRhKHtcclxuICAgICAgICAgICAgICAgICAgICBlbmNhcHN1bGF0aW9uOiB2aWV3QW5ub3RhdGlvbi5lbmNhcHN1bGF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB2aWV3QW5ub3RhdGlvbi50ZW1wbGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogdmlld0Fubm90YXRpb24udGVtcGxhdGVVcmwsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzOiB2aWV3QW5ub3RhdGlvbi5zdHlsZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVVcmxzOiB2aWV3QW5ub3RhdGlvbi5zdHlsZVVybHNcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgPSBjb21wQW5ub3RhdGlvbi5jaGFuZ2VEZXRlY3Rpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWV0YSA9IGNwbC5Db21waWxlRGlyZWN0aXZlTWV0YWRhdGEuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBkaXJlY3RpdmVBbm5vdGF0aW9uLnNlbGVjdG9yLFxyXG4gICAgICAgICAgICAgICAgZXhwb3J0QXM6IGRpcmVjdGl2ZUFubm90YXRpb24uZXhwb3J0QXMsXHJcbiAgICAgICAgICAgICAgICBpc0NvbXBvbmVudDogbGFuZ18xLmlzUHJlc2VudCh0ZW1wbGF0ZU1ldGEpLFxyXG4gICAgICAgICAgICAgICAgZHluYW1pY0xvYWRhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogbmV3IGNwbC5Db21waWxlVHlwZU1ldGFkYXRhKHsgbmFtZTogbGFuZ18xLnN0cmluZ2lmeShkaXJlY3RpdmVUeXBlKSwgbW9kdWxlVXJsOiBtb2R1bGVVcmwsIHJ1bnRpbWU6IGRpcmVjdGl2ZVR5cGUgfSksXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogdGVtcGxhdGVNZXRhLFxyXG4gICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0aW9uOiBjaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICAgICAgICAgICAgICAgIGlucHV0czogZGlyZWN0aXZlQW5ub3RhdGlvbi5pbnB1dHMsXHJcbiAgICAgICAgICAgICAgICBvdXRwdXRzOiBkaXJlY3RpdmVBbm5vdGF0aW9uLm91dHB1dHMsXHJcbiAgICAgICAgICAgICAgICBob3N0OiBkaXJlY3RpdmVBbm5vdGF0aW9uLmhvc3QsXHJcbiAgICAgICAgICAgICAgICBsaWZlY3ljbGVIb29rczogY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmZpbHRlcihpbnRlcmZhY2VzXzEuTElGRUNZQ0xFX0hPT0tTX1ZBTFVFUywgZnVuY3Rpb24gKGhvb2spIHsgcmV0dXJuIGRpcmVjdGl2ZV9saWZlY3ljbGVfcmVmbGVjdG9yXzEuaGFzTGlmZWN5Y2xlSG9vayhob29rLCBkaXJlY3RpdmVUeXBlKTsgfSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlLnNldChkaXJlY3RpdmVUeXBlLCBtZXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1ldGE7XHJcbiAgICB9O1xyXG4gICAgUnVudGltZU1ldGFkYXRhUmVzb2x2ZXIucHJvdG90eXBlLmdldFZpZXdEaXJlY3RpdmVzTWV0YWRhdGEgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgdmlldyA9IHRoaXMuX3ZpZXdSZXNvbHZlci5yZXNvbHZlKGNvbXBvbmVudCk7XHJcbiAgICAgICAgdmFyIGRpcmVjdGl2ZXMgPSBmbGF0dGVuRGlyZWN0aXZlcyh2aWV3KTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcmVjdGl2ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkRGlyZWN0aXZlKGRpcmVjdGl2ZXNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oXCJVbmV4cGVjdGVkIGRpcmVjdGl2ZSB2YWx1ZSAnXCIgKyBsYW5nXzEuc3RyaW5naWZ5KGRpcmVjdGl2ZXNbaV0pICsgXCInIG9uIHRoZSBWaWV3IG9mIGNvbXBvbmVudCAnXCIgKyBsYW5nXzEuc3RyaW5naWZ5KGNvbXBvbmVudCkgKyBcIidcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlbW92ZUR1cGxpY2F0ZWREaXJlY3RpdmVzKGRpcmVjdGl2ZXMubWFwKGZ1bmN0aW9uICh0eXBlKSB7IHJldHVybiBfdGhpcy5nZXRNZXRhZGF0YSh0eXBlKTsgfSkpO1xyXG4gICAgfTtcclxuICAgIFJ1bnRpbWVNZXRhZGF0YVJlc29sdmVyID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgZGlfMi5JbmplY3RhYmxlKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW2RpcmVjdGl2ZV9yZXNvbHZlcl8xLkRpcmVjdGl2ZVJlc29sdmVyLCB2aWV3X3Jlc29sdmVyXzEuVmlld1Jlc29sdmVyXSlcclxuICAgIF0sIFJ1bnRpbWVNZXRhZGF0YVJlc29sdmVyKTtcclxuICAgIHJldHVybiBSdW50aW1lTWV0YWRhdGFSZXNvbHZlcjtcclxufSkoKTtcclxuZXhwb3J0cy5SdW50aW1lTWV0YWRhdGFSZXNvbHZlciA9IFJ1bnRpbWVNZXRhZGF0YVJlc29sdmVyO1xyXG5mdW5jdGlvbiByZW1vdmVEdXBsaWNhdGVkRGlyZWN0aXZlcyhkaXJlY3RpdmVzKSB7XHJcbiAgICB2YXIgZGlyZWN0aXZlc01hcCA9IG5ldyBNYXAoKTtcclxuICAgIGRpcmVjdGl2ZXMuZm9yRWFjaChmdW5jdGlvbiAoZGlyTWV0YSkgeyBkaXJlY3RpdmVzTWFwLnNldChkaXJNZXRhLnR5cGUucnVudGltZSwgZGlyTWV0YSk7IH0pO1xyXG4gICAgcmV0dXJuIGNvbGxlY3Rpb25fMS5NYXBXcmFwcGVyLnZhbHVlcyhkaXJlY3RpdmVzTWFwKTtcclxufVxyXG5mdW5jdGlvbiBmbGF0dGVuRGlyZWN0aXZlcyh2aWV3KSB7XHJcbiAgICBpZiAobGFuZ18xLmlzQmxhbmsodmlldy5kaXJlY3RpdmVzKSlcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB2YXIgZGlyZWN0aXZlcyA9IFtdO1xyXG4gICAgZmxhdHRlbkxpc3Qodmlldy5kaXJlY3RpdmVzLCBkaXJlY3RpdmVzKTtcclxuICAgIHJldHVybiBkaXJlY3RpdmVzO1xyXG59XHJcbmZ1bmN0aW9uIGZsYXR0ZW5MaXN0KHRyZWUsIG91dCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGl0ZW0gPSBkaV8xLnJlc29sdmVGb3J3YXJkUmVmKHRyZWVbaV0pO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNBcnJheShpdGVtKSkge1xyXG4gICAgICAgICAgICBmbGF0dGVuTGlzdChpdGVtLCBvdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb3V0LnB1c2goaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzVmFsaWREaXJlY3RpdmUodmFsdWUpIHtcclxuICAgIHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHZhbHVlKSAmJiAodmFsdWUgaW5zdGFuY2VvZiBsYW5nXzEuVHlwZSk7XHJcbn1cclxuZnVuY3Rpb24gY2FsY01vZHVsZVVybCh0eXBlLCBkaXJlY3RpdmVBbm5vdGF0aW9uKSB7XHJcbiAgICBpZiAobGFuZ18xLmlzUHJlc2VudChkaXJlY3RpdmVBbm5vdGF0aW9uLm1vZHVsZUlkKSkge1xyXG4gICAgICAgIHJldHVybiBcInBhY2thZ2U6XCIgKyBkaXJlY3RpdmVBbm5vdGF0aW9uLm1vZHVsZUlkICsgdXRpbF8xLk1PRFVMRV9TVUZGSVg7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gcmVmbGVjdGlvbl8xLnJlZmxlY3Rvci5pbXBvcnRVcmkodHlwZSk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVudGltZV9tZXRhZGF0YS5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBkb21fYWRhcHRlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZG9tL2RvbV9hZGFwdGVyJyk7XHJcbnZhciBlbGVtZW50X3NjaGVtYV9yZWdpc3RyeV8xID0gcmVxdWlyZSgnLi9lbGVtZW50X3NjaGVtYV9yZWdpc3RyeScpO1xyXG52YXIgRG9tRWxlbWVudFNjaGVtYVJlZ2lzdHJ5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhEb21FbGVtZW50U2NoZW1hUmVnaXN0cnksIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBEb21FbGVtZW50U2NoZW1hUmVnaXN0cnkoKSB7XHJcbiAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5fcHJvdG9FbGVtZW50cyA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIERvbUVsZW1lbnRTY2hlbWFSZWdpc3RyeS5wcm90b3R5cGUuX2dldFByb3RvRWxlbWVudCA9IGZ1bmN0aW9uICh0YWdOYW1lKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLl9wcm90b0VsZW1lbnRzLmdldCh0YWdOYW1lKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgZWxlbWVudCA9IGRvbV9hZGFwdGVyXzEuRE9NLmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb3RvRWxlbWVudHMuc2V0KHRhZ05hbWUsIGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIH07XHJcbiAgICBEb21FbGVtZW50U2NoZW1hUmVnaXN0cnkucHJvdG90eXBlLmhhc1Byb3BlcnR5ID0gZnVuY3Rpb24gKHRhZ05hbWUsIHByb3BOYW1lKSB7XHJcbiAgICAgICAgaWYgKHRhZ05hbWUuaW5kZXhPZignLScpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAvLyBjYW4ndCB0ZWxsIG5vdyBhcyB3ZSBkb24ndCBrbm93IHdoaWNoIHByb3BlcnRpZXMgYSBjdXN0b20gZWxlbWVudCB3aWxsIGdldFxyXG4gICAgICAgICAgICAvLyBvbmNlIGl0IGlzIGluc3RhbnRpYXRlZFxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBlbG0gPSB0aGlzLl9nZXRQcm90b0VsZW1lbnQodGFnTmFtZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkb21fYWRhcHRlcl8xLkRPTS5oYXNQcm9wZXJ0eShlbG0sIHByb3BOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRG9tRWxlbWVudFNjaGVtYVJlZ2lzdHJ5LnByb3RvdHlwZS5nZXRNYXBwZWRQcm9wTmFtZSA9IGZ1bmN0aW9uIChwcm9wTmFtZSkge1xyXG4gICAgICAgIHZhciBtYXBwZWRQcm9wTmFtZSA9IGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLmdldChkb21fYWRhcHRlcl8xLkRPTS5hdHRyVG9Qcm9wTWFwLCBwcm9wTmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQobWFwcGVkUHJvcE5hbWUpID8gbWFwcGVkUHJvcE5hbWUgOiBwcm9wTmFtZTtcclxuICAgIH07XHJcbiAgICBEb21FbGVtZW50U2NoZW1hUmVnaXN0cnkgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcclxuICAgIF0sIERvbUVsZW1lbnRTY2hlbWFSZWdpc3RyeSk7XHJcbiAgICByZXR1cm4gRG9tRWxlbWVudFNjaGVtYVJlZ2lzdHJ5O1xyXG59KShlbGVtZW50X3NjaGVtYV9yZWdpc3RyeV8xLkVsZW1lbnRTY2hlbWFSZWdpc3RyeSk7XHJcbmV4cG9ydHMuRG9tRWxlbWVudFNjaGVtYVJlZ2lzdHJ5ID0gRG9tRWxlbWVudFNjaGVtYVJlZ2lzdHJ5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb21fZWxlbWVudF9zY2hlbWFfcmVnaXN0cnkuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBFbGVtZW50U2NoZW1hUmVnaXN0cnkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRWxlbWVudFNjaGVtYVJlZ2lzdHJ5KCkge1xyXG4gICAgfVxyXG4gICAgRWxlbWVudFNjaGVtYVJlZ2lzdHJ5LnByb3RvdHlwZS5oYXNQcm9wZXJ0eSA9IGZ1bmN0aW9uICh0YWdOYW1lLCBwcm9wTmFtZSkgeyByZXR1cm4gdHJ1ZTsgfTtcclxuICAgIEVsZW1lbnRTY2hlbWFSZWdpc3RyeS5wcm90b3R5cGUuZ2V0TWFwcGVkUHJvcE5hbWUgPSBmdW5jdGlvbiAocHJvcE5hbWUpIHsgcmV0dXJuIHByb3BOYW1lOyB9O1xyXG4gICAgcmV0dXJuIEVsZW1lbnRTY2hlbWFSZWdpc3RyeTtcclxufSkoKTtcclxuZXhwb3J0cy5FbGVtZW50U2NoZW1hUmVnaXN0cnkgPSBFbGVtZW50U2NoZW1hUmVnaXN0cnk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVsZW1lbnRfc2NoZW1hX3JlZ2lzdHJ5LmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgX0VNUFRZX0FUVFJfVkFMVUUgPSAnJztcclxuLy8gVE9ETzogQ2FuJ3QgdXNlIGBjb25zdGAgaGVyZSBhc1xyXG4vLyBpbiBEYXJ0IHRoaXMgaXMgbm90IHRyYW5zcGlsZWQgaW50byBgZmluYWxgIHlldC4uLlxyXG52YXIgX1NFTEVDVE9SX1JFR0VYUCA9IGxhbmdfMS5SZWdFeHBXcmFwcGVyLmNyZWF0ZSgnKFxcXFw6bm90XFxcXCgpfCcgK1xyXG4gICAgJyhbLVxcXFx3XSspfCcgK1xyXG4gICAgJyg/OlxcXFwuKFstXFxcXHddKykpfCcgK1xyXG4gICAgJyg/OlxcXFxbKFstXFxcXHcqXSspKD86PShbXlxcXFxdXSopKT9cXFxcXSl8JyArXHJcbiAgICAnKFxcXFwpKXwnICtcclxuICAgICcoXFxcXHMqLFxcXFxzKiknKTsgLy8gXCIsXCJcclxuLyoqXHJcbiAqIEEgY3NzIHNlbGVjdG9yIGNvbnRhaW5zIGFuIGVsZW1lbnQgbmFtZSxcclxuICogY3NzIGNsYXNzZXMgYW5kIGF0dHJpYnV0ZS92YWx1ZSBwYWlycyB3aXRoIHRoZSBwdXJwb3NlXHJcbiAqIG9mIHNlbGVjdGluZyBzdWJzZXRzIG91dCBvZiB0aGVtLlxyXG4gKi9cclxudmFyIENzc1NlbGVjdG9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENzc1NlbGVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jbGFzc05hbWVzID0gW107XHJcbiAgICAgICAgdGhpcy5hdHRycyA9IFtdO1xyXG4gICAgICAgIHRoaXMubm90U2VsZWN0b3JzID0gW107XHJcbiAgICB9XHJcbiAgICBDc3NTZWxlY3Rvci5wYXJzZSA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xyXG4gICAgICAgIHZhciByZXN1bHRzID0gW107XHJcbiAgICAgICAgdmFyIF9hZGRSZXN1bHQgPSBmdW5jdGlvbiAocmVzLCBjc3NTZWwpIHtcclxuICAgICAgICAgICAgaWYgKGNzc1NlbC5ub3RTZWxlY3RvcnMubGVuZ3RoID4gMCAmJiBsYW5nXzEuaXNCbGFuayhjc3NTZWwuZWxlbWVudCkgJiZcclxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5pc0VtcHR5KGNzc1NlbC5jbGFzc05hbWVzKSAmJiBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuaXNFbXB0eShjc3NTZWwuYXR0cnMpKSB7XHJcbiAgICAgICAgICAgICAgICBjc3NTZWwuZWxlbWVudCA9IFwiKlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlcy5wdXNoKGNzc1NlbCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgY3NzU2VsZWN0b3IgPSBuZXcgQ3NzU2VsZWN0b3IoKTtcclxuICAgICAgICB2YXIgbWF0Y2hlciA9IGxhbmdfMS5SZWdFeHBXcmFwcGVyLm1hdGNoZXIoX1NFTEVDVE9SX1JFR0VYUCwgc2VsZWN0b3IpO1xyXG4gICAgICAgIHZhciBtYXRjaDtcclxuICAgICAgICB2YXIgY3VycmVudCA9IGNzc1NlbGVjdG9yO1xyXG4gICAgICAgIHZhciBpbk5vdCA9IGZhbHNlO1xyXG4gICAgICAgIHdoaWxlIChsYW5nXzEuaXNQcmVzZW50KG1hdGNoID0gbGFuZ18xLlJlZ0V4cE1hdGNoZXJXcmFwcGVyLm5leHQobWF0Y2hlcikpKSB7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KG1hdGNoWzFdKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluTm90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKCdOZXN0aW5nIDpub3QgaXMgbm90IGFsbG93ZWQgaW4gYSBzZWxlY3RvcicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaW5Ob3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IG5ldyBDc3NTZWxlY3RvcigpO1xyXG4gICAgICAgICAgICAgICAgY3NzU2VsZWN0b3Iubm90U2VsZWN0b3JzLnB1c2goY3VycmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQobWF0Y2hbMl0pKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LnNldEVsZW1lbnQobWF0Y2hbMl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KG1hdGNoWzNdKSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudC5hZGRDbGFzc05hbWUobWF0Y2hbM10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KG1hdGNoWzRdKSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudC5hZGRBdHRyaWJ1dGUobWF0Y2hbNF0sIG1hdGNoWzVdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChtYXRjaFs2XSkpIHtcclxuICAgICAgICAgICAgICAgIGluTm90ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3NzU2VsZWN0b3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQobWF0Y2hbN10pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5Ob3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oJ011bHRpcGxlIHNlbGVjdG9ycyBpbiA6bm90IGFyZSBub3Qgc3VwcG9ydGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfYWRkUmVzdWx0KHJlc3VsdHMsIGNzc1NlbGVjdG9yKTtcclxuICAgICAgICAgICAgICAgIGNzc1NlbGVjdG9yID0gY3VycmVudCA9IG5ldyBDc3NTZWxlY3RvcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9hZGRSZXN1bHQocmVzdWx0cywgY3NzU2VsZWN0b3IpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgfTtcclxuICAgIENzc1NlbGVjdG9yLnByb3RvdHlwZS5pc0VsZW1lbnRTZWxlY3RvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbGFuZ18xLmlzUHJlc2VudCh0aGlzLmVsZW1lbnQpICYmIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5pc0VtcHR5KHRoaXMuY2xhc3NOYW1lcykgJiZcclxuICAgICAgICAgICAgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmlzRW1wdHkodGhpcy5hdHRycykgJiYgdGhpcy5ub3RTZWxlY3RvcnMubGVuZ3RoID09PSAwO1xyXG4gICAgfTtcclxuICAgIENzc1NlbGVjdG9yLnByb3RvdHlwZS5zZXRFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBpZiAoZWxlbWVudCA9PT0gdm9pZCAwKSB7IGVsZW1lbnQgPSBudWxsOyB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgIH07XHJcbiAgICAvKiogR2V0cyBhIHRlbXBsYXRlIHN0cmluZyBmb3IgYW4gZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yLiAqL1xyXG4gICAgQ3NzU2VsZWN0b3IucHJvdG90eXBlLmdldE1hdGNoaW5nRWxlbWVudFRlbXBsYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0YWdOYW1lID0gbGFuZ18xLmlzUHJlc2VudCh0aGlzLmVsZW1lbnQpID8gdGhpcy5lbGVtZW50IDogJ2Rpdic7XHJcbiAgICAgICAgdmFyIGNsYXNzQXR0ciA9IHRoaXMuY2xhc3NOYW1lcy5sZW5ndGggPiAwID8gXCIgY2xhc3M9XFxcIlwiICsgdGhpcy5jbGFzc05hbWVzLmpvaW4oJyAnKSArIFwiXFxcIlwiIDogJyc7XHJcbiAgICAgICAgdmFyIGF0dHJzID0gJyc7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmF0dHJzLmxlbmd0aDsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgIHZhciBhdHRyTmFtZSA9IHRoaXMuYXR0cnNbaV07XHJcbiAgICAgICAgICAgIHZhciBhdHRyVmFsdWUgPSB0aGlzLmF0dHJzW2kgKyAxXSAhPT0gJycgPyBcIj1cXFwiXCIgKyB0aGlzLmF0dHJzW2kgKyAxXSArIFwiXFxcIlwiIDogJyc7XHJcbiAgICAgICAgICAgIGF0dHJzICs9IFwiIFwiICsgYXR0ck5hbWUgKyBhdHRyVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIjxcIiArIHRhZ05hbWUgKyBjbGFzc0F0dHIgKyBhdHRycyArIFwiPjwvXCIgKyB0YWdOYW1lICsgXCI+XCI7XHJcbiAgICB9O1xyXG4gICAgQ3NzU2VsZWN0b3IucHJvdG90eXBlLmFkZEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7IHZhbHVlID0gX0VNUFRZX0FUVFJfVkFMVUU7IH1cclxuICAgICAgICB0aGlzLmF0dHJzLnB1c2gobmFtZS50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFsdWUgPSBfRU1QVFlfQVRUUl9WQUxVRTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hdHRycy5wdXNoKHZhbHVlKTtcclxuICAgIH07XHJcbiAgICBDc3NTZWxlY3Rvci5wcm90b3R5cGUuYWRkQ2xhc3NOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHsgdGhpcy5jbGFzc05hbWVzLnB1c2gobmFtZS50b0xvd2VyQ2FzZSgpKTsgfTtcclxuICAgIENzc1NlbGVjdG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVzID0gJyc7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5lbGVtZW50KSkge1xyXG4gICAgICAgICAgICByZXMgKz0gdGhpcy5lbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLmNsYXNzTmFtZXMpKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jbGFzc05hbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICByZXMgKz0gJy4nICsgdGhpcy5jbGFzc05hbWVzW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRoaXMuYXR0cnMpKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5hdHRycy5sZW5ndGg7KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXR0ck5hbWUgPSB0aGlzLmF0dHJzW2krK107XHJcbiAgICAgICAgICAgICAgICB2YXIgYXR0clZhbHVlID0gdGhpcy5hdHRyc1tpKytdO1xyXG4gICAgICAgICAgICAgICAgcmVzICs9ICdbJyArIGF0dHJOYW1lO1xyXG4gICAgICAgICAgICAgICAgaWYgKGF0dHJWYWx1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzICs9ICc9JyArIGF0dHJWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlcyArPSAnXSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ub3RTZWxlY3RvcnMuZm9yRWFjaChmdW5jdGlvbiAobm90U2VsZWN0b3IpIHsgcmV0dXJuIHJlcyArPSBcIjpub3QoXCIgKyBub3RTZWxlY3RvciArIFwiKVwiOyB9KTtcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDc3NTZWxlY3RvcjtcclxufSkoKTtcclxuZXhwb3J0cy5Dc3NTZWxlY3RvciA9IENzc1NlbGVjdG9yO1xyXG4vKipcclxuICogUmVhZHMgYSBsaXN0IG9mIENzc1NlbGVjdG9ycyBhbmQgYWxsb3dzIHRvIGNhbGN1bGF0ZSB3aGljaCBvbmVzXHJcbiAqIGFyZSBjb250YWluZWQgaW4gYSBnaXZlbiBDc3NTZWxlY3Rvci5cclxuICovXHJcbnZhciBTZWxlY3Rvck1hdGNoZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2VsZWN0b3JNYXRjaGVyKCkge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnRNYXAgPSBuZXcgY29sbGVjdGlvbl8xLk1hcCgpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnRQYXJ0aWFsTWFwID0gbmV3IGNvbGxlY3Rpb25fMS5NYXAoKTtcclxuICAgICAgICB0aGlzLl9jbGFzc01hcCA9IG5ldyBjb2xsZWN0aW9uXzEuTWFwKCk7XHJcbiAgICAgICAgdGhpcy5fY2xhc3NQYXJ0aWFsTWFwID0gbmV3IGNvbGxlY3Rpb25fMS5NYXAoKTtcclxuICAgICAgICB0aGlzLl9hdHRyVmFsdWVNYXAgPSBuZXcgY29sbGVjdGlvbl8xLk1hcCgpO1xyXG4gICAgICAgIHRoaXMuX2F0dHJWYWx1ZVBhcnRpYWxNYXAgPSBuZXcgY29sbGVjdGlvbl8xLk1hcCgpO1xyXG4gICAgICAgIHRoaXMuX2xpc3RDb250ZXh0cyA9IFtdO1xyXG4gICAgfVxyXG4gICAgU2VsZWN0b3JNYXRjaGVyLmNyZWF0ZU5vdE1hdGNoZXIgPSBmdW5jdGlvbiAobm90U2VsZWN0b3JzKSB7XHJcbiAgICAgICAgdmFyIG5vdE1hdGNoZXIgPSBuZXcgU2VsZWN0b3JNYXRjaGVyKCk7XHJcbiAgICAgICAgbm90TWF0Y2hlci5hZGRTZWxlY3RhYmxlcyhub3RTZWxlY3RvcnMsIG51bGwpO1xyXG4gICAgICAgIHJldHVybiBub3RNYXRjaGVyO1xyXG4gICAgfTtcclxuICAgIFNlbGVjdG9yTWF0Y2hlci5wcm90b3R5cGUuYWRkU2VsZWN0YWJsZXMgPSBmdW5jdGlvbiAoY3NzU2VsZWN0b3JzLCBjYWxsYmFja0N0eHQpIHtcclxuICAgICAgICB2YXIgbGlzdENvbnRleHQgPSBudWxsO1xyXG4gICAgICAgIGlmIChjc3NTZWxlY3RvcnMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBsaXN0Q29udGV4dCA9IG5ldyBTZWxlY3Rvckxpc3RDb250ZXh0KGNzc1NlbGVjdG9ycyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3RDb250ZXh0cy5wdXNoKGxpc3RDb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjc3NTZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5fYWRkU2VsZWN0YWJsZShjc3NTZWxlY3RvcnNbaV0sIGNhbGxiYWNrQ3R4dCwgbGlzdENvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhbiBvYmplY3QgdGhhdCBjYW4gYmUgZm91bmQgbGF0ZXIgb24gYnkgY2FsbGluZyBgbWF0Y2hgLlxyXG4gICAgICogQHBhcmFtIGNzc1NlbGVjdG9yIEEgY3NzIHNlbGVjdG9yXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tDdHh0IEFuIG9wYXF1ZSBvYmplY3QgdGhhdCB3aWxsIGJlIGdpdmVuIHRvIHRoZSBjYWxsYmFjayBvZiB0aGUgYG1hdGNoYCBmdW5jdGlvblxyXG4gICAgICovXHJcbiAgICBTZWxlY3Rvck1hdGNoZXIucHJvdG90eXBlLl9hZGRTZWxlY3RhYmxlID0gZnVuY3Rpb24gKGNzc1NlbGVjdG9yLCBjYWxsYmFja0N0eHQsIGxpc3RDb250ZXh0KSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXIgPSB0aGlzO1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gY3NzU2VsZWN0b3IuZWxlbWVudDtcclxuICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IGNzc1NlbGVjdG9yLmNsYXNzTmFtZXM7XHJcbiAgICAgICAgdmFyIGF0dHJzID0gY3NzU2VsZWN0b3IuYXR0cnM7XHJcbiAgICAgICAgdmFyIHNlbGVjdGFibGUgPSBuZXcgU2VsZWN0b3JDb250ZXh0KGNzc1NlbGVjdG9yLCBjYWxsYmFja0N0eHQsIGxpc3RDb250ZXh0KTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChlbGVtZW50KSkge1xyXG4gICAgICAgICAgICB2YXIgaXNUZXJtaW5hbCA9IGF0dHJzLmxlbmd0aCA9PT0gMCAmJiBjbGFzc05hbWVzLmxlbmd0aCA9PT0gMDtcclxuICAgICAgICAgICAgaWYgKGlzVGVybWluYWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZFRlcm1pbmFsKG1hdGNoZXIuX2VsZW1lbnRNYXAsIGVsZW1lbnQsIHNlbGVjdGFibGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlciA9IHRoaXMuX2FkZFBhcnRpYWwobWF0Y2hlci5fZWxlbWVudFBhcnRpYWxNYXAsIGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGNsYXNzTmFtZXMpKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBjbGFzc05hbWVzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzVGVybWluYWwgPSBhdHRycy5sZW5ndGggPT09IDAgJiYgaW5kZXggPT09IGNsYXNzTmFtZXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBjbGFzc05hbWVzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmIChpc1Rlcm1pbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkVGVybWluYWwobWF0Y2hlci5fY2xhc3NNYXAsIGNsYXNzTmFtZSwgc2VsZWN0YWJsZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVyID0gdGhpcy5fYWRkUGFydGlhbChtYXRjaGVyLl9jbGFzc1BhcnRpYWxNYXAsIGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoYXR0cnMpKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBhdHRycy5sZW5ndGg7KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNUZXJtaW5hbCA9IGluZGV4ID09PSBhdHRycy5sZW5ndGggLSAyO1xyXG4gICAgICAgICAgICAgICAgdmFyIGF0dHJOYW1lID0gYXR0cnNbaW5kZXgrK107XHJcbiAgICAgICAgICAgICAgICB2YXIgYXR0clZhbHVlID0gYXR0cnNbaW5kZXgrK107XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNUZXJtaW5hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXJtaW5hbE1hcCA9IG1hdGNoZXIuX2F0dHJWYWx1ZU1hcDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGVybWluYWxWYWx1ZXNNYXAgPSB0ZXJtaW5hbE1hcC5nZXQoYXR0ck5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayh0ZXJtaW5hbFZhbHVlc01hcCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYWxWYWx1ZXNNYXAgPSBuZXcgY29sbGVjdGlvbl8xLk1hcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbE1hcC5zZXQoYXR0ck5hbWUsIHRlcm1pbmFsVmFsdWVzTWFwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkVGVybWluYWwodGVybWluYWxWYWx1ZXNNYXAsIGF0dHJWYWx1ZSwgc2VsZWN0YWJsZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydHRpYWxNYXAgPSBtYXRjaGVyLl9hdHRyVmFsdWVQYXJ0aWFsTWFwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsVmFsdWVzTWFwID0gcGFydHRpYWxNYXAuZ2V0KGF0dHJOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsocGFydGlhbFZhbHVlc01hcCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFydGlhbFZhbHVlc01hcCA9IG5ldyBjb2xsZWN0aW9uXzEuTWFwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnR0aWFsTWFwLnNldChhdHRyTmFtZSwgcGFydGlhbFZhbHVlc01hcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXIgPSB0aGlzLl9hZGRQYXJ0aWFsKHBhcnRpYWxWYWx1ZXNNYXAsIGF0dHJWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU2VsZWN0b3JNYXRjaGVyLnByb3RvdHlwZS5fYWRkVGVybWluYWwgPSBmdW5jdGlvbiAobWFwLCBuYW1lLCBzZWxlY3RhYmxlKSB7XHJcbiAgICAgICAgdmFyIHRlcm1pbmFsTGlzdCA9IG1hcC5nZXQobmFtZSk7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHRlcm1pbmFsTGlzdCkpIHtcclxuICAgICAgICAgICAgdGVybWluYWxMaXN0ID0gW107XHJcbiAgICAgICAgICAgIG1hcC5zZXQobmFtZSwgdGVybWluYWxMaXN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGVybWluYWxMaXN0LnB1c2goc2VsZWN0YWJsZSk7XHJcbiAgICB9O1xyXG4gICAgU2VsZWN0b3JNYXRjaGVyLnByb3RvdHlwZS5fYWRkUGFydGlhbCA9IGZ1bmN0aW9uIChtYXAsIG5hbWUpIHtcclxuICAgICAgICB2YXIgbWF0Y2hlciA9IG1hcC5nZXQobmFtZSk7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKG1hdGNoZXIpKSB7XHJcbiAgICAgICAgICAgIG1hdGNoZXIgPSBuZXcgU2VsZWN0b3JNYXRjaGVyKCk7XHJcbiAgICAgICAgICAgIG1hcC5zZXQobmFtZSwgbWF0Y2hlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXRjaGVyO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRmluZCB0aGUgb2JqZWN0cyB0aGF0IGhhdmUgYmVlbiBhZGRlZCB2aWEgYGFkZFNlbGVjdGFibGVgXHJcbiAgICAgKiB3aG9zZSBjc3Mgc2VsZWN0b3IgaXMgY29udGFpbmVkIGluIHRoZSBnaXZlbiBjc3Mgc2VsZWN0b3IuXHJcbiAgICAgKiBAcGFyYW0gY3NzU2VsZWN0b3IgQSBjc3Mgc2VsZWN0b3JcclxuICAgICAqIEBwYXJhbSBtYXRjaGVkQ2FsbGJhY2sgVGhpcyBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBvYmplY3QgaGFuZGVkIGludG8gYGFkZFNlbGVjdGFibGVgXHJcbiAgICAgKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSBpZiBhIG1hdGNoIHdhcyBmb3VuZFxyXG4gICAgKi9cclxuICAgIFNlbGVjdG9yTWF0Y2hlci5wcm90b3R5cGUubWF0Y2ggPSBmdW5jdGlvbiAoY3NzU2VsZWN0b3IsIG1hdGNoZWRDYWxsYmFjaykge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGNzc1NlbGVjdG9yLmVsZW1lbnQ7XHJcbiAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBjc3NTZWxlY3Rvci5jbGFzc05hbWVzO1xyXG4gICAgICAgIHZhciBhdHRycyA9IGNzc1NlbGVjdG9yLmF0dHJzO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fbGlzdENvbnRleHRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3RDb250ZXh0c1tpXS5hbHJlYWR5TWF0Y2hlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHQgPSB0aGlzLl9tYXRjaFRlcm1pbmFsKHRoaXMuX2VsZW1lbnRNYXAsIGVsZW1lbnQsIGNzc1NlbGVjdG9yLCBtYXRjaGVkQ2FsbGJhY2spIHx8IHJlc3VsdDtcclxuICAgICAgICByZXN1bHQgPSB0aGlzLl9tYXRjaFBhcnRpYWwodGhpcy5fZWxlbWVudFBhcnRpYWxNYXAsIGVsZW1lbnQsIGNzc1NlbGVjdG9yLCBtYXRjaGVkQ2FsbGJhY2spIHx8XHJcbiAgICAgICAgICAgIHJlc3VsdDtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChjbGFzc05hbWVzKSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgY2xhc3NOYW1lcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBjbGFzc05hbWVzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWF0Y2hUZXJtaW5hbCh0aGlzLl9jbGFzc01hcCwgY2xhc3NOYW1lLCBjc3NTZWxlY3RvciwgbWF0Y2hlZENhbGxiYWNrKSB8fCByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hdGNoUGFydGlhbCh0aGlzLl9jbGFzc1BhcnRpYWxNYXAsIGNsYXNzTmFtZSwgY3NzU2VsZWN0b3IsIG1hdGNoZWRDYWxsYmFjaykgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGF0dHJzKSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgYXR0cnMubGVuZ3RoOykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGF0dHJOYW1lID0gYXR0cnNbaW5kZXgrK107XHJcbiAgICAgICAgICAgICAgICB2YXIgYXR0clZhbHVlID0gYXR0cnNbaW5kZXgrK107XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVybWluYWxWYWx1ZXNNYXAgPSB0aGlzLl9hdHRyVmFsdWVNYXAuZ2V0KGF0dHJOYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmICghbGFuZ18xLlN0cmluZ1dyYXBwZXIuZXF1YWxzKGF0dHJWYWx1ZSwgX0VNUFRZX0FUVFJfVkFMVUUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fbWF0Y2hUZXJtaW5hbCh0ZXJtaW5hbFZhbHVlc01hcCwgX0VNUFRZX0FUVFJfVkFMVUUsIGNzc1NlbGVjdG9yLCBtYXRjaGVkQ2FsbGJhY2spIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX21hdGNoVGVybWluYWwodGVybWluYWxWYWx1ZXNNYXAsIGF0dHJWYWx1ZSwgY3NzU2VsZWN0b3IsIG1hdGNoZWRDYWxsYmFjaykgfHxcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFydGlhbFZhbHVlc01hcCA9IHRoaXMuX2F0dHJWYWx1ZVBhcnRpYWxNYXAuZ2V0KGF0dHJOYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmICghbGFuZ18xLlN0cmluZ1dyYXBwZXIuZXF1YWxzKGF0dHJWYWx1ZSwgX0VNUFRZX0FUVFJfVkFMVUUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fbWF0Y2hQYXJ0aWFsKHBhcnRpYWxWYWx1ZXNNYXAsIF9FTVBUWV9BVFRSX1ZBTFVFLCBjc3NTZWxlY3RvciwgbWF0Y2hlZENhbGxiYWNrKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hdGNoUGFydGlhbChwYXJ0aWFsVmFsdWVzTWFwLCBhdHRyVmFsdWUsIGNzc1NlbGVjdG9yLCBtYXRjaGVkQ2FsbGJhY2spIHx8IHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIFNlbGVjdG9yTWF0Y2hlci5wcm90b3R5cGUuX21hdGNoVGVybWluYWwgPSBmdW5jdGlvbiAobWFwLCBuYW1lLCBjc3NTZWxlY3RvciwgbWF0Y2hlZENhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKG1hcCkgfHwgbGFuZ18xLmlzQmxhbmsobmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc2VsZWN0YWJsZXMgPSBtYXAuZ2V0KG5hbWUpO1xyXG4gICAgICAgIHZhciBzdGFyU2VsZWN0YWJsZXMgPSBtYXAuZ2V0KFwiKlwiKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChzdGFyU2VsZWN0YWJsZXMpKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGFibGVzID0gc2VsZWN0YWJsZXMuY29uY2F0KHN0YXJTZWxlY3RhYmxlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhzZWxlY3RhYmxlcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc2VsZWN0YWJsZTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHNlbGVjdGFibGVzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICBzZWxlY3RhYmxlID0gc2VsZWN0YWJsZXNbaW5kZXhdO1xyXG4gICAgICAgICAgICByZXN1bHQgPSBzZWxlY3RhYmxlLmZpbmFsaXplKGNzc1NlbGVjdG9yLCBtYXRjaGVkQ2FsbGJhY2spIHx8IHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBTZWxlY3Rvck1hdGNoZXIucHJvdG90eXBlLl9tYXRjaFBhcnRpYWwgPSBmdW5jdGlvbiAobWFwLCBuYW1lLCBjc3NTZWxlY3RvciwgbWF0Y2hlZENhbGxiYWNrIC8qOiAoYzogQ3NzU2VsZWN0b3IsIGE6IGFueSkgPT4gdm9pZCovKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKG1hcCkgfHwgbGFuZ18xLmlzQmxhbmsobmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbmVzdGVkU2VsZWN0b3IgPSBtYXAuZ2V0KG5hbWUpO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhuZXN0ZWRTZWxlY3RvcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUT0RPKHBlcmYpOiBnZXQgcmlkIG9mIHJlY3Vyc2lvbiBhbmQgbWVhc3VyZSBhZ2FpblxyXG4gICAgICAgIC8vIFRPRE8ocGVyZik6IGRvbid0IHBhc3MgdGhlIHdob2xlIHNlbGVjdG9yIGludG8gdGhlIHJlY3Vyc2lvbixcclxuICAgICAgICAvLyBidXQgb25seSB0aGUgbm90IHByb2Nlc3NlZCBwYXJ0c1xyXG4gICAgICAgIHJldHVybiBuZXN0ZWRTZWxlY3Rvci5tYXRjaChjc3NTZWxlY3RvciwgbWF0Y2hlZENhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU2VsZWN0b3JNYXRjaGVyO1xyXG59KSgpO1xyXG5leHBvcnRzLlNlbGVjdG9yTWF0Y2hlciA9IFNlbGVjdG9yTWF0Y2hlcjtcclxudmFyIFNlbGVjdG9yTGlzdENvbnRleHQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2VsZWN0b3JMaXN0Q29udGV4dChzZWxlY3RvcnMpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdG9ycyA9IHNlbGVjdG9ycztcclxuICAgICAgICB0aGlzLmFscmVhZHlNYXRjaGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU2VsZWN0b3JMaXN0Q29udGV4dDtcclxufSkoKTtcclxuZXhwb3J0cy5TZWxlY3Rvckxpc3RDb250ZXh0ID0gU2VsZWN0b3JMaXN0Q29udGV4dDtcclxuLy8gU3RvcmUgY29udGV4dCB0byBwYXNzIGJhY2sgc2VsZWN0b3IgYW5kIGNvbnRleHQgd2hlbiBhIHNlbGVjdG9yIGlzIG1hdGNoZWRcclxudmFyIFNlbGVjdG9yQ29udGV4dCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTZWxlY3RvckNvbnRleHQoc2VsZWN0b3IsIGNiQ29udGV4dCwgbGlzdENvbnRleHQpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XHJcbiAgICAgICAgdGhpcy5jYkNvbnRleHQgPSBjYkNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5saXN0Q29udGV4dCA9IGxpc3RDb250ZXh0O1xyXG4gICAgICAgIHRoaXMubm90U2VsZWN0b3JzID0gc2VsZWN0b3Iubm90U2VsZWN0b3JzO1xyXG4gICAgfVxyXG4gICAgU2VsZWN0b3JDb250ZXh0LnByb3RvdHlwZS5maW5hbGl6ZSA9IGZ1bmN0aW9uIChjc3NTZWxlY3RvciwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy5ub3RTZWxlY3RvcnMubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgICAgICAobGFuZ18xLmlzQmxhbmsodGhpcy5saXN0Q29udGV4dCkgfHwgIXRoaXMubGlzdENvbnRleHQuYWxyZWFkeU1hdGNoZWQpKSB7XHJcbiAgICAgICAgICAgIHZhciBub3RNYXRjaGVyID0gU2VsZWN0b3JNYXRjaGVyLmNyZWF0ZU5vdE1hdGNoZXIodGhpcy5ub3RTZWxlY3RvcnMpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSAhbm90TWF0Y2hlci5tYXRjaChjc3NTZWxlY3RvciwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXN1bHQgJiYgbGFuZ18xLmlzUHJlc2VudChjYWxsYmFjaykgJiZcclxuICAgICAgICAgICAgKGxhbmdfMS5pc0JsYW5rKHRoaXMubGlzdENvbnRleHQpIHx8ICF0aGlzLmxpc3RDb250ZXh0LmFscmVhZHlNYXRjaGVkKSkge1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLmxpc3RDb250ZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0Q29udGV4dC5hbHJlYWR5TWF0Y2hlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5zZWxlY3RvciwgdGhpcy5jYkNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBTZWxlY3RvckNvbnRleHQ7XHJcbn0pKCk7XHJcbmV4cG9ydHMuU2VsZWN0b3JDb250ZXh0ID0gU2VsZWN0b3JDb250ZXh0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWxlY3Rvci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGRvbV9hZGFwdGVyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kb20vZG9tX2FkYXB0ZXInKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG4vKipcclxuICogVGhpcyBmaWxlIGlzIGEgcG9ydCBvZiBzaGFkb3dDU1MgZnJvbSB3ZWJjb21wb25lbnRzLmpzIHRvIFR5cGVTY3JpcHQuXHJcbiAqXHJcbiAqIFBsZWFzZSBtYWtlIHN1cmUgdG8ga2VlcCB0byBlZGl0cyBpbiBzeW5jIHdpdGggdGhlIHNvdXJjZSBmaWxlLlxyXG4gKlxyXG4gKiBTb3VyY2U6XHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy9ibG9iLzRlZmVjZDdlMGUvc3JjL1NoYWRvd0NTUy9TaGFkb3dDU1MuanNcclxuICpcclxuICogVGhlIG9yaWdpbmFsIGZpbGUgbGV2ZWwgY29tbWVudCBpcyByZXByb2R1Y2VkIGJlbG93XHJcbiAqL1xyXG4vKlxyXG4gIFRoaXMgaXMgYSBsaW1pdGVkIHNoaW0gZm9yIFNoYWRvd0RPTSBjc3Mgc3R5bGluZy5cclxuICBodHRwczovL2R2Y3MudzMub3JnL2hnL3dlYmNvbXBvbmVudHMvcmF3LWZpbGUvdGlwL3NwZWMvc2hhZG93L2luZGV4Lmh0bWwjc3R5bGVzXHJcblxyXG4gIFRoZSBpbnRlbnRpb24gaGVyZSBpcyB0byBzdXBwb3J0IG9ubHkgdGhlIHN0eWxpbmcgZmVhdHVyZXMgd2hpY2ggY2FuIGJlXHJcbiAgcmVsYXRpdmVseSBzaW1wbHkgaW1wbGVtZW50ZWQuIFRoZSBnb2FsIGlzIHRvIGFsbG93IHVzZXJzIHRvIGF2b2lkIHRoZVxyXG4gIG1vc3Qgb2J2aW91cyBwaXRmYWxscyBhbmQgZG8gc28gd2l0aG91dCBjb21wcm9taXNpbmcgcGVyZm9ybWFuY2Ugc2lnbmlmaWNhbnRseS5cclxuICBGb3IgU2hhZG93RE9NIHN0eWxpbmcgdGhhdCdzIG5vdCBjb3ZlcmVkIGhlcmUsIGEgc2V0IG9mIGJlc3QgcHJhY3RpY2VzXHJcbiAgY2FuIGJlIHByb3ZpZGVkIHRoYXQgc2hvdWxkIGFsbG93IHVzZXJzIHRvIGFjY29tcGxpc2ggbW9yZSBjb21wbGV4IHN0eWxpbmcuXHJcblxyXG4gIFRoZSBmb2xsb3dpbmcgaXMgYSBsaXN0IG9mIHNwZWNpZmljIFNoYWRvd0RPTSBzdHlsaW5nIGZlYXR1cmVzIGFuZCBhIGJyaWVmXHJcbiAgZGlzY3Vzc2lvbiBvZiB0aGUgYXBwcm9hY2ggdXNlZCB0byBzaGltLlxyXG5cclxuICBTaGltbWVkIGZlYXR1cmVzOlxyXG5cclxuICAqIDpob3N0LCA6aG9zdC1jb250ZXh0OiBTaGFkb3dET00gYWxsb3dzIHN0eWxpbmcgb2YgdGhlIHNoYWRvd1Jvb3QncyBob3N0XHJcbiAgZWxlbWVudCB1c2luZyB0aGUgOmhvc3QgcnVsZS4gVG8gc2hpbSB0aGlzIGZlYXR1cmUsIHRoZSA6aG9zdCBzdHlsZXMgYXJlXHJcbiAgcmVmb3JtYXR0ZWQgYW5kIHByZWZpeGVkIHdpdGggYSBnaXZlbiBzY29wZSBuYW1lIGFuZCBwcm9tb3RlZCB0byBhXHJcbiAgZG9jdW1lbnQgbGV2ZWwgc3R5bGVzaGVldC5cclxuICBGb3IgZXhhbXBsZSwgZ2l2ZW4gYSBzY29wZSBuYW1lIG9mIC5mb28sIGEgcnVsZSBsaWtlIHRoaXM6XHJcblxyXG4gICAgOmhvc3Qge1xyXG4gICAgICAgIGJhY2tncm91bmQ6IHJlZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICBiZWNvbWVzOlxyXG5cclxuICAgIC5mb28ge1xyXG4gICAgICBiYWNrZ3JvdW5kOiByZWQ7XHJcbiAgICB9XHJcblxyXG4gICogZW5jYXBzdWx0aW9uOiBTdHlsZXMgZGVmaW5lZCB3aXRoaW4gU2hhZG93RE9NLCBhcHBseSBvbmx5IHRvXHJcbiAgZG9tIGluc2lkZSB0aGUgU2hhZG93RE9NLiBQb2x5bWVyIHVzZXMgb25lIG9mIHR3byB0ZWNobmlxdWVzIHRvIGltbGVtZW50XHJcbiAgdGhpcyBmZWF0dXJlLlxyXG5cclxuICBCeSBkZWZhdWx0LCBydWxlcyBhcmUgcHJlZml4ZWQgd2l0aCB0aGUgaG9zdCBlbGVtZW50IHRhZyBuYW1lXHJcbiAgYXMgYSBkZXNjZW5kYW50IHNlbGVjdG9yLiBUaGlzIGVuc3VyZXMgc3R5bGluZyBkb2VzIG5vdCBsZWFrIG91dCBvZiB0aGUgJ3RvcCdcclxuICBvZiB0aGUgZWxlbWVudCdzIFNoYWRvd0RPTS4gRm9yIGV4YW1wbGUsXHJcblxyXG4gIGRpdiB7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgfVxyXG5cclxuICBiZWNvbWVzOlxyXG5cclxuICB4LWZvbyBkaXYge1xyXG4gICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIH1cclxuXHJcbiAgYmVjb21lczpcclxuXHJcblxyXG4gIEFsdGVybmF0aXZlbHksIGlmIFdlYkNvbXBvbmVudHMuU2hhZG93Q1NTLnN0cmljdFN0eWxpbmcgaXMgc2V0IHRvIHRydWUgdGhlblxyXG4gIHNlbGVjdG9ycyBhcmUgc2NvcGVkIGJ5IGFkZGluZyBhbiBhdHRyaWJ1dGUgc2VsZWN0b3Igc3VmZml4IHRvIGVhY2hcclxuICBzaW1wbGUgc2VsZWN0b3IgdGhhdCBjb250YWlucyB0aGUgaG9zdCBlbGVtZW50IHRhZyBuYW1lLiBFYWNoIGVsZW1lbnRcclxuICBpbiB0aGUgZWxlbWVudCdzIFNoYWRvd0RPTSB0ZW1wbGF0ZSBpcyBhbHNvIGdpdmVuIHRoZSBzY29wZSBhdHRyaWJ1dGUuXHJcbiAgVGh1cywgdGhlc2UgcnVsZXMgbWF0Y2ggb25seSBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHNjb3BlIGF0dHJpYnV0ZS5cclxuICBGb3IgZXhhbXBsZSwgZ2l2ZW4gYSBzY29wZSBuYW1lIG9mIHgtZm9vLCBhIHJ1bGUgbGlrZSB0aGlzOlxyXG5cclxuICAgIGRpdiB7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgfVxyXG5cclxuICBiZWNvbWVzOlxyXG5cclxuICAgIGRpdlt4LWZvb10ge1xyXG4gICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIH1cclxuXHJcbiAgTm90ZSB0aGF0IGVsZW1lbnRzIHRoYXQgYXJlIGR5bmFtaWNhbGx5IGFkZGVkIHRvIGEgc2NvcGUgbXVzdCBoYXZlIHRoZSBzY29wZVxyXG4gIHNlbGVjdG9yIGFkZGVkIHRvIHRoZW0gbWFudWFsbHkuXHJcblxyXG4gICogdXBwZXIvbG93ZXIgYm91bmQgZW5jYXBzdWxhdGlvbjogU3R5bGVzIHdoaWNoIGFyZSBkZWZpbmVkIG91dHNpZGUgYVxyXG4gIHNoYWRvd1Jvb3Qgc2hvdWxkIG5vdCBjcm9zcyB0aGUgU2hhZG93RE9NIGJvdW5kYXJ5IGFuZCBzaG91bGQgbm90IGFwcGx5XHJcbiAgaW5zaWRlIGEgc2hhZG93Um9vdC5cclxuXHJcbiAgVGhpcyBzdHlsaW5nIGJlaGF2aW9yIGlzIG5vdCBlbXVsYXRlZC4gU29tZSBwb3NzaWJsZSB3YXlzIHRvIGRvIHRoaXMgdGhhdFxyXG4gIHdlcmUgcmVqZWN0ZWQgZHVlIHRvIGNvbXBsZXhpdHkgYW5kL29yIHBlcmZvcm1hbmNlIGNvbmNlcm5zIGluY2x1ZGU6ICgxKSByZXNldFxyXG4gIGV2ZXJ5IHBvc3NpYmxlIHByb3BlcnR5IGZvciBldmVyeSBwb3NzaWJsZSBzZWxlY3RvciBmb3IgYSBnaXZlbiBzY29wZSBuYW1lO1xyXG4gICgyKSByZS1pbXBsZW1lbnQgY3NzIGluIGphdmFzY3JpcHQuXHJcblxyXG4gIEFzIGFuIGFsdGVybmF0aXZlLCB1c2VycyBzaG91bGQgbWFrZSBzdXJlIHRvIHVzZSBzZWxlY3RvcnNcclxuICBzcGVjaWZpYyB0byB0aGUgc2NvcGUgaW4gd2hpY2ggdGhleSBhcmUgd29ya2luZy5cclxuXHJcbiAgKiA6OmRpc3RyaWJ1dGVkOiBUaGlzIGJlaGF2aW9yIGlzIG5vdCBlbXVsYXRlZC4gSXQncyBvZnRlbiBub3QgbmVjZXNzYXJ5XHJcbiAgdG8gc3R5bGUgdGhlIGNvbnRlbnRzIG9mIGEgc3BlY2lmaWMgaW5zZXJ0aW9uIHBvaW50IGFuZCBpbnN0ZWFkLCBkZXNjZW5kYW50c1xyXG4gIG9mIHRoZSBob3N0IGVsZW1lbnQgY2FuIGJlIHN0eWxlZCBzZWxlY3RpdmVseS4gVXNlcnMgY2FuIGFsc28gY3JlYXRlIGFuXHJcbiAgZXh0cmEgbm9kZSBhcm91bmQgYW4gaW5zZXJ0aW9uIHBvaW50IGFuZCBzdHlsZSB0aGF0IG5vZGUncyBjb250ZW50c1xyXG4gIHZpYSBkZXNjZW5kZW50IHNlbGVjdG9ycy4gRm9yIGV4YW1wbGUsIHdpdGggYSBzaGFkb3dSb290IGxpa2UgdGhpczpcclxuXHJcbiAgICA8c3R5bGU+XHJcbiAgICAgIDo6Y29udGVudChkaXYpIHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiByZWQ7XHJcbiAgICAgIH1cclxuICAgIDwvc3R5bGU+XHJcbiAgICA8Y29udGVudD48L2NvbnRlbnQ+XHJcblxyXG4gIGNvdWxkIGJlY29tZTpcclxuXHJcbiAgICA8c3R5bGU+XHJcbiAgICAgIC8gKkBwb2x5ZmlsbCAuY29udGVudC1jb250YWluZXIgZGl2ICogL1xyXG4gICAgICA6OmNvbnRlbnQoZGl2KSB7XHJcbiAgICAgICAgYmFja2dyb3VuZDogcmVkO1xyXG4gICAgICB9XHJcbiAgICA8L3N0eWxlPlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbnRlbnQtY29udGFpbmVyXCI+XHJcbiAgICAgIDxjb250ZW50PjwvY29udGVudD5cclxuICAgIDwvZGl2PlxyXG5cclxuICBOb3RlIHRoZSB1c2Ugb2YgQHBvbHlmaWxsIGluIHRoZSBjb21tZW50IGFib3ZlIGEgU2hhZG93RE9NIHNwZWNpZmljIHN0eWxlXHJcbiAgZGVjbGFyYXRpb24uIFRoaXMgaXMgYSBkaXJlY3RpdmUgdG8gdGhlIHN0eWxpbmcgc2hpbSB0byB1c2UgdGhlIHNlbGVjdG9yXHJcbiAgaW4gY29tbWVudHMgaW4gbGlldSBvZiB0aGUgbmV4dCBzZWxlY3RvciB3aGVuIHJ1bm5pbmcgdW5kZXIgcG9seWZpbGwuXHJcbiovXHJcbnZhciBTaGFkb3dDc3MgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2hhZG93Q3NzKCkge1xyXG4gICAgICAgIHRoaXMuc3RyaWN0U3R5bGluZyA9IHRydWU7XHJcbiAgICB9XHJcbiAgICAvKlxyXG4gICAgKiBTaGltIGEgc3R5bGUgZWxlbWVudCB3aXRoIHRoZSBnaXZlbiBzZWxlY3Rvci4gUmV0dXJucyBjc3NUZXh0IHRoYXQgY2FuXHJcbiAgICAqIGJlIGluY2x1ZGVkIGluIHRoZSBkb2N1bWVudCB2aWEgV2ViQ29tcG9uZW50cy5TaGFkb3dDU1MuYWRkQ3NzVG9Eb2N1bWVudChjc3MpLlxyXG4gICAgKi9cclxuICAgIFNoYWRvd0Nzcy5wcm90b3R5cGUuc2hpbVN0eWxlID0gZnVuY3Rpb24gKHN0eWxlLCBzZWxlY3RvciwgaG9zdFNlbGVjdG9yKSB7XHJcbiAgICAgICAgaWYgKGhvc3RTZWxlY3RvciA9PT0gdm9pZCAwKSB7IGhvc3RTZWxlY3RvciA9ICcnOyB9XHJcbiAgICAgICAgdmFyIGNzc1RleHQgPSBkb21fYWRhcHRlcl8xLkRPTS5nZXRUZXh0KHN0eWxlKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zaGltQ3NzVGV4dChjc3NUZXh0LCBzZWxlY3RvciwgaG9zdFNlbGVjdG9yKTtcclxuICAgIH07XHJcbiAgICAvKlxyXG4gICAgKiBTaGltIHNvbWUgY3NzVGV4dCB3aXRoIHRoZSBnaXZlbiBzZWxlY3Rvci4gUmV0dXJucyBjc3NUZXh0IHRoYXQgY2FuXHJcbiAgICAqIGJlIGluY2x1ZGVkIGluIHRoZSBkb2N1bWVudCB2aWEgV2ViQ29tcG9uZW50cy5TaGFkb3dDU1MuYWRkQ3NzVG9Eb2N1bWVudChjc3MpLlxyXG4gICAgKlxyXG4gICAgKiBXaGVuIHN0cmljdFN0eWxpbmcgaXMgdHJ1ZTpcclxuICAgICogLSBzZWxlY3RvciBpcyB0aGUgYXR0cmlidXRlIGFkZGVkIHRvIGFsbCBlbGVtZW50cyBpbnNpZGUgdGhlIGhvc3QsXHJcbiAgICAqIC0gaG9zdFNlbGVjdG9yIGlzIHRoZSBhdHRyaWJ1dGUgYWRkZWQgdG8gdGhlIGhvc3QgaXRzZWxmLlxyXG4gICAgKi9cclxuICAgIFNoYWRvd0Nzcy5wcm90b3R5cGUuc2hpbUNzc1RleHQgPSBmdW5jdGlvbiAoY3NzVGV4dCwgc2VsZWN0b3IsIGhvc3RTZWxlY3Rvcikge1xyXG4gICAgICAgIGlmIChob3N0U2VsZWN0b3IgPT09IHZvaWQgMCkgeyBob3N0U2VsZWN0b3IgPSAnJzsgfVxyXG4gICAgICAgIGNzc1RleHQgPSB0aGlzLl9pbnNlcnREaXJlY3RpdmVzKGNzc1RleHQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zY29wZUNzc1RleHQoY3NzVGV4dCwgc2VsZWN0b3IsIGhvc3RTZWxlY3Rvcik7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgU2hhZG93Q3NzLnByb3RvdHlwZS5faW5zZXJ0RGlyZWN0aXZlcyA9IGZ1bmN0aW9uIChjc3NUZXh0KSB7XHJcbiAgICAgICAgY3NzVGV4dCA9IHRoaXMuX2luc2VydFBvbHlmaWxsRGlyZWN0aXZlc0luQ3NzVGV4dChjc3NUZXh0KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zZXJ0UG9seWZpbGxSdWxlc0luQ3NzVGV4dChjc3NUZXh0KTtcclxuICAgIH07XHJcbiAgICAvKlxyXG4gICAgICogUHJvY2VzcyBzdHlsZXMgdG8gY29udmVydCBuYXRpdmUgU2hhZG93RE9NIHJ1bGVzIHRoYXQgd2lsbCB0cmlwXHJcbiAgICAgKiB1cCB0aGUgY3NzIHBhcnNlcjsgd2UgcmVseSBvbiBkZWNvcmF0aW5nIHRoZSBzdHlsZXNoZWV0IHdpdGggaW5lcnQgcnVsZXMuXHJcbiAgICAgKlxyXG4gICAgICogRm9yIGV4YW1wbGUsIHdlIGNvbnZlcnQgdGhpcyBydWxlOlxyXG4gICAgICpcclxuICAgICAqIHBvbHlmaWxsLW5leHQtc2VsZWN0b3IgeyBjb250ZW50OiAnOmhvc3QgbWVudS1pdGVtJzsgfVxyXG4gICAgICogOjpjb250ZW50IG1lbnUtaXRlbSB7XHJcbiAgICAgKlxyXG4gICAgICogdG8gdGhpczpcclxuICAgICAqXHJcbiAgICAgKiBzY29wZU5hbWUgbWVudS1pdGVtIHtcclxuICAgICAqXHJcbiAgICAqKi9cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIFNoYWRvd0Nzcy5wcm90b3R5cGUuX2luc2VydFBvbHlmaWxsRGlyZWN0aXZlc0luQ3NzVGV4dCA9IGZ1bmN0aW9uIChjc3NUZXh0KSB7XHJcbiAgICAgICAgLy8gRGlmZmVyZW5jZSB3aXRoIHdlYmNvbXBvbmVudHMuanM6IGRvZXMgbm90IGhhbmRsZSBjb21tZW50c1xyXG4gICAgICAgIHJldHVybiBsYW5nXzEuU3RyaW5nV3JhcHBlci5yZXBsYWNlQWxsTWFwcGVkKGNzc1RleHQsIF9jc3NDb250ZW50TmV4dFNlbGVjdG9yUmUsIGZ1bmN0aW9uIChtKSB7IHJldHVybiBtWzFdICsgJ3snOyB9KTtcclxuICAgIH07XHJcbiAgICAvKlxyXG4gICAgICogUHJvY2VzcyBzdHlsZXMgdG8gYWRkIHJ1bGVzIHdoaWNoIHdpbGwgb25seSBhcHBseSB1bmRlciB0aGUgcG9seWZpbGxcclxuICAgICAqXHJcbiAgICAgKiBGb3IgZXhhbXBsZSwgd2UgY29udmVydCB0aGlzIHJ1bGU6XHJcbiAgICAgKlxyXG4gICAgICogcG9seWZpbGwtcnVsZSB7XHJcbiAgICAgKiAgIGNvbnRlbnQ6ICc6aG9zdCBtZW51LWl0ZW0nO1xyXG4gICAgICogLi4uXHJcbiAgICAgKiB9XHJcbiAgICAgKlxyXG4gICAgICogdG8gdGhpczpcclxuICAgICAqXHJcbiAgICAgKiBzY29wZU5hbWUgbWVudS1pdGVtIHsuLi59XHJcbiAgICAgKlxyXG4gICAgKiovXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBTaGFkb3dDc3MucHJvdG90eXBlLl9pbnNlcnRQb2x5ZmlsbFJ1bGVzSW5Dc3NUZXh0ID0gZnVuY3Rpb24gKGNzc1RleHQpIHtcclxuICAgICAgICAvLyBEaWZmZXJlbmNlIHdpdGggd2ViY29tcG9uZW50cy5qczogZG9lcyBub3QgaGFuZGxlIGNvbW1lbnRzXHJcbiAgICAgICAgcmV0dXJuIGxhbmdfMS5TdHJpbmdXcmFwcGVyLnJlcGxhY2VBbGxNYXBwZWQoY3NzVGV4dCwgX2Nzc0NvbnRlbnRSdWxlUmUsIGZ1bmN0aW9uIChtKSB7XHJcbiAgICAgICAgICAgIHZhciBydWxlID0gbVswXTtcclxuICAgICAgICAgICAgcnVsZSA9IGxhbmdfMS5TdHJpbmdXcmFwcGVyLnJlcGxhY2UocnVsZSwgbVsxXSwgJycpO1xyXG4gICAgICAgICAgICBydWxlID0gbGFuZ18xLlN0cmluZ1dyYXBwZXIucmVwbGFjZShydWxlLCBtWzJdLCAnJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBtWzNdICsgcnVsZTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKiBFbnN1cmUgc3R5bGVzIGFyZSBzY29wZWQuIFBzZXVkby1zY29waW5nIHRha2VzIGEgcnVsZSBsaWtlOlxyXG4gICAgICpcclxuICAgICAqICAuZm9vIHsuLi4gfVxyXG4gICAgICpcclxuICAgICAqICBhbmQgY29udmVydHMgdGhpcyB0b1xyXG4gICAgICpcclxuICAgICAqICBzY29wZU5hbWUgLmZvbyB7IC4uLiB9XHJcbiAgICAqL1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgU2hhZG93Q3NzLnByb3RvdHlwZS5fc2NvcGVDc3NUZXh0ID0gZnVuY3Rpb24gKGNzc1RleHQsIHNjb3BlU2VsZWN0b3IsIGhvc3RTZWxlY3Rvcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHVuc2NvcGVkID0gdGhpcy5fZXh0cmFjdFVuc2NvcGVkUnVsZXNGcm9tQ3NzVGV4dChjc3NUZXh0KTtcclxuICAgICAgICBjc3NUZXh0ID0gdGhpcy5faW5zZXJ0UG9seWZpbGxIb3N0SW5Dc3NUZXh0KGNzc1RleHQpO1xyXG4gICAgICAgIGNzc1RleHQgPSB0aGlzLl9jb252ZXJ0Q29sb25Ib3N0KGNzc1RleHQpO1xyXG4gICAgICAgIGNzc1RleHQgPSB0aGlzLl9jb252ZXJ0Q29sb25Ib3N0Q29udGV4dChjc3NUZXh0KTtcclxuICAgICAgICBjc3NUZXh0ID0gdGhpcy5fY29udmVydFNoYWRvd0RPTVNlbGVjdG9ycyhjc3NUZXh0KTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChzY29wZVNlbGVjdG9yKSkge1xyXG4gICAgICAgICAgICBfd2l0aENzc1J1bGVzKGNzc1RleHQsIGZ1bmN0aW9uIChydWxlcykgeyBjc3NUZXh0ID0gX3RoaXMuX3Njb3BlUnVsZXMocnVsZXMsIHNjb3BlU2VsZWN0b3IsIGhvc3RTZWxlY3Rvcik7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjc3NUZXh0ID0gY3NzVGV4dCArICdcXG4nICsgdW5zY29wZWQ7XHJcbiAgICAgICAgcmV0dXJuIGNzc1RleHQudHJpbSgpO1xyXG4gICAgfTtcclxuICAgIC8qXHJcbiAgICAgKiBQcm9jZXNzIHN0eWxlcyB0byBhZGQgcnVsZXMgd2hpY2ggd2lsbCBvbmx5IGFwcGx5IHVuZGVyIHRoZSBwb2x5ZmlsbFxyXG4gICAgICogYW5kIGRvIG5vdCBwcm9jZXNzIHZpYSBDU1NPTS4gKENTU09NIGlzIGRlc3RydWN0aXZlIHRvIHJ1bGVzIG9uIHJhcmVcclxuICAgICAqIG9jY2FzaW9ucywgZS5nLiAtd2Via2l0LWNhbGMgb24gU2FmYXJpLilcclxuICAgICAqIEZvciBleGFtcGxlLCB3ZSBjb252ZXJ0IHRoaXMgcnVsZTpcclxuICAgICAqXHJcbiAgICAgKiBAcG9seWZpbGwtdW5zY29wZWQtcnVsZSB7XHJcbiAgICAgKiAgIGNvbnRlbnQ6ICdtZW51LWl0ZW0nO1xyXG4gICAgICogLi4uIH1cclxuICAgICAqXHJcbiAgICAgKiB0byB0aGlzOlxyXG4gICAgICpcclxuICAgICAqIG1lbnUtaXRlbSB7Li4ufVxyXG4gICAgICpcclxuICAgICoqL1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgU2hhZG93Q3NzLnByb3RvdHlwZS5fZXh0cmFjdFVuc2NvcGVkUnVsZXNGcm9tQ3NzVGV4dCA9IGZ1bmN0aW9uIChjc3NUZXh0KSB7XHJcbiAgICAgICAgLy8gRGlmZmVyZW5jZSB3aXRoIHdlYmNvbXBvbmVudHMuanM6IGRvZXMgbm90IGhhbmRsZSBjb21tZW50c1xyXG4gICAgICAgIHZhciByID0gJycsIG07XHJcbiAgICAgICAgdmFyIG1hdGNoZXIgPSBsYW5nXzEuUmVnRXhwV3JhcHBlci5tYXRjaGVyKF9jc3NDb250ZW50VW5zY29wZWRSdWxlUmUsIGNzc1RleHQpO1xyXG4gICAgICAgIHdoaWxlIChsYW5nXzEuaXNQcmVzZW50KG0gPSBsYW5nXzEuUmVnRXhwTWF0Y2hlcldyYXBwZXIubmV4dChtYXRjaGVyKSkpIHtcclxuICAgICAgICAgICAgdmFyIHJ1bGUgPSBtWzBdO1xyXG4gICAgICAgICAgICBydWxlID0gbGFuZ18xLlN0cmluZ1dyYXBwZXIucmVwbGFjZShydWxlLCBtWzJdLCAnJyk7XHJcbiAgICAgICAgICAgIHJ1bGUgPSBsYW5nXzEuU3RyaW5nV3JhcHBlci5yZXBsYWNlKHJ1bGUsIG1bMV0sIG1bM10pO1xyXG4gICAgICAgICAgICByICs9IHJ1bGUgKyAnXFxuXFxuJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9O1xyXG4gICAgLypcclxuICAgICAqIGNvbnZlcnQgYSBydWxlIGxpa2UgOmhvc3QoLmZvbykgPiAuYmFyIHsgfVxyXG4gICAgICpcclxuICAgICAqIHRvXHJcbiAgICAgKlxyXG4gICAgICogc2NvcGVOYW1lLmZvbyA+IC5iYXJcclxuICAgICovXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBTaGFkb3dDc3MucHJvdG90eXBlLl9jb252ZXJ0Q29sb25Ib3N0ID0gZnVuY3Rpb24gKGNzc1RleHQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udmVydENvbG9uUnVsZShjc3NUZXh0LCBfY3NzQ29sb25Ib3N0UmUsIHRoaXMuX2NvbG9uSG9zdFBhcnRSZXBsYWNlcik7XHJcbiAgICB9O1xyXG4gICAgLypcclxuICAgICAqIGNvbnZlcnQgYSBydWxlIGxpa2UgOmhvc3QtY29udGV4dCguZm9vKSA+IC5iYXIgeyB9XHJcbiAgICAgKlxyXG4gICAgICogdG9cclxuICAgICAqXHJcbiAgICAgKiBzY29wZU5hbWUuZm9vID4gLmJhciwgLmZvbyBzY29wZU5hbWUgPiAuYmFyIHsgfVxyXG4gICAgICpcclxuICAgICAqIGFuZFxyXG4gICAgICpcclxuICAgICAqIDpob3N0LWNvbnRleHQoLmZvbzpob3N0KSAuYmFyIHsgLi4uIH1cclxuICAgICAqXHJcbiAgICAgKiB0b1xyXG4gICAgICpcclxuICAgICAqIHNjb3BlTmFtZS5mb28gLmJhciB7IC4uLiB9XHJcbiAgICAqL1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgU2hhZG93Q3NzLnByb3RvdHlwZS5fY29udmVydENvbG9uSG9zdENvbnRleHQgPSBmdW5jdGlvbiAoY3NzVGV4dCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb252ZXJ0Q29sb25SdWxlKGNzc1RleHQsIF9jc3NDb2xvbkhvc3RDb250ZXh0UmUsIHRoaXMuX2NvbG9uSG9zdENvbnRleHRQYXJ0UmVwbGFjZXIpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIFNoYWRvd0Nzcy5wcm90b3R5cGUuX2NvbnZlcnRDb2xvblJ1bGUgPSBmdW5jdGlvbiAoY3NzVGV4dCwgcmVnRXhwLCBwYXJ0UmVwbGFjZXIpIHtcclxuICAgICAgICAvLyBwMSA9IDpob3N0LCBwMiA9IGNvbnRlbnRzIG9mICgpLCBwMyByZXN0IG9mIHJ1bGVcclxuICAgICAgICByZXR1cm4gbGFuZ18xLlN0cmluZ1dyYXBwZXIucmVwbGFjZUFsbE1hcHBlZChjc3NUZXh0LCByZWdFeHAsIGZ1bmN0aW9uIChtKSB7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KG1bMl0pKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFydHMgPSBtWzJdLnNwbGl0KCcsJyksIHIgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IHBhcnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhwKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgcCA9IHAudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHIucHVzaChwYXJ0UmVwbGFjZXIoX3BvbHlmaWxsSG9zdE5vQ29tYmluYXRvciwgcCwgbVszXSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHIuam9pbignLCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9wb2x5ZmlsbEhvc3ROb0NvbWJpbmF0b3IgKyBtWzNdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgU2hhZG93Q3NzLnByb3RvdHlwZS5fY29sb25Ib3N0Q29udGV4dFBhcnRSZXBsYWNlciA9IGZ1bmN0aW9uIChob3N0LCBwYXJ0LCBzdWZmaXgpIHtcclxuICAgICAgICBpZiAobGFuZ18xLlN0cmluZ1dyYXBwZXIuY29udGFpbnMocGFydCwgX3BvbHlmaWxsSG9zdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9uSG9zdFBhcnRSZXBsYWNlcihob3N0LCBwYXJ0LCBzdWZmaXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhvc3QgKyBwYXJ0ICsgc3VmZml4ICsgJywgJyArIHBhcnQgKyAnICcgKyBob3N0ICsgc3VmZml4O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBTaGFkb3dDc3MucHJvdG90eXBlLl9jb2xvbkhvc3RQYXJ0UmVwbGFjZXIgPSBmdW5jdGlvbiAoaG9zdCwgcGFydCwgc3VmZml4KSB7XHJcbiAgICAgICAgcmV0dXJuIGhvc3QgKyBsYW5nXzEuU3RyaW5nV3JhcHBlci5yZXBsYWNlKHBhcnQsIF9wb2x5ZmlsbEhvc3QsICcnKSArIHN1ZmZpeDtcclxuICAgIH07XHJcbiAgICAvKlxyXG4gICAgICogQ29udmVydCBjb21iaW5hdG9ycyBsaWtlIDo6c2hhZG93IGFuZCBwc2V1ZG8tZWxlbWVudHMgbGlrZSA6OmNvbnRlbnRcclxuICAgICAqIGJ5IHJlcGxhY2luZyB3aXRoIHNwYWNlLlxyXG4gICAgKi9cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIFNoYWRvd0Nzcy5wcm90b3R5cGUuX2NvbnZlcnRTaGFkb3dET01TZWxlY3RvcnMgPSBmdW5jdGlvbiAoY3NzVGV4dCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3NoYWRvd0RPTVNlbGVjdG9yc1JlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNzc1RleHQgPSBsYW5nXzEuU3RyaW5nV3JhcHBlci5yZXBsYWNlQWxsKGNzc1RleHQsIF9zaGFkb3dET01TZWxlY3RvcnNSZVtpXSwgJyAnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNzc1RleHQ7XHJcbiAgICB9O1xyXG4gICAgLy8gY2hhbmdlIGEgc2VsZWN0b3IgbGlrZSAnZGl2JyB0byAnbmFtZSBkaXYnXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBTaGFkb3dDc3MucHJvdG90eXBlLl9zY29wZVJ1bGVzID0gZnVuY3Rpb24gKGNzc1J1bGVzLCBzY29wZVNlbGVjdG9yLCBob3N0U2VsZWN0b3IpIHtcclxuICAgICAgICB2YXIgY3NzVGV4dCA9ICcnO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGNzc1J1bGVzKSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNzc1J1bGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcnVsZSA9IGNzc1J1bGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRvbV9hZGFwdGVyXzEuRE9NLmlzU3R5bGVSdWxlKHJ1bGUpIHx8IGRvbV9hZGFwdGVyXzEuRE9NLmlzUGFnZVJ1bGUocnVsZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ICs9IHRoaXMuX3Njb3BlU2VsZWN0b3IocnVsZS5zZWxlY3RvclRleHQsIHNjb3BlU2VsZWN0b3IsIGhvc3RTZWxlY3RvciwgdGhpcy5zdHJpY3RTdHlsaW5nKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcge1xcbic7XHJcbiAgICAgICAgICAgICAgICAgICAgY3NzVGV4dCArPSB0aGlzLl9wcm9wZXJ0aWVzRnJvbVJ1bGUocnVsZSkgKyAnXFxufVxcblxcbic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkb21fYWRhcHRlcl8xLkRPTS5pc01lZGlhUnVsZShydWxlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gJ0BtZWRpYSAnICsgcnVsZS5tZWRpYS5tZWRpYVRleHQgKyAnIHtcXG4nO1xyXG4gICAgICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gdGhpcy5fc2NvcGVSdWxlcyhydWxlLmNzc1J1bGVzLCBzY29wZVNlbGVjdG9yLCBob3N0U2VsZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gJ1xcbn1cXG5cXG4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gS0VZRlJBTUVTX1JVTEUgaW4gSUUgdGhyb3dzIHdoZW4gd2UgcXVlcnkgY3NzVGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gaXQgY29udGFpbnMgYSAtd2Via2l0LSBwcm9wZXJ0eS5cclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIGhhcHBlbnMsIHdlIGZhbGxiYWNrIHRvIGNvbnN0cnVjdGluZyB0aGUgcnVsZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGZyb20gdGhlIENTU1J1bGVTZXRcclxuICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFja2RldGFpbC92aWV3Lzk1NTcwMy9hY2Nlc3NpbmctY3NzdGV4dC1vZi1hLWtleWZyYW1lLXJ1bGUtdGhhdC1jb250YWlucy1hLXdlYmtpdC1wcm9wZXJ0eS12aWEtY3Nzb20tZ2VuZXJhdGVzLWV4Y2VwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHJ1bGUuY3NzVGV4dCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1RleHQgKz0gcnVsZS5jc3NUZXh0ICsgJ1xcblxcbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKHgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbV9hZGFwdGVyXzEuRE9NLmlzS2V5ZnJhbWVzUnVsZShydWxlKSAmJiBsYW5nXzEuaXNQcmVzZW50KHJ1bGUuY3NzUnVsZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ICs9IHRoaXMuX2llU2FmZUNzc1RleHRGcm9tS2V5RnJhbWVSdWxlKHJ1bGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjc3NUZXh0O1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIFNoYWRvd0Nzcy5wcm90b3R5cGUuX2llU2FmZUNzc1RleHRGcm9tS2V5RnJhbWVSdWxlID0gZnVuY3Rpb24gKHJ1bGUpIHtcclxuICAgICAgICB2YXIgY3NzVGV4dCA9ICdAa2V5ZnJhbWVzICcgKyBydWxlLm5hbWUgKyAnIHsnO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZS5jc3NSdWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgciA9IHJ1bGUuY3NzUnVsZXNbaV07XHJcbiAgICAgICAgICAgIGNzc1RleHQgKz0gJyAnICsgci5rZXlUZXh0ICsgJyB7JyArIHIuc3R5bGUuY3NzVGV4dCArICd9JztcclxuICAgICAgICB9XHJcbiAgICAgICAgY3NzVGV4dCArPSAnIH0nO1xyXG4gICAgICAgIHJldHVybiBjc3NUZXh0O1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIFNoYWRvd0Nzcy5wcm90b3R5cGUuX3Njb3BlU2VsZWN0b3IgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIHNjb3BlU2VsZWN0b3IsIGhvc3RTZWxlY3Rvciwgc3RyaWN0KSB7XHJcbiAgICAgICAgdmFyIHIgPSBbXSwgcGFydHMgPSBzZWxlY3Rvci5zcGxpdCgnLCcpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHAgPSBwYXJ0c1tpXTtcclxuICAgICAgICAgICAgcCA9IHAudHJpbSgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fc2VsZWN0b3JOZWVkc1Njb3BpbmcocCwgc2NvcGVTZWxlY3RvcikpIHtcclxuICAgICAgICAgICAgICAgIHAgPSBzdHJpY3QgJiYgIWxhbmdfMS5TdHJpbmdXcmFwcGVyLmNvbnRhaW5zKHAsIF9wb2x5ZmlsbEhvc3ROb0NvbWJpbmF0b3IpID9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcHBseVN0cmljdFNlbGVjdG9yU2NvcGUocCwgc2NvcGVTZWxlY3RvcikgOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FwcGx5U2VsZWN0b3JTY29wZShwLCBzY29wZVNlbGVjdG9yLCBob3N0U2VsZWN0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHIucHVzaChwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHIuam9pbignLCAnKTtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBTaGFkb3dDc3MucHJvdG90eXBlLl9zZWxlY3Rvck5lZWRzU2NvcGluZyA9IGZ1bmN0aW9uIChzZWxlY3Rvciwgc2NvcGVTZWxlY3Rvcikge1xyXG4gICAgICAgIHZhciByZSA9IHRoaXMuX21ha2VTY29wZU1hdGNoZXIoc2NvcGVTZWxlY3Rvcik7XHJcbiAgICAgICAgcmV0dXJuICFsYW5nXzEuaXNQcmVzZW50KGxhbmdfMS5SZWdFeHBXcmFwcGVyLmZpcnN0TWF0Y2gocmUsIHNlbGVjdG9yKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgU2hhZG93Q3NzLnByb3RvdHlwZS5fbWFrZVNjb3BlTWF0Y2hlciA9IGZ1bmN0aW9uIChzY29wZVNlbGVjdG9yKSB7XHJcbiAgICAgICAgdmFyIGxyZSA9IC9cXFsvZztcclxuICAgICAgICB2YXIgcnJlID0gL1xcXS9nO1xyXG4gICAgICAgIHNjb3BlU2VsZWN0b3IgPSBsYW5nXzEuU3RyaW5nV3JhcHBlci5yZXBsYWNlQWxsKHNjb3BlU2VsZWN0b3IsIGxyZSwgJ1xcXFxbJyk7XHJcbiAgICAgICAgc2NvcGVTZWxlY3RvciA9IGxhbmdfMS5TdHJpbmdXcmFwcGVyLnJlcGxhY2VBbGwoc2NvcGVTZWxlY3RvciwgcnJlLCAnXFxcXF0nKTtcclxuICAgICAgICByZXR1cm4gbGFuZ18xLlJlZ0V4cFdyYXBwZXIuY3JlYXRlKCdeKCcgKyBzY29wZVNlbGVjdG9yICsgJyknICsgX3NlbGVjdG9yUmVTdWZmaXgsICdtJyk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgU2hhZG93Q3NzLnByb3RvdHlwZS5fYXBwbHlTZWxlY3RvclNjb3BlID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBzY29wZVNlbGVjdG9yLCBob3N0U2VsZWN0b3IpIHtcclxuICAgICAgICAvLyBEaWZmZXJlbmNlIGZyb20gd2ViY29tcG9uZW50c2pzOiBzY29wZVNlbGVjdG9yIGNvdWxkIG5vdCBiZSBhbiBhcnJheVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseVNpbXBsZVNlbGVjdG9yU2NvcGUoc2VsZWN0b3IsIHNjb3BlU2VsZWN0b3IsIGhvc3RTZWxlY3Rvcik7XHJcbiAgICB9O1xyXG4gICAgLy8gc2NvcGUgdmlhIG5hbWUgYW5kIFtpcz1uYW1lXVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgU2hhZG93Q3NzLnByb3RvdHlwZS5fYXBwbHlTaW1wbGVTZWxlY3RvclNjb3BlID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBzY29wZVNlbGVjdG9yLCBob3N0U2VsZWN0b3IpIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChsYW5nXzEuUmVnRXhwV3JhcHBlci5maXJzdE1hdGNoKF9wb2x5ZmlsbEhvc3RSZSwgc2VsZWN0b3IpKSkge1xyXG4gICAgICAgICAgICB2YXIgcmVwbGFjZUJ5ID0gdGhpcy5zdHJpY3RTdHlsaW5nID8gXCJbXCIgKyBob3N0U2VsZWN0b3IgKyBcIl1cIiA6IHNjb3BlU2VsZWN0b3I7XHJcbiAgICAgICAgICAgIHNlbGVjdG9yID0gbGFuZ18xLlN0cmluZ1dyYXBwZXIucmVwbGFjZShzZWxlY3RvciwgX3BvbHlmaWxsSG9zdE5vQ29tYmluYXRvciwgcmVwbGFjZUJ5KTtcclxuICAgICAgICAgICAgcmV0dXJuIGxhbmdfMS5TdHJpbmdXcmFwcGVyLnJlcGxhY2VBbGwoc2VsZWN0b3IsIF9wb2x5ZmlsbEhvc3RSZSwgcmVwbGFjZUJ5ICsgJyAnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzY29wZVNlbGVjdG9yICsgJyAnICsgc2VsZWN0b3I7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIHJldHVybiBhIHNlbGVjdG9yIHdpdGggW25hbWVdIHN1ZmZpeCBvbiBlYWNoIHNpbXBsZSBzZWxlY3RvclxyXG4gICAgLy8gZS5nLiAuZm9vLmJhciA+IC56b3QgYmVjb21lcyAuZm9vW25hbWVdLmJhcltuYW1lXSA+IC56b3RbbmFtZV1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIFNoYWRvd0Nzcy5wcm90b3R5cGUuX2FwcGx5U3RyaWN0U2VsZWN0b3JTY29wZSA9IGZ1bmN0aW9uIChzZWxlY3Rvciwgc2NvcGVTZWxlY3Rvcikge1xyXG4gICAgICAgIHZhciBpc1JlID0gL1xcW2lzPShbXlxcXV0qKVxcXS9nO1xyXG4gICAgICAgIHNjb3BlU2VsZWN0b3IgPSBsYW5nXzEuU3RyaW5nV3JhcHBlci5yZXBsYWNlQWxsTWFwcGVkKHNjb3BlU2VsZWN0b3IsIGlzUmUsIGZ1bmN0aW9uIChtKSB7IHJldHVybiBtWzFdOyB9KTtcclxuICAgICAgICB2YXIgc3BsaXRzID0gWycgJywgJz4nLCAnKycsICd+J10sIHNjb3BlZCA9IHNlbGVjdG9yLCBhdHRyTmFtZSA9ICdbJyArIHNjb3BlU2VsZWN0b3IgKyAnXSc7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGxpdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHNlcCA9IHNwbGl0c1tpXTtcclxuICAgICAgICAgICAgdmFyIHBhcnRzID0gc2NvcGVkLnNwbGl0KHNlcCk7XHJcbiAgICAgICAgICAgIHNjb3BlZCA9IHBhcnRzLm1hcChmdW5jdGlvbiAocCkge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIDpob3N0IHNpbmNlIGl0IHNob3VsZCBiZSB1bm5lY2Vzc2FyeVxyXG4gICAgICAgICAgICAgICAgdmFyIHQgPSBsYW5nXzEuU3RyaW5nV3JhcHBlci5yZXBsYWNlQWxsKHAudHJpbSgpLCBfcG9seWZpbGxIb3N0UmUsICcnKTtcclxuICAgICAgICAgICAgICAgIGlmICh0Lmxlbmd0aCA+IDAgJiYgIWNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jb250YWlucyhzcGxpdHMsIHQpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgIWxhbmdfMS5TdHJpbmdXcmFwcGVyLmNvbnRhaW5zKHQsIGF0dHJOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZSA9IC8oW146XSopKDoqKSguKikvZztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IGxhbmdfMS5SZWdFeHBXcmFwcGVyLmZpcnN0TWF0Y2gocmUsIHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KG0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBtWzFdICsgYXR0ck5hbWUgKyBtWzJdICsgbVszXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5qb2luKHNlcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzY29wZWQ7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgU2hhZG93Q3NzLnByb3RvdHlwZS5faW5zZXJ0UG9seWZpbGxIb3N0SW5Dc3NUZXh0ID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgc2VsZWN0b3IgPSBsYW5nXzEuU3RyaW5nV3JhcHBlci5yZXBsYWNlQWxsKHNlbGVjdG9yLCBfY29sb25Ib3N0Q29udGV4dFJlLCBfcG9seWZpbGxIb3N0Q29udGV4dCk7XHJcbiAgICAgICAgc2VsZWN0b3IgPSBsYW5nXzEuU3RyaW5nV3JhcHBlci5yZXBsYWNlQWxsKHNlbGVjdG9yLCBfY29sb25Ib3N0UmUsIF9wb2x5ZmlsbEhvc3QpO1xyXG4gICAgICAgIHJldHVybiBzZWxlY3RvcjtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBTaGFkb3dDc3MucHJvdG90eXBlLl9wcm9wZXJ0aWVzRnJvbVJ1bGUgPSBmdW5jdGlvbiAocnVsZSkge1xyXG4gICAgICAgIHZhciBjc3NUZXh0ID0gcnVsZS5zdHlsZS5jc3NUZXh0O1xyXG4gICAgICAgIC8vIFRPRE8oc29ydmVsbCk6IFNhZmFyaSBjc3NvbSBpbmNvcnJlY3RseSByZW1vdmVzIHF1b3RlcyBmcm9tIHRoZSBjb250ZW50XHJcbiAgICAgICAgLy8gcHJvcGVydHkuIChodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTE4MDQ1KVxyXG4gICAgICAgIC8vIGRvbid0IHJlcGxhY2UgYXR0ciBydWxlc1xyXG4gICAgICAgIHZhciBhdHRyUmUgPSAvWydcIl0rfGF0dHIvZztcclxuICAgICAgICBpZiAocnVsZS5zdHlsZS5jb250ZW50Lmxlbmd0aCA+IDAgJiZcclxuICAgICAgICAgICAgIWxhbmdfMS5pc1ByZXNlbnQobGFuZ18xLlJlZ0V4cFdyYXBwZXIuZmlyc3RNYXRjaChhdHRyUmUsIHJ1bGUuc3R5bGUuY29udGVudCkpKSB7XHJcbiAgICAgICAgICAgIHZhciBjb250ZW50UmUgPSAvY29udGVudDpbXjtdKjsvZztcclxuICAgICAgICAgICAgY3NzVGV4dCA9XHJcbiAgICAgICAgICAgICAgICBsYW5nXzEuU3RyaW5nV3JhcHBlci5yZXBsYWNlQWxsKGNzc1RleHQsIGNvbnRlbnRSZSwgJ2NvbnRlbnQ6IFxcJycgKyBydWxlLnN0eWxlLmNvbnRlbnQgKyAnXFwnOycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUT0RPKHNvcnZlbGwpOiB3ZSBjYW4gd29ya2Fyb3VuZCB0aGlzIGlzc3VlIGhlcmUsIGJ1dCB3ZSBuZWVkIGEgbGlzdFxyXG4gICAgICAgIC8vIG9mIHRyb3VibGVzb21lIHByb3BlcnRpZXMgdG8gZml4IGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyL3BsYXRmb3JtL2lzc3Vlcy81M1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gaW5oZXJpdCBydWxlcyBjYW4gYmUgb21pdHRlZCBmcm9tIGNzc1RleHRcclxuICAgICAgICAvLyBUT0RPKHNvcnZlbGwpOiByZW1vdmUgd2hlbiBCbGluayBidWcgaXMgZml4ZWQ6XHJcbiAgICAgICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM1ODI3M1xyXG4gICAgICAgIC8vIHZhciBzdHlsZSA9IHJ1bGUuc3R5bGU7XHJcbiAgICAgICAgLy8gZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIC8vICB2YXIgbmFtZSA9IHN0eWxlLml0ZW0oaSk7XHJcbiAgICAgICAgLy8gIHZhciB2YWx1ZSA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XHJcbiAgICAgICAgLy8gIGlmICh2YWx1ZSA9PSAnaW5pdGlhbCcpIHtcclxuICAgICAgICAvLyAgICBjc3NUZXh0ICs9IG5hbWUgKyAnOiBpbml0aWFsOyAnO1xyXG4gICAgICAgIC8vICB9XHJcbiAgICAgICAgLy99XHJcbiAgICAgICAgcmV0dXJuIGNzc1RleHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNoYWRvd0NzcztcclxufSkoKTtcclxuZXhwb3J0cy5TaGFkb3dDc3MgPSBTaGFkb3dDc3M7XHJcbnZhciBfY3NzQ29udGVudE5leHRTZWxlY3RvclJlID0gL3BvbHlmaWxsLW5leHQtc2VsZWN0b3JbXn1dKmNvbnRlbnQ6W1xcc10qP1snXCJdKC4qPylbJ1wiXVs7XFxzXSp9KFtee10qPyl7L2dpbTtcclxudmFyIF9jc3NDb250ZW50UnVsZVJlID0gLyhwb2x5ZmlsbC1ydWxlKVtefV0qKGNvbnRlbnQ6W1xcc10qWydcIl0oLio/KVsnXCJdKVs7XFxzXSpbXn1dKn0vZ2ltO1xyXG52YXIgX2Nzc0NvbnRlbnRVbnNjb3BlZFJ1bGVSZSA9IC8ocG9seWZpbGwtdW5zY29wZWQtcnVsZSlbXn1dKihjb250ZW50OltcXHNdKlsnXCJdKC4qPylbJ1wiXSlbO1xcc10qW159XSp9L2dpbTtcclxudmFyIF9wb2x5ZmlsbEhvc3QgPSAnLXNoYWRvd2Nzc2hvc3QnO1xyXG4vLyBub3RlOiA6aG9zdC1jb250ZXh0IHByZS1wcm9jZXNzZWQgdG8gLXNoYWRvd2Nzc2hvc3Rjb250ZXh0LlxyXG52YXIgX3BvbHlmaWxsSG9zdENvbnRleHQgPSAnLXNoYWRvd2Nzc2NvbnRleHQnO1xyXG52YXIgX3BhcmVuU3VmZml4ID0gJykoPzpcXFxcKCgnICtcclxuICAgICcoPzpcXFxcKFteKShdKlxcXFwpfFteKShdKikrPycgK1xyXG4gICAgJylcXFxcKSk/KFteLHtdKiknO1xyXG52YXIgX2Nzc0NvbG9uSG9zdFJlID0gbGFuZ18xLlJlZ0V4cFdyYXBwZXIuY3JlYXRlKCcoJyArIF9wb2x5ZmlsbEhvc3QgKyBfcGFyZW5TdWZmaXgsICdpbScpO1xyXG52YXIgX2Nzc0NvbG9uSG9zdENvbnRleHRSZSA9IGxhbmdfMS5SZWdFeHBXcmFwcGVyLmNyZWF0ZSgnKCcgKyBfcG9seWZpbGxIb3N0Q29udGV4dCArIF9wYXJlblN1ZmZpeCwgJ2ltJyk7XHJcbnZhciBfcG9seWZpbGxIb3N0Tm9Db21iaW5hdG9yID0gX3BvbHlmaWxsSG9zdCArICctbm8tY29tYmluYXRvcic7XHJcbnZhciBfc2hhZG93RE9NU2VsZWN0b3JzUmUgPSBbXHJcbiAgICAvPj4+L2csXHJcbiAgICAvOjpzaGFkb3cvZyxcclxuICAgIC86OmNvbnRlbnQvZyxcclxuICAgIC8vIERlcHJlY2F0ZWQgc2VsZWN0b3JzXHJcbiAgICAvLyBUT0RPKHZpY2IpOiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvY2xhbmctZm9ybWF0L2lzc3Vlcy8xNlxyXG4gICAgLy8gY2xhbmctZm9ybWF0IG9mZlxyXG4gICAgL1xcL2RlZXBcXC8vZyxcclxuICAgIC9cXC9zaGFkb3ctZGVlcFxcLy9nLFxyXG4gICAgL1xcL3NoYWRvd1xcLy9nLFxyXG5dO1xyXG52YXIgX3NlbGVjdG9yUmVTdWZmaXggPSAnKFs+XFxcXHN+K1xcWy4sezpdW1xcXFxzXFxcXFNdKik/JCc7XHJcbnZhciBfcG9seWZpbGxIb3N0UmUgPSBsYW5nXzEuUmVnRXhwV3JhcHBlci5jcmVhdGUoX3BvbHlmaWxsSG9zdCwgJ2ltJyk7XHJcbnZhciBfY29sb25Ib3N0UmUgPSAvOmhvc3QvZ2ltO1xyXG52YXIgX2NvbG9uSG9zdENvbnRleHRSZSA9IC86aG9zdC1jb250ZXh0L2dpbTtcclxuZnVuY3Rpb24gX2Nzc1RvUnVsZXMoY3NzVGV4dCkge1xyXG4gICAgcmV0dXJuIGRvbV9hZGFwdGVyXzEuRE9NLmNzc1RvUnVsZXMoY3NzVGV4dCk7XHJcbn1cclxuZnVuY3Rpb24gX3dpdGhDc3NSdWxlcyhjc3NUZXh0LCBjYWxsYmFjaykge1xyXG4gICAgLy8gRGlmZmVyZW5jZSBmcm9tIHdlYmNvbXBvbmVudGpzOiByZW1vdmUgdGhlIHdvcmthcm91bmQgZm9yIGFuIG9sZCBidWcgaW4gQ2hyb21lXHJcbiAgICBpZiAobGFuZ18xLmlzQmxhbmsoY2FsbGJhY2spKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIHZhciBydWxlcyA9IF9jc3NUb1J1bGVzKGNzc1RleHQpO1xyXG4gICAgY2FsbGJhY2socnVsZXMpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYWRvd19jc3MuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgTU9EVUxFX1JFR0VYUCA9IC8jTU9EVUxFXFxbKFteXFxdXSopXFxdL2c7XHJcbmZ1bmN0aW9uIG1vZHVsZVJlZihtb2R1bGVVcmwpIHtcclxuICAgIHJldHVybiBcIiNNT0RVTEVbXCIgKyBtb2R1bGVVcmwgKyBcIl1cIjtcclxufVxyXG5leHBvcnRzLm1vZHVsZVJlZiA9IG1vZHVsZVJlZjtcclxudmFyIFNvdXJjZU1vZHVsZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTb3VyY2VNb2R1bGUobW9kdWxlVXJsLCBzb3VyY2VXaXRoTW9kdWxlUmVmcykge1xyXG4gICAgICAgIHRoaXMubW9kdWxlVXJsID0gbW9kdWxlVXJsO1xyXG4gICAgICAgIHRoaXMuc291cmNlV2l0aE1vZHVsZVJlZnMgPSBzb3VyY2VXaXRoTW9kdWxlUmVmcztcclxuICAgIH1cclxuICAgIFNvdXJjZU1vZHVsZS5wcm90b3R5cGUuZ2V0U291cmNlV2l0aEltcG9ydHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgbW9kdWxlQWxpYXNlcyA9IHt9O1xyXG4gICAgICAgIHZhciBpbXBvcnRzID0gW107XHJcbiAgICAgICAgdmFyIG5ld1NvdXJjZSA9IGxhbmdfMS5TdHJpbmdXcmFwcGVyLnJlcGxhY2VBbGxNYXBwZWQodGhpcy5zb3VyY2VXaXRoTW9kdWxlUmVmcywgTU9EVUxFX1JFR0VYUCwgZnVuY3Rpb24gKG1hdGNoKSB7XHJcbiAgICAgICAgICAgIHZhciBtb2R1bGVVcmwgPSBtYXRjaFsxXTtcclxuICAgICAgICAgICAgdmFyIGFsaWFzID0gbW9kdWxlQWxpYXNlc1ttb2R1bGVVcmxdO1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoYWxpYXMpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobW9kdWxlVXJsID09IF90aGlzLm1vZHVsZVVybCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsaWFzID0gJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGlhcyA9IFwiaW1wb3J0XCIgKyBpbXBvcnRzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBpbXBvcnRzLnB1c2goW21vZHVsZVVybCwgYWxpYXNdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1vZHVsZUFsaWFzZXNbbW9kdWxlVXJsXSA9IGFsaWFzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhbGlhcy5sZW5ndGggPiAwID8gYWxpYXMgKyBcIi5cIiA6ICcnO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgU291cmNlV2l0aEltcG9ydHMobmV3U291cmNlLCBpbXBvcnRzKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU291cmNlTW9kdWxlO1xyXG59KSgpO1xyXG5leHBvcnRzLlNvdXJjZU1vZHVsZSA9IFNvdXJjZU1vZHVsZTtcclxudmFyIFNvdXJjZUV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU291cmNlRXhwcmVzc2lvbihkZWNsYXJhdGlvbnMsIGV4cHJlc3Npb24pIHtcclxuICAgICAgICB0aGlzLmRlY2xhcmF0aW9ucyA9IGRlY2xhcmF0aW9ucztcclxuICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFNvdXJjZUV4cHJlc3Npb247XHJcbn0pKCk7XHJcbmV4cG9ydHMuU291cmNlRXhwcmVzc2lvbiA9IFNvdXJjZUV4cHJlc3Npb247XHJcbnZhciBTb3VyY2VFeHByZXNzaW9ucyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTb3VyY2VFeHByZXNzaW9ucyhkZWNsYXJhdGlvbnMsIGV4cHJlc3Npb25zKSB7XHJcbiAgICAgICAgdGhpcy5kZWNsYXJhdGlvbnMgPSBkZWNsYXJhdGlvbnM7XHJcbiAgICAgICAgdGhpcy5leHByZXNzaW9ucyA9IGV4cHJlc3Npb25zO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFNvdXJjZUV4cHJlc3Npb25zO1xyXG59KSgpO1xyXG5leHBvcnRzLlNvdXJjZUV4cHJlc3Npb25zID0gU291cmNlRXhwcmVzc2lvbnM7XHJcbnZhciBTb3VyY2VXaXRoSW1wb3J0cyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTb3VyY2VXaXRoSW1wb3J0cyhzb3VyY2UsIGltcG9ydHMpIHtcclxuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcclxuICAgICAgICB0aGlzLmltcG9ydHMgPSBpbXBvcnRzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFNvdXJjZVdpdGhJbXBvcnRzO1xyXG59KSgpO1xyXG5leHBvcnRzLlNvdXJjZVdpdGhJbXBvcnRzID0gU291cmNlV2l0aEltcG9ydHM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNvdXJjZV9tb2R1bGUuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBzb3VyY2VfbW9kdWxlXzEgPSByZXF1aXJlKCcuL3NvdXJjZV9tb2R1bGUnKTtcclxudmFyIHZpZXdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL21ldGFkYXRhL3ZpZXcnKTtcclxudmFyIHhocl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIveGhyJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9hc3luYycpO1xyXG52YXIgc2hhZG93X2Nzc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvc2hhZG93X2NzcycpO1xyXG52YXIgdXJsX3Jlc29sdmVyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci91cmxfcmVzb2x2ZXInKTtcclxudmFyIHN0eWxlX3VybF9yZXNvbHZlcl8xID0gcmVxdWlyZSgnLi9zdHlsZV91cmxfcmVzb2x2ZXInKTtcclxudmFyIHV0aWxfMSA9IHJlcXVpcmUoJy4vdXRpbCcpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBDT01QT05FTlRfVkFSSUFCTEUgPSAnJUNPTVAlJztcclxudmFyIENPTVBPTkVOVF9SRUdFWCA9IC8lQ09NUCUvZztcclxudmFyIEhPU1RfQVRUUiA9IFwiX25naG9zdC1cIiArIENPTVBPTkVOVF9WQVJJQUJMRTtcclxudmFyIEhPU1RfQVRUUl9FWFBSID0gXCInX25naG9zdC0nK1wiICsgQ09NUE9ORU5UX1ZBUklBQkxFO1xyXG52YXIgQ09OVEVOVF9BVFRSID0gXCJfbmdjb250ZW50LVwiICsgQ09NUE9ORU5UX1ZBUklBQkxFO1xyXG52YXIgQ09OVEVOVF9BVFRSX0VYUFIgPSBcIidfbmdjb250ZW50LScrXCIgKyBDT01QT05FTlRfVkFSSUFCTEU7XHJcbnZhciBTdHlsZUNvbXBpbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN0eWxlQ29tcGlsZXIoX3hociwgX3VybFJlc29sdmVyKSB7XHJcbiAgICAgICAgdGhpcy5feGhyID0gX3hocjtcclxuICAgICAgICB0aGlzLl91cmxSZXNvbHZlciA9IF91cmxSZXNvbHZlcjtcclxuICAgICAgICB0aGlzLl9zdHlsZUNhY2hlID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuX3NoYWRvd0NzcyA9IG5ldyBzaGFkb3dfY3NzXzEuU2hhZG93Q3NzKCk7XHJcbiAgICB9XHJcbiAgICBTdHlsZUNvbXBpbGVyLnByb3RvdHlwZS5jb21waWxlQ29tcG9uZW50UnVudGltZSA9IGZ1bmN0aW9uIChhcHBJZCwgdGVtcGxhdGVJZCwgdGVtcGxhdGUpIHtcclxuICAgICAgICB2YXIgc3R5bGVzID0gdGVtcGxhdGUuc3R5bGVzO1xyXG4gICAgICAgIHZhciBzdHlsZUFic1VybHMgPSB0ZW1wbGF0ZS5zdHlsZVVybHM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRTdHlsZXMoc3R5bGVzLCBzdHlsZUFic1VybHMsIHRlbXBsYXRlLmVuY2Fwc3VsYXRpb24gPT09IHZpZXdfMS5WaWV3RW5jYXBzdWxhdGlvbi5FbXVsYXRlZClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHN0eWxlcykgeyByZXR1cm4gc3R5bGVzLm1hcChmdW5jdGlvbiAoc3R5bGUpIHsgcmV0dXJuIGxhbmdfMS5TdHJpbmdXcmFwcGVyLnJlcGxhY2VBbGwoc3R5bGUsIENPTVBPTkVOVF9SRUdFWCwgY29tcG9uZW50SWQoYXBwSWQsIHRlbXBsYXRlSWQpKTsgfSk7IH0pO1xyXG4gICAgfTtcclxuICAgIFN0eWxlQ29tcGlsZXIucHJvdG90eXBlLmNvbXBpbGVDb21wb25lbnRDb2RlR2VuID0gZnVuY3Rpb24gKGFwcElkRXhwcmVzc2lvbiwgdGVtcGxhdGVJZEV4cHJlc3Npb24sIHRlbXBsYXRlKSB7XHJcbiAgICAgICAgdmFyIHNoaW0gPSB0ZW1wbGF0ZS5lbmNhcHN1bGF0aW9uID09PSB2aWV3XzEuVmlld0VuY2Fwc3VsYXRpb24uRW11bGF0ZWQ7XHJcbiAgICAgICAgdmFyIHN1ZmZpeDtcclxuICAgICAgICBpZiAoc2hpbSkge1xyXG4gICAgICAgICAgICBzdWZmaXggPSB1dGlsXzEuY29kZUdlbk1hcEFycmF5KFsnc3R5bGUnXSwgXCJzdHlsZVwiICsgdXRpbF8xLmNvZGVHZW5SZXBsYWNlQWxsKENPTVBPTkVOVF9WQVJJQUJMRSwgY29tcG9uZW50SWRFeHByZXNzaW9uKGFwcElkRXhwcmVzc2lvbiwgdGVtcGxhdGVJZEV4cHJlc3Npb24pKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdWZmaXggPSAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0eWxlQ29kZUdlbih0ZW1wbGF0ZS5zdHlsZXMsIHRlbXBsYXRlLnN0eWxlVXJscywgc2hpbSwgc3VmZml4KTtcclxuICAgIH07XHJcbiAgICBTdHlsZUNvbXBpbGVyLnByb3RvdHlwZS5jb21waWxlU3R5bGVzaGVldENvZGVHZW4gPSBmdW5jdGlvbiAoc3R5bGVzaGVldFVybCwgY3NzVGV4dCkge1xyXG4gICAgICAgIHZhciBzdHlsZVdpdGhJbXBvcnRzID0gc3R5bGVfdXJsX3Jlc29sdmVyXzEuZXh0cmFjdFN0eWxlVXJscyh0aGlzLl91cmxSZXNvbHZlciwgc3R5bGVzaGVldFVybCwgY3NzVGV4dCk7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgdGhpcy5fc3R5bGVNb2R1bGUoc3R5bGVzaGVldFVybCwgZmFsc2UsIHRoaXMuX3N0eWxlQ29kZUdlbihbc3R5bGVXaXRoSW1wb3J0cy5zdHlsZV0sIHN0eWxlV2l0aEltcG9ydHMuc3R5bGVVcmxzLCBmYWxzZSwgJycpKSxcclxuICAgICAgICAgICAgdGhpcy5fc3R5bGVNb2R1bGUoc3R5bGVzaGVldFVybCwgdHJ1ZSwgdGhpcy5fc3R5bGVDb2RlR2VuKFtzdHlsZVdpdGhJbXBvcnRzLnN0eWxlXSwgc3R5bGVXaXRoSW1wb3J0cy5zdHlsZVVybHMsIHRydWUsICcnKSlcclxuICAgICAgICBdO1xyXG4gICAgfTtcclxuICAgIFN0eWxlQ29tcGlsZXIucHJvdG90eXBlLmNsZWFyQ2FjaGUgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX3N0eWxlQ2FjaGUuY2xlYXIoKTsgfTtcclxuICAgIFN0eWxlQ29tcGlsZXIucHJvdG90eXBlLl9sb2FkU3R5bGVzID0gZnVuY3Rpb24gKHBsYWluU3R5bGVzLCBhYnNVcmxzLCBlbmNhcHN1bGF0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHByb21pc2VzID0gYWJzVXJscy5tYXAoZnVuY3Rpb24gKGFic1VybCkge1xyXG4gICAgICAgICAgICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgYWJzVXJsICsgKGVuY2Fwc3VsYXRlID8gJy5zaGltJyA6ICcnKTtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IF90aGlzLl9zdHlsZUNhY2hlLmdldChjYWNoZUtleSk7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBfdGhpcy5feGhyLmdldChhYnNVcmwpLnRoZW4oZnVuY3Rpb24gKHN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0eWxlV2l0aEltcG9ydHMgPSBzdHlsZV91cmxfcmVzb2x2ZXJfMS5leHRyYWN0U3R5bGVVcmxzKF90aGlzLl91cmxSZXNvbHZlciwgYWJzVXJsLCBzdHlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9sb2FkU3R5bGVzKFtzdHlsZVdpdGhJbXBvcnRzLnN0eWxlXSwgc3R5bGVXaXRoSW1wb3J0cy5zdHlsZVVybHMsIGVuY2Fwc3VsYXRlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3N0eWxlQ2FjaGUuc2V0KGNhY2hlS2V5LCByZXN1bHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGFzeW5jXzEuUHJvbWlzZVdyYXBwZXIuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uIChuZXN0ZWRTdHlsZXMpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHBsYWluU3R5bGVzLm1hcChmdW5jdGlvbiAocGxhaW5TdHlsZSkgeyByZXR1cm4gX3RoaXMuX3NoaW1JZk5lZWRlZChwbGFpblN0eWxlLCBlbmNhcHN1bGF0ZSk7IH0pO1xyXG4gICAgICAgICAgICBuZXN0ZWRTdHlsZXMuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGVzKSB7IHJldHVybiBzdHlsZXMuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHsgcmV0dXJuIHJlc3VsdC5wdXNoKHN0eWxlKTsgfSk7IH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFN0eWxlQ29tcGlsZXIucHJvdG90eXBlLl9zdHlsZUNvZGVHZW4gPSBmdW5jdGlvbiAocGxhaW5TdHlsZXMsIGFic1VybHMsIHNoaW0sIHN1ZmZpeCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGV4cHJlc3Npb25Tb3VyY2UgPSBcIihcIjtcclxuICAgICAgICBleHByZXNzaW9uU291cmNlICs9XHJcbiAgICAgICAgICAgIFwiW1wiICsgcGxhaW5TdHlsZXMubWFwKGZ1bmN0aW9uIChwbGFpblN0eWxlKSB7IHJldHVybiB1dGlsXzEuZXNjYXBlU2luZ2xlUXVvdGVTdHJpbmcoX3RoaXMuX3NoaW1JZk5lZWRlZChwbGFpblN0eWxlLCBzaGltKSk7IH0pLmpvaW4oJywnKSArIFwiXVwiO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWJzVXJscy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgbW9kdWxlVXJsID0gdGhpcy5fY3JlYXRlTW9kdWxlVXJsKGFic1VybHNbaV0sIHNoaW0pO1xyXG4gICAgICAgICAgICBleHByZXNzaW9uU291cmNlICs9IHV0aWxfMS5jb2RlR2VuQ29uY2F0QXJyYXkoc291cmNlX21vZHVsZV8xLm1vZHVsZVJlZihtb2R1bGVVcmwpICsgXCJTVFlMRVNcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4cHJlc3Npb25Tb3VyY2UgKz0gXCIpXCIgKyBzdWZmaXg7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBzb3VyY2VfbW9kdWxlXzEuU291cmNlRXhwcmVzc2lvbihbXSwgZXhwcmVzc2lvblNvdXJjZSk7XHJcbiAgICB9O1xyXG4gICAgU3R5bGVDb21waWxlci5wcm90b3R5cGUuX3N0eWxlTW9kdWxlID0gZnVuY3Rpb24gKHN0eWxlc2hlZXRVcmwsIHNoaW0sIGV4cHJlc3Npb24pIHtcclxuICAgICAgICB2YXIgbW9kdWxlU291cmNlID0gXCJcXG4gICAgICBcIiArIGV4cHJlc3Npb24uZGVjbGFyYXRpb25zLmpvaW4oJ1xcbicpICsgXCJcXG4gICAgICBcIiArIHV0aWxfMS5jb2RlR2VuRXhwb3J0VmFyaWFibGUoJ1NUWUxFUycpICsgZXhwcmVzc2lvbi5leHByZXNzaW9uICsgXCI7XFxuICAgIFwiO1xyXG4gICAgICAgIHJldHVybiBuZXcgc291cmNlX21vZHVsZV8xLlNvdXJjZU1vZHVsZSh0aGlzLl9jcmVhdGVNb2R1bGVVcmwoc3R5bGVzaGVldFVybCwgc2hpbSksIG1vZHVsZVNvdXJjZSk7XHJcbiAgICB9O1xyXG4gICAgU3R5bGVDb21waWxlci5wcm90b3R5cGUuX3NoaW1JZk5lZWRlZCA9IGZ1bmN0aW9uIChzdHlsZSwgc2hpbSkge1xyXG4gICAgICAgIHJldHVybiBzaGltID8gdGhpcy5fc2hhZG93Q3NzLnNoaW1Dc3NUZXh0KHN0eWxlLCBDT05URU5UX0FUVFIsIEhPU1RfQVRUUikgOiBzdHlsZTtcclxuICAgIH07XHJcbiAgICBTdHlsZUNvbXBpbGVyLnByb3RvdHlwZS5fY3JlYXRlTW9kdWxlVXJsID0gZnVuY3Rpb24gKHN0eWxlc2hlZXRVcmwsIHNoaW0pIHtcclxuICAgICAgICByZXR1cm4gc2hpbSA/IHN0eWxlc2hlZXRVcmwgKyBcIi5zaGltXCIgKyB1dGlsXzEuTU9EVUxFX1NVRkZJWCA6IFwiXCIgKyBzdHlsZXNoZWV0VXJsICsgdXRpbF8xLk1PRFVMRV9TVUZGSVg7XHJcbiAgICB9O1xyXG4gICAgU3R5bGVDb21waWxlciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFt4aHJfMS5YSFIsIHVybF9yZXNvbHZlcl8xLlVybFJlc29sdmVyXSlcclxuICAgIF0sIFN0eWxlQ29tcGlsZXIpO1xyXG4gICAgcmV0dXJuIFN0eWxlQ29tcGlsZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuU3R5bGVDb21waWxlciA9IFN0eWxlQ29tcGlsZXI7XHJcbmZ1bmN0aW9uIHNoaW1Db250ZW50QXR0cmlidXRlKGFwcElkLCB0ZW1wbGF0ZUlkKSB7XHJcbiAgICByZXR1cm4gbGFuZ18xLlN0cmluZ1dyYXBwZXIucmVwbGFjZUFsbChDT05URU5UX0FUVFIsIENPTVBPTkVOVF9SRUdFWCwgY29tcG9uZW50SWQoYXBwSWQsIHRlbXBsYXRlSWQpKTtcclxufVxyXG5leHBvcnRzLnNoaW1Db250ZW50QXR0cmlidXRlID0gc2hpbUNvbnRlbnRBdHRyaWJ1dGU7XHJcbmZ1bmN0aW9uIHNoaW1Db250ZW50QXR0cmlidXRlRXhwcihhcHBJZEV4cHIsIHRlbXBsYXRlSWRFeHByKSB7XHJcbiAgICByZXR1cm4gbGFuZ18xLlN0cmluZ1dyYXBwZXIucmVwbGFjZUFsbChDT05URU5UX0FUVFJfRVhQUiwgQ09NUE9ORU5UX1JFR0VYLCBjb21wb25lbnRJZEV4cHJlc3Npb24oYXBwSWRFeHByLCB0ZW1wbGF0ZUlkRXhwcikpO1xyXG59XHJcbmV4cG9ydHMuc2hpbUNvbnRlbnRBdHRyaWJ1dGVFeHByID0gc2hpbUNvbnRlbnRBdHRyaWJ1dGVFeHByO1xyXG5mdW5jdGlvbiBzaGltSG9zdEF0dHJpYnV0ZShhcHBJZCwgdGVtcGxhdGVJZCkge1xyXG4gICAgcmV0dXJuIGxhbmdfMS5TdHJpbmdXcmFwcGVyLnJlcGxhY2VBbGwoSE9TVF9BVFRSLCBDT01QT05FTlRfUkVHRVgsIGNvbXBvbmVudElkKGFwcElkLCB0ZW1wbGF0ZUlkKSk7XHJcbn1cclxuZXhwb3J0cy5zaGltSG9zdEF0dHJpYnV0ZSA9IHNoaW1Ib3N0QXR0cmlidXRlO1xyXG5mdW5jdGlvbiBzaGltSG9zdEF0dHJpYnV0ZUV4cHIoYXBwSWRFeHByLCB0ZW1wbGF0ZUlkRXhwcikge1xyXG4gICAgcmV0dXJuIGxhbmdfMS5TdHJpbmdXcmFwcGVyLnJlcGxhY2VBbGwoSE9TVF9BVFRSX0VYUFIsIENPTVBPTkVOVF9SRUdFWCwgY29tcG9uZW50SWRFeHByZXNzaW9uKGFwcElkRXhwciwgdGVtcGxhdGVJZEV4cHIpKTtcclxufVxyXG5leHBvcnRzLnNoaW1Ib3N0QXR0cmlidXRlRXhwciA9IHNoaW1Ib3N0QXR0cmlidXRlRXhwcjtcclxuZnVuY3Rpb24gY29tcG9uZW50SWQoYXBwSWQsIHRlbXBsYXRlSWQpIHtcclxuICAgIHJldHVybiBhcHBJZCArIFwiLVwiICsgdGVtcGxhdGVJZDtcclxufVxyXG5mdW5jdGlvbiBjb21wb25lbnRJZEV4cHJlc3Npb24oYXBwSWRFeHByZXNzaW9uLCB0ZW1wbGF0ZUlkRXhwcmVzc2lvbikge1xyXG4gICAgcmV0dXJuIGFwcElkRXhwcmVzc2lvbiArIFwiKyctJytcIiArIHV0aWxfMS5jb2RlR2VuVG9TdHJpbmcodGVtcGxhdGVJZEV4cHJlc3Npb24pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlX2NvbXBpbGVyLmpzLm1hcCIsIid1c2Ugc3RyaWN0JzsvLyBTb21lIG9mIHRoZSBjb2RlIGNvbWVzIGZyb20gV2ViQ29tcG9uZW50cy5KU1xyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vd2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanMvYmxvYi9tYXN0ZXIvc3JjL0hUTUxJbXBvcnRzL3BhdGguanNcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBTdHlsZVdpdGhJbXBvcnRzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN0eWxlV2l0aEltcG9ydHMoc3R5bGUsIHN0eWxlVXJscykge1xyXG4gICAgICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcclxuICAgICAgICB0aGlzLnN0eWxlVXJscyA9IHN0eWxlVXJscztcclxuICAgIH1cclxuICAgIHJldHVybiBTdHlsZVdpdGhJbXBvcnRzO1xyXG59KSgpO1xyXG5leHBvcnRzLlN0eWxlV2l0aEltcG9ydHMgPSBTdHlsZVdpdGhJbXBvcnRzO1xyXG5mdW5jdGlvbiBpc1N0eWxlVXJsUmVzb2x2YWJsZSh1cmwpIHtcclxuICAgIGlmIChsYW5nXzEuaXNCbGFuayh1cmwpIHx8IHVybC5sZW5ndGggPT09IDAgfHwgdXJsWzBdID09ICcvJylcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgc2NoZW1lTWF0Y2ggPSBsYW5nXzEuUmVnRXhwV3JhcHBlci5maXJzdE1hdGNoKF91cmxXaXRoU2NoZW1hUmUsIHVybCk7XHJcbiAgICByZXR1cm4gbGFuZ18xLmlzQmxhbmsoc2NoZW1lTWF0Y2gpIHx8IHNjaGVtZU1hdGNoWzFdID09ICdwYWNrYWdlJztcclxufVxyXG5leHBvcnRzLmlzU3R5bGVVcmxSZXNvbHZhYmxlID0gaXNTdHlsZVVybFJlc29sdmFibGU7XHJcbi8qKlxyXG4gKiBSZXdyaXRlcyBzdHlsZXNoZWV0cyBieSByZXNvbHZpbmcgYW5kIHJlbW92aW5nIHRoZSBAaW1wb3J0IHVybHMgdGhhdFxyXG4gKiBhcmUgZWl0aGVyIHJlbGF0aXZlIG9yIGRvbid0IGhhdmUgYSBgcGFja2FnZTpgIHNjaGVtZVxyXG4gKi9cclxuZnVuY3Rpb24gZXh0cmFjdFN0eWxlVXJscyhyZXNvbHZlciwgYmFzZVVybCwgY3NzVGV4dCkge1xyXG4gICAgdmFyIGZvdW5kVXJscyA9IFtdO1xyXG4gICAgdmFyIG1vZGlmaWVkQ3NzVGV4dCA9IGxhbmdfMS5TdHJpbmdXcmFwcGVyLnJlcGxhY2VBbGxNYXBwZWQoY3NzVGV4dCwgX2Nzc0ltcG9ydFJlLCBmdW5jdGlvbiAobSkge1xyXG4gICAgICAgIHZhciB1cmwgPSBsYW5nXzEuaXNQcmVzZW50KG1bMV0pID8gbVsxXSA6IG1bMl07XHJcbiAgICAgICAgaWYgKCFpc1N0eWxlVXJsUmVzb2x2YWJsZSh1cmwpKSB7XHJcbiAgICAgICAgICAgIC8vIERvIG5vdCBhdHRlbXB0IHRvIHJlc29sdmUgbm9uLXBhY2thZ2UgYWJzb2x1dGUgVVJMcyB3aXRoIFVSSSBzY2hlbWVcclxuICAgICAgICAgICAgcmV0dXJuIG1bMF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvdW5kVXJscy5wdXNoKHJlc29sdmVyLnJlc29sdmUoYmFzZVVybCwgdXJsKSk7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbmV3IFN0eWxlV2l0aEltcG9ydHMobW9kaWZpZWRDc3NUZXh0LCBmb3VuZFVybHMpO1xyXG59XHJcbmV4cG9ydHMuZXh0cmFjdFN0eWxlVXJscyA9IGV4dHJhY3RTdHlsZVVybHM7XHJcbnZhciBfY3NzSW1wb3J0UmUgPSAvQGltcG9ydFxccysoPzp1cmxcXCgpP1xccyooPzooPzpbJ1wiXShbXidcIl0qKSl8KFteO1xcKVxcc10qKSlbXjtdKjs/L2c7XHJcbi8vIFRPRE86IGNhbid0IHVzZSAvXlteOi8/Iy5dKzovZyBkdWUgdG8gY2xhbmctZm9ybWF0IGJ1ZzpcclxuLy8gICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvNDU5NlxyXG52YXIgX3VybFdpdGhTY2hlbWFSZSA9IC9eKFthLXpBLVpcXC1cXCtcXC5dKyk6L2c7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlX3VybF9yZXNvbHZlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBUZXh0QXN0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRleHRBc3QodmFsdWUsIG5nQ29udGVudEluZGV4LCBzb3VyY2VJbmZvKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMubmdDb250ZW50SW5kZXggPSBuZ0NvbnRlbnRJbmRleDtcclxuICAgICAgICB0aGlzLnNvdXJjZUluZm8gPSBzb3VyY2VJbmZvO1xyXG4gICAgfVxyXG4gICAgVGV4dEFzdC5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvciwgY29udGV4dCkgeyByZXR1cm4gdmlzaXRvci52aXNpdFRleHQodGhpcywgY29udGV4dCk7IH07XHJcbiAgICByZXR1cm4gVGV4dEFzdDtcclxufSkoKTtcclxuZXhwb3J0cy5UZXh0QXN0ID0gVGV4dEFzdDtcclxudmFyIEJvdW5kVGV4dEFzdCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCb3VuZFRleHRBc3QodmFsdWUsIG5nQ29udGVudEluZGV4LCBzb3VyY2VJbmZvKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMubmdDb250ZW50SW5kZXggPSBuZ0NvbnRlbnRJbmRleDtcclxuICAgICAgICB0aGlzLnNvdXJjZUluZm8gPSBzb3VyY2VJbmZvO1xyXG4gICAgfVxyXG4gICAgQm91bmRUZXh0QXN0LnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBjb250ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRCb3VuZFRleHQodGhpcywgY29udGV4dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEJvdW5kVGV4dEFzdDtcclxufSkoKTtcclxuZXhwb3J0cy5Cb3VuZFRleHRBc3QgPSBCb3VuZFRleHRBc3Q7XHJcbnZhciBBdHRyQXN0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEF0dHJBc3QobmFtZSwgdmFsdWUsIHNvdXJjZUluZm8pIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnNvdXJjZUluZm8gPSBzb3VyY2VJbmZvO1xyXG4gICAgfVxyXG4gICAgQXR0ckFzdC5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvciwgY29udGV4dCkgeyByZXR1cm4gdmlzaXRvci52aXNpdEF0dHIodGhpcywgY29udGV4dCk7IH07XHJcbiAgICByZXR1cm4gQXR0ckFzdDtcclxufSkoKTtcclxuZXhwb3J0cy5BdHRyQXN0ID0gQXR0ckFzdDtcclxudmFyIEJvdW5kRWxlbWVudFByb3BlcnR5QXN0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJvdW5kRWxlbWVudFByb3BlcnR5QXN0KG5hbWUsIHR5cGUsIHZhbHVlLCB1bml0LCBzb3VyY2VJbmZvKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnVuaXQgPSB1bml0O1xyXG4gICAgICAgIHRoaXMuc291cmNlSW5mbyA9IHNvdXJjZUluZm87XHJcbiAgICB9XHJcbiAgICBCb3VuZEVsZW1lbnRQcm9wZXJ0eUFzdC5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvciwgY29udGV4dCkge1xyXG4gICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0RWxlbWVudFByb3BlcnR5KHRoaXMsIGNvbnRleHQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBCb3VuZEVsZW1lbnRQcm9wZXJ0eUFzdDtcclxufSkoKTtcclxuZXhwb3J0cy5Cb3VuZEVsZW1lbnRQcm9wZXJ0eUFzdCA9IEJvdW5kRWxlbWVudFByb3BlcnR5QXN0O1xyXG52YXIgQm91bmRFdmVudEFzdCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCb3VuZEV2ZW50QXN0KG5hbWUsIHRhcmdldCwgaGFuZGxlciwgc291cmNlSW5mbykge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcclxuICAgICAgICB0aGlzLnNvdXJjZUluZm8gPSBzb3VyY2VJbmZvO1xyXG4gICAgfVxyXG4gICAgQm91bmRFdmVudEFzdC5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvciwgY29udGV4dCkge1xyXG4gICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0RXZlbnQodGhpcywgY29udGV4dCk7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJvdW5kRXZlbnRBc3QucHJvdG90eXBlLCBcImZ1bGxOYW1lXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50YXJnZXQgKyBcIjpcIiArIHRoaXMubmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBCb3VuZEV2ZW50QXN0O1xyXG59KSgpO1xyXG5leHBvcnRzLkJvdW5kRXZlbnRBc3QgPSBCb3VuZEV2ZW50QXN0O1xyXG52YXIgVmFyaWFibGVBc3QgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVmFyaWFibGVBc3QobmFtZSwgdmFsdWUsIHNvdXJjZUluZm8pIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnNvdXJjZUluZm8gPSBzb3VyY2VJbmZvO1xyXG4gICAgfVxyXG4gICAgVmFyaWFibGVBc3QucHJvdG90eXBlLnZpc2l0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdFZhcmlhYmxlKHRoaXMsIGNvbnRleHQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBWYXJpYWJsZUFzdDtcclxufSkoKTtcclxuZXhwb3J0cy5WYXJpYWJsZUFzdCA9IFZhcmlhYmxlQXN0O1xyXG52YXIgRWxlbWVudEFzdCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFbGVtZW50QXN0KG5hbWUsIGF0dHJzLCBpbnB1dHMsIG91dHB1dHMsIGV4cG9ydEFzVmFycywgZGlyZWN0aXZlcywgY2hpbGRyZW4sIG5nQ29udGVudEluZGV4LCBzb3VyY2VJbmZvKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmF0dHJzID0gYXR0cnM7XHJcbiAgICAgICAgdGhpcy5pbnB1dHMgPSBpbnB1dHM7XHJcbiAgICAgICAgdGhpcy5vdXRwdXRzID0gb3V0cHV0cztcclxuICAgICAgICB0aGlzLmV4cG9ydEFzVmFycyA9IGV4cG9ydEFzVmFycztcclxuICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcclxuICAgICAgICB0aGlzLm5nQ29udGVudEluZGV4ID0gbmdDb250ZW50SW5kZXg7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VJbmZvID0gc291cmNlSW5mbztcclxuICAgIH1cclxuICAgIEVsZW1lbnRBc3QucHJvdG90eXBlLnZpc2l0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdEVsZW1lbnQodGhpcywgY29udGV4dCk7XHJcbiAgICB9O1xyXG4gICAgRWxlbWVudEFzdC5wcm90b3R5cGUuaXNCb3VuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuaW5wdXRzLmxlbmd0aCA+IDAgfHwgdGhpcy5vdXRwdXRzLmxlbmd0aCA+IDAgfHwgdGhpcy5leHBvcnRBc1ZhcnMubGVuZ3RoID4gMCB8fFxyXG4gICAgICAgICAgICB0aGlzLmRpcmVjdGl2ZXMubGVuZ3RoID4gMCk7XHJcbiAgICB9O1xyXG4gICAgRWxlbWVudEFzdC5wcm90b3R5cGUuZ2V0Q29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRpcmVjdGl2ZXMubGVuZ3RoID4gMCAmJiB0aGlzLmRpcmVjdGl2ZXNbMF0uZGlyZWN0aXZlLmlzQ29tcG9uZW50ID9cclxuICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzWzBdLmRpcmVjdGl2ZSA6XHJcbiAgICAgICAgICAgIG51bGw7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEVsZW1lbnRBc3Q7XHJcbn0pKCk7XHJcbmV4cG9ydHMuRWxlbWVudEFzdCA9IEVsZW1lbnRBc3Q7XHJcbnZhciBFbWJlZGRlZFRlbXBsYXRlQXN0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVtYmVkZGVkVGVtcGxhdGVBc3QoYXR0cnMsIHZhcnMsIGRpcmVjdGl2ZXMsIGNoaWxkcmVuLCBuZ0NvbnRlbnRJbmRleCwgc291cmNlSW5mbykge1xyXG4gICAgICAgIHRoaXMuYXR0cnMgPSBhdHRycztcclxuICAgICAgICB0aGlzLnZhcnMgPSB2YXJzO1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXM7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xyXG4gICAgICAgIHRoaXMubmdDb250ZW50SW5kZXggPSBuZ0NvbnRlbnRJbmRleDtcclxuICAgICAgICB0aGlzLnNvdXJjZUluZm8gPSBzb3VyY2VJbmZvO1xyXG4gICAgfVxyXG4gICAgRW1iZWRkZWRUZW1wbGF0ZUFzdC5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvciwgY29udGV4dCkge1xyXG4gICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0RW1iZWRkZWRUZW1wbGF0ZSh0aGlzLCBjb250ZXh0KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRW1iZWRkZWRUZW1wbGF0ZUFzdDtcclxufSkoKTtcclxuZXhwb3J0cy5FbWJlZGRlZFRlbXBsYXRlQXN0ID0gRW1iZWRkZWRUZW1wbGF0ZUFzdDtcclxudmFyIEJvdW5kRGlyZWN0aXZlUHJvcGVydHlBc3QgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQm91bmREaXJlY3RpdmVQcm9wZXJ0eUFzdChkaXJlY3RpdmVOYW1lLCB0ZW1wbGF0ZU5hbWUsIHZhbHVlLCBzb3VyY2VJbmZvKSB7XHJcbiAgICAgICAgdGhpcy5kaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTmFtZTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlTmFtZSA9IHRlbXBsYXRlTmFtZTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VJbmZvID0gc291cmNlSW5mbztcclxuICAgIH1cclxuICAgIEJvdW5kRGlyZWN0aXZlUHJvcGVydHlBc3QucHJvdG90eXBlLnZpc2l0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdERpcmVjdGl2ZVByb3BlcnR5KHRoaXMsIGNvbnRleHQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBCb3VuZERpcmVjdGl2ZVByb3BlcnR5QXN0O1xyXG59KSgpO1xyXG5leHBvcnRzLkJvdW5kRGlyZWN0aXZlUHJvcGVydHlBc3QgPSBCb3VuZERpcmVjdGl2ZVByb3BlcnR5QXN0O1xyXG52YXIgRGlyZWN0aXZlQXN0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERpcmVjdGl2ZUFzdChkaXJlY3RpdmUsIGlucHV0cywgaG9zdFByb3BlcnRpZXMsIGhvc3RFdmVudHMsIGV4cG9ydEFzVmFycywgc291cmNlSW5mbykge1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aXZlID0gZGlyZWN0aXZlO1xyXG4gICAgICAgIHRoaXMuaW5wdXRzID0gaW5wdXRzO1xyXG4gICAgICAgIHRoaXMuaG9zdFByb3BlcnRpZXMgPSBob3N0UHJvcGVydGllcztcclxuICAgICAgICB0aGlzLmhvc3RFdmVudHMgPSBob3N0RXZlbnRzO1xyXG4gICAgICAgIHRoaXMuZXhwb3J0QXNWYXJzID0gZXhwb3J0QXNWYXJzO1xyXG4gICAgICAgIHRoaXMuc291cmNlSW5mbyA9IHNvdXJjZUluZm87XHJcbiAgICB9XHJcbiAgICBEaXJlY3RpdmVBc3QucHJvdG90eXBlLnZpc2l0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdERpcmVjdGl2ZSh0aGlzLCBjb250ZXh0KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGlyZWN0aXZlQXN0O1xyXG59KSgpO1xyXG5leHBvcnRzLkRpcmVjdGl2ZUFzdCA9IERpcmVjdGl2ZUFzdDtcclxudmFyIE5nQ29udGVudEFzdCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOZ0NvbnRlbnRBc3QoaW5kZXgsIG5nQ29udGVudEluZGV4LCBzb3VyY2VJbmZvKSB7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xyXG4gICAgICAgIHRoaXMubmdDb250ZW50SW5kZXggPSBuZ0NvbnRlbnRJbmRleDtcclxuICAgICAgICB0aGlzLnNvdXJjZUluZm8gPSBzb3VyY2VJbmZvO1xyXG4gICAgfVxyXG4gICAgTmdDb250ZW50QXN0LnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBjb250ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXROZ0NvbnRlbnQodGhpcywgY29udGV4dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE5nQ29udGVudEFzdDtcclxufSkoKTtcclxuZXhwb3J0cy5OZ0NvbnRlbnRBc3QgPSBOZ0NvbnRlbnRBc3Q7XHJcbihmdW5jdGlvbiAoUHJvcGVydHlCaW5kaW5nVHlwZSkge1xyXG4gICAgUHJvcGVydHlCaW5kaW5nVHlwZVtQcm9wZXJ0eUJpbmRpbmdUeXBlW1wiUHJvcGVydHlcIl0gPSAwXSA9IFwiUHJvcGVydHlcIjtcclxuICAgIFByb3BlcnR5QmluZGluZ1R5cGVbUHJvcGVydHlCaW5kaW5nVHlwZVtcIkF0dHJpYnV0ZVwiXSA9IDFdID0gXCJBdHRyaWJ1dGVcIjtcclxuICAgIFByb3BlcnR5QmluZGluZ1R5cGVbUHJvcGVydHlCaW5kaW5nVHlwZVtcIkNsYXNzXCJdID0gMl0gPSBcIkNsYXNzXCI7XHJcbiAgICBQcm9wZXJ0eUJpbmRpbmdUeXBlW1Byb3BlcnR5QmluZGluZ1R5cGVbXCJTdHlsZVwiXSA9IDNdID0gXCJTdHlsZVwiO1xyXG59KShleHBvcnRzLlByb3BlcnR5QmluZGluZ1R5cGUgfHwgKGV4cG9ydHMuUHJvcGVydHlCaW5kaW5nVHlwZSA9IHt9KSk7XHJcbnZhciBQcm9wZXJ0eUJpbmRpbmdUeXBlID0gZXhwb3J0cy5Qcm9wZXJ0eUJpbmRpbmdUeXBlO1xyXG5mdW5jdGlvbiB0ZW1wbGF0ZVZpc2l0QWxsKHZpc2l0b3IsIGFzdHMsIGNvbnRleHQpIHtcclxuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IG51bGw7IH1cclxuICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgIGFzdHMuZm9yRWFjaChmdW5jdGlvbiAoYXN0KSB7XHJcbiAgICAgICAgdmFyIGFzdFJlc3VsdCA9IGFzdC52aXNpdCh2aXNpdG9yLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChhc3RSZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFzdFJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmV4cG9ydHMudGVtcGxhdGVWaXNpdEFsbCA9IHRlbXBsYXRlVmlzaXRBbGw7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlX2FzdC5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIF9fcGFyYW0gPSAodGhpcyAmJiB0aGlzLl9fcGFyYW0pIHx8IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59O1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9hc3luYycpO1xyXG52YXIgdGVtcGxhdGVfY29tbWFuZHNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci90ZW1wbGF0ZV9jb21tYW5kcycpO1xyXG52YXIgZGlyZWN0aXZlX21ldGFkYXRhXzEgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZV9tZXRhZGF0YScpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBzb3VyY2VfbW9kdWxlXzEgPSByZXF1aXJlKCcuL3NvdXJjZV9tb2R1bGUnKTtcclxudmFyIGNoYW5nZV9kZXRlY3Rvcl9jb21waWxlcl8xID0gcmVxdWlyZSgnLi9jaGFuZ2VfZGV0ZWN0b3JfY29tcGlsZXInKTtcclxudmFyIHN0eWxlX2NvbXBpbGVyXzEgPSByZXF1aXJlKCcuL3N0eWxlX2NvbXBpbGVyJyk7XHJcbnZhciBjb21tYW5kX2NvbXBpbGVyXzEgPSByZXF1aXJlKCcuL2NvbW1hbmRfY29tcGlsZXInKTtcclxudmFyIHRlbXBsYXRlX3BhcnNlcl8xID0gcmVxdWlyZSgnLi90ZW1wbGF0ZV9wYXJzZXInKTtcclxudmFyIHRlbXBsYXRlX25vcm1hbGl6ZXJfMSA9IHJlcXVpcmUoJy4vdGVtcGxhdGVfbm9ybWFsaXplcicpO1xyXG52YXIgcnVudGltZV9tZXRhZGF0YV8xID0gcmVxdWlyZSgnLi9ydW50aW1lX21ldGFkYXRhJyk7XHJcbnZhciBhcHBsaWNhdGlvbl90b2tlbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2FwcGxpY2F0aW9uX3Rva2VucycpO1xyXG52YXIgY29tbWFuZF9jb21waWxlcl8yID0gcmVxdWlyZSgnLi9jb21tYW5kX2NvbXBpbGVyJyk7XHJcbnZhciB1dGlsXzEgPSByZXF1aXJlKCcuL3V0aWwnKTtcclxudmFyIGRpXzIgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgVGVtcGxhdGVDb21waWxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUZW1wbGF0ZUNvbXBpbGVyKF9ydW50aW1lTWV0YWRhdGFSZXNvbHZlciwgX3RlbXBsYXRlTm9ybWFsaXplciwgX3RlbXBsYXRlUGFyc2VyLCBfc3R5bGVDb21waWxlciwgX2NvbW1hbmRDb21waWxlciwgX2NkQ29tcGlsZXIsIGFwcElkKSB7XHJcbiAgICAgICAgdGhpcy5fcnVudGltZU1ldGFkYXRhUmVzb2x2ZXIgPSBfcnVudGltZU1ldGFkYXRhUmVzb2x2ZXI7XHJcbiAgICAgICAgdGhpcy5fdGVtcGxhdGVOb3JtYWxpemVyID0gX3RlbXBsYXRlTm9ybWFsaXplcjtcclxuICAgICAgICB0aGlzLl90ZW1wbGF0ZVBhcnNlciA9IF90ZW1wbGF0ZVBhcnNlcjtcclxuICAgICAgICB0aGlzLl9zdHlsZUNvbXBpbGVyID0gX3N0eWxlQ29tcGlsZXI7XHJcbiAgICAgICAgdGhpcy5fY29tbWFuZENvbXBpbGVyID0gX2NvbW1hbmRDb21waWxlcjtcclxuICAgICAgICB0aGlzLl9jZENvbXBpbGVyID0gX2NkQ29tcGlsZXI7XHJcbiAgICAgICAgdGhpcy5faG9zdENhY2hlS2V5cyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLl9jb21waWxlZFRlbXBsYXRlQ2FjaGUgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5fY29tcGlsZWRUZW1wbGF0ZURvbmUgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5fYXBwSWQgPSBhcHBJZDtcclxuICAgIH1cclxuICAgIFRlbXBsYXRlQ29tcGlsZXIucHJvdG90eXBlLm5vcm1hbGl6ZURpcmVjdGl2ZU1ldGFkYXRhID0gZnVuY3Rpb24gKGRpcmVjdGl2ZSkge1xyXG4gICAgICAgIGlmICghZGlyZWN0aXZlLmlzQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIC8vIEZvciBub24gY29tcG9uZW50cyB0aGVyZSBpcyBub3RoaW5nIHRvIGJlIG5vcm1hbGl6ZWQgeWV0LlxyXG4gICAgICAgICAgICByZXR1cm4gYXN5bmNfMS5Qcm9taXNlV3JhcHBlci5yZXNvbHZlKGRpcmVjdGl2ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBub3JtYWxpemVkVGVtcGxhdGVQcm9taXNlO1xyXG4gICAgICAgIGlmIChkaXJlY3RpdmUuaXNDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgbm9ybWFsaXplZFRlbXBsYXRlUHJvbWlzZSA9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90ZW1wbGF0ZU5vcm1hbGl6ZXIubm9ybWFsaXplVGVtcGxhdGUoZGlyZWN0aXZlLnR5cGUsIGRpcmVjdGl2ZS50ZW1wbGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBub3JtYWxpemVkVGVtcGxhdGVQcm9taXNlID0gYXN5bmNfMS5Qcm9taXNlV3JhcHBlci5yZXNvbHZlKG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbm9ybWFsaXplZFRlbXBsYXRlUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChub3JtYWxpemVkVGVtcGxhdGUpIHsgcmV0dXJuIG5ldyBkaXJlY3RpdmVfbWV0YWRhdGFfMS5Db21waWxlRGlyZWN0aXZlTWV0YWRhdGEoe1xyXG4gICAgICAgICAgICB0eXBlOiBkaXJlY3RpdmUudHlwZSxcclxuICAgICAgICAgICAgaXNDb21wb25lbnQ6IGRpcmVjdGl2ZS5pc0NvbXBvbmVudCxcclxuICAgICAgICAgICAgZHluYW1pY0xvYWRhYmxlOiBkaXJlY3RpdmUuZHluYW1pY0xvYWRhYmxlLFxyXG4gICAgICAgICAgICBzZWxlY3RvcjogZGlyZWN0aXZlLnNlbGVjdG9yLFxyXG4gICAgICAgICAgICBleHBvcnRBczogZGlyZWN0aXZlLmV4cG9ydEFzLFxyXG4gICAgICAgICAgICBjaGFuZ2VEZXRlY3Rpb246IGRpcmVjdGl2ZS5jaGFuZ2VEZXRlY3Rpb24sXHJcbiAgICAgICAgICAgIGlucHV0czogZGlyZWN0aXZlLmlucHV0cyxcclxuICAgICAgICAgICAgb3V0cHV0czogZGlyZWN0aXZlLm91dHB1dHMsXHJcbiAgICAgICAgICAgIGhvc3RMaXN0ZW5lcnM6IGRpcmVjdGl2ZS5ob3N0TGlzdGVuZXJzLFxyXG4gICAgICAgICAgICBob3N0UHJvcGVydGllczogZGlyZWN0aXZlLmhvc3RQcm9wZXJ0aWVzLFxyXG4gICAgICAgICAgICBob3N0QXR0cmlidXRlczogZGlyZWN0aXZlLmhvc3RBdHRyaWJ1dGVzLFxyXG4gICAgICAgICAgICBsaWZlY3ljbGVIb29rczogZGlyZWN0aXZlLmxpZmVjeWNsZUhvb2tzLCB0ZW1wbGF0ZTogbm9ybWFsaXplZFRlbXBsYXRlXHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlQ29tcGlsZXIucHJvdG90eXBlLmNvbXBpbGVIb3N0Q29tcG9uZW50UnVudGltZSA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgdmFyIGhvc3RDYWNoZUtleSA9IHRoaXMuX2hvc3RDYWNoZUtleXMuZ2V0KHR5cGUpO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhob3N0Q2FjaGVLZXkpKSB7XHJcbiAgICAgICAgICAgIGhvc3RDYWNoZUtleSA9IG5ldyBPYmplY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5faG9zdENhY2hlS2V5cy5zZXQodHlwZSwgaG9zdENhY2hlS2V5KTtcclxuICAgICAgICAgICAgdmFyIGNvbXBNZXRhID0gdGhpcy5fcnVudGltZU1ldGFkYXRhUmVzb2x2ZXIuZ2V0TWV0YWRhdGEodHlwZSk7XHJcbiAgICAgICAgICAgIGFzc2VydENvbXBvbmVudChjb21wTWV0YSk7XHJcbiAgICAgICAgICAgIHZhciBob3N0TWV0YSA9IGRpcmVjdGl2ZV9tZXRhZGF0YV8xLmNyZWF0ZUhvc3RDb21wb25lbnRNZXRhKGNvbXBNZXRhLnR5cGUsIGNvbXBNZXRhLnNlbGVjdG9yKTtcclxuICAgICAgICAgICAgdGhpcy5fY29tcGlsZUNvbXBvbmVudFJ1bnRpbWUoaG9zdENhY2hlS2V5LCBob3N0TWV0YSwgW2NvbXBNZXRhXSwgbmV3IFNldCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbXBpbGVkVGVtcGxhdGVEb25lLmdldChob3N0Q2FjaGVLZXkpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjb21waWxlZFRlbXBsYXRlKSB7IHJldHVybiBuZXcgdGVtcGxhdGVfY29tbWFuZHNfMS5Db21waWxlZEhvc3RUZW1wbGF0ZShmdW5jdGlvbiAoKSB7IHJldHVybiBjb21waWxlZFRlbXBsYXRlOyB9KTsgfSk7XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGVDb21waWxlci5wcm90b3R5cGUuY2xlYXJDYWNoZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9ob3N0Q2FjaGVLZXlzLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5fc3R5bGVDb21waWxlci5jbGVhckNhY2hlKCk7XHJcbiAgICAgICAgdGhpcy5fY29tcGlsZWRUZW1wbGF0ZUNhY2hlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5fY29tcGlsZWRUZW1wbGF0ZURvbmUuY2xlYXIoKTtcclxuICAgIH07XHJcbiAgICBUZW1wbGF0ZUNvbXBpbGVyLnByb3RvdHlwZS5fY29tcGlsZUNvbXBvbmVudFJ1bnRpbWUgPSBmdW5jdGlvbiAoY2FjaGVLZXksIGNvbXBNZXRhLCB2aWV3RGlyZWN0aXZlcywgY29tcGlsaW5nQ29tcG9uZW50Q2FjaGVLZXlzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgY29tcGlsZWRUZW1wbGF0ZSA9IHRoaXMuX2NvbXBpbGVkVGVtcGxhdGVDYWNoZS5nZXQoY2FjaGVLZXkpO1xyXG4gICAgICAgIHZhciBkb25lID0gdGhpcy5fY29tcGlsZWRUZW1wbGF0ZURvbmUuZ2V0KGNhY2hlS2V5KTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoY29tcGlsZWRUZW1wbGF0ZSkpIHtcclxuICAgICAgICAgICAgdmFyIHN0eWxlcztcclxuICAgICAgICAgICAgdmFyIGNoYW5nZURldGVjdG9yRmFjdG9yeTtcclxuICAgICAgICAgICAgdmFyIGNvbW1hbmRzO1xyXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVJZCA9IHRlbXBsYXRlX2NvbW1hbmRzXzEubmV4dFRlbXBsYXRlSWQoKTtcclxuICAgICAgICAgICAgY29tcGlsZWRUZW1wbGF0ZSA9XHJcbiAgICAgICAgICAgICAgICBuZXcgdGVtcGxhdGVfY29tbWFuZHNfMS5Db21waWxlZFRlbXBsYXRlKHRlbXBsYXRlSWQsIGZ1bmN0aW9uIChfYSwgX2IpIHsgcmV0dXJuIFtjaGFuZ2VEZXRlY3RvckZhY3RvcnksIGNvbW1hbmRzLCBzdHlsZXNdOyB9KTtcclxuICAgICAgICAgICAgdGhpcy5fY29tcGlsZWRUZW1wbGF0ZUNhY2hlLnNldChjYWNoZUtleSwgY29tcGlsZWRUZW1wbGF0ZSk7XHJcbiAgICAgICAgICAgIGNvbXBpbGluZ0NvbXBvbmVudENhY2hlS2V5cy5hZGQoY2FjaGVLZXkpO1xyXG4gICAgICAgICAgICBkb25lID1cclxuICAgICAgICAgICAgICAgIGFzeW5jXzEuUHJvbWlzZVdyYXBwZXIuYWxsKFtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHlsZUNvbXBpbGVyLmNvbXBpbGVDb21wb25lbnRSdW50aW1lKHRoaXMuX2FwcElkLCB0ZW1wbGF0ZUlkLCBjb21wTWV0YS50ZW1wbGF0ZSlcclxuICAgICAgICAgICAgICAgIF0uY29uY2F0KHZpZXdEaXJlY3RpdmVzLm1hcChmdW5jdGlvbiAoZGlyTWV0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5ub3JtYWxpemVEaXJlY3RpdmVNZXRhZGF0YShkaXJNZXRhKTtcclxuICAgICAgICAgICAgICAgIH0pKSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoc3R5bGVzQW5kTm9ybWFsaXplZFZpZXdEaXJNZXRhcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZFByb21pc2VzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZWRWaWV3RGlyTWV0YXMgPSBzdHlsZXNBbmROb3JtYWxpemVkVmlld0Rpck1ldGFzLnNsaWNlKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWRUZW1wbGF0ZSA9IF90aGlzLl90ZW1wbGF0ZVBhcnNlci5wYXJzZShjb21wTWV0YS50ZW1wbGF0ZS50ZW1wbGF0ZSwgbm9ybWFsaXplZFZpZXdEaXJNZXRhcywgY29tcE1ldGEudHlwZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0b3JGYWN0b3JpZXMgPSBfdGhpcy5fY2RDb21waWxlci5jb21waWxlQ29tcG9uZW50UnVudGltZShjb21wTWV0YS50eXBlLCBjb21wTWV0YS5jaGFuZ2VEZXRlY3Rpb24sIHBhcnNlZFRlbXBsYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RvckZhY3RvcnkgPSBjaGFuZ2VEZXRlY3RvckZhY3Rvcmllc1swXTtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZXMgPSBzdHlsZXNBbmROb3JtYWxpemVkVmlld0Rpck1ldGFzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmRzID0gX3RoaXMuX2NvbXBpbGVDb21tYW5kc1J1bnRpbWUoY29tcE1ldGEsIHRlbXBsYXRlSWQsIHBhcnNlZFRlbXBsYXRlLCBjaGFuZ2VEZXRlY3RvckZhY3RvcmllcywgY29tcGlsaW5nQ29tcG9uZW50Q2FjaGVLZXlzLCBjaGlsZFByb21pc2VzKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXN5bmNfMS5Qcm9taXNlV3JhcHBlci5hbGwoY2hpbGRQcm9taXNlcyk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbl8xLlNldFdyYXBwZXIuZGVsZXRlKGNvbXBpbGluZ0NvbXBvbmVudENhY2hlS2V5cywgY2FjaGVLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21waWxlZFRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXBpbGVkVGVtcGxhdGVEb25lLnNldChjYWNoZUtleSwgZG9uZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb21waWxlZFRlbXBsYXRlO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlQ29tcGlsZXIucHJvdG90eXBlLl9jb21waWxlQ29tbWFuZHNSdW50aW1lID0gZnVuY3Rpb24gKGNvbXBNZXRhLCB0ZW1wbGF0ZUlkLCBwYXJzZWRUZW1wbGF0ZSwgY2hhbmdlRGV0ZWN0b3JGYWN0b3JpZXMsIGNvbXBpbGluZ0NvbXBvbmVudENhY2hlS2V5cywgY2hpbGRQcm9taXNlcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbW1hbmRDb21waWxlci5jb21waWxlQ29tcG9uZW50UnVudGltZShjb21wTWV0YSwgdGhpcy5fYXBwSWQsIHRlbXBsYXRlSWQsIHBhcnNlZFRlbXBsYXRlLCBjaGFuZ2VEZXRlY3RvckZhY3RvcmllcywgZnVuY3Rpb24gKGNoaWxkQ29tcG9uZW50RGlyKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZENhY2hlS2V5ID0gY2hpbGRDb21wb25lbnREaXIudHlwZS5ydW50aW1lO1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRWaWV3RGlyZWN0aXZlcyA9IF90aGlzLl9ydW50aW1lTWV0YWRhdGFSZXNvbHZlci5nZXRWaWV3RGlyZWN0aXZlc01ldGFkYXRhKGNoaWxkQ29tcG9uZW50RGlyLnR5cGUucnVudGltZSk7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZElzUmVjdXJzaXZlID0gY29sbGVjdGlvbl8xLlNldFdyYXBwZXIuaGFzKGNvbXBpbGluZ0NvbXBvbmVudENhY2hlS2V5cywgY2hpbGRDYWNoZUtleSk7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZFRlbXBsYXRlID0gX3RoaXMuX2NvbXBpbGVDb21wb25lbnRSdW50aW1lKGNoaWxkQ2FjaGVLZXksIGNoaWxkQ29tcG9uZW50RGlyLCBjaGlsZFZpZXdEaXJlY3RpdmVzLCBjb21waWxpbmdDb21wb25lbnRDYWNoZUtleXMpO1xyXG4gICAgICAgICAgICBpZiAoIWNoaWxkSXNSZWN1cnNpdmUpIHtcclxuICAgICAgICAgICAgICAgIC8vIE9ubHkgd2FpdCBmb3IgYSBjaGlsZCBpZiBpdCBpcyBub3QgYSBjeWNsZVxyXG4gICAgICAgICAgICAgICAgY2hpbGRQcm9taXNlcy5wdXNoKF90aGlzLl9jb21waWxlZFRlbXBsYXRlRG9uZS5nZXQoY2hpbGRDYWNoZUtleSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjaGlsZFRlbXBsYXRlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlQ29tcGlsZXIucHJvdG90eXBlLmNvbXBpbGVUZW1wbGF0ZXNDb2RlR2VuID0gZnVuY3Rpb24gKGNvbXBvbmVudHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChjb21wb25lbnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oJ05vIGNvbXBvbmVudHMgZ2l2ZW4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGRlY2xhcmF0aW9ucyA9IFtdO1xyXG4gICAgICAgIHZhciB0ZW1wbGF0ZUFyZ3VtZW50cyA9IFtdO1xyXG4gICAgICAgIHZhciBjb21wb25lbnRNZXRhcyA9IFtdO1xyXG4gICAgICAgIHZhciB0ZW1wbGF0ZUlkVmFyaWFibGUgPSAndGVtcGxhdGVJZCc7XHJcbiAgICAgICAgdmFyIGFwcElkVmFyaWFibGUgPSAnYXBwSWQnO1xyXG4gICAgICAgIGNvbXBvbmVudHMuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50V2l0aERpcnMpIHtcclxuICAgICAgICAgICAgdmFyIGNvbXBNZXRhID0gY29tcG9uZW50V2l0aERpcnMuY29tcG9uZW50O1xyXG4gICAgICAgICAgICBhc3NlcnRDb21wb25lbnQoY29tcE1ldGEpO1xyXG4gICAgICAgICAgICBjb21wb25lbnRNZXRhcy5wdXNoKGNvbXBNZXRhKTtcclxuICAgICAgICAgICAgX3RoaXMuX3Byb2Nlc3NUZW1wbGF0ZUNvZGVHZW4oY29tcE1ldGEsIGFwcElkVmFyaWFibGUsIHRlbXBsYXRlSWRWYXJpYWJsZSwgY29tcG9uZW50V2l0aERpcnMuZGlyZWN0aXZlcywgZGVjbGFyYXRpb25zLCB0ZW1wbGF0ZUFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIGlmIChjb21wTWV0YS5keW5hbWljTG9hZGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBob3N0TWV0YSA9IGRpcmVjdGl2ZV9tZXRhZGF0YV8xLmNyZWF0ZUhvc3RDb21wb25lbnRNZXRhKGNvbXBNZXRhLnR5cGUsIGNvbXBNZXRhLnNlbGVjdG9yKTtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudE1ldGFzLnB1c2goaG9zdE1ldGEpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3Byb2Nlc3NUZW1wbGF0ZUNvZGVHZW4oaG9zdE1ldGEsIGFwcElkVmFyaWFibGUsIHRlbXBsYXRlSWRWYXJpYWJsZSwgW2NvbXBNZXRhXSwgZGVjbGFyYXRpb25zLCB0ZW1wbGF0ZUFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuZm9yRWFjaFdpdGhJbmRleChjb21wb25lbnRNZXRhcywgZnVuY3Rpb24gKGNvbXBNZXRhLCBpbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVEYXRhRm4gPSB1dGlsXzEuY29kZUdlblZhbHVlRm4oW2FwcElkVmFyaWFibGUsIHRlbXBsYXRlSWRWYXJpYWJsZV0sIFwiW1wiICsgdGVtcGxhdGVBcmd1bWVudHNbaW5kZXhdLmpvaW4oJywnKSArIFwiXVwiKTtcclxuICAgICAgICAgICAgdmFyIGNvbXBpbGVkVGVtcGxhdGVFeHByID0gXCJuZXcgXCIgKyBjb21tYW5kX2NvbXBpbGVyXzIuVEVNUExBVEVfQ09NTUFORFNfTU9EVUxFX1JFRiArIFwiQ29tcGlsZWRUZW1wbGF0ZShcIiArIGNvbW1hbmRfY29tcGlsZXJfMi5URU1QTEFURV9DT01NQU5EU19NT0RVTEVfUkVGICsgXCJuZXh0VGVtcGxhdGVJZCgpLFwiICsgdGVtcGxhdGVEYXRhRm4gKyBcIilcIjtcclxuICAgICAgICAgICAgdmFyIHZhcmlhYmxlVmFsdWVFeHByO1xyXG4gICAgICAgICAgICBpZiAoY29tcE1ldGEudHlwZS5pc0hvc3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmYWN0b3J5TmFtZSA9IFwiX2hvc3RUZW1wbGF0ZUZhY3RvcnlcIiArIGluZGV4O1xyXG4gICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zLnB1c2godXRpbF8xLmNvZGVHZW5WYWx1ZUZuKFtdLCBjb21waWxlZFRlbXBsYXRlRXhwciwgZmFjdG9yeU5hbWUpICsgXCI7XCIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnN0cnVjdGlvbktleXdvcmQgPSB1dGlsXzEuSVNfREFSVCA/ICdjb25zdCcgOiAnbmV3JztcclxuICAgICAgICAgICAgICAgIHZhcmlhYmxlVmFsdWVFeHByID1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3Rpb25LZXl3b3JkICsgXCIgXCIgKyBjb21tYW5kX2NvbXBpbGVyXzIuVEVNUExBVEVfQ09NTUFORFNfTU9EVUxFX1JFRiArIFwiQ29tcGlsZWRIb3N0VGVtcGxhdGUoXCIgKyBmYWN0b3J5TmFtZSArIFwiKVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyaWFibGVWYWx1ZUV4cHIgPSBjb21waWxlZFRlbXBsYXRlRXhwcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWNsYXJhdGlvbnMucHVzaChcIlwiICsgdXRpbF8xLmNvZGVHZW5FeHBvcnRWYXJpYWJsZSh0ZW1wbGF0ZVZhcmlhYmxlTmFtZShjb21wTWV0YS50eXBlKSwgY29tcE1ldGEudHlwZS5pc0hvc3QpICsgdmFyaWFibGVWYWx1ZUV4cHIgKyBcIjtcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIG1vZHVsZVVybCA9IGNvbXBvbmVudHNbMF0uY29tcG9uZW50LnR5cGUubW9kdWxlVXJsO1xyXG4gICAgICAgIHJldHVybiBuZXcgc291cmNlX21vZHVsZV8xLlNvdXJjZU1vZHVsZShcIlwiICsgdGVtcGxhdGVNb2R1bGVVcmwobW9kdWxlVXJsKSwgZGVjbGFyYXRpb25zLmpvaW4oJ1xcbicpKTtcclxuICAgIH07XHJcbiAgICBUZW1wbGF0ZUNvbXBpbGVyLnByb3RvdHlwZS5jb21waWxlU3R5bGVzaGVldENvZGVHZW4gPSBmdW5jdGlvbiAoc3R5bGVzaGVldFVybCwgY3NzVGV4dCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdHlsZUNvbXBpbGVyLmNvbXBpbGVTdHlsZXNoZWV0Q29kZUdlbihzdHlsZXNoZWV0VXJsLCBjc3NUZXh0KTtcclxuICAgIH07XHJcbiAgICBUZW1wbGF0ZUNvbXBpbGVyLnByb3RvdHlwZS5fcHJvY2Vzc1RlbXBsYXRlQ29kZUdlbiA9IGZ1bmN0aW9uIChjb21wTWV0YSwgYXBwSWRFeHByLCB0ZW1wbGF0ZUlkRXhwciwgZGlyZWN0aXZlcywgdGFyZ2V0RGVjbGFyYXRpb25zLCB0YXJnZXRUZW1wbGF0ZUFyZ3VtZW50cykge1xyXG4gICAgICAgIHZhciBzdHlsZUV4cHIgPSB0aGlzLl9zdHlsZUNvbXBpbGVyLmNvbXBpbGVDb21wb25lbnRDb2RlR2VuKGFwcElkRXhwciwgdGVtcGxhdGVJZEV4cHIsIGNvbXBNZXRhLnRlbXBsYXRlKTtcclxuICAgICAgICB2YXIgcGFyc2VkVGVtcGxhdGUgPSB0aGlzLl90ZW1wbGF0ZVBhcnNlci5wYXJzZShjb21wTWV0YS50ZW1wbGF0ZS50ZW1wbGF0ZSwgZGlyZWN0aXZlcywgY29tcE1ldGEudHlwZS5uYW1lKTtcclxuICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0b3JzRXhwcnMgPSB0aGlzLl9jZENvbXBpbGVyLmNvbXBpbGVDb21wb25lbnRDb2RlR2VuKGNvbXBNZXRhLnR5cGUsIGNvbXBNZXRhLmNoYW5nZURldGVjdGlvbiwgcGFyc2VkVGVtcGxhdGUpO1xyXG4gICAgICAgIHZhciBjb21tYW5kc0V4cHIgPSB0aGlzLl9jb21tYW5kQ29tcGlsZXIuY29tcGlsZUNvbXBvbmVudENvZGVHZW4oY29tcE1ldGEsIGFwcElkRXhwciwgdGVtcGxhdGVJZEV4cHIsIHBhcnNlZFRlbXBsYXRlLCBjaGFuZ2VEZXRlY3RvcnNFeHBycy5leHByZXNzaW9ucywgY29kZUdlbkNvbXBvbmVudFRlbXBsYXRlRmFjdG9yeSk7XHJcbiAgICAgICAgYWRkQWxsKHN0eWxlRXhwci5kZWNsYXJhdGlvbnMsIHRhcmdldERlY2xhcmF0aW9ucyk7XHJcbiAgICAgICAgYWRkQWxsKGNoYW5nZURldGVjdG9yc0V4cHJzLmRlY2xhcmF0aW9ucywgdGFyZ2V0RGVjbGFyYXRpb25zKTtcclxuICAgICAgICBhZGRBbGwoY29tbWFuZHNFeHByLmRlY2xhcmF0aW9ucywgdGFyZ2V0RGVjbGFyYXRpb25zKTtcclxuICAgICAgICB0YXJnZXRUZW1wbGF0ZUFyZ3VtZW50cy5wdXNoKFtjaGFuZ2VEZXRlY3RvcnNFeHBycy5leHByZXNzaW9uc1swXSwgY29tbWFuZHNFeHByLmV4cHJlc3Npb24sIHN0eWxlRXhwci5leHByZXNzaW9uXSk7XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGVDb21waWxlciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLFxyXG4gICAgICAgIF9fcGFyYW0oNiwgZGlfMi5JbmplY3QoYXBwbGljYXRpb25fdG9rZW5zXzEuQVBQX0lEKSksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW3J1bnRpbWVfbWV0YWRhdGFfMS5SdW50aW1lTWV0YWRhdGFSZXNvbHZlciwgdGVtcGxhdGVfbm9ybWFsaXplcl8xLlRlbXBsYXRlTm9ybWFsaXplciwgdGVtcGxhdGVfcGFyc2VyXzEuVGVtcGxhdGVQYXJzZXIsIHN0eWxlX2NvbXBpbGVyXzEuU3R5bGVDb21waWxlciwgY29tbWFuZF9jb21waWxlcl8xLkNvbW1hbmRDb21waWxlciwgY2hhbmdlX2RldGVjdG9yX2NvbXBpbGVyXzEuQ2hhbmdlRGV0ZWN0aW9uQ29tcGlsZXIsIFN0cmluZ10pXHJcbiAgICBdLCBUZW1wbGF0ZUNvbXBpbGVyKTtcclxuICAgIHJldHVybiBUZW1wbGF0ZUNvbXBpbGVyO1xyXG59KSgpO1xyXG5leHBvcnRzLlRlbXBsYXRlQ29tcGlsZXIgPSBUZW1wbGF0ZUNvbXBpbGVyO1xyXG52YXIgTm9ybWFsaXplZENvbXBvbmVudFdpdGhWaWV3RGlyZWN0aXZlcyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOb3JtYWxpemVkQ29tcG9uZW50V2l0aFZpZXdEaXJlY3RpdmVzKGNvbXBvbmVudCwgZGlyZWN0aXZlcykge1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gTm9ybWFsaXplZENvbXBvbmVudFdpdGhWaWV3RGlyZWN0aXZlcztcclxufSkoKTtcclxuZXhwb3J0cy5Ob3JtYWxpemVkQ29tcG9uZW50V2l0aFZpZXdEaXJlY3RpdmVzID0gTm9ybWFsaXplZENvbXBvbmVudFdpdGhWaWV3RGlyZWN0aXZlcztcclxuZnVuY3Rpb24gYXNzZXJ0Q29tcG9uZW50KG1ldGEpIHtcclxuICAgIGlmICghbWV0YS5pc0NvbXBvbmVudCkge1xyXG4gICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihcIkNvdWxkIG5vdCBjb21waWxlICdcIiArIG1ldGEudHlwZS5uYW1lICsgXCInIGJlY2F1c2UgaXQgaXMgbm90IGEgY29tcG9uZW50LlwiKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0ZW1wbGF0ZVZhcmlhYmxlTmFtZSh0eXBlKSB7XHJcbiAgICByZXR1cm4gdHlwZS5uYW1lICsgXCJUZW1wbGF0ZVwiO1xyXG59XHJcbmZ1bmN0aW9uIHRlbXBsYXRlTW9kdWxlVXJsKG1vZHVsZVVybCkge1xyXG4gICAgdmFyIHVybFdpdGhvdXRTdWZmaXggPSBtb2R1bGVVcmwuc3Vic3RyaW5nKDAsIG1vZHVsZVVybC5sZW5ndGggLSB1dGlsXzEuTU9EVUxFX1NVRkZJWC5sZW5ndGgpO1xyXG4gICAgcmV0dXJuIHVybFdpdGhvdXRTdWZmaXggKyBcIi50ZW1wbGF0ZVwiICsgdXRpbF8xLk1PRFVMRV9TVUZGSVg7XHJcbn1cclxuZnVuY3Rpb24gYWRkQWxsKHNvdXJjZSwgdGFyZ2V0KSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHRhcmdldC5wdXNoKHNvdXJjZVtpXSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY29kZUdlbkNvbXBvbmVudFRlbXBsYXRlRmFjdG9yeShuZXN0ZWRDb21wVHlwZSkge1xyXG4gICAgcmV0dXJuIFwiXCIgKyBzb3VyY2VfbW9kdWxlXzEubW9kdWxlUmVmKHRlbXBsYXRlTW9kdWxlVXJsKG5lc3RlZENvbXBUeXBlLnR5cGUubW9kdWxlVXJsKSkgKyB0ZW1wbGF0ZVZhcmlhYmxlTmFtZShuZXN0ZWRDb21wVHlwZS50eXBlKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZV9jb21waWxlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGRpcmVjdGl2ZV9tZXRhZGF0YV8xID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVfbWV0YWRhdGEnKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgZXhjZXB0aW9uc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2V4Y2VwdGlvbnMnKTtcclxudmFyIGFzeW5jXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvYXN5bmMnKTtcclxudmFyIHhocl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIveGhyJyk7XHJcbnZhciB1cmxfcmVzb2x2ZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL3VybF9yZXNvbHZlcicpO1xyXG52YXIgc3R5bGVfdXJsX3Jlc29sdmVyXzEgPSByZXF1aXJlKCcuL3N0eWxlX3VybF9yZXNvbHZlcicpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciB2aWV3XzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YS92aWV3Jyk7XHJcbnZhciBodG1sX2FzdF8xID0gcmVxdWlyZSgnLi9odG1sX2FzdCcpO1xyXG52YXIgaHRtbF9wYXJzZXJfMSA9IHJlcXVpcmUoJy4vaHRtbF9wYXJzZXInKTtcclxudmFyIHRlbXBsYXRlX3ByZXBhcnNlcl8xID0gcmVxdWlyZSgnLi90ZW1wbGF0ZV9wcmVwYXJzZXInKTtcclxudmFyIFRlbXBsYXRlTm9ybWFsaXplciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUZW1wbGF0ZU5vcm1hbGl6ZXIoX3hociwgX3VybFJlc29sdmVyLCBfZG9tUGFyc2VyKSB7XHJcbiAgICAgICAgdGhpcy5feGhyID0gX3hocjtcclxuICAgICAgICB0aGlzLl91cmxSZXNvbHZlciA9IF91cmxSZXNvbHZlcjtcclxuICAgICAgICB0aGlzLl9kb21QYXJzZXIgPSBfZG9tUGFyc2VyO1xyXG4gICAgfVxyXG4gICAgVGVtcGxhdGVOb3JtYWxpemVyLnByb3RvdHlwZS5ub3JtYWxpemVUZW1wbGF0ZSA9IGZ1bmN0aW9uIChkaXJlY3RpdmVUeXBlLCB0ZW1wbGF0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGVtcGxhdGUudGVtcGxhdGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhc3luY18xLlByb21pc2VXcmFwcGVyLnJlc29sdmUodGhpcy5ub3JtYWxpemVMb2FkZWRUZW1wbGF0ZShkaXJlY3RpdmVUeXBlLCB0ZW1wbGF0ZSwgdGVtcGxhdGUudGVtcGxhdGUsIGRpcmVjdGl2ZVR5cGUubW9kdWxlVXJsKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGVtcGxhdGUudGVtcGxhdGVVcmwpKSB7XHJcbiAgICAgICAgICAgIHZhciBzb3VyY2VBYnNVcmwgPSB0aGlzLl91cmxSZXNvbHZlci5yZXNvbHZlKGRpcmVjdGl2ZVR5cGUubW9kdWxlVXJsLCB0ZW1wbGF0ZS50ZW1wbGF0ZVVybCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl94aHIuZ2V0KHNvdXJjZUFic1VybClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0ZW1wbGF0ZUNvbnRlbnQpIHsgcmV0dXJuIF90aGlzLm5vcm1hbGl6ZUxvYWRlZFRlbXBsYXRlKGRpcmVjdGl2ZVR5cGUsIHRlbXBsYXRlLCB0ZW1wbGF0ZUNvbnRlbnQsIHNvdXJjZUFic1VybCk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKFwiTm8gdGVtcGxhdGUgc3BlY2lmaWVkIGZvciBjb21wb25lbnQgXCIgKyBkaXJlY3RpdmVUeXBlLm5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBUZW1wbGF0ZU5vcm1hbGl6ZXIucHJvdG90eXBlLm5vcm1hbGl6ZUxvYWRlZFRlbXBsYXRlID0gZnVuY3Rpb24gKGRpcmVjdGl2ZVR5cGUsIHRlbXBsYXRlTWV0YSwgdGVtcGxhdGUsIHRlbXBsYXRlQWJzVXJsKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgZG9tTm9kZXMgPSB0aGlzLl9kb21QYXJzZXIucGFyc2UodGVtcGxhdGUsIGRpcmVjdGl2ZVR5cGUubmFtZSk7XHJcbiAgICAgICAgdmFyIHZpc2l0b3IgPSBuZXcgVGVtcGxhdGVQcmVwYXJzZVZpc2l0b3IoKTtcclxuICAgICAgICBodG1sX2FzdF8xLmh0bWxWaXNpdEFsbCh2aXNpdG9yLCBkb21Ob2Rlcyk7XHJcbiAgICAgICAgdmFyIGFsbFN0eWxlcyA9IHRlbXBsYXRlTWV0YS5zdHlsZXMuY29uY2F0KHZpc2l0b3Iuc3R5bGVzKTtcclxuICAgICAgICB2YXIgYWxsU3R5bGVBYnNVcmxzID0gdmlzaXRvci5zdHlsZVVybHMubWFwKGZ1bmN0aW9uICh1cmwpIHsgcmV0dXJuIF90aGlzLl91cmxSZXNvbHZlci5yZXNvbHZlKHRlbXBsYXRlQWJzVXJsLCB1cmwpOyB9KVxyXG4gICAgICAgICAgICAuY29uY2F0KHRlbXBsYXRlTWV0YS5zdHlsZVVybHMubWFwKGZ1bmN0aW9uICh1cmwpIHsgcmV0dXJuIF90aGlzLl91cmxSZXNvbHZlci5yZXNvbHZlKGRpcmVjdGl2ZVR5cGUubW9kdWxlVXJsLCB1cmwpOyB9KSk7XHJcbiAgICAgICAgYWxsU3R5bGVBYnNVcmxzID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmZpbHRlcihhbGxTdHlsZUFic1VybHMsIHN0eWxlX3VybF9yZXNvbHZlcl8xLmlzU3R5bGVVcmxSZXNvbHZhYmxlKTtcclxuICAgICAgICB2YXIgYWxsUmVzb2x2ZWRTdHlsZXMgPSBhbGxTdHlsZXMubWFwKGZ1bmN0aW9uIChzdHlsZSkge1xyXG4gICAgICAgICAgICB2YXIgc3R5bGVXaXRoSW1wb3J0cyA9IHN0eWxlX3VybF9yZXNvbHZlcl8xLmV4dHJhY3RTdHlsZVVybHMoX3RoaXMuX3VybFJlc29sdmVyLCB0ZW1wbGF0ZUFic1VybCwgc3R5bGUpO1xyXG4gICAgICAgICAgICBzdHlsZVdpdGhJbXBvcnRzLnN0eWxlVXJscy5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZVVybCkgeyByZXR1cm4gYWxsU3R5bGVBYnNVcmxzLnB1c2goc3R5bGVVcmwpOyB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0eWxlV2l0aEltcG9ydHMuc3R5bGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIGVuY2Fwc3VsYXRpb24gPSB0ZW1wbGF0ZU1ldGEuZW5jYXBzdWxhdGlvbjtcclxuICAgICAgICBpZiAoZW5jYXBzdWxhdGlvbiA9PT0gdmlld18xLlZpZXdFbmNhcHN1bGF0aW9uLkVtdWxhdGVkICYmIGFsbFJlc29sdmVkU3R5bGVzLmxlbmd0aCA9PT0gMCAmJlxyXG4gICAgICAgICAgICBhbGxTdHlsZUFic1VybHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGVuY2Fwc3VsYXRpb24gPSB2aWV3XzEuVmlld0VuY2Fwc3VsYXRpb24uTm9uZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBkaXJlY3RpdmVfbWV0YWRhdGFfMS5Db21waWxlVGVtcGxhdGVNZXRhZGF0YSh7XHJcbiAgICAgICAgICAgIGVuY2Fwc3VsYXRpb246IGVuY2Fwc3VsYXRpb24sXHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZSxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IHRlbXBsYXRlQWJzVXJsLFxyXG4gICAgICAgICAgICBzdHlsZXM6IGFsbFJlc29sdmVkU3R5bGVzLFxyXG4gICAgICAgICAgICBzdHlsZVVybHM6IGFsbFN0eWxlQWJzVXJscyxcclxuICAgICAgICAgICAgbmdDb250ZW50U2VsZWN0b3JzOiB2aXNpdG9yLm5nQ29udGVudFNlbGVjdG9yc1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlTm9ybWFsaXplciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFt4aHJfMS5YSFIsIHVybF9yZXNvbHZlcl8xLlVybFJlc29sdmVyLCBodG1sX3BhcnNlcl8xLkh0bWxQYXJzZXJdKVxyXG4gICAgXSwgVGVtcGxhdGVOb3JtYWxpemVyKTtcclxuICAgIHJldHVybiBUZW1wbGF0ZU5vcm1hbGl6ZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuVGVtcGxhdGVOb3JtYWxpemVyID0gVGVtcGxhdGVOb3JtYWxpemVyO1xyXG52YXIgVGVtcGxhdGVQcmVwYXJzZVZpc2l0b3IgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGVtcGxhdGVQcmVwYXJzZVZpc2l0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5uZ0NvbnRlbnRTZWxlY3RvcnMgPSBbXTtcclxuICAgICAgICB0aGlzLnN0eWxlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc3R5bGVVcmxzID0gW107XHJcbiAgICAgICAgdGhpcy5uZ05vbkJpbmRhYmxlU3RhY2tDb3VudCA9IDA7XHJcbiAgICB9XHJcbiAgICBUZW1wbGF0ZVByZXBhcnNlVmlzaXRvci5wcm90b3R5cGUudmlzaXRFbGVtZW50ID0gZnVuY3Rpb24gKGFzdCwgY29udGV4dCkge1xyXG4gICAgICAgIHZhciBwcmVwYXJzZWRFbGVtZW50ID0gdGVtcGxhdGVfcHJlcGFyc2VyXzEucHJlcGFyc2VFbGVtZW50KGFzdCk7XHJcbiAgICAgICAgc3dpdGNoIChwcmVwYXJzZWRFbGVtZW50LnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSB0ZW1wbGF0ZV9wcmVwYXJzZXJfMS5QcmVwYXJzZWRFbGVtZW50VHlwZS5OR19DT05URU5UOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmdOb25CaW5kYWJsZVN0YWNrQ291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5nQ29udGVudFNlbGVjdG9ycy5wdXNoKHByZXBhcnNlZEVsZW1lbnQuc2VsZWN0QXR0cik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSB0ZW1wbGF0ZV9wcmVwYXJzZXJfMS5QcmVwYXJzZWRFbGVtZW50VHlwZS5TVFlMRTpcclxuICAgICAgICAgICAgICAgIHZhciB0ZXh0Q29udGVudCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgYXN0LmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgaHRtbF9hc3RfMS5IdG1sVGV4dEFzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Q29udGVudCArPSBjaGlsZC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGVzLnB1c2godGV4dENvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgdGVtcGxhdGVfcHJlcGFyc2VyXzEuUHJlcGFyc2VkRWxlbWVudFR5cGUuU1RZTEVTSEVFVDpcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGVVcmxzLnB1c2gocHJlcGFyc2VkRWxlbWVudC5ocmVmQXR0cik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXBhcnNlZEVsZW1lbnQubm9uQmluZGFibGUpIHtcclxuICAgICAgICAgICAgdGhpcy5uZ05vbkJpbmRhYmxlU3RhY2tDb3VudCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBodG1sX2FzdF8xLmh0bWxWaXNpdEFsbCh0aGlzLCBhc3QuY2hpbGRyZW4pO1xyXG4gICAgICAgIGlmIChwcmVwYXJzZWRFbGVtZW50Lm5vbkJpbmRhYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubmdOb25CaW5kYWJsZVN0YWNrQ291bnQtLTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGVQcmVwYXJzZVZpc2l0b3IucHJvdG90eXBlLnZpc2l0QXR0ciA9IGZ1bmN0aW9uIChhc3QsIGNvbnRleHQpIHsgcmV0dXJuIG51bGw7IH07XHJcbiAgICBUZW1wbGF0ZVByZXBhcnNlVmlzaXRvci5wcm90b3R5cGUudmlzaXRUZXh0ID0gZnVuY3Rpb24gKGFzdCwgY29udGV4dCkgeyByZXR1cm4gbnVsbDsgfTtcclxuICAgIHJldHVybiBUZW1wbGF0ZVByZXBhcnNlVmlzaXRvcjtcclxufSkoKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVtcGxhdGVfbm9ybWFsaXplci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgY2hhbmdlX2RldGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9jaGFuZ2VfZGV0ZWN0aW9uJyk7XHJcbnZhciBodG1sX3BhcnNlcl8xID0gcmVxdWlyZSgnLi9odG1sX3BhcnNlcicpO1xyXG52YXIgdGVtcGxhdGVfYXN0XzEgPSByZXF1aXJlKCcuL3RlbXBsYXRlX2FzdCcpO1xyXG52YXIgc2VsZWN0b3JfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL3NlbGVjdG9yJyk7XHJcbnZhciBlbGVtZW50X3NjaGVtYV9yZWdpc3RyeV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIvc2NoZW1hL2VsZW1lbnRfc2NoZW1hX3JlZ2lzdHJ5Jyk7XHJcbnZhciB0ZW1wbGF0ZV9wcmVwYXJzZXJfMSA9IHJlcXVpcmUoJy4vdGVtcGxhdGVfcHJlcGFyc2VyJyk7XHJcbnZhciBzdHlsZV91cmxfcmVzb2x2ZXJfMSA9IHJlcXVpcmUoJy4vc3R5bGVfdXJsX3Jlc29sdmVyJyk7XHJcbnZhciBodG1sX2FzdF8xID0gcmVxdWlyZSgnLi9odG1sX2FzdCcpO1xyXG52YXIgdXRpbF8xID0gcmVxdWlyZSgnLi91dGlsJyk7XHJcbi8vIEdyb3VwIDEgPSBcImJpbmQtXCJcclxuLy8gR3JvdXAgMiA9IFwidmFyLVwiIG9yIFwiI1wiXHJcbi8vIEdyb3VwIDMgPSBcIm9uLVwiXHJcbi8vIEdyb3VwIDQgPSBcImJpbmRvbi1cIlxyXG4vLyBHcm91cCA1ID0gdGhlIGlkZW50aWZpZXIgYWZ0ZXIgXCJiaW5kLVwiLCBcInZhci0vI1wiLCBvciBcIm9uLVwiXHJcbi8vIEdyb3VwIDYgPSBpZGVuaXRpZmVyIGluc2lkZSBbKCldXHJcbi8vIEdyb3VwIDcgPSBpZGVuaXRpZmVyIGluc2lkZSBbXVxyXG4vLyBHcm91cCA4ID0gaWRlbnRpZmllciBpbnNpZGUgKClcclxudmFyIEJJTkRfTkFNRV9SRUdFWFAgPSAvXig/Oig/Oig/OihiaW5kLSl8KHZhci18Iyl8KG9uLSl8KGJpbmRvbi0pKSguKykpfFxcW1xcKChbXlxcKV0rKVxcKVxcXXxcXFsoW15cXF1dKylcXF18XFwoKFteXFwpXSspXFwpKSQvZztcclxudmFyIFRFTVBMQVRFX0VMRU1FTlQgPSAndGVtcGxhdGUnO1xyXG52YXIgVEVNUExBVEVfQVRUUiA9ICd0ZW1wbGF0ZSc7XHJcbnZhciBURU1QTEFURV9BVFRSX1BSRUZJWCA9ICcqJztcclxudmFyIENMQVNTX0FUVFIgPSAnY2xhc3MnO1xyXG52YXIgUFJPUEVSVFlfUEFSVFNfU0VQQVJBVE9SID0gbmV3IFJlZ0V4cCgnXFxcXC4nKTtcclxudmFyIEFUVFJJQlVURV9QUkVGSVggPSAnYXR0cic7XHJcbnZhciBDTEFTU19QUkVGSVggPSAnY2xhc3MnO1xyXG52YXIgU1RZTEVfUFJFRklYID0gJ3N0eWxlJztcclxudmFyIFRFWFRfQ1NTX1NFTEVDVE9SID0gc2VsZWN0b3JfMS5Dc3NTZWxlY3Rvci5wYXJzZSgnKicpWzBdO1xyXG52YXIgVGVtcGxhdGVQYXJzZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGVtcGxhdGVQYXJzZXIoX2V4cHJQYXJzZXIsIF9zY2hlbWFSZWdpc3RyeSwgX2h0bWxQYXJzZXIpIHtcclxuICAgICAgICB0aGlzLl9leHByUGFyc2VyID0gX2V4cHJQYXJzZXI7XHJcbiAgICAgICAgdGhpcy5fc2NoZW1hUmVnaXN0cnkgPSBfc2NoZW1hUmVnaXN0cnk7XHJcbiAgICAgICAgdGhpcy5faHRtbFBhcnNlciA9IF9odG1sUGFyc2VyO1xyXG4gICAgfVxyXG4gICAgVGVtcGxhdGVQYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKHRlbXBsYXRlLCBkaXJlY3RpdmVzLCBzb3VyY2VJbmZvKSB7XHJcbiAgICAgICAgdmFyIHBhcnNlVmlzaXRvciA9IG5ldyBUZW1wbGF0ZVBhcnNlVmlzaXRvcihkaXJlY3RpdmVzLCB0aGlzLl9leHByUGFyc2VyLCB0aGlzLl9zY2hlbWFSZWdpc3RyeSk7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGh0bWxfYXN0XzEuaHRtbFZpc2l0QWxsKHBhcnNlVmlzaXRvciwgdGhpcy5faHRtbFBhcnNlci5wYXJzZSh0ZW1wbGF0ZSwgc291cmNlSW5mbyksIEVNUFRZX0NPTVBPTkVOVCk7XHJcbiAgICAgICAgaWYgKHBhcnNlVmlzaXRvci5lcnJvcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgZXJyb3JTdHJpbmcgPSBwYXJzZVZpc2l0b3IuZXJyb3JzLmpvaW4oJ1xcbicpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oXCJUZW1wbGF0ZSBwYXJzZSBlcnJvcnM6XFxuXCIgKyBlcnJvclN0cmluZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGVQYXJzZXIgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbY2hhbmdlX2RldGVjdGlvbl8xLlBhcnNlciwgZWxlbWVudF9zY2hlbWFfcmVnaXN0cnlfMS5FbGVtZW50U2NoZW1hUmVnaXN0cnksIGh0bWxfcGFyc2VyXzEuSHRtbFBhcnNlcl0pXHJcbiAgICBdLCBUZW1wbGF0ZVBhcnNlcik7XHJcbiAgICByZXR1cm4gVGVtcGxhdGVQYXJzZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuVGVtcGxhdGVQYXJzZXIgPSBUZW1wbGF0ZVBhcnNlcjtcclxudmFyIFRlbXBsYXRlUGFyc2VWaXNpdG9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRlbXBsYXRlUGFyc2VWaXNpdG9yKGRpcmVjdGl2ZXMsIF9leHByUGFyc2VyLCBfc2NoZW1hUmVnaXN0cnkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX2V4cHJQYXJzZXIgPSBfZXhwclBhcnNlcjtcclxuICAgICAgICB0aGlzLl9zY2hlbWFSZWdpc3RyeSA9IF9zY2hlbWFSZWdpc3RyeTtcclxuICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aXZlc0luZGV4ID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMubmdDb250ZW50Q291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0b3JNYXRjaGVyID0gbmV3IHNlbGVjdG9yXzEuU2VsZWN0b3JNYXRjaGVyKCk7XHJcbiAgICAgICAgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmZvckVhY2hXaXRoSW5kZXgoZGlyZWN0aXZlcywgZnVuY3Rpb24gKGRpcmVjdGl2ZSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gc2VsZWN0b3JfMS5Dc3NTZWxlY3Rvci5wYXJzZShkaXJlY3RpdmUuc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICBfdGhpcy5zZWxlY3Rvck1hdGNoZXIuYWRkU2VsZWN0YWJsZXMoc2VsZWN0b3IsIGRpcmVjdGl2ZSk7XHJcbiAgICAgICAgICAgIF90aGlzLmRpcmVjdGl2ZXNJbmRleC5zZXQoZGlyZWN0aXZlLCBpbmRleCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBUZW1wbGF0ZVBhcnNlVmlzaXRvci5wcm90b3R5cGUuX3JlcG9ydEVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHsgdGhpcy5lcnJvcnMucHVzaChtZXNzYWdlKTsgfTtcclxuICAgIFRlbXBsYXRlUGFyc2VWaXNpdG9yLnByb3RvdHlwZS5fcGFyc2VJbnRlcnBvbGF0aW9uID0gZnVuY3Rpb24gKHZhbHVlLCBzb3VyY2VJbmZvKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V4cHJQYXJzZXIucGFyc2VJbnRlcnBvbGF0aW9uKHZhbHVlLCBzb3VyY2VJbmZvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVwb3J0RXJyb3IoXCJcIiArIGUpOyAvLyBzb3VyY2VJbmZvIGlzIGFscmVhZHkgY29udGFpbmVkIGluIHRoZSBBU1RcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V4cHJQYXJzZXIud3JhcExpdGVyYWxQcmltaXRpdmUoJ0VSUk9SJywgc291cmNlSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlUGFyc2VWaXNpdG9yLnByb3RvdHlwZS5fcGFyc2VBY3Rpb24gPSBmdW5jdGlvbiAodmFsdWUsIHNvdXJjZUluZm8pIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZXhwclBhcnNlci5wYXJzZUFjdGlvbih2YWx1ZSwgc291cmNlSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcG9ydEVycm9yKFwiXCIgKyBlKTsgLy8gc291cmNlSW5mbyBpcyBhbHJlYWR5IGNvbnRhaW5lZCBpbiB0aGUgQVNUXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9leHByUGFyc2VyLndyYXBMaXRlcmFsUHJpbWl0aXZlKCdFUlJPUicsIHNvdXJjZUluZm8pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBUZW1wbGF0ZVBhcnNlVmlzaXRvci5wcm90b3R5cGUuX3BhcnNlQmluZGluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgc291cmNlSW5mbykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9leHByUGFyc2VyLnBhcnNlQmluZGluZyh2YWx1ZSwgc291cmNlSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcG9ydEVycm9yKFwiXCIgKyBlKTsgLy8gc291cmNlSW5mbyBpcyBhbHJlYWR5IGNvbnRhaW5lZCBpbiB0aGUgQVNUXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9leHByUGFyc2VyLndyYXBMaXRlcmFsUHJpbWl0aXZlKCdFUlJPUicsIHNvdXJjZUluZm8pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBUZW1wbGF0ZVBhcnNlVmlzaXRvci5wcm90b3R5cGUuX3BhcnNlVGVtcGxhdGVCaW5kaW5ncyA9IGZ1bmN0aW9uICh2YWx1ZSwgc291cmNlSW5mbykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9leHByUGFyc2VyLnBhcnNlVGVtcGxhdGVCaW5kaW5ncyh2YWx1ZSwgc291cmNlSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcG9ydEVycm9yKFwiXCIgKyBlKTsgLy8gc291cmNlSW5mbyBpcyBhbHJlYWR5IGNvbnRhaW5lZCBpbiB0aGUgQVNUXHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGVQYXJzZVZpc2l0b3IucHJvdG90eXBlLnZpc2l0VGV4dCA9IGZ1bmN0aW9uIChhc3QsIGNvbXBvbmVudCkge1xyXG4gICAgICAgIHZhciBuZ0NvbnRlbnRJbmRleCA9IGNvbXBvbmVudC5maW5kTmdDb250ZW50SW5kZXgoVEVYVF9DU1NfU0VMRUNUT1IpO1xyXG4gICAgICAgIHZhciBleHByID0gdGhpcy5fcGFyc2VJbnRlcnBvbGF0aW9uKGFzdC52YWx1ZSwgYXN0LnNvdXJjZUluZm8pO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGV4cHIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgdGVtcGxhdGVfYXN0XzEuQm91bmRUZXh0QXN0KGV4cHIsIG5nQ29udGVudEluZGV4LCBhc3Quc291cmNlSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IHRlbXBsYXRlX2FzdF8xLlRleHRBc3QoYXN0LnZhbHVlLCBuZ0NvbnRlbnRJbmRleCwgYXN0LnNvdXJjZUluZm8pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBUZW1wbGF0ZVBhcnNlVmlzaXRvci5wcm90b3R5cGUudmlzaXRBdHRyID0gZnVuY3Rpb24gKGFzdCwgY29udGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyB0ZW1wbGF0ZV9hc3RfMS5BdHRyQXN0KGFzdC5uYW1lLCBhc3QudmFsdWUsIGFzdC5zb3VyY2VJbmZvKTtcclxuICAgIH07XHJcbiAgICBUZW1wbGF0ZVBhcnNlVmlzaXRvci5wcm90b3R5cGUudmlzaXRFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbXBvbmVudCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5uYW1lO1xyXG4gICAgICAgIHZhciBwcmVwYXJzZWRFbGVtZW50ID0gdGVtcGxhdGVfcHJlcGFyc2VyXzEucHJlcGFyc2VFbGVtZW50KGVsZW1lbnQpO1xyXG4gICAgICAgIGlmIChwcmVwYXJzZWRFbGVtZW50LnR5cGUgPT09IHRlbXBsYXRlX3ByZXBhcnNlcl8xLlByZXBhcnNlZEVsZW1lbnRUeXBlLlNDUklQVCB8fFxyXG4gICAgICAgICAgICBwcmVwYXJzZWRFbGVtZW50LnR5cGUgPT09IHRlbXBsYXRlX3ByZXBhcnNlcl8xLlByZXBhcnNlZEVsZW1lbnRUeXBlLlNUWUxFKSB7XHJcbiAgICAgICAgICAgIC8vIFNraXBwaW5nIDxzY3JpcHQ+IGZvciBzZWN1cml0eSByZWFzb25zXHJcbiAgICAgICAgICAgIC8vIFNraXBwaW5nIDxzdHlsZT4gYXMgd2UgYWxyZWFkeSBwcm9jZXNzZWQgdGhlbVxyXG4gICAgICAgICAgICAvLyBpbiB0aGUgU3R5bGVDb21waWxlclxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXBhcnNlZEVsZW1lbnQudHlwZSA9PT0gdGVtcGxhdGVfcHJlcGFyc2VyXzEuUHJlcGFyc2VkRWxlbWVudFR5cGUuU1RZTEVTSEVFVCAmJlxyXG4gICAgICAgICAgICBzdHlsZV91cmxfcmVzb2x2ZXJfMS5pc1N0eWxlVXJsUmVzb2x2YWJsZShwcmVwYXJzZWRFbGVtZW50LmhyZWZBdHRyKSkge1xyXG4gICAgICAgICAgICAvLyBTa2lwcGluZyBzdHlsZXNoZWV0cyB3aXRoIGVpdGhlciByZWxhdGl2ZSB1cmxzIG9yIHBhY2thZ2Ugc2NoZW1lIGFzIHdlIGFscmVhZHkgcHJvY2Vzc2VkXHJcbiAgICAgICAgICAgIC8vIHRoZW1cclxuICAgICAgICAgICAgLy8gaW4gdGhlIFN0eWxlQ29tcGlsZXJcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtYXRjaGFibGVBdHRycyA9IFtdO1xyXG4gICAgICAgIHZhciBlbGVtZW50T3JEaXJlY3RpdmVQcm9wcyA9IFtdO1xyXG4gICAgICAgIHZhciB2YXJzID0gW107XHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IFtdO1xyXG4gICAgICAgIHZhciB0ZW1wbGF0ZUVsZW1lbnRPckRpcmVjdGl2ZVByb3BzID0gW107XHJcbiAgICAgICAgdmFyIHRlbXBsYXRlVmFycyA9IFtdO1xyXG4gICAgICAgIHZhciB0ZW1wbGF0ZU1hdGNoYWJsZUF0dHJzID0gW107XHJcbiAgICAgICAgdmFyIGhhc0lubGluZVRlbXBsYXRlcyA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBhdHRycyA9IFtdO1xyXG4gICAgICAgIGVsZW1lbnQuYXR0cnMuZm9yRWFjaChmdW5jdGlvbiAoYXR0cikge1xyXG4gICAgICAgICAgICBtYXRjaGFibGVBdHRycy5wdXNoKFthdHRyLm5hbWUsIGF0dHIudmFsdWVdKTtcclxuICAgICAgICAgICAgdmFyIGhhc0JpbmRpbmcgPSBfdGhpcy5fcGFyc2VBdHRyKGF0dHIsIG1hdGNoYWJsZUF0dHJzLCBlbGVtZW50T3JEaXJlY3RpdmVQcm9wcywgZXZlbnRzLCB2YXJzKTtcclxuICAgICAgICAgICAgdmFyIGhhc1RlbXBsYXRlQmluZGluZyA9IF90aGlzLl9wYXJzZUlubGluZVRlbXBsYXRlQmluZGluZyhhdHRyLCB0ZW1wbGF0ZU1hdGNoYWJsZUF0dHJzLCB0ZW1wbGF0ZUVsZW1lbnRPckRpcmVjdGl2ZVByb3BzLCB0ZW1wbGF0ZVZhcnMpO1xyXG4gICAgICAgICAgICBpZiAoIWhhc0JpbmRpbmcgJiYgIWhhc1RlbXBsYXRlQmluZGluZykge1xyXG4gICAgICAgICAgICAgICAgLy8gZG9uJ3QgaW5jbHVkZSB0aGUgYmluZGluZ3MgYXMgYXR0cmlidXRlcyBhcyB3ZWxsIGluIHRoZSBBU1RcclxuICAgICAgICAgICAgICAgIGF0dHJzLnB1c2goX3RoaXMudmlzaXRBdHRyKGF0dHIsIG51bGwpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaGFzVGVtcGxhdGVCaW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBoYXNJbmxpbmVUZW1wbGF0ZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIGlzVGVtcGxhdGVFbGVtZW50ID0gbm9kZU5hbWUgPT0gVEVNUExBVEVfRUxFTUVOVDtcclxuICAgICAgICB2YXIgZWxlbWVudENzc1NlbGVjdG9yID0gY3JlYXRlRWxlbWVudENzc1NlbGVjdG9yKG5vZGVOYW1lLCBtYXRjaGFibGVBdHRycyk7XHJcbiAgICAgICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLl9jcmVhdGVEaXJlY3RpdmVBc3RzKGVsZW1lbnQubmFtZSwgdGhpcy5fcGFyc2VEaXJlY3RpdmVzKHRoaXMuc2VsZWN0b3JNYXRjaGVyLCBlbGVtZW50Q3NzU2VsZWN0b3IpLCBlbGVtZW50T3JEaXJlY3RpdmVQcm9wcywgaXNUZW1wbGF0ZUVsZW1lbnQgPyBbXSA6IHZhcnMsIGVsZW1lbnQuc291cmNlSW5mbyk7XHJcbiAgICAgICAgdmFyIGVsZW1lbnRQcm9wcyA9IHRoaXMuX2NyZWF0ZUVsZW1lbnRQcm9wZXJ0eUFzdHMoZWxlbWVudC5uYW1lLCBlbGVtZW50T3JEaXJlY3RpdmVQcm9wcywgZGlyZWN0aXZlcyk7XHJcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gaHRtbF9hc3RfMS5odG1sVmlzaXRBbGwocHJlcGFyc2VkRWxlbWVudC5ub25CaW5kYWJsZSA/IE5PTl9CSU5EQUJMRV9WSVNJVE9SIDogdGhpcywgZWxlbWVudC5jaGlsZHJlbiwgQ29tcG9uZW50LmNyZWF0ZShkaXJlY3RpdmVzKSk7XHJcbiAgICAgICAgdmFyIGVsZW1lbnROZ0NvbnRlbnRJbmRleCA9IGhhc0lubGluZVRlbXBsYXRlcyA/IG51bGwgOiBjb21wb25lbnQuZmluZE5nQ29udGVudEluZGV4KGVsZW1lbnRDc3NTZWxlY3Rvcik7XHJcbiAgICAgICAgdmFyIHBhcnNlZEVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKHByZXBhcnNlZEVsZW1lbnQudHlwZSA9PT0gdGVtcGxhdGVfcHJlcGFyc2VyXzEuUHJlcGFyc2VkRWxlbWVudFR5cGUuTkdfQ09OVEVOVCkge1xyXG4gICAgICAgICAgICBwYXJzZWRFbGVtZW50ID1cclxuICAgICAgICAgICAgICAgIG5ldyB0ZW1wbGF0ZV9hc3RfMS5OZ0NvbnRlbnRBc3QodGhpcy5uZ0NvbnRlbnRDb3VudCsrLCBlbGVtZW50TmdDb250ZW50SW5kZXgsIGVsZW1lbnQuc291cmNlSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzVGVtcGxhdGVFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Fzc2VydEFsbEV2ZW50c1B1Ymxpc2hlZEJ5RGlyZWN0aXZlcyhkaXJlY3RpdmVzLCBldmVudHMsIGVsZW1lbnQuc291cmNlSW5mbyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2Fzc2VydE5vQ29tcG9uZW50c05vckVsZW1lbnRCaW5kaW5nc09uVGVtcGxhdGUoZGlyZWN0aXZlcywgZWxlbWVudFByb3BzLCBlbGVtZW50LnNvdXJjZUluZm8pO1xyXG4gICAgICAgICAgICBwYXJzZWRFbGVtZW50ID0gbmV3IHRlbXBsYXRlX2FzdF8xLkVtYmVkZGVkVGVtcGxhdGVBc3QoYXR0cnMsIHZhcnMsIGRpcmVjdGl2ZXMsIGNoaWxkcmVuLCBlbGVtZW50TmdDb250ZW50SW5kZXgsIGVsZW1lbnQuc291cmNlSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9hc3NlcnRPbmx5T25lQ29tcG9uZW50KGRpcmVjdGl2ZXMsIGVsZW1lbnQuc291cmNlSW5mbyk7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50RXhwb3J0QXNWYXJzID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmZpbHRlcih2YXJzLCBmdW5jdGlvbiAodmFyQXN0KSB7IHJldHVybiB2YXJBc3QudmFsdWUubGVuZ3RoID09PSAwOyB9KTtcclxuICAgICAgICAgICAgcGFyc2VkRWxlbWVudCA9XHJcbiAgICAgICAgICAgICAgICBuZXcgdGVtcGxhdGVfYXN0XzEuRWxlbWVudEFzdChub2RlTmFtZSwgYXR0cnMsIGVsZW1lbnRQcm9wcywgZXZlbnRzLCBlbGVtZW50RXhwb3J0QXNWYXJzLCBkaXJlY3RpdmVzLCBjaGlsZHJlbiwgZWxlbWVudE5nQ29udGVudEluZGV4LCBlbGVtZW50LnNvdXJjZUluZm8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaGFzSW5saW5lVGVtcGxhdGVzKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZUNzc1NlbGVjdG9yID0gY3JlYXRlRWxlbWVudENzc1NlbGVjdG9yKFRFTVBMQVRFX0VMRU1FTlQsIHRlbXBsYXRlTWF0Y2hhYmxlQXR0cnMpO1xyXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVEaXJlY3RpdmVzID0gdGhpcy5fY3JlYXRlRGlyZWN0aXZlQXN0cyhlbGVtZW50Lm5hbWUsIHRoaXMuX3BhcnNlRGlyZWN0aXZlcyh0aGlzLnNlbGVjdG9yTWF0Y2hlciwgdGVtcGxhdGVDc3NTZWxlY3RvciksIHRlbXBsYXRlRWxlbWVudE9yRGlyZWN0aXZlUHJvcHMsIFtdLCBlbGVtZW50LnNvdXJjZUluZm8pO1xyXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVFbGVtZW50UHJvcHMgPSB0aGlzLl9jcmVhdGVFbGVtZW50UHJvcGVydHlBc3RzKGVsZW1lbnQubmFtZSwgdGVtcGxhdGVFbGVtZW50T3JEaXJlY3RpdmVQcm9wcywgdGVtcGxhdGVEaXJlY3RpdmVzKTtcclxuICAgICAgICAgICAgdGhpcy5fYXNzZXJ0Tm9Db21wb25lbnRzTm9yRWxlbWVudEJpbmRpbmdzT25UZW1wbGF0ZSh0ZW1wbGF0ZURpcmVjdGl2ZXMsIHRlbXBsYXRlRWxlbWVudFByb3BzLCBlbGVtZW50LnNvdXJjZUluZm8pO1xyXG4gICAgICAgICAgICBwYXJzZWRFbGVtZW50ID0gbmV3IHRlbXBsYXRlX2FzdF8xLkVtYmVkZGVkVGVtcGxhdGVBc3QoW10sIHRlbXBsYXRlVmFycywgdGVtcGxhdGVEaXJlY3RpdmVzLCBbcGFyc2VkRWxlbWVudF0sIGNvbXBvbmVudC5maW5kTmdDb250ZW50SW5kZXgodGVtcGxhdGVDc3NTZWxlY3RvciksIGVsZW1lbnQuc291cmNlSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXJzZWRFbGVtZW50O1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlUGFyc2VWaXNpdG9yLnByb3RvdHlwZS5fcGFyc2VJbmxpbmVUZW1wbGF0ZUJpbmRpbmcgPSBmdW5jdGlvbiAoYXR0ciwgdGFyZ2V0TWF0Y2hhYmxlQXR0cnMsIHRhcmdldFByb3BzLCB0YXJnZXRWYXJzKSB7XHJcbiAgICAgICAgdmFyIHRlbXBsYXRlQmluZGluZ3NTb3VyY2UgPSBudWxsO1xyXG4gICAgICAgIGlmIChhdHRyLm5hbWUgPT0gVEVNUExBVEVfQVRUUikge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZUJpbmRpbmdzU291cmNlID0gYXR0ci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGFuZ18xLlN0cmluZ1dyYXBwZXIuc3RhcnRzV2l0aChhdHRyLm5hbWUsIFRFTVBMQVRFX0FUVFJfUFJFRklYKSkge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gbGFuZ18xLlN0cmluZ1dyYXBwZXIuc3Vic3RyaW5nKGF0dHIubmFtZSwgVEVNUExBVEVfQVRUUl9QUkVGSVgubGVuZ3RoKTsgLy8gcmVtb3ZlIHRoZSBzdGFyXHJcbiAgICAgICAgICAgIHRlbXBsYXRlQmluZGluZ3NTb3VyY2UgPSAoYXR0ci52YWx1ZS5sZW5ndGggPT0gMCkgPyBrZXkgOiBrZXkgKyAnICcgKyBhdHRyLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0ZW1wbGF0ZUJpbmRpbmdzU291cmNlKSkge1xyXG4gICAgICAgICAgICB2YXIgYmluZGluZ3MgPSB0aGlzLl9wYXJzZVRlbXBsYXRlQmluZGluZ3ModGVtcGxhdGVCaW5kaW5nc1NvdXJjZSwgYXR0ci5zb3VyY2VJbmZvKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiaW5kaW5ncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJpbmRpbmcgPSBiaW5kaW5nc1tpXTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXNoQ2FzZUtleSA9IHV0aWxfMS5jYW1lbENhc2VUb0Rhc2hDYXNlKGJpbmRpbmcua2V5KTtcclxuICAgICAgICAgICAgICAgIGlmIChiaW5kaW5nLmtleUlzVmFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0VmFycy5wdXNoKG5ldyB0ZW1wbGF0ZV9hc3RfMS5WYXJpYWJsZUFzdCh1dGlsXzEuZGFzaENhc2VUb0NhbWVsQ2FzZShiaW5kaW5nLmtleSksIGJpbmRpbmcubmFtZSwgYXR0ci5zb3VyY2VJbmZvKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TWF0Y2hhYmxlQXR0cnMucHVzaChbZGFzaENhc2VLZXksIGJpbmRpbmcubmFtZV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobGFuZ18xLmlzUHJlc2VudChiaW5kaW5nLmV4cHJlc3Npb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VQcm9wZXJ0eUFzdChkYXNoQ2FzZUtleSwgYmluZGluZy5leHByZXNzaW9uLCBhdHRyLnNvdXJjZUluZm8sIHRhcmdldE1hdGNoYWJsZUF0dHJzLCB0YXJnZXRQcm9wcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRNYXRjaGFibGVBdHRycy5wdXNoKFtkYXNoQ2FzZUtleSwgJyddKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlUGFyc2VWaXNpdG9yLnByb3RvdHlwZS5fcGFyc2VBdHRyID0gZnVuY3Rpb24gKGF0dHIsIHRhcmdldE1hdGNoYWJsZUF0dHJzLCB0YXJnZXRQcm9wcywgdGFyZ2V0RXZlbnRzLCB0YXJnZXRWYXJzKSB7XHJcbiAgICAgICAgdmFyIGF0dHJOYW1lID0gdGhpcy5fbm9ybWFsaXplQXR0cmlidXRlTmFtZShhdHRyLm5hbWUpO1xyXG4gICAgICAgIHZhciBhdHRyVmFsdWUgPSBhdHRyLnZhbHVlO1xyXG4gICAgICAgIHZhciBiaW5kUGFydHMgPSBsYW5nXzEuUmVnRXhwV3JhcHBlci5maXJzdE1hdGNoKEJJTkRfTkFNRV9SRUdFWFAsIGF0dHJOYW1lKTtcclxuICAgICAgICB2YXIgaGFzQmluZGluZyA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGJpbmRQYXJ0cykpIHtcclxuICAgICAgICAgICAgaGFzQmluZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGJpbmRQYXJ0c1sxXSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhcnNlUHJvcGVydHkoYmluZFBhcnRzWzVdLCBhdHRyVmFsdWUsIGF0dHIuc291cmNlSW5mbywgdGFyZ2V0TWF0Y2hhYmxlQXR0cnMsIHRhcmdldFByb3BzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChsYW5nXzEuaXNQcmVzZW50KGJpbmRQYXJ0c1syXSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpZGVudGlmaWVyID0gYmluZFBhcnRzWzVdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VWYXJpYWJsZShpZGVudGlmaWVyLCBhdHRyVmFsdWUsIGF0dHIuc291cmNlSW5mbywgdGFyZ2V0TWF0Y2hhYmxlQXR0cnMsIHRhcmdldFZhcnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGxhbmdfMS5pc1ByZXNlbnQoYmluZFBhcnRzWzNdKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VFdmVudChiaW5kUGFydHNbNV0sIGF0dHJWYWx1ZSwgYXR0ci5zb3VyY2VJbmZvLCB0YXJnZXRNYXRjaGFibGVBdHRycywgdGFyZ2V0RXZlbnRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChsYW5nXzEuaXNQcmVzZW50KGJpbmRQYXJ0c1s0XSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhcnNlUHJvcGVydHkoYmluZFBhcnRzWzVdLCBhdHRyVmFsdWUsIGF0dHIuc291cmNlSW5mbywgdGFyZ2V0TWF0Y2hhYmxlQXR0cnMsIHRhcmdldFByb3BzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhcnNlQXNzaWdubWVudEV2ZW50KGJpbmRQYXJ0c1s1XSwgYXR0clZhbHVlLCBhdHRyLnNvdXJjZUluZm8sIHRhcmdldE1hdGNoYWJsZUF0dHJzLCB0YXJnZXRFdmVudHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGxhbmdfMS5pc1ByZXNlbnQoYmluZFBhcnRzWzZdKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VQcm9wZXJ0eShiaW5kUGFydHNbNl0sIGF0dHJWYWx1ZSwgYXR0ci5zb3VyY2VJbmZvLCB0YXJnZXRNYXRjaGFibGVBdHRycywgdGFyZ2V0UHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VBc3NpZ25tZW50RXZlbnQoYmluZFBhcnRzWzZdLCBhdHRyVmFsdWUsIGF0dHIuc291cmNlSW5mbywgdGFyZ2V0TWF0Y2hhYmxlQXR0cnMsIHRhcmdldEV2ZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobGFuZ18xLmlzUHJlc2VudChiaW5kUGFydHNbN10pKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJzZVByb3BlcnR5KGJpbmRQYXJ0c1s3XSwgYXR0clZhbHVlLCBhdHRyLnNvdXJjZUluZm8sIHRhcmdldE1hdGNoYWJsZUF0dHJzLCB0YXJnZXRQcm9wcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobGFuZ18xLmlzUHJlc2VudChiaW5kUGFydHNbOF0pKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJzZUV2ZW50KGJpbmRQYXJ0c1s4XSwgYXR0clZhbHVlLCBhdHRyLnNvdXJjZUluZm8sIHRhcmdldE1hdGNoYWJsZUF0dHJzLCB0YXJnZXRFdmVudHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBoYXNCaW5kaW5nID0gdGhpcy5fcGFyc2VQcm9wZXJ0eUludGVycG9sYXRpb24oYXR0ck5hbWUsIGF0dHJWYWx1ZSwgYXR0ci5zb3VyY2VJbmZvLCB0YXJnZXRNYXRjaGFibGVBdHRycywgdGFyZ2V0UHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWhhc0JpbmRpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFyc2VMaXRlcmFsQXR0cihhdHRyTmFtZSwgYXR0clZhbHVlLCBhdHRyLnNvdXJjZUluZm8sIHRhcmdldFByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhhc0JpbmRpbmc7XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGVQYXJzZVZpc2l0b3IucHJvdG90eXBlLl9ub3JtYWxpemVBdHRyaWJ1dGVOYW1lID0gZnVuY3Rpb24gKGF0dHJOYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIGxhbmdfMS5TdHJpbmdXcmFwcGVyLnN0YXJ0c1dpdGgoYXR0ck5hbWUsICdkYXRhLScpID8gbGFuZ18xLlN0cmluZ1dyYXBwZXIuc3Vic3RyaW5nKGF0dHJOYW1lLCA1KSA6XHJcbiAgICAgICAgICAgIGF0dHJOYW1lO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlUGFyc2VWaXNpdG9yLnByb3RvdHlwZS5fcGFyc2VWYXJpYWJsZSA9IGZ1bmN0aW9uIChpZGVudGlmaWVyLCB2YWx1ZSwgc291cmNlSW5mbywgdGFyZ2V0TWF0Y2hhYmxlQXR0cnMsIHRhcmdldFZhcnMpIHtcclxuICAgICAgICB0YXJnZXRWYXJzLnB1c2gobmV3IHRlbXBsYXRlX2FzdF8xLlZhcmlhYmxlQXN0KHV0aWxfMS5kYXNoQ2FzZVRvQ2FtZWxDYXNlKGlkZW50aWZpZXIpLCB2YWx1ZSwgc291cmNlSW5mbykpO1xyXG4gICAgICAgIHRhcmdldE1hdGNoYWJsZUF0dHJzLnB1c2goW2lkZW50aWZpZXIsIHZhbHVlXSk7XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGVQYXJzZVZpc2l0b3IucHJvdG90eXBlLl9wYXJzZVByb3BlcnR5ID0gZnVuY3Rpb24gKG5hbWUsIGV4cHJlc3Npb24sIHNvdXJjZUluZm8sIHRhcmdldE1hdGNoYWJsZUF0dHJzLCB0YXJnZXRQcm9wcykge1xyXG4gICAgICAgIHRoaXMuX3BhcnNlUHJvcGVydHlBc3QobmFtZSwgdGhpcy5fcGFyc2VCaW5kaW5nKGV4cHJlc3Npb24sIHNvdXJjZUluZm8pLCBzb3VyY2VJbmZvLCB0YXJnZXRNYXRjaGFibGVBdHRycywgdGFyZ2V0UHJvcHMpO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlUGFyc2VWaXNpdG9yLnByb3RvdHlwZS5fcGFyc2VQcm9wZXJ0eUludGVycG9sYXRpb24gPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIHNvdXJjZUluZm8sIHRhcmdldE1hdGNoYWJsZUF0dHJzLCB0YXJnZXRQcm9wcykge1xyXG4gICAgICAgIHZhciBleHByID0gdGhpcy5fcGFyc2VJbnRlcnBvbGF0aW9uKHZhbHVlLCBzb3VyY2VJbmZvKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChleHByKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJzZVByb3BlcnR5QXN0KG5hbWUsIGV4cHIsIHNvdXJjZUluZm8sIHRhcmdldE1hdGNoYWJsZUF0dHJzLCB0YXJnZXRQcm9wcyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGVQYXJzZVZpc2l0b3IucHJvdG90eXBlLl9wYXJzZVByb3BlcnR5QXN0ID0gZnVuY3Rpb24gKG5hbWUsIGFzdCwgc291cmNlSW5mbywgdGFyZ2V0TWF0Y2hhYmxlQXR0cnMsIHRhcmdldFByb3BzKSB7XHJcbiAgICAgICAgdGFyZ2V0TWF0Y2hhYmxlQXR0cnMucHVzaChbbmFtZSwgYXN0LnNvdXJjZV0pO1xyXG4gICAgICAgIHRhcmdldFByb3BzLnB1c2gobmV3IEJvdW5kRWxlbWVudE9yRGlyZWN0aXZlUHJvcGVydHkobmFtZSwgYXN0LCBmYWxzZSwgc291cmNlSW5mbykpO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlUGFyc2VWaXNpdG9yLnByb3RvdHlwZS5fcGFyc2VBc3NpZ25tZW50RXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgZXhwcmVzc2lvbiwgc291cmNlSW5mbywgdGFyZ2V0TWF0Y2hhYmxlQXR0cnMsIHRhcmdldEV2ZW50cykge1xyXG4gICAgICAgIHRoaXMuX3BhcnNlRXZlbnQobmFtZSArIFwiLWNoYW5nZVwiLCBleHByZXNzaW9uICsgXCI9JGV2ZW50XCIsIHNvdXJjZUluZm8sIHRhcmdldE1hdGNoYWJsZUF0dHJzLCB0YXJnZXRFdmVudHMpO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlUGFyc2VWaXNpdG9yLnByb3RvdHlwZS5fcGFyc2VFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBleHByZXNzaW9uLCBzb3VyY2VJbmZvLCB0YXJnZXRNYXRjaGFibGVBdHRycywgdGFyZ2V0RXZlbnRzKSB7XHJcbiAgICAgICAgLy8gbG9uZyBmb3JtYXQ6ICd0YXJnZXQ6IGV2ZW50TmFtZSdcclxuICAgICAgICB2YXIgcGFydHMgPSB1dGlsXzEuc3BsaXRBdENvbG9uKG5hbWUsIFtudWxsLCBuYW1lXSk7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9IHBhcnRzWzBdO1xyXG4gICAgICAgIHZhciBldmVudE5hbWUgPSBwYXJ0c1sxXTtcclxuICAgICAgICB0YXJnZXRFdmVudHMucHVzaChuZXcgdGVtcGxhdGVfYXN0XzEuQm91bmRFdmVudEFzdCh1dGlsXzEuZGFzaENhc2VUb0NhbWVsQ2FzZShldmVudE5hbWUpLCB0YXJnZXQsIHRoaXMuX3BhcnNlQWN0aW9uKGV4cHJlc3Npb24sIHNvdXJjZUluZm8pLCBzb3VyY2VJbmZvKSk7XHJcbiAgICAgICAgLy8gRG9uJ3QgZGV0ZWN0IGRpcmVjdGl2ZXMgZm9yIGV2ZW50IG5hbWVzIGZvciBub3csXHJcbiAgICAgICAgLy8gc28gZG9uJ3QgYWRkIHRoZSBldmVudCBuYW1lIHRvIHRoZSBtYXRjaGFibGVBdHRyc1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlUGFyc2VWaXNpdG9yLnByb3RvdHlwZS5fcGFyc2VMaXRlcmFsQXR0ciA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgc291cmNlSW5mbywgdGFyZ2V0UHJvcHMpIHtcclxuICAgICAgICB0YXJnZXRQcm9wcy5wdXNoKG5ldyBCb3VuZEVsZW1lbnRPckRpcmVjdGl2ZVByb3BlcnR5KHV0aWxfMS5kYXNoQ2FzZVRvQ2FtZWxDYXNlKG5hbWUpLCB0aGlzLl9leHByUGFyc2VyLndyYXBMaXRlcmFsUHJpbWl0aXZlKHZhbHVlLCBzb3VyY2VJbmZvKSwgdHJ1ZSwgc291cmNlSW5mbykpO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlUGFyc2VWaXNpdG9yLnByb3RvdHlwZS5fcGFyc2VEaXJlY3RpdmVzID0gZnVuY3Rpb24gKHNlbGVjdG9yTWF0Y2hlciwgZWxlbWVudENzc1NlbGVjdG9yKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgZGlyZWN0aXZlcyA9IFtdO1xyXG4gICAgICAgIHNlbGVjdG9yTWF0Y2hlci5tYXRjaChlbGVtZW50Q3NzU2VsZWN0b3IsIGZ1bmN0aW9uIChzZWxlY3RvciwgZGlyZWN0aXZlKSB7IGRpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpOyB9KTtcclxuICAgICAgICAvLyBOZWVkIHRvIHNvcnQgdGhlIGRpcmVjdGl2ZXMgc28gdGhhdCB3ZSBnZXQgY29uc2lzdGVudCByZXN1bHRzIHRocm91Z2hvdXQsXHJcbiAgICAgICAgLy8gYXMgc2VsZWN0b3JNYXRjaGVyIHVzZXMgTWFwcyBpbnNpZGUuXHJcbiAgICAgICAgLy8gQWxzbyBuZWVkIHRvIG1ha2UgY29tcG9uZW50cyB0aGUgZmlyc3QgZGlyZWN0aXZlIGluIHRoZSBhcnJheVxyXG4gICAgICAgIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5zb3J0KGRpcmVjdGl2ZXMsIGZ1bmN0aW9uIChkaXIxLCBkaXIyKSB7XHJcbiAgICAgICAgICAgIHZhciBkaXIxQ29tcCA9IGRpcjEuaXNDb21wb25lbnQ7XHJcbiAgICAgICAgICAgIHZhciBkaXIyQ29tcCA9IGRpcjIuaXNDb21wb25lbnQ7XHJcbiAgICAgICAgICAgIGlmIChkaXIxQ29tcCAmJiAhZGlyMkNvbXApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghZGlyMUNvbXAgJiYgZGlyMkNvbXApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmRpcmVjdGl2ZXNJbmRleC5nZXQoZGlyMSkgLSBfdGhpcy5kaXJlY3RpdmVzSW5kZXguZ2V0KGRpcjIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZXM7XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGVQYXJzZVZpc2l0b3IucHJvdG90eXBlLl9jcmVhdGVEaXJlY3RpdmVBc3RzID0gZnVuY3Rpb24gKGVsZW1lbnROYW1lLCBkaXJlY3RpdmVzLCBwcm9wcywgcG9zc2libGVFeHBvcnRBc1ZhcnMsIHNvdXJjZUluZm8pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBtYXRjaGVkVmFyaWFibGVzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIHZhciBkaXJlY3RpdmVBc3RzID0gZGlyZWN0aXZlcy5tYXAoZnVuY3Rpb24gKGRpcmVjdGl2ZSkge1xyXG4gICAgICAgICAgICB2YXIgaG9zdFByb3BlcnRpZXMgPSBbXTtcclxuICAgICAgICAgICAgdmFyIGhvc3RFdmVudHMgPSBbXTtcclxuICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZVByb3BlcnRpZXMgPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMuX2NyZWF0ZURpcmVjdGl2ZUhvc3RQcm9wZXJ0eUFzdHMoZWxlbWVudE5hbWUsIGRpcmVjdGl2ZS5ob3N0UHJvcGVydGllcywgc291cmNlSW5mbywgaG9zdFByb3BlcnRpZXMpO1xyXG4gICAgICAgICAgICBfdGhpcy5fY3JlYXRlRGlyZWN0aXZlSG9zdEV2ZW50QXN0cyhkaXJlY3RpdmUuaG9zdExpc3RlbmVycywgc291cmNlSW5mbywgaG9zdEV2ZW50cyk7XHJcbiAgICAgICAgICAgIF90aGlzLl9jcmVhdGVEaXJlY3RpdmVQcm9wZXJ0eUFzdHMoZGlyZWN0aXZlLmlucHV0cywgcHJvcHMsIGRpcmVjdGl2ZVByb3BlcnRpZXMpO1xyXG4gICAgICAgICAgICB2YXIgZXhwb3J0QXNWYXJzID0gW107XHJcbiAgICAgICAgICAgIHBvc3NpYmxlRXhwb3J0QXNWYXJzLmZvckVhY2goZnVuY3Rpb24gKHZhckFzdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCh2YXJBc3QudmFsdWUubGVuZ3RoID09PSAwICYmIGRpcmVjdGl2ZS5pc0NvbXBvbmVudCkgfHxcclxuICAgICAgICAgICAgICAgICAgICAoZGlyZWN0aXZlLmV4cG9ydEFzID09IHZhckFzdC52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHBvcnRBc1ZhcnMucHVzaCh2YXJBc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZWRWYXJpYWJsZXMuYWRkKHZhckFzdC5uYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgdGVtcGxhdGVfYXN0XzEuRGlyZWN0aXZlQXN0KGRpcmVjdGl2ZSwgZGlyZWN0aXZlUHJvcGVydGllcywgaG9zdFByb3BlcnRpZXMsIGhvc3RFdmVudHMsIGV4cG9ydEFzVmFycywgc291cmNlSW5mbyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcG9zc2libGVFeHBvcnRBc1ZhcnMuZm9yRWFjaChmdW5jdGlvbiAodmFyQXN0KSB7XHJcbiAgICAgICAgICAgIGlmICh2YXJBc3QudmFsdWUubGVuZ3RoID4gMCAmJiAhY29sbGVjdGlvbl8xLlNldFdyYXBwZXIuaGFzKG1hdGNoZWRWYXJpYWJsZXMsIHZhckFzdC5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3JlcG9ydEVycm9yKFwiVGhlcmUgaXMgbm8gZGlyZWN0aXZlIHdpdGggXFxcImV4cG9ydEFzXFxcIiBzZXQgdG8gXFxcIlwiICsgdmFyQXN0LnZhbHVlICsgXCJcXFwiIGF0IFwiICsgdmFyQXN0LnNvdXJjZUluZm8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZUFzdHM7XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGVQYXJzZVZpc2l0b3IucHJvdG90eXBlLl9jcmVhdGVEaXJlY3RpdmVIb3N0UHJvcGVydHlBc3RzID0gZnVuY3Rpb24gKGVsZW1lbnROYW1lLCBob3N0UHJvcHMsIHNvdXJjZUluZm8sIHRhcmdldFByb3BlcnR5QXN0cykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoaG9zdFByb3BzKSkge1xyXG4gICAgICAgICAgICBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5mb3JFYWNoKGhvc3RQcm9wcywgZnVuY3Rpb24gKGV4cHJlc3Npb24sIHByb3BOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXhwckFzdCA9IF90aGlzLl9wYXJzZUJpbmRpbmcoZXhwcmVzc2lvbiwgc291cmNlSW5mbyk7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRQcm9wZXJ0eUFzdHMucHVzaChfdGhpcy5fY3JlYXRlRWxlbWVudFByb3BlcnR5QXN0KGVsZW1lbnROYW1lLCBwcm9wTmFtZSwgZXhwckFzdCwgc291cmNlSW5mbykpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGVQYXJzZVZpc2l0b3IucHJvdG90eXBlLl9jcmVhdGVEaXJlY3RpdmVIb3N0RXZlbnRBc3RzID0gZnVuY3Rpb24gKGhvc3RMaXN0ZW5lcnMsIHNvdXJjZUluZm8sIHRhcmdldEV2ZW50QXN0cykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoaG9zdExpc3RlbmVycykpIHtcclxuICAgICAgICAgICAgY29sbGVjdGlvbl8xLlN0cmluZ01hcFdyYXBwZXIuZm9yRWFjaChob3N0TGlzdGVuZXJzLCBmdW5jdGlvbiAoZXhwcmVzc2lvbiwgcHJvcE5hbWUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9wYXJzZUV2ZW50KHByb3BOYW1lLCBleHByZXNzaW9uLCBzb3VyY2VJbmZvLCBbXSwgdGFyZ2V0RXZlbnRBc3RzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlUGFyc2VWaXNpdG9yLnByb3RvdHlwZS5fY3JlYXRlRGlyZWN0aXZlUHJvcGVydHlBc3RzID0gZnVuY3Rpb24gKGRpcmVjdGl2ZVByb3BlcnRpZXMsIGJvdW5kUHJvcHMsIHRhcmdldEJvdW5kRGlyZWN0aXZlUHJvcHMpIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChkaXJlY3RpdmVQcm9wZXJ0aWVzKSkge1xyXG4gICAgICAgICAgICB2YXIgYm91bmRQcm9wc0J5TmFtZSA9IG5ldyBNYXAoKTtcclxuICAgICAgICAgICAgYm91bmRQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChib3VuZFByb3ApIHtcclxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSB1dGlsXzEuZGFzaENhc2VUb0NhbWVsQ2FzZShib3VuZFByb3AubmFtZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJldlZhbHVlID0gYm91bmRQcm9wc0J5TmFtZS5nZXQoYm91bmRQcm9wLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHByZXZWYWx1ZSkgfHwgcHJldlZhbHVlLmlzTGl0ZXJhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGdpdmUgW2FdPVwiYlwiIGEgaGlnaGVyIHByZWNlZGVuY2UgdGhhdG4gYT1cImJcIiBvbiB0aGUgc2FtZSBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgYm91bmRQcm9wc0J5TmFtZS5zZXQoa2V5LCBib3VuZFByb3ApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29sbGVjdGlvbl8xLlN0cmluZ01hcFdyYXBwZXIuZm9yRWFjaChkaXJlY3RpdmVQcm9wZXJ0aWVzLCBmdW5jdGlvbiAoZWxQcm9wLCBkaXJQcm9wKSB7XHJcbiAgICAgICAgICAgICAgICBlbFByb3AgPSB1dGlsXzEuZGFzaENhc2VUb0NhbWVsQ2FzZShlbFByb3ApO1xyXG4gICAgICAgICAgICAgICAgdmFyIGJvdW5kUHJvcCA9IGJvdW5kUHJvcHNCeU5hbWUuZ2V0KGVsUHJvcCk7XHJcbiAgICAgICAgICAgICAgICAvLyBCaW5kaW5ncyBhcmUgb3B0aW9uYWwsIHNvIHRoaXMgYmluZGluZyBvbmx5IG5lZWRzIHRvIGJlIHNldCB1cCBpZiBhbiBleHByZXNzaW9uIGlzIGdpdmVuLlxyXG4gICAgICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoYm91bmRQcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEJvdW5kRGlyZWN0aXZlUHJvcHMucHVzaChuZXcgdGVtcGxhdGVfYXN0XzEuQm91bmREaXJlY3RpdmVQcm9wZXJ0eUFzdChkaXJQcm9wLCBib3VuZFByb3AubmFtZSwgYm91bmRQcm9wLmV4cHJlc3Npb24sIGJvdW5kUHJvcC5zb3VyY2VJbmZvKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBUZW1wbGF0ZVBhcnNlVmlzaXRvci5wcm90b3R5cGUuX2NyZWF0ZUVsZW1lbnRQcm9wZXJ0eUFzdHMgPSBmdW5jdGlvbiAoZWxlbWVudE5hbWUsIHByb3BzLCBkaXJlY3RpdmVzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgYm91bmRFbGVtZW50UHJvcHMgPSBbXTtcclxuICAgICAgICB2YXIgYm91bmREaXJlY3RpdmVQcm9wc0luZGV4ID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGRpcmVjdGl2ZXMuZm9yRWFjaChmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XHJcbiAgICAgICAgICAgIGRpcmVjdGl2ZS5pbnB1dHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xyXG4gICAgICAgICAgICAgICAgYm91bmREaXJlY3RpdmVQcm9wc0luZGV4LnNldChwcm9wLnRlbXBsYXRlTmFtZSwgcHJvcCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgICAgICAgaWYgKCFwcm9wLmlzTGl0ZXJhbCAmJiBsYW5nXzEuaXNCbGFuayhib3VuZERpcmVjdGl2ZVByb3BzSW5kZXguZ2V0KHByb3AubmFtZSkpKSB7XHJcbiAgICAgICAgICAgICAgICBib3VuZEVsZW1lbnRQcm9wcy5wdXNoKF90aGlzLl9jcmVhdGVFbGVtZW50UHJvcGVydHlBc3QoZWxlbWVudE5hbWUsIHByb3AubmFtZSwgcHJvcC5leHByZXNzaW9uLCBwcm9wLnNvdXJjZUluZm8pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBib3VuZEVsZW1lbnRQcm9wcztcclxuICAgIH07XHJcbiAgICBUZW1wbGF0ZVBhcnNlVmlzaXRvci5wcm90b3R5cGUuX2NyZWF0ZUVsZW1lbnRQcm9wZXJ0eUFzdCA9IGZ1bmN0aW9uIChlbGVtZW50TmFtZSwgbmFtZSwgYXN0LCBzb3VyY2VJbmZvKSB7XHJcbiAgICAgICAgdmFyIHVuaXQgPSBudWxsO1xyXG4gICAgICAgIHZhciBiaW5kaW5nVHlwZTtcclxuICAgICAgICB2YXIgYm91bmRQcm9wZXJ0eU5hbWU7XHJcbiAgICAgICAgdmFyIHBhcnRzID0gbGFuZ18xLlN0cmluZ1dyYXBwZXIuc3BsaXQobmFtZSwgUFJPUEVSVFlfUEFSVFNfU0VQQVJBVE9SKTtcclxuICAgICAgICBpZiAocGFydHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIGJvdW5kUHJvcGVydHlOYW1lID0gdGhpcy5fc2NoZW1hUmVnaXN0cnkuZ2V0TWFwcGVkUHJvcE5hbWUodXRpbF8xLmRhc2hDYXNlVG9DYW1lbENhc2UocGFydHNbMF0pKTtcclxuICAgICAgICAgICAgYmluZGluZ1R5cGUgPSB0ZW1wbGF0ZV9hc3RfMS5Qcm9wZXJ0eUJpbmRpbmdUeXBlLlByb3BlcnR5O1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3NjaGVtYVJlZ2lzdHJ5Lmhhc1Byb3BlcnR5KGVsZW1lbnROYW1lLCBib3VuZFByb3BlcnR5TmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlcG9ydEVycm9yKFwiQ2FuJ3QgYmluZCB0byAnXCIgKyBib3VuZFByb3BlcnR5TmFtZSArIFwiJyBzaW5jZSBpdCBpc24ndCBhIGtub3duIG5hdGl2ZSBwcm9wZXJ0eSBpbiBcIiArIHNvdXJjZUluZm8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHBhcnRzWzBdID09IEFUVFJJQlVURV9QUkVGSVgpIHtcclxuICAgICAgICAgICAgYm91bmRQcm9wZXJ0eU5hbWUgPSB1dGlsXzEuZGFzaENhc2VUb0NhbWVsQ2FzZShwYXJ0c1sxXSk7XHJcbiAgICAgICAgICAgIGJpbmRpbmdUeXBlID0gdGVtcGxhdGVfYXN0XzEuUHJvcGVydHlCaW5kaW5nVHlwZS5BdHRyaWJ1dGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHBhcnRzWzBdID09IENMQVNTX1BSRUZJWCkge1xyXG4gICAgICAgICAgICAvLyBrZWVwIG9yaWdpbmFsIGNhc2UhXHJcbiAgICAgICAgICAgIGJvdW5kUHJvcGVydHlOYW1lID0gcGFydHNbMV07XHJcbiAgICAgICAgICAgIGJpbmRpbmdUeXBlID0gdGVtcGxhdGVfYXN0XzEuUHJvcGVydHlCaW5kaW5nVHlwZS5DbGFzcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGFydHNbMF0gPT0gU1RZTEVfUFJFRklYKSB7XHJcbiAgICAgICAgICAgIHVuaXQgPSBwYXJ0cy5sZW5ndGggPiAyID8gcGFydHNbMl0gOiBudWxsO1xyXG4gICAgICAgICAgICBib3VuZFByb3BlcnR5TmFtZSA9IHV0aWxfMS5kYXNoQ2FzZVRvQ2FtZWxDYXNlKHBhcnRzWzFdKTtcclxuICAgICAgICAgICAgYmluZGluZ1R5cGUgPSB0ZW1wbGF0ZV9hc3RfMS5Qcm9wZXJ0eUJpbmRpbmdUeXBlLlN0eWxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVwb3J0RXJyb3IoXCJJbnZhbGlkIHByb3BlcnR5IG5hbWUgXCIgKyBuYW1lICsgXCIgaW4gXCIgKyBzb3VyY2VJbmZvKTtcclxuICAgICAgICAgICAgYmluZGluZ1R5cGUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IHRlbXBsYXRlX2FzdF8xLkJvdW5kRWxlbWVudFByb3BlcnR5QXN0KGJvdW5kUHJvcGVydHlOYW1lLCBiaW5kaW5nVHlwZSwgYXN0LCB1bml0LCBzb3VyY2VJbmZvKTtcclxuICAgIH07XHJcbiAgICBUZW1wbGF0ZVBhcnNlVmlzaXRvci5wcm90b3R5cGUuX2ZpbmRDb21wb25lbnREaXJlY3RpdmVOYW1lcyA9IGZ1bmN0aW9uIChkaXJlY3RpdmVzKSB7XHJcbiAgICAgICAgdmFyIGNvbXBvbmVudFR5cGVOYW1lcyA9IFtdO1xyXG4gICAgICAgIGRpcmVjdGl2ZXMuZm9yRWFjaChmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHZhciB0eXBlTmFtZSA9IGRpcmVjdGl2ZS5kaXJlY3RpdmUudHlwZS5uYW1lO1xyXG4gICAgICAgICAgICBpZiAoZGlyZWN0aXZlLmRpcmVjdGl2ZS5pc0NvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50VHlwZU5hbWVzLnB1c2godHlwZU5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudFR5cGVOYW1lcztcclxuICAgIH07XHJcbiAgICBUZW1wbGF0ZVBhcnNlVmlzaXRvci5wcm90b3R5cGUuX2Fzc2VydE9ubHlPbmVDb21wb25lbnQgPSBmdW5jdGlvbiAoZGlyZWN0aXZlcywgc291cmNlSW5mbykge1xyXG4gICAgICAgIHZhciBjb21wb25lbnRUeXBlTmFtZXMgPSB0aGlzLl9maW5kQ29tcG9uZW50RGlyZWN0aXZlTmFtZXMoZGlyZWN0aXZlcyk7XHJcbiAgICAgICAgaWYgKGNvbXBvbmVudFR5cGVOYW1lcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcG9ydEVycm9yKFwiTW9yZSB0aGFuIG9uZSBjb21wb25lbnQ6IFwiICsgY29tcG9uZW50VHlwZU5hbWVzLmpvaW4oJywnKSArIFwiIGluIFwiICsgc291cmNlSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlUGFyc2VWaXNpdG9yLnByb3RvdHlwZS5fYXNzZXJ0Tm9Db21wb25lbnRzTm9yRWxlbWVudEJpbmRpbmdzT25UZW1wbGF0ZSA9IGZ1bmN0aW9uIChkaXJlY3RpdmVzLCBlbGVtZW50UHJvcHMsIHNvdXJjZUluZm8pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjb21wb25lbnRUeXBlTmFtZXMgPSB0aGlzLl9maW5kQ29tcG9uZW50RGlyZWN0aXZlTmFtZXMoZGlyZWN0aXZlcyk7XHJcbiAgICAgICAgaWYgKGNvbXBvbmVudFR5cGVOYW1lcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcG9ydEVycm9yKFwiQ29tcG9uZW50cyBvbiBhbiBlbWJlZGRlZCB0ZW1wbGF0ZTogXCIgKyBjb21wb25lbnRUeXBlTmFtZXMuam9pbignLCcpICsgXCIgaW4gXCIgKyBzb3VyY2VJbmZvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxlbWVudFByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgICAgICAgX3RoaXMuX3JlcG9ydEVycm9yKFwiUHJvcGVydHkgYmluZGluZyBcIiArIHByb3AubmFtZSArIFwiIG5vdCB1c2VkIGJ5IGFueSBkaXJlY3RpdmUgb24gYW4gZW1iZWRkZWQgdGVtcGxhdGUgaW4gXCIgKyBwcm9wLnNvdXJjZUluZm8pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlUGFyc2VWaXNpdG9yLnByb3RvdHlwZS5fYXNzZXJ0QWxsRXZlbnRzUHVibGlzaGVkQnlEaXJlY3RpdmVzID0gZnVuY3Rpb24gKGRpcmVjdGl2ZXMsIGV2ZW50cywgc291cmNlSW5mbykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGFsbERpcmVjdGl2ZUV2ZW50cyA9IG5ldyBTZXQoKTtcclxuICAgICAgICBkaXJlY3RpdmVzLmZvckVhY2goZnVuY3Rpb24gKGRpcmVjdGl2ZSkge1xyXG4gICAgICAgICAgICBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5mb3JFYWNoKGRpcmVjdGl2ZS5kaXJlY3RpdmUub3V0cHV0cywgZnVuY3Rpb24gKGV2ZW50TmFtZSwgXykgeyBhbGxEaXJlY3RpdmVFdmVudHMuYWRkKGV2ZW50TmFtZSk7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChldmVudC50YXJnZXQpIHx8ICFjb2xsZWN0aW9uXzEuU2V0V3JhcHBlci5oYXMoYWxsRGlyZWN0aXZlRXZlbnRzLCBldmVudC5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3JlcG9ydEVycm9yKFwiRXZlbnQgYmluZGluZyBcIiArIGV2ZW50LmZ1bGxOYW1lICsgXCIgbm90IGVtaXR0ZWQgYnkgYW55IGRpcmVjdGl2ZSBvbiBhbiBlbWJlZGRlZCB0ZW1wbGF0ZSBpbiBcIiArIHNvdXJjZUluZm8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFRlbXBsYXRlUGFyc2VWaXNpdG9yO1xyXG59KSgpO1xyXG52YXIgTm9uQmluZGFibGVWaXNpdG9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5vbkJpbmRhYmxlVmlzaXRvcigpIHtcclxuICAgIH1cclxuICAgIE5vbkJpbmRhYmxlVmlzaXRvci5wcm90b3R5cGUudmlzaXRFbGVtZW50ID0gZnVuY3Rpb24gKGFzdCwgY29tcG9uZW50KSB7XHJcbiAgICAgICAgdmFyIHByZXBhcnNlZEVsZW1lbnQgPSB0ZW1wbGF0ZV9wcmVwYXJzZXJfMS5wcmVwYXJzZUVsZW1lbnQoYXN0KTtcclxuICAgICAgICBpZiAocHJlcGFyc2VkRWxlbWVudC50eXBlID09PSB0ZW1wbGF0ZV9wcmVwYXJzZXJfMS5QcmVwYXJzZWRFbGVtZW50VHlwZS5TQ1JJUFQgfHxcclxuICAgICAgICAgICAgcHJlcGFyc2VkRWxlbWVudC50eXBlID09PSB0ZW1wbGF0ZV9wcmVwYXJzZXJfMS5QcmVwYXJzZWRFbGVtZW50VHlwZS5TVFlMRSB8fFxyXG4gICAgICAgICAgICBwcmVwYXJzZWRFbGVtZW50LnR5cGUgPT09IHRlbXBsYXRlX3ByZXBhcnNlcl8xLlByZXBhcnNlZEVsZW1lbnRUeXBlLlNUWUxFU0hFRVQpIHtcclxuICAgICAgICAgICAgLy8gU2tpcHBpbmcgPHNjcmlwdD4gZm9yIHNlY3VyaXR5IHJlYXNvbnNcclxuICAgICAgICAgICAgLy8gU2tpcHBpbmcgPHN0eWxlPiBhbmQgc3R5bGVzaGVldHMgYXMgd2UgYWxyZWFkeSBwcm9jZXNzZWQgdGhlbVxyXG4gICAgICAgICAgICAvLyBpbiB0aGUgU3R5bGVDb21waWxlclxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGF0dHJOYW1lQW5kVmFsdWVzID0gYXN0LmF0dHJzLm1hcChmdW5jdGlvbiAoYXR0ckFzdCkgeyByZXR1cm4gW2F0dHJBc3QubmFtZSwgYXR0ckFzdC52YWx1ZV07IH0pO1xyXG4gICAgICAgIHZhciBzZWxlY3RvciA9IGNyZWF0ZUVsZW1lbnRDc3NTZWxlY3Rvcihhc3QubmFtZSwgYXR0ck5hbWVBbmRWYWx1ZXMpO1xyXG4gICAgICAgIHZhciBuZ0NvbnRlbnRJbmRleCA9IGNvbXBvbmVudC5maW5kTmdDb250ZW50SW5kZXgoc2VsZWN0b3IpO1xyXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IGh0bWxfYXN0XzEuaHRtbFZpc2l0QWxsKHRoaXMsIGFzdC5jaGlsZHJlbiwgRU1QVFlfQ09NUE9ORU5UKTtcclxuICAgICAgICByZXR1cm4gbmV3IHRlbXBsYXRlX2FzdF8xLkVsZW1lbnRBc3QoYXN0Lm5hbWUsIGh0bWxfYXN0XzEuaHRtbFZpc2l0QWxsKHRoaXMsIGFzdC5hdHRycyksIFtdLCBbXSwgW10sIFtdLCBjaGlsZHJlbiwgbmdDb250ZW50SW5kZXgsIGFzdC5zb3VyY2VJbmZvKTtcclxuICAgIH07XHJcbiAgICBOb25CaW5kYWJsZVZpc2l0b3IucHJvdG90eXBlLnZpc2l0QXR0ciA9IGZ1bmN0aW9uIChhc3QsIGNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IHRlbXBsYXRlX2FzdF8xLkF0dHJBc3QoYXN0Lm5hbWUsIGFzdC52YWx1ZSwgYXN0LnNvdXJjZUluZm8pO1xyXG4gICAgfTtcclxuICAgIE5vbkJpbmRhYmxlVmlzaXRvci5wcm90b3R5cGUudmlzaXRUZXh0ID0gZnVuY3Rpb24gKGFzdCwgY29tcG9uZW50KSB7XHJcbiAgICAgICAgdmFyIG5nQ29udGVudEluZGV4ID0gY29tcG9uZW50LmZpbmROZ0NvbnRlbnRJbmRleChURVhUX0NTU19TRUxFQ1RPUik7XHJcbiAgICAgICAgcmV0dXJuIG5ldyB0ZW1wbGF0ZV9hc3RfMS5UZXh0QXN0KGFzdC52YWx1ZSwgbmdDb250ZW50SW5kZXgsIGFzdC5zb3VyY2VJbmZvKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTm9uQmluZGFibGVWaXNpdG9yO1xyXG59KSgpO1xyXG52YXIgQm91bmRFbGVtZW50T3JEaXJlY3RpdmVQcm9wZXJ0eSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCb3VuZEVsZW1lbnRPckRpcmVjdGl2ZVByb3BlcnR5KG5hbWUsIGV4cHJlc3Npb24sIGlzTGl0ZXJhbCwgc291cmNlSW5mbykge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcclxuICAgICAgICB0aGlzLmlzTGl0ZXJhbCA9IGlzTGl0ZXJhbDtcclxuICAgICAgICB0aGlzLnNvdXJjZUluZm8gPSBzb3VyY2VJbmZvO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEJvdW5kRWxlbWVudE9yRGlyZWN0aXZlUHJvcGVydHk7XHJcbn0pKCk7XHJcbnZhciBQYXJzZUVycm9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFBhcnNlRXJyb3IobWVzc2FnZSwgc291cmNlSW5mbykge1xyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VJbmZvID0gc291cmNlSW5mbztcclxuICAgIH1cclxuICAgIHJldHVybiBQYXJzZUVycm9yO1xyXG59KSgpO1xyXG5mdW5jdGlvbiBzcGxpdENsYXNzZXMoY2xhc3NBdHRyVmFsdWUpIHtcclxuICAgIHJldHVybiBsYW5nXzEuU3RyaW5nV3JhcHBlci5zcGxpdChjbGFzc0F0dHJWYWx1ZS50cmltKCksIC9cXHMrL2cpO1xyXG59XHJcbmV4cG9ydHMuc3BsaXRDbGFzc2VzID0gc3BsaXRDbGFzc2VzO1xyXG52YXIgQ29tcG9uZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbXBvbmVudChuZ0NvbnRlbnRJbmRleE1hdGNoZXIsIHdpbGRjYXJkTmdDb250ZW50SW5kZXgpIHtcclxuICAgICAgICB0aGlzLm5nQ29udGVudEluZGV4TWF0Y2hlciA9IG5nQ29udGVudEluZGV4TWF0Y2hlcjtcclxuICAgICAgICB0aGlzLndpbGRjYXJkTmdDb250ZW50SW5kZXggPSB3aWxkY2FyZE5nQ29udGVudEluZGV4O1xyXG4gICAgfVxyXG4gICAgQ29tcG9uZW50LmNyZWF0ZSA9IGZ1bmN0aW9uIChkaXJlY3RpdmVzKSB7XHJcbiAgICAgICAgaWYgKGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwIHx8ICFkaXJlY3RpdmVzWzBdLmRpcmVjdGl2ZS5pc0NvbXBvbmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfQ09NUE9ORU5UO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbWF0Y2hlciA9IG5ldyBzZWxlY3Rvcl8xLlNlbGVjdG9yTWF0Y2hlcigpO1xyXG4gICAgICAgIHZhciBuZ0NvbnRlbnRTZWxlY3RvcnMgPSBkaXJlY3RpdmVzWzBdLmRpcmVjdGl2ZS50ZW1wbGF0ZS5uZ0NvbnRlbnRTZWxlY3RvcnM7XHJcbiAgICAgICAgdmFyIHdpbGRjYXJkTmdDb250ZW50SW5kZXggPSBudWxsO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmdDb250ZW50U2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IG5nQ29udGVudFNlbGVjdG9yc1tpXTtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5TdHJpbmdXcmFwcGVyLmVxdWFscyhzZWxlY3RvciwgJyonKSkge1xyXG4gICAgICAgICAgICAgICAgd2lsZGNhcmROZ0NvbnRlbnRJbmRleCA9IGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVyLmFkZFNlbGVjdGFibGVzKHNlbGVjdG9yXzEuQ3NzU2VsZWN0b3IucGFyc2UobmdDb250ZW50U2VsZWN0b3JzW2ldKSwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wb25lbnQobWF0Y2hlciwgd2lsZGNhcmROZ0NvbnRlbnRJbmRleCk7XHJcbiAgICB9O1xyXG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5maW5kTmdDb250ZW50SW5kZXggPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcclxuICAgICAgICB2YXIgbmdDb250ZW50SW5kaWNlcyA9IFtdO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRoaXMud2lsZGNhcmROZ0NvbnRlbnRJbmRleCkpIHtcclxuICAgICAgICAgICAgbmdDb250ZW50SW5kaWNlcy5wdXNoKHRoaXMud2lsZGNhcmROZ0NvbnRlbnRJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubmdDb250ZW50SW5kZXhNYXRjaGVyLm1hdGNoKHNlbGVjdG9yLCBmdW5jdGlvbiAoc2VsZWN0b3IsIG5nQ29udGVudEluZGV4KSB7IG5nQ29udGVudEluZGljZXMucHVzaChuZ0NvbnRlbnRJbmRleCk7IH0pO1xyXG4gICAgICAgIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5zb3J0KG5nQ29udGVudEluZGljZXMpO1xyXG4gICAgICAgIHJldHVybiBuZ0NvbnRlbnRJbmRpY2VzLmxlbmd0aCA+IDAgPyBuZ0NvbnRlbnRJbmRpY2VzWzBdIDogbnVsbDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29tcG9uZW50O1xyXG59KSgpO1xyXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50Q3NzU2VsZWN0b3IoZWxlbWVudE5hbWUsIG1hdGNoYWJsZUF0dHJzKSB7XHJcbiAgICB2YXIgY3NzU2VsZWN0b3IgPSBuZXcgc2VsZWN0b3JfMS5Dc3NTZWxlY3RvcigpO1xyXG4gICAgY3NzU2VsZWN0b3Iuc2V0RWxlbWVudChlbGVtZW50TmFtZSk7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGNoYWJsZUF0dHJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGF0dHJOYW1lID0gbWF0Y2hhYmxlQXR0cnNbaV1bMF0udG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB2YXIgYXR0clZhbHVlID0gbWF0Y2hhYmxlQXR0cnNbaV1bMV07XHJcbiAgICAgICAgY3NzU2VsZWN0b3IuYWRkQXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyVmFsdWUpO1xyXG4gICAgICAgIGlmIChhdHRyTmFtZSA9PSBDTEFTU19BVFRSKSB7XHJcbiAgICAgICAgICAgIHZhciBjbGFzc2VzID0gc3BsaXRDbGFzc2VzKGF0dHJWYWx1ZSk7XHJcbiAgICAgICAgICAgIGNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBjc3NTZWxlY3Rvci5hZGRDbGFzc05hbWUoY2xhc3NOYW1lKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNzc1NlbGVjdG9yO1xyXG59XHJcbnZhciBFTVBUWV9DT01QT05FTlQgPSBuZXcgQ29tcG9uZW50KG5ldyBzZWxlY3Rvcl8xLlNlbGVjdG9yTWF0Y2hlcigpLCBudWxsKTtcclxudmFyIE5PTl9CSU5EQUJMRV9WSVNJVE9SID0gbmV3IE5vbkJpbmRhYmxlVmlzaXRvcigpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZV9wYXJzZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgTkdfQ09OVEVOVF9TRUxFQ1RfQVRUUiA9ICdzZWxlY3QnO1xyXG52YXIgTkdfQ09OVEVOVF9FTEVNRU5UID0gJ25nLWNvbnRlbnQnO1xyXG52YXIgTElOS19FTEVNRU5UID0gJ2xpbmsnO1xyXG52YXIgTElOS19TVFlMRV9SRUxfQVRUUiA9ICdyZWwnO1xyXG52YXIgTElOS19TVFlMRV9IUkVGX0FUVFIgPSAnaHJlZic7XHJcbnZhciBMSU5LX1NUWUxFX1JFTF9WQUxVRSA9ICdzdHlsZXNoZWV0JztcclxudmFyIFNUWUxFX0VMRU1FTlQgPSAnc3R5bGUnO1xyXG52YXIgU0NSSVBUX0VMRU1FTlQgPSAnc2NyaXB0JztcclxudmFyIE5HX05PTl9CSU5EQUJMRV9BVFRSID0gJ25nLW5vbi1iaW5kYWJsZSc7XHJcbmZ1bmN0aW9uIHByZXBhcnNlRWxlbWVudChhc3QpIHtcclxuICAgIHZhciBzZWxlY3RBdHRyID0gbnVsbDtcclxuICAgIHZhciBocmVmQXR0ciA9IG51bGw7XHJcbiAgICB2YXIgcmVsQXR0ciA9IG51bGw7XHJcbiAgICB2YXIgbm9uQmluZGFibGUgPSBmYWxzZTtcclxuICAgIGFzdC5hdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7XHJcbiAgICAgICAgaWYgKGF0dHIubmFtZSA9PSBOR19DT05URU5UX1NFTEVDVF9BVFRSKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdEF0dHIgPSBhdHRyLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhdHRyLm5hbWUgPT0gTElOS19TVFlMRV9IUkVGX0FUVFIpIHtcclxuICAgICAgICAgICAgaHJlZkF0dHIgPSBhdHRyLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhdHRyLm5hbWUgPT0gTElOS19TVFlMRV9SRUxfQVRUUikge1xyXG4gICAgICAgICAgICByZWxBdHRyID0gYXR0ci52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYXR0ci5uYW1lID09IE5HX05PTl9CSU5EQUJMRV9BVFRSKSB7XHJcbiAgICAgICAgICAgIG5vbkJpbmRhYmxlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHNlbGVjdEF0dHIgPSBub3JtYWxpemVOZ0NvbnRlbnRTZWxlY3Qoc2VsZWN0QXR0cik7XHJcbiAgICB2YXIgbm9kZU5hbWUgPSBhc3QubmFtZTtcclxuICAgIHZhciB0eXBlID0gUHJlcGFyc2VkRWxlbWVudFR5cGUuT1RIRVI7XHJcbiAgICBpZiAobm9kZU5hbWUgPT0gTkdfQ09OVEVOVF9FTEVNRU5UKSB7XHJcbiAgICAgICAgdHlwZSA9IFByZXBhcnNlZEVsZW1lbnRUeXBlLk5HX0NPTlRFTlQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChub2RlTmFtZSA9PSBTVFlMRV9FTEVNRU5UKSB7XHJcbiAgICAgICAgdHlwZSA9IFByZXBhcnNlZEVsZW1lbnRUeXBlLlNUWUxFO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobm9kZU5hbWUgPT0gU0NSSVBUX0VMRU1FTlQpIHtcclxuICAgICAgICB0eXBlID0gUHJlcGFyc2VkRWxlbWVudFR5cGUuU0NSSVBUO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobm9kZU5hbWUgPT0gTElOS19FTEVNRU5UICYmIHJlbEF0dHIgPT0gTElOS19TVFlMRV9SRUxfVkFMVUUpIHtcclxuICAgICAgICB0eXBlID0gUHJlcGFyc2VkRWxlbWVudFR5cGUuU1RZTEVTSEVFVDtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgUHJlcGFyc2VkRWxlbWVudCh0eXBlLCBzZWxlY3RBdHRyLCBocmVmQXR0ciwgbm9uQmluZGFibGUpO1xyXG59XHJcbmV4cG9ydHMucHJlcGFyc2VFbGVtZW50ID0gcHJlcGFyc2VFbGVtZW50O1xyXG4oZnVuY3Rpb24gKFByZXBhcnNlZEVsZW1lbnRUeXBlKSB7XHJcbiAgICBQcmVwYXJzZWRFbGVtZW50VHlwZVtQcmVwYXJzZWRFbGVtZW50VHlwZVtcIk5HX0NPTlRFTlRcIl0gPSAwXSA9IFwiTkdfQ09OVEVOVFwiO1xyXG4gICAgUHJlcGFyc2VkRWxlbWVudFR5cGVbUHJlcGFyc2VkRWxlbWVudFR5cGVbXCJTVFlMRVwiXSA9IDFdID0gXCJTVFlMRVwiO1xyXG4gICAgUHJlcGFyc2VkRWxlbWVudFR5cGVbUHJlcGFyc2VkRWxlbWVudFR5cGVbXCJTVFlMRVNIRUVUXCJdID0gMl0gPSBcIlNUWUxFU0hFRVRcIjtcclxuICAgIFByZXBhcnNlZEVsZW1lbnRUeXBlW1ByZXBhcnNlZEVsZW1lbnRUeXBlW1wiU0NSSVBUXCJdID0gM10gPSBcIlNDUklQVFwiO1xyXG4gICAgUHJlcGFyc2VkRWxlbWVudFR5cGVbUHJlcGFyc2VkRWxlbWVudFR5cGVbXCJPVEhFUlwiXSA9IDRdID0gXCJPVEhFUlwiO1xyXG59KShleHBvcnRzLlByZXBhcnNlZEVsZW1lbnRUeXBlIHx8IChleHBvcnRzLlByZXBhcnNlZEVsZW1lbnRUeXBlID0ge30pKTtcclxudmFyIFByZXBhcnNlZEVsZW1lbnRUeXBlID0gZXhwb3J0cy5QcmVwYXJzZWRFbGVtZW50VHlwZTtcclxudmFyIFByZXBhcnNlZEVsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUHJlcGFyc2VkRWxlbWVudCh0eXBlLCBzZWxlY3RBdHRyLCBocmVmQXR0ciwgbm9uQmluZGFibGUpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0QXR0ciA9IHNlbGVjdEF0dHI7XHJcbiAgICAgICAgdGhpcy5ocmVmQXR0ciA9IGhyZWZBdHRyO1xyXG4gICAgICAgIHRoaXMubm9uQmluZGFibGUgPSBub25CaW5kYWJsZTtcclxuICAgIH1cclxuICAgIHJldHVybiBQcmVwYXJzZWRFbGVtZW50O1xyXG59KSgpO1xyXG5leHBvcnRzLlByZXBhcnNlZEVsZW1lbnQgPSBQcmVwYXJzZWRFbGVtZW50O1xyXG5mdW5jdGlvbiBub3JtYWxpemVOZ0NvbnRlbnRTZWxlY3Qoc2VsZWN0QXR0cikge1xyXG4gICAgaWYgKGxhbmdfMS5pc0JsYW5rKHNlbGVjdEF0dHIpIHx8IHNlbGVjdEF0dHIubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuICcqJztcclxuICAgIH1cclxuICAgIHJldHVybiBzZWxlY3RBdHRyO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBsYXRlX3ByZXBhcnNlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxuLyoqXHJcbiAqIFVzZWQgYnkgdGhlIHtAbGluayBDb21waWxlcn0gd2hlbiByZXNvbHZpbmcgSFRNTCBhbmQgQ1NTIHRlbXBsYXRlIFVSTHMuXHJcbiAqXHJcbiAqIFRoaXMgaW50ZXJmYWNlIGNhbiBiZSBvdmVycmlkZGVuIGJ5IHRoZSBhcHBsaWNhdGlvbiBkZXZlbG9wZXIgdG8gY3JlYXRlIGN1c3RvbSBiZWhhdmlvci5cclxuICpcclxuICogU2VlIHtAbGluayBDb21waWxlcn1cclxuICovXHJcbnZhciBVcmxSZXNvbHZlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBVcmxSZXNvbHZlcigpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVzb2x2ZXMgdGhlIGB1cmxgIGdpdmVuIHRoZSBgYmFzZVVybGA6XHJcbiAgICAgKiAtIHdoZW4gdGhlIGB1cmxgIGlzIG51bGwsIHRoZSBgYmFzZVVybGAgaXMgcmV0dXJuZWQsXHJcbiAgICAgKiAtIGlmIGB1cmxgIGlzIHJlbGF0aXZlICgncGF0aC90by9oZXJlJywgJy4vcGF0aC90by9oZXJlJyksIHRoZSByZXNvbHZlZCB1cmwgaXMgYSBjb21iaW5hdGlvbiBvZlxyXG4gICAgICogYGJhc2VVcmxgIGFuZCBgdXJsYCxcclxuICAgICAqIC0gaWYgYHVybGAgaXMgYWJzb2x1dGUgKGl0IGhhcyBhIHNjaGVtZTogJ2h0dHA6Ly8nLCAnaHR0cHM6Ly8nIG9yIHN0YXJ0IHdpdGggJy8nKSwgdGhlIGB1cmxgIGlzXHJcbiAgICAgKiByZXR1cm5lZCBhcyBpcyAoaWdub3JpbmcgdGhlIGBiYXNlVXJsYClcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVybFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHJlc29sdmVkIFVSTFxyXG4gICAgICovXHJcbiAgICBVcmxSZXNvbHZlci5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIChiYXNlVXJsLCB1cmwpIHsgcmV0dXJuIF9yZXNvbHZlVXJsKGJhc2VVcmwsIHVybCk7IH07XHJcbiAgICBVcmxSZXNvbHZlciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgVXJsUmVzb2x2ZXIpO1xyXG4gICAgcmV0dXJuIFVybFJlc29sdmVyO1xyXG59KSgpO1xyXG5leHBvcnRzLlVybFJlc29sdmVyID0gVXJsUmVzb2x2ZXI7XHJcbi8vIFRoZSBjb2RlIGJlbG93IGlzIGFkYXB0ZWQgZnJvbSBUcmFjZXVyOlxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3RyYWNldXItY29tcGlsZXIvYmxvYi85NTExYzFkYWZhOTcyYmYwZGUxMjAyYThhODYzYmFkMDJmMGY5NWE4L3NyYy9ydW50aW1lL3VybC5qc1xyXG4vKipcclxuICogQnVpbGRzIGEgVVJJIHN0cmluZyBmcm9tIGFscmVhZHktZW5jb2RlZCBwYXJ0cy5cclxuICpcclxuICogTm8gZW5jb2RpbmcgaXMgcGVyZm9ybWVkLiAgQW55IGNvbXBvbmVudCBtYXkgYmUgb21pdHRlZCBhcyBlaXRoZXIgbnVsbCBvclxyXG4gKiB1bmRlZmluZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9zY2hlbWUgVGhlIHNjaGVtZSBzdWNoIGFzICdodHRwJy5cclxuICogQHBhcmFtIHs/c3RyaW5nPX0gb3B0X3VzZXJJbmZvIFRoZSB1c2VyIG5hbWUgYmVmb3JlIHRoZSAnQCcuXHJcbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9kb21haW4gVGhlIGRvbWFpbiBzdWNoIGFzICd3d3cuZ29vZ2xlLmNvbScsIGFscmVhZHlcclxuICogICAgIFVSSS1lbmNvZGVkLlxyXG4gKiBAcGFyYW0geyhzdHJpbmd8bnVsbCk9fSBvcHRfcG9ydCBUaGUgcG9ydCBudW1iZXIuXHJcbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9wYXRoIFRoZSBwYXRoLCBhbHJlYWR5IFVSSS1lbmNvZGVkLiAgSWYgaXQgaXMgbm90XHJcbiAqICAgICBlbXB0eSwgaXQgbXVzdCBiZWdpbiB3aXRoIGEgc2xhc2guXHJcbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9xdWVyeURhdGEgVGhlIFVSSS1lbmNvZGVkIHF1ZXJ5IGRhdGEuXHJcbiAqIEBwYXJhbSB7P3N0cmluZz19IG9wdF9mcmFnbWVudCBUaGUgVVJJLWVuY29kZWQgZnJhZ21lbnQgaWRlbnRpZmllci5cclxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZnVsbHkgY29tYmluZWQgVVJJLlxyXG4gKi9cclxuZnVuY3Rpb24gX2J1aWxkRnJvbUVuY29kZWRQYXJ0cyhvcHRfc2NoZW1lLCBvcHRfdXNlckluZm8sIG9wdF9kb21haW4sIG9wdF9wb3J0LCBvcHRfcGF0aCwgb3B0X3F1ZXJ5RGF0YSwgb3B0X2ZyYWdtZW50KSB7XHJcbiAgICB2YXIgb3V0ID0gW107XHJcbiAgICBpZiAobGFuZ18xLmlzUHJlc2VudChvcHRfc2NoZW1lKSkge1xyXG4gICAgICAgIG91dC5wdXNoKG9wdF9zY2hlbWUgKyAnOicpO1xyXG4gICAgfVxyXG4gICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQob3B0X2RvbWFpbikpIHtcclxuICAgICAgICBvdXQucHVzaCgnLy8nKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChvcHRfdXNlckluZm8pKSB7XHJcbiAgICAgICAgICAgIG91dC5wdXNoKG9wdF91c2VySW5mbyArICdAJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG91dC5wdXNoKG9wdF9kb21haW4pO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KG9wdF9wb3J0KSkge1xyXG4gICAgICAgICAgICBvdXQucHVzaCgnOicgKyBvcHRfcG9ydCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQob3B0X3BhdGgpKSB7XHJcbiAgICAgICAgb3V0LnB1c2gob3B0X3BhdGgpO1xyXG4gICAgfVxyXG4gICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQob3B0X3F1ZXJ5RGF0YSkpIHtcclxuICAgICAgICBvdXQucHVzaCgnPycgKyBvcHRfcXVlcnlEYXRhKTtcclxuICAgIH1cclxuICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KG9wdF9mcmFnbWVudCkpIHtcclxuICAgICAgICBvdXQucHVzaCgnIycgKyBvcHRfZnJhZ21lbnQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dC5qb2luKCcnKTtcclxufVxyXG4vKipcclxuICogQSByZWd1bGFyIGV4cHJlc3Npb24gZm9yIGJyZWFraW5nIGEgVVJJIGludG8gaXRzIGNvbXBvbmVudCBwYXJ0cy5cclxuICpcclxuICoge0BsaW5rIGh0dHA6Ly93d3cuZ2Jpdi5jb20vcHJvdG9jb2xzL3VyaS9yZmMvcmZjMzk4Ni5odG1sI1JGQzIyMzR9IHNheXNcclxuICogQXMgdGhlIFwiZmlyc3QtbWF0Y2gtd2luc1wiIGFsZ29yaXRobSBpcyBpZGVudGljYWwgdG8gdGhlIFwiZ3JlZWR5XCJcclxuICogZGlzYW1iaWd1YXRpb24gbWV0aG9kIHVzZWQgYnkgUE9TSVggcmVndWxhciBleHByZXNzaW9ucywgaXQgaXMgbmF0dXJhbCBhbmRcclxuICogY29tbW9ucGxhY2UgdG8gdXNlIGEgcmVndWxhciBleHByZXNzaW9uIGZvciBwYXJzaW5nIHRoZSBwb3RlbnRpYWwgZml2ZVxyXG4gKiBjb21wb25lbnRzIG9mIGEgVVJJIHJlZmVyZW5jZS5cclxuICpcclxuICogVGhlIGZvbGxvd2luZyBsaW5lIGlzIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gZm9yIGJyZWFraW5nLWRvd24gYVxyXG4gKiB3ZWxsLWZvcm1lZCBVUkkgcmVmZXJlbmNlIGludG8gaXRzIGNvbXBvbmVudHMuXHJcbiAqXHJcbiAqIDxwcmU+XHJcbiAqIF4oKFteOi8/I10rKTopPygvLyhbXi8/I10qKSk/KFtePyNdKikoXFw/KFteI10qKSk/KCMoLiopKT9cclxuICogIDEyICAgICAgICAgICAgMyAgNCAgICAgICAgICA1ICAgICAgIDYgIDcgICAgICAgIDggOVxyXG4gKiA8L3ByZT5cclxuICpcclxuICogVGhlIG51bWJlcnMgaW4gdGhlIHNlY29uZCBsaW5lIGFib3ZlIGFyZSBvbmx5IHRvIGFzc2lzdCByZWFkYWJpbGl0eTsgdGhleVxyXG4gKiBpbmRpY2F0ZSB0aGUgcmVmZXJlbmNlIHBvaW50cyBmb3IgZWFjaCBzdWJleHByZXNzaW9uIChpLmUuLCBlYWNoIHBhaXJlZFxyXG4gKiBwYXJlbnRoZXNpcykuIFdlIHJlZmVyIHRvIHRoZSB2YWx1ZSBtYXRjaGVkIGZvciBzdWJleHByZXNzaW9uIDxuPiBhcyAkPG4+LlxyXG4gKiBGb3IgZXhhbXBsZSwgbWF0Y2hpbmcgdGhlIGFib3ZlIGV4cHJlc3Npb24gdG9cclxuICogPHByZT5cclxuICogICAgIGh0dHA6Ly93d3cuaWNzLnVjaS5lZHUvcHViL2lldGYvdXJpLyNSZWxhdGVkXHJcbiAqIDwvcHJlPlxyXG4gKiByZXN1bHRzIGluIHRoZSBmb2xsb3dpbmcgc3ViZXhwcmVzc2lvbiBtYXRjaGVzOlxyXG4gKiA8cHJlPlxyXG4gKiAgICAkMSA9IGh0dHA6XHJcbiAqICAgICQyID0gaHR0cFxyXG4gKiAgICAkMyA9IC8vd3d3Lmljcy51Y2kuZWR1XHJcbiAqICAgICQ0ID0gd3d3Lmljcy51Y2kuZWR1XHJcbiAqICAgICQ1ID0gL3B1Yi9pZXRmL3VyaS9cclxuICogICAgJDYgPSA8dW5kZWZpbmVkPlxyXG4gKiAgICAkNyA9IDx1bmRlZmluZWQ+XHJcbiAqICAgICQ4ID0gI1JlbGF0ZWRcclxuICogICAgJDkgPSBSZWxhdGVkXHJcbiAqIDwvcHJlPlxyXG4gKiB3aGVyZSA8dW5kZWZpbmVkPiBpbmRpY2F0ZXMgdGhhdCB0aGUgY29tcG9uZW50IGlzIG5vdCBwcmVzZW50LCBhcyBpcyB0aGVcclxuICogY2FzZSBmb3IgdGhlIHF1ZXJ5IGNvbXBvbmVudCBpbiB0aGUgYWJvdmUgZXhhbXBsZS4gVGhlcmVmb3JlLCB3ZSBjYW5cclxuICogZGV0ZXJtaW5lIHRoZSB2YWx1ZSBvZiB0aGUgZml2ZSBjb21wb25lbnRzIGFzXHJcbiAqIDxwcmU+XHJcbiAqICAgIHNjaGVtZSAgICA9ICQyXHJcbiAqICAgIGF1dGhvcml0eSA9ICQ0XHJcbiAqICAgIHBhdGggICAgICA9ICQ1XHJcbiAqICAgIHF1ZXJ5ICAgICA9ICQ3XHJcbiAqICAgIGZyYWdtZW50ICA9ICQ5XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBUaGUgcmVndWxhciBleHByZXNzaW9uIGhhcyBiZWVuIG1vZGlmaWVkIHNsaWdodGx5IHRvIGV4cG9zZSB0aGVcclxuICogdXNlckluZm8sIGRvbWFpbiwgYW5kIHBvcnQgc2VwYXJhdGVseSBmcm9tIHRoZSBhdXRob3JpdHkuXHJcbiAqIFRoZSBtb2RpZmllZCB2ZXJzaW9uIHlpZWxkc1xyXG4gKiA8cHJlPlxyXG4gKiAgICAkMSA9IGh0dHAgICAgICAgICAgICAgIHNjaGVtZVxyXG4gKiAgICAkMiA9IDx1bmRlZmluZWQ+ICAgICAgIHVzZXJJbmZvIC1cXFxyXG4gKiAgICAkMyA9IHd3dy5pY3MudWNpLmVkdSAgIGRvbWFpbiAgICAgfCBhdXRob3JpdHlcclxuICogICAgJDQgPSA8dW5kZWZpbmVkPiAgICAgICBwb3J0ICAgICAtL1xyXG4gKiAgICAkNSA9IC9wdWIvaWV0Zi91cmkvICAgIHBhdGhcclxuICogICAgJDYgPSA8dW5kZWZpbmVkPiAgICAgICBxdWVyeSB3aXRob3V0ID9cclxuICogICAgJDcgPSBSZWxhdGVkICAgICAgICAgICBmcmFnbWVudCB3aXRob3V0ICNcclxuICogPC9wcmU+XHJcbiAqIEB0eXBlIHshUmVnRXhwfVxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbnZhciBfc3BsaXRSZSA9IGxhbmdfMS5SZWdFeHBXcmFwcGVyLmNyZWF0ZSgnXicgK1xyXG4gICAgJyg/OicgK1xyXG4gICAgJyhbXjovPyMuXSspJyArXHJcbiAgICAvLyB1c2VkIGJ5IG90aGVyIFVSTCBwYXJ0cyBzdWNoIGFzIDosXHJcbiAgICAvLyA/LCAvLCAjLCBhbmQgLlxyXG4gICAgJzopPycgK1xyXG4gICAgJyg/Oi8vJyArXHJcbiAgICAnKD86KFteLz8jXSopQCk/JyArXHJcbiAgICAnKFtcXFxcd1xcXFxkXFxcXC1cXFxcdTAxMDAtXFxcXHVmZmZmLiVdKiknICtcclxuICAgIC8vIGRpZ2l0cywgZGFzaGVzLCBkb3RzLCBwZXJjZW50XHJcbiAgICAvLyBlc2NhcGVzLCBhbmQgdW5pY29kZSBjaGFyYWN0ZXJzLlxyXG4gICAgJyg/OjooWzAtOV0rKSk/JyArXHJcbiAgICAnKT8nICtcclxuICAgICcoW14/I10rKT8nICtcclxuICAgICcoPzpcXFxcPyhbXiNdKikpPycgK1xyXG4gICAgJyg/OiMoLiopKT8nICtcclxuICAgICckJyk7XHJcbi8qKlxyXG4gKiBUaGUgaW5kZXggb2YgZWFjaCBVUkkgY29tcG9uZW50IGluIHRoZSByZXR1cm4gdmFsdWUgb2YgZ29vZy51cmkudXRpbHMuc3BsaXQuXHJcbiAqIEBlbnVtIHtudW1iZXJ9XHJcbiAqL1xyXG52YXIgX0NvbXBvbmVudEluZGV4O1xyXG4oZnVuY3Rpb24gKF9Db21wb25lbnRJbmRleCkge1xyXG4gICAgX0NvbXBvbmVudEluZGV4W19Db21wb25lbnRJbmRleFtcIlNjaGVtZVwiXSA9IDFdID0gXCJTY2hlbWVcIjtcclxuICAgIF9Db21wb25lbnRJbmRleFtfQ29tcG9uZW50SW5kZXhbXCJVc2VySW5mb1wiXSA9IDJdID0gXCJVc2VySW5mb1wiO1xyXG4gICAgX0NvbXBvbmVudEluZGV4W19Db21wb25lbnRJbmRleFtcIkRvbWFpblwiXSA9IDNdID0gXCJEb21haW5cIjtcclxuICAgIF9Db21wb25lbnRJbmRleFtfQ29tcG9uZW50SW5kZXhbXCJQb3J0XCJdID0gNF0gPSBcIlBvcnRcIjtcclxuICAgIF9Db21wb25lbnRJbmRleFtfQ29tcG9uZW50SW5kZXhbXCJQYXRoXCJdID0gNV0gPSBcIlBhdGhcIjtcclxuICAgIF9Db21wb25lbnRJbmRleFtfQ29tcG9uZW50SW5kZXhbXCJRdWVyeURhdGFcIl0gPSA2XSA9IFwiUXVlcnlEYXRhXCI7XHJcbiAgICBfQ29tcG9uZW50SW5kZXhbX0NvbXBvbmVudEluZGV4W1wiRnJhZ21lbnRcIl0gPSA3XSA9IFwiRnJhZ21lbnRcIjtcclxufSkoX0NvbXBvbmVudEluZGV4IHx8IChfQ29tcG9uZW50SW5kZXggPSB7fSkpO1xyXG4vKipcclxuICogU3BsaXRzIGEgVVJJIGludG8gaXRzIGNvbXBvbmVudCBwYXJ0cy5cclxuICpcclxuICogRWFjaCBjb21wb25lbnQgY2FuIGJlIGFjY2Vzc2VkIHZpYSB0aGUgY29tcG9uZW50IGluZGljZXM7IGZvciBleGFtcGxlOlxyXG4gKiA8cHJlPlxyXG4gKiBnb29nLnVyaS51dGlscy5zcGxpdChzb21lU3RyKVtnb29nLnVyaS51dGlscy5Db21wb250ZW50SW5kZXguUVVFUllfREFUQV07XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJpIFRoZSBVUkkgc3RyaW5nIHRvIGV4YW1pbmUuXHJcbiAqIEByZXR1cm4geyFBcnJheS48c3RyaW5nfHVuZGVmaW5lZD59IEVhY2ggY29tcG9uZW50IHN0aWxsIFVSSS1lbmNvZGVkLlxyXG4gKiAgICAgRWFjaCBjb21wb25lbnQgdGhhdCBpcyBwcmVzZW50IHdpbGwgY29udGFpbiB0aGUgZW5jb2RlZCB2YWx1ZSwgd2hlcmVhc1xyXG4gKiAgICAgY29tcG9uZW50cyB0aGF0IGFyZSBub3QgcHJlc2VudCB3aWxsIGJlIHVuZGVmaW5lZCBvciBlbXB0eSwgZGVwZW5kaW5nXHJcbiAqICAgICBvbiB0aGUgYnJvd3NlcidzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpbXBsZW1lbnRhdGlvbi4gIE5ldmVyIG51bGwsIHNpbmNlXHJcbiAqICAgICBhcmJpdHJhcnkgc3RyaW5ncyBtYXkgc3RpbGwgbG9vayBsaWtlIHBhdGggbmFtZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBfc3BsaXQodXJpKSB7XHJcbiAgICByZXR1cm4gbGFuZ18xLlJlZ0V4cFdyYXBwZXIuZmlyc3RNYXRjaChfc3BsaXRSZSwgdXJpKTtcclxufVxyXG4vKipcclxuICAqIFJlbW92ZXMgZG90IHNlZ21lbnRzIGluIGdpdmVuIHBhdGggY29tcG9uZW50LCBhcyBkZXNjcmliZWQgaW5cclxuICAqIFJGQyAzOTg2LCBzZWN0aW9uIDUuMi40LlxyXG4gICpcclxuICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIEEgbm9uLWVtcHR5IHBhdGggY29tcG9uZW50LlxyXG4gICogQHJldHVybiB7c3RyaW5nfSBQYXRoIGNvbXBvbmVudCB3aXRoIHJlbW92ZWQgZG90IHNlZ21lbnRzLlxyXG4gICovXHJcbmZ1bmN0aW9uIF9yZW1vdmVEb3RTZWdtZW50cyhwYXRoKSB7XHJcbiAgICBpZiAocGF0aCA9PSAnLycpXHJcbiAgICAgICAgcmV0dXJuICcvJztcclxuICAgIHZhciBsZWFkaW5nU2xhc2ggPSBwYXRoWzBdID09ICcvJyA/ICcvJyA6ICcnO1xyXG4gICAgdmFyIHRyYWlsaW5nU2xhc2ggPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV0gPT09ICcvJyA/ICcvJyA6ICcnO1xyXG4gICAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLycpO1xyXG4gICAgdmFyIG91dCA9IFtdO1xyXG4gICAgdmFyIHVwID0gMDtcclxuICAgIGZvciAodmFyIHBvcyA9IDA7IHBvcyA8IHNlZ21lbnRzLmxlbmd0aDsgcG9zKyspIHtcclxuICAgICAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRzW3Bvc107XHJcbiAgICAgICAgc3dpdGNoIChzZWdtZW50KSB7XHJcbiAgICAgICAgICAgIGNhc2UgJyc6XHJcbiAgICAgICAgICAgIGNhc2UgJy4nOlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJy4uJzpcclxuICAgICAgICAgICAgICAgIGlmIChvdXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG91dC5wb3AoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIG91dC5wdXNoKHNlZ21lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChsZWFkaW5nU2xhc2ggPT0gJycpIHtcclxuICAgICAgICB3aGlsZSAodXAtLSA+IDApIHtcclxuICAgICAgICAgICAgb3V0LnVuc2hpZnQoJy4uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvdXQubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICBvdXQucHVzaCgnLicpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxlYWRpbmdTbGFzaCArIG91dC5qb2luKCcvJykgKyB0cmFpbGluZ1NsYXNoO1xyXG59XHJcbi8qKlxyXG4gKiBUYWtlcyBhbiBhcnJheSBvZiB0aGUgcGFydHMgZnJvbSBzcGxpdCBhbmQgY2Fub25pY2FsaXplcyB0aGUgcGF0aCBwYXJ0XHJcbiAqIGFuZCB0aGVuIGpvaW5zIGFsbCB0aGUgcGFydHMuXHJcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz8+fSBwYXJ0c1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5mdW5jdGlvbiBfam9pbkFuZENhbm9uaWNhbGl6ZVBhdGgocGFydHMpIHtcclxuICAgIHZhciBwYXRoID0gcGFydHNbX0NvbXBvbmVudEluZGV4LlBhdGhdO1xyXG4gICAgcGF0aCA9IGxhbmdfMS5pc0JsYW5rKHBhdGgpID8gJycgOiBfcmVtb3ZlRG90U2VnbWVudHMocGF0aCk7XHJcbiAgICBwYXJ0c1tfQ29tcG9uZW50SW5kZXguUGF0aF0gPSBwYXRoO1xyXG4gICAgcmV0dXJuIF9idWlsZEZyb21FbmNvZGVkUGFydHMocGFydHNbX0NvbXBvbmVudEluZGV4LlNjaGVtZV0sIHBhcnRzW19Db21wb25lbnRJbmRleC5Vc2VySW5mb10sIHBhcnRzW19Db21wb25lbnRJbmRleC5Eb21haW5dLCBwYXJ0c1tfQ29tcG9uZW50SW5kZXguUG9ydF0sIHBhdGgsIHBhcnRzW19Db21wb25lbnRJbmRleC5RdWVyeURhdGFdLCBwYXJ0c1tfQ29tcG9uZW50SW5kZXguRnJhZ21lbnRdKTtcclxufVxyXG4vKipcclxuICogUmVzb2x2ZXMgYSBVUkwuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlIFRoZSBVUkwgYWN0aW5nIGFzIHRoZSBiYXNlIFVSTC5cclxuICogQHBhcmFtIHtzdHJpbmd9IHRvIFRoZSBVUkwgdG8gcmVzb2x2ZS5cclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxuZnVuY3Rpb24gX3Jlc29sdmVVcmwoYmFzZSwgdXJsKSB7XHJcbiAgICB2YXIgcGFydHMgPSBfc3BsaXQoZW5jb2RlVVJJKHVybCkpO1xyXG4gICAgdmFyIGJhc2VQYXJ0cyA9IF9zcGxpdChiYXNlKTtcclxuICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHBhcnRzW19Db21wb25lbnRJbmRleC5TY2hlbWVdKSkge1xyXG4gICAgICAgIHJldHVybiBfam9pbkFuZENhbm9uaWNhbGl6ZVBhdGgocGFydHMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcGFydHNbX0NvbXBvbmVudEluZGV4LlNjaGVtZV0gPSBiYXNlUGFydHNbX0NvbXBvbmVudEluZGV4LlNjaGVtZV07XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gX0NvbXBvbmVudEluZGV4LlNjaGVtZTsgaSA8PSBfQ29tcG9uZW50SW5kZXguUG9ydDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHBhcnRzW2ldKSkge1xyXG4gICAgICAgICAgICBwYXJ0c1tpXSA9IGJhc2VQYXJ0c1tpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocGFydHNbX0NvbXBvbmVudEluZGV4LlBhdGhdWzBdID09ICcvJykge1xyXG4gICAgICAgIHJldHVybiBfam9pbkFuZENhbm9uaWNhbGl6ZVBhdGgocGFydHMpO1xyXG4gICAgfVxyXG4gICAgdmFyIHBhdGggPSBiYXNlUGFydHNbX0NvbXBvbmVudEluZGV4LlBhdGhdO1xyXG4gICAgaWYgKGxhbmdfMS5pc0JsYW5rKHBhdGgpKVxyXG4gICAgICAgIHBhdGggPSAnLyc7XHJcbiAgICB2YXIgaW5kZXggPSBwYXRoLmxhc3RJbmRleE9mKCcvJyk7XHJcbiAgICBwYXRoID0gcGF0aC5zdWJzdHJpbmcoMCwgaW5kZXggKyAxKSArIHBhcnRzW19Db21wb25lbnRJbmRleC5QYXRoXTtcclxuICAgIHBhcnRzW19Db21wb25lbnRJbmRleC5QYXRoXSA9IHBhdGg7XHJcbiAgICByZXR1cm4gX2pvaW5BbmRDYW5vbmljYWxpemVQYXRoKHBhcnRzKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmxfcmVzb2x2ZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgQ0FNRUxfQ0FTRV9SRUdFWFAgPSAvKFtBLVpdKS9nO1xyXG52YXIgREFTSF9DQVNFX1JFR0VYUCA9IC8tKFthLXpdKS9nO1xyXG52YXIgU0lOR0xFX1FVT1RFX0VTQ0FQRV9TVFJJTkdfUkUgPSAvJ3xcXFxcfFxcbnxcXCQvZztcclxudmFyIERPVUJMRV9RVU9URV9FU0NBUEVfU1RSSU5HX1JFID0gL1wifFxcXFx8XFxufFxcJC9nO1xyXG5leHBvcnRzLklTX0RBUlQgPSAhbGFuZ18xLmlzSnNPYmplY3Qoe30pO1xyXG5leHBvcnRzLk1PRFVMRV9TVUZGSVggPSBleHBvcnRzLklTX0RBUlQgPyAnLmRhcnQnIDogJy5qcyc7XHJcbmZ1bmN0aW9uIGNhbWVsQ2FzZVRvRGFzaENhc2UoaW5wdXQpIHtcclxuICAgIHJldHVybiBsYW5nXzEuU3RyaW5nV3JhcHBlci5yZXBsYWNlQWxsTWFwcGVkKGlucHV0LCBDQU1FTF9DQVNFX1JFR0VYUCwgZnVuY3Rpb24gKG0pIHsgcmV0dXJuICctJyArIG1bMV0udG9Mb3dlckNhc2UoKTsgfSk7XHJcbn1cclxuZXhwb3J0cy5jYW1lbENhc2VUb0Rhc2hDYXNlID0gY2FtZWxDYXNlVG9EYXNoQ2FzZTtcclxuZnVuY3Rpb24gZGFzaENhc2VUb0NhbWVsQ2FzZShpbnB1dCkge1xyXG4gICAgcmV0dXJuIGxhbmdfMS5TdHJpbmdXcmFwcGVyLnJlcGxhY2VBbGxNYXBwZWQoaW5wdXQsIERBU0hfQ0FTRV9SRUdFWFAsIGZ1bmN0aW9uIChtKSB7IHJldHVybiBtWzFdLnRvVXBwZXJDYXNlKCk7IH0pO1xyXG59XHJcbmV4cG9ydHMuZGFzaENhc2VUb0NhbWVsQ2FzZSA9IGRhc2hDYXNlVG9DYW1lbENhc2U7XHJcbmZ1bmN0aW9uIGVzY2FwZVNpbmdsZVF1b3RlU3RyaW5nKGlucHV0KSB7XHJcbiAgICBpZiAobGFuZ18xLmlzQmxhbmsoaW5wdXQpKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gXCInXCIgKyBlc2NhcGVTdHJpbmcoaW5wdXQsIFNJTkdMRV9RVU9URV9FU0NBUEVfU1RSSU5HX1JFKSArIFwiJ1wiO1xyXG59XHJcbmV4cG9ydHMuZXNjYXBlU2luZ2xlUXVvdGVTdHJpbmcgPSBlc2NhcGVTaW5nbGVRdW90ZVN0cmluZztcclxuZnVuY3Rpb24gZXNjYXBlRG91YmxlUXVvdGVTdHJpbmcoaW5wdXQpIHtcclxuICAgIGlmIChsYW5nXzEuaXNCbGFuayhpbnB1dCkpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiBcIlxcXCJcIiArIGVzY2FwZVN0cmluZyhpbnB1dCwgRE9VQkxFX1FVT1RFX0VTQ0FQRV9TVFJJTkdfUkUpICsgXCJcXFwiXCI7XHJcbn1cclxuZXhwb3J0cy5lc2NhcGVEb3VibGVRdW90ZVN0cmluZyA9IGVzY2FwZURvdWJsZVF1b3RlU3RyaW5nO1xyXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcoaW5wdXQsIHJlKSB7XHJcbiAgICByZXR1cm4gbGFuZ18xLlN0cmluZ1dyYXBwZXIucmVwbGFjZUFsbE1hcHBlZChpbnB1dCwgcmUsIGZ1bmN0aW9uIChtYXRjaCkge1xyXG4gICAgICAgIGlmIChtYXRjaFswXSA9PSAnJCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMuSVNfREFSVCA/ICdcXFxcJCcgOiAnJCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG1hdGNoWzBdID09ICdcXG4nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnXFxcXG4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXFxcXFwiICsgbWF0Y2hbMF07XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gY29kZUdlbkV4cG9ydFZhcmlhYmxlKG5hbWUsIGlzQ29uc3QpIHtcclxuICAgIGlmIChpc0NvbnN0ID09PSB2b2lkIDApIHsgaXNDb25zdCA9IGZhbHNlOyB9XHJcbiAgICB2YXIgZGVjbGFyYXRpb24gPSBleHBvcnRzLklTX0RBUlQgJiYgaXNDb25zdCA/IFwiY29uc3QgXCIgKyBuYW1lIDogXCJ2YXIgXCIgKyBuYW1lO1xyXG4gICAgcmV0dXJuIGV4cG9ydHMuSVNfREFSVCA/IGRlY2xhcmF0aW9uICsgXCIgPSBcIiA6IGRlY2xhcmF0aW9uICsgXCIgPSBleHBvcnRzWydcIiArIG5hbWUgKyBcIiddID0gXCI7XHJcbn1cclxuZXhwb3J0cy5jb2RlR2VuRXhwb3J0VmFyaWFibGUgPSBjb2RlR2VuRXhwb3J0VmFyaWFibGU7XHJcbmZ1bmN0aW9uIGNvZGVHZW5Db25jYXRBcnJheShleHByZXNzaW9uKSB7XHJcbiAgICByZXR1cm4gKGV4cG9ydHMuSVNfREFSVCA/ICcuLmFkZEFsbCcgOiAnLmNvbmNhdCcpICsgXCIoXCIgKyBleHByZXNzaW9uICsgXCIpXCI7XHJcbn1cclxuZXhwb3J0cy5jb2RlR2VuQ29uY2F0QXJyYXkgPSBjb2RlR2VuQ29uY2F0QXJyYXk7XHJcbmZ1bmN0aW9uIGNvZGVHZW5NYXBBcnJheShhcmdOYW1lcywgY2FsbGJhY2spIHtcclxuICAgIGlmIChleHBvcnRzLklTX0RBUlQpIHtcclxuICAgICAgICByZXR1cm4gXCIubWFwKCAoXCIgKyBhcmdOYW1lcy5qb2luKCcsJykgKyBcIikgPT4gXCIgKyBjYWxsYmFjayArIFwiICkudG9MaXN0KClcIjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBcIi5tYXAoZnVuY3Rpb24oXCIgKyBhcmdOYW1lcy5qb2luKCcsJykgKyBcIikgeyByZXR1cm4gXCIgKyBjYWxsYmFjayArIFwiOyB9KVwiO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuY29kZUdlbk1hcEFycmF5ID0gY29kZUdlbk1hcEFycmF5O1xyXG5mdW5jdGlvbiBjb2RlR2VuUmVwbGFjZUFsbChwYXR0ZXJuLCBleHByZXNzaW9uKSB7XHJcbiAgICBpZiAoZXhwb3J0cy5JU19EQVJUKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiLnJlcGxhY2VBbGwoJ1wiICsgcGF0dGVybiArIFwiJywgXCIgKyBleHByZXNzaW9uICsgXCIpXCI7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gXCIucmVwbGFjZSgvXCIgKyBwYXR0ZXJuICsgXCIvZywgXCIgKyBleHByZXNzaW9uICsgXCIpXCI7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5jb2RlR2VuUmVwbGFjZUFsbCA9IGNvZGVHZW5SZXBsYWNlQWxsO1xyXG5mdW5jdGlvbiBjb2RlR2VuVmFsdWVGbihwYXJhbXMsIHZhbHVlLCBmbk5hbWUpIHtcclxuICAgIGlmIChmbk5hbWUgPT09IHZvaWQgMCkgeyBmbk5hbWUgPSAnJzsgfVxyXG4gICAgaWYgKGV4cG9ydHMuSVNfREFSVCkge1xyXG4gICAgICAgIHJldHVybiBmbk5hbWUgKyBcIihcIiArIHBhcmFtcy5qb2luKCcsJykgKyBcIikgPT4gXCIgKyB2YWx1ZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBcImZ1bmN0aW9uIFwiICsgZm5OYW1lICsgXCIoXCIgKyBwYXJhbXMuam9pbignLCcpICsgXCIpIHsgcmV0dXJuIFwiICsgdmFsdWUgKyBcIjsgfVwiO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuY29kZUdlblZhbHVlRm4gPSBjb2RlR2VuVmFsdWVGbjtcclxuZnVuY3Rpb24gY29kZUdlblRvU3RyaW5nKGV4cHIpIHtcclxuICAgIGlmIChleHBvcnRzLklTX0RBUlQpIHtcclxuICAgICAgICByZXR1cm4gXCInJHtcIiArIGV4cHIgKyBcIn0nXCI7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBKUyBhdXRvbWF0aWNhbGx5IGNvbnZldHMgdG8gc3RyaW5nLi4uXHJcbiAgICAgICAgcmV0dXJuIGV4cHI7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5jb2RlR2VuVG9TdHJpbmcgPSBjb2RlR2VuVG9TdHJpbmc7XHJcbmZ1bmN0aW9uIHNwbGl0QXRDb2xvbihpbnB1dCwgZGVmYXVsdFZhbHVlcykge1xyXG4gICAgdmFyIHBhcnRzID0gbGFuZ18xLlN0cmluZ1dyYXBwZXIuc3BsaXQoaW5wdXQudHJpbSgpLCAvXFxzKjpcXHMqL2cpO1xyXG4gICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICByZXR1cm4gcGFydHM7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlcztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnNwbGl0QXRDb2xvbiA9IHNwbGl0QXRDb2xvbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIFhIUiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBYSFIoKSB7XHJcbiAgICB9XHJcbiAgICBYSFIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICh1cmwpIHsgcmV0dXJuIG51bGw7IH07XHJcbiAgICByZXR1cm4gWEhSO1xyXG59KSgpO1xyXG5leHBvcnRzLlhIUiA9IFhIUjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9eGhyLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgcHJvbWlzZV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL3Byb21pc2UnKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciB4aHJfMSA9IHJlcXVpcmUoJy4veGhyJyk7XHJcbnZhciBYSFJJbXBsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhYSFJJbXBsLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gWEhSSW1wbCgpIHtcclxuICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIH1cclxuICAgIFhIUkltcGwucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICB2YXIgY29tcGxldGVyID0gcHJvbWlzZV8xLlByb21pc2VXcmFwcGVyLmNvbXBsZXRlcigpO1xyXG4gICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICB4aHIub3BlbignR0VUJywgdXJsLCB0cnVlKTtcclxuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ3RleHQnO1xyXG4gICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIHJlc3BvbnNlVGV4dCBpcyB0aGUgb2xkLXNjaG9vbCB3YXkgb2YgcmV0cmlldmluZyByZXNwb25zZSAoc3VwcG9ydGVkIGJ5IElFOCAmIDkpXHJcbiAgICAgICAgICAgIC8vIHJlc3BvbnNlL3Jlc3BvbnNlVHlwZSBwcm9wZXJ0aWVzIHdlcmUgaW50cm9kdWNlZCBpbiBYSFIgTGV2ZWwyIHNwZWMgKHN1cHBvcnRlZCBieSBJRTEwKVxyXG4gICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBsYW5nXzEuaXNQcmVzZW50KHhoci5yZXNwb25zZSkgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0O1xyXG4gICAgICAgICAgICAvLyBub3JtYWxpemUgSUU5IGJ1ZyAoaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTQ1MClcclxuICAgICAgICAgICAgdmFyIHN0YXR1cyA9IHhoci5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiB4aHIuc3RhdHVzO1xyXG4gICAgICAgICAgICAvLyBmaXggc3RhdHVzIGNvZGUgd2hlbiBpdCBpcyAwICgwIHN0YXR1cyBpcyB1bmRvY3VtZW50ZWQpLlxyXG4gICAgICAgICAgICAvLyBPY2N1cnMgd2hlbiBhY2Nlc3NpbmcgZmlsZSByZXNvdXJjZXMgb3Igb24gQW5kcm9pZCA0LjEgc3RvY2sgYnJvd3NlclxyXG4gICAgICAgICAgICAvLyB3aGlsZSByZXRyaWV2aW5nIGZpbGVzIGZyb20gYXBwbGljYXRpb24gY2FjaGUuXHJcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHN0YXR1cyA9IHJlc3BvbnNlID8gMjAwIDogMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoMjAwIDw9IHN0YXR1cyAmJiBzdGF0dXMgPD0gMzAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZXIucmVzb2x2ZShyZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZXIucmVqZWN0KFwiRmFpbGVkIHRvIGxvYWQgXCIgKyB1cmwsIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHsgY29tcGxldGVyLnJlamVjdChcIkZhaWxlZCB0byBsb2FkIFwiICsgdXJsLCBudWxsKTsgfTtcclxuICAgICAgICB4aHIuc2VuZCgpO1xyXG4gICAgICAgIHJldHVybiBjb21wbGV0ZXIucHJvbWlzZTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gWEhSSW1wbDtcclxufSkoeGhyXzEuWEhSKTtcclxuZXhwb3J0cy5YSFJJbXBsID0gWEhSSW1wbDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9eGhyX2ltcGwuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBkZWJ1Z19lbGVtZW50XzEgPSByZXF1aXJlKCcuL2RlYnVnL2RlYnVnX2VsZW1lbnQnKTtcclxuZXhwb3J0cy5EZWJ1Z0VsZW1lbnQgPSBkZWJ1Z19lbGVtZW50XzEuRGVidWdFbGVtZW50O1xyXG5leHBvcnRzLmFzTmF0aXZlRWxlbWVudHMgPSBkZWJ1Z19lbGVtZW50XzEuYXNOYXRpdmVFbGVtZW50cztcclxuZXhwb3J0cy5CeSA9IGRlYnVnX2VsZW1lbnRfMS5CeTtcclxuZXhwb3J0cy5TY29wZSA9IGRlYnVnX2VsZW1lbnRfMS5TY29wZTtcclxuZXhwb3J0cy5pbnNwZWN0RWxlbWVudCA9IGRlYnVnX2VsZW1lbnRfMS5pbnNwZWN0RWxlbWVudDtcclxudmFyIGRlYnVnX2VsZW1lbnRfdmlld19saXN0ZW5lcl8xID0gcmVxdWlyZSgnLi9kZWJ1Zy9kZWJ1Z19lbGVtZW50X3ZpZXdfbGlzdGVuZXInKTtcclxuZXhwb3J0cy5pbnNwZWN0TmF0aXZlRWxlbWVudCA9IGRlYnVnX2VsZW1lbnRfdmlld19saXN0ZW5lcl8xLmluc3BlY3ROYXRpdmVFbGVtZW50O1xyXG5leHBvcnRzLkVMRU1FTlRfUFJPQkVfUFJPVklERVJTID0gZGVidWdfZWxlbWVudF92aWV3X2xpc3RlbmVyXzEuRUxFTUVOVF9QUk9CRV9QUk9WSURFUlM7XHJcbmV4cG9ydHMuRUxFTUVOVF9QUk9CRV9CSU5ESU5HUyA9IGRlYnVnX2VsZW1lbnRfdmlld19saXN0ZW5lcl8xLkVMRU1FTlRfUFJPQkVfQklORElOR1M7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgZG9tX2FkYXB0ZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RvbS9kb21fYWRhcHRlcicpO1xyXG52YXIgdmlld19yZWZfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlci92aWV3X3JlZicpO1xyXG4vKipcclxuICogQSBEZWJ1Z0VsZW1lbnQgY29udGFpbnMgaW5mb3JtYXRpb24gZnJvbSB0aGUgQW5ndWxhciBjb21waWxlciBhYm91dCBhblxyXG4gKiBlbGVtZW50IGFuZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGNvcnJlc3BvbmRpbmcgRWxlbWVudEluamVjdG9yIGFuZFxyXG4gKiB1bmRlcmx5aW5nIERPTSBFbGVtZW50LCBhcyB3ZWxsIGFzIGEgd2F5IHRvIHF1ZXJ5IGZvciBjaGlsZHJlbi5cclxuICovXHJcbnZhciBEZWJ1Z0VsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGVidWdFbGVtZW50KCkge1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERlYnVnRWxlbWVudC5wcm90b3R5cGUsIFwiY29tcG9uZW50SW5zdGFuY2VcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhjZXB0aW9uc18xLnVuaW1wbGVtZW50ZWQoKTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICA7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVidWdFbGVtZW50LnByb3RvdHlwZSwgXCJuYXRpdmVFbGVtZW50XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4Y2VwdGlvbnNfMS51bmltcGxlbWVudGVkKCk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERlYnVnRWxlbWVudC5wcm90b3R5cGUsIFwiZWxlbWVudFJlZlwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleGNlcHRpb25zXzEudW5pbXBsZW1lbnRlZCgpOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIDtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZWJ1Z0VsZW1lbnQucHJvdG90eXBlLCBcImNoaWxkcmVuXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZXQgY2hpbGQgRGVidWdFbGVtZW50cyBmcm9tIHdpdGhpbiB0aGUgTGlnaHQgRE9NLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJldHVybiB7RGVidWdFbGVtZW50W119XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleGNlcHRpb25zXzEudW5pbXBsZW1lbnRlZCgpOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIDtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZWJ1Z0VsZW1lbnQucHJvdG90eXBlLCBcImNvbXBvbmVudFZpZXdDaGlsZHJlblwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0IHRoZSByb290IERlYnVnRWxlbWVudCBjaGlsZHJlbiBvZiBhIGNvbXBvbmVudC4gUmV0dXJucyBhbiBlbXB0eVxyXG4gICAgICAgICAqIGxpc3QgaWYgdGhlIGN1cnJlbnQgRGVidWdFbGVtZW50IGlzIG5vdCBhIGNvbXBvbmVudCByb290LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJldHVybiB7RGVidWdFbGVtZW50W119XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleGNlcHRpb25zXzEudW5pbXBsZW1lbnRlZCgpOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRoZSBmaXJzdCBkZXNjZW5kYW50IFRlc3RFbGVtZW50IG1hdGNoaW5nIHRoZSBnaXZlbiBwcmVkaWNhdGVcclxuICAgICAqIGFuZCBzY29wZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uOiBib29sZWFufSBwcmVkaWNhdGVcclxuICAgICAqIEBwYXJhbSB7U2NvcGV9IHNjb3BlXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7RGVidWdFbGVtZW50fVxyXG4gICAgICovXHJcbiAgICBEZWJ1Z0VsZW1lbnQucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24gKHByZWRpY2F0ZSwgc2NvcGUpIHtcclxuICAgICAgICBpZiAoc2NvcGUgPT09IHZvaWQgMCkgeyBzY29wZSA9IFNjb3BlLmFsbDsgfVxyXG4gICAgICAgIHZhciByZXN1bHRzID0gdGhpcy5xdWVyeUFsbChwcmVkaWNhdGUsIHNjb3BlKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0cy5sZW5ndGggPiAwID8gcmVzdWx0c1swXSA6IG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gZGVzY2VuZGFudCBUZXN0RWxlbWVtdHMgbWF0Y2hpbmcgdGhlIGdpdmVuIHByZWRpY2F0ZVxyXG4gICAgICogYW5kIHNjb3BlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb246IGJvb2xlYW59IHByZWRpY2F0ZVxyXG4gICAgICogQHBhcmFtIHtTY29wZX0gc2NvcGVcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtEZWJ1Z0VsZW1lbnRbXX1cclxuICAgICAqL1xyXG4gICAgRGVidWdFbGVtZW50LnByb3RvdHlwZS5xdWVyeUFsbCA9IGZ1bmN0aW9uIChwcmVkaWNhdGUsIHNjb3BlKSB7XHJcbiAgICAgICAgaWYgKHNjb3BlID09PSB2b2lkIDApIHsgc2NvcGUgPSBTY29wZS5hbGw7IH1cclxuICAgICAgICB2YXIgZWxlbWVudHNJblNjb3BlID0gc2NvcGUodGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5maWx0ZXIoZWxlbWVudHNJblNjb3BlLCBwcmVkaWNhdGUpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEZWJ1Z0VsZW1lbnQ7XHJcbn0pKCk7XHJcbmV4cG9ydHMuRGVidWdFbGVtZW50ID0gRGVidWdFbGVtZW50O1xyXG52YXIgRGVidWdFbGVtZW50XyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRGVidWdFbGVtZW50XywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIERlYnVnRWxlbWVudF8oX3BhcmVudFZpZXcsIF9ib3VuZEVsZW1lbnRJbmRleCkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX3BhcmVudFZpZXcgPSBfcGFyZW50VmlldztcclxuICAgICAgICB0aGlzLl9ib3VuZEVsZW1lbnRJbmRleCA9IF9ib3VuZEVsZW1lbnRJbmRleDtcclxuICAgICAgICB0aGlzLl9lbGVtZW50SW5qZWN0b3IgPSB0aGlzLl9wYXJlbnRWaWV3LmVsZW1lbnRJbmplY3RvcnNbdGhpcy5fYm91bmRFbGVtZW50SW5kZXhdO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERlYnVnRWxlbWVudF8ucHJvdG90eXBlLCBcImNvbXBvbmVudEluc3RhbmNlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFsYW5nXzEuaXNQcmVzZW50KHRoaXMuX2VsZW1lbnRJbmplY3RvcikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50SW5qZWN0b3IuZ2V0Q29tcG9uZW50KCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVidWdFbGVtZW50Xy5wcm90b3R5cGUsIFwibmF0aXZlRWxlbWVudFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVidWdFbGVtZW50Xy5wcm90b3R5cGUsIFwiZWxlbWVudFJlZlwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wYXJlbnRWaWV3LmVsZW1lbnRSZWZzW3RoaXMuX2JvdW5kRWxlbWVudEluZGV4XTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBEZWJ1Z0VsZW1lbnRfLnByb3RvdHlwZS5nZXREaXJlY3RpdmVJbnN0YW5jZSA9IGZ1bmN0aW9uIChkaXJlY3RpdmVJbmRleCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50SW5qZWN0b3IuZ2V0RGlyZWN0aXZlQXRJbmRleChkaXJlY3RpdmVJbmRleCk7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERlYnVnRWxlbWVudF8ucHJvdG90eXBlLCBcImNoaWxkcmVuXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldENoaWxkRWxlbWVudHModGhpcy5fcGFyZW50VmlldywgdGhpcy5fYm91bmRFbGVtZW50SW5kZXgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERlYnVnRWxlbWVudF8ucHJvdG90eXBlLCBcImNvbXBvbmVudFZpZXdDaGlsZHJlblwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBzaGFkb3dWaWV3ID0gdGhpcy5fcGFyZW50Vmlldy5nZXROZXN0ZWRWaWV3KHRoaXMuX2JvdW5kRWxlbWVudEluZGV4KTtcclxuICAgICAgICAgICAgaWYgKCFsYW5nXzEuaXNQcmVzZW50KHNoYWRvd1ZpZXcpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGUgY3VycmVudCBlbGVtZW50IGlzIG5vdCBhIGNvbXBvbmVudC5cclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q2hpbGRFbGVtZW50cyhzaGFkb3dWaWV3LCBudWxsKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIERlYnVnRWxlbWVudF8ucHJvdG90eXBlLnRyaWdnZXJFdmVudEhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBldmVudE9iaikge1xyXG4gICAgICAgIHRoaXMuX3BhcmVudFZpZXcudHJpZ2dlckV2ZW50SGFuZGxlcnMoZXZlbnROYW1lLCBldmVudE9iaiwgdGhpcy5fYm91bmRFbGVtZW50SW5kZXgpO1xyXG4gICAgfTtcclxuICAgIERlYnVnRWxlbWVudF8ucHJvdG90eXBlLmhhc0RpcmVjdGl2ZSA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgaWYgKCFsYW5nXzEuaXNQcmVzZW50KHRoaXMuX2VsZW1lbnRJbmplY3RvcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudEluamVjdG9yLmhhc0RpcmVjdGl2ZSh0eXBlKTtcclxuICAgIH07XHJcbiAgICBEZWJ1Z0VsZW1lbnRfLnByb3RvdHlwZS5pbmplY3QgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgIGlmICghbGFuZ18xLmlzUHJlc2VudCh0aGlzLl9lbGVtZW50SW5qZWN0b3IpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudEluamVjdG9yLmdldCh0eXBlKTtcclxuICAgIH07XHJcbiAgICBEZWJ1Z0VsZW1lbnRfLnByb3RvdHlwZS5nZXRMb2NhbCA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiB0aGlzLl9wYXJlbnRWaWV3LmxvY2Fscy5nZXQobmFtZSk7IH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBEZWJ1Z0VsZW1lbnRfLnByb3RvdHlwZS5fZ2V0Q2hpbGRFbGVtZW50cyA9IGZ1bmN0aW9uICh2aWV3LCBwYXJlbnRCb3VuZEVsZW1lbnRJbmRleCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGVscyA9IFtdO1xyXG4gICAgICAgIHZhciBwYXJlbnRFbGVtZW50QmluZGVyID0gbnVsbDtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwYXJlbnRCb3VuZEVsZW1lbnRJbmRleCkpIHtcclxuICAgICAgICAgICAgcGFyZW50RWxlbWVudEJpbmRlciA9IHZpZXcucHJvdG8uZWxlbWVudEJpbmRlcnNbcGFyZW50Qm91bmRFbGVtZW50SW5kZXggLSB2aWV3LmVsZW1lbnRPZmZzZXRdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcucHJvdG8uZWxlbWVudEJpbmRlcnMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIGJpbmRlciA9IHZpZXcucHJvdG8uZWxlbWVudEJpbmRlcnNbaV07XHJcbiAgICAgICAgICAgIGlmIChiaW5kZXIucGFyZW50ID09IHBhcmVudEVsZW1lbnRCaW5kZXIpIHtcclxuICAgICAgICAgICAgICAgIGVscy5wdXNoKG5ldyBEZWJ1Z0VsZW1lbnRfKHZpZXcsIHZpZXcuZWxlbWVudE9mZnNldCArIGkpKTtcclxuICAgICAgICAgICAgICAgIHZhciB2aWV3cyA9IHZpZXcudmlld0NvbnRhaW5lcnNbdmlldy5lbGVtZW50T2Zmc2V0ICsgaV07XHJcbiAgICAgICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh2aWV3cykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3cy52aWV3cy5mb3JFYWNoKGZ1bmN0aW9uIChuZXh0VmlldykgeyBlbHMgPSBlbHMuY29uY2F0KF90aGlzLl9nZXRDaGlsZEVsZW1lbnRzKG5leHRWaWV3LCBudWxsKSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbHM7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERlYnVnRWxlbWVudF87XHJcbn0pKERlYnVnRWxlbWVudCk7XHJcbmV4cG9ydHMuRGVidWdFbGVtZW50XyA9IERlYnVnRWxlbWVudF87XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgRGVidWdFbGVtZW50IGZvciBhIEVsZW1lbnRSZWYuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudFJlZn06IGVsZW1lbnRSZWZcclxuICogQHJldHVybiB7RGVidWdFbGVtZW50fVxyXG4gKi9cclxuZnVuY3Rpb24gaW5zcGVjdEVsZW1lbnQoZWxlbWVudFJlZikge1xyXG4gICAgcmV0dXJuIG5ldyBEZWJ1Z0VsZW1lbnRfKHZpZXdfcmVmXzEuaW50ZXJuYWxWaWV3KGVsZW1lbnRSZWYucGFyZW50VmlldyksIGVsZW1lbnRSZWYuYm91bmRFbGVtZW50SW5kZXgpO1xyXG59XHJcbmV4cG9ydHMuaW5zcGVjdEVsZW1lbnQgPSBpbnNwZWN0RWxlbWVudDtcclxuZnVuY3Rpb24gYXNOYXRpdmVFbGVtZW50cyhhcnIpIHtcclxuICAgIHJldHVybiBhcnIubWFwKGZ1bmN0aW9uIChkZWJ1Z0VsKSB7IHJldHVybiBkZWJ1Z0VsLm5hdGl2ZUVsZW1lbnQ7IH0pO1xyXG59XHJcbmV4cG9ydHMuYXNOYXRpdmVFbGVtZW50cyA9IGFzTmF0aXZlRWxlbWVudHM7XHJcbnZhciBTY29wZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTY29wZSgpIHtcclxuICAgIH1cclxuICAgIFNjb3BlLmFsbCA9IGZ1bmN0aW9uIChkZWJ1Z0VsZW1lbnQpIHtcclxuICAgICAgICB2YXIgc2NvcGUgPSBbXTtcclxuICAgICAgICBzY29wZS5wdXNoKGRlYnVnRWxlbWVudCk7XHJcbiAgICAgICAgZGVidWdFbGVtZW50LmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiBzY29wZSA9IHNjb3BlLmNvbmNhdChTY29wZS5hbGwoY2hpbGQpKTsgfSk7XHJcbiAgICAgICAgZGVidWdFbGVtZW50LmNvbXBvbmVudFZpZXdDaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gc2NvcGUgPSBzY29wZS5jb25jYXQoU2NvcGUuYWxsKGNoaWxkKSk7IH0pO1xyXG4gICAgICAgIHJldHVybiBzY29wZTtcclxuICAgIH07XHJcbiAgICBTY29wZS5saWdodCA9IGZ1bmN0aW9uIChkZWJ1Z0VsZW1lbnQpIHtcclxuICAgICAgICB2YXIgc2NvcGUgPSBbXTtcclxuICAgICAgICBkZWJ1Z0VsZW1lbnQuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcclxuICAgICAgICAgICAgc2NvcGUucHVzaChjaGlsZCk7XHJcbiAgICAgICAgICAgIHNjb3BlID0gc2NvcGUuY29uY2F0KFNjb3BlLmxpZ2h0KGNoaWxkKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHNjb3BlO1xyXG4gICAgfTtcclxuICAgIFNjb3BlLnZpZXcgPSBmdW5jdGlvbiAoZGVidWdFbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIHNjb3BlID0gW107XHJcbiAgICAgICAgZGVidWdFbGVtZW50LmNvbXBvbmVudFZpZXdDaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xyXG4gICAgICAgICAgICBzY29wZS5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgc2NvcGUgPSBzY29wZS5jb25jYXQoU2NvcGUubGlnaHQoY2hpbGQpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gc2NvcGU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNjb3BlO1xyXG59KSgpO1xyXG5leHBvcnRzLlNjb3BlID0gU2NvcGU7XHJcbnZhciBCeSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCeSgpIHtcclxuICAgIH1cclxuICAgIEJ5LmFsbCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uIChkZWJ1Z0VsZW1lbnQpIHsgcmV0dXJuIHRydWU7IH07IH07XHJcbiAgICBCeS5jc3MgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRlYnVnRWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGFuZ18xLmlzUHJlc2VudChkZWJ1Z0VsZW1lbnQubmF0aXZlRWxlbWVudCkgP1xyXG4gICAgICAgICAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00uZWxlbWVudE1hdGNoZXMoZGVidWdFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHNlbGVjdG9yKSA6XHJcbiAgICAgICAgICAgICAgICBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIEJ5LmRpcmVjdGl2ZSA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkZWJ1Z0VsZW1lbnQpIHsgcmV0dXJuIGRlYnVnRWxlbWVudC5oYXNEaXJlY3RpdmUodHlwZSk7IH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEJ5O1xyXG59KSgpO1xyXG5leHBvcnRzLkJ5ID0gQnk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnX2VsZW1lbnQuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgdmlld19saXN0ZW5lcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL3ZpZXdfbGlzdGVuZXInKTtcclxudmFyIGRvbV9hZGFwdGVyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kb20vZG9tX2FkYXB0ZXInKTtcclxudmFyIGFwaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvcmVuZGVyL2FwaScpO1xyXG52YXIgZGVidWdfZWxlbWVudF8xID0gcmVxdWlyZSgnLi9kZWJ1Z19lbGVtZW50Jyk7XHJcbnZhciBOR19JRF9QUk9QRVJUWSA9ICduZ2lkJztcclxudmFyIElOU1BFQ1RfR0xPQkFMX05BTUUgPSAnbmcucHJvYmUnO1xyXG52YXIgTkdfSURfU0VQQVJBVE9SID0gJyMnO1xyXG4vLyBOZWVkIHRvIGtlZXAgdGhlIHZpZXdzIGluIGEgZ2xvYmFsIE1hcCBzbyB0aGF0IG11bHRpcGxlIGFuZ3VsYXIgYXBwcyBhcmUgc3VwcG9ydGVkXHJcbnZhciBfYWxsSWRzQnlWaWV3ID0gbmV3IGNvbGxlY3Rpb25fMS5NYXAoKTtcclxudmFyIF9hbGxWaWV3c0J5SWQgPSBuZXcgY29sbGVjdGlvbl8xLk1hcCgpO1xyXG52YXIgX25leHRJZCA9IDA7XHJcbmZ1bmN0aW9uIF9zZXRFbGVtZW50SWQoZWxlbWVudCwgaW5kaWNlcykge1xyXG4gICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoZWxlbWVudCkpIHtcclxuICAgICAgICBkb21fYWRhcHRlcl8xLkRPTS5zZXREYXRhKGVsZW1lbnQsIE5HX0lEX1BST1BFUlRZLCBpbmRpY2VzLmpvaW4oTkdfSURfU0VQQVJBVE9SKSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gX2dldEVsZW1lbnRJZChlbGVtZW50KSB7XHJcbiAgICB2YXIgZWxJZCA9IGRvbV9hZGFwdGVyXzEuRE9NLmdldERhdGEoZWxlbWVudCwgTkdfSURfUFJPUEVSVFkpO1xyXG4gICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoZWxJZCkpIHtcclxuICAgICAgICByZXR1cm4gZWxJZC5zcGxpdChOR19JRF9TRVBBUkFUT1IpLm1hcChmdW5jdGlvbiAocGFydFN0cikgeyByZXR1cm4gbGFuZ18xLk51bWJlcldyYXBwZXIucGFyc2VJbnQocGFydFN0ciwgMTApOyB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGluc3BlY3ROYXRpdmVFbGVtZW50KGVsZW1lbnQpIHtcclxuICAgIHZhciBlbElkID0gX2dldEVsZW1lbnRJZChlbGVtZW50KTtcclxuICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGVsSWQpKSB7XHJcbiAgICAgICAgdmFyIHZpZXcgPSBfYWxsVmlld3NCeUlkLmdldChlbElkWzBdKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh2aWV3KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGRlYnVnX2VsZW1lbnRfMS5EZWJ1Z0VsZW1lbnRfKHZpZXcsIGVsSWRbMV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcbmV4cG9ydHMuaW5zcGVjdE5hdGl2ZUVsZW1lbnQgPSBpbnNwZWN0TmF0aXZlRWxlbWVudDtcclxudmFyIERlYnVnRWxlbWVudFZpZXdMaXN0ZW5lciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEZWJ1Z0VsZW1lbnRWaWV3TGlzdGVuZXIoX3JlbmRlcmVyKSB7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSBfcmVuZGVyZXI7XHJcbiAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00uc2V0R2xvYmFsVmFyKElOU1BFQ1RfR0xPQkFMX05BTUUsIGluc3BlY3ROYXRpdmVFbGVtZW50KTtcclxuICAgIH1cclxuICAgIERlYnVnRWxlbWVudFZpZXdMaXN0ZW5lci5wcm90b3R5cGUudmlld0NyZWF0ZWQgPSBmdW5jdGlvbiAodmlldykge1xyXG4gICAgICAgIHZhciB2aWV3SWQgPSBfbmV4dElkKys7XHJcbiAgICAgICAgX2FsbFZpZXdzQnlJZC5zZXQodmlld0lkLCB2aWV3KTtcclxuICAgICAgICBfYWxsSWRzQnlWaWV3LnNldCh2aWV3LCB2aWV3SWQpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5lbGVtZW50UmVmcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgZWwgPSB2aWV3LmVsZW1lbnRSZWZzW2ldO1xyXG4gICAgICAgICAgICBfc2V0RWxlbWVudElkKHRoaXMuX3JlbmRlcmVyLmdldE5hdGl2ZUVsZW1lbnRTeW5jKGVsKSwgW3ZpZXdJZCwgaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEZWJ1Z0VsZW1lbnRWaWV3TGlzdGVuZXIucHJvdG90eXBlLnZpZXdEZXN0cm95ZWQgPSBmdW5jdGlvbiAodmlldykge1xyXG4gICAgICAgIHZhciB2aWV3SWQgPSBfYWxsSWRzQnlWaWV3LmdldCh2aWV3KTtcclxuICAgICAgICBfYWxsSWRzQnlWaWV3LmRlbGV0ZSh2aWV3KTtcclxuICAgICAgICBfYWxsVmlld3NCeUlkLmRlbGV0ZSh2aWV3SWQpO1xyXG4gICAgfTtcclxuICAgIERlYnVnRWxlbWVudFZpZXdMaXN0ZW5lciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFthcGlfMS5SZW5kZXJlcl0pXHJcbiAgICBdLCBEZWJ1Z0VsZW1lbnRWaWV3TGlzdGVuZXIpO1xyXG4gICAgcmV0dXJuIERlYnVnRWxlbWVudFZpZXdMaXN0ZW5lcjtcclxufSkoKTtcclxuZXhwb3J0cy5EZWJ1Z0VsZW1lbnRWaWV3TGlzdGVuZXIgPSBEZWJ1Z0VsZW1lbnRWaWV3TGlzdGVuZXI7XHJcbmV4cG9ydHMuRUxFTUVOVF9QUk9CRV9QUk9WSURFUlMgPSBsYW5nXzEuQ09OU1RfRVhQUihbXHJcbiAgICBEZWJ1Z0VsZW1lbnRWaWV3TGlzdGVuZXIsXHJcbiAgICBsYW5nXzEuQ09OU1RfRVhQUihuZXcgZGlfMS5Qcm92aWRlcih2aWV3X2xpc3RlbmVyXzEuQXBwVmlld0xpc3RlbmVyLCB7IHVzZUV4aXN0aW5nOiBEZWJ1Z0VsZW1lbnRWaWV3TGlzdGVuZXIgfSkpLFxyXG5dKTtcclxuZXhwb3J0cy5FTEVNRU5UX1BST0JFX0JJTkRJTkdTID0gZXhwb3J0cy5FTEVNRU5UX1BST0JFX1BST1ZJREVSUztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWdfZWxlbWVudF92aWV3X2xpc3RlbmVyLmpzLm1hcCIsIid1c2Ugc3RyaWN0JzsvKipcclxuICogQG1vZHVsZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlIGBkaWAgbW9kdWxlIHByb3ZpZGVzIGRlcGVuZGVuY3kgaW5qZWN0aW9uIGNvbnRhaW5lciBzZXJ2aWNlcy5cclxuICovXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG52YXIgbWV0YWRhdGFfMSA9IHJlcXVpcmUoJy4vZGkvbWV0YWRhdGEnKTtcclxuZXhwb3J0cy5JbmplY3RNZXRhZGF0YSA9IG1ldGFkYXRhXzEuSW5qZWN0TWV0YWRhdGE7XHJcbmV4cG9ydHMuT3B0aW9uYWxNZXRhZGF0YSA9IG1ldGFkYXRhXzEuT3B0aW9uYWxNZXRhZGF0YTtcclxuZXhwb3J0cy5JbmplY3RhYmxlTWV0YWRhdGEgPSBtZXRhZGF0YV8xLkluamVjdGFibGVNZXRhZGF0YTtcclxuZXhwb3J0cy5TZWxmTWV0YWRhdGEgPSBtZXRhZGF0YV8xLlNlbGZNZXRhZGF0YTtcclxuZXhwb3J0cy5Ib3N0TWV0YWRhdGEgPSBtZXRhZGF0YV8xLkhvc3RNZXRhZGF0YTtcclxuZXhwb3J0cy5Ta2lwU2VsZk1ldGFkYXRhID0gbWV0YWRhdGFfMS5Ta2lwU2VsZk1ldGFkYXRhO1xyXG5leHBvcnRzLkRlcGVuZGVuY3lNZXRhZGF0YSA9IG1ldGFkYXRhXzEuRGVwZW5kZW5jeU1ldGFkYXRhO1xyXG4vLyB3ZSBoYXZlIHRvIHJlZXhwb3J0ICogYmVjYXVzZSBEYXJ0IGFuZCBUUyBleHBvcnQgdHdvIGRpZmZlcmVudCBzZXRzIG9mIHR5cGVzXHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vZGkvZGVjb3JhdG9ycycpKTtcclxudmFyIGZvcndhcmRfcmVmXzEgPSByZXF1aXJlKCcuL2RpL2ZvcndhcmRfcmVmJyk7XHJcbmV4cG9ydHMuZm9yd2FyZFJlZiA9IGZvcndhcmRfcmVmXzEuZm9yd2FyZFJlZjtcclxuZXhwb3J0cy5yZXNvbHZlRm9yd2FyZFJlZiA9IGZvcndhcmRfcmVmXzEucmVzb2x2ZUZvcndhcmRSZWY7XHJcbnZhciBpbmplY3Rvcl8xID0gcmVxdWlyZSgnLi9kaS9pbmplY3RvcicpO1xyXG5leHBvcnRzLkluamVjdG9yID0gaW5qZWN0b3JfMS5JbmplY3RvcjtcclxudmFyIHByb3ZpZGVyXzEgPSByZXF1aXJlKCcuL2RpL3Byb3ZpZGVyJyk7XHJcbmV4cG9ydHMuQmluZGluZyA9IHByb3ZpZGVyXzEuQmluZGluZztcclxuZXhwb3J0cy5Qcm92aWRlckJ1aWxkZXIgPSBwcm92aWRlcl8xLlByb3ZpZGVyQnVpbGRlcjtcclxuZXhwb3J0cy5SZXNvbHZlZEZhY3RvcnkgPSBwcm92aWRlcl8xLlJlc29sdmVkRmFjdG9yeTtcclxuZXhwb3J0cy5EZXBlbmRlbmN5ID0gcHJvdmlkZXJfMS5EZXBlbmRlbmN5O1xyXG5leHBvcnRzLmJpbmQgPSBwcm92aWRlcl8xLmJpbmQ7XHJcbmV4cG9ydHMuUHJvdmlkZXIgPSBwcm92aWRlcl8xLlByb3ZpZGVyO1xyXG5leHBvcnRzLnByb3ZpZGUgPSBwcm92aWRlcl8xLnByb3ZpZGU7XHJcbnZhciBrZXlfMSA9IHJlcXVpcmUoJy4vZGkva2V5Jyk7XHJcbmV4cG9ydHMuS2V5ID0ga2V5XzEuS2V5O1xyXG5leHBvcnRzLlR5cGVMaXRlcmFsID0ga2V5XzEuVHlwZUxpdGVyYWw7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCcuL2RpL2V4Y2VwdGlvbnMnKTtcclxuZXhwb3J0cy5Ob1Byb3ZpZGVyRXJyb3IgPSBleGNlcHRpb25zXzEuTm9Qcm92aWRlckVycm9yO1xyXG5leHBvcnRzLkFic3RyYWN0UHJvdmlkZXJFcnJvciA9IGV4Y2VwdGlvbnNfMS5BYnN0cmFjdFByb3ZpZGVyRXJyb3I7XHJcbmV4cG9ydHMuQ3ljbGljRGVwZW5kZW5jeUVycm9yID0gZXhjZXB0aW9uc18xLkN5Y2xpY0RlcGVuZGVuY3lFcnJvcjtcclxuZXhwb3J0cy5JbnN0YW50aWF0aW9uRXJyb3IgPSBleGNlcHRpb25zXzEuSW5zdGFudGlhdGlvbkVycm9yO1xyXG5leHBvcnRzLkludmFsaWRQcm92aWRlckVycm9yID0gZXhjZXB0aW9uc18xLkludmFsaWRQcm92aWRlckVycm9yO1xyXG5leHBvcnRzLk5vQW5ub3RhdGlvbkVycm9yID0gZXhjZXB0aW9uc18xLk5vQW5ub3RhdGlvbkVycm9yO1xyXG5leHBvcnRzLk91dE9mQm91bmRzRXJyb3IgPSBleGNlcHRpb25zXzEuT3V0T2ZCb3VuZHNFcnJvcjtcclxudmFyIG9wYXF1ZV90b2tlbl8xID0gcmVxdWlyZSgnLi9kaS9vcGFxdWVfdG9rZW4nKTtcclxuZXhwb3J0cy5PcGFxdWVUb2tlbiA9IG9wYXF1ZV90b2tlbl8xLk9wYXF1ZVRva2VuO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaS5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIG1ldGFkYXRhXzEgPSByZXF1aXJlKCcuL21ldGFkYXRhJyk7XHJcbnZhciBkZWNvcmF0b3JzXzEgPSByZXF1aXJlKCcuLi91dGlsL2RlY29yYXRvcnMnKTtcclxuLyoqXHJcbiAqIEZhY3RvcnkgZm9yIGNyZWF0aW5nIHtAbGluayBJbmplY3RNZXRhZGF0YX0uXHJcbiAqL1xyXG5leHBvcnRzLkluamVjdCA9IGRlY29yYXRvcnNfMS5tYWtlUGFyYW1EZWNvcmF0b3IobWV0YWRhdGFfMS5JbmplY3RNZXRhZGF0YSk7XHJcbi8qKlxyXG4gKiBGYWN0b3J5IGZvciBjcmVhdGluZyB7QGxpbmsgT3B0aW9uYWxNZXRhZGF0YX0uXHJcbiAqL1xyXG5leHBvcnRzLk9wdGlvbmFsID0gZGVjb3JhdG9yc18xLm1ha2VQYXJhbURlY29yYXRvcihtZXRhZGF0YV8xLk9wdGlvbmFsTWV0YWRhdGEpO1xyXG4vKipcclxuICogRmFjdG9yeSBmb3IgY3JlYXRpbmcge0BsaW5rIEluamVjdGFibGVNZXRhZGF0YX0uXHJcbiAqL1xyXG5leHBvcnRzLkluamVjdGFibGUgPSBkZWNvcmF0b3JzXzEubWFrZURlY29yYXRvcihtZXRhZGF0YV8xLkluamVjdGFibGVNZXRhZGF0YSk7XHJcbi8qKlxyXG4gKiBGYWN0b3J5IGZvciBjcmVhdGluZyB7QGxpbmsgU2VsZk1ldGFkYXRhfS5cclxuICovXHJcbmV4cG9ydHMuU2VsZiA9IGRlY29yYXRvcnNfMS5tYWtlUGFyYW1EZWNvcmF0b3IobWV0YWRhdGFfMS5TZWxmTWV0YWRhdGEpO1xyXG4vKipcclxuICogRmFjdG9yeSBmb3IgY3JlYXRpbmcge0BsaW5rIEhvc3RNZXRhZGF0YX0uXHJcbiAqL1xyXG5leHBvcnRzLkhvc3QgPSBkZWNvcmF0b3JzXzEubWFrZVBhcmFtRGVjb3JhdG9yKG1ldGFkYXRhXzEuSG9zdE1ldGFkYXRhKTtcclxuLyoqXHJcbiAqIEZhY3RvcnkgZm9yIGNyZWF0aW5nIHtAbGluayBTa2lwU2VsZk1ldGFkYXRhfS5cclxuICovXHJcbmV4cG9ydHMuU2tpcFNlbGYgPSBkZWNvcmF0b3JzXzEubWFrZVBhcmFtRGVjb3JhdG9yKG1ldGFkYXRhXzEuU2tpcFNlbGZNZXRhZGF0YSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlY29yYXRvcnMuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbmZ1bmN0aW9uIGZpbmRGaXJzdENsb3NlZEN5Y2xlKGtleXMpIHtcclxuICAgIHZhciByZXMgPSBbXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGlmIChjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuY29udGFpbnMocmVzLCBrZXlzW2ldKSkge1xyXG4gICAgICAgICAgICByZXMucHVzaChrZXlzW2ldKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlcy5wdXNoKGtleXNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gY29uc3RydWN0UmVzb2x2aW5nUGF0aChrZXlzKSB7XHJcbiAgICBpZiAoa2V5cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgdmFyIHJldmVyc2VkID0gZmluZEZpcnN0Q2xvc2VkQ3ljbGUoY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLnJldmVyc2VkKGtleXMpKTtcclxuICAgICAgICB2YXIgdG9rZW5TdHJzID0gcmV2ZXJzZWQubWFwKGZ1bmN0aW9uIChrKSB7IHJldHVybiBsYW5nXzEuc3RyaW5naWZ5KGsudG9rZW4pOyB9KTtcclxuICAgICAgICByZXR1cm4gXCIgKFwiICsgdG9rZW5TdHJzLmpvaW4oJyAtPiAnKSArIFwiKVwiO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEJhc2UgY2xhc3MgZm9yIGFsbCBlcnJvcnMgYXJpc2luZyBmcm9tIG1pc2NvbmZpZ3VyZWQgcHJvdmlkZXJzLlxyXG4gKi9cclxudmFyIEFic3RyYWN0UHJvdmlkZXJFcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQWJzdHJhY3RQcm92aWRlckVycm9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQWJzdHJhY3RQcm92aWRlckVycm9yKGluamVjdG9yLCBrZXksIGNvbnN0cnVjdFJlc29sdmluZ01lc3NhZ2UpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBcIkRJIEV4Y2VwdGlvblwiKTtcclxuICAgICAgICB0aGlzLmtleXMgPSBba2V5XTtcclxuICAgICAgICB0aGlzLmluamVjdG9ycyA9IFtpbmplY3Rvcl07XHJcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RSZXNvbHZpbmdNZXNzYWdlID0gY29uc3RydWN0UmVzb2x2aW5nTWVzc2FnZTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLmNvbnN0cnVjdFJlc29sdmluZ01lc3NhZ2UodGhpcy5rZXlzKTtcclxuICAgIH1cclxuICAgIEFic3RyYWN0UHJvdmlkZXJFcnJvci5wcm90b3R5cGUuYWRkS2V5ID0gZnVuY3Rpb24gKGluamVjdG9yLCBrZXkpIHtcclxuICAgICAgICB0aGlzLmluamVjdG9ycy5wdXNoKGluamVjdG9yKTtcclxuICAgICAgICB0aGlzLmtleXMucHVzaChrZXkpO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMuY29uc3RydWN0UmVzb2x2aW5nTWVzc2FnZSh0aGlzLmtleXMpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdFByb3ZpZGVyRXJyb3IucHJvdG90eXBlLCBcImNvbnRleHRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pbmplY3RvcnNbdGhpcy5pbmplY3RvcnMubGVuZ3RoIC0gMV0uZGVidWdDb250ZXh0KCk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIEFic3RyYWN0UHJvdmlkZXJFcnJvcjtcclxufSkoZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24pO1xyXG5leHBvcnRzLkFic3RyYWN0UHJvdmlkZXJFcnJvciA9IEFic3RyYWN0UHJvdmlkZXJFcnJvcjtcclxuLyoqXHJcbiAqIFRocm93biB3aGVuIHRyeWluZyB0byByZXRyaWV2ZSBhIGRlcGVuZGVuY3kgYnkgYEtleWAgZnJvbSB7QGxpbmsgSW5qZWN0b3J9LCBidXQgdGhlXHJcbiAqIHtAbGluayBJbmplY3Rvcn0gZG9lcyBub3QgaGF2ZSBhIHtAbGluayBQcm92aWRlcn0gZm9yIHtAbGluayBLZXl9LlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvdnE4RDNGUkI5YUdibldKcXRFUEU/cD1wcmV2aWV3KSlcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBBIHtcclxuICogICBjb25zdHJ1Y3RvcihiOkIpIHt9XHJcbiAqIH1cclxuICpcclxuICogZXhwZWN0KCgpID0+IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW0FdKSkudG9UaHJvd0Vycm9yKCk7XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIE5vUHJvdmlkZXJFcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoTm9Qcm92aWRlckVycm9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTm9Qcm92aWRlckVycm9yKGluamVjdG9yLCBrZXkpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBpbmplY3Rvciwga2V5LCBmdW5jdGlvbiAoa2V5cykge1xyXG4gICAgICAgICAgICB2YXIgZmlyc3QgPSBsYW5nXzEuc3RyaW5naWZ5KGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5maXJzdChrZXlzKS50b2tlbik7XHJcbiAgICAgICAgICAgIHJldHVybiBcIk5vIHByb3ZpZGVyIGZvciBcIiArIGZpcnN0ICsgXCIhXCIgKyBjb25zdHJ1Y3RSZXNvbHZpbmdQYXRoKGtleXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE5vUHJvdmlkZXJFcnJvcjtcclxufSkoQWJzdHJhY3RQcm92aWRlckVycm9yKTtcclxuZXhwb3J0cy5Ob1Byb3ZpZGVyRXJyb3IgPSBOb1Byb3ZpZGVyRXJyb3I7XHJcbi8qKlxyXG4gKiBUaHJvd24gd2hlbiBkZXBlbmRlbmNpZXMgZm9ybSBhIGN5Y2xlLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvd1lRZE5vczBUenFsM2VpMUVWOWo/cD1pbmZvKSlcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiB2YXIgaW5qZWN0b3IgPSBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtcclxuICogICBwcm92aWRlKFwib25lXCIsIHt1c2VGYWN0b3J5OiAodHdvKSA9PiBcInR3b1wiLCBkZXBzOiBbW25ldyBJbmplY3QoXCJ0d29cIildXX0pLFxyXG4gKiAgIHByb3ZpZGUoXCJ0d29cIiwge3VzZUZhY3Rvcnk6IChvbmUpID0+IFwib25lXCIsIGRlcHM6IFtbbmV3IEluamVjdChcIm9uZVwiKV1dfSlcclxuICogXSk7XHJcbiAqXHJcbiAqIGV4cGVjdCgoKSA9PiBpbmplY3Rvci5nZXQoXCJvbmVcIikpLnRvVGhyb3dFcnJvcigpO1xyXG4gKiBgYGBcclxuICpcclxuICogUmV0cmlldmluZyBgQWAgb3IgYEJgIHRocm93cyBhIGBDeWNsaWNEZXBlbmRlbmN5RXJyb3JgIGFzIHRoZSBncmFwaCBhYm92ZSBjYW5ub3QgYmUgY29uc3RydWN0ZWQuXHJcbiAqL1xyXG52YXIgQ3ljbGljRGVwZW5kZW5jeUVycm9yID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhDeWNsaWNEZXBlbmRlbmN5RXJyb3IsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBDeWNsaWNEZXBlbmRlbmN5RXJyb3IoaW5qZWN0b3IsIGtleSkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGluamVjdG9yLCBrZXksIGZ1bmN0aW9uIChrZXlzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkNhbm5vdCBpbnN0YW50aWF0ZSBjeWNsaWMgZGVwZW5kZW5jeSFcIiArIGNvbnN0cnVjdFJlc29sdmluZ1BhdGgoa2V5cyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQ3ljbGljRGVwZW5kZW5jeUVycm9yO1xyXG59KShBYnN0cmFjdFByb3ZpZGVyRXJyb3IpO1xyXG5leHBvcnRzLkN5Y2xpY0RlcGVuZGVuY3lFcnJvciA9IEN5Y2xpY0RlcGVuZGVuY3lFcnJvcjtcclxuLyoqXHJcbiAqIFRocm93biB3aGVuIGEgY29uc3RydWN0aW5nIHR5cGUgcmV0dXJucyB3aXRoIGFuIEVycm9yLlxyXG4gKlxyXG4gKiBUaGUgYEluc3RhbnRpYXRpb25FcnJvcmAgY2xhc3MgY29udGFpbnMgdGhlIG9yaWdpbmFsIGVycm9yIHBsdXMgdGhlIGRlcGVuZGVuY3kgZ3JhcGggd2hpY2ggY2F1c2VkXHJcbiAqIHRoaXMgb2JqZWN0IHRvIGJlIGluc3RhbnRpYXRlZC5cclxuICpcclxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0LzdhV1lkY3FUUXNQMGVOcUVkVUFmP3A9cHJldmlldykpXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgQSB7XHJcbiAqICAgY29uc3RydWN0b3IoKSB7XHJcbiAqICAgICB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UnKTtcclxuICogICB9XHJcbiAqIH1cclxuICpcclxuICogdmFyIGluamVjdG9yID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbQV0pO1xyXG5cclxuICogdHJ5IHtcclxuICogICBpbmplY3Rvci5nZXQoQSk7XHJcbiAqIH0gY2F0Y2ggKGUpIHtcclxuICogICBleHBlY3QoZSBpbnN0YW5jZW9mIEluc3RhbnRpYXRpb25FcnJvcikudG9CZSh0cnVlKTtcclxuICogICBleHBlY3QoZS5vcmlnaW5hbEV4Y2VwdGlvbi5tZXNzYWdlKS50b0VxdWFsKFwibWVzc2FnZVwiKTtcclxuICogICBleHBlY3QoZS5vcmlnaW5hbFN0YWNrKS50b0JlRGVmaW5lZCgpO1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIEluc3RhbnRpYXRpb25FcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoSW5zdGFudGlhdGlvbkVycm9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gSW5zdGFudGlhdGlvbkVycm9yKGluamVjdG9yLCBvcmlnaW5hbEV4Y2VwdGlvbiwgb3JpZ2luYWxTdGFjaywga2V5KSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgXCJESSBFeGNlcHRpb25cIiwgb3JpZ2luYWxFeGNlcHRpb24sIG9yaWdpbmFsU3RhY2ssIG51bGwpO1xyXG4gICAgICAgIHRoaXMua2V5cyA9IFtrZXldO1xyXG4gICAgICAgIHRoaXMuaW5qZWN0b3JzID0gW2luamVjdG9yXTtcclxuICAgIH1cclxuICAgIEluc3RhbnRpYXRpb25FcnJvci5wcm90b3R5cGUuYWRkS2V5ID0gZnVuY3Rpb24gKGluamVjdG9yLCBrZXkpIHtcclxuICAgICAgICB0aGlzLmluamVjdG9ycy5wdXNoKGluamVjdG9yKTtcclxuICAgICAgICB0aGlzLmtleXMucHVzaChrZXkpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnN0YW50aWF0aW9uRXJyb3IucHJvdG90eXBlLCBcIndyYXBwZXJNZXNzYWdlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGZpcnN0ID0gbGFuZ18xLnN0cmluZ2lmeShjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuZmlyc3QodGhpcy5rZXlzKS50b2tlbik7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkVycm9yIGR1cmluZyBpbnN0YW50aWF0aW9uIG9mIFwiICsgZmlyc3QgKyBcIiFcIiArIGNvbnN0cnVjdFJlc29sdmluZ1BhdGgodGhpcy5rZXlzKSArIFwiLlwiO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEluc3RhbnRpYXRpb25FcnJvci5wcm90b3R5cGUsIFwiY2F1c2VLZXlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5rZXlzWzBdOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnN0YW50aWF0aW9uRXJyb3IucHJvdG90eXBlLCBcImNvbnRleHRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pbmplY3RvcnNbdGhpcy5pbmplY3RvcnMubGVuZ3RoIC0gMV0uZGVidWdDb250ZXh0KCk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIEluc3RhbnRpYXRpb25FcnJvcjtcclxufSkoZXhjZXB0aW9uc18xLldyYXBwZWRFeGNlcHRpb24pO1xyXG5leHBvcnRzLkluc3RhbnRpYXRpb25FcnJvciA9IEluc3RhbnRpYXRpb25FcnJvcjtcclxuLyoqXHJcbiAqIFRocm93biB3aGVuIGFuIG9iamVjdCBvdGhlciB0aGVuIHtAbGluayBQcm92aWRlcn0gKG9yIGBUeXBlYCkgaXMgcGFzc2VkIHRvIHtAbGluayBJbmplY3Rvcn1cclxuICogY3JlYXRpb24uXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9ZYXRDRmJQQU1DTDBKU1NRNG12SD9wPXByZXZpZXcpKVxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGV4cGVjdCgoKSA9PiBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtcIm5vdCBhIHR5cGVcIl0pKS50b1Rocm93RXJyb3IoKTtcclxuICogYGBgXHJcbiAqL1xyXG52YXIgSW52YWxpZFByb3ZpZGVyRXJyb3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEludmFsaWRQcm92aWRlckVycm9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gSW52YWxpZFByb3ZpZGVyRXJyb3IocHJvdmlkZXIpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBcIkludmFsaWQgcHJvdmlkZXIgLSBvbmx5IGluc3RhbmNlcyBvZiBQcm92aWRlciBhbmQgVHlwZSBhcmUgYWxsb3dlZCwgZ290OiBcIiArXHJcbiAgICAgICAgICAgIHByb3ZpZGVyLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEludmFsaWRQcm92aWRlckVycm9yO1xyXG59KShleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbik7XHJcbmV4cG9ydHMuSW52YWxpZFByb3ZpZGVyRXJyb3IgPSBJbnZhbGlkUHJvdmlkZXJFcnJvcjtcclxuLyoqXHJcbiAqIFRocm93biB3aGVuIHRoZSBjbGFzcyBoYXMgbm8gYW5ub3RhdGlvbiBpbmZvcm1hdGlvbi5cclxuICpcclxuICogTGFjayBvZiBhbm5vdGF0aW9uIGluZm9ybWF0aW9uIHByZXZlbnRzIHRoZSB7QGxpbmsgSW5qZWN0b3J9IGZyb20gZGV0ZXJtaW5pbmcgd2hpY2ggZGVwZW5kZW5jaWVzXHJcbiAqIG5lZWQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgY29uc3RydWN0b3IuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9ySG5adGxOUzd2Sk9QUTZwY1ZrbT9wPXByZXZpZXcpKVxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGNsYXNzIEEge1xyXG4gKiAgIGNvbnN0cnVjdG9yKGIpIHt9XHJcbiAqIH1cclxuICpcclxuICogZXhwZWN0KCgpID0+IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW0FdKSkudG9UaHJvd0Vycm9yKCk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBUaGlzIGVycm9yIGlzIGFsc28gdGhyb3duIHdoZW4gdGhlIGNsYXNzIG5vdCBtYXJrZWQgd2l0aCB7QGxpbmsgSW5qZWN0YWJsZX0gaGFzIHBhcmFtZXRlciB0eXBlcy5cclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBCIHt9XHJcbiAqXHJcbiAqIGNsYXNzIEEge1xyXG4gKiAgIGNvbnN0cnVjdG9yKGI6Qikge30gLy8gbm8gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBhcmFtZXRlciB0eXBlcyBvZiBBIGlzIGF2YWlsYWJsZSBhdCBydW50aW1lLlxyXG4gKiB9XHJcbiAqXHJcbiAqIGV4cGVjdCgoKSA9PiBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtBLEJdKSkudG9UaHJvd0Vycm9yKCk7XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIE5vQW5ub3RhdGlvbkVycm9yID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhOb0Fubm90YXRpb25FcnJvciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE5vQW5ub3RhdGlvbkVycm9yKHR5cGVPckZ1bmMsIHBhcmFtcykge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIE5vQW5ub3RhdGlvbkVycm9yLl9nZW5NZXNzYWdlKHR5cGVPckZ1bmMsIHBhcmFtcykpO1xyXG4gICAgfVxyXG4gICAgTm9Bbm5vdGF0aW9uRXJyb3IuX2dlbk1lc3NhZ2UgPSBmdW5jdGlvbiAodHlwZU9yRnVuYywgcGFyYW1zKSB7XHJcbiAgICAgICAgdmFyIHNpZ25hdHVyZSA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHBhcmFtcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJhbWV0ZXIgPSBwYXJhbXNbaV07XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhwYXJhbWV0ZXIpIHx8IHBhcmFtZXRlci5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgc2lnbmF0dXJlLnB1c2goJz8nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNpZ25hdHVyZS5wdXNoKHBhcmFtZXRlci5tYXAobGFuZ18xLnN0cmluZ2lmeSkuam9pbignICcpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gXCJDYW5ub3QgcmVzb2x2ZSBhbGwgcGFyYW1ldGVycyBmb3IgXCIgKyBsYW5nXzEuc3RyaW5naWZ5KHR5cGVPckZ1bmMpICsgXCIoXCIgK1xyXG4gICAgICAgICAgICBzaWduYXR1cmUuam9pbignLCAnKSArIFwiKS4gXCIgKyAnTWFrZSBzdXJlIHRoZXkgYWxsIGhhdmUgdmFsaWQgdHlwZSBvciBhbm5vdGF0aW9ucy4nO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBOb0Fubm90YXRpb25FcnJvcjtcclxufSkoZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24pO1xyXG5leHBvcnRzLk5vQW5ub3RhdGlvbkVycm9yID0gTm9Bbm5vdGF0aW9uRXJyb3I7XHJcbi8qKlxyXG4gKiBUaHJvd24gd2hlbiBnZXR0aW5nIGFuIG9iamVjdCBieSBpbmRleC5cclxuICpcclxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L2JSczBTWDJPVFFpSnpxdmpnbDhQP3A9cHJldmlldykpXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgQSB7fVxyXG4gKlxyXG4gKiB2YXIgaW5qZWN0b3IgPSBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtBXSk7XHJcbiAqXHJcbiAqIGV4cGVjdCgoKSA9PiBpbmplY3Rvci5nZXRBdCgxMDApKS50b1Rocm93RXJyb3IoKTtcclxuICogYGBgXHJcbiAqL1xyXG52YXIgT3V0T2ZCb3VuZHNFcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoT3V0T2ZCb3VuZHNFcnJvciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE91dE9mQm91bmRzRXJyb3IoaW5kZXgpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBcIkluZGV4IFwiICsgaW5kZXggKyBcIiBpcyBvdXQtb2YtYm91bmRzLlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBPdXRPZkJvdW5kc0Vycm9yO1xyXG59KShleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbik7XHJcbmV4cG9ydHMuT3V0T2ZCb3VuZHNFcnJvciA9IE91dE9mQm91bmRzRXJyb3I7XHJcbi8vIFRPRE86IGFkZCBhIHdvcmtpbmcgZXhhbXBsZSBhZnRlciBhbHBoYTM4IGlzIHJlbGVhc2VkXHJcbi8qKlxyXG4gKiBUaHJvd24gd2hlbiBhIG11bHRpIHByb3ZpZGVyIGFuZCBhIHJlZ3VsYXIgcHJvdmlkZXIgYXJlIGJvdW5kIHRvIHRoZSBzYW1lIHRva2VuLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZVxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGV4cGVjdCgoKSA9PiBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtcclxuICogICBuZXcgUHJvdmlkZXIoXCJTdHJpbmdzXCIsIHt1c2VWYWx1ZTogXCJzdHJpbmcxXCIsIG11bHRpOiB0cnVlfSksXHJcbiAqICAgbmV3IFByb3ZpZGVyKFwiU3RyaW5nc1wiLCB7dXNlVmFsdWU6IFwic3RyaW5nMlwiLCBtdWx0aTogZmFsc2V9KVxyXG4gKiBdKSkudG9UaHJvd0Vycm9yKCk7XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIE1peGluZ011bHRpUHJvdmlkZXJzV2l0aFJlZ3VsYXJQcm92aWRlcnNFcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoTWl4aW5nTXVsdGlQcm92aWRlcnNXaXRoUmVndWxhclByb3ZpZGVyc0Vycm9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTWl4aW5nTXVsdGlQcm92aWRlcnNXaXRoUmVndWxhclByb3ZpZGVyc0Vycm9yKHByb3ZpZGVyMSwgcHJvdmlkZXIyKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgXCJDYW5ub3QgbWl4IG11bHRpIHByb3ZpZGVycyBhbmQgcmVndWxhciBwcm92aWRlcnMsIGdvdDogXCIgKyBwcm92aWRlcjEudG9TdHJpbmcoKSArIFwiIFwiICtcclxuICAgICAgICAgICAgcHJvdmlkZXIyLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE1peGluZ011bHRpUHJvdmlkZXJzV2l0aFJlZ3VsYXJQcm92aWRlcnNFcnJvcjtcclxufSkoZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24pO1xyXG5leHBvcnRzLk1peGluZ011bHRpUHJvdmlkZXJzV2l0aFJlZ3VsYXJQcm92aWRlcnNFcnJvciA9IE1peGluZ011bHRpUHJvdmlkZXJzV2l0aFJlZ3VsYXJQcm92aWRlcnNFcnJvcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhjZXB0aW9ucy5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbi8qKlxyXG4gKiBBbGxvd3MgdG8gcmVmZXIgdG8gcmVmZXJlbmNlcyB3aGljaCBhcmUgbm90IHlldCBkZWZpbmVkLlxyXG4gKlxyXG4gKiBGb3IgaW5zdGFuY2UsIGBmb3J3YXJkUmVmYCBpcyB1c2VkIHdoZW4gdGhlIGB0b2tlbmAgd2hpY2ggd2UgbmVlZCB0byByZWZlciB0byBmb3IgdGhlIHB1cnBvc2VzIG9mXHJcbiAqIERJIGlzIGRlY2xhcmVkLFxyXG4gKiBidXQgbm90IHlldCBkZWZpbmVkLiBJdCBpcyBhbHNvIHVzZWQgd2hlbiB0aGUgYHRva2VuYCB3aGljaCB3ZSB1c2Ugd2hlbiBjcmVhdGluZyBhIHF1ZXJ5IGlzIG5vdFxyXG4gKiB5ZXQgZGVmaW5lZC5cclxuICpcclxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L2JSczBTWDJPVFFpSnpxdmpnbDhQP3A9cHJldmlldykpXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgRG9vciB7XHJcbiAqICAgbG9jazogTG9jaztcclxuICogICBjb25zdHJ1Y3RvcihASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTG9jaykpIGxvY2s6TG9jaykge1xyXG4gKiAgICAgdGhpcy5sb2NrID0gbG9jaztcclxuICogICB9XHJcbiAqIH1cclxuICpcclxuICogLy8gT25seSBhdCB0aGlzIHBvaW50IExvY2sgaXMgZGVmaW5lZC5cclxuICogY2xhc3MgTG9jayB7XHJcbiAqIH1cclxuICpcclxuICogdmFyIGluamVjdG9yID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbRG9vciwgTG9ja10pO1xyXG4gKiB2YXIgZG9vciA9IGluamVjdG9yLmdldChEb29yKTtcclxuICogZXhwZWN0KGRvb3IgaW5zdGFuY2VvZiBEb29yKS50b0JlKHRydWUpO1xyXG4gKiBleHBlY3QoZG9vci5sb2NrIGluc3RhbmNlb2YgTG9jaykudG9CZSh0cnVlKTtcclxuICogYGBgXHJcbiAqL1xyXG5mdW5jdGlvbiBmb3J3YXJkUmVmKGZvcndhcmRSZWZGbikge1xyXG4gICAgZm9yd2FyZFJlZkZuLl9fZm9yd2FyZF9yZWZfXyA9IGZvcndhcmRSZWY7XHJcbiAgICBmb3J3YXJkUmVmRm4udG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBsYW5nXzEuc3RyaW5naWZ5KHRoaXMoKSk7IH07XHJcbiAgICByZXR1cm4gZm9yd2FyZFJlZkZuO1xyXG59XHJcbmV4cG9ydHMuZm9yd2FyZFJlZiA9IGZvcndhcmRSZWY7XHJcbi8qKlxyXG4gKiBMYXppbHkgcmV0cmlldmVzIHRoZSByZWZlcmVuY2UgdmFsdWUgZnJvbSBhIGZvcndhcmRSZWYuXHJcbiAqXHJcbiAqIEFjdHMgYXMgdGhlIGlkZW50aXR5IGZ1bmN0aW9uIHdoZW4gZ2l2ZW4gYSBub24tZm9yd2FyZC1yZWYgdmFsdWUuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9HVTcybUpyazFmaW9kQ2hjbWlEUj9wPXByZXZpZXcpKVxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIHZhciByZWYgPSBmb3J3YXJkUmVmKCgpID0+IFwicmVmVmFsdWVcIik7XHJcbiAqIGV4cGVjdChyZXNvbHZlRm9yd2FyZFJlZihyZWYpKS50b0VxdWFsKFwicmVmVmFsdWVcIik7XHJcbiAqIGV4cGVjdChyZXNvbHZlRm9yd2FyZFJlZihcInJlZ3VsYXJWYWx1ZVwiKSkudG9FcXVhbChcInJlZ3VsYXJWYWx1ZVwiKTtcclxuICogYGBgXHJcbiAqXHJcbiAqIFNlZToge0BsaW5rIGZvcndhcmRSZWZ9XHJcbiAqL1xyXG5mdW5jdGlvbiByZXNvbHZlRm9yd2FyZFJlZih0eXBlKSB7XHJcbiAgICBpZiAobGFuZ18xLmlzRnVuY3Rpb24odHlwZSkgJiYgdHlwZS5oYXNPd25Qcm9wZXJ0eSgnX19mb3J3YXJkX3JlZl9fJykgJiZcclxuICAgICAgICB0eXBlLl9fZm9yd2FyZF9yZWZfXyA9PT0gZm9yd2FyZFJlZikge1xyXG4gICAgICAgIHJldHVybiB0eXBlKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdHlwZTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnJlc29sdmVGb3J3YXJkUmVmID0gcmVzb2x2ZUZvcndhcmRSZWY7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcndhcmRfcmVmLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIHByb3ZpZGVyXzEgPSByZXF1aXJlKCcuL3Byb3ZpZGVyJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCcuL2V4Y2VwdGlvbnMnKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBrZXlfMSA9IHJlcXVpcmUoJy4va2V5Jyk7XHJcbnZhciBtZXRhZGF0YV8xID0gcmVxdWlyZSgnLi9tZXRhZGF0YScpO1xyXG4vLyBUaHJlc2hvbGQgZm9yIHRoZSBkeW5hbWljIHZlcnNpb25cclxudmFyIF9NQVhfQ09OU1RSVUNUSU9OX0NPVU5URVIgPSAxMDtcclxuZXhwb3J0cy5VTkRFRklORUQgPSBsYW5nXzEuQ09OU1RfRVhQUihuZXcgT2JqZWN0KCkpO1xyXG4vKipcclxuICogVmlzaWJpbGl0eSBvZiBhIHtAbGluayBQcm92aWRlcn0uXHJcbiAqL1xyXG4oZnVuY3Rpb24gKFZpc2liaWxpdHkpIHtcclxuICAgIC8qKlxyXG4gICAgICogQSBgUHVibGljYCB7QGxpbmsgUHJvdmlkZXJ9IGlzIG9ubHkgdmlzaWJsZSB0byByZWd1bGFyIChhcyBvcHBvc2VkIHRvIGhvc3QpIGNoaWxkIGluamVjdG9ycy5cclxuICAgICAqL1xyXG4gICAgVmlzaWJpbGl0eVtWaXNpYmlsaXR5W1wiUHVibGljXCJdID0gMF0gPSBcIlB1YmxpY1wiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIGBQcml2YXRlYCB7QGxpbmsgUHJvdmlkZXJ9IGlzIG9ubHkgdmlzaWJsZSB0byBob3N0IChhcyBvcHBvc2VkIHRvIHJlZ3VsYXIpIGNoaWxkIGluamVjdG9ycy5cclxuICAgICAqL1xyXG4gICAgVmlzaWJpbGl0eVtWaXNpYmlsaXR5W1wiUHJpdmF0ZVwiXSA9IDFdID0gXCJQcml2YXRlXCI7XHJcbiAgICAvKipcclxuICAgICAqIEEgYFB1YmxpY0FuZFByaXZhdGVgIHtAbGluayBQcm92aWRlcn0gaXMgdmlzaWJsZSB0byBib3RoIGhvc3QgYW5kIHJlZ3VsYXIgY2hpbGQgaW5qZWN0b3JzLlxyXG4gICAgICovXHJcbiAgICBWaXNpYmlsaXR5W1Zpc2liaWxpdHlbXCJQdWJsaWNBbmRQcml2YXRlXCJdID0gMl0gPSBcIlB1YmxpY0FuZFByaXZhdGVcIjtcclxufSkoZXhwb3J0cy5WaXNpYmlsaXR5IHx8IChleHBvcnRzLlZpc2liaWxpdHkgPSB7fSkpO1xyXG52YXIgVmlzaWJpbGl0eSA9IGV4cG9ydHMuVmlzaWJpbGl0eTtcclxuZnVuY3Rpb24gY2FuU2VlKHNyYywgZHN0KSB7XHJcbiAgICByZXR1cm4gKHNyYyA9PT0gZHN0KSB8fFxyXG4gICAgICAgIChkc3QgPT09IFZpc2liaWxpdHkuUHVibGljQW5kUHJpdmF0ZSB8fCBzcmMgPT09IFZpc2liaWxpdHkuUHVibGljQW5kUHJpdmF0ZSk7XHJcbn1cclxudmFyIFByb3RvSW5qZWN0b3JJbmxpbmVTdHJhdGVneSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQcm90b0luamVjdG9ySW5saW5lU3RyYXRlZ3kocHJvdG9FSSwgYnd2KSB7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcjAgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXIxID0gbnVsbDtcclxuICAgICAgICB0aGlzLnByb3ZpZGVyMiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcjMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXI0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnByb3ZpZGVyNSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcjYgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXI3ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnByb3ZpZGVyOCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcjkgPSBudWxsO1xyXG4gICAgICAgIHRoaXMua2V5SWQwID0gbnVsbDtcclxuICAgICAgICB0aGlzLmtleUlkMSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5rZXlJZDIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMua2V5SWQzID0gbnVsbDtcclxuICAgICAgICB0aGlzLmtleUlkNCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5rZXlJZDUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMua2V5SWQ2ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmtleUlkNyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5rZXlJZDggPSBudWxsO1xyXG4gICAgICAgIHRoaXMua2V5SWQ5ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpc2liaWxpdHkwID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpc2liaWxpdHkxID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpc2liaWxpdHkyID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpc2liaWxpdHkzID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpc2liaWxpdHk0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpc2liaWxpdHk1ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpc2liaWxpdHk2ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpc2liaWxpdHk3ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpc2liaWxpdHk4ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpc2liaWxpdHk5ID0gbnVsbDtcclxuICAgICAgICB2YXIgbGVuZ3RoID0gYnd2Lmxlbmd0aDtcclxuICAgICAgICBpZiAobGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyMCA9IGJ3dlswXS5wcm92aWRlcjtcclxuICAgICAgICAgICAgdGhpcy5rZXlJZDAgPSBid3ZbMF0uZ2V0S2V5SWQoKTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmlsaXR5MCA9IGJ3dlswXS52aXNpYmlsaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyMSA9IGJ3dlsxXS5wcm92aWRlcjtcclxuICAgICAgICAgICAgdGhpcy5rZXlJZDEgPSBid3ZbMV0uZ2V0S2V5SWQoKTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmlsaXR5MSA9IGJ3dlsxXS52aXNpYmlsaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuZ3RoID4gMikge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyMiA9IGJ3dlsyXS5wcm92aWRlcjtcclxuICAgICAgICAgICAgdGhpcy5rZXlJZDIgPSBid3ZbMl0uZ2V0S2V5SWQoKTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmlsaXR5MiA9IGJ3dlsyXS52aXNpYmlsaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuZ3RoID4gMykge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyMyA9IGJ3dlszXS5wcm92aWRlcjtcclxuICAgICAgICAgICAgdGhpcy5rZXlJZDMgPSBid3ZbM10uZ2V0S2V5SWQoKTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmlsaXR5MyA9IGJ3dlszXS52aXNpYmlsaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuZ3RoID4gNCkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyNCA9IGJ3dls0XS5wcm92aWRlcjtcclxuICAgICAgICAgICAgdGhpcy5rZXlJZDQgPSBid3ZbNF0uZ2V0S2V5SWQoKTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmlsaXR5NCA9IGJ3dls0XS52aXNpYmlsaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuZ3RoID4gNSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyNSA9IGJ3dls1XS5wcm92aWRlcjtcclxuICAgICAgICAgICAgdGhpcy5rZXlJZDUgPSBid3ZbNV0uZ2V0S2V5SWQoKTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmlsaXR5NSA9IGJ3dls1XS52aXNpYmlsaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuZ3RoID4gNikge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyNiA9IGJ3dls2XS5wcm92aWRlcjtcclxuICAgICAgICAgICAgdGhpcy5rZXlJZDYgPSBid3ZbNl0uZ2V0S2V5SWQoKTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmlsaXR5NiA9IGJ3dls2XS52aXNpYmlsaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuZ3RoID4gNykge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyNyA9IGJ3dls3XS5wcm92aWRlcjtcclxuICAgICAgICAgICAgdGhpcy5rZXlJZDcgPSBid3ZbN10uZ2V0S2V5SWQoKTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmlsaXR5NyA9IGJ3dls3XS52aXNpYmlsaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuZ3RoID4gOCkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyOCA9IGJ3dls4XS5wcm92aWRlcjtcclxuICAgICAgICAgICAgdGhpcy5rZXlJZDggPSBid3ZbOF0uZ2V0S2V5SWQoKTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmlsaXR5OCA9IGJ3dls4XS52aXNpYmlsaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuZ3RoID4gOSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyOSA9IGJ3dls5XS5wcm92aWRlcjtcclxuICAgICAgICAgICAgdGhpcy5rZXlJZDkgPSBid3ZbOV0uZ2V0S2V5SWQoKTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmlsaXR5OSA9IGJ3dls5XS52aXNpYmlsaXR5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFByb3RvSW5qZWN0b3JJbmxpbmVTdHJhdGVneS5wcm90b3R5cGUuZ2V0UHJvdmlkZXJBdEluZGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgaWYgKGluZGV4ID09IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyMDtcclxuICAgICAgICBpZiAoaW5kZXggPT0gMSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXIxO1xyXG4gICAgICAgIGlmIChpbmRleCA9PSAyKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlcjI7XHJcbiAgICAgICAgaWYgKGluZGV4ID09IDMpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyMztcclxuICAgICAgICBpZiAoaW5kZXggPT0gNClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXI0O1xyXG4gICAgICAgIGlmIChpbmRleCA9PSA1KVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlcjU7XHJcbiAgICAgICAgaWYgKGluZGV4ID09IDYpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyNjtcclxuICAgICAgICBpZiAoaW5kZXggPT0gNylcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXI3O1xyXG4gICAgICAgIGlmIChpbmRleCA9PSA4KVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlcjg7XHJcbiAgICAgICAgaWYgKGluZGV4ID09IDkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyOTtcclxuICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLk91dE9mQm91bmRzRXJyb3IoaW5kZXgpO1xyXG4gICAgfTtcclxuICAgIFByb3RvSW5qZWN0b3JJbmxpbmVTdHJhdGVneS5wcm90b3R5cGUuY3JlYXRlSW5qZWN0b3JTdHJhdGVneSA9IGZ1bmN0aW9uIChpbmplY3Rvcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgSW5qZWN0b3JJbmxpbmVTdHJhdGVneShpbmplY3RvciwgdGhpcyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFByb3RvSW5qZWN0b3JJbmxpbmVTdHJhdGVneTtcclxufSkoKTtcclxuZXhwb3J0cy5Qcm90b0luamVjdG9ySW5saW5lU3RyYXRlZ3kgPSBQcm90b0luamVjdG9ySW5saW5lU3RyYXRlZ3k7XHJcbnZhciBQcm90b0luamVjdG9yRHluYW1pY1N0cmF0ZWd5ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFByb3RvSW5qZWN0b3JEeW5hbWljU3RyYXRlZ3kocHJvdG9JbmosIGJ3dikge1xyXG4gICAgICAgIHZhciBsZW4gPSBid3YubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNyZWF0ZUZpeGVkU2l6ZShsZW4pO1xyXG4gICAgICAgIHRoaXMua2V5SWRzID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNyZWF0ZUZpeGVkU2l6ZShsZW4pO1xyXG4gICAgICAgIHRoaXMudmlzaWJpbGl0aWVzID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNyZWF0ZUZpeGVkU2l6ZShsZW4pO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5wcm92aWRlcnNbaV0gPSBid3ZbaV0ucHJvdmlkZXI7XHJcbiAgICAgICAgICAgIHRoaXMua2V5SWRzW2ldID0gYnd2W2ldLmdldEtleUlkKCk7XHJcbiAgICAgICAgICAgIHRoaXMudmlzaWJpbGl0aWVzW2ldID0gYnd2W2ldLnZpc2liaWxpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgUHJvdG9JbmplY3RvckR5bmFtaWNTdHJhdGVneS5wcm90b3R5cGUuZ2V0UHJvdmlkZXJBdEluZGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnByb3ZpZGVycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5PdXRPZkJvdW5kc0Vycm9yKGluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzW2luZGV4XTtcclxuICAgIH07XHJcbiAgICBQcm90b0luamVjdG9yRHluYW1pY1N0cmF0ZWd5LnByb3RvdHlwZS5jcmVhdGVJbmplY3RvclN0cmF0ZWd5ID0gZnVuY3Rpb24gKGVpKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBJbmplY3RvckR5bmFtaWNTdHJhdGVneSh0aGlzLCBlaSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFByb3RvSW5qZWN0b3JEeW5hbWljU3RyYXRlZ3k7XHJcbn0pKCk7XHJcbmV4cG9ydHMuUHJvdG9JbmplY3RvckR5bmFtaWNTdHJhdGVneSA9IFByb3RvSW5qZWN0b3JEeW5hbWljU3RyYXRlZ3k7XHJcbnZhciBQcm90b0luamVjdG9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFByb3RvSW5qZWN0b3IoYnd2KSB7XHJcbiAgICAgICAgdGhpcy5udW1iZXJPZlByb3ZpZGVycyA9IGJ3di5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5fc3RyYXRlZ3kgPSBid3YubGVuZ3RoID4gX01BWF9DT05TVFJVQ1RJT05fQ09VTlRFUiA/XHJcbiAgICAgICAgICAgIG5ldyBQcm90b0luamVjdG9yRHluYW1pY1N0cmF0ZWd5KHRoaXMsIGJ3dikgOlxyXG4gICAgICAgICAgICBuZXcgUHJvdG9JbmplY3RvcklubGluZVN0cmF0ZWd5KHRoaXMsIGJ3dik7XHJcbiAgICB9XHJcbiAgICBQcm90b0luamVjdG9yLnByb3RvdHlwZS5nZXRQcm92aWRlckF0SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHsgcmV0dXJuIHRoaXMuX3N0cmF0ZWd5LmdldFByb3ZpZGVyQXRJbmRleChpbmRleCk7IH07XHJcbiAgICByZXR1cm4gUHJvdG9JbmplY3RvcjtcclxufSkoKTtcclxuZXhwb3J0cy5Qcm90b0luamVjdG9yID0gUHJvdG9JbmplY3RvcjtcclxudmFyIEluamVjdG9ySW5saW5lU3RyYXRlZ3kgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSW5qZWN0b3JJbmxpbmVTdHJhdGVneShpbmplY3RvciwgcHJvdG9TdHJhdGVneSkge1xyXG4gICAgICAgIHRoaXMuaW5qZWN0b3IgPSBpbmplY3RvcjtcclxuICAgICAgICB0aGlzLnByb3RvU3RyYXRlZ3kgPSBwcm90b1N0cmF0ZWd5O1xyXG4gICAgICAgIHRoaXMub2JqMCA9IGV4cG9ydHMuVU5ERUZJTkVEO1xyXG4gICAgICAgIHRoaXMub2JqMSA9IGV4cG9ydHMuVU5ERUZJTkVEO1xyXG4gICAgICAgIHRoaXMub2JqMiA9IGV4cG9ydHMuVU5ERUZJTkVEO1xyXG4gICAgICAgIHRoaXMub2JqMyA9IGV4cG9ydHMuVU5ERUZJTkVEO1xyXG4gICAgICAgIHRoaXMub2JqNCA9IGV4cG9ydHMuVU5ERUZJTkVEO1xyXG4gICAgICAgIHRoaXMub2JqNSA9IGV4cG9ydHMuVU5ERUZJTkVEO1xyXG4gICAgICAgIHRoaXMub2JqNiA9IGV4cG9ydHMuVU5ERUZJTkVEO1xyXG4gICAgICAgIHRoaXMub2JqNyA9IGV4cG9ydHMuVU5ERUZJTkVEO1xyXG4gICAgICAgIHRoaXMub2JqOCA9IGV4cG9ydHMuVU5ERUZJTkVEO1xyXG4gICAgICAgIHRoaXMub2JqOSA9IGV4cG9ydHMuVU5ERUZJTkVEO1xyXG4gICAgfVxyXG4gICAgSW5qZWN0b3JJbmxpbmVTdHJhdGVneS5wcm90b3R5cGUucmVzZXRDb25zdHJ1Y3Rpb25Db3VudGVyID0gZnVuY3Rpb24gKCkgeyB0aGlzLmluamVjdG9yLl9jb25zdHJ1Y3Rpb25Db3VudGVyID0gMDsgfTtcclxuICAgIEluamVjdG9ySW5saW5lU3RyYXRlZ3kucHJvdG90eXBlLmluc3RhbnRpYXRlUHJvdmlkZXIgPSBmdW5jdGlvbiAocHJvdmlkZXIsIHZpc2liaWxpdHkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmplY3Rvci5fbmV3KHByb3ZpZGVyLCB2aXNpYmlsaXR5KTtcclxuICAgIH07XHJcbiAgICBJbmplY3RvcklubGluZVN0cmF0ZWd5LnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbiAocGFyZW50LCBpc0hvc3QpIHtcclxuICAgICAgICB2YXIgaW5qID0gdGhpcy5pbmplY3RvcjtcclxuICAgICAgICBpbmouX3BhcmVudCA9IHBhcmVudDtcclxuICAgICAgICBpbmouX2lzSG9zdCA9IGlzSG9zdDtcclxuICAgIH07XHJcbiAgICBJbmplY3RvcklubGluZVN0cmF0ZWd5LnByb3RvdHlwZS5nZXRPYmpCeUtleUlkID0gZnVuY3Rpb24gKGtleUlkLCB2aXNpYmlsaXR5KSB7XHJcbiAgICAgICAgdmFyIHAgPSB0aGlzLnByb3RvU3RyYXRlZ3k7XHJcbiAgICAgICAgdmFyIGluaiA9IHRoaXMuaW5qZWN0b3I7XHJcbiAgICAgICAgaWYgKHAua2V5SWQwID09PSBrZXlJZCAmJiBjYW5TZWUocC52aXNpYmlsaXR5MCwgdmlzaWJpbGl0eSkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub2JqMCA9PT0gZXhwb3J0cy5VTkRFRklORUQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2JqMCA9IGluai5fbmV3KHAucHJvdmlkZXIwLCBwLnZpc2liaWxpdHkwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmowO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocC5rZXlJZDEgPT09IGtleUlkICYmIGNhblNlZShwLnZpc2liaWxpdHkxLCB2aXNpYmlsaXR5KSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vYmoxID09PSBleHBvcnRzLlVOREVGSU5FRCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vYmoxID0gaW5qLl9uZXcocC5wcm92aWRlcjEsIHAudmlzaWJpbGl0eTEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9iajE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwLmtleUlkMiA9PT0ga2V5SWQgJiYgY2FuU2VlKHAudmlzaWJpbGl0eTIsIHZpc2liaWxpdHkpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9iajIgPT09IGV4cG9ydHMuVU5ERUZJTkVEKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9iajIgPSBpbmouX25ldyhwLnByb3ZpZGVyMiwgcC52aXNpYmlsaXR5Mik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub2JqMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHAua2V5SWQzID09PSBrZXlJZCAmJiBjYW5TZWUocC52aXNpYmlsaXR5MywgdmlzaWJpbGl0eSkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub2JqMyA9PT0gZXhwb3J0cy5VTkRFRklORUQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2JqMyA9IGluai5fbmV3KHAucHJvdmlkZXIzLCBwLnZpc2liaWxpdHkzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmozO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocC5rZXlJZDQgPT09IGtleUlkICYmIGNhblNlZShwLnZpc2liaWxpdHk0LCB2aXNpYmlsaXR5KSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vYmo0ID09PSBleHBvcnRzLlVOREVGSU5FRCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vYmo0ID0gaW5qLl9uZXcocC5wcm92aWRlcjQsIHAudmlzaWJpbGl0eTQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9iajQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwLmtleUlkNSA9PT0ga2V5SWQgJiYgY2FuU2VlKHAudmlzaWJpbGl0eTUsIHZpc2liaWxpdHkpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9iajUgPT09IGV4cG9ydHMuVU5ERUZJTkVEKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9iajUgPSBpbmouX25ldyhwLnByb3ZpZGVyNSwgcC52aXNpYmlsaXR5NSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub2JqNTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHAua2V5SWQ2ID09PSBrZXlJZCAmJiBjYW5TZWUocC52aXNpYmlsaXR5NiwgdmlzaWJpbGl0eSkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub2JqNiA9PT0gZXhwb3J0cy5VTkRFRklORUQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2JqNiA9IGluai5fbmV3KHAucHJvdmlkZXI2LCBwLnZpc2liaWxpdHk2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmo2O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocC5rZXlJZDcgPT09IGtleUlkICYmIGNhblNlZShwLnZpc2liaWxpdHk3LCB2aXNpYmlsaXR5KSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vYmo3ID09PSBleHBvcnRzLlVOREVGSU5FRCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vYmo3ID0gaW5qLl9uZXcocC5wcm92aWRlcjcsIHAudmlzaWJpbGl0eTcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9iajc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwLmtleUlkOCA9PT0ga2V5SWQgJiYgY2FuU2VlKHAudmlzaWJpbGl0eTgsIHZpc2liaWxpdHkpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9iajggPT09IGV4cG9ydHMuVU5ERUZJTkVEKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9iajggPSBpbmouX25ldyhwLnByb3ZpZGVyOCwgcC52aXNpYmlsaXR5OCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub2JqODtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHAua2V5SWQ5ID09PSBrZXlJZCAmJiBjYW5TZWUocC52aXNpYmlsaXR5OSwgdmlzaWJpbGl0eSkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub2JqOSA9PT0gZXhwb3J0cy5VTkRFRklORUQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2JqOSA9IGluai5fbmV3KHAucHJvdmlkZXI5LCBwLnZpc2liaWxpdHk5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmo5O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZXhwb3J0cy5VTkRFRklORUQ7XHJcbiAgICB9O1xyXG4gICAgSW5qZWN0b3JJbmxpbmVTdHJhdGVneS5wcm90b3R5cGUuZ2V0T2JqQXRJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIGlmIChpbmRleCA9PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmowO1xyXG4gICAgICAgIGlmIChpbmRleCA9PSAxKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmoxO1xyXG4gICAgICAgIGlmIChpbmRleCA9PSAyKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmoyO1xyXG4gICAgICAgIGlmIChpbmRleCA9PSAzKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmozO1xyXG4gICAgICAgIGlmIChpbmRleCA9PSA0KVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmo0O1xyXG4gICAgICAgIGlmIChpbmRleCA9PSA1KVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmo1O1xyXG4gICAgICAgIGlmIChpbmRleCA9PSA2KVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmo2O1xyXG4gICAgICAgIGlmIChpbmRleCA9PSA3KVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmo3O1xyXG4gICAgICAgIGlmIChpbmRleCA9PSA4KVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmo4O1xyXG4gICAgICAgIGlmIChpbmRleCA9PSA5KVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmo5O1xyXG4gICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuT3V0T2ZCb3VuZHNFcnJvcihpbmRleCk7XHJcbiAgICB9O1xyXG4gICAgSW5qZWN0b3JJbmxpbmVTdHJhdGVneS5wcm90b3R5cGUuZ2V0TWF4TnVtYmVyT2ZPYmplY3RzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX01BWF9DT05TVFJVQ1RJT05fQ09VTlRFUjsgfTtcclxuICAgIHJldHVybiBJbmplY3RvcklubGluZVN0cmF0ZWd5O1xyXG59KSgpO1xyXG5leHBvcnRzLkluamVjdG9ySW5saW5lU3RyYXRlZ3kgPSBJbmplY3RvcklubGluZVN0cmF0ZWd5O1xyXG52YXIgSW5qZWN0b3JEeW5hbWljU3RyYXRlZ3kgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSW5qZWN0b3JEeW5hbWljU3RyYXRlZ3kocHJvdG9TdHJhdGVneSwgaW5qZWN0b3IpIHtcclxuICAgICAgICB0aGlzLnByb3RvU3RyYXRlZ3kgPSBwcm90b1N0cmF0ZWd5O1xyXG4gICAgICAgIHRoaXMuaW5qZWN0b3IgPSBpbmplY3RvcjtcclxuICAgICAgICB0aGlzLm9ianMgPSBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuY3JlYXRlRml4ZWRTaXplKHByb3RvU3RyYXRlZ3kucHJvdmlkZXJzLmxlbmd0aCk7XHJcbiAgICAgICAgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmZpbGwodGhpcy5vYmpzLCBleHBvcnRzLlVOREVGSU5FRCk7XHJcbiAgICB9XHJcbiAgICBJbmplY3RvckR5bmFtaWNTdHJhdGVneS5wcm90b3R5cGUucmVzZXRDb25zdHJ1Y3Rpb25Db3VudGVyID0gZnVuY3Rpb24gKCkgeyB0aGlzLmluamVjdG9yLl9jb25zdHJ1Y3Rpb25Db3VudGVyID0gMDsgfTtcclxuICAgIEluamVjdG9yRHluYW1pY1N0cmF0ZWd5LnByb3RvdHlwZS5pbnN0YW50aWF0ZVByb3ZpZGVyID0gZnVuY3Rpb24gKHByb3ZpZGVyLCB2aXNpYmlsaXR5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5qZWN0b3IuX25ldyhwcm92aWRlciwgdmlzaWJpbGl0eSk7XHJcbiAgICB9O1xyXG4gICAgSW5qZWN0b3JEeW5hbWljU3RyYXRlZ3kucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uIChwYXJlbnQsIGlzSG9zdCkge1xyXG4gICAgICAgIHZhciBpbmogPSB0aGlzLmluamVjdG9yO1xyXG4gICAgICAgIGluai5fcGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgIGluai5faXNIb3N0ID0gaXNIb3N0O1xyXG4gICAgfTtcclxuICAgIEluamVjdG9yRHluYW1pY1N0cmF0ZWd5LnByb3RvdHlwZS5nZXRPYmpCeUtleUlkID0gZnVuY3Rpb24gKGtleUlkLCB2aXNpYmlsaXR5KSB7XHJcbiAgICAgICAgdmFyIHAgPSB0aGlzLnByb3RvU3RyYXRlZ3k7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLmtleUlkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAocC5rZXlJZHNbaV0gPT09IGtleUlkICYmIGNhblNlZShwLnZpc2liaWxpdGllc1tpXSwgdmlzaWJpbGl0eSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9ianNbaV0gPT09IGV4cG9ydHMuVU5ERUZJTkVEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmpzW2ldID0gdGhpcy5pbmplY3Rvci5fbmV3KHAucHJvdmlkZXJzW2ldLCBwLnZpc2liaWxpdGllc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vYmpzW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBleHBvcnRzLlVOREVGSU5FRDtcclxuICAgIH07XHJcbiAgICBJbmplY3RvckR5bmFtaWNTdHJhdGVneS5wcm90b3R5cGUuZ2V0T2JqQXRJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5vYmpzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLk91dE9mQm91bmRzRXJyb3IoaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5vYmpzW2luZGV4XTtcclxuICAgIH07XHJcbiAgICBJbmplY3RvckR5bmFtaWNTdHJhdGVneS5wcm90b3R5cGUuZ2V0TWF4TnVtYmVyT2ZPYmplY3RzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5vYmpzLmxlbmd0aDsgfTtcclxuICAgIHJldHVybiBJbmplY3RvckR5bmFtaWNTdHJhdGVneTtcclxufSkoKTtcclxuZXhwb3J0cy5JbmplY3RvckR5bmFtaWNTdHJhdGVneSA9IEluamVjdG9yRHluYW1pY1N0cmF0ZWd5O1xyXG52YXIgUHJvdmlkZXJXaXRoVmlzaWJpbGl0eSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQcm92aWRlcldpdGhWaXNpYmlsaXR5KHByb3ZpZGVyLCB2aXNpYmlsaXR5KSB7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlciA9IHByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMudmlzaWJpbGl0eSA9IHZpc2liaWxpdHk7XHJcbiAgICB9XHJcbiAgICA7XHJcbiAgICBQcm92aWRlcldpdGhWaXNpYmlsaXR5LnByb3RvdHlwZS5nZXRLZXlJZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMucHJvdmlkZXIua2V5LmlkOyB9O1xyXG4gICAgcmV0dXJuIFByb3ZpZGVyV2l0aFZpc2liaWxpdHk7XHJcbn0pKCk7XHJcbmV4cG9ydHMuUHJvdmlkZXJXaXRoVmlzaWJpbGl0eSA9IFByb3ZpZGVyV2l0aFZpc2liaWxpdHk7XHJcbi8qKlxyXG4gKiBBIGRlcGVuZGVuY3kgaW5qZWN0aW9uIGNvbnRhaW5lciB1c2VkIGZvciBpbnN0YW50aWF0aW5nIG9iamVjdHMgYW5kIHJlc29sdmluZyBkZXBlbmRlbmNpZXMuXHJcbiAqXHJcbiAqIEFuIGBJbmplY3RvcmAgaXMgYSByZXBsYWNlbWVudCBmb3IgYSBgbmV3YCBvcGVyYXRvciwgd2hpY2ggY2FuIGF1dG9tYXRpY2FsbHkgcmVzb2x2ZSB0aGVcclxuICogY29uc3RydWN0b3IgZGVwZW5kZW5jaWVzLlxyXG4gKlxyXG4gKiBJbiB0eXBpY2FsIHVzZSwgYXBwbGljYXRpb24gY29kZSBhc2tzIGZvciB0aGUgZGVwZW5kZW5jaWVzIGluIHRoZSBjb25zdHJ1Y3RvciBhbmQgdGhleSBhcmVcclxuICogcmVzb2x2ZWQgYnkgdGhlIGBJbmplY3RvcmAuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9qemplYzA/cD1wcmV2aWV3KSlcclxuICpcclxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIGNyZWF0ZXMgYW4gYEluamVjdG9yYCBjb25maWd1cmVkIHRvIGNyZWF0ZSBgRW5naW5lYCBhbmQgYENhcmAuXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogQEluamVjdGFibGUoKVxyXG4gKiBjbGFzcyBFbmdpbmUge1xyXG4gKiB9XHJcbiAqXHJcbiAqIEBJbmplY3RhYmxlKClcclxuICogY2xhc3MgQ2FyIHtcclxuICogICBjb25zdHJ1Y3RvcihwdWJsaWMgZW5naW5lOkVuZ2luZSkge31cclxuICogfVxyXG4gKlxyXG4gKiB2YXIgaW5qZWN0b3IgPSBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtDYXIsIEVuZ2luZV0pO1xyXG4gKiB2YXIgY2FyID0gaW5qZWN0b3IuZ2V0KENhcik7XHJcbiAqIGV4cGVjdChjYXIgaW5zdGFuY2VvZiBDYXIpLnRvQmUodHJ1ZSk7XHJcbiAqIGV4cGVjdChjYXIuZW5naW5lIGluc3RhbmNlb2YgRW5naW5lKS50b0JlKHRydWUpO1xyXG4gKiBgYGBcclxuICpcclxuICogTm90aWNlLCB3ZSBkb24ndCB1c2UgdGhlIGBuZXdgIG9wZXJhdG9yIGJlY2F1c2Ugd2UgZXhwbGljaXRseSB3YW50IHRvIGhhdmUgdGhlIGBJbmplY3RvcmBcclxuICogcmVzb2x2ZSBhbGwgb2YgdGhlIG9iamVjdCdzIGRlcGVuZGVuY2llcyBhdXRvbWF0aWNhbGx5LlxyXG4gKi9cclxudmFyIEluamVjdG9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogUHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBJbmplY3RvcihfcHJvdG8gLyogUHJvdG9JbmplY3RvciAqLywgX3BhcmVudCwgX2RlcFByb3ZpZGVyLCBfZGVidWdDb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKF9wYXJlbnQgPT09IHZvaWQgMCkgeyBfcGFyZW50ID0gbnVsbDsgfVxyXG4gICAgICAgIGlmIChfZGVwUHJvdmlkZXIgPT09IHZvaWQgMCkgeyBfZGVwUHJvdmlkZXIgPSBudWxsOyB9XHJcbiAgICAgICAgaWYgKF9kZWJ1Z0NvbnRleHQgPT09IHZvaWQgMCkgeyBfZGVidWdDb250ZXh0ID0gbnVsbDsgfVxyXG4gICAgICAgIHRoaXMuX2RlcFByb3ZpZGVyID0gX2RlcFByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMuX2RlYnVnQ29udGV4dCA9IF9kZWJ1Z0NvbnRleHQ7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX2lzSG9zdCA9IGZhbHNlO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9jb25zdHJ1Y3Rpb25Db3VudGVyID0gMDtcclxuICAgICAgICB0aGlzLl9wcm90byA9IF9wcm90bztcclxuICAgICAgICB0aGlzLl9wYXJlbnQgPSBfcGFyZW50O1xyXG4gICAgICAgIHRoaXMuX3N0cmF0ZWd5ID0gX3Byb3RvLl9zdHJhdGVneS5jcmVhdGVJbmplY3RvclN0cmF0ZWd5KHRoaXMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUdXJucyBhbiBhcnJheSBvZiBwcm92aWRlciBkZWZpbml0aW9ucyBpbnRvIGFuIGFycmF5IG9mIHJlc29sdmVkIHByb3ZpZGVycy5cclxuICAgICAqXHJcbiAgICAgKiBBIHJlc29sdXRpb24gaXMgYSBwcm9jZXNzIG9mIGZsYXR0ZW5pbmcgbXVsdGlwbGUgbmVzdGVkIGFycmF5cyBhbmQgY29udmVydGluZyBpbmRpdmlkdWFsXHJcbiAgICAgKiBwcm92aWRlcnMgaW50byBhbiBhcnJheSBvZiB7QGxpbmsgUmVzb2x2ZWRQcm92aWRlcn1zLlxyXG4gICAgICpcclxuICAgICAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9BaVhUSGk/cD1wcmV2aWV3KSlcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBASW5qZWN0YWJsZSgpXHJcbiAgICAgKiBjbGFzcyBFbmdpbmUge1xyXG4gICAgICogfVxyXG4gICAgICpcclxuICAgICAqIEBJbmplY3RhYmxlKClcclxuICAgICAqIGNsYXNzIENhciB7XHJcbiAgICAgKiAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbmdpbmU6RW5naW5lKSB7fVxyXG4gICAgICogfVxyXG4gICAgICpcclxuICAgICAqIHZhciBwcm92aWRlcnMgPSBJbmplY3Rvci5yZXNvbHZlKFtDYXIsIFtbRW5naW5lXV1dKTtcclxuICAgICAqXHJcbiAgICAgKiBleHBlY3QocHJvdmlkZXJzLmxlbmd0aCkudG9FcXVhbCgyKTtcclxuICAgICAqXHJcbiAgICAgKiBleHBlY3QocHJvdmlkZXJzWzBdIGluc3RhbmNlb2YgUmVzb2x2ZWRQcm92aWRlcikudG9CZSh0cnVlKTtcclxuICAgICAqIGV4cGVjdChwcm92aWRlcnNbMF0ua2V5LmRpc3BsYXlOYW1lKS50b0JlKFwiQ2FyXCIpO1xyXG4gICAgICogZXhwZWN0KHByb3ZpZGVyc1swXS5kZXBlbmRlbmNpZXMubGVuZ3RoKS50b0VxdWFsKDEpO1xyXG4gICAgICogZXhwZWN0KHByb3ZpZGVyc1swXS5mYWN0b3J5KS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICpcclxuICAgICAqIGV4cGVjdChwcm92aWRlcnNbMV0ua2V5LmRpc3BsYXlOYW1lKS50b0JlKFwiRW5naW5lXCIpO1xyXG4gICAgICogfSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBTZWUge0BsaW5rIEluamVjdG9yI2Zyb21SZXNvbHZlZFByb3ZpZGVyc30gZm9yIG1vcmUgaW5mby5cclxuICAgICAqL1xyXG4gICAgSW5qZWN0b3IucmVzb2x2ZSA9IGZ1bmN0aW9uIChwcm92aWRlcnMpIHtcclxuICAgICAgICByZXR1cm4gcHJvdmlkZXJfMS5yZXNvbHZlUHJvdmlkZXJzKHByb3ZpZGVycyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNvbHZlcyBhbiBhcnJheSBvZiBwcm92aWRlcnMgYW5kIGNyZWF0ZXMgYW4gaW5qZWN0b3IgZnJvbSB0aG9zZSBwcm92aWRlcnMuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHBhc3NlZC1pbiBwcm92aWRlcnMgY2FuIGJlIGFuIGFycmF5IG9mIGBUeXBlYCwge0BsaW5rIFByb3ZpZGVyfSxcclxuICAgICAqIG9yIGEgcmVjdXJzaXZlIGFycmF5IG9mIG1vcmUgcHJvdmlkZXJzLlxyXG4gICAgICpcclxuICAgICAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9lUE9jY0E/cD1wcmV2aWV3KSlcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBASW5qZWN0YWJsZSgpXHJcbiAgICAgKiBjbGFzcyBFbmdpbmUge1xyXG4gICAgICogfVxyXG4gICAgICpcclxuICAgICAqIEBJbmplY3RhYmxlKClcclxuICAgICAqIGNsYXNzIENhciB7XHJcbiAgICAgKiAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbmdpbmU6RW5naW5lKSB7fVxyXG4gICAgICogfVxyXG4gICAgICpcclxuICAgICAqIHZhciBpbmplY3RvciA9IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW0NhciwgRW5naW5lXSk7XHJcbiAgICAgKiBleHBlY3QoaW5qZWN0b3IuZ2V0KENhcikgaW5zdGFuY2VvZiBDYXIpLnRvQmUodHJ1ZSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHNsb3dlciB0aGFuIHRoZSBjb3JyZXNwb25kaW5nIGBmcm9tUmVzb2x2ZWRQcm92aWRlcnNgXHJcbiAgICAgKiBiZWNhdXNlIGl0IG5lZWRzIHRvIHJlc29sdmUgdGhlIHBhc3NlZC1pbiBwcm92aWRlcnMgZmlyc3QuXHJcbiAgICAgKiBTZWUge0BsaW5rIEluamVjdG9yI3Jlc29sdmV9IGFuZCB7QGxpbmsgSW5qZWN0b3IjZnJvbVJlc29sdmVkUHJvdmlkZXJzfS5cclxuICAgICAqL1xyXG4gICAgSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZSA9IGZ1bmN0aW9uIChwcm92aWRlcnMpIHtcclxuICAgICAgICB2YXIgcmVzb2x2ZWRQcm92aWRlcnMgPSBJbmplY3Rvci5yZXNvbHZlKHByb3ZpZGVycyk7XHJcbiAgICAgICAgcmV0dXJuIEluamVjdG9yLmZyb21SZXNvbHZlZFByb3ZpZGVycyhyZXNvbHZlZFByb3ZpZGVycyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGluamVjdG9yIGZyb20gcHJldmlvdXNseSByZXNvbHZlZCBwcm92aWRlcnMuXHJcbiAgICAgKlxyXG4gICAgICogVGhpcyBBUEkgaXMgdGhlIHJlY29tbWVuZGVkIHdheSB0byBjb25zdHJ1Y3QgaW5qZWN0b3JzIGluIHBlcmZvcm1hbmNlLXNlbnNpdGl2ZSBwYXJ0cy5cclxuICAgICAqXHJcbiAgICAgKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvS3JTTWNpP3A9cHJldmlldykpXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogQEluamVjdGFibGUoKVxyXG4gICAgICogY2xhc3MgRW5naW5lIHtcclxuICAgICAqIH1cclxuICAgICAqXHJcbiAgICAgKiBASW5qZWN0YWJsZSgpXHJcbiAgICAgKiBjbGFzcyBDYXIge1xyXG4gICAgICogICBjb25zdHJ1Y3RvcihwdWJsaWMgZW5naW5lOkVuZ2luZSkge31cclxuICAgICAqIH1cclxuICAgICAqXHJcbiAgICAgKiB2YXIgcHJvdmlkZXJzID0gSW5qZWN0b3IucmVzb2x2ZShbQ2FyLCBFbmdpbmVdKTtcclxuICAgICAqIHZhciBpbmplY3RvciA9IEluamVjdG9yLmZyb21SZXNvbHZlZFByb3ZpZGVycyhwcm92aWRlcnMpO1xyXG4gICAgICogZXhwZWN0KGluamVjdG9yLmdldChDYXIpIGluc3RhbmNlb2YgQ2FyKS50b0JlKHRydWUpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIEluamVjdG9yLmZyb21SZXNvbHZlZFByb3ZpZGVycyA9IGZ1bmN0aW9uIChwcm92aWRlcnMpIHtcclxuICAgICAgICB2YXIgYmQgPSBwcm92aWRlcnMubWFwKGZ1bmN0aW9uIChiKSB7IHJldHVybiBuZXcgUHJvdmlkZXJXaXRoVmlzaWJpbGl0eShiLCBWaXNpYmlsaXR5LlB1YmxpYyk7IH0pO1xyXG4gICAgICAgIHZhciBwcm90byA9IG5ldyBQcm90b0luamVjdG9yKGJkKTtcclxuICAgICAgICByZXR1cm4gbmV3IEluamVjdG9yKHByb3RvLCBudWxsLCBudWxsKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgKi9cclxuICAgIEluamVjdG9yLmZyb21SZXNvbHZlZEJpbmRpbmdzID0gZnVuY3Rpb24gKHByb3ZpZGVycykge1xyXG4gICAgICAgIHJldHVybiBJbmplY3Rvci5mcm9tUmVzb2x2ZWRQcm92aWRlcnMocHJvdmlkZXJzKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBJbmplY3Rvci5wcm90b3R5cGUuZGVidWdDb250ZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVidWdDb250ZXh0KCk7IH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHJpZXZlcyBhbiBpbnN0YW5jZSBmcm9tIHRoZSBpbmplY3RvciBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgdG9rZW4uXHJcbiAgICAgKiBUaHJvd3Mge0BsaW5rIE5vUHJvdmlkZXJFcnJvcn0gaWYgbm90IGZvdW5kLlxyXG4gICAgICpcclxuICAgICAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9IZVhTSGc/cD1wcmV2aWV3KSlcclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiB2YXIgaW5qZWN0b3IgPSBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtcclxuICAgICAqICAgcHJvdmlkZShcInZhbGlkVG9rZW5cIiwge3VzZVZhbHVlOiBcIlZhbHVlXCJ9KVxyXG4gICAgICogXSk7XHJcbiAgICAgKiBleHBlY3QoaW5qZWN0b3IuZ2V0KFwidmFsaWRUb2tlblwiKSkudG9FcXVhbChcIlZhbHVlXCIpO1xyXG4gICAgICogZXhwZWN0KCgpID0+IGluamVjdG9yLmdldChcImludmFsaWRUb2tlblwiKSkudG9UaHJvd0Vycm9yKCk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBgSW5qZWN0b3JgIHJldHVybnMgaXRzZWxmIHdoZW4gZ2l2ZW4gYEluamVjdG9yYCBhcyBhIHRva2VuLlxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIHZhciBpbmplY3RvciA9IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW10pO1xyXG4gICAgICogZXhwZWN0KGluamVjdG9yLmdldChJbmplY3RvcikpLnRvQmUoaW5qZWN0b3IpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIEluamVjdG9yLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QnlLZXkoa2V5XzEuS2V5LmdldCh0b2tlbiksIG51bGwsIG51bGwsIGZhbHNlLCBWaXNpYmlsaXR5LlB1YmxpY0FuZFByaXZhdGUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0cmlldmVzIGFuIGluc3RhbmNlIGZyb20gdGhlIGluamVjdG9yIGJhc2VkIG9uIHRoZSBwcm92aWRlZCB0b2tlbi5cclxuICAgICAqIFJldHVybnMgbnVsbCBpZiBub3QgZm91bmQuXHJcbiAgICAgKlxyXG4gICAgICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L3RwRWJFeT9wPXByZXZpZXcpKVxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIHZhciBpbmplY3RvciA9IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW1xyXG4gICAgICogICBwcm92aWRlKFwidmFsaWRUb2tlblwiLCB7dXNlVmFsdWU6IFwiVmFsdWVcIn0pXHJcbiAgICAgKiBdKTtcclxuICAgICAqIGV4cGVjdChpbmplY3Rvci5nZXRPcHRpb25hbChcInZhbGlkVG9rZW5cIikpLnRvRXF1YWwoXCJWYWx1ZVwiKTtcclxuICAgICAqIGV4cGVjdChpbmplY3Rvci5nZXRPcHRpb25hbChcImludmFsaWRUb2tlblwiKSkudG9CZShudWxsKTtcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIGBJbmplY3RvcmAgcmV0dXJucyBpdHNlbGYgd2hlbiBnaXZlbiBgSW5qZWN0b3JgIGFzIGEgdG9rZW4uXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogdmFyIGluamVjdG9yID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbXSk7XHJcbiAgICAgKiBleHBlY3QoaW5qZWN0b3IuZ2V0T3B0aW9uYWwoSW5qZWN0b3IpKS50b0JlKGluamVjdG9yKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBJbmplY3Rvci5wcm90b3R5cGUuZ2V0T3B0aW9uYWwgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QnlLZXkoa2V5XzEuS2V5LmdldCh0b2tlbiksIG51bGwsIG51bGwsIHRydWUsIFZpc2liaWxpdHkuUHVibGljQW5kUHJpdmF0ZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgSW5qZWN0b3IucHJvdG90eXBlLmdldEF0ID0gZnVuY3Rpb24gKGluZGV4KSB7IHJldHVybiB0aGlzLl9zdHJhdGVneS5nZXRPYmpBdEluZGV4KGluZGV4KTsgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbmplY3Rvci5wcm90b3R5cGUsIFwicGFyZW50XCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBQYXJlbnQgb2YgdGhpcyBpbmplY3Rvci5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIDwhLS0gVE9ETzogQWRkIGEgbGluayB0byB0aGUgc2VjdGlvbiBvZiB0aGUgdXNlciBndWlkZSB0YWxraW5nIGFib3V0IGhpZXJhcmNoaWNhbCBpbmplY3Rpb24uXHJcbiAgICAgICAgICogLS0+XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvZW9zTUdvP3A9cHJldmlldykpXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgICAgICogdmFyIHBhcmVudCA9IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW10pO1xyXG4gICAgICAgICAqIHZhciBjaGlsZCA9IHBhcmVudC5yZXNvbHZlQW5kQ3JlYXRlQ2hpbGQoW10pO1xyXG4gICAgICAgICAqIGV4cGVjdChjaGlsZC5wYXJlbnQpLnRvQmUocGFyZW50KTtcclxuICAgICAgICAgKiBgYGBcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3BhcmVudDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW5qZWN0b3IucHJvdG90eXBlLCBcImludGVybmFsU3RyYXRlZ3lcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqIEludGVybmFsLiBEbyBub3QgdXNlLlxyXG4gICAgICAgICAqIFdlIHJldHVybiBgYW55YCBub3QgdG8gZXhwb3J0IHRoZSBJbmplY3RvclN0cmF0ZWd5IHR5cGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9zdHJhdGVneTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIFJlc29sdmVzIGFuIGFycmF5IG9mIHByb3ZpZGVycyBhbmQgY3JlYXRlcyBhIGNoaWxkIGluamVjdG9yIGZyb20gdGhvc2UgcHJvdmlkZXJzLlxyXG4gICAgICpcclxuICAgICAqIDwhLS0gVE9ETzogQWRkIGEgbGluayB0byB0aGUgc2VjdGlvbiBvZiB0aGUgdXNlciBndWlkZSB0YWxraW5nIGFib3V0IGhpZXJhcmNoaWNhbCBpbmplY3Rpb24uXHJcbiAgICAgKiAtLT5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgcGFzc2VkLWluIHByb3ZpZGVycyBjYW4gYmUgYW4gYXJyYXkgb2YgYFR5cGVgLCB7QGxpbmsgUHJvdmlkZXJ9LFxyXG4gICAgICogb3IgYSByZWN1cnNpdmUgYXJyYXkgb2YgbW9yZSBwcm92aWRlcnMuXHJcbiAgICAgKlxyXG4gICAgICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L29wQjNUND9wPXByZXZpZXcpKVxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNsYXNzIFBhcmVudFByb3ZpZGVyIHt9XHJcbiAgICAgKiBjbGFzcyBDaGlsZFByb3ZpZGVyIHt9XHJcbiAgICAgKlxyXG4gICAgICogdmFyIHBhcmVudCA9IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW1BhcmVudFByb3ZpZGVyXSk7XHJcbiAgICAgKiB2YXIgY2hpbGQgPSBwYXJlbnQucmVzb2x2ZUFuZENyZWF0ZUNoaWxkKFtDaGlsZFByb3ZpZGVyXSk7XHJcbiAgICAgKlxyXG4gICAgICogZXhwZWN0KGNoaWxkLmdldChQYXJlbnRQcm92aWRlcikgaW5zdGFuY2VvZiBQYXJlbnRQcm92aWRlcikudG9CZSh0cnVlKTtcclxuICAgICAqIGV4cGVjdChjaGlsZC5nZXQoQ2hpbGRQcm92aWRlcikgaW5zdGFuY2VvZiBDaGlsZFByb3ZpZGVyKS50b0JlKHRydWUpO1xyXG4gICAgICogZXhwZWN0KGNoaWxkLmdldChQYXJlbnRQcm92aWRlcikpLnRvQmUocGFyZW50LmdldChQYXJlbnRQcm92aWRlcikpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBzbG93ZXIgdGhhbiB0aGUgY29ycmVzcG9uZGluZyBgY3JlYXRlQ2hpbGRGcm9tUmVzb2x2ZWRgXHJcbiAgICAgKiBiZWNhdXNlIGl0IG5lZWRzIHRvIHJlc29sdmUgdGhlIHBhc3NlZC1pbiBwcm92aWRlcnMgZmlyc3QuXHJcbiAgICAgKiBTZWUge0BsaW5rIEluamVjdG9yI3Jlc29sdmV9IGFuZCB7QGxpbmsgSW5qZWN0b3IjY3JlYXRlQ2hpbGRGcm9tUmVzb2x2ZWR9LlxyXG4gICAgICovXHJcbiAgICBJbmplY3Rvci5wcm90b3R5cGUucmVzb2x2ZUFuZENyZWF0ZUNoaWxkID0gZnVuY3Rpb24gKHByb3ZpZGVycykge1xyXG4gICAgICAgIHZhciByZXNvbHZlZFByb3ZpZGVycyA9IEluamVjdG9yLnJlc29sdmUocHJvdmlkZXJzKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVDaGlsZEZyb21SZXNvbHZlZChyZXNvbHZlZFByb3ZpZGVycyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgY2hpbGQgaW5qZWN0b3IgZnJvbSBwcmV2aW91c2x5IHJlc29sdmVkIHByb3ZpZGVycy5cclxuICAgICAqXHJcbiAgICAgKiA8IS0tIFRPRE86IEFkZCBhIGxpbmsgdG8gdGhlIHNlY3Rpb24gb2YgdGhlIHVzZXIgZ3VpZGUgdGFsa2luZyBhYm91dCBoaWVyYXJjaGljYWwgaW5qZWN0aW9uLlxyXG4gICAgICogLS0+XHJcbiAgICAgKlxyXG4gICAgICogVGhpcyBBUEkgaXMgdGhlIHJlY29tbWVuZGVkIHdheSB0byBjb25zdHJ1Y3QgaW5qZWN0b3JzIGluIHBlcmZvcm1hbmNlLXNlbnNpdGl2ZSBwYXJ0cy5cclxuICAgICAqXHJcbiAgICAgKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvVmh5ZmpOP3A9cHJldmlldykpXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY2xhc3MgUGFyZW50UHJvdmlkZXIge31cclxuICAgICAqIGNsYXNzIENoaWxkUHJvdmlkZXIge31cclxuICAgICAqXHJcbiAgICAgKiB2YXIgcGFyZW50UHJvdmlkZXJzID0gSW5qZWN0b3IucmVzb2x2ZShbUGFyZW50UHJvdmlkZXJdKTtcclxuICAgICAqIHZhciBjaGlsZFByb3ZpZGVycyA9IEluamVjdG9yLnJlc29sdmUoW0NoaWxkUHJvdmlkZXJdKTtcclxuICAgICAqXHJcbiAgICAgKiB2YXIgcGFyZW50ID0gSW5qZWN0b3IuZnJvbVJlc29sdmVkUHJvdmlkZXJzKHBhcmVudFByb3ZpZGVycyk7XHJcbiAgICAgKiB2YXIgY2hpbGQgPSBwYXJlbnQuY3JlYXRlQ2hpbGRGcm9tUmVzb2x2ZWQoY2hpbGRQcm92aWRlcnMpO1xyXG4gICAgICpcclxuICAgICAqIGV4cGVjdChjaGlsZC5nZXQoUGFyZW50UHJvdmlkZXIpIGluc3RhbmNlb2YgUGFyZW50UHJvdmlkZXIpLnRvQmUodHJ1ZSk7XHJcbiAgICAgKiBleHBlY3QoY2hpbGQuZ2V0KENoaWxkUHJvdmlkZXIpIGluc3RhbmNlb2YgQ2hpbGRQcm92aWRlcikudG9CZSh0cnVlKTtcclxuICAgICAqIGV4cGVjdChjaGlsZC5nZXQoUGFyZW50UHJvdmlkZXIpKS50b0JlKHBhcmVudC5nZXQoUGFyZW50UHJvdmlkZXIpKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBJbmplY3Rvci5wcm90b3R5cGUuY3JlYXRlQ2hpbGRGcm9tUmVzb2x2ZWQgPSBmdW5jdGlvbiAocHJvdmlkZXJzKSB7XHJcbiAgICAgICAgdmFyIGJkID0gcHJvdmlkZXJzLm1hcChmdW5jdGlvbiAoYikgeyByZXR1cm4gbmV3IFByb3ZpZGVyV2l0aFZpc2liaWxpdHkoYiwgVmlzaWJpbGl0eS5QdWJsaWMpOyB9KTtcclxuICAgICAgICB2YXIgcHJvdG8gPSBuZXcgUHJvdG9JbmplY3RvcihiZCk7XHJcbiAgICAgICAgdmFyIGluaiA9IG5ldyBJbmplY3Rvcihwcm90bywgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgaW5qLl9wYXJlbnQgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBpbmo7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNvbHZlcyBhIHByb3ZpZGVyIGFuZCBpbnN0YW50aWF0ZXMgYW4gb2JqZWN0IGluIHRoZSBjb250ZXh0IG9mIHRoZSBpbmplY3Rvci5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgY3JlYXRlZCBvYmplY3QgZG9lcyBub3QgZ2V0IGNhY2hlZCBieSB0aGUgaW5qZWN0b3IuXHJcbiAgICAgKlxyXG4gICAgICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L3l2VlhvQj9wPXByZXZpZXcpKVxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIEBJbmplY3RhYmxlKClcclxuICAgICAqIGNsYXNzIEVuZ2luZSB7XHJcbiAgICAgKiB9XHJcbiAgICAgKlxyXG4gICAgICogQEluamVjdGFibGUoKVxyXG4gICAgICogY2xhc3MgQ2FyIHtcclxuICAgICAqICAgY29uc3RydWN0b3IocHVibGljIGVuZ2luZTpFbmdpbmUpIHt9XHJcbiAgICAgKiB9XHJcbiAgICAgKlxyXG4gICAgICogdmFyIGluamVjdG9yID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbRW5naW5lXSk7XHJcbiAgICAgKlxyXG4gICAgICogdmFyIGNhciA9IGluamVjdG9yLnJlc29sdmVBbmRJbnN0YW50aWF0ZShDYXIpO1xyXG4gICAgICogZXhwZWN0KGNhci5lbmdpbmUpLnRvQmUoaW5qZWN0b3IuZ2V0KEVuZ2luZSkpO1xyXG4gICAgICogZXhwZWN0KGNhcikubm90LnRvQmUoaW5qZWN0b3IucmVzb2x2ZUFuZEluc3RhbnRpYXRlKENhcikpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIEluamVjdG9yLnByb3RvdHlwZS5yZXNvbHZlQW5kSW5zdGFudGlhdGUgPSBmdW5jdGlvbiAocHJvdmlkZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW50aWF0ZVJlc29sdmVkKEluamVjdG9yLnJlc29sdmUoW3Byb3ZpZGVyXSlbMF0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW5zdGFudGlhdGVzIGFuIG9iamVjdCB1c2luZyBhIHJlc29sdmVkIHByb3ZpZGVyIGluIHRoZSBjb250ZXh0IG9mIHRoZSBpbmplY3Rvci5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgY3JlYXRlZCBvYmplY3QgZG9lcyBub3QgZ2V0IGNhY2hlZCBieSB0aGUgaW5qZWN0b3IuXHJcbiAgICAgKlxyXG4gICAgICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L3B0Q0ltUT9wPXByZXZpZXcpKVxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIEBJbmplY3RhYmxlKClcclxuICAgICAqIGNsYXNzIEVuZ2luZSB7XHJcbiAgICAgKiB9XHJcbiAgICAgKlxyXG4gICAgICogQEluamVjdGFibGUoKVxyXG4gICAgICogY2xhc3MgQ2FyIHtcclxuICAgICAqICAgY29uc3RydWN0b3IocHVibGljIGVuZ2luZTpFbmdpbmUpIHt9XHJcbiAgICAgKiB9XHJcbiAgICAgKlxyXG4gICAgICogdmFyIGluamVjdG9yID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbRW5naW5lXSk7XHJcbiAgICAgKiB2YXIgY2FyUHJvdmlkZXIgPSBJbmplY3Rvci5yZXNvbHZlKFtDYXJdKVswXTtcclxuICAgICAqIHZhciBjYXIgPSBpbmplY3Rvci5pbnN0YW50aWF0ZVJlc29sdmVkKGNhclByb3ZpZGVyKTtcclxuICAgICAqIGV4cGVjdChjYXIuZW5naW5lKS50b0JlKGluamVjdG9yLmdldChFbmdpbmUpKTtcclxuICAgICAqIGV4cGVjdChjYXIpLm5vdC50b0JlKGluamVjdG9yLmluc3RhbnRpYXRlUmVzb2x2ZWQoY2FyUHJvdmlkZXIpKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBJbmplY3Rvci5wcm90b3R5cGUuaW5zdGFudGlhdGVSZXNvbHZlZCA9IGZ1bmN0aW9uIChwcm92aWRlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW50aWF0ZVByb3ZpZGVyKHByb3ZpZGVyLCBWaXNpYmlsaXR5LlB1YmxpY0FuZFByaXZhdGUpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIEluamVjdG9yLnByb3RvdHlwZS5fbmV3ID0gZnVuY3Rpb24gKHByb3ZpZGVyLCB2aXNpYmlsaXR5KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnN0cnVjdGlvbkNvdW50ZXIrKyA+IHRoaXMuX3N0cmF0ZWd5LmdldE1heE51bWJlck9mT2JqZWN0cygpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQ3ljbGljRGVwZW5kZW5jeUVycm9yKHRoaXMsIHByb3ZpZGVyLmtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW50aWF0ZVByb3ZpZGVyKHByb3ZpZGVyLCB2aXNpYmlsaXR5KTtcclxuICAgIH07XHJcbiAgICBJbmplY3Rvci5wcm90b3R5cGUuX2luc3RhbnRpYXRlUHJvdmlkZXIgPSBmdW5jdGlvbiAocHJvdmlkZXIsIHZpc2liaWxpdHkpIHtcclxuICAgICAgICBpZiAocHJvdmlkZXIubXVsdGlQcm92aWRlcikge1xyXG4gICAgICAgICAgICB2YXIgcmVzID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNyZWF0ZUZpeGVkU2l6ZShwcm92aWRlci5yZXNvbHZlZEZhY3Rvcmllcy5sZW5ndGgpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3ZpZGVyLnJlc29sdmVkRmFjdG9yaWVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICByZXNbaV0gPSB0aGlzLl9pbnN0YW50aWF0ZShwcm92aWRlciwgcHJvdmlkZXIucmVzb2x2ZWRGYWN0b3JpZXNbaV0sIHZpc2liaWxpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFudGlhdGUocHJvdmlkZXIsIHByb3ZpZGVyLnJlc29sdmVkRmFjdG9yaWVzWzBdLCB2aXNpYmlsaXR5KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSW5qZWN0b3IucHJvdG90eXBlLl9pbnN0YW50aWF0ZSA9IGZ1bmN0aW9uIChwcm92aWRlciwgcmVzb2x2ZWRGYWN0b3J5LCB2aXNpYmlsaXR5KSB7XHJcbiAgICAgICAgdmFyIGZhY3RvcnkgPSByZXNvbHZlZEZhY3RvcnkuZmFjdG9yeTtcclxuICAgICAgICB2YXIgZGVwcyA9IHJlc29sdmVkRmFjdG9yeS5kZXBlbmRlbmNpZXM7XHJcbiAgICAgICAgdmFyIGxlbmd0aCA9IGRlcHMubGVuZ3RoO1xyXG4gICAgICAgIHZhciBkMCwgZDEsIGQyLCBkMywgZDQsIGQ1LCBkNiwgZDcsIGQ4LCBkOSwgZDEwLCBkMTEsIGQxMiwgZDEzLCBkMTQsIGQxNSwgZDE2LCBkMTcsIGQxOCwgZDE5O1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGQwID0gbGVuZ3RoID4gMCA/IHRoaXMuX2dldEJ5RGVwZW5kZW5jeShwcm92aWRlciwgZGVwc1swXSwgdmlzaWJpbGl0eSkgOiBudWxsO1xyXG4gICAgICAgICAgICBkMSA9IGxlbmd0aCA+IDEgPyB0aGlzLl9nZXRCeURlcGVuZGVuY3kocHJvdmlkZXIsIGRlcHNbMV0sIHZpc2liaWxpdHkpIDogbnVsbDtcclxuICAgICAgICAgICAgZDIgPSBsZW5ndGggPiAyID8gdGhpcy5fZ2V0QnlEZXBlbmRlbmN5KHByb3ZpZGVyLCBkZXBzWzJdLCB2aXNpYmlsaXR5KSA6IG51bGw7XHJcbiAgICAgICAgICAgIGQzID0gbGVuZ3RoID4gMyA/IHRoaXMuX2dldEJ5RGVwZW5kZW5jeShwcm92aWRlciwgZGVwc1szXSwgdmlzaWJpbGl0eSkgOiBudWxsO1xyXG4gICAgICAgICAgICBkNCA9IGxlbmd0aCA+IDQgPyB0aGlzLl9nZXRCeURlcGVuZGVuY3kocHJvdmlkZXIsIGRlcHNbNF0sIHZpc2liaWxpdHkpIDogbnVsbDtcclxuICAgICAgICAgICAgZDUgPSBsZW5ndGggPiA1ID8gdGhpcy5fZ2V0QnlEZXBlbmRlbmN5KHByb3ZpZGVyLCBkZXBzWzVdLCB2aXNpYmlsaXR5KSA6IG51bGw7XHJcbiAgICAgICAgICAgIGQ2ID0gbGVuZ3RoID4gNiA/IHRoaXMuX2dldEJ5RGVwZW5kZW5jeShwcm92aWRlciwgZGVwc1s2XSwgdmlzaWJpbGl0eSkgOiBudWxsO1xyXG4gICAgICAgICAgICBkNyA9IGxlbmd0aCA+IDcgPyB0aGlzLl9nZXRCeURlcGVuZGVuY3kocHJvdmlkZXIsIGRlcHNbN10sIHZpc2liaWxpdHkpIDogbnVsbDtcclxuICAgICAgICAgICAgZDggPSBsZW5ndGggPiA4ID8gdGhpcy5fZ2V0QnlEZXBlbmRlbmN5KHByb3ZpZGVyLCBkZXBzWzhdLCB2aXNpYmlsaXR5KSA6IG51bGw7XHJcbiAgICAgICAgICAgIGQ5ID0gbGVuZ3RoID4gOSA/IHRoaXMuX2dldEJ5RGVwZW5kZW5jeShwcm92aWRlciwgZGVwc1s5XSwgdmlzaWJpbGl0eSkgOiBudWxsO1xyXG4gICAgICAgICAgICBkMTAgPSBsZW5ndGggPiAxMCA/IHRoaXMuX2dldEJ5RGVwZW5kZW5jeShwcm92aWRlciwgZGVwc1sxMF0sIHZpc2liaWxpdHkpIDogbnVsbDtcclxuICAgICAgICAgICAgZDExID0gbGVuZ3RoID4gMTEgPyB0aGlzLl9nZXRCeURlcGVuZGVuY3kocHJvdmlkZXIsIGRlcHNbMTFdLCB2aXNpYmlsaXR5KSA6IG51bGw7XHJcbiAgICAgICAgICAgIGQxMiA9IGxlbmd0aCA+IDEyID8gdGhpcy5fZ2V0QnlEZXBlbmRlbmN5KHByb3ZpZGVyLCBkZXBzWzEyXSwgdmlzaWJpbGl0eSkgOiBudWxsO1xyXG4gICAgICAgICAgICBkMTMgPSBsZW5ndGggPiAxMyA/IHRoaXMuX2dldEJ5RGVwZW5kZW5jeShwcm92aWRlciwgZGVwc1sxM10sIHZpc2liaWxpdHkpIDogbnVsbDtcclxuICAgICAgICAgICAgZDE0ID0gbGVuZ3RoID4gMTQgPyB0aGlzLl9nZXRCeURlcGVuZGVuY3kocHJvdmlkZXIsIGRlcHNbMTRdLCB2aXNpYmlsaXR5KSA6IG51bGw7XHJcbiAgICAgICAgICAgIGQxNSA9IGxlbmd0aCA+IDE1ID8gdGhpcy5fZ2V0QnlEZXBlbmRlbmN5KHByb3ZpZGVyLCBkZXBzWzE1XSwgdmlzaWJpbGl0eSkgOiBudWxsO1xyXG4gICAgICAgICAgICBkMTYgPSBsZW5ndGggPiAxNiA/IHRoaXMuX2dldEJ5RGVwZW5kZW5jeShwcm92aWRlciwgZGVwc1sxNl0sIHZpc2liaWxpdHkpIDogbnVsbDtcclxuICAgICAgICAgICAgZDE3ID0gbGVuZ3RoID4gMTcgPyB0aGlzLl9nZXRCeURlcGVuZGVuY3kocHJvdmlkZXIsIGRlcHNbMTddLCB2aXNpYmlsaXR5KSA6IG51bGw7XHJcbiAgICAgICAgICAgIGQxOCA9IGxlbmd0aCA+IDE4ID8gdGhpcy5fZ2V0QnlEZXBlbmRlbmN5KHByb3ZpZGVyLCBkZXBzWzE4XSwgdmlzaWJpbGl0eSkgOiBudWxsO1xyXG4gICAgICAgICAgICBkMTkgPSBsZW5ndGggPiAxOSA/IHRoaXMuX2dldEJ5RGVwZW5kZW5jeShwcm92aWRlciwgZGVwc1sxOV0sIHZpc2liaWxpdHkpIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBleGNlcHRpb25zXzEuQWJzdHJhY3RQcm92aWRlckVycm9yIHx8IGUgaW5zdGFuY2VvZiBleGNlcHRpb25zXzEuSW5zdGFudGlhdGlvbkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBlLmFkZEtleSh0aGlzLCBwcm92aWRlci5rZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvYmo7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgc3dpdGNoIChsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBvYmogPSBmYWN0b3J5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqID0gZmFjdG9yeShkMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqID0gZmFjdG9yeShkMCwgZDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IGZhY3RvcnkoZDAsIGQxLCBkMik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqID0gZmFjdG9yeShkMCwgZDEsIGQyLCBkMyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqID0gZmFjdG9yeShkMCwgZDEsIGQyLCBkMywgZDQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IGZhY3RvcnkoZDAsIGQxLCBkMiwgZDMsIGQ0LCBkNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqID0gZmFjdG9yeShkMCwgZDEsIGQyLCBkMywgZDQsIGQ1LCBkNik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqID0gZmFjdG9yeShkMCwgZDEsIGQyLCBkMywgZDQsIGQ1LCBkNiwgZDcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IGZhY3RvcnkoZDAsIGQxLCBkMiwgZDMsIGQ0LCBkNSwgZDYsIGQ3LCBkOCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxyXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IGZhY3RvcnkoZDAsIGQxLCBkMiwgZDMsIGQ0LCBkNSwgZDYsIGQ3LCBkOCwgZDkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcclxuICAgICAgICAgICAgICAgICAgICBvYmogPSBmYWN0b3J5KGQwLCBkMSwgZDIsIGQzLCBkNCwgZDUsIGQ2LCBkNywgZDgsIGQ5LCBkMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxMjpcclxuICAgICAgICAgICAgICAgICAgICBvYmogPSBmYWN0b3J5KGQwLCBkMSwgZDIsIGQzLCBkNCwgZDUsIGQ2LCBkNywgZDgsIGQ5LCBkMTAsIGQxMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDEzOlxyXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IGZhY3RvcnkoZDAsIGQxLCBkMiwgZDMsIGQ0LCBkNSwgZDYsIGQ3LCBkOCwgZDksIGQxMCwgZDExLCBkMTIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxNDpcclxuICAgICAgICAgICAgICAgICAgICBvYmogPSBmYWN0b3J5KGQwLCBkMSwgZDIsIGQzLCBkNCwgZDUsIGQ2LCBkNywgZDgsIGQ5LCBkMTAsIGQxMSwgZDEyLCBkMTMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxNTpcclxuICAgICAgICAgICAgICAgICAgICBvYmogPSBmYWN0b3J5KGQwLCBkMSwgZDIsIGQzLCBkNCwgZDUsIGQ2LCBkNywgZDgsIGQ5LCBkMTAsIGQxMSwgZDEyLCBkMTMsIGQxNCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE2OlxyXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IGZhY3RvcnkoZDAsIGQxLCBkMiwgZDMsIGQ0LCBkNSwgZDYsIGQ3LCBkOCwgZDksIGQxMCwgZDExLCBkMTIsIGQxMywgZDE0LCBkMTUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxNzpcclxuICAgICAgICAgICAgICAgICAgICBvYmogPSBmYWN0b3J5KGQwLCBkMSwgZDIsIGQzLCBkNCwgZDUsIGQ2LCBkNywgZDgsIGQ5LCBkMTAsIGQxMSwgZDEyLCBkMTMsIGQxNCwgZDE1LCBkMTYpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxODpcclxuICAgICAgICAgICAgICAgICAgICBvYmogPSBmYWN0b3J5KGQwLCBkMSwgZDIsIGQzLCBkNCwgZDUsIGQ2LCBkNywgZDgsIGQ5LCBkMTAsIGQxMSwgZDEyLCBkMTMsIGQxNCwgZDE1LCBkMTYsIGQxNyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE5OlxyXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IGZhY3RvcnkoZDAsIGQxLCBkMiwgZDMsIGQ0LCBkNSwgZDYsIGQ3LCBkOCwgZDksIGQxMCwgZDExLCBkMTIsIGQxMywgZDE0LCBkMTUsIGQxNiwgZDE3LCBkMTgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyMDpcclxuICAgICAgICAgICAgICAgICAgICBvYmogPSBmYWN0b3J5KGQwLCBkMSwgZDIsIGQzLCBkNCwgZDUsIGQ2LCBkNywgZDgsIGQ5LCBkMTAsIGQxMSwgZDEyLCBkMTMsIGQxNCwgZDE1LCBkMTYsIGQxNywgZDE4LCBkMTkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuSW5zdGFudGlhdGlvbkVycm9yKHRoaXMsIGUsIGUuc3RhY2ssIHByb3ZpZGVyLmtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9O1xyXG4gICAgSW5qZWN0b3IucHJvdG90eXBlLl9nZXRCeURlcGVuZGVuY3kgPSBmdW5jdGlvbiAocHJvdmlkZXIsIGRlcCwgcHJvdmlkZXJWaXNpYmlsaXR5KSB7XHJcbiAgICAgICAgdmFyIHNwZWNpYWwgPSBsYW5nXzEuaXNQcmVzZW50KHRoaXMuX2RlcFByb3ZpZGVyKSA/XHJcbiAgICAgICAgICAgIHRoaXMuX2RlcFByb3ZpZGVyLmdldERlcGVuZGVuY3kodGhpcywgcHJvdmlkZXIsIGRlcCkgOlxyXG4gICAgICAgICAgICBleHBvcnRzLlVOREVGSU5FRDtcclxuICAgICAgICBpZiAoc3BlY2lhbCAhPT0gZXhwb3J0cy5VTkRFRklORUQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNwZWNpYWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QnlLZXkoZGVwLmtleSwgZGVwLmxvd2VyQm91bmRWaXNpYmlsaXR5LCBkZXAudXBwZXJCb3VuZFZpc2liaWxpdHksIGRlcC5vcHRpb25hbCwgcHJvdmlkZXJWaXNpYmlsaXR5KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSW5qZWN0b3IucHJvdG90eXBlLl9nZXRCeUtleSA9IGZ1bmN0aW9uIChrZXksIGxvd2VyQm91bmRWaXNpYmlsaXR5LCB1cHBlckJvdW5kVmlzaWJpbGl0eSwgb3B0aW9uYWwsIHByb3ZpZGVyVmlzaWJpbGl0eSkge1xyXG4gICAgICAgIGlmIChrZXkgPT09IElOSkVDVE9SX0tFWSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVwcGVyQm91bmRWaXNpYmlsaXR5IGluc3RhbmNlb2YgbWV0YWRhdGFfMS5TZWxmTWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldEJ5S2V5U2VsZihrZXksIG9wdGlvbmFsLCBwcm92aWRlclZpc2liaWxpdHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh1cHBlckJvdW5kVmlzaWJpbGl0eSBpbnN0YW5jZW9mIG1ldGFkYXRhXzEuSG9zdE1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRCeUtleUhvc3Qoa2V5LCBvcHRpb25hbCwgcHJvdmlkZXJWaXNpYmlsaXR5LCBsb3dlckJvdW5kVmlzaWJpbGl0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QnlLZXlEZWZhdWx0KGtleSwgb3B0aW9uYWwsIHByb3ZpZGVyVmlzaWJpbGl0eSwgbG93ZXJCb3VuZFZpc2liaWxpdHkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBJbmplY3Rvci5wcm90b3R5cGUuX3Rocm93T3JOdWxsID0gZnVuY3Rpb24gKGtleSwgb3B0aW9uYWwpIHtcclxuICAgICAgICBpZiAob3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLk5vUHJvdmlkZXJFcnJvcih0aGlzLCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBJbmplY3Rvci5wcm90b3R5cGUuX2dldEJ5S2V5U2VsZiA9IGZ1bmN0aW9uIChrZXksIG9wdGlvbmFsLCBwcm92aWRlclZpc2liaWxpdHkpIHtcclxuICAgICAgICB2YXIgb2JqID0gdGhpcy5fc3RyYXRlZ3kuZ2V0T2JqQnlLZXlJZChrZXkuaWQsIHByb3ZpZGVyVmlzaWJpbGl0eSk7XHJcbiAgICAgICAgcmV0dXJuIChvYmogIT09IGV4cG9ydHMuVU5ERUZJTkVEKSA/IG9iaiA6IHRoaXMuX3Rocm93T3JOdWxsKGtleSwgb3B0aW9uYWwpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIEluamVjdG9yLnByb3RvdHlwZS5fZ2V0QnlLZXlIb3N0ID0gZnVuY3Rpb24gKGtleSwgb3B0aW9uYWwsIHByb3ZpZGVyVmlzaWJpbGl0eSwgbG93ZXJCb3VuZFZpc2liaWxpdHkpIHtcclxuICAgICAgICB2YXIgaW5qID0gdGhpcztcclxuICAgICAgICBpZiAobG93ZXJCb3VuZFZpc2liaWxpdHkgaW5zdGFuY2VvZiBtZXRhZGF0YV8xLlNraXBTZWxmTWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgaWYgKGluai5faXNIb3N0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UHJpdmF0ZURlcGVuZGVuY3koa2V5LCBvcHRpb25hbCwgaW5qKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGluaiA9IGluai5fcGFyZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlIChpbmogIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgb2JqID0gaW5qLl9zdHJhdGVneS5nZXRPYmpCeUtleUlkKGtleS5pZCwgcHJvdmlkZXJWaXNpYmlsaXR5KTtcclxuICAgICAgICAgICAgaWYgKG9iaiAhPT0gZXhwb3J0cy5VTkRFRklORUQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChpbmouX3BhcmVudCkgJiYgaW5qLl9pc0hvc3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRQcml2YXRlRGVwZW5kZW5jeShrZXksIG9wdGlvbmFsLCBpbmopO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaW5qID0gaW5qLl9wYXJlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rocm93T3JOdWxsKGtleSwgb3B0aW9uYWwpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIEluamVjdG9yLnByb3RvdHlwZS5fZ2V0UHJpdmF0ZURlcGVuZGVuY3kgPSBmdW5jdGlvbiAoa2V5LCBvcHRpb25hbCwgaW5qKSB7XHJcbiAgICAgICAgdmFyIG9iaiA9IGluai5fcGFyZW50Ll9zdHJhdGVneS5nZXRPYmpCeUtleUlkKGtleS5pZCwgVmlzaWJpbGl0eS5Qcml2YXRlKTtcclxuICAgICAgICByZXR1cm4gKG9iaiAhPT0gZXhwb3J0cy5VTkRFRklORUQpID8gb2JqIDogdGhpcy5fdGhyb3dPck51bGwoa2V5LCBvcHRpb25hbCk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgSW5qZWN0b3IucHJvdG90eXBlLl9nZXRCeUtleURlZmF1bHQgPSBmdW5jdGlvbiAoa2V5LCBvcHRpb25hbCwgcHJvdmlkZXJWaXNpYmlsaXR5LCBsb3dlckJvdW5kVmlzaWJpbGl0eSkge1xyXG4gICAgICAgIHZhciBpbmogPSB0aGlzO1xyXG4gICAgICAgIGlmIChsb3dlckJvdW5kVmlzaWJpbGl0eSBpbnN0YW5jZW9mIG1ldGFkYXRhXzEuU2tpcFNlbGZNZXRhZGF0YSkge1xyXG4gICAgICAgICAgICBwcm92aWRlclZpc2liaWxpdHkgPSBpbmouX2lzSG9zdCA/IFZpc2liaWxpdHkuUHVibGljQW5kUHJpdmF0ZSA6IFZpc2liaWxpdHkuUHVibGljO1xyXG4gICAgICAgICAgICBpbmogPSBpbmouX3BhcmVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKGluaiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBvYmogPSBpbmouX3N0cmF0ZWd5LmdldE9iakJ5S2V5SWQoa2V5LmlkLCBwcm92aWRlclZpc2liaWxpdHkpO1xyXG4gICAgICAgICAgICBpZiAob2JqICE9PSBleHBvcnRzLlVOREVGSU5FRClcclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICAgIHByb3ZpZGVyVmlzaWJpbGl0eSA9IGluai5faXNIb3N0ID8gVmlzaWJpbGl0eS5QdWJsaWNBbmRQcml2YXRlIDogVmlzaWJpbGl0eS5QdWJsaWM7XHJcbiAgICAgICAgICAgIGluaiA9IGluai5fcGFyZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fdGhyb3dPck51bGwoa2V5LCBvcHRpb25hbCk7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEluamVjdG9yLnByb3RvdHlwZSwgXCJkaXNwbGF5TmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkluamVjdG9yKHByb3ZpZGVyczogW1wiICsgX21hcFByb3ZpZGVycyh0aGlzLCBmdW5jdGlvbiAoYikgeyByZXR1cm4gKFwiIFxcXCJcIiArIGIua2V5LmRpc3BsYXlOYW1lICsgXCJcXFwiIFwiKTsgfSkuam9pbihcIiwgXCIpICsgXCJdKVwiO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgSW5qZWN0b3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5kaXNwbGF5TmFtZTsgfTtcclxuICAgIHJldHVybiBJbmplY3RvcjtcclxufSkoKTtcclxuZXhwb3J0cy5JbmplY3RvciA9IEluamVjdG9yO1xyXG52YXIgSU5KRUNUT1JfS0VZID0ga2V5XzEuS2V5LmdldChJbmplY3Rvcik7XHJcbmZ1bmN0aW9uIF9tYXBQcm92aWRlcnMoaW5qZWN0b3IsIGZuKSB7XHJcbiAgICB2YXIgcmVzID0gW107XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluamVjdG9yLl9wcm90by5udW1iZXJPZlByb3ZpZGVyczsgKytpKSB7XHJcbiAgICAgICAgcmVzLnB1c2goZm4oaW5qZWN0b3IuX3Byb3RvLmdldFByb3ZpZGVyQXRJbmRleChpKSkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmplY3Rvci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgdHlwZV9saXRlcmFsXzEgPSByZXF1aXJlKCcuL3R5cGVfbGl0ZXJhbCcpO1xyXG52YXIgZm9yd2FyZF9yZWZfMSA9IHJlcXVpcmUoJy4vZm9yd2FyZF9yZWYnKTtcclxudmFyIHR5cGVfbGl0ZXJhbF8yID0gcmVxdWlyZSgnLi90eXBlX2xpdGVyYWwnKTtcclxuZXhwb3J0cy5UeXBlTGl0ZXJhbCA9IHR5cGVfbGl0ZXJhbF8yLlR5cGVMaXRlcmFsO1xyXG4vKipcclxuICogQSB1bmlxdWUgb2JqZWN0IHVzZWQgZm9yIHJldHJpZXZpbmcgaXRlbXMgZnJvbSB0aGUge0BsaW5rIEluamVjdG9yfS5cclxuICpcclxuICogS2V5cyBoYXZlOlxyXG4gKiAtIGEgc3lzdGVtLXdpZGUgdW5pcXVlIGBpZGAuXHJcbiAqIC0gYSBgdG9rZW5gLlxyXG4gKlxyXG4gKiBgS2V5YCBpcyB1c2VkIGludGVybmFsbHkgYnkge0BsaW5rIEluamVjdG9yfSBiZWNhdXNlIGl0cyBzeXN0ZW0td2lkZSB1bmlxdWUgYGlkYCBhbGxvd3MgdGhlXHJcbiAqIGluamVjdG9yIHRvIHN0b3JlIGNyZWF0ZWQgb2JqZWN0cyBpbiBhIG1vcmUgZWZmaWNpZW50IHdheS5cclxuICpcclxuICogYEtleWAgc2hvdWxkIG5vdCBiZSBjcmVhdGVkIGRpcmVjdGx5LiB7QGxpbmsgSW5qZWN0b3J9IGNyZWF0ZXMga2V5cyBhdXRvbWF0aWNhbGx5IHdoZW4gcmVzb2x2aW5nXHJcbiAqIHByb3ZpZGVycy5cclxuICovXHJcbnZhciBLZXkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEtleSh0b2tlbiwgaWQpIHtcclxuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayh0b2tlbikpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKCdUb2tlbiBtdXN0IGJlIGRlZmluZWQhJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEtleS5wcm90b3R5cGUsIFwiZGlzcGxheU5hbWVcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgYSBzdHJpbmdpZmllZCB0b2tlbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxhbmdfMS5zdHJpbmdpZnkodGhpcy50b2tlbik7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRyaWV2ZXMgYSBgS2V5YCBmb3IgYSB0b2tlbi5cclxuICAgICAqL1xyXG4gICAgS2V5LmdldCA9IGZ1bmN0aW9uICh0b2tlbikgeyByZXR1cm4gX2dsb2JhbEtleVJlZ2lzdHJ5LmdldChmb3J3YXJkX3JlZl8xLnJlc29sdmVGb3J3YXJkUmVmKHRva2VuKSk7IH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoS2V5LCBcIm51bWJlck9mS2V5c1wiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHJldHVybnMgdGhlIG51bWJlciBvZiBrZXlzIHJlZ2lzdGVyZWQgaW4gdGhlIHN5c3RlbS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9nbG9iYWxLZXlSZWdpc3RyeS5udW1iZXJPZktleXM7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIEtleTtcclxufSkoKTtcclxuZXhwb3J0cy5LZXkgPSBLZXk7XHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbnZhciBLZXlSZWdpc3RyeSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBLZXlSZWdpc3RyeSgpIHtcclxuICAgICAgICB0aGlzLl9hbGxLZXlzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgS2V5UmVnaXN0cnkucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgICAgIGlmICh0b2tlbiBpbnN0YW5jZW9mIEtleSlcclxuICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xyXG4gICAgICAgIC8vIFRPRE86IHdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzEyM1xyXG4gICAgICAgIHZhciB0aGVUb2tlbiA9IHRva2VuO1xyXG4gICAgICAgIGlmICh0b2tlbiBpbnN0YW5jZW9mIHR5cGVfbGl0ZXJhbF8xLlR5cGVMaXRlcmFsKSB7XHJcbiAgICAgICAgICAgIHRoZVRva2VuID0gdG9rZW4udHlwZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdG9rZW4gPSB0aGVUb2tlbjtcclxuICAgICAgICBpZiAodGhpcy5fYWxsS2V5cy5oYXModG9rZW4pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hbGxLZXlzLmdldCh0b2tlbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBuZXdLZXkgPSBuZXcgS2V5KHRva2VuLCBLZXkubnVtYmVyT2ZLZXlzKTtcclxuICAgICAgICB0aGlzLl9hbGxLZXlzLnNldCh0b2tlbiwgbmV3S2V5KTtcclxuICAgICAgICByZXR1cm4gbmV3S2V5O1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShLZXlSZWdpc3RyeS5wcm90b3R5cGUsIFwibnVtYmVyT2ZLZXlzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2FsbEtleXMuc2l6ZTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gS2V5UmVnaXN0cnk7XHJcbn0pKCk7XHJcbmV4cG9ydHMuS2V5UmVnaXN0cnkgPSBLZXlSZWdpc3RyeTtcclxudmFyIF9nbG9iYWxLZXlSZWdpc3RyeSA9IG5ldyBLZXlSZWdpc3RyeSgpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXkuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKFwiYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmdcIik7XHJcbi8qKlxyXG4gKiBBIHBhcmFtZXRlciBtZXRhZGF0YSB0aGF0IHNwZWNpZmllcyBhIGRlcGVuZGVuY3kuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC82dUhZSks/cD1wcmV2aWV3KSlcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBFbmdpbmUge31cclxuICpcclxuICogQEluamVjdGFibGUoKVxyXG4gKiBjbGFzcyBDYXIge1xyXG4gKiAgIGVuZ2luZTtcclxuICogICBjb25zdHJ1Y3RvcihASW5qZWN0KFwiTXlFbmdpbmVcIikgZW5naW5lOkVuZ2luZSkge1xyXG4gKiAgICAgdGhpcy5lbmdpbmUgPSBlbmdpbmU7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqXHJcbiAqIHZhciBpbmplY3RvciA9IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW1xyXG4gKiAgcHJvdmlkZShcIk15RW5naW5lXCIsIHt1c2VDbGFzczogRW5naW5lfSksXHJcbiAqICBDYXJcclxuICogXSk7XHJcbiAqXHJcbiAqIGV4cGVjdChpbmplY3Rvci5nZXQoQ2FyKS5lbmdpbmUgaW5zdGFuY2VvZiBFbmdpbmUpLnRvQmUodHJ1ZSk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBXaGVuIGBASW5qZWN0KClgIGlzIG5vdCBwcmVzZW50LCB7QGxpbmsgSW5qZWN0b3J9IHdpbGwgdXNlIHRoZSB0eXBlIGFubm90YXRpb24gb2YgdGhlIHBhcmFtZXRlci5cclxuICpcclxuICogIyMjIEV4YW1wbGVcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBFbmdpbmUge31cclxuICpcclxuICogQEluamVjdGFibGUoKVxyXG4gKiBjbGFzcyBDYXIge1xyXG4gKiAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbmdpbmU6IEVuZ2luZSkge30gLy9zYW1lIGFzIGNvbnN0cnVjdG9yKEBJbmplY3QoRW5naW5lKSBlbmdpbmU6RW5naW5lKVxyXG4gKiB9XHJcbiAqXHJcbiAqIHZhciBpbmplY3RvciA9IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW0VuZ2luZSwgQ2FyXSk7XHJcbiAqIGV4cGVjdChpbmplY3Rvci5nZXQoQ2FyKS5lbmdpbmUgaW5zdGFuY2VvZiBFbmdpbmUpLnRvQmUodHJ1ZSk7XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIEluamVjdE1ldGFkYXRhID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEluamVjdE1ldGFkYXRhKHRva2VuKSB7XHJcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuO1xyXG4gICAgfVxyXG4gICAgSW5qZWN0TWV0YWRhdGEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJASW5qZWN0KFwiICsgbGFuZ18xLnN0cmluZ2lmeSh0aGlzLnRva2VuKSArIFwiKVwiOyB9O1xyXG4gICAgSW5qZWN0TWV0YWRhdGEgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBsYW5nXzEuQ09OU1QoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbT2JqZWN0XSlcclxuICAgIF0sIEluamVjdE1ldGFkYXRhKTtcclxuICAgIHJldHVybiBJbmplY3RNZXRhZGF0YTtcclxufSkoKTtcclxuZXhwb3J0cy5JbmplY3RNZXRhZGF0YSA9IEluamVjdE1ldGFkYXRhO1xyXG4vKipcclxuICogQSBwYXJhbWV0ZXIgbWV0YWRhdGEgdGhhdCBtYXJrcyBhIGRlcGVuZGVuY3kgYXMgb3B0aW9uYWwuIHtAbGluayBJbmplY3Rvcn0gcHJvdmlkZXMgYG51bGxgIGlmXHJcbiAqIHRoZSBkZXBlbmRlbmN5IGlzIG5vdCBmb3VuZC5cclxuICpcclxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L0FzcnlPbT9wPXByZXZpZXcpKVxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGNsYXNzIEVuZ2luZSB7fVxyXG4gKlxyXG4gKiBASW5qZWN0YWJsZSgpXHJcbiAqIGNsYXNzIENhciB7XHJcbiAqICAgZW5naW5lO1xyXG4gKiAgIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIGVuZ2luZTpFbmdpbmUpIHtcclxuICogICAgIHRoaXMuZW5naW5lID0gZW5naW5lO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKlxyXG4gKiB2YXIgaW5qZWN0b3IgPSBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtDYXJdKTtcclxuICogZXhwZWN0KGluamVjdG9yLmdldChDYXIpLmVuZ2luZSkudG9CZU51bGwoKTtcclxuICogYGBgXHJcbiAqL1xyXG52YXIgT3B0aW9uYWxNZXRhZGF0YSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBPcHRpb25hbE1ldGFkYXRhKCkge1xyXG4gICAgfVxyXG4gICAgT3B0aW9uYWxNZXRhZGF0YS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIkBPcHRpb25hbCgpXCI7IH07XHJcbiAgICBPcHRpb25hbE1ldGFkYXRhID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXHJcbiAgICBdLCBPcHRpb25hbE1ldGFkYXRhKTtcclxuICAgIHJldHVybiBPcHRpb25hbE1ldGFkYXRhO1xyXG59KSgpO1xyXG5leHBvcnRzLk9wdGlvbmFsTWV0YWRhdGEgPSBPcHRpb25hbE1ldGFkYXRhO1xyXG4vKipcclxuICogYERlcGVuZGVuY3lNZXRhZGF0YWAgaXMgdXNlZCBieSB0aGUgZnJhbWV3b3JrIHRvIGV4dGVuZCBESS5cclxuICogVGhpcyBpcyBpbnRlcm5hbCB0byBBbmd1bGFyIGFuZCBzaG91bGQgbm90IGJlIHVzZWQgZGlyZWN0bHkuXHJcbiAqL1xyXG52YXIgRGVwZW5kZW5jeU1ldGFkYXRhID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERlcGVuZGVuY3lNZXRhZGF0YSgpIHtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZXBlbmRlbmN5TWV0YWRhdGEucHJvdG90eXBlLCBcInRva2VuXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRGVwZW5kZW5jeU1ldGFkYXRhID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXHJcbiAgICBdLCBEZXBlbmRlbmN5TWV0YWRhdGEpO1xyXG4gICAgcmV0dXJuIERlcGVuZGVuY3lNZXRhZGF0YTtcclxufSkoKTtcclxuZXhwb3J0cy5EZXBlbmRlbmN5TWV0YWRhdGEgPSBEZXBlbmRlbmN5TWV0YWRhdGE7XHJcbi8qKlxyXG4gKiBBIG1hcmtlciBtZXRhZGF0YSB0aGF0IG1hcmtzIGEgY2xhc3MgYXMgYXZhaWxhYmxlIHRvIHtAbGluayBJbmplY3Rvcn0gZm9yIGNyZWF0aW9uLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvV2s0RE1RP3A9cHJldmlldykpXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogQEluamVjdGFibGUoKVxyXG4gKiBjbGFzcyBVc2VmdWxTZXJ2aWNlIHt9XHJcbiAqXHJcbiAqIEBJbmplY3RhYmxlKClcclxuICogY2xhc3MgTmVlZHNTZXJ2aWNlIHtcclxuICogICBjb25zdHJ1Y3RvcihwdWJsaWMgc2VydmljZTpVc2VmdWxTZXJ2aWNlKSB7fVxyXG4gKiB9XHJcbiAqXHJcbiAqIHZhciBpbmplY3RvciA9IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW05lZWRzU2VydmljZSwgVXNlZnVsU2VydmljZV0pO1xyXG4gKiBleHBlY3QoaW5qZWN0b3IuZ2V0KE5lZWRzU2VydmljZSkuc2VydmljZSBpbnN0YW5jZW9mIFVzZWZ1bFNlcnZpY2UpLnRvQmUodHJ1ZSk7XHJcbiAqIGBgYFxyXG4gKiB7QGxpbmsgSW5qZWN0b3J9IHdpbGwgdGhyb3cge0BsaW5rIE5vQW5ub3RhdGlvbkVycm9yfSB3aGVuIHRyeWluZyB0byBpbnN0YW50aWF0ZSBhIGNsYXNzIHRoYXRcclxuICogZG9lcyBub3QgaGF2ZSBgQEluamVjdGFibGVgIG1hcmtlciwgYXMgc2hvd24gaW4gdGhlIGV4YW1wbGUgYmVsb3cuXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgVXNlZnVsU2VydmljZSB7fVxyXG4gKlxyXG4gKiBjbGFzcyBOZWVkc1NlcnZpY2Uge1xyXG4gKiAgIGNvbnN0cnVjdG9yKHB1YmxpYyBzZXJ2aWNlOlVzZWZ1bFNlcnZpY2UpIHt9XHJcbiAqIH1cclxuICpcclxuICogdmFyIGluamVjdG9yID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbTmVlZHNTZXJ2aWNlLCBVc2VmdWxTZXJ2aWNlXSk7XHJcbiAqIGV4cGVjdCgoKSA9PiBpbmplY3Rvci5nZXQoTmVlZHNTZXJ2aWNlKSkudG9UaHJvd0Vycm9yKCk7XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIEluamVjdGFibGVNZXRhZGF0YSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBJbmplY3RhYmxlTWV0YWRhdGEoKSB7XHJcbiAgICB9XHJcbiAgICBJbmplY3RhYmxlTWV0YWRhdGEgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBsYW5nXzEuQ09OU1QoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcclxuICAgIF0sIEluamVjdGFibGVNZXRhZGF0YSk7XHJcbiAgICByZXR1cm4gSW5qZWN0YWJsZU1ldGFkYXRhO1xyXG59KSgpO1xyXG5leHBvcnRzLkluamVjdGFibGVNZXRhZGF0YSA9IEluamVjdGFibGVNZXRhZGF0YTtcclxuLyoqXHJcbiAqIFNwZWNpZmllcyB0aGF0IGFuIHtAbGluayBJbmplY3Rvcn0gc2hvdWxkIHJldHJpZXZlIGEgZGVwZW5kZW5jeSBvbmx5IGZyb20gaXRzZWxmLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvTmVhZ0FnP3A9cHJldmlldykpXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgRGVwZW5kZW5jeSB7XHJcbiAqIH1cclxuICpcclxuICogQEluamVjdGFibGUoKVxyXG4gKiBjbGFzcyBOZWVkc0RlcGVuZGVuY3kge1xyXG4gKiAgIGRlcGVuZGVuY3k7XHJcblxyXG4gKiAgIGRlcGVuZGVuY3k7XHJcbiAqICAgY29uc3RydWN0b3IoQFNlbGYoKSBkZXBlbmRlbmN5OkRlcGVuZGVuY3kpIHtcclxuICogICAgIHRoaXMuZGVwZW5kZW5jeSA9IGRlcGVuZGVuY3k7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqXHJcbiAqIHZhciBpbmogPSBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtEZXBlbmRlbmN5LCBOZWVkc0RlcGVuZGVuY3ldKTtcclxuICogdmFyIG5kID0gaW5qLmdldChOZWVkc0RlcGVuZGVuY3kpO1xyXG4gKlxyXG4gKiBleHBlY3QobmQuZGVwZW5kZW5jeSBpbnN0YW5jZW9mIERlcGVuZGVuY3kpLnRvQmUodHJ1ZSk7XHJcbiAqXHJcbiAqIHZhciBpbmogPSBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtEZXBlbmRlbmN5XSk7XHJcbiAqIHZhciBjaGlsZCA9IGluai5yZXNvbHZlQW5kQ3JlYXRlQ2hpbGQoW05lZWRzRGVwZW5kZW5jeV0pO1xyXG4gKiBleHBlY3QoKCkgPT4gY2hpbGQuZ2V0KE5lZWRzRGVwZW5kZW5jeSkpLnRvVGhyb3dFcnJvcigpO1xyXG4gKiBgYGBcclxuICovXHJcbnZhciBTZWxmTWV0YWRhdGEgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2VsZk1ldGFkYXRhKCkge1xyXG4gICAgfVxyXG4gICAgU2VsZk1ldGFkYXRhLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFwiQFNlbGYoKVwiOyB9O1xyXG4gICAgU2VsZk1ldGFkYXRhID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXHJcbiAgICBdLCBTZWxmTWV0YWRhdGEpO1xyXG4gICAgcmV0dXJuIFNlbGZNZXRhZGF0YTtcclxufSkoKTtcclxuZXhwb3J0cy5TZWxmTWV0YWRhdGEgPSBTZWxmTWV0YWRhdGE7XHJcbi8qKlxyXG4gKiBTcGVjaWZpZXMgdGhhdCB0aGUgZGVwZW5kZW5jeSByZXNvbHV0aW9uIHNob3VsZCBzdGFydCBmcm9tIHRoZSBwYXJlbnQgaW5qZWN0b3IuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9XY2hkemI/cD1wcmV2aWV3KSlcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjbGFzcyBEZXBlbmRlbmN5IHtcclxuICogfVxyXG4gKlxyXG4gKiBASW5qZWN0YWJsZSgpXHJcbiAqIGNsYXNzIE5lZWRzRGVwZW5kZW5jeSB7XHJcbiAqICAgZGVwZW5kZW5jeTtcclxuICogICBjb25zdHJ1Y3RvcihAU2tpcFNlbGYoKSBkZXBlbmRlbmN5OkRlcGVuZGVuY3kpIHtcclxuICogICAgIHRoaXMuZGVwZW5kZW5jeSA9IGRlcGVuZGVuY3k7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqXHJcbiAqIHZhciBwYXJlbnQgPSBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtEZXBlbmRlbmN5XSk7XHJcbiAqIHZhciBjaGlsZCA9IHBhcmVudC5yZXNvbHZlQW5kQ3JlYXRlQ2hpbGQoW05lZWRzRGVwZW5kZW5jeV0pO1xyXG4gKiBleHBlY3QoY2hpbGQuZ2V0KE5lZWRzRGVwZW5kZW5jeSkuZGVwZW5kZW5jeSBpbnN0YW5jZW9mIERlcGVkZW5jeSkudG9CZSh0cnVlKTtcclxuICpcclxuICogdmFyIGluaiA9IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW0RlcGVuZGVuY3ksIE5lZWRzRGVwZW5kZW5jeV0pO1xyXG4gKiBleHBlY3QoKCkgPT4gaW5qLmdldChOZWVkc0RlcGVuZGVuY3kpKS50b1Rocm93RXJyb3IoKTtcclxuICogYGBgXHJcbiAqL1xyXG52YXIgU2tpcFNlbGZNZXRhZGF0YSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTa2lwU2VsZk1ldGFkYXRhKCkge1xyXG4gICAgfVxyXG4gICAgU2tpcFNlbGZNZXRhZGF0YS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIkBTa2lwU2VsZigpXCI7IH07XHJcbiAgICBTa2lwU2VsZk1ldGFkYXRhID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXHJcbiAgICBdLCBTa2lwU2VsZk1ldGFkYXRhKTtcclxuICAgIHJldHVybiBTa2lwU2VsZk1ldGFkYXRhO1xyXG59KSgpO1xyXG5leHBvcnRzLlNraXBTZWxmTWV0YWRhdGEgPSBTa2lwU2VsZk1ldGFkYXRhO1xyXG4vKipcclxuICogU3BlY2lmaWVzIHRoYXQgYW4gaW5qZWN0b3Igc2hvdWxkIHJldHJpZXZlIGEgZGVwZW5kZW5jeSBmcm9tIGFueSBpbmplY3RvciB1bnRpbCByZWFjaGluZyB0aGVcclxuICogY2xvc2VzdCBob3N0LlxyXG4gKlxyXG4gKiBJbiBBbmd1bGFyLCBhIGNvbXBvbmVudCBlbGVtZW50IGlzIGF1dG9tYXRpY2FsbHkgZGVjbGFyZWQgYXMgYSBob3N0IGZvciBhbGwgdGhlIGluamVjdG9ycyBpblxyXG4gKiBpdHMgdmlldy5cclxuICpcclxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L0dYNzlwVj9wPXByZXZpZXcpKVxyXG4gKlxyXG4gKiBJbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgYEFwcGAgY29udGFpbnMgYFBhcmVudENtcGAsIHdoaWNoIGNvbnRhaW5zIGBDaGlsZERpcmVjdGl2ZWAuXHJcbiAqIFNvIGBQYXJlbnRDbXBgIGlzIHRoZSBob3N0IG9mIGBDaGlsZERpcmVjdGl2ZWAuXHJcbiAqXHJcbiAqIGBDaGlsZERpcmVjdGl2ZWAgZGVwZW5kcyBvbiB0d28gc2VydmljZXM6IGBIb3N0U2VydmljZWAgYW5kIGBPdGhlclNlcnZpY2VgLlxyXG4gKiBgSG9zdFNlcnZpY2VgIGlzIGRlZmluZWQgYXQgYFBhcmVudENtcGAsIGFuZCBgT3RoZXJTZXJ2aWNlYCBpcyBkZWZpbmVkIGF0IGBBcHBgLlxyXG4gKlxyXG4gKmBgYHR5cGVzY3JpcHRcclxuICogY2xhc3MgT3RoZXJTZXJ2aWNlIHt9XHJcbiAqIGNsYXNzIEhvc3RTZXJ2aWNlIHt9XHJcbiAqXHJcbiAqIEBEaXJlY3RpdmUoe1xyXG4gKiAgIHNlbGVjdG9yOiAnY2hpbGQtZGlyZWN0aXZlJ1xyXG4gKiB9KVxyXG4gKiBjbGFzcyBDaGlsZERpcmVjdGl2ZSB7XHJcbiAqICAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEhvc3QoKSBvczpPdGhlclNlcnZpY2UsIEBPcHRpb25hbCgpIEBIb3N0KCkgaHM6SG9zdFNlcnZpY2Upe1xyXG4gKiAgICAgY29uc29sZS5sb2coXCJvcyBpcyBudWxsXCIsIG9zKTtcclxuICogICAgIGNvbnNvbGUubG9nKFwiaHMgaXMgTk9UIG51bGxcIiwgaHMpO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKlxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ3BhcmVudC1jbXAnLFxyXG4gKiAgIHByb3ZpZGVyczogW0hvc3RTZXJ2aWNlXSxcclxuICogICB0ZW1wbGF0ZTogYFxyXG4gKiAgICAgRGlyOiA8Y2hpbGQtZGlyZWN0aXZlPjwvY2hpbGQtZGlyZWN0aXZlPlxyXG4gKiAgIGAsXHJcbiAqICAgZGlyZWN0aXZlczogW0NoaWxkRGlyZWN0aXZlXVxyXG4gKiB9KVxyXG4gKiBjbGFzcyBQYXJlbnRDbXAge1xyXG4gKiB9XHJcbiAqXHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgIHNlbGVjdG9yOiAnYXBwJyxcclxuICogICBwcm92aWRlcnM6IFtPdGhlclNlcnZpY2VdLFxyXG4gKiAgIHRlbXBsYXRlOiBgXHJcbiAqICAgICBQYXJlbnQ6IDxwYXJlbnQtY21wPjwvcGFyZW50LWNtcD5cclxuICogICBgLFxyXG4gKiAgIGRpcmVjdGl2ZXM6IFtQYXJlbnRDbXBdXHJcbiAqIH0pXHJcbiAqIGNsYXNzIEFwcCB7XHJcbiAqIH1cclxuICpcclxuICogYm9vdHN0cmFwKEFwcCk7XHJcbiAqYGBgXHJcbiAqL1xyXG52YXIgSG9zdE1ldGFkYXRhID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEhvc3RNZXRhZGF0YSgpIHtcclxuICAgIH1cclxuICAgIEhvc3RNZXRhZGF0YS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIkBIb3N0KClcIjsgfTtcclxuICAgIEhvc3RNZXRhZGF0YSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGxhbmdfMS5DT05TVCgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgSG9zdE1ldGFkYXRhKTtcclxuICAgIHJldHVybiBIb3N0TWV0YWRhdGE7XHJcbn0pKCk7XHJcbmV4cG9ydHMuSG9zdE1ldGFkYXRhID0gSG9zdE1ldGFkYXRhO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRhZGF0YS5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCBpbiBhIERJIFByb3ZpZGVyLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvWXM5ZXpYcGoyTW5veTNVYzhLQnA/cD1wcmV2aWV3KSlcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiB2YXIgdCA9IG5ldyBPcGFxdWVUb2tlbihcInZhbHVlXCIpO1xyXG4gKlxyXG4gKiB2YXIgaW5qZWN0b3IgPSBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtcclxuICogICBwcm92aWRlKHQsIHt1c2VWYWx1ZTogXCJwcm92aWRlZFZhbHVlXCJ9KVxyXG4gKiBdKTtcclxuICpcclxuICogZXhwZWN0KGluamVjdG9yLmdldCh0KSkudG9FcXVhbChcImJpbmRpbmdWYWx1ZVwiKTtcclxuICogYGBgXHJcbiAqXHJcbiAqIFVzaW5nIGFuIGBPcGFxdWVUb2tlbmAgaXMgcHJlZmVyYWJsZSB0byB1c2luZyBzdHJpbmdzIGFzIHRva2VucyBiZWNhdXNlIG9mIHBvc3NpYmxlIGNvbGxpc2lvbnNcclxuICogY2F1c2VkIGJ5IG11bHRpcGxlIHByb3ZpZGVycyB1c2luZyB0aGUgc2FtZSBzdHJpbmcgYXMgdHdvIGRpZmZlcmVudCB0b2tlbnMuXHJcbiAqXHJcbiAqIFVzaW5nIGFuIGBPcGFxdWVUb2tlbmAgaXMgcHJlZmVyYWJsZSB0byB1c2luZyBhbiBgT2JqZWN0YCBhcyB0b2tlbnMgYmVjYXVzZSBpdCBwcm92aWRlcyBiZXR0ZXJcclxuICogZXJyb3IgbWVzc2FnZXMuXHJcbiAqL1xyXG52YXIgT3BhcXVlVG9rZW4gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gT3BhcXVlVG9rZW4oX2Rlc2MpIHtcclxuICAgICAgICB0aGlzLl9kZXNjID0gX2Rlc2M7XHJcbiAgICB9XHJcbiAgICBPcGFxdWVUb2tlbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIlRva2VuIFwiICsgdGhpcy5fZGVzYzsgfTtcclxuICAgIE9wYXF1ZVRva2VuID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW1N0cmluZ10pXHJcbiAgICBdLCBPcGFxdWVUb2tlbik7XHJcbiAgICByZXR1cm4gT3BhcXVlVG9rZW47XHJcbn0pKCk7XHJcbmV4cG9ydHMuT3BhcXVlVG9rZW4gPSBPcGFxdWVUb2tlbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BhcXVlX3Rva2VuLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgcmVmbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvcmVmbGVjdGlvbi9yZWZsZWN0aW9uJyk7XHJcbnZhciBrZXlfMSA9IHJlcXVpcmUoJy4va2V5Jyk7XHJcbnZhciBtZXRhZGF0YV8xID0gcmVxdWlyZSgnLi9tZXRhZGF0YScpO1xyXG52YXIgZXhjZXB0aW9uc18yID0gcmVxdWlyZSgnLi9leGNlcHRpb25zJyk7XHJcbnZhciBmb3J3YXJkX3JlZl8xID0gcmVxdWlyZSgnLi9mb3J3YXJkX3JlZicpO1xyXG52YXIgRGVwZW5kZW5jeSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEZXBlbmRlbmN5KGtleSwgb3B0aW9uYWwsIGxvd2VyQm91bmRWaXNpYmlsaXR5LCB1cHBlckJvdW5kVmlzaWJpbGl0eSwgcHJvcGVydGllcykge1xyXG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgICAgIHRoaXMub3B0aW9uYWwgPSBvcHRpb25hbDtcclxuICAgICAgICB0aGlzLmxvd2VyQm91bmRWaXNpYmlsaXR5ID0gbG93ZXJCb3VuZFZpc2liaWxpdHk7XHJcbiAgICAgICAgdGhpcy51cHBlckJvdW5kVmlzaWJpbGl0eSA9IHVwcGVyQm91bmRWaXNpYmlsaXR5O1xyXG4gICAgICAgIHRoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXM7XHJcbiAgICB9XHJcbiAgICBEZXBlbmRlbmN5LmZyb21LZXkgPSBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBuZXcgRGVwZW5kZW5jeShrZXksIGZhbHNlLCBudWxsLCBudWxsLCBbXSk7IH07XHJcbiAgICByZXR1cm4gRGVwZW5kZW5jeTtcclxufSkoKTtcclxuZXhwb3J0cy5EZXBlbmRlbmN5ID0gRGVwZW5kZW5jeTtcclxudmFyIF9FTVBUWV9MSVNUID0gbGFuZ18xLkNPTlNUX0VYUFIoW10pO1xyXG4vKipcclxuICogRGVzY3JpYmVzIGhvdyB0aGUge0BsaW5rIEluamVjdG9yfSBzaG91bGQgaW5zdGFudGlhdGUgYSBnaXZlbiB0b2tlbi5cclxuICpcclxuICogU2VlIHtAbGluayBwcm92aWRlfS5cclxuICpcclxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L0dOQXlqNks2UGZZZzJOQnpnd1o1P3AlM0RwcmV2aWV3JnA9cHJldmlldykpXHJcbiAqXHJcbiAqIGBgYGphdmFzY3JpcHRcclxuICogdmFyIGluamVjdG9yID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbXHJcbiAqICAgbmV3IFByb3ZpZGVyKFwibWVzc2FnZVwiLCB7IHVzZVZhbHVlOiAnSGVsbG8nIH0pXHJcbiAqIF0pO1xyXG4gKlxyXG4gKiBleHBlY3QoaW5qZWN0b3IuZ2V0KFwibWVzc2FnZVwiKSkudG9FcXVhbCgnSGVsbG8nKTtcclxuICogYGBgXHJcbiAqL1xyXG52YXIgUHJvdmlkZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIodG9rZW4sIF9hKSB7XHJcbiAgICAgICAgdmFyIHVzZUNsYXNzID0gX2EudXNlQ2xhc3MsIHVzZVZhbHVlID0gX2EudXNlVmFsdWUsIHVzZUV4aXN0aW5nID0gX2EudXNlRXhpc3RpbmcsIHVzZUZhY3RvcnkgPSBfYS51c2VGYWN0b3J5LCBkZXBzID0gX2EuZGVwcywgbXVsdGkgPSBfYS5tdWx0aTtcclxuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XHJcbiAgICAgICAgdGhpcy51c2VDbGFzcyA9IHVzZUNsYXNzO1xyXG4gICAgICAgIHRoaXMudXNlVmFsdWUgPSB1c2VWYWx1ZTtcclxuICAgICAgICB0aGlzLnVzZUV4aXN0aW5nID0gdXNlRXhpc3Rpbmc7XHJcbiAgICAgICAgdGhpcy51c2VGYWN0b3J5ID0gdXNlRmFjdG9yeTtcclxuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IGRlcHM7XHJcbiAgICAgICAgdGhpcy5fbXVsdGkgPSBtdWx0aTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcm92aWRlci5wcm90b3R5cGUsIFwibXVsdGlcIiwge1xyXG4gICAgICAgIC8vIFRPRE86IFByb3ZpZGUgYSBmdWxsIHdvcmtpbmcgZXhhbXBsZSBhZnRlciBhbHBoYTM4IGlzIHJlbGVhc2VkLlxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgbXVsdGlwbGUgcHJvdmlkZXJzIG1hdGNoaW5nIHRoZSBzYW1lIHRva2VuIChhIG11bHRpLXByb3ZpZGVyKS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIE11bHRpLXByb3ZpZGVycyBhcmUgdXNlZCBmb3IgY3JlYXRpbmcgcGx1Z2dhYmxlIHNlcnZpY2UsIHdoZXJlIHRoZSBzeXN0ZW0gY29tZXNcclxuICAgICAgICAgKiB3aXRoIHNvbWUgZGVmYXVsdCBwcm92aWRlcnMsIGFuZCB0aGUgdXNlciBjYW4gcmVnaXN0ZXIgYWRkaXRvbmFsIHByb3ZpZGVycy5cclxuICAgICAgICAgKiBUaGUgY29tYmluYXRpb24gb2YgdGhlIGRlZmF1bHQgcHJvdmlkZXJzIGFuZCB0aGUgYWRkaXRpb25hbCBwcm92aWRlcnMgd2lsbCBiZVxyXG4gICAgICAgICAqIHVzZWQgdG8gZHJpdmUgdGhlIGJlaGF2aW9yIG9mIHRoZSBzeXN0ZW0uXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiAjIyMgRXhhbXBsZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICAgICAqIHZhciBpbmplY3RvciA9IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW1xyXG4gICAgICAgICAqICAgbmV3IFByb3ZpZGVyKFwiU3RyaW5nc1wiLCB7IHVzZVZhbHVlOiBcIlN0cmluZzFcIiwgbXVsdGk6IHRydWV9KSxcclxuICAgICAgICAgKiAgIG5ldyBQcm92aWRlcihcIlN0cmluZ3NcIiwgeyB1c2VWYWx1ZTogXCJTdHJpbmcyXCIsIG11bHRpOiB0cnVlfSlcclxuICAgICAgICAgKiBdKTtcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIGV4cGVjdChpbmplY3Rvci5nZXQoXCJTdHJpbmdzXCIpKS50b0VxdWFsKFtcIlN0cmluZzFcIiwgXCJTdHJpbmcyXCJdKTtcclxuICAgICAgICAgKiBgYGBcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIE11bHRpLXByb3ZpZGVycyBhbmQgcmVndWxhciBwcm92aWRlcnMgY2Fubm90IGJlIG1peGVkLiBUaGUgZm9sbG93aW5nXHJcbiAgICAgICAgICogd2lsbCB0aHJvdyBhbiBleGNlcHRpb246XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgICAgICogdmFyIGluamVjdG9yID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbXHJcbiAgICAgICAgICogICBuZXcgUHJvdmlkZXIoXCJTdHJpbmdzXCIsIHsgdXNlVmFsdWU6IFwiU3RyaW5nMVwiLCBtdWx0aTogdHJ1ZSB9KSxcclxuICAgICAgICAgKiAgIG5ldyBQcm92aWRlcihcIlN0cmluZ3NcIiwgeyB1c2VWYWx1ZTogXCJTdHJpbmcyXCJ9KVxyXG4gICAgICAgICAqIF0pO1xyXG4gICAgICAgICAqIGBgYFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGFuZ18xLm5vcm1hbGl6ZUJvb2wodGhpcy5fbXVsdGkpOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIFByb3ZpZGVyID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW09iamVjdCwgT2JqZWN0XSlcclxuICAgIF0sIFByb3ZpZGVyKTtcclxuICAgIHJldHVybiBQcm92aWRlcjtcclxufSkoKTtcclxuZXhwb3J0cy5Qcm92aWRlciA9IFByb3ZpZGVyO1xyXG4vKipcclxuICogQGRlcHJlY2F0ZWRcclxuICovXHJcbnZhciBCaW5kaW5nID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhCaW5kaW5nLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQmluZGluZyh0b2tlbiwgX2EpIHtcclxuICAgICAgICB2YXIgdG9DbGFzcyA9IF9hLnRvQ2xhc3MsIHRvVmFsdWUgPSBfYS50b1ZhbHVlLCB0b0FsaWFzID0gX2EudG9BbGlhcywgdG9GYWN0b3J5ID0gX2EudG9GYWN0b3J5LCBkZXBzID0gX2EuZGVwcywgbXVsdGkgPSBfYS5tdWx0aTtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0b2tlbiwge1xyXG4gICAgICAgICAgICB1c2VDbGFzczogdG9DbGFzcyxcclxuICAgICAgICAgICAgdXNlVmFsdWU6IHRvVmFsdWUsXHJcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiB0b0FsaWFzLFxyXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiB0b0ZhY3RvcnksXHJcbiAgICAgICAgICAgIGRlcHM6IGRlcHMsXHJcbiAgICAgICAgICAgIG11bHRpOiBtdWx0aVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJpbmRpbmcucHJvdG90eXBlLCBcInRvQ2xhc3NcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnVzZUNsYXNzOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCaW5kaW5nLnByb3RvdHlwZSwgXCJ0b0FsaWFzXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy51c2VFeGlzdGluZzsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmluZGluZy5wcm90b3R5cGUsIFwidG9GYWN0b3J5XCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy51c2VGYWN0b3J5OyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCaW5kaW5nLnByb3RvdHlwZSwgXCJ0b1ZhbHVlXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy51c2VWYWx1ZTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBCaW5kaW5nID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW09iamVjdCwgT2JqZWN0XSlcclxuICAgIF0sIEJpbmRpbmcpO1xyXG4gICAgcmV0dXJuIEJpbmRpbmc7XHJcbn0pKFByb3ZpZGVyKTtcclxuZXhwb3J0cy5CaW5kaW5nID0gQmluZGluZztcclxudmFyIFJlc29sdmVkUHJvdmlkZXJfID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlc29sdmVkUHJvdmlkZXJfKGtleSwgcmVzb2x2ZWRGYWN0b3JpZXMsIG11bHRpUHJvdmlkZXIpIHtcclxuICAgICAgICB0aGlzLmtleSA9IGtleTtcclxuICAgICAgICB0aGlzLnJlc29sdmVkRmFjdG9yaWVzID0gcmVzb2x2ZWRGYWN0b3JpZXM7XHJcbiAgICAgICAgdGhpcy5tdWx0aVByb3ZpZGVyID0gbXVsdGlQcm92aWRlcjtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXNvbHZlZFByb3ZpZGVyXy5wcm90b3R5cGUsIFwicmVzb2x2ZWRGYWN0b3J5XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMucmVzb2x2ZWRGYWN0b3JpZXNbMF07IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIFJlc29sdmVkUHJvdmlkZXJfO1xyXG59KSgpO1xyXG5leHBvcnRzLlJlc29sdmVkUHJvdmlkZXJfID0gUmVzb2x2ZWRQcm92aWRlcl87XHJcbi8qKlxyXG4gKiBBbiBpbnRlcm5hbCByZXNvbHZlZCByZXByZXNlbnRhdGlvbiBvZiBhIGZhY3RvcnkgZnVuY3Rpb24gY3JlYXRlZCBieSByZXNvbHZpbmcge0BsaW5rIFByb3ZpZGVyfS5cclxuICovXHJcbnZhciBSZXNvbHZlZEZhY3RvcnkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVzb2x2ZWRGYWN0b3J5KFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEZhY3RvcnkgZnVuY3Rpb24gd2hpY2ggY2FuIHJldHVybiBhbiBpbnN0YW5jZSBvZiBhbiBvYmplY3QgcmVwcmVzZW50ZWQgYnkgYSBrZXkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZmFjdG9yeSwgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQXJndW1lbnRzIChkZXBlbmRlbmNpZXMpIHRvIHRoZSBgZmFjdG9yeWAgZnVuY3Rpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGVwZW5kZW5jaWVzKSB7XHJcbiAgICAgICAgdGhpcy5mYWN0b3J5ID0gZmFjdG9yeTtcclxuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcclxuICAgIH1cclxuICAgIHJldHVybiBSZXNvbHZlZEZhY3Rvcnk7XHJcbn0pKCk7XHJcbmV4cG9ydHMuUmVzb2x2ZWRGYWN0b3J5ID0gUmVzb2x2ZWRGYWN0b3J5O1xyXG4vKipcclxuICogQGRlcHJlY2F0ZWRcclxuICogQ3JlYXRlcyBhIHtAbGluayBQcm92aWRlcn0uXHJcbiAqXHJcbiAqIFRvIGNvbnN0cnVjdCBhIHtAbGluayBQcm92aWRlcn0sIGJpbmQgYSBgdG9rZW5gIHRvIGVpdGhlciBhIGNsYXNzLCBhIHZhbHVlLCBhIGZhY3RvcnkgZnVuY3Rpb24sXHJcbiAqIG9yXHJcbiAqIHRvIGFuIGV4aXN0aW5nIGB0b2tlbmAuXHJcbiAqIFNlZSB7QGxpbmsgUHJvdmlkZXJCdWlsZGVyfSBmb3IgbW9yZSBkZXRhaWxzLlxyXG4gKlxyXG4gKiBUaGUgYHRva2VuYCBpcyBtb3N0IGNvbW1vbmx5IGEgY2xhc3Mgb3Ige0BsaW5rIGFuZ3VsYXIyL2RpL09wYXF1ZVRva2VufS5cclxuICovXHJcbmZ1bmN0aW9uIGJpbmQodG9rZW4pIHtcclxuICAgIHJldHVybiBuZXcgUHJvdmlkZXJCdWlsZGVyKHRva2VuKTtcclxufVxyXG5leHBvcnRzLmJpbmQgPSBiaW5kO1xyXG4vKipcclxuICogQ3JlYXRlcyBhIHtAbGluayBQcm92aWRlcn0uXHJcbiAqXHJcbiAqIFNlZSB7QGxpbmsgUHJvdmlkZXJ9IGZvciBtb3JlIGRldGFpbHMuXHJcbiAqXHJcbiAqIDwhLS0gVE9ETzogaW1wcm92ZSB0aGUgZG9jcyAtLT5cclxuICovXHJcbmZ1bmN0aW9uIHByb3ZpZGUodG9rZW4sIF9hKSB7XHJcbiAgICB2YXIgdXNlQ2xhc3MgPSBfYS51c2VDbGFzcywgdXNlVmFsdWUgPSBfYS51c2VWYWx1ZSwgdXNlRXhpc3RpbmcgPSBfYS51c2VFeGlzdGluZywgdXNlRmFjdG9yeSA9IF9hLnVzZUZhY3RvcnksIGRlcHMgPSBfYS5kZXBzLCBtdWx0aSA9IF9hLm11bHRpO1xyXG4gICAgcmV0dXJuIG5ldyBQcm92aWRlcih0b2tlbiwge1xyXG4gICAgICAgIHVzZUNsYXNzOiB1c2VDbGFzcyxcclxuICAgICAgICB1c2VWYWx1ZTogdXNlVmFsdWUsXHJcbiAgICAgICAgdXNlRXhpc3Rpbmc6IHVzZUV4aXN0aW5nLFxyXG4gICAgICAgIHVzZUZhY3Rvcnk6IHVzZUZhY3RvcnksXHJcbiAgICAgICAgZGVwczogZGVwcyxcclxuICAgICAgICBtdWx0aTogbXVsdGlcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMucHJvdmlkZSA9IHByb3ZpZGU7XHJcbi8qKlxyXG4gKiBIZWxwZXIgY2xhc3MgZm9yIHRoZSB7QGxpbmsgYmluZH0gZnVuY3Rpb24uXHJcbiAqL1xyXG52YXIgUHJvdmlkZXJCdWlsZGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyQnVpbGRlcih0b2tlbikge1xyXG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQmluZHMgYSBESSB0b2tlbiB0byBhIGNsYXNzLlxyXG4gICAgICpcclxuICAgICAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9acEJDU1lxdjZlMnVkNUtYTGR4UT9wPXByZXZpZXcpKVxyXG4gICAgICpcclxuICAgICAqIEJlY2F1c2UgYHRvQWxpYXNgIGFuZCBgdG9DbGFzc2AgYXJlIG9mdGVuIGNvbmZ1c2VkLCB0aGUgZXhhbXBsZSBjb250YWlucyBib3RoIHVzZSBjYXNlcyBmb3JcclxuICAgICAqIGVhc3kgY29tcGFyaXNvbi5cclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBWZWhpY2xlIHt9XHJcbiAgICAgKlxyXG4gICAgICogY2xhc3MgQ2FyIGV4dGVuZHMgVmVoaWNsZSB7fVxyXG4gICAgICpcclxuICAgICAqIHZhciBpbmplY3RvckNsYXNzID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbXHJcbiAgICAgKiAgIENhcixcclxuICAgICAqICAgcHJvdmlkZShWZWhpY2xlLCB7dXNlQ2xhc3M6IENhcn0pXHJcbiAgICAgKiBdKTtcclxuICAgICAqIHZhciBpbmplY3RvckFsaWFzID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbXHJcbiAgICAgKiAgIENhcixcclxuICAgICAqICAgcHJvdmlkZShWZWhpY2xlLCB7dXNlRXhpc3Rpbmc6IENhcn0pXHJcbiAgICAgKiBdKTtcclxuICAgICAqXHJcbiAgICAgKiBleHBlY3QoaW5qZWN0b3JDbGFzcy5nZXQoVmVoaWNsZSkpLm5vdC50b0JlKGluamVjdG9yQ2xhc3MuZ2V0KENhcikpO1xyXG4gICAgICogZXhwZWN0KGluamVjdG9yQ2xhc3MuZ2V0KFZlaGljbGUpIGluc3RhbmNlb2YgQ2FyKS50b0JlKHRydWUpO1xyXG4gICAgICpcclxuICAgICAqIGV4cGVjdChpbmplY3RvckFsaWFzLmdldChWZWhpY2xlKSkudG9CZShpbmplY3RvckFsaWFzLmdldChDYXIpKTtcclxuICAgICAqIGV4cGVjdChpbmplY3RvckFsaWFzLmdldChWZWhpY2xlKSBpbnN0YW5jZW9mIENhcikudG9CZSh0cnVlKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBQcm92aWRlckJ1aWxkZXIucHJvdG90eXBlLnRvQ2xhc3MgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgIGlmICghbGFuZ18xLmlzVHlwZSh0eXBlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oXCJUcnlpbmcgdG8gY3JlYXRlIGEgY2xhc3MgcHJvdmlkZXIgYnV0IFxcXCJcIiArIGxhbmdfMS5zdHJpbmdpZnkodHlwZSkgKyBcIlxcXCIgaXMgbm90IGEgY2xhc3MhXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFByb3ZpZGVyKHRoaXMudG9rZW4sIHsgdXNlQ2xhc3M6IHR5cGUgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBCaW5kcyBhIERJIHRva2VuIHRvIGEgdmFsdWUuXHJcbiAgICAgKlxyXG4gICAgICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L0cwMjRQRkhtREwwY0pGZ2ZaSzhPP3A9cHJldmlldykpXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogdmFyIGluamVjdG9yID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbXHJcbiAgICAgKiAgIHByb3ZpZGUoJ21lc3NhZ2UnLCB7dXNlVmFsdWU6ICdIZWxsbyd9KVxyXG4gICAgICogXSk7XHJcbiAgICAgKlxyXG4gICAgICogZXhwZWN0KGluamVjdG9yLmdldCgnbWVzc2FnZScpKS50b0VxdWFsKCdIZWxsbycpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIFByb3ZpZGVyQnVpbGRlci5wcm90b3R5cGUudG9WYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gbmV3IFByb3ZpZGVyKHRoaXMudG9rZW4sIHsgdXNlVmFsdWU6IHZhbHVlIH0pOyB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBCaW5kcyBhIERJIHRva2VuIHRvIGFuIGV4aXN0aW5nIHRva2VuLlxyXG4gICAgICpcclxuICAgICAqIEFuZ3VsYXIgd2lsbCByZXR1cm4gdGhlIHNhbWUgaW5zdGFuY2UgYXMgaWYgdGhlIHByb3ZpZGVkIHRva2VuIHdhcyB1c2VkLiAoVGhpcyBpc1xyXG4gICAgICogaW4gY29udHJhc3QgdG8gYHVzZUNsYXNzYCB3aGVyZSBhIHNlcGFyYXRlIGluc3RhbmNlIG9mIGB1c2VDbGFzc2Agd2lsbCBiZSByZXR1cm5lZC4pXHJcbiAgICAgKlxyXG4gICAgICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L3VCYW9GMnBONWNmYzVBZlphcE53P3A9cHJldmlldykpXHJcbiAgICAgKlxyXG4gICAgICogQmVjYXVzZSBgdG9BbGlhc2AgYW5kIGB0b0NsYXNzYCBhcmUgb2Z0ZW4gY29uZnVzZWQsIHRoZSBleGFtcGxlIGNvbnRhaW5zIGJvdGggdXNlIGNhc2VzIGZvclxyXG4gICAgICogZWFzeVxyXG4gICAgICogY29tcGFyaXNvbi5cclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjbGFzcyBWZWhpY2xlIHt9XHJcbiAgICAgKlxyXG4gICAgICogY2xhc3MgQ2FyIGV4dGVuZHMgVmVoaWNsZSB7fVxyXG4gICAgICpcclxuICAgICAqIHZhciBpbmplY3RvckFsaWFzID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbXHJcbiAgICAgKiAgIENhcixcclxuICAgICAqICAgcHJvdmlkZShWZWhpY2xlLCB7dXNlRXhpc3Rpbmc6IENhcn0pXHJcbiAgICAgKiBdKTtcclxuICAgICAqIHZhciBpbmplY3RvckNsYXNzID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbXHJcbiAgICAgKiAgIENhcixcclxuICAgICAqICAgcHJvdmlkZShWZWhpY2xlLCB7dXNlQ2xhc3M6IENhcn0pXHJcbiAgICAgKiBdKTtcclxuICAgICAqXHJcbiAgICAgKiBleHBlY3QoaW5qZWN0b3JBbGlhcy5nZXQoVmVoaWNsZSkpLnRvQmUoaW5qZWN0b3JBbGlhcy5nZXQoQ2FyKSk7XHJcbiAgICAgKiBleHBlY3QoaW5qZWN0b3JBbGlhcy5nZXQoVmVoaWNsZSkgaW5zdGFuY2VvZiBDYXIpLnRvQmUodHJ1ZSk7XHJcbiAgICAgKlxyXG4gICAgICogZXhwZWN0KGluamVjdG9yQ2xhc3MuZ2V0KFZlaGljbGUpKS5ub3QudG9CZShpbmplY3RvckNsYXNzLmdldChDYXIpKTtcclxuICAgICAqIGV4cGVjdChpbmplY3RvckNsYXNzLmdldChWZWhpY2xlKSBpbnN0YW5jZW9mIENhcikudG9CZSh0cnVlKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBQcm92aWRlckJ1aWxkZXIucHJvdG90eXBlLnRvQWxpYXMgPSBmdW5jdGlvbiAoYWxpYXNUb2tlbikge1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhhbGlhc1Rva2VuKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oXCJDYW4gbm90IGFsaWFzIFwiICsgbGFuZ18xLnN0cmluZ2lmeSh0aGlzLnRva2VuKSArIFwiIHRvIGEgYmxhbmsgdmFsdWUhXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFByb3ZpZGVyKHRoaXMudG9rZW4sIHsgdXNlRXhpc3Rpbmc6IGFsaWFzVG9rZW4gfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBCaW5kcyBhIERJIHRva2VuIHRvIGEgZnVuY3Rpb24gd2hpY2ggY29tcHV0ZXMgdGhlIHZhbHVlLlxyXG4gICAgICpcclxuICAgICAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9PZWpOSWZUVDN6YjFpQnhhSVlPYj9wPXByZXZpZXcpKVxyXG4gICAgICpcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIHZhciBpbmplY3RvciA9IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW1xyXG4gICAgICogICBwcm92aWRlKE51bWJlciwge3VzZUZhY3Rvcnk6ICgpID0+IHsgcmV0dXJuIDErMjsgfX0pLFxyXG4gICAgICogICBwcm92aWRlKFN0cmluZywge3VzZUZhY3Rvcnk6ICh2KSA9PiB7IHJldHVybiBcIlZhbHVlOiBcIiArIHY7IH0sIGRlcHM6IFtOdW1iZXJdfSlcclxuICAgICAqIF0pO1xyXG4gICAgICpcclxuICAgICAqIGV4cGVjdChpbmplY3Rvci5nZXQoTnVtYmVyKSkudG9FcXVhbCgzKTtcclxuICAgICAqIGV4cGVjdChpbmplY3Rvci5nZXQoU3RyaW5nKSkudG9FcXVhbCgnVmFsdWU6IDMnKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBQcm92aWRlckJ1aWxkZXIucHJvdG90eXBlLnRvRmFjdG9yeSA9IGZ1bmN0aW9uIChmYWN0b3J5LCBkZXBlbmRlbmNpZXMpIHtcclxuICAgICAgICBpZiAoIWxhbmdfMS5pc0Z1bmN0aW9uKGZhY3RvcnkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihcIlRyeWluZyB0byBjcmVhdGUgYSBmYWN0b3J5IHByb3ZpZGVyIGJ1dCBcXFwiXCIgKyBsYW5nXzEuc3RyaW5naWZ5KGZhY3RvcnkpICsgXCJcXFwiIGlzIG5vdCBhIGZ1bmN0aW9uIVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm92aWRlcih0aGlzLnRva2VuLCB7IHVzZUZhY3Rvcnk6IGZhY3RvcnksIGRlcHM6IGRlcGVuZGVuY2llcyB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUHJvdmlkZXJCdWlsZGVyO1xyXG59KSgpO1xyXG5leHBvcnRzLlByb3ZpZGVyQnVpbGRlciA9IFByb3ZpZGVyQnVpbGRlcjtcclxuLyoqXHJcbiAqIFJlc29sdmUgYSBzaW5nbGUgcHJvdmlkZXIuXHJcbiAqL1xyXG5mdW5jdGlvbiByZXNvbHZlRmFjdG9yeShwcm92aWRlcikge1xyXG4gICAgdmFyIGZhY3RvcnlGbjtcclxuICAgIHZhciByZXNvbHZlZERlcHM7XHJcbiAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwcm92aWRlci51c2VDbGFzcykpIHtcclxuICAgICAgICB2YXIgdXNlQ2xhc3MgPSBmb3J3YXJkX3JlZl8xLnJlc29sdmVGb3J3YXJkUmVmKHByb3ZpZGVyLnVzZUNsYXNzKTtcclxuICAgICAgICBmYWN0b3J5Rm4gPSByZWZsZWN0aW9uXzEucmVmbGVjdG9yLmZhY3RvcnkodXNlQ2xhc3MpO1xyXG4gICAgICAgIHJlc29sdmVkRGVwcyA9IF9kZXBlbmRlbmNpZXNGb3IodXNlQ2xhc3MpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobGFuZ18xLmlzUHJlc2VudChwcm92aWRlci51c2VFeGlzdGluZykpIHtcclxuICAgICAgICBmYWN0b3J5Rm4gPSBmdW5jdGlvbiAoYWxpYXNJbnN0YW5jZSkgeyByZXR1cm4gYWxpYXNJbnN0YW5jZTsgfTtcclxuICAgICAgICByZXNvbHZlZERlcHMgPSBbRGVwZW5kZW5jeS5mcm9tS2V5KGtleV8xLktleS5nZXQocHJvdmlkZXIudXNlRXhpc3RpbmcpKV07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChsYW5nXzEuaXNQcmVzZW50KHByb3ZpZGVyLnVzZUZhY3RvcnkpKSB7XHJcbiAgICAgICAgZmFjdG9yeUZuID0gcHJvdmlkZXIudXNlRmFjdG9yeTtcclxuICAgICAgICByZXNvbHZlZERlcHMgPSBfY29uc3RydWN0RGVwZW5kZW5jaWVzKHByb3ZpZGVyLnVzZUZhY3RvcnksIHByb3ZpZGVyLmRlcGVuZGVuY2llcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBmYWN0b3J5Rm4gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlci51c2VWYWx1ZTsgfTtcclxuICAgICAgICByZXNvbHZlZERlcHMgPSBfRU1QVFlfTElTVDtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgUmVzb2x2ZWRGYWN0b3J5KGZhY3RvcnlGbiwgcmVzb2x2ZWREZXBzKTtcclxufVxyXG5leHBvcnRzLnJlc29sdmVGYWN0b3J5ID0gcmVzb2x2ZUZhY3Rvcnk7XHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUge0BsaW5rIFByb3ZpZGVyfSBpbnRvIHtAbGluayBSZXNvbHZlZFByb3ZpZGVyfS5cclxuICpcclxuICoge0BsaW5rIEluamVjdG9yfSBpbnRlcm5hbGx5IG9ubHkgdXNlcyB7QGxpbmsgUmVzb2x2ZWRQcm92aWRlcn0sIHtAbGluayBQcm92aWRlcn0gY29udGFpbnNcclxuICogY29udmVuaWVuY2UgcHJvdmlkZXIgc3ludGF4LlxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZVByb3ZpZGVyKHByb3ZpZGVyKSB7XHJcbiAgICByZXR1cm4gbmV3IFJlc29sdmVkUHJvdmlkZXJfKGtleV8xLktleS5nZXQocHJvdmlkZXIudG9rZW4pLCBbcmVzb2x2ZUZhY3RvcnkocHJvdmlkZXIpXSwgZmFsc2UpO1xyXG59XHJcbmV4cG9ydHMucmVzb2x2ZVByb3ZpZGVyID0gcmVzb2x2ZVByb3ZpZGVyO1xyXG4vKipcclxuICogUmVzb2x2ZSBhIGxpc3Qgb2YgUHJvdmlkZXJzLlxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZVByb3ZpZGVycyhwcm92aWRlcnMpIHtcclxuICAgIHZhciBub3JtYWxpemVkID0gX2NyZWF0ZUxpc3RPZlByb3ZpZGVycyhfbm9ybWFsaXplUHJvdmlkZXJzKHByb3ZpZGVycywgbmV3IE1hcCgpKSk7XHJcbiAgICByZXR1cm4gbm9ybWFsaXplZC5tYXAoZnVuY3Rpb24gKGIpIHtcclxuICAgICAgICBpZiAoYiBpbnN0YW5jZW9mIF9Ob3JtYWxpemVkUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXNvbHZlZFByb3ZpZGVyXyhiLmtleSwgW2IucmVzb2x2ZWRGYWN0b3J5XSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGFyciA9IGI7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVzb2x2ZWRQcm92aWRlcl8oYXJyWzBdLmtleSwgYXJyLm1hcChmdW5jdGlvbiAoXykgeyByZXR1cm4gXy5yZXNvbHZlZEZhY3Rvcnk7IH0pLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnJlc29sdmVQcm92aWRlcnMgPSByZXNvbHZlUHJvdmlkZXJzO1xyXG4vKipcclxuICogVGhlIGFsZ29yaXRobSB3b3JrcyBhcyBmb2xsb3dzOlxyXG4gKlxyXG4gKiBbUHJvdmlkZXJdIC0+IFtfTm9ybWFsaXplZFByb3ZpZGVyfFtfTm9ybWFsaXplZFByb3ZpZGVyXV0gLT4gW1Jlc29sdmVkUHJvdmlkZXJdXHJcbiAqXHJcbiAqIF9Ob3JtYWxpemVkUHJvdmlkZXIgaXMgZXNzZW50aWFsbHkgYSByZXNvbHZlZCBwcm92aWRlciBiZWZvcmUgaXQgd2FzIGdyb3VwZWQgYnkga2V5LlxyXG4gKi9cclxudmFyIF9Ob3JtYWxpemVkUHJvdmlkZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gX05vcm1hbGl6ZWRQcm92aWRlcihrZXksIHJlc29sdmVkRmFjdG9yeSkge1xyXG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgICAgIHRoaXMucmVzb2x2ZWRGYWN0b3J5ID0gcmVzb2x2ZWRGYWN0b3J5O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9Ob3JtYWxpemVkUHJvdmlkZXI7XHJcbn0pKCk7XHJcbmZ1bmN0aW9uIF9jcmVhdGVMaXN0T2ZQcm92aWRlcnMoZmxhdHRlbmVkUHJvdmlkZXJzKSB7XHJcbiAgICByZXR1cm4gY29sbGVjdGlvbl8xLk1hcFdyYXBwZXIudmFsdWVzKGZsYXR0ZW5lZFByb3ZpZGVycyk7XHJcbn1cclxuZnVuY3Rpb24gX25vcm1hbGl6ZVByb3ZpZGVycyhwcm92aWRlcnMsIHJlcykge1xyXG4gICAgcHJvdmlkZXJzLmZvckVhY2goZnVuY3Rpb24gKGIpIHtcclxuICAgICAgICBpZiAoYiBpbnN0YW5jZW9mIGxhbmdfMS5UeXBlKSB7XHJcbiAgICAgICAgICAgIF9ub3JtYWxpemVQcm92aWRlcihwcm92aWRlKGIsIHsgdXNlQ2xhc3M6IGIgfSksIHJlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBQcm92aWRlcikge1xyXG4gICAgICAgICAgICBfbm9ybWFsaXplUHJvdmlkZXIoYiwgcmVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYiBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgIF9ub3JtYWxpemVQcm92aWRlcnMoYiwgcmVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYiBpbnN0YW5jZW9mIFByb3ZpZGVyQnVpbGRlcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18yLkludmFsaWRQcm92aWRlckVycm9yKGIudG9rZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMi5JbnZhbGlkUHJvdmlkZXJFcnJvcihiKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gX25vcm1hbGl6ZVByb3ZpZGVyKGIsIHJlcykge1xyXG4gICAgdmFyIGtleSA9IGtleV8xLktleS5nZXQoYi50b2tlbik7XHJcbiAgICB2YXIgZmFjdG9yeSA9IHJlc29sdmVGYWN0b3J5KGIpO1xyXG4gICAgdmFyIG5vcm1hbGl6ZWQgPSBuZXcgX05vcm1hbGl6ZWRQcm92aWRlcihrZXksIGZhY3RvcnkpO1xyXG4gICAgaWYgKGIubXVsdGkpIHtcclxuICAgICAgICB2YXIgZXhpc3RpbmdQcm92aWRlciA9IHJlcy5nZXQoa2V5LmlkKTtcclxuICAgICAgICBpZiAoZXhpc3RpbmdQcm92aWRlciBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgIGV4aXN0aW5nUHJvdmlkZXIucHVzaChub3JtYWxpemVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGFuZ18xLmlzQmxhbmsoZXhpc3RpbmdQcm92aWRlcikpIHtcclxuICAgICAgICAgICAgcmVzLnNldChrZXkuaWQsIFtub3JtYWxpemVkXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18yLk1peGluZ011bHRpUHJvdmlkZXJzV2l0aFJlZ3VsYXJQcm92aWRlcnNFcnJvcihleGlzdGluZ1Byb3ZpZGVyLCBiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgZXhpc3RpbmdQcm92aWRlciA9IHJlcy5nZXQoa2V5LmlkKTtcclxuICAgICAgICBpZiAoZXhpc3RpbmdQcm92aWRlciBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzIuTWl4aW5nTXVsdGlQcm92aWRlcnNXaXRoUmVndWxhclByb3ZpZGVyc0Vycm9yKGV4aXN0aW5nUHJvdmlkZXIsIGIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXMuc2V0KGtleS5pZCwgbm9ybWFsaXplZCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gX2NvbnN0cnVjdERlcGVuZGVuY2llcyhmYWN0b3J5RnVuY3Rpb24sIGRlcGVuZGVuY2llcykge1xyXG4gICAgaWYgKGxhbmdfMS5pc0JsYW5rKGRlcGVuZGVuY2llcykpIHtcclxuICAgICAgICByZXR1cm4gX2RlcGVuZGVuY2llc0ZvcihmYWN0b3J5RnVuY3Rpb24pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIHBhcmFtcyA9IGRlcGVuZGVuY2llcy5tYXAoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIFt0XTsgfSk7XHJcbiAgICAgICAgcmV0dXJuIGRlcGVuZGVuY2llcy5tYXAoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIF9leHRyYWN0VG9rZW4oZmFjdG9yeUZ1bmN0aW9uLCB0LCBwYXJhbXMpOyB9KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBfZGVwZW5kZW5jaWVzRm9yKHR5cGVPckZ1bmMpIHtcclxuICAgIHZhciBwYXJhbXMgPSByZWZsZWN0aW9uXzEucmVmbGVjdG9yLnBhcmFtZXRlcnModHlwZU9yRnVuYyk7XHJcbiAgICBpZiAobGFuZ18xLmlzQmxhbmsocGFyYW1zKSlcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICBpZiAoY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmFueShwYXJhbXMsIGZ1bmN0aW9uIChwKSB7IHJldHVybiBsYW5nXzEuaXNCbGFuayhwKTsgfSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18yLk5vQW5ub3RhdGlvbkVycm9yKHR5cGVPckZ1bmMsIHBhcmFtcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGFyYW1zLm1hcChmdW5jdGlvbiAocCkgeyByZXR1cm4gX2V4dHJhY3RUb2tlbih0eXBlT3JGdW5jLCBwLCBwYXJhbXMpOyB9KTtcclxufVxyXG5mdW5jdGlvbiBfZXh0cmFjdFRva2VuKHR5cGVPckZ1bmMsIG1ldGFkYXRhIC8qYW55W10gfCBhbnkqLywgcGFyYW1zKSB7XHJcbiAgICB2YXIgZGVwUHJvcHMgPSBbXTtcclxuICAgIHZhciB0b2tlbiA9IG51bGw7XHJcbiAgICB2YXIgb3B0aW9uYWwgPSBmYWxzZTtcclxuICAgIGlmICghbGFuZ18xLmlzQXJyYXkobWV0YWRhdGEpKSB7XHJcbiAgICAgICAgcmV0dXJuIF9jcmVhdGVEZXBlbmRlbmN5KG1ldGFkYXRhLCBvcHRpb25hbCwgbnVsbCwgbnVsbCwgZGVwUHJvcHMpO1xyXG4gICAgfVxyXG4gICAgdmFyIGxvd2VyQm91bmRWaXNpYmlsaXR5ID0gbnVsbDtcclxuICAgIHZhciB1cHBlckJvdW5kVmlzaWJpbGl0eSA9IG51bGw7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1ldGFkYXRhLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgdmFyIHBhcmFtTWV0YWRhdGEgPSBtZXRhZGF0YVtpXTtcclxuICAgICAgICBpZiAocGFyYW1NZXRhZGF0YSBpbnN0YW5jZW9mIGxhbmdfMS5UeXBlKSB7XHJcbiAgICAgICAgICAgIHRva2VuID0gcGFyYW1NZXRhZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGFyYW1NZXRhZGF0YSBpbnN0YW5jZW9mIG1ldGFkYXRhXzEuSW5qZWN0TWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgdG9rZW4gPSBwYXJhbU1ldGFkYXRhLnRva2VuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwYXJhbU1ldGFkYXRhIGluc3RhbmNlb2YgbWV0YWRhdGFfMS5PcHRpb25hbE1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbmFsID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGFyYW1NZXRhZGF0YSBpbnN0YW5jZW9mIG1ldGFkYXRhXzEuU2VsZk1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgIHVwcGVyQm91bmRWaXNpYmlsaXR5ID0gcGFyYW1NZXRhZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGFyYW1NZXRhZGF0YSBpbnN0YW5jZW9mIG1ldGFkYXRhXzEuSG9zdE1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgIHVwcGVyQm91bmRWaXNpYmlsaXR5ID0gcGFyYW1NZXRhZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGFyYW1NZXRhZGF0YSBpbnN0YW5jZW9mIG1ldGFkYXRhXzEuU2tpcFNlbGZNZXRhZGF0YSkge1xyXG4gICAgICAgICAgICBsb3dlckJvdW5kVmlzaWJpbGl0eSA9IHBhcmFtTWV0YWRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHBhcmFtTWV0YWRhdGEgaW5zdGFuY2VvZiBtZXRhZGF0YV8xLkRlcGVuZGVuY3lNZXRhZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwYXJhbU1ldGFkYXRhLnRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgdG9rZW4gPSBwYXJhbU1ldGFkYXRhLnRva2VuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlcFByb3BzLnB1c2gocGFyYW1NZXRhZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdG9rZW4gPSBmb3J3YXJkX3JlZl8xLnJlc29sdmVGb3J3YXJkUmVmKHRva2VuKTtcclxuICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRva2VuKSkge1xyXG4gICAgICAgIHJldHVybiBfY3JlYXRlRGVwZW5kZW5jeSh0b2tlbiwgb3B0aW9uYWwsIGxvd2VyQm91bmRWaXNpYmlsaXR5LCB1cHBlckJvdW5kVmlzaWJpbGl0eSwgZGVwUHJvcHMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMi5Ob0Fubm90YXRpb25FcnJvcih0eXBlT3JGdW5jLCBwYXJhbXMpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIF9jcmVhdGVEZXBlbmRlbmN5KHRva2VuLCBvcHRpb25hbCwgbG93ZXJCb3VuZFZpc2liaWxpdHksIHVwcGVyQm91bmRWaXNpYmlsaXR5LCBkZXBQcm9wcykge1xyXG4gICAgcmV0dXJuIG5ldyBEZXBlbmRlbmN5KGtleV8xLktleS5nZXQodG9rZW4pLCBvcHRpb25hbCwgbG93ZXJCb3VuZFZpc2liaWxpdHksIHVwcGVyQm91bmRWaXNpYmlsaXR5LCBkZXBQcm9wcyk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnOy8qKlxyXG4gKiBUeXBlIGxpdGVyYWxzIGlzIGEgRGFydC1vbmx5IGZlYXR1cmUuIFRoaXMgaXMgaGVyZSBvbmx5IHNvIHdlIGNhbiB4LWNvbXBpbGVcclxuICogdG8gbXVsdGlwbGUgbGFuZ3VhZ2VzLlxyXG4gKi9cclxudmFyIFR5cGVMaXRlcmFsID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFR5cGVMaXRlcmFsKCkge1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFR5cGVMaXRlcmFsLnByb3RvdHlwZSwgXCJ0eXBlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IEVycm9yKFwiVHlwZSBsaXRlcmFscyBhcmUgb25seSBzdXBwb3J0ZWQgaW4gRGFydFwiKTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gVHlwZUxpdGVyYWw7XHJcbn0pKCk7XHJcbmV4cG9ydHMuVHlwZUxpdGVyYWwgPSBUeXBlTGl0ZXJhbDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZV9saXRlcmFsLmpzLm1hcCIsIid1c2Ugc3RyaWN0JzsvKipcclxuICogQG1vZHVsZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ29tbW9uIGRpcmVjdGl2ZXMgc2hpcHBlZCB3aXRoIEFuZ3VsYXIuXHJcbiAqL1xyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJy4vZmFjYWRlL2xhbmcnKTtcclxudmFyIG5nX2NsYXNzXzEgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvbmdfY2xhc3MnKTtcclxudmFyIG5nX2Zvcl8xID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL25nX2ZvcicpO1xyXG52YXIgbmdfaWZfMSA9IHJlcXVpcmUoJy4vZGlyZWN0aXZlcy9uZ19pZicpO1xyXG52YXIgbmdfc3R5bGVfMSA9IHJlcXVpcmUoJy4vZGlyZWN0aXZlcy9uZ19zdHlsZScpO1xyXG52YXIgbmdfc3dpdGNoXzEgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvbmdfc3dpdGNoJyk7XHJcbnZhciBuZ19jbGFzc18yID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL25nX2NsYXNzJyk7XHJcbmV4cG9ydHMuTmdDbGFzcyA9IG5nX2NsYXNzXzIuTmdDbGFzcztcclxudmFyIG5nX2Zvcl8yID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL25nX2ZvcicpO1xyXG5leHBvcnRzLk5nRm9yID0gbmdfZm9yXzIuTmdGb3I7XHJcbnZhciBuZ19pZl8yID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL25nX2lmJyk7XHJcbmV4cG9ydHMuTmdJZiA9IG5nX2lmXzIuTmdJZjtcclxudmFyIG5nX3N0eWxlXzIgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvbmdfc3R5bGUnKTtcclxuZXhwb3J0cy5OZ1N0eWxlID0gbmdfc3R5bGVfMi5OZ1N0eWxlO1xyXG52YXIgbmdfc3dpdGNoXzIgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvbmdfc3dpdGNoJyk7XHJcbmV4cG9ydHMuTmdTd2l0Y2ggPSBuZ19zd2l0Y2hfMi5OZ1N3aXRjaDtcclxuZXhwb3J0cy5OZ1N3aXRjaFdoZW4gPSBuZ19zd2l0Y2hfMi5OZ1N3aXRjaFdoZW47XHJcbmV4cG9ydHMuTmdTd2l0Y2hEZWZhdWx0ID0gbmdfc3dpdGNoXzIuTmdTd2l0Y2hEZWZhdWx0O1xyXG5fX2V4cG9ydChyZXF1aXJlKCcuL2RpcmVjdGl2ZXMvb2JzZXJ2YWJsZV9saXN0X2RpZmYnKSk7XHJcbi8qKlxyXG4gKiBBIGNvbGxlY3Rpb24gb2YgQW5ndWxhciBjb3JlIGRpcmVjdGl2ZXMgdGhhdCBhcmUgbGlrZWx5IHRvIGJlIHVzZWQgaW4gZWFjaCBhbmQgZXZlcnkgQW5ndWxhclxyXG4gKiBhcHBsaWNhdGlvbi5cclxuICpcclxuICogVGhpcyBjb2xsZWN0aW9uIGNhbiBiZSB1c2VkIHRvIHF1aWNrbHkgZW51bWVyYXRlIGFsbCB0aGUgYnVpbHQtaW4gZGlyZWN0aXZlcyBpbiB0aGUgYGRpcmVjdGl2ZXNgXHJcbiAqIHByb3BlcnR5IG9mIHRoZSBgQFZpZXdgIGFubm90YXRpb24uXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC95YWtHd3BDZFVrZzBxZnpYNW04Zz9wPXByZXZpZXcpKVxyXG4gKlxyXG4gKiBJbnN0ZWFkIG9mIHdyaXRpbmc6XHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHtOZ0NsYXNzLCBOZ0lmLCBOZ0ZvciwgTmdTd2l0Y2gsIE5nU3dpdGNoV2hlbiwgTmdTd2l0Y2hEZWZhdWx0fSBmcm9tICdhbmd1bGFyMi9hbmd1bGFyMic7XHJcbiAqIGltcG9ydCB7T3RoZXJEaXJlY3RpdmV9IGZyb20gJy4vbXlEaXJlY3RpdmVzJztcclxuICpcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgc2VsZWN0b3I6ICdteS1jb21wb25lbnQnLFxyXG4gKiAgIHRlbXBsYXRlVXJsOiAnbXlDb21wb25lbnQuaHRtbCcsXHJcbiAqICAgZGlyZWN0aXZlczogW05nQ2xhc3MsIE5nSWYsIE5nRm9yLCBOZ1N3aXRjaCwgTmdTd2l0Y2hXaGVuLCBOZ1N3aXRjaERlZmF1bHQsIE90aGVyRGlyZWN0aXZlXVxyXG4gKiB9KVxyXG4gKiBleHBvcnQgY2xhc3MgTXlDb21wb25lbnQge1xyXG4gKiAgIC4uLlxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKiBvbmUgY291bGQgaW1wb3J0IGFsbCB0aGUgY29yZSBkaXJlY3RpdmVzIGF0IG9uY2U6XHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHtDT1JFX0RJUkVDVElWRVN9IGZyb20gJ2FuZ3VsYXIyL2FuZ3VsYXIyJztcclxuICogaW1wb3J0IHtPdGhlckRpcmVjdGl2ZX0gZnJvbSAnLi9teURpcmVjdGl2ZXMnO1xyXG4gKlxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ215LWNvbXBvbmVudCcsXHJcbiAqICAgdGVtcGxhdGVVcmw6ICdteUNvbXBvbmVudC5odG1sJyxcclxuICogICBkaXJlY3RpdmVzOiBbQ09SRV9ESVJFQ1RJVkVTLCBPdGhlckRpcmVjdGl2ZV1cclxuICogfSlcclxuICogZXhwb3J0IGNsYXNzIE15Q29tcG9uZW50IHtcclxuICogICAuLi5cclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydHMuQ09SRV9ESVJFQ1RJVkVTID0gbGFuZ18xLkNPTlNUX0VYUFIoW25nX2NsYXNzXzEuTmdDbGFzcywgbmdfZm9yXzEuTmdGb3IsIG5nX2lmXzEuTmdJZiwgbmdfc3R5bGVfMS5OZ1N0eWxlLCBuZ19zd2l0Y2hfMS5OZ1N3aXRjaCwgbmdfc3dpdGNoXzEuTmdTd2l0Y2hXaGVuLCBuZ19zd2l0Y2hfMS5OZ1N3aXRjaERlZmF1bHRdKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlcy5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBtZXRhZGF0YV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbWV0YWRhdGEnKTtcclxudmFyIGxpbmtlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyJyk7XHJcbnZhciBjaGFuZ2VfZGV0ZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uJyk7XHJcbnZhciByZW5kZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL3JlbmRlcicpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxuLyoqXHJcbiAqIFRoZSBgTmdDbGFzc2AgZGlyZWN0aXZlIGNvbmRpdGlvbmFsbHkgYWRkcyBhbmQgcmVtb3ZlcyBDU1MgY2xhc3NlcyBvbiBhbiBIVE1MIGVsZW1lbnQgYmFzZWQgb25cclxuICogYW4gZXhwcmVzc2lvbidzIGV2YWx1YXRpb24gcmVzdWx0LlxyXG4gKlxyXG4gKiBUaGUgcmVzdWx0IG9mIGFuIGV4cHJlc3Npb24gZXZhbHVhdGlvbiBpcyBpbnRlcnByZXRlZCBkaWZmZXJlbnRseSBkZXBlbmRpbmcgb24gdHlwZSBvZlxyXG4gKiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0aW9uIHJlc3VsdDpcclxuICogLSBgc3RyaW5nYCAtIGFsbCB0aGUgQ1NTIGNsYXNzZXMgbGlzdGVkIGluIGEgc3RyaW5nIChzcGFjZSBkZWxpbWl0ZWQpIGFyZSBhZGRlZFxyXG4gKiAtIGBBcnJheWAgLSBhbGwgdGhlIENTUyBjbGFzc2VzIChBcnJheSBlbGVtZW50cykgYXJlIGFkZGVkXHJcbiAqIC0gYE9iamVjdGAgLSBlYWNoIGtleSBjb3JyZXNwb25kcyB0byBhIENTUyBjbGFzcyBuYW1lIHdoaWxlIHZhbHVlcyBhcmUgaW50ZXJwcmV0ZWQgYXMgZXhwcmVzc2lvbnNcclxuICogZXZhbHVhdGluZyB0byBgQm9vbGVhbmAuIElmIGEgZ2l2ZW4gZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYHRydWVgIGEgY29ycmVzcG9uZGluZyBDU1MgY2xhc3NcclxuICogaXMgYWRkZWQgLSBvdGhlcndpc2UgaXQgaXMgcmVtb3ZlZC5cclxuICpcclxuICogV2hpbGUgdGhlIGBOZ0NsYXNzYCBkaXJlY3RpdmUgY2FuIGludGVycHJldCBleHByZXNzaW9ucyBldmFsdWF0aW5nIHRvIGBzdHJpbmdgLCBgQXJyYXlgXHJcbiAqIG9yIGBPYmplY3RgLCB0aGUgYE9iamVjdGAtYmFzZWQgdmVyc2lvbiBpcyB0aGUgbW9zdCBvZnRlbiB1c2VkIGFuZCBoYXMgYW4gYWR2YW50YWdlIG9mIGtlZXBpbmdcclxuICogYWxsIHRoZSBDU1MgY2xhc3MgbmFtZXMgaW4gYSB0ZW1wbGF0ZS5cclxuICpcclxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L2E0WWR0bVd5d2hKMzN1cWZwUFBuP3A9cHJldmlldykpOlxyXG4gKlxyXG4gKiBgYGBcclxuICogaW1wb3J0IHtDb21wb25lbnQsIE5nQ2xhc3N9IGZyb20gJ2FuZ3VsYXIyL2FuZ3VsYXIyJztcclxuICpcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgc2VsZWN0b3I6ICd0b2dnbGUtYnV0dG9uJyxcclxuICogICBpbnB1dHM6IFsnaXNEaXNhYmxlZCddLFxyXG4gKiAgIHRlbXBsYXRlOiBgXHJcbiAqICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvblwiIFtuZy1jbGFzc109XCJ7YWN0aXZlOiBpc09uLCBkaXNhYmxlZDogaXNEaXNhYmxlZH1cIlxyXG4gKiAgICAgICAgICAoY2xpY2spPVwidG9nZ2xlKCFpc09uKVwiPlxyXG4gKiAgICAgICAgICBDbGljayBtZSFcclxuICogICAgICA8L2Rpdj5gLFxyXG4gKiAgIHN0eWxlczogW2BcclxuICogICAgIC5idXR0b24ge1xyXG4gKiAgICAgICB3aWR0aDogMTIwcHg7XHJcbiAqICAgICAgIGJvcmRlcjogbWVkaXVtIHNvbGlkIGJsYWNrO1xyXG4gKiAgICAgfVxyXG4gKlxyXG4gKiAgICAgLmFjdGl2ZSB7XHJcbiAqICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcclxuICogICAgfVxyXG4gKlxyXG4gKiAgICAgLmRpc2FibGVkIHtcclxuICogICAgICAgY29sb3I6IGdyYXk7XHJcbiAqICAgICAgIGJvcmRlcjogbWVkaXVtIHNvbGlkIGdyYXk7XHJcbiAqICAgICB9XHJcbiAqICAgYF1cclxuICogICBkaXJlY3RpdmVzOiBbTmdDbGFzc11cclxuICogfSlcclxuICogY2xhc3MgVG9nZ2xlQnV0dG9uIHtcclxuICogICBpc09uID0gZmFsc2U7XHJcbiAqICAgaXNEaXNhYmxlZCA9IGZhbHNlO1xyXG4gKlxyXG4gKiAgIHRvZ2dsZShuZXdTdGF0ZSkge1xyXG4gKiAgICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQpIHtcclxuICogICAgICAgdGhpcy5pc09uID0gbmV3U3RhdGU7XHJcbiAqICAgICB9XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIE5nQ2xhc3MgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTmdDbGFzcyhfaXRlcmFibGVEaWZmZXJzLCBfa2V5VmFsdWVEaWZmZXJzLCBfbmdFbCwgX3JlbmRlcmVyKSB7XHJcbiAgICAgICAgdGhpcy5faXRlcmFibGVEaWZmZXJzID0gX2l0ZXJhYmxlRGlmZmVycztcclxuICAgICAgICB0aGlzLl9rZXlWYWx1ZURpZmZlcnMgPSBfa2V5VmFsdWVEaWZmZXJzO1xyXG4gICAgICAgIHRoaXMuX25nRWwgPSBfbmdFbDtcclxuICAgICAgICB0aGlzLl9yZW5kZXJlciA9IF9yZW5kZXJlcjtcclxuICAgICAgICB0aGlzLl9pbml0aWFsQ2xhc3NlcyA9IFtdO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5nQ2xhc3MucHJvdG90eXBlLCBcImluaXRpYWxDbGFzc2VzXCIsIHtcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FwcGx5SW5pdGlhbENsYXNzZXModHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxDbGFzc2VzID0gbGFuZ18xLmlzUHJlc2VudCh2KSAmJiBsYW5nXzEuaXNTdHJpbmcodikgPyB2LnNwbGl0KCcgJykgOiBbXTtcclxuICAgICAgICAgICAgdGhpcy5fYXBwbHlJbml0aWFsQ2xhc3NlcyhmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FwcGx5Q2xhc3Nlcyh0aGlzLl9yYXdDbGFzcywgZmFsc2UpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5nQ2xhc3MucHJvdG90eXBlLCBcInJhd0NsYXNzXCIsIHtcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsZWFudXBDbGFzc2VzKHRoaXMuX3Jhd0NsYXNzKTtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1N0cmluZyh2KSkge1xyXG4gICAgICAgICAgICAgICAgdiA9IHYuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9yYXdDbGFzcyA9IHY7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHYpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sbGVjdGlvbl8xLmlzTGlzdExpa2VJdGVyYWJsZSh2KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RpZmZlciA9IHRoaXMuX2l0ZXJhYmxlRGlmZmVycy5maW5kKHYpLmNyZWF0ZShudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb2RlID0gJ2l0ZXJhYmxlJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RpZmZlciA9IHRoaXMuX2tleVZhbHVlRGlmZmVycy5maW5kKHYpLmNyZWF0ZShudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb2RlID0gJ2tleVZhbHVlJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RpZmZlciA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE5nQ2xhc3MucHJvdG90eXBlLmRvQ2hlY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5fZGlmZmVyKSkge1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlcyA9IHRoaXMuX2RpZmZlci5kaWZmKHRoaXMuX3Jhd0NsYXNzKTtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoY2hhbmdlcykpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tb2RlID09ICdpdGVyYWJsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcHBseUl0ZXJhYmxlQ2hhbmdlcyhjaGFuZ2VzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FwcGx5S2V5VmFsdWVDaGFuZ2VzKGNoYW5nZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE5nQ2xhc3MucHJvdG90eXBlLm9uRGVzdHJveSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5fY2xlYW51cENsYXNzZXModGhpcy5fcmF3Q2xhc3MpOyB9O1xyXG4gICAgTmdDbGFzcy5wcm90b3R5cGUuX2NsZWFudXBDbGFzc2VzID0gZnVuY3Rpb24gKHJhd0NsYXNzVmFsKSB7XHJcbiAgICAgICAgdGhpcy5fYXBwbHlDbGFzc2VzKHJhd0NsYXNzVmFsLCB0cnVlKTtcclxuICAgICAgICB0aGlzLl9hcHBseUluaXRpYWxDbGFzc2VzKGZhbHNlKTtcclxuICAgIH07XHJcbiAgICBOZ0NsYXNzLnByb3RvdHlwZS5fYXBwbHlLZXlWYWx1ZUNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgY2hhbmdlcy5mb3JFYWNoQWRkZWRJdGVtKGZ1bmN0aW9uIChyZWNvcmQpIHsgX3RoaXMuX3RvZ2dsZUNsYXNzKHJlY29yZC5rZXksIHJlY29yZC5jdXJyZW50VmFsdWUpOyB9KTtcclxuICAgICAgICBjaGFuZ2VzLmZvckVhY2hDaGFuZ2VkSXRlbShmdW5jdGlvbiAocmVjb3JkKSB7IF90aGlzLl90b2dnbGVDbGFzcyhyZWNvcmQua2V5LCByZWNvcmQuY3VycmVudFZhbHVlKTsgfSk7XHJcbiAgICAgICAgY2hhbmdlcy5mb3JFYWNoUmVtb3ZlZEl0ZW0oZnVuY3Rpb24gKHJlY29yZCkge1xyXG4gICAgICAgICAgICBpZiAocmVjb3JkLnByZXZpb3VzVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl90b2dnbGVDbGFzcyhyZWNvcmQua2V5LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBOZ0NsYXNzLnByb3RvdHlwZS5fYXBwbHlJdGVyYWJsZUNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgY2hhbmdlcy5mb3JFYWNoQWRkZWRJdGVtKGZ1bmN0aW9uIChyZWNvcmQpIHsgX3RoaXMuX3RvZ2dsZUNsYXNzKHJlY29yZC5pdGVtLCB0cnVlKTsgfSk7XHJcbiAgICAgICAgY2hhbmdlcy5mb3JFYWNoUmVtb3ZlZEl0ZW0oZnVuY3Rpb24gKHJlY29yZCkgeyBfdGhpcy5fdG9nZ2xlQ2xhc3MocmVjb3JkLml0ZW0sIGZhbHNlKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgTmdDbGFzcy5wcm90b3R5cGUuX2FwcGx5SW5pdGlhbENsYXNzZXMgPSBmdW5jdGlvbiAoaXNDbGVhbnVwKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9pbml0aWFsQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHsgcmV0dXJuIF90aGlzLl90b2dnbGVDbGFzcyhjbGFzc05hbWUsICFpc0NsZWFudXApOyB9KTtcclxuICAgIH07XHJcbiAgICBOZ0NsYXNzLnByb3RvdHlwZS5fYXBwbHlDbGFzc2VzID0gZnVuY3Rpb24gKHJhd0NsYXNzVmFsLCBpc0NsZWFudXApIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHJhd0NsYXNzVmFsKSkge1xyXG4gICAgICAgICAgICBpZiAoY29sbGVjdGlvbl8xLmlzTGlzdExpa2VJdGVyYWJsZShyYXdDbGFzc1ZhbCkpIHtcclxuICAgICAgICAgICAgICAgIHJhd0NsYXNzVmFsLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkgeyByZXR1cm4gX3RoaXMuX3RvZ2dsZUNsYXNzKGNsYXNzTmFtZSwgIWlzQ2xlYW51cCk7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbl8xLlN0cmluZ01hcFdyYXBwZXIuZm9yRWFjaChyYXdDbGFzc1ZhbCwgZnVuY3Rpb24gKGV4cFZhbCwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4cFZhbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RvZ2dsZUNsYXNzKGNsYXNzTmFtZSwgIWlzQ2xlYW51cCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBOZ0NsYXNzLnByb3RvdHlwZS5fdG9nZ2xlQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lLCBlbmFibGVkKSB7XHJcbiAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLnRyaW0oKTtcclxuICAgICAgICBpZiAoY2xhc3NOYW1lLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0RWxlbWVudENsYXNzKHRoaXMuX25nRWwsIGNsYXNzTmFtZSwgZW5hYmxlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE5nQ2xhc3MgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBtZXRhZGF0YV8xLkRpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW25nLWNsYXNzXScsIGlucHV0czogWydyYXdDbGFzczogbmctY2xhc3MnLCAnaW5pdGlhbENsYXNzZXM6IGNsYXNzJ10gfSksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW2NoYW5nZV9kZXRlY3Rpb25fMS5JdGVyYWJsZURpZmZlcnMsIGNoYW5nZV9kZXRlY3Rpb25fMS5LZXlWYWx1ZURpZmZlcnMsIGxpbmtlcl8xLkVsZW1lbnRSZWYsIHJlbmRlcl8xLlJlbmRlcmVyXSlcclxuICAgIF0sIE5nQ2xhc3MpO1xyXG4gICAgcmV0dXJuIE5nQ2xhc3M7XHJcbn0pKCk7XHJcbmV4cG9ydHMuTmdDbGFzcyA9IE5nQ2xhc3M7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5nX2NsYXNzLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgbWV0YWRhdGFfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL21ldGFkYXRhJyk7XHJcbnZhciBjaGFuZ2VfZGV0ZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uJyk7XHJcbnZhciBsaW5rZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlcicpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxuLyoqXHJcbiAqIFRoZSBgTmdGb3JgIGRpcmVjdGl2ZSBpbnN0YW50aWF0ZXMgYSB0ZW1wbGF0ZSBvbmNlIHBlciBpdGVtIGZyb20gYW4gaXRlcmFibGUuIFRoZSBjb250ZXh0IGZvclxyXG4gKiBlYWNoIGluc3RhbnRpYXRlZCB0ZW1wbGF0ZSBpbmhlcml0cyBmcm9tIHRoZSBvdXRlciBjb250ZXh0IHdpdGggdGhlIGdpdmVuIGxvb3AgdmFyaWFibGUgc2V0XHJcbiAqIHRvIHRoZSBjdXJyZW50IGl0ZW0gZnJvbSB0aGUgaXRlcmFibGUuXHJcbiAqXHJcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGFsaWFzIHRoZSBgaW5kZXhgIHRvIGEgbG9jYWwgdmFyaWFibGUgdGhhdCB3aWxsIGJlIHNldCB0byB0aGUgY3VycmVudCBsb29wXHJcbiAqIGl0ZXJhdGlvbiBpbiB0aGUgdGVtcGxhdGUgY29udGV4dCwgYW5kIGFsc28gdG8gYWxpYXMgdGhlICdsYXN0JyB0byBhIGxvY2FsIHZhcmlhYmxlIHRoYXQgd2lsbFxyXG4gKiBiZSBzZXQgdG8gYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGl0ZW0gaXMgdGhlIGxhc3Qgb25lIGluIHRoZSBpdGVyYXRpb25cclxuICpcclxuICogV2hlbiB0aGUgY29udGVudHMgb2YgdGhlIGl0ZXJhdG9yIGNoYW5nZXMsIGBOZ0ZvcmAgbWFrZXMgdGhlIGNvcnJlc3BvbmRpbmcgY2hhbmdlcyB0byB0aGUgRE9NOlxyXG4gKlxyXG4gKiAqIFdoZW4gYW4gaXRlbSBpcyBhZGRlZCwgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHRlbXBsYXRlIGlzIGFkZGVkIHRvIHRoZSBET00uXHJcbiAqICogV2hlbiBhbiBpdGVtIGlzIHJlbW92ZWQsIGl0cyB0ZW1wbGF0ZSBpbnN0YW5jZSBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cclxuICogKiBXaGVuIGl0ZW1zIGFyZSByZW9yZGVyZWQsIHRoZWlyIHJlc3BlY3RpdmUgdGVtcGxhdGVzIGFyZSByZW9yZGVyZWQgaW4gdGhlIERPTS5cclxuICpcclxuICogIyBFeGFtcGxlXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiA8dWw+XHJcbiAqICAgPGxpICpuZy1mb3I9XCIjZXJyb3Igb2YgZXJyb3JzOyAjaSA9IGluZGV4XCI+XHJcbiAqICAgICBFcnJvciB7e2l9fSBvZiB7e2Vycm9ycy5sZW5ndGh9fToge3tlcnJvci5tZXNzYWdlfX1cclxuICogICA8L2xpPlxyXG4gKiA8L3VsPlxyXG4gKiBgYGBcclxuICpcclxuICogIyBTeW50YXhcclxuICpcclxuICogLSBgPGxpICpuZy1mb3I9XCIjaXRlbSBvZiBpdGVtczsgI2kgPSBpbmRleFwiPi4uLjwvbGk+YFxyXG4gKiAtIGA8bGkgdGVtcGxhdGU9XCJuZy1mb3IgI2l0ZW0gb2YgaXRlbXM7ICNpID0gaW5kZXhcIj4uLi48L2xpPmBcclxuICogLSBgPHRlbXBsYXRlIG5nLWZvciAjaXRlbSBbbmctZm9yLW9mXT1cIml0ZW1zXCIgI2k9XCJpbmRleFwiPjxsaT4uLi48L2xpPjwvdGVtcGxhdGU+YFxyXG4gKi9cclxudmFyIE5nRm9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5nRm9yKF92aWV3Q29udGFpbmVyLCBfdGVtcGxhdGVSZWYsIF9pdGVyYWJsZURpZmZlcnMsIF9jZHIpIHtcclxuICAgICAgICB0aGlzLl92aWV3Q29udGFpbmVyID0gX3ZpZXdDb250YWluZXI7XHJcbiAgICAgICAgdGhpcy5fdGVtcGxhdGVSZWYgPSBfdGVtcGxhdGVSZWY7XHJcbiAgICAgICAgdGhpcy5faXRlcmFibGVEaWZmZXJzID0gX2l0ZXJhYmxlRGlmZmVycztcclxuICAgICAgICB0aGlzLl9jZHIgPSBfY2RyO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5nRm9yLnByb3RvdHlwZSwgXCJuZ0Zvck9mXCIsIHtcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9uZ0Zvck9mID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayh0aGlzLl9kaWZmZXIpICYmIGxhbmdfMS5pc1ByZXNlbnQodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kaWZmZXIgPSB0aGlzLl9pdGVyYWJsZURpZmZlcnMuZmluZCh2YWx1ZSkuY3JlYXRlKHRoaXMuX2Nkcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ0Zvci5wcm90b3R5cGUsIFwibmdGb3JUZW1wbGF0ZVwiLCB7XHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgdGhpcy5fdGVtcGxhdGVSZWYgPSB2YWx1ZTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBOZ0Zvci5wcm90b3R5cGUuZG9DaGVjayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLl9kaWZmZXIpKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2VzID0gdGhpcy5fZGlmZmVyLmRpZmYodGhpcy5fbmdGb3JPZik7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGNoYW5nZXMpKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXBwbHlDaGFuZ2VzKGNoYW5nZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBOZ0Zvci5wcm90b3R5cGUuX2FwcGx5Q2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcbiAgICAgICAgLy8gVE9ETyhyYWRvKTogY2hlY2sgaWYgY2hhbmdlIGRldGVjdGlvbiBjYW4gcHJvZHVjZSBhIGNoYW5nZSByZWNvcmQgdGhhdCBpc1xyXG4gICAgICAgIC8vIGVhc2llciB0byBjb25zdW1lIHRoYW4gY3VycmVudC5cclxuICAgICAgICB2YXIgcmVjb3JkVmlld1R1cGxlcyA9IFtdO1xyXG4gICAgICAgIGNoYW5nZXMuZm9yRWFjaFJlbW92ZWRJdGVtKGZ1bmN0aW9uIChyZW1vdmVkUmVjb3JkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZWNvcmRWaWV3VHVwbGVzLnB1c2gobmV3IFJlY29yZFZpZXdUdXBsZShyZW1vdmVkUmVjb3JkLCBudWxsKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY2hhbmdlcy5mb3JFYWNoTW92ZWRJdGVtKGZ1bmN0aW9uIChtb3ZlZFJlY29yZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkVmlld1R1cGxlcy5wdXNoKG5ldyBSZWNvcmRWaWV3VHVwbGUobW92ZWRSZWNvcmQsIG51bGwpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgaW5zZXJ0VHVwbGVzID0gdGhpcy5fYnVsa1JlbW92ZShyZWNvcmRWaWV3VHVwbGVzKTtcclxuICAgICAgICBjaGFuZ2VzLmZvckVhY2hBZGRlZEl0ZW0oZnVuY3Rpb24gKGFkZGVkUmVjb3JkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnNlcnRUdXBsZXMucHVzaChuZXcgUmVjb3JkVmlld1R1cGxlKGFkZGVkUmVjb3JkLCBudWxsKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fYnVsa0luc2VydChpbnNlcnRUdXBsZXMpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5zZXJ0VHVwbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BlclZpZXdDaGFuZ2UoaW5zZXJ0VHVwbGVzW2ldLnZpZXcsIGluc2VydFR1cGxlc1tpXS5yZWNvcmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWxlbiA9IHRoaXMuX3ZpZXdDb250YWluZXIubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdDb250YWluZXIuZ2V0KGkpLnNldExvY2FsKCdsYXN0JywgaSA9PT0gaWxlbiAtIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBOZ0Zvci5wcm90b3R5cGUuX3BlclZpZXdDaGFuZ2UgPSBmdW5jdGlvbiAodmlldywgcmVjb3JkKSB7XHJcbiAgICAgICAgdmlldy5zZXRMb2NhbCgnXFwkaW1wbGljaXQnLCByZWNvcmQuaXRlbSk7XHJcbiAgICAgICAgdmlldy5zZXRMb2NhbCgnaW5kZXgnLCByZWNvcmQuY3VycmVudEluZGV4KTtcclxuICAgICAgICB2aWV3LnNldExvY2FsKCdldmVuJywgKHJlY29yZC5jdXJyZW50SW5kZXggJSAyID09IDApKTtcclxuICAgICAgICB2aWV3LnNldExvY2FsKCdvZGQnLCAocmVjb3JkLmN1cnJlbnRJbmRleCAlIDIgPT0gMSkpO1xyXG4gICAgfTtcclxuICAgIE5nRm9yLnByb3RvdHlwZS5fYnVsa1JlbW92ZSA9IGZ1bmN0aW9uICh0dXBsZXMpIHtcclxuICAgICAgICB0dXBsZXMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5yZWNvcmQucHJldmlvdXNJbmRleCAtIGIucmVjb3JkLnByZXZpb3VzSW5kZXg7IH0pO1xyXG4gICAgICAgIHZhciBtb3ZlZFR1cGxlcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSB0dXBsZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgdmFyIHR1cGxlID0gdHVwbGVzW2ldO1xyXG4gICAgICAgICAgICAvLyBzZXBhcmF0ZSBtb3ZlZCB2aWV3cyBmcm9tIHJlbW92ZWQgdmlld3MuXHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHR1cGxlLnJlY29yZC5jdXJyZW50SW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICB0dXBsZS52aWV3ID0gdGhpcy5fdmlld0NvbnRhaW5lci5kZXRhY2godHVwbGUucmVjb3JkLnByZXZpb3VzSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgbW92ZWRUdXBsZXMucHVzaCh0dXBsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3Q29udGFpbmVyLnJlbW92ZSh0dXBsZS5yZWNvcmQucHJldmlvdXNJbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1vdmVkVHVwbGVzO1xyXG4gICAgfTtcclxuICAgIE5nRm9yLnByb3RvdHlwZS5fYnVsa0luc2VydCA9IGZ1bmN0aW9uICh0dXBsZXMpIHtcclxuICAgICAgICB0dXBsZXMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5yZWNvcmQuY3VycmVudEluZGV4IC0gYi5yZWNvcmQuY3VycmVudEluZGV4OyB9KTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR1cGxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgdHVwbGUgPSB0dXBsZXNbaV07XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHR1cGxlLnZpZXcpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3Q29udGFpbmVyLmluc2VydCh0dXBsZS52aWV3LCB0dXBsZS5yZWNvcmQuY3VycmVudEluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHR1cGxlLnZpZXcgPVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuX3RlbXBsYXRlUmVmLCB0dXBsZS5yZWNvcmQuY3VycmVudEluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHVwbGVzO1xyXG4gICAgfTtcclxuICAgIE5nRm9yID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbWV0YWRhdGFfMS5EaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tuZy1mb3JdW25nLWZvci1vZl0nLCBpbnB1dHM6IFsnbmdGb3JPZicsICduZ0ZvclRlbXBsYXRlJ10gfSksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW2xpbmtlcl8xLlZpZXdDb250YWluZXJSZWYsIGxpbmtlcl8xLlRlbXBsYXRlUmVmLCBjaGFuZ2VfZGV0ZWN0aW9uXzEuSXRlcmFibGVEaWZmZXJzLCBjaGFuZ2VfZGV0ZWN0aW9uXzEuQ2hhbmdlRGV0ZWN0b3JSZWZdKVxyXG4gICAgXSwgTmdGb3IpO1xyXG4gICAgcmV0dXJuIE5nRm9yO1xyXG59KSgpO1xyXG5leHBvcnRzLk5nRm9yID0gTmdGb3I7XHJcbnZhciBSZWNvcmRWaWV3VHVwbGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVjb3JkVmlld1R1cGxlKHJlY29yZCwgdmlldykge1xyXG4gICAgICAgIHRoaXMucmVjb3JkID0gcmVjb3JkO1xyXG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVjb3JkVmlld1R1cGxlO1xyXG59KSgpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZ19mb3IuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBtZXRhZGF0YV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbWV0YWRhdGEnKTtcclxudmFyIGxpbmtlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG4vKipcclxuICogUmVtb3ZlcyBvciByZWNyZWF0ZXMgYSBwb3J0aW9uIG9mIHRoZSBET00gdHJlZSBiYXNlZCBvbiBhbiB7ZXhwcmVzc2lvbn0uXHJcbiAqXHJcbiAqIElmIHRoZSBleHByZXNzaW9uIGFzc2lnbmVkIHRvIGBuZy1pZmAgZXZhbHVhdGVzIHRvIGEgZmFsc2UgdmFsdWUgdGhlbiB0aGUgZWxlbWVudFxyXG4gKiBpcyByZW1vdmVkIGZyb20gdGhlIERPTSwgb3RoZXJ3aXNlIGEgY2xvbmUgb2YgdGhlIGVsZW1lbnQgaXMgcmVpbnNlcnRlZCBpbnRvIHRoZSBET00uXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9mZTBrZ2VtRkJ0bVFPWTMxYjR0dz9wPXByZXZpZXcpKTpcclxuICpcclxuICogYGBgXHJcbiAqIDxkaXYgKm5nLWlmPVwiZXJyb3JDb3VudCA+IDBcIiBjbGFzcz1cImVycm9yXCI+XHJcbiAqICAgPCEtLSBFcnJvciBtZXNzYWdlIGRpc3BsYXllZCB3aGVuIHRoZSBlcnJvckNvdW50IHByb3BlcnR5IG9uIHRoZSBjdXJyZW50IGNvbnRleHQgaXMgZ3JlYXRlclxyXG4gKiB0aGFuIDAuIC0tPlxyXG4gKiAgIHt7ZXJyb3JDb3VudH19IGVycm9ycyBkZXRlY3RlZFxyXG4gKiA8L2Rpdj5cclxuICogYGBgXHJcbiAqXHJcbiAqICMgU3ludGF4XHJcbiAqXHJcbiAqIC0gYDxkaXYgKm5nLWlmPVwiY29uZGl0aW9uXCI+Li4uPC9kaXY+YFxyXG4gKiAtIGA8ZGl2IHRlbXBsYXRlPVwibmctaWYgY29uZGl0aW9uXCI+Li4uPC9kaXY+YFxyXG4gKiAtIGA8dGVtcGxhdGUgW25nLWlmXT1cImNvbmRpdGlvblwiPjxkaXY+Li4uPC9kaXY+PC90ZW1wbGF0ZT5gXHJcbiAqL1xyXG52YXIgTmdJZiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOZ0lmKF92aWV3Q29udGFpbmVyLCBfdGVtcGxhdGVSZWYpIHtcclxuICAgICAgICB0aGlzLl92aWV3Q29udGFpbmVyID0gX3ZpZXdDb250YWluZXI7XHJcbiAgICAgICAgdGhpcy5fdGVtcGxhdGVSZWYgPSBfdGVtcGxhdGVSZWY7XHJcbiAgICAgICAgdGhpcy5fcHJldkNvbmRpdGlvbiA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdJZi5wcm90b3R5cGUsIFwibmdJZlwiLCB7XHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobmV3Q29uZGl0aW9uIC8qIGJvb2xlYW4gKi8pIHtcclxuICAgICAgICAgICAgaWYgKG5ld0NvbmRpdGlvbiAmJiAobGFuZ18xLmlzQmxhbmsodGhpcy5fcHJldkNvbmRpdGlvbikgfHwgIXRoaXMuX3ByZXZDb25kaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wcmV2Q29uZGl0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuX3RlbXBsYXRlUmVmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghbmV3Q29uZGl0aW9uICYmIChsYW5nXzEuaXNCbGFuayh0aGlzLl9wcmV2Q29uZGl0aW9uKSB8fCB0aGlzLl9wcmV2Q29uZGl0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJldkNvbmRpdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmlld0NvbnRhaW5lci5jbGVhcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBOZ0lmID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbWV0YWRhdGFfMS5EaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tuZy1pZl0nLCBpbnB1dHM6IFsnbmdJZiddIH0pLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtsaW5rZXJfMS5WaWV3Q29udGFpbmVyUmVmLCBsaW5rZXJfMS5UZW1wbGF0ZVJlZl0pXHJcbiAgICBdLCBOZ0lmKTtcclxuICAgIHJldHVybiBOZ0lmO1xyXG59KSgpO1xyXG5leHBvcnRzLk5nSWYgPSBOZ0lmO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZ19pZi5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGNoYW5nZV9kZXRlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2NoYW5nZV9kZXRlY3Rpb24nKTtcclxudmFyIGxpbmtlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyJyk7XHJcbnZhciBtZXRhZGF0YV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbWV0YWRhdGEnKTtcclxudmFyIHJlbmRlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvcmVuZGVyJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG4vKipcclxuICogVGhlIGBOZ1N0eWxlYCBkaXJlY3RpdmUgY2hhbmdlcyBzdHlsZXMgYmFzZWQgb24gYSByZXN1bHQgb2YgZXhwcmVzc2lvbiBldmFsdWF0aW9uLlxyXG4gKlxyXG4gKiBBbiBleHByZXNzaW9uIGFzc2lnbmVkIHRvIHRoZSBgbmctc3R5bGVgIHByb3BlcnR5IG11c3QgZXZhbHVhdGUgdG8gYW4gb2JqZWN0IGFuZCB0aGVcclxuICogY29ycmVzcG9uZGluZyBlbGVtZW50IHN0eWxlcyBhcmUgdXBkYXRlZCBiYXNlZCBvbiBjaGFuZ2VzIHRvIHRoaXMgb2JqZWN0LiBTdHlsZSBuYW1lcyB0byB1cGRhdGVcclxuICogYXJlIHRha2VuIGZyb20gdGhlIG9iamVjdCdzIGtleXMsIGFuZCB2YWx1ZXMgLSBmcm9tIHRoZSBjb3JyZXNwb25kaW5nIG9iamVjdCdzIHZhbHVlcy5cclxuICpcclxuICogIyBTeW50YXhcclxuICpcclxuICogLSBgPGRpdiBbbmctc3R5bGVdPVwieydmb250LXN0eWxlJzogc3R5bGV9XCI+PC9kaXY+YFxyXG4gKiAtIGA8ZGl2IFtuZy1zdHlsZV09XCJzdHlsZUV4cFwiPjwvZGl2PmAgLSBoZXJlIHRoZSBgc3R5bGVFeHBgIG11c3QgZXZhbHVhdGUgdG8gYW4gb2JqZWN0XHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9ZYW1HUzZHa1VoOUdxV05RaEN5TT9wPXByZXZpZXcpKTpcclxuICpcclxuICogYGBgXHJcbiAqIGltcG9ydCB7Q29tcG9uZW50LCBOZ1N0eWxlfSBmcm9tICdhbmd1bGFyMi9hbmd1bGFyMic7XHJcbiAqXHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgc2VsZWN0b3I6ICduZy1zdHlsZS1leGFtcGxlJyxcclxuICogIHRlbXBsYXRlOiBgXHJcbiAqICAgIDxoMSBbbmctc3R5bGVdPVwieydmb250LXN0eWxlJzogc3R5bGUsICdmb250LXNpemUnOiBzaXplLCAnZm9udC13ZWlnaHQnOiB3ZWlnaHR9XCI+XHJcbiAqICAgICAgQ2hhbmdlIHN0eWxlIG9mIHRoaXMgdGV4dCFcclxuICogICAgPC9oMT5cclxuICpcclxuICogICAgPGhyPlxyXG4gKlxyXG4gKiAgICA8bGFiZWw+SXRhbGljOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgKGNoYW5nZSk9XCJjaGFuZ2VTdHlsZSgkZXZlbnQpXCI+PC9sYWJlbD5cclxuICogICAgPGxhYmVsPkJvbGQ6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiAoY2hhbmdlKT1cImNoYW5nZVdlaWdodCgkZXZlbnQpXCI+PC9sYWJlbD5cclxuICogICAgPGxhYmVsPlNpemU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIFt2YWx1ZV09XCJzaXplXCIgKGNoYW5nZSk9XCJzaXplID0gJGV2ZW50LnRhcmdldC52YWx1ZVwiPjwvbGFiZWw+XHJcbiAqICBgLFxyXG4gKiAgZGlyZWN0aXZlczogW05nU3R5bGVdXHJcbiAqIH0pXHJcbiAqIGV4cG9ydCBjbGFzcyBOZ1N0eWxlRXhhbXBsZSB7XHJcbiAqICAgIHN0eWxlID0gJ25vcm1hbCc7XHJcbiAqICAgIHdlaWdodCA9ICdub3JtYWwnO1xyXG4gKiAgICBzaXplID0gJzIwcHgnO1xyXG4gKlxyXG4gKiAgICBjaGFuZ2VTdHlsZSgkZXZlbnQ6IGFueSkge1xyXG4gKiAgICAgIHRoaXMuc3R5bGUgPSAkZXZlbnQudGFyZ2V0LmNoZWNrZWQgPyAnaXRhbGljJyA6ICdub3JtYWwnO1xyXG4gKiAgICB9XHJcbiAqXHJcbiAqICAgIGNoYW5nZVdlaWdodCgkZXZlbnQ6IGFueSkge1xyXG4gKiAgICAgIHRoaXMud2VpZ2h0ID0gJGV2ZW50LnRhcmdldC5jaGVja2VkID8gJ2JvbGQnIDogJ25vcm1hbCc7XHJcbiAqICAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogSW4gdGhpcyBleGFtcGxlIHRoZSBgZm9udC1zdHlsZWAsIGBmb250LXNpemVgIGFuZCBgZm9udC13ZWlnaHRgIHN0eWxlcyB3aWxsIGJlIHVwZGF0ZWRcclxuICogYmFzZWQgb24gdGhlIGBzdHlsZWAgcHJvcGVydHkncyB2YWx1ZSBjaGFuZ2VzLlxyXG4gKi9cclxudmFyIE5nU3R5bGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTmdTdHlsZShfZGlmZmVycywgX25nRWwsIF9yZW5kZXJlcikge1xyXG4gICAgICAgIHRoaXMuX2RpZmZlcnMgPSBfZGlmZmVycztcclxuICAgICAgICB0aGlzLl9uZ0VsID0gX25nRWw7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSBfcmVuZGVyZXI7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdTdHlsZS5wcm90b3R5cGUsIFwicmF3U3R5bGVcIiwge1xyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmF3U3R5bGUgPSB2O1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsodGhpcy5fZGlmZmVyKSAmJiBsYW5nXzEuaXNQcmVzZW50KHYpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kaWZmZXIgPSB0aGlzLl9kaWZmZXJzLmZpbmQodGhpcy5fcmF3U3R5bGUpLmNyZWF0ZShudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgTmdTdHlsZS5wcm90b3R5cGUuZG9DaGVjayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLl9kaWZmZXIpKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2VzID0gdGhpcy5fZGlmZmVyLmRpZmYodGhpcy5fcmF3U3R5bGUpO1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChjaGFuZ2VzKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXBwbHlDaGFuZ2VzKGNoYW5nZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE5nU3R5bGUucHJvdG90eXBlLl9hcHBseUNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgY2hhbmdlcy5mb3JFYWNoQWRkZWRJdGVtKGZ1bmN0aW9uIChyZWNvcmQpIHsgX3RoaXMuX3NldFN0eWxlKHJlY29yZC5rZXksIHJlY29yZC5jdXJyZW50VmFsdWUpOyB9KTtcclxuICAgICAgICBjaGFuZ2VzLmZvckVhY2hDaGFuZ2VkSXRlbShmdW5jdGlvbiAocmVjb3JkKSB7IF90aGlzLl9zZXRTdHlsZShyZWNvcmQua2V5LCByZWNvcmQuY3VycmVudFZhbHVlKTsgfSk7XHJcbiAgICAgICAgY2hhbmdlcy5mb3JFYWNoUmVtb3ZlZEl0ZW0oZnVuY3Rpb24gKHJlY29yZCkgeyBfdGhpcy5fc2V0U3R5bGUocmVjb3JkLmtleSwgbnVsbCk7IH0pO1xyXG4gICAgfTtcclxuICAgIE5nU3R5bGUucHJvdG90eXBlLl9zZXRTdHlsZSA9IGZ1bmN0aW9uIChuYW1lLCB2YWwpIHtcclxuICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRFbGVtZW50U3R5bGUodGhpcy5fbmdFbCwgbmFtZSwgdmFsKTtcclxuICAgIH07XHJcbiAgICBOZ1N0eWxlID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbWV0YWRhdGFfMS5EaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tuZy1zdHlsZV0nLCBpbnB1dHM6IFsncmF3U3R5bGU6IG5nLXN0eWxlJ10gfSksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW2NoYW5nZV9kZXRlY3Rpb25fMS5LZXlWYWx1ZURpZmZlcnMsIGxpbmtlcl8xLkVsZW1lbnRSZWYsIHJlbmRlcl8xLlJlbmRlcmVyXSlcclxuICAgIF0sIE5nU3R5bGUpO1xyXG4gICAgcmV0dXJuIE5nU3R5bGU7XHJcbn0pKCk7XHJcbmV4cG9ydHMuTmdTdHlsZSA9IE5nU3R5bGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5nX3N0eWxlLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgX19wYXJhbSA9ICh0aGlzICYmIHRoaXMuX19wYXJhbSkgfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn07XHJcbnZhciBtZXRhZGF0YV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbWV0YWRhdGEnKTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgbGlua2VyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9saW5rZXInKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgX1dIRU5fREVGQVVMVCA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBPYmplY3QoKSk7XHJcbnZhciBTd2l0Y2hWaWV3ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN3aXRjaFZpZXcoX3ZpZXdDb250YWluZXJSZWYsIF90ZW1wbGF0ZVJlZikge1xyXG4gICAgICAgIHRoaXMuX3ZpZXdDb250YWluZXJSZWYgPSBfdmlld0NvbnRhaW5lclJlZjtcclxuICAgICAgICB0aGlzLl90ZW1wbGF0ZVJlZiA9IF90ZW1wbGF0ZVJlZjtcclxuICAgIH1cclxuICAgIFN3aXRjaFZpZXcucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5fdmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5fdGVtcGxhdGVSZWYpOyB9O1xyXG4gICAgU3dpdGNoVmlldy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5fdmlld0NvbnRhaW5lclJlZi5jbGVhcigpOyB9O1xyXG4gICAgcmV0dXJuIFN3aXRjaFZpZXc7XHJcbn0pKCk7XHJcbmV4cG9ydHMuU3dpdGNoVmlldyA9IFN3aXRjaFZpZXc7XHJcbi8qKlxyXG4gKiBUaGUgYE5nU3dpdGNoYCBkaXJlY3RpdmUgaXMgdXNlZCB0byBjb25kaXRpb25hbGx5IHN3YXAgRE9NIHN0cnVjdHVyZSBvbiB5b3VyIHRlbXBsYXRlIGJhc2VkIG9uIGFcclxuICogc2NvcGUgZXhwcmVzc2lvbi5cclxuICogRWxlbWVudHMgd2l0aGluIGBOZ1N3aXRjaGAgYnV0IHdpdGhvdXQgYE5nU3dpdGNoV2hlbmAgb3IgYE5nU3dpdGNoRGVmYXVsdGAgZGlyZWN0aXZlcyB3aWxsIGJlXHJcbiAqIHByZXNlcnZlZCBhdCB0aGUgbG9jYXRpb24gYXMgc3BlY2lmaWVkIGluIHRoZSB0ZW1wbGF0ZS5cclxuICpcclxuICogYE5nU3dpdGNoYCBzaW1wbHkgY2hvb3NlcyBuZXN0ZWQgZWxlbWVudHMgYW5kIG1ha2VzIHRoZW0gdmlzaWJsZSBiYXNlZCBvbiB3aGljaCBlbGVtZW50IG1hdGNoZXNcclxuICogdGhlIHZhbHVlIG9idGFpbmVkIGZyb20gdGhlIGV2YWx1YXRlZCBleHByZXNzaW9uLiBJbiBvdGhlciB3b3JkcywgeW91IGRlZmluZSBhIGNvbnRhaW5lciBlbGVtZW50XHJcbiAqICh3aGVyZSB5b3UgcGxhY2UgdGhlIGRpcmVjdGl2ZSksIHBsYWNlIGFuIGV4cHJlc3Npb24gb24gdGhlICoqYFtuZy1zd2l0Y2hdPVwiLi4uXCJgIGF0dHJpYnV0ZSoqKSxcclxuICogZGVmaW5lIGFueSBpbm5lciBlbGVtZW50cyBpbnNpZGUgb2YgdGhlIGRpcmVjdGl2ZSBhbmQgcGxhY2UgYSBgW25nLXN3aXRjaC13aGVuXWAgYXR0cmlidXRlIHBlclxyXG4gKiBlbGVtZW50LlxyXG4gKiBUaGUgd2hlbiBhdHRyaWJ1dGUgaXMgdXNlZCB0byBpbmZvcm0gTmdTd2l0Y2ggd2hpY2ggZWxlbWVudCB0byBkaXNwbGF5IHdoZW4gdGhlIGV4cHJlc3Npb24gaXNcclxuICogZXZhbHVhdGVkLiBJZiBhIG1hdGNoaW5nIGV4cHJlc3Npb24gaXMgbm90IGZvdW5kIHZpYSBhIHdoZW4gYXR0cmlidXRlIHRoZW4gYW4gZWxlbWVudCB3aXRoIHRoZVxyXG4gKiBkZWZhdWx0IGF0dHJpYnV0ZSBpcyBkaXNwbGF5ZWQuXHJcbiAqXHJcbiAqICMgRXhhbXBsZTpcclxuICpcclxuICogYGBgXHJcbiAqIDxBTlkgW25nLXN3aXRjaF09XCJleHByZXNzaW9uXCI+XHJcbiAqICAgPHRlbXBsYXRlIFtuZy1zd2l0Y2gtd2hlbl09XCJ3aGVuRXhwcmVzc2lvbjFcIj4uLi48L3RlbXBsYXRlPlxyXG4gKiAgIDx0ZW1wbGF0ZSBbbmctc3dpdGNoLXdoZW5dPVwid2hlbkV4cHJlc3Npb24xXCI+Li4uPC90ZW1wbGF0ZT5cclxuICogICA8dGVtcGxhdGUgbmctc3dpdGNoLWRlZmF1bHQ+Li4uPC90ZW1wbGF0ZT5cclxuICogPC9BTlk+XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIE5nU3dpdGNoID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5nU3dpdGNoKCkge1xyXG4gICAgICAgIHRoaXMuX3VzZURlZmF1bHQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl92YWx1ZVZpZXdzID0gbmV3IGNvbGxlY3Rpb25fMS5NYXAoKTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVWaWV3cyA9IFtdO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5nU3dpdGNoLnByb3RvdHlwZSwgXCJuZ1N3aXRjaFwiLCB7XHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgLy8gRW1wdHkgdGhlIGN1cnJlbnRseSBhY3RpdmUgVmlld0NvbnRhaW5lcnNcclxuICAgICAgICAgICAgdGhpcy5fZW1wdHlBbGxBY3RpdmVWaWV3cygpO1xyXG4gICAgICAgICAgICAvLyBBZGQgdGhlIFZpZXdDb250YWluZXJzIG1hdGNoaW5nIHRoZSB2YWx1ZSAod2l0aCBhIGZhbGxiYWNrIHRvIGRlZmF1bHQpXHJcbiAgICAgICAgICAgIHRoaXMuX3VzZURlZmF1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIHZpZXdzID0gdGhpcy5fdmFsdWVWaWV3cy5nZXQodmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsodmlld3MpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91c2VEZWZhdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZpZXdzID0gbGFuZ18xLm5vcm1hbGl6ZUJsYW5rKHRoaXMuX3ZhbHVlVmlld3MuZ2V0KF9XSEVOX0RFRkFVTFQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9hY3RpdmF0ZVZpZXdzKHZpZXdzKTtcclxuICAgICAgICAgICAgdGhpcy5fc3dpdGNoVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIE5nU3dpdGNoLnByb3RvdHlwZS5fb25XaGVuVmFsdWVDaGFuZ2VkID0gZnVuY3Rpb24gKG9sZFdoZW4sIG5ld1doZW4sIHZpZXcpIHtcclxuICAgICAgICB0aGlzLl9kZXJlZ2lzdGVyVmlldyhvbGRXaGVuLCB2aWV3KTtcclxuICAgICAgICB0aGlzLl9yZWdpc3RlclZpZXcobmV3V2hlbiwgdmlldyk7XHJcbiAgICAgICAgaWYgKG9sZFdoZW4gPT09IHRoaXMuX3N3aXRjaFZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZpZXcuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIucmVtb3ZlKHRoaXMuX2FjdGl2ZVZpZXdzLCB2aWV3KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobmV3V2hlbiA9PT0gdGhpcy5fc3dpdGNoVmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3VzZURlZmF1bHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VzZURlZmF1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VtcHR5QWxsQWN0aXZlVmlld3MoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2aWV3LmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVWaWV3cy5wdXNoKHZpZXcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTd2l0Y2ggdG8gZGVmYXVsdCB3aGVuIHRoZXJlIGlzIG5vIG1vcmUgYWN0aXZlIFZpZXdDb250YWluZXJzXHJcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVZpZXdzLmxlbmd0aCA9PT0gMCAmJiAhdGhpcy5fdXNlRGVmYXVsdCkge1xyXG4gICAgICAgICAgICB0aGlzLl91c2VEZWZhdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fYWN0aXZhdGVWaWV3cyh0aGlzLl92YWx1ZVZpZXdzLmdldChfV0hFTl9ERUZBVUxUKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIE5nU3dpdGNoLnByb3RvdHlwZS5fZW1wdHlBbGxBY3RpdmVWaWV3cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYWN0aXZlQ29udGFpbmVycyA9IHRoaXMuX2FjdGl2ZVZpZXdzO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWN0aXZlQ29udGFpbmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBhY3RpdmVDb250YWluZXJzW2ldLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlVmlld3MgPSBbXTtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBOZ1N3aXRjaC5wcm90b3R5cGUuX2FjdGl2YXRlVmlld3MgPSBmdW5jdGlvbiAodmlld3MpIHtcclxuICAgICAgICAvLyBUT0RPKHZpY2IpOiBhc3NlcnQodGhpcy5fYWN0aXZlVmlld3MubGVuZ3RoID09PSAwKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh2aWV3cykpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmlld3NbaV0uY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fYWN0aXZlVmlld3MgPSB2aWV3cztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgTmdTd2l0Y2gucHJvdG90eXBlLl9yZWdpc3RlclZpZXcgPSBmdW5jdGlvbiAodmFsdWUsIHZpZXcpIHtcclxuICAgICAgICB2YXIgdmlld3MgPSB0aGlzLl92YWx1ZVZpZXdzLmdldCh2YWx1ZSk7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHZpZXdzKSkge1xyXG4gICAgICAgICAgICB2aWV3cyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZVZpZXdzLnNldCh2YWx1ZSwgdmlld3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2aWV3cy5wdXNoKHZpZXcpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIE5nU3dpdGNoLnByb3RvdHlwZS5fZGVyZWdpc3RlclZpZXcgPSBmdW5jdGlvbiAodmFsdWUsIHZpZXcpIHtcclxuICAgICAgICAvLyBgX1dIRU5fREVGQVVMVGAgaXMgdXNlZCBhIG1hcmtlciBmb3Igbm9uLXJlZ2lzdGVyZWQgd2hlbnNcclxuICAgICAgICBpZiAodmFsdWUgPT09IF9XSEVOX0RFRkFVTFQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB2YXIgdmlld3MgPSB0aGlzLl92YWx1ZVZpZXdzLmdldCh2YWx1ZSk7XHJcbiAgICAgICAgaWYgKHZpZXdzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlVmlld3MuZGVsZXRlKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5yZW1vdmUodmlld3MsIHZpZXcpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBOZ1N3aXRjaCA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIG1ldGFkYXRhXzEuRGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbmctc3dpdGNoXScsIGlucHV0czogWyduZ1N3aXRjaCddIH0pLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgTmdTd2l0Y2gpO1xyXG4gICAgcmV0dXJuIE5nU3dpdGNoO1xyXG59KSgpO1xyXG5leHBvcnRzLk5nU3dpdGNoID0gTmdTd2l0Y2g7XHJcbi8qKlxyXG4gKiBEZWZpbmVzIGEgY2FzZSBzdGF0ZW1lbnQgYXMgYW4gZXhwcmVzc2lvbi5cclxuICpcclxuICogSWYgbXVsdGlwbGUgYE5nU3dpdGNoV2hlbmAgbWF0Y2ggdGhlIGBOZ1N3aXRjaGAgdmFsdWUsIGFsbCBvZiB0aGVtIGFyZSBkaXNwbGF5ZWQuXHJcbiAqXHJcbiAqIEV4YW1wbGU6XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiAvLyBtYXRjaCBhZ2FpbnN0IGEgY29udGV4dCB2YXJpYWJsZVxyXG4gKiA8dGVtcGxhdGUgW25nLXN3aXRjaC13aGVuXT1cImNvbnRleHRWYXJpYWJsZVwiPi4uLjwvdGVtcGxhdGU+XHJcbiAqXHJcbiAqIC8vIG1hdGNoIGFnYWluc3QgYSBjb25zdGFudCBzdHJpbmdcclxuICogPHRlbXBsYXRlIG5nLXN3aXRjaC13aGVuPVwic3RyaW5nVmFsdWVcIj4uLi48L3RlbXBsYXRlPlxyXG4gKiBgYGBcclxuICovXHJcbnZhciBOZ1N3aXRjaFdoZW4gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTmdTd2l0Y2hXaGVuKHZpZXdDb250YWluZXIsIHRlbXBsYXRlUmVmLCBfc3dpdGNoKSB7XHJcbiAgICAgICAgdGhpcy5fc3dpdGNoID0gX3N3aXRjaDtcclxuICAgICAgICAvLyBgX1dIRU5fREVGQVVMVGAgaXMgdXNlZCBhcyBhIG1hcmtlciBmb3IgYSBub3QgeWV0IGluaXRpYWxpemVkIHZhbHVlXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gX1dIRU5fREVGQVVMVDtcclxuICAgICAgICB0aGlzLl92aWV3ID0gbmV3IFN3aXRjaFZpZXcodmlld0NvbnRhaW5lciwgdGVtcGxhdGVSZWYpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5nU3dpdGNoV2hlbi5wcm90b3R5cGUsIFwibmdTd2l0Y2hXaGVuXCIsIHtcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zd2l0Y2guX29uV2hlblZhbHVlQ2hhbmdlZCh0aGlzLl92YWx1ZSwgdmFsdWUsIHRoaXMuX3ZpZXcpO1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgTmdTd2l0Y2hXaGVuID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbWV0YWRhdGFfMS5EaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tuZy1zd2l0Y2gtd2hlbl0nLCBpbnB1dHM6IFsnbmdTd2l0Y2hXaGVuJ10gfSksXHJcbiAgICAgICAgX19wYXJhbSgyLCBkaV8xLkhvc3QoKSksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW2xpbmtlcl8xLlZpZXdDb250YWluZXJSZWYsIGxpbmtlcl8xLlRlbXBsYXRlUmVmLCBOZ1N3aXRjaF0pXHJcbiAgICBdLCBOZ1N3aXRjaFdoZW4pO1xyXG4gICAgcmV0dXJuIE5nU3dpdGNoV2hlbjtcclxufSkoKTtcclxuZXhwb3J0cy5OZ1N3aXRjaFdoZW4gPSBOZ1N3aXRjaFdoZW47XHJcbi8qKlxyXG4gKiBEZWZpbmVzIGEgZGVmYXVsdCBjYXNlIHN0YXRlbWVudC5cclxuICpcclxuICogRGVmYXVsdCBjYXNlIHN0YXRlbWVudHMgYXJlIGRpc3BsYXllZCB3aGVuIG5vIGBOZ1N3aXRjaFdoZW5gIG1hdGNoIHRoZSBgbmctc3dpdGNoYCB2YWx1ZS5cclxuICpcclxuICogRXhhbXBsZTpcclxuICpcclxuICogYGBgXHJcbiAqIDx0ZW1wbGF0ZSBuZy1zd2l0Y2gtZGVmYXVsdD4uLi48L3RlbXBsYXRlPlxyXG4gKiBgYGBcclxuICovXHJcbnZhciBOZ1N3aXRjaERlZmF1bHQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTmdTd2l0Y2hEZWZhdWx0KHZpZXdDb250YWluZXIsIHRlbXBsYXRlUmVmLCBzc3dpdGNoKSB7XHJcbiAgICAgICAgc3N3aXRjaC5fcmVnaXN0ZXJWaWV3KF9XSEVOX0RFRkFVTFQsIG5ldyBTd2l0Y2hWaWV3KHZpZXdDb250YWluZXIsIHRlbXBsYXRlUmVmKSk7XHJcbiAgICB9XHJcbiAgICBOZ1N3aXRjaERlZmF1bHQgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBtZXRhZGF0YV8xLkRpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW25nLXN3aXRjaC1kZWZhdWx0XScgfSksXHJcbiAgICAgICAgX19wYXJhbSgyLCBkaV8xLkhvc3QoKSksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW2xpbmtlcl8xLlZpZXdDb250YWluZXJSZWYsIGxpbmtlcl8xLlRlbXBsYXRlUmVmLCBOZ1N3aXRjaF0pXHJcbiAgICBdLCBOZ1N3aXRjaERlZmF1bHQpO1xyXG4gICAgcmV0dXJuIE5nU3dpdGNoRGVmYXVsdDtcclxufSkoKTtcclxuZXhwb3J0cy5OZ1N3aXRjaERlZmF1bHQgPSBOZ1N3aXRjaERlZmF1bHQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5nX3N3aXRjaC5qcy5tYXAiLCIndXNlIHN0cmljdCc7Ly8gVFMgZG9lcyBub3QgaGF2ZSBPYnNlcnZhYmxlc1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlX2xpc3RfZGlmZi5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgZG9tX2FkYXB0ZXJfMSA9IHJlcXVpcmUoJy4vZG9tX2FkYXB0ZXInKTtcclxudmFyIGdlbmVyaWNfYnJvd3Nlcl9hZGFwdGVyXzEgPSByZXF1aXJlKCcuL2dlbmVyaWNfYnJvd3Nlcl9hZGFwdGVyJyk7XHJcbnZhciBfYXR0clRvUHJvcE1hcCA9IHtcclxuICAgICdjbGFzcyc6ICdjbGFzc05hbWUnLFxyXG4gICAgJ2lubmVySHRtbCc6ICdpbm5lckhUTUwnLFxyXG4gICAgJ3JlYWRvbmx5JzogJ3JlYWRPbmx5JyxcclxuICAgICd0YWJpbmRleCc6ICd0YWJJbmRleCdcclxufTtcclxudmFyIERPTV9LRVlfTE9DQVRJT05fTlVNUEFEID0gMztcclxuLy8gTWFwIHRvIGNvbnZlcnQgc29tZSBrZXkgb3Iga2V5SWRlbnRpZmllciB2YWx1ZXMgdG8gd2hhdCB3aWxsIGJlIHJldHVybmVkIGJ5IGdldEV2ZW50S2V5XHJcbnZhciBfa2V5TWFwID0ge1xyXG4gICAgLy8gVGhlIGZvbGxvd2luZyB2YWx1ZXMgYXJlIGhlcmUgZm9yIGNyb3NzLWJyb3dzZXIgY29tcGF0aWJpbGl0eSBhbmQgdG8gbWF0Y2ggdGhlIFczQyBzdGFuZGFyZFxyXG4gICAgLy8gY2YgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLWtleS9cclxuICAgICdcXGInOiAnQmFja3NwYWNlJyxcclxuICAgICdcXHQnOiAnVGFiJyxcclxuICAgICdcXHg3Ric6ICdEZWxldGUnLFxyXG4gICAgJ1xceDFCJzogJ0VzY2FwZScsXHJcbiAgICAnRGVsJzogJ0RlbGV0ZScsXHJcbiAgICAnRXNjJzogJ0VzY2FwZScsXHJcbiAgICAnTGVmdCc6ICdBcnJvd0xlZnQnLFxyXG4gICAgJ1JpZ2h0JzogJ0Fycm93UmlnaHQnLFxyXG4gICAgJ1VwJzogJ0Fycm93VXAnLFxyXG4gICAgJ0Rvd24nOiAnQXJyb3dEb3duJyxcclxuICAgICdNZW51JzogJ0NvbnRleHRNZW51JyxcclxuICAgICdTY3JvbGwnOiAnU2Nyb2xsTG9jaycsXHJcbiAgICAnV2luJzogJ09TJ1xyXG59O1xyXG4vLyBUaGVyZSBpcyBhIGJ1ZyBpbiBDaHJvbWUgZm9yIG51bWVyaWMga2V5cGFkIGtleXM6XHJcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xNTU2NTRcclxuLy8gMSwgMiwgMyAuLi4gYXJlIHJlcG9ydGVkIGFzIEEsIEIsIEMgLi4uXHJcbnZhciBfY2hyb21lTnVtS2V5UGFkTWFwID0ge1xyXG4gICAgJ0EnOiAnMScsXHJcbiAgICAnQic6ICcyJyxcclxuICAgICdDJzogJzMnLFxyXG4gICAgJ0QnOiAnNCcsXHJcbiAgICAnRSc6ICc1JyxcclxuICAgICdGJzogJzYnLFxyXG4gICAgJ0cnOiAnNycsXHJcbiAgICAnSCc6ICc4JyxcclxuICAgICdJJzogJzknLFxyXG4gICAgJ0onOiAnKicsXHJcbiAgICAnSyc6ICcrJyxcclxuICAgICdNJzogJy0nLFxyXG4gICAgJ04nOiAnLicsXHJcbiAgICAnTyc6ICcvJyxcclxuICAgICdcXHg2MCc6ICcwJyxcclxuICAgICdcXHg5MCc6ICdOdW1Mb2NrJ1xyXG59O1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpyZXF1aXJlUGFyYW1ldGVyVHlwZSAqL1xyXG52YXIgQnJvd3NlckRvbUFkYXB0ZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEJyb3dzZXJEb21BZGFwdGVyLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQnJvd3NlckRvbUFkYXB0ZXIoKSB7XHJcbiAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAodGVtcGxhdGVIdG1sKSB7IHRocm93IG5ldyBFcnJvcihcInBhcnNlIG5vdCBpbXBsZW1lbnRlZFwiKTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLm1ha2VDdXJyZW50ID0gZnVuY3Rpb24gKCkgeyBkb21fYWRhcHRlcl8xLnNldFJvb3REb21BZGFwdGVyKG5ldyBCcm93c2VyRG9tQWRhcHRlcigpKTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5oYXNQcm9wZXJ0eSA9IGZ1bmN0aW9uIChlbGVtZW50LCBuYW1lKSB7IHJldHVybiBuYW1lIGluIGVsZW1lbnQ7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuc2V0UHJvcGVydHkgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbHVlKSB7IGVsW25hbWVdID0gdmFsdWU7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiAoZWwsIG5hbWUpIHsgcmV0dXJuIGVsW25hbWVdOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmludm9rZSA9IGZ1bmN0aW9uIChlbCwgbWV0aG9kTmFtZSwgYXJncykge1xyXG4gICAgICAgIGVsW21ldGhvZE5hbWVdLmFwcGx5KGVsLCBhcmdzKTtcclxuICAgIH07XHJcbiAgICAvLyBUT0RPKHRib3NjaCk6IG1vdmUgdGhpcyBpbnRvIGEgc2VwYXJhdGUgZW52aXJvbm1lbnQgY2xhc3Mgb25jZSB3ZSBoYXZlIGl0XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUubG9nRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICBpZiAod2luZG93LmNvbnNvbGUuZXJyb3IpIHtcclxuICAgICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uIChlcnJvcikgeyB3aW5kb3cuY29uc29sZS5sb2coZXJyb3IpOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmxvZ0dyb3VwID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlLmdyb3VwKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmdyb3VwKGVycm9yKTtcclxuICAgICAgICAgICAgdGhpcy5sb2dFcnJvcihlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB3aW5kb3cuY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUubG9nR3JvdXBFbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlLmdyb3VwRW5kKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmdyb3VwRW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUsIFwiYXR0clRvUHJvcE1hcFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfYXR0clRvUHJvcE1hcDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3IgPSBmdW5jdGlvbiAoZWwsIHNlbGVjdG9yKSB7IHJldHVybiBlbC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsID0gZnVuY3Rpb24gKGVsLCBzZWxlY3RvcikgeyByZXR1cm4gZWwucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZWwsIGV2dCwgbGlzdGVuZXIpIHsgZWwuYWRkRXZlbnRMaXN0ZW5lcihldnQsIGxpc3RlbmVyLCBmYWxzZSk7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUub25BbmRDYW5jZWwgPSBmdW5jdGlvbiAoZWwsIGV2dCwgbGlzdGVuZXIpIHtcclxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2dCwgbGlzdGVuZXIsIGZhbHNlKTtcclxuICAgICAgICAvLyBOZWVkZWQgdG8gZm9sbG93IERhcnQncyBzdWJzY3JpcHRpb24gc2VtYW50aWMsIHVudGlsIGZpeCBvZlxyXG4gICAgICAgIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvZGFydC9pc3N1ZXMvZGV0YWlsP2lkPTE3NDA2XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnQsIGxpc3RlbmVyLCBmYWxzZSk7IH07XHJcbiAgICB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAoZWwsIGV2dCkgeyBlbC5kaXNwYXRjaEV2ZW50KGV2dCk7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuY3JlYXRlTW91c2VFdmVudCA9IGZ1bmN0aW9uIChldmVudFR5cGUpIHtcclxuICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnQnKTtcclxuICAgICAgICBldnQuaW5pdEV2ZW50KGV2ZW50VHlwZSwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIGV2dDtcclxuICAgIH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuY3JlYXRlRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnRUeXBlKSB7XHJcbiAgICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xyXG4gICAgICAgIGV2dC5pbml0RXZlbnQoZXZlbnRUeXBlLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gZXZ0O1xyXG4gICAgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBldnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICAgIH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuaXNQcmV2ZW50ZWQgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgcmV0dXJuIGV2dC5kZWZhdWx0UHJldmVudGVkIHx8IGxhbmdfMS5pc1ByZXNlbnQoZXZ0LnJldHVyblZhbHVlKSAmJiAhZXZ0LnJldHVyblZhbHVlO1xyXG4gICAgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5nZXRJbm5lckhUTUwgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVsLmlubmVySFRNTDsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5nZXRPdXRlckhUTUwgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVsLm91dGVySFRNTDsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5ub2RlTmFtZSA9IGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBub2RlLm5vZGVOYW1lOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLm5vZGVWYWx1ZSA9IGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBub2RlLm5vZGVWYWx1ZTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS50eXBlID0gZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIG5vZGUudHlwZTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5jb250ZW50ID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICBpZiAodGhpcy5oYXNQcm9wZXJ0eShub2RlLCBcImNvbnRlbnRcIikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5vZGUuY29udGVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZmlyc3RDaGlsZCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwuZmlyc3RDaGlsZDsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5uZXh0U2libGluZyA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwubmV4dFNpYmxpbmc7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUucGFyZW50RWxlbWVudCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwucGFyZW50Tm9kZTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5jaGlsZE5vZGVzID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlbC5jaGlsZE5vZGVzOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmNoaWxkTm9kZXNBc0xpc3QgPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICB2YXIgY2hpbGROb2RlcyA9IGVsLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgdmFyIHJlcyA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jcmVhdGVGaXhlZFNpemUoY2hpbGROb2Rlcy5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXNbaV0gPSBjaGlsZE5vZGVzW2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5jbGVhck5vZGVzID0gZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgd2hpbGUgKGVsLmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5hcHBlbmRDaGlsZCA9IGZ1bmN0aW9uIChlbCwgbm9kZSkgeyBlbC5hcHBlbmRDaGlsZChub2RlKTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIChlbCwgbm9kZSkgeyBlbC5yZW1vdmVDaGlsZChub2RlKTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5yZXBsYWNlQ2hpbGQgPSBmdW5jdGlvbiAoZWwsIG5ld0NoaWxkLCBvbGRDaGlsZCkgeyBlbC5yZXBsYWNlQ2hpbGQobmV3Q2hpbGQsIG9sZENoaWxkKTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgIH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlID0gZnVuY3Rpb24gKGVsLCBub2RlKSB7IGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIGVsKTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5pbnNlcnRBbGxCZWZvcmUgPSBmdW5jdGlvbiAoZWwsIG5vZGVzKSB7IG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG4pIHsgcmV0dXJuIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG4sIGVsKTsgfSk7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuaW5zZXJ0QWZ0ZXIgPSBmdW5jdGlvbiAoZWwsIG5vZGUpIHsgZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgZWwubmV4dFNpYmxpbmcpOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLnNldElubmVySFRNTCA9IGZ1bmN0aW9uIChlbCwgdmFsdWUpIHsgZWwuaW5uZXJIVE1MID0gdmFsdWU7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0VGV4dCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwudGV4dENvbnRlbnQ7IH07XHJcbiAgICAvLyBUT0RPKHZpY2IpOiByZW1vdmVkIEVsZW1lbnQgdHlwZSBiZWNhdXNlIGl0IGRvZXMgbm90IHN1cHBvcnQgU3R5bGVFbGVtZW50XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuc2V0VGV4dCA9IGZ1bmN0aW9uIChlbCwgdmFsdWUpIHsgZWwudGV4dENvbnRlbnQgPSB2YWx1ZTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwudmFsdWU7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiAoZWwsIHZhbHVlKSB7IGVsLnZhbHVlID0gdmFsdWU7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0Q2hlY2tlZCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwuY2hlY2tlZDsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5zZXRDaGVja2VkID0gZnVuY3Rpb24gKGVsLCB2YWx1ZSkgeyBlbC5jaGVja2VkID0gdmFsdWU7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuY3JlYXRlQ29tbWVudCA9IGZ1bmN0aW9uICh0ZXh0KSB7IHJldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmNyZWF0ZVRlbXBsYXRlID0gZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgICAgICB2YXIgdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XHJcbiAgICAgICAgdC5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKHRhZ05hbWUsIGRvYykge1xyXG4gICAgICAgIGlmIChkb2MgPT09IHZvaWQgMCkgeyBkb2MgPSBkb2N1bWVudDsgfVxyXG4gICAgICAgIHJldHVybiBkb2MuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcclxuICAgIH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuY3JlYXRlVGV4dE5vZGUgPSBmdW5jdGlvbiAodGV4dCwgZG9jKSB7XHJcbiAgICAgICAgaWYgKGRvYyA9PT0gdm9pZCAwKSB7IGRvYyA9IGRvY3VtZW50OyB9XHJcbiAgICAgICAgcmV0dXJuIGRvYy5jcmVhdGVUZXh0Tm9kZSh0ZXh0KTtcclxuICAgIH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuY3JlYXRlU2NyaXB0VGFnID0gZnVuY3Rpb24gKGF0dHJOYW1lLCBhdHRyVmFsdWUsIGRvYykge1xyXG4gICAgICAgIGlmIChkb2MgPT09IHZvaWQgMCkgeyBkb2MgPSBkb2N1bWVudDsgfVxyXG4gICAgICAgIHZhciBlbCA9IGRvYy5jcmVhdGVFbGVtZW50KCdTQ1JJUFQnKTtcclxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJWYWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIGVsO1xyXG4gICAgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5jcmVhdGVTdHlsZUVsZW1lbnQgPSBmdW5jdGlvbiAoY3NzLCBkb2MpIHtcclxuICAgICAgICBpZiAoZG9jID09PSB2b2lkIDApIHsgZG9jID0gZG9jdW1lbnQ7IH1cclxuICAgICAgICB2YXIgc3R5bGUgPSBkb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcclxuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHN0eWxlLCB0aGlzLmNyZWF0ZVRleHROb2RlKGNzcykpO1xyXG4gICAgICAgIHJldHVybiBzdHlsZTtcclxuICAgIH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuY3JlYXRlU2hhZG93Um9vdCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwuY3JlYXRlU2hhZG93Um9vdCgpOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmdldFNoYWRvd1Jvb3QgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVsLnNoYWRvd1Jvb3Q7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0SG9zdCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwuaG9zdDsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBub2RlLmNsb25lTm9kZSh0cnVlKTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gZnVuY3Rpb24gKGVsZW1lbnQsIG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKG5hbWUpO1xyXG4gICAgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUobmFtZSk7XHJcbiAgICB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmNsYXNzTGlzdCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlbGVtZW50LmNsYXNzTGlzdCwgMCk7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuYWRkQ2xhc3MgPSBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NuYW1lKSB7IGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc25hbWUpOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLnJlbW92ZUNsYXNzID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNsYXNzbmFtZSkgeyBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NuYW1lKTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5oYXNDbGFzcyA9IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc25hbWUpIHsgcmV0dXJuIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzbmFtZSk7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuc2V0U3R5bGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgc3R5bGVuYW1lLCBzdHlsZXZhbHVlKSB7XHJcbiAgICAgICAgZWxlbWVudC5zdHlsZVtzdHlsZW5hbWVdID0gc3R5bGV2YWx1ZTtcclxuICAgIH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUucmVtb3ZlU3R5bGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgc3R5bGVuYW1lKSB7IGVsZW1lbnQuc3R5bGVbc3R5bGVuYW1lXSA9IG51bGw7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0U3R5bGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgc3R5bGVuYW1lKSB7IHJldHVybiBlbGVtZW50LnN0eWxlW3N0eWxlbmFtZV07IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUudGFnTmFtZSA9IGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50LnRhZ05hbWU7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuYXR0cmlidXRlTWFwID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgcmVzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHZhciBlbEF0dHJzID0gZWxlbWVudC5hdHRyaWJ1dGVzO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxBdHRycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgYXR0cmliID0gZWxBdHRyc1tpXTtcclxuICAgICAgICAgICAgcmVzLnNldChhdHRyaWIubmFtZSwgYXR0cmliLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuaGFzQXR0cmlidXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGF0dHJpYnV0ZSkgeyByZXR1cm4gZWxlbWVudC5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5nZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgYXR0cmlidXRlKSB7IHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLnNldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBuYW1lLCB2YWx1ZSkgeyBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGF0dHJpYnV0ZSkgeyBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLnRlbXBsYXRlQXdhcmVSb290ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiB0aGlzLmlzVGVtcGxhdGVFbGVtZW50KGVsKSA/IHRoaXMuY29udGVudChlbCkgOiBlbDsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5jcmVhdGVIdG1sRG9jdW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgnZmFrZVRpdGxlJyk7XHJcbiAgICB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmRlZmF1bHREb2MgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudDsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHRvcDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwLCByaWdodDogMCwgd2lkdGg6IDAsIGhlaWdodDogMCB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0VGl0bGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC50aXRsZTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5zZXRUaXRsZSA9IGZ1bmN0aW9uIChuZXdUaXRsZSkgeyBkb2N1bWVudC50aXRsZSA9IG5ld1RpdGxlIHx8ICcnOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmVsZW1lbnRNYXRjaGVzID0gZnVuY3Rpb24gKG4sIHNlbGVjdG9yKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBmYWxzZTtcclxuICAgICAgICBpZiAobiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChuLm1hdGNoZXMpIHtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBuLm1hdGNoZXMoc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG4ubXNNYXRjaGVzU2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBuLm1zTWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChuLndlYmtpdE1hdGNoZXNTZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlcyA9IG4ud2Via2l0TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWF0Y2hlcztcclxuICAgIH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuaXNUZW1wbGF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICByZXR1cm4gZWwgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBlbC5ub2RlTmFtZSA9PSBcIlRFTVBMQVRFXCI7XHJcbiAgICB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmlzVGV4dE5vZGUgPSBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREU7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuaXNDb21tZW50Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBub2RlLm5vZGVUeXBlID09PSBOb2RlLkNPTU1FTlRfTk9ERTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5pc0VsZW1lbnROb2RlID0gZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmhhc1NoYWRvd1Jvb3QgPSBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIGxhbmdfMS5pc1ByZXNlbnQobm9kZS5zaGFkb3dSb290KTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5pc1NoYWRvd1Jvb3QgPSBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQ7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuaW1wb3J0SW50b0RvYyA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgdmFyIHRvSW1wb3J0ID0gbm9kZTtcclxuICAgICAgICBpZiAodGhpcy5pc1RlbXBsYXRlRWxlbWVudChub2RlKSkge1xyXG4gICAgICAgICAgICB0b0ltcG9ydCA9IHRoaXMuY29udGVudChub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmltcG9ydE5vZGUodG9JbXBvcnQsIHRydWUpO1xyXG4gICAgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5hZG9wdE5vZGUgPSBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gZG9jdW1lbnQuYWRvcHROb2RlKG5vZGUpOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmlzUGFnZVJ1bGUgPSBmdW5jdGlvbiAocnVsZSkgeyByZXR1cm4gcnVsZS50eXBlID09PSBDU1NSdWxlLlBBR0VfUlVMRTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5pc1N0eWxlUnVsZSA9IGZ1bmN0aW9uIChydWxlKSB7IHJldHVybiBydWxlLnR5cGUgPT09IENTU1J1bGUuU1RZTEVfUlVMRTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5pc01lZGlhUnVsZSA9IGZ1bmN0aW9uIChydWxlKSB7IHJldHVybiBydWxlLnR5cGUgPT09IENTU1J1bGUuTUVESUFfUlVMRTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5pc0tleWZyYW1lc1J1bGUgPSBmdW5jdGlvbiAocnVsZSkgeyByZXR1cm4gcnVsZS50eXBlID09PSBDU1NSdWxlLktFWUZSQU1FU19SVUxFOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmdldEhyZWYgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVsLmhyZWY7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0RXZlbnRLZXkgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIga2V5ID0gZXZlbnQua2V5O1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhrZXkpKSB7XHJcbiAgICAgICAgICAgIGtleSA9IGV2ZW50LmtleUlkZW50aWZpZXI7XHJcbiAgICAgICAgICAgIC8vIGtleUlkZW50aWZpZXIgaXMgZGVmaW5lZCBpbiB0aGUgb2xkIGRyYWZ0IG9mIERPTSBMZXZlbCAzIEV2ZW50cyBpbXBsZW1lbnRlZCBieSBDaHJvbWUgYW5kXHJcbiAgICAgICAgICAgIC8vIFNhZmFyaVxyXG4gICAgICAgICAgICAvLyBjZlxyXG4gICAgICAgICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA3L1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDA3MTIyMS9ldmVudHMuaHRtbCNFdmVudHMtS2V5Ym9hcmRFdmVudHMtSW50ZXJmYWNlc1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdVbmlkZW50aWZpZWQnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnVSsnKSkge1xyXG4gICAgICAgICAgICAgICAga2V5ID0gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChrZXkuc3Vic3RyaW5nKDIpLCAxNikpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmxvY2F0aW9uID09PSBET01fS0VZX0xPQ0FUSU9OX05VTVBBRCAmJiBfY2hyb21lTnVtS2V5UGFkTWFwLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBhIGJ1ZyBpbiBDaHJvbWUgZm9yIG51bWVyaWMga2V5cGFkIGtleXM6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTE1NTY1NFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIDEsIDIsIDMgLi4uIGFyZSByZXBvcnRlZCBhcyBBLCBCLCBDIC4uLlxyXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IF9jaHJvbWVOdW1LZXlQYWRNYXBba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoX2tleU1hcC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgIGtleSA9IF9rZXlNYXBba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGtleTtcclxuICAgIH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0R2xvYmFsRXZlbnRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgaWYgKHRhcmdldCA9PSBcIndpbmRvd1wiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3c7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRhcmdldCA9PSBcImRvY3VtZW50XCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0YXJnZXQgPT0gXCJib2R5XCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5nZXRIaXN0b3J5ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gd2luZG93Lmhpc3Rvcnk7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0TG9jYXRpb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3cubG9jYXRpb247IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0QmFzZUhyZWYgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGhyZWYgPSBnZXRCYXNlRWxlbWVudEhyZWYoKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoaHJlZikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZWxhdGl2ZVBhdGgoaHJlZik7XHJcbiAgICB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLnJlc2V0QmFzZUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7IGJhc2VFbGVtZW50ID0gbnVsbDsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5nZXRVc2VyQWdlbnQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5zZXREYXRhID0gZnVuY3Rpb24gKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ2RhdGEtJyArIG5hbWUsIHZhbHVlKTtcclxuICAgIH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uIChlbGVtZW50LCBuYW1lKSB7IHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZShlbGVtZW50LCAnZGF0YS0nICsgbmFtZSk7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0Q29tcHV0ZWRTdHlsZSA9IGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpOyB9O1xyXG4gICAgLy8gVE9ETyh0Ym9zY2gpOiBtb3ZlIHRoaXMgaW50byBhIHNlcGFyYXRlIGVudmlyb25tZW50IGNsYXNzIG9uY2Ugd2UgaGF2ZSBpdFxyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLnNldEdsb2JhbFZhciA9IGZ1bmN0aW9uIChwYXRoLCB2YWx1ZSkgeyBsYW5nXzEuc2V0VmFsdWVPblBhdGgobGFuZ18xLmdsb2JhbCwgcGF0aCwgdmFsdWUpOyB9O1xyXG4gICAgQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykgeyByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7IH07XHJcbiAgICBCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoaWQpIHsgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTsgfTtcclxuICAgIEJyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5wZXJmb3JtYW5jZU5vdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBwZXJmb3JtYW5jZS5ub3coKSBpcyBub3QgYXZhaWxhYmxlIGluIGFsbCBicm93c2Vycywgc2VlXHJcbiAgICAgICAgLy8gaHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9cGVyZm9ybWFuY2Uubm93XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQod2luZG93LnBlcmZvcm1hbmNlKSAmJiBsYW5nXzEuaXNQcmVzZW50KHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbGFuZ18xLkRhdGVXcmFwcGVyLnRvTWlsbGlzKGxhbmdfMS5EYXRlV3JhcHBlci5ub3coKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBCcm93c2VyRG9tQWRhcHRlcjtcclxufSkoZ2VuZXJpY19icm93c2VyX2FkYXB0ZXJfMS5HZW5lcmljQnJvd3NlckRvbUFkYXB0ZXIpO1xyXG5leHBvcnRzLkJyb3dzZXJEb21BZGFwdGVyID0gQnJvd3NlckRvbUFkYXB0ZXI7XHJcbnZhciBiYXNlRWxlbWVudCA9IG51bGw7XHJcbmZ1bmN0aW9uIGdldEJhc2VFbGVtZW50SHJlZigpIHtcclxuICAgIGlmIChsYW5nXzEuaXNCbGFuayhiYXNlRWxlbWVudCkpIHtcclxuICAgICAgICBiYXNlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoYmFzZUVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBiYXNlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcclxufVxyXG4vLyBiYXNlZCBvbiB1cmxVdGlscy5qcyBpbiBBbmd1bGFySlMgMVxyXG52YXIgdXJsUGFyc2luZ05vZGUgPSBudWxsO1xyXG5mdW5jdGlvbiByZWxhdGl2ZVBhdGgodXJsKSB7XHJcbiAgICBpZiAobGFuZ18xLmlzQmxhbmsodXJsUGFyc2luZ05vZGUpKSB7XHJcbiAgICAgICAgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICAgIH1cclxuICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIHVybCk7XHJcbiAgICByZXR1cm4gKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/IHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcclxuICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyX2FkYXB0ZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG5mdW5jdGlvbiBzZXRSb290RG9tQWRhcHRlcihhZGFwdGVyKSB7XHJcbiAgICBpZiAobGFuZ18xLmlzQmxhbmsoZXhwb3J0cy5ET00pKSB7XHJcbiAgICAgICAgZXhwb3J0cy5ET00gPSBhZGFwdGVyO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuc2V0Um9vdERvbUFkYXB0ZXIgPSBzZXRSb290RG9tQWRhcHRlcjtcclxuLyogdHNsaW50OmRpc2FibGU6cmVxdWlyZVBhcmFtZXRlclR5cGUgKi9cclxuLyoqXHJcbiAqIFByb3ZpZGVzIERPTSBvcGVyYXRpb25zIGluIGFuIGVudmlyb25tZW50LWFnbm9zdGljIHdheS5cclxuICovXHJcbnZhciBEb21BZGFwdGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERvbUFkYXB0ZXIoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRG9tQWRhcHRlcjtcclxufSkoKTtcclxuZXhwb3J0cy5Eb21BZGFwdGVyID0gRG9tQWRhcHRlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9tX2FkYXB0ZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGRvbV9hZGFwdGVyXzEgPSByZXF1aXJlKCcuL2RvbV9hZGFwdGVyJyk7XHJcbnZhciB4aHJfaW1wbF8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY29tcGlsZXIveGhyX2ltcGwnKTtcclxuLyoqXHJcbiAqIFByb3ZpZGVzIERPTSBvcGVyYXRpb25zIGluIGFueSBicm93c2VyIGVudmlyb25tZW50LlxyXG4gKi9cclxudmFyIEdlbmVyaWNCcm93c2VyRG9tQWRhcHRlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoR2VuZXJpY0Jyb3dzZXJEb21BZGFwdGVyLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gR2VuZXJpY0Jyb3dzZXJEb21BZGFwdGVyKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uUHJlZml4ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl90cmFuc2l0aW9uRW5kID0gbnVsbDtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuY3JlYXRlRWxlbWVudCgnZGl2JywgdGhpcy5kZWZhdWx0RG9jKCkpO1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLmdldFN0eWxlKGVsZW1lbnQsICdhbmltYXRpb25OYW1lJykpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25QcmVmaXggPSAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBkb21QcmVmaXhlcyA9IFsnV2Via2l0JywgJ01veicsICdPJywgJ21zJ107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvbVByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5nZXRTdHlsZShlbGVtZW50LCBkb21QcmVmaXhlc1tpXSArICdBbmltYXRpb25OYW1lJykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvblByZWZpeCA9ICctJyArIGxhbmdfMS5TdHJpbmdXcmFwcGVyLnRvTG93ZXJDYXNlKGRvbVByZWZpeGVzW2ldKSArICctJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB0cmFuc0VuZEV2ZW50TmFtZXMgPSB7XHJcbiAgICAgICAgICAgICAgICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXHJcbiAgICAgICAgICAgICAgICBNb3pUcmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXHJcbiAgICAgICAgICAgICAgICBPVHJhbnNpdGlvbjogJ29UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kJyxcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5mb3JFYWNoKHRyYW5zRW5kRXZlbnROYW1lcywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KF90aGlzLmdldFN0eWxlKGVsZW1lbnQsIGtleSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RyYW5zaXRpb25FbmQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvblByZWZpeCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb25FbmQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIEdlbmVyaWNCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0WEhSID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geGhyX2ltcGxfMS5YSFJJbXBsOyB9O1xyXG4gICAgR2VuZXJpY0Jyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5nZXREaXN0cmlidXRlZE5vZGVzID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlbC5nZXREaXN0cmlidXRlZE5vZGVzKCk7IH07XHJcbiAgICBHZW5lcmljQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLnJlc29sdmVBbmRTZXRIcmVmID0gZnVuY3Rpb24gKGVsLCBiYXNlVXJsLCBocmVmKSB7XHJcbiAgICAgICAgZWwuaHJlZiA9IGhyZWYgPT0gbnVsbCA/IGJhc2VVcmwgOiBiYXNlVXJsICsgJy8uLi8nICsgaHJlZjtcclxuICAgIH07XHJcbiAgICBHZW5lcmljQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLmNzc1RvUnVsZXMgPSBmdW5jdGlvbiAoY3NzKSB7XHJcbiAgICAgICAgdmFyIHN0eWxlID0gdGhpcy5jcmVhdGVTdHlsZUVsZW1lbnQoY3NzKTtcclxuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuZGVmYXVsdERvYygpLmhlYWQsIHN0eWxlKTtcclxuICAgICAgICB2YXIgcnVsZXMgPSBbXTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChzdHlsZS5zaGVldCkpIHtcclxuICAgICAgICAgICAgLy8gVE9ETyhzb3J2ZWxsKTogRmlyZWZveCB0aHJvd3Mgd2hlbiBhY2Nlc3NpbmcgdGhlIHJ1bGVzIG9mIGEgc3R5bGVzaGVldFxyXG4gICAgICAgICAgICAvLyB3aXRoIGFuIEBpbXBvcnRcclxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjI1MDEzXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3UnVsZXMgPSBzdHlsZS5zaGVldC5jc3NSdWxlcztcclxuICAgICAgICAgICAgICAgIHJ1bGVzID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNyZWF0ZUZpeGVkU2l6ZShyYXdSdWxlcy5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdSdWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJ1bGVzW2ldID0gcmF3UnVsZXNbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZW1vdmUoc3R5bGUpO1xyXG4gICAgICAgIHJldHVybiBydWxlcztcclxuICAgIH07XHJcbiAgICBHZW5lcmljQnJvd3NlckRvbUFkYXB0ZXIucHJvdG90eXBlLnN1cHBvcnRzRE9NRXZlbnRzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcclxuICAgIEdlbmVyaWNCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuc3VwcG9ydHNOYXRpdmVTaGFkb3dET00gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGxhbmdfMS5pc0Z1bmN0aW9uKHRoaXMuZGVmYXVsdERvYygpLmJvZHkuY3JlYXRlU2hhZG93Um9vdCk7XHJcbiAgICB9O1xyXG4gICAgR2VuZXJpY0Jyb3dzZXJEb21BZGFwdGVyLnByb3RvdHlwZS5zdXBwb3J0c1VucHJlZml4ZWRDc3NBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQodGhpcy5kZWZhdWx0RG9jKCkuYm9keS5zdHlsZSkgJiZcclxuICAgICAgICAgICAgbGFuZ18xLmlzUHJlc2VudCh0aGlzLmRlZmF1bHREb2MoKS5ib2R5LnN0eWxlLmFuaW1hdGlvbk5hbWUpO1xyXG4gICAgfTtcclxuICAgIEdlbmVyaWNCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0QW5pbWF0aW9uUHJlZml4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHRoaXMuX2FuaW1hdGlvblByZWZpeCkgPyB0aGlzLl9hbmltYXRpb25QcmVmaXggOiBcIlwiO1xyXG4gICAgfTtcclxuICAgIEdlbmVyaWNCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuZ2V0VHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQodGhpcy5fdHJhbnNpdGlvbkVuZCkgPyB0aGlzLl90cmFuc2l0aW9uRW5kIDogXCJcIjsgfTtcclxuICAgIEdlbmVyaWNCcm93c2VyRG9tQWRhcHRlci5wcm90b3R5cGUuc3VwcG9ydHNBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQodGhpcy5fYW5pbWF0aW9uUHJlZml4KSAmJiBsYW5nXzEuaXNQcmVzZW50KHRoaXMuX3RyYW5zaXRpb25FbmQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBHZW5lcmljQnJvd3NlckRvbUFkYXB0ZXI7XHJcbn0pKGRvbV9hZGFwdGVyXzEuRG9tQWRhcHRlcik7XHJcbmV4cG9ydHMuR2VuZXJpY0Jyb3dzZXJEb21BZGFwdGVyID0gR2VuZXJpY0Jyb3dzZXJEb21BZGFwdGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmljX2Jyb3dzZXJfYWRhcHRlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7Ly8gUHVibGljIEFQSSBmb3IgRmFjYWRlXHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCcuL2ZhY2FkZS9sYW5nJyk7XHJcbmV4cG9ydHMuVHlwZSA9IGxhbmdfMS5UeXBlO1xyXG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoJy4vZmFjYWRlL2FzeW5jJyk7XHJcbmV4cG9ydHMuT2JzZXJ2YWJsZSA9IGFzeW5jXzEuT2JzZXJ2YWJsZTtcclxuZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSBhc3luY18xLkV2ZW50RW1pdHRlcjtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJy4vZmFjYWRlL2V4Y2VwdGlvbnMnKTtcclxuZXhwb3J0cy5XcmFwcGVkRXhjZXB0aW9uID0gZXhjZXB0aW9uc18xLldyYXBwZWRFeGNlcHRpb247XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZhY2FkZS5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBwcm9taXNlXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvcHJvbWlzZScpO1xyXG5leHBvcnRzLlByb21pc2VXcmFwcGVyID0gcHJvbWlzZV8xLlByb21pc2VXcmFwcGVyO1xyXG5leHBvcnRzLlByb21pc2UgPSBwcm9taXNlXzEuUHJvbWlzZTtcclxuLy8gVE9ETyhqZWZmYmNyb3NzKTogdXNlIEVTNiBpbXBvcnQgb25jZSB0eXBpbmdzIGFyZSBhdmFpbGFibGVcclxudmFyIFN1YmplY3QgPSByZXF1aXJlKCdAcmVhY3RpdmV4L3J4anMvZGlzdC9janMvU3ViamVjdCcpO1xyXG52YXIgVGltZXJXcmFwcGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRpbWVyV3JhcHBlcigpIHtcclxuICAgIH1cclxuICAgIFRpbWVyV3JhcHBlci5zZXRUaW1lb3V0ID0gZnVuY3Rpb24gKGZuLCBtaWxsaXMpIHtcclxuICAgICAgICByZXR1cm4gbGFuZ18xLmdsb2JhbC5zZXRUaW1lb3V0KGZuLCBtaWxsaXMpO1xyXG4gICAgfTtcclxuICAgIFRpbWVyV3JhcHBlci5jbGVhclRpbWVvdXQgPSBmdW5jdGlvbiAoaWQpIHsgbGFuZ18xLmdsb2JhbC5jbGVhclRpbWVvdXQoaWQpOyB9O1xyXG4gICAgVGltZXJXcmFwcGVyLnNldEludGVydmFsID0gZnVuY3Rpb24gKGZuLCBtaWxsaXMpIHtcclxuICAgICAgICByZXR1cm4gbGFuZ18xLmdsb2JhbC5zZXRJbnRlcnZhbChmbiwgbWlsbGlzKTtcclxuICAgIH07XHJcbiAgICBUaW1lcldyYXBwZXIuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uIChpZCkgeyBsYW5nXzEuZ2xvYmFsLmNsZWFySW50ZXJ2YWwoaWQpOyB9O1xyXG4gICAgcmV0dXJuIFRpbWVyV3JhcHBlcjtcclxufSkoKTtcclxuZXhwb3J0cy5UaW1lcldyYXBwZXIgPSBUaW1lcldyYXBwZXI7XHJcbnZhciBPYnNlcnZhYmxlV3JhcHBlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlV3JhcHBlcigpIHtcclxuICAgIH1cclxuICAgIC8vIFRPRE8odnNhdmtpbik6IHdoZW4gd2UgdXNlIHJ4bmV4dCwgdHJ5IGluZmVycmluZyB0aGUgZ2VuZXJpYyB0eXBlIGZyb20gdGhlIGZpcnN0IGFyZ1xyXG4gICAgT2JzZXJ2YWJsZVdyYXBwZXIuc3Vic2NyaWJlID0gZnVuY3Rpb24gKGVtaXR0ZXIsIG9uTmV4dCwgb25UaHJvdywgb25SZXR1cm4pIHtcclxuICAgICAgICBpZiAob25UaHJvdyA9PT0gdm9pZCAwKSB7IG9uVGhyb3cgPSBudWxsOyB9XHJcbiAgICAgICAgaWYgKG9uUmV0dXJuID09PSB2b2lkIDApIHsgb25SZXR1cm4gPSBudWxsOyB9XHJcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIub2JzZXJ2ZXIoeyBuZXh0OiBvbk5leHQsIHRocm93OiBvblRocm93LCByZXR1cm46IG9uUmV0dXJuIH0pO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGVXcmFwcGVyLmlzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChvYnMpIHsgcmV0dXJuIG9icyBpbnN0YW5jZW9mIE9ic2VydmFibGU7IH07XHJcbiAgICBPYnNlcnZhYmxlV3JhcHBlci5kaXNwb3NlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikgeyBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgfTtcclxuICAgIE9ic2VydmFibGVXcmFwcGVyLmNhbGxOZXh0ID0gZnVuY3Rpb24gKGVtaXR0ZXIsIHZhbHVlKSB7IGVtaXR0ZXIubmV4dCh2YWx1ZSk7IH07XHJcbiAgICBPYnNlcnZhYmxlV3JhcHBlci5jYWxsVGhyb3cgPSBmdW5jdGlvbiAoZW1pdHRlciwgZXJyb3IpIHsgZW1pdHRlci50aHJvdyhlcnJvcik7IH07XHJcbiAgICBPYnNlcnZhYmxlV3JhcHBlci5jYWxsUmV0dXJuID0gZnVuY3Rpb24gKGVtaXR0ZXIpIHsgZW1pdHRlci5yZXR1cm4obnVsbCk7IH07XHJcbiAgICByZXR1cm4gT2JzZXJ2YWJsZVdyYXBwZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuT2JzZXJ2YWJsZVdyYXBwZXIgPSBPYnNlcnZhYmxlV3JhcHBlcjtcclxuLy8gVE9ETzogdnNhdmtpbiBjaGFuZ2UgdG8gaW50ZXJmYWNlXHJcbnZhciBPYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoKSB7XHJcbiAgICB9XHJcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5vYnNlcnZlciA9IGZ1bmN0aW9uIChnZW5lcmF0b3IpIHsgcmV0dXJuIG51bGw7IH07XHJcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcclxufSkoKTtcclxuZXhwb3J0cy5PYnNlcnZhYmxlID0gT2JzZXJ2YWJsZTtcclxuLyoqXHJcbiAqIFVzZSBieSBkaXJlY3RpdmVzIGFuZCBjb21wb25lbnRzIHRvIGVtaXQgY3VzdG9tIEV2ZW50cy5cclxuICpcclxuICogIyMgRXhhbXBsZXNcclxuICpcclxuICogSW4gdGhlIGZvbGxvd2luZyBleGFtcGxlLCBgWmlwcHlgIGFsdGVybmF0aXZlbHkgZW1pdHMgYG9wZW5gIGFuZCBgY2xvc2VgIGV2ZW50cyB3aGVuIGl0c1xyXG4gKiB0aXRsZSBnZXRzIGNsaWNrZWQ6XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ3ppcHB5JyxcclxuICogICB0ZW1wbGF0ZTogYFxyXG4gKiAgIDxkaXYgY2xhc3M9XCJ6aXBweVwiPlxyXG4gKiAgICAgPGRpdiAoY2xpY2spPVwidG9nZ2xlKClcIj5Ub2dnbGU8L2Rpdj5cclxuICogICAgIDxkaXYgW2hpZGRlbl09XCIhdmlzaWJsZVwiPlxyXG4gKiAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAqICAgICA8L2Rpdj5cclxuICogIDwvZGl2PmB9KVxyXG4gKiBleHBvcnQgY2xhc3MgWmlwcHkge1xyXG4gKiAgIHZpc2libGU6IGJvb2xlYW4gPSB0cnVlO1xyXG4gKiAgIEBPdXRwdXQoKSBvcGVuOiBFdmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAqICAgQE91dHB1dCgpIGNsb3NlOiBFdmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAqXHJcbiAqICAgdG9nZ2xlKCkge1xyXG4gKiAgICAgdGhpcy52aXNpYmxlID0gIXRoaXMudmlzaWJsZTtcclxuICogICAgIGlmICh0aGlzLnZpc2libGUpIHtcclxuICogICAgICAgdGhpcy5vcGVuLm5leHQobnVsbCk7XHJcbiAqICAgICB9IGVsc2Uge1xyXG4gKiAgICAgICB0aGlzLmNsb3NlLm5leHQobnVsbCk7XHJcbiAqICAgICB9XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBVc2UgUnguT2JzZXJ2YWJsZSBidXQgcHJvdmlkZXMgYW4gYWRhcHRlciB0byBtYWtlIGl0IHdvcmsgYXMgc3BlY2lmaWVkIGhlcmU6XHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qaHVzYWluL29ic2VydmFibGUtc3BlY1xyXG4gKlxyXG4gKiBPbmNlIGEgcmVmZXJlbmNlIGltcGxlbWVudGF0aW9uIG9mIHRoZSBzcGVjIGlzIGF2YWlsYWJsZSwgc3dpdGNoIHRvIGl0LlxyXG4gKi9cclxudmFyIEV2ZW50RW1pdHRlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRXZlbnRFbWl0dGVyLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xyXG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9zdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcclxuICAgIH1cclxuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub2JzZXJ2ZXIgPSBmdW5jdGlvbiAoZ2VuZXJhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1YmplY3Quc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSkgeyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdlbmVyYXRvci5uZXh0KHZhbHVlKTsgfSk7IH0sIGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gZ2VuZXJhdG9yLnRocm93ID8gZ2VuZXJhdG9yLnRocm93KGVycm9yKSA6IG51bGw7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdlbmVyYXRvci5yZXR1cm4gPyBnZW5lcmF0b3IucmV0dXJuKCkgOiBudWxsOyB9KTtcclxuICAgIH07XHJcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnRvUnggPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9zdWJqZWN0OyB9O1xyXG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7IHRoaXMuX3N1YmplY3QubmV4dCh2YWx1ZSk7IH07XHJcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnRocm93ID0gZnVuY3Rpb24gKGVycm9yKSB7IHRoaXMuX3N1YmplY3QuZXJyb3IoZXJyb3IpOyB9O1xyXG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZXR1cm4gPSBmdW5jdGlvbiAodmFsdWUpIHsgdGhpcy5fc3ViamVjdC5jb21wbGV0ZSgpOyB9O1xyXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcclxufSkoT2JzZXJ2YWJsZSk7XHJcbmV4cG9ydHMuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbmV4cG9ydHMuTWFwID0gbGFuZ18xLmdsb2JhbC5NYXA7XHJcbmV4cG9ydHMuU2V0ID0gbGFuZ18xLmdsb2JhbC5TZXQ7XHJcbi8vIFNhZmFyaSBhbmQgSW50ZXJuZXQgRXhwbG9yZXIgZG8gbm90IHN1cHBvcnQgdGhlIGl0ZXJhYmxlIHBhcmFtZXRlciB0byB0aGVcclxuLy8gTWFwIGNvbnN0cnVjdG9yLiAgV2Ugd29yayBhcm91bmQgdGhhdCBieSBtYW51YWxseSBhZGRpbmcgdGhlIGl0ZW1zLlxyXG52YXIgY3JlYXRlTWFwRnJvbVBhaXJzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKG5ldyBleHBvcnRzLk1hcChbWzEsIDJdXSkuc2l6ZSA9PT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlTWFwRnJvbVBhaXJzKHBhaXJzKSB7IHJldHVybiBuZXcgZXhwb3J0cy5NYXAocGFpcnMpOyB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlTWFwQW5kUG9wdWxhdGVGcm9tUGFpcnMocGFpcnMpIHtcclxuICAgICAgICB2YXIgbWFwID0gbmV3IGV4cG9ydHMuTWFwKCk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2ldO1xyXG4gICAgICAgICAgICBtYXAuc2V0KHBhaXJbMF0sIHBhaXJbMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWFwO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIGNyZWF0ZU1hcEZyb21NYXAgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBpZiAobmV3IGV4cG9ydHMuTWFwKG5ldyBleHBvcnRzLk1hcCgpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlTWFwRnJvbU1hcChtKSB7IHJldHVybiBuZXcgZXhwb3J0cy5NYXAobSk7IH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVNYXBBbmRQb3B1bGF0ZUZyb21NYXAobSkge1xyXG4gICAgICAgIHZhciBtYXAgPSBuZXcgZXhwb3J0cy5NYXAoKTtcclxuICAgICAgICBtLmZvckVhY2goZnVuY3Rpb24gKHYsIGspIHsgbWFwLnNldChrLCB2KTsgfSk7XHJcbiAgICAgICAgcmV0dXJuIG1hcDtcclxuICAgIH07XHJcbn0pKCk7XHJcbnZhciBfY2xlYXJWYWx1ZXMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKChuZXcgZXhwb3J0cy5NYXAoKSkua2V5cygpLm5leHQpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gX2NsZWFyVmFsdWVzKG0pIHtcclxuICAgICAgICAgICAgdmFyIGtleUl0ZXJhdG9yID0gbS5rZXlzKCk7XHJcbiAgICAgICAgICAgIHZhciBrO1xyXG4gICAgICAgICAgICB3aGlsZSAoISgoayA9IGtleUl0ZXJhdG9yLm5leHQoKSkuZG9uZSkpIHtcclxuICAgICAgICAgICAgICAgIG0uc2V0KGsudmFsdWUsIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBfY2xlYXJWYWx1ZXNXaXRoRm9yZUVhY2gobSkge1xyXG4gICAgICAgICAgICBtLmZvckVhY2goZnVuY3Rpb24gKHYsIGspIHsgbS5zZXQoaywgbnVsbCk7IH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0pKCk7XHJcbi8vIFNhZmFyaSBkb2Vzbid0IGltcGxlbWVudCBNYXBJdGVyYXRvci5uZXh0KCksIHdoaWNoIGlzIHVzZWQgaXMgVHJhY2V1cidzIHBvbHlmaWxsIG9mIEFycmF5LmZyb21cclxuLy8gVE9ETyhtbGF2YWwpOiByZW1vdmUgdGhlIHdvcmsgYXJvdW5kIG9uY2Ugd2UgaGF2ZSBhIHdvcmtpbmcgcG9seWZpbGwgb2YgQXJyYXkuZnJvbVxyXG52YXIgX2FycmF5RnJvbU1hcCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGlmICgobmV3IGV4cG9ydHMuTWFwKCkpLnZhbHVlcygpLm5leHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUFycmF5RnJvbU1hcChtLCBnZXRWYWx1ZXMpIHsgcmV0dXJuIGdldFZhbHVlcyA/IEFycmF5LmZyb20obS52YWx1ZXMoKSkgOiBBcnJheS5mcm9tKG0ua2V5cygpKTsgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUFycmF5RnJvbU1hcFdpdGhGb3JlYWNoKG0sIGdldFZhbHVlcykge1xyXG4gICAgICAgIHZhciByZXMgPSBMaXN0V3JhcHBlci5jcmVhdGVGaXhlZFNpemUobS5zaXplKSwgaSA9IDA7XHJcbiAgICAgICAgbS5mb3JFYWNoKGZ1bmN0aW9uICh2LCBrKSB7XHJcbiAgICAgICAgICAgIHJlc1tpXSA9IGdldFZhbHVlcyA/IHYgOiBrO1xyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH07XHJcbn0pKCk7XHJcbnZhciBNYXBXcmFwcGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1hcFdyYXBwZXIoKSB7XHJcbiAgICB9XHJcbiAgICBNYXBXcmFwcGVyLmNsb25lID0gZnVuY3Rpb24gKG0pIHsgcmV0dXJuIGNyZWF0ZU1hcEZyb21NYXAobSk7IH07XHJcbiAgICBNYXBXcmFwcGVyLmNyZWF0ZUZyb21TdHJpbmdNYXAgPSBmdW5jdGlvbiAoc3RyaW5nTWFwKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBleHBvcnRzLk1hcCgpO1xyXG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gc3RyaW5nTWFwKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5zZXQocHJvcCwgc3RyaW5nTWFwW3Byb3BdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICBNYXBXcmFwcGVyLnRvU3RyaW5nTWFwID0gZnVuY3Rpb24gKG0pIHtcclxuICAgICAgICB2YXIgciA9IHt9O1xyXG4gICAgICAgIG0uZm9yRWFjaChmdW5jdGlvbiAodiwgaykgeyByZXR1cm4gcltrXSA9IHY7IH0pO1xyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfTtcclxuICAgIE1hcFdyYXBwZXIuY3JlYXRlRnJvbVBhaXJzID0gZnVuY3Rpb24gKHBhaXJzKSB7IHJldHVybiBjcmVhdGVNYXBGcm9tUGFpcnMocGFpcnMpOyB9O1xyXG4gICAgTWFwV3JhcHBlci5jbGVhclZhbHVlcyA9IGZ1bmN0aW9uIChtKSB7IF9jbGVhclZhbHVlcyhtKTsgfTtcclxuICAgIE1hcFdyYXBwZXIuaXRlcmFibGUgPSBmdW5jdGlvbiAobSkgeyByZXR1cm4gbTsgfTtcclxuICAgIE1hcFdyYXBwZXIua2V5cyA9IGZ1bmN0aW9uIChtKSB7IHJldHVybiBfYXJyYXlGcm9tTWFwKG0sIGZhbHNlKTsgfTtcclxuICAgIE1hcFdyYXBwZXIudmFsdWVzID0gZnVuY3Rpb24gKG0pIHsgcmV0dXJuIF9hcnJheUZyb21NYXAobSwgdHJ1ZSk7IH07XHJcbiAgICByZXR1cm4gTWFwV3JhcHBlcjtcclxufSkoKTtcclxuZXhwb3J0cy5NYXBXcmFwcGVyID0gTWFwV3JhcHBlcjtcclxuLyoqXHJcbiAqIFdyYXBzIEphdmFzY3JpcHQgT2JqZWN0c1xyXG4gKi9cclxudmFyIFN0cmluZ01hcFdyYXBwZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3RyaW5nTWFwV3JhcHBlcigpIHtcclxuICAgIH1cclxuICAgIFN0cmluZ01hcFdyYXBwZXIuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIE5vdGU6IFdlIGFyZSBub3QgdXNpbmcgT2JqZWN0LmNyZWF0ZShudWxsKSBoZXJlIGR1ZSB0b1xyXG4gICAgICAgIC8vIHBlcmZvcm1hbmNlIVxyXG4gICAgICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL25nMi1vYmplY3QtY3JlYXRlLW51bGxcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICB9O1xyXG4gICAgU3RyaW5nTWFwV3JhcHBlci5jb250YWlucyA9IGZ1bmN0aW9uIChtYXAsIGtleSkge1xyXG4gICAgICAgIHJldHVybiBtYXAuaGFzT3duUHJvcGVydHkoa2V5KTtcclxuICAgIH07XHJcbiAgICBTdHJpbmdNYXBXcmFwcGVyLmdldCA9IGZ1bmN0aW9uIChtYXAsIGtleSkge1xyXG4gICAgICAgIHJldHVybiBtYXAuaGFzT3duUHJvcGVydHkoa2V5KSA/IG1hcFtrZXldIDogdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIFN0cmluZ01hcFdyYXBwZXIuc2V0ID0gZnVuY3Rpb24gKG1hcCwga2V5LCB2YWx1ZSkgeyBtYXBba2V5XSA9IHZhbHVlOyB9O1xyXG4gICAgU3RyaW5nTWFwV3JhcHBlci5rZXlzID0gZnVuY3Rpb24gKG1hcCkgeyByZXR1cm4gT2JqZWN0LmtleXMobWFwKTsgfTtcclxuICAgIFN0cmluZ01hcFdyYXBwZXIuaXNFbXB0eSA9IGZ1bmN0aW9uIChtYXApIHtcclxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIG1hcCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIFN0cmluZ01hcFdyYXBwZXIuZGVsZXRlID0gZnVuY3Rpb24gKG1hcCwga2V5KSB7IGRlbGV0ZSBtYXBba2V5XTsgfTtcclxuICAgIFN0cmluZ01hcFdyYXBwZXIuZm9yRWFjaCA9IGZ1bmN0aW9uIChtYXAsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBtYXApIHtcclxuICAgICAgICAgICAgaWYgKG1hcC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobWFwW3Byb3BdLCBwcm9wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTdHJpbmdNYXBXcmFwcGVyLm1lcmdlID0gZnVuY3Rpb24gKG0xLCBtMikge1xyXG4gICAgICAgIHZhciBtID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgYXR0ciBpbiBtMSkge1xyXG4gICAgICAgICAgICBpZiAobTEuaGFzT3duUHJvcGVydHkoYXR0cikpIHtcclxuICAgICAgICAgICAgICAgIG1bYXR0cl0gPSBtMVthdHRyXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBhdHRyIGluIG0yKSB7XHJcbiAgICAgICAgICAgIGlmIChtMi5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xyXG4gICAgICAgICAgICAgICAgbVthdHRyXSA9IG0yW2F0dHJdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtO1xyXG4gICAgfTtcclxuICAgIFN0cmluZ01hcFdyYXBwZXIuZXF1YWxzID0gZnVuY3Rpb24gKG0xLCBtMikge1xyXG4gICAgICAgIHZhciBrMSA9IE9iamVjdC5rZXlzKG0xKTtcclxuICAgICAgICB2YXIgazIgPSBPYmplY3Qua2V5cyhtMik7XHJcbiAgICAgICAgaWYgKGsxLmxlbmd0aCAhPSBrMi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIga2V5O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgazEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAga2V5ID0gazFbaV07XHJcbiAgICAgICAgICAgIGlmIChtMVtrZXldICE9PSBtMltrZXldKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN0cmluZ01hcFdyYXBwZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuU3RyaW5nTWFwV3JhcHBlciA9IFN0cmluZ01hcFdyYXBwZXI7XHJcbnZhciBMaXN0V3JhcHBlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBMaXN0V3JhcHBlcigpIHtcclxuICAgIH1cclxuICAgIC8vIEpTIGhhcyBubyB3YXkgdG8gZXhwcmVzcyBhIHN0YXRpY2FsbHkgZml4ZWQgc2l6ZSBsaXN0LCBidXQgZGFydCBkb2VzIHNvIHdlXHJcbiAgICAvLyBrZWVwIGJvdGggbWV0aG9kcy5cclxuICAgIExpc3RXcmFwcGVyLmNyZWF0ZUZpeGVkU2l6ZSA9IGZ1bmN0aW9uIChzaXplKSB7IHJldHVybiBuZXcgQXJyYXkoc2l6ZSk7IH07XHJcbiAgICBMaXN0V3JhcHBlci5jcmVhdGVHcm93YWJsZVNpemUgPSBmdW5jdGlvbiAoc2l6ZSkgeyByZXR1cm4gbmV3IEFycmF5KHNpemUpOyB9O1xyXG4gICAgTGlzdFdyYXBwZXIuY2xvbmUgPSBmdW5jdGlvbiAoYXJyYXkpIHsgcmV0dXJuIGFycmF5LnNsaWNlKDApOyB9O1xyXG4gICAgTGlzdFdyYXBwZXIuZm9yRWFjaFdpdGhJbmRleCA9IGZ1bmN0aW9uIChhcnJheSwgZm4pIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZuKGFycmF5W2ldLCBpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTGlzdFdyYXBwZXIuZmlyc3QgPSBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICBpZiAoIWFycmF5KVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICByZXR1cm4gYXJyYXlbMF07XHJcbiAgICB9O1xyXG4gICAgTGlzdFdyYXBwZXIubGFzdCA9IGZ1bmN0aW9uIChhcnJheSkge1xyXG4gICAgICAgIGlmICghYXJyYXkgfHwgYXJyYXkubGVuZ3RoID09IDApXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcclxuICAgIH07XHJcbiAgICBMaXN0V3JhcHBlci5maW5kID0gZnVuY3Rpb24gKGxpc3QsIHByZWQpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgaWYgKHByZWQobGlzdFtpXSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdFtpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgTGlzdFdyYXBwZXIuaW5kZXhPZiA9IGZ1bmN0aW9uIChhcnJheSwgdmFsdWUsIHN0YXJ0SW5kZXgpIHtcclxuICAgICAgICBpZiAoc3RhcnRJbmRleCA9PT0gdm9pZCAwKSB7IHN0YXJ0SW5kZXggPSAwOyB9XHJcbiAgICAgICAgcmV0dXJuIGFycmF5LmluZGV4T2YodmFsdWUsIHN0YXJ0SW5kZXgpO1xyXG4gICAgfTtcclxuICAgIExpc3RXcmFwcGVyLnJlZHVjZSA9IGZ1bmN0aW9uIChsaXN0LCBmbiwgaW5pdCkge1xyXG4gICAgICAgIHJldHVybiBsaXN0LnJlZHVjZShmbiwgaW5pdCk7XHJcbiAgICB9O1xyXG4gICAgTGlzdFdyYXBwZXIuZmlsdGVyID0gZnVuY3Rpb24gKGFycmF5LCBwcmVkKSB7IHJldHVybiBhcnJheS5maWx0ZXIocHJlZCk7IH07XHJcbiAgICBMaXN0V3JhcHBlci5hbnkgPSBmdW5jdGlvbiAobGlzdCwgcHJlZCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBpZiAocHJlZChsaXN0W2ldKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgTGlzdFdyYXBwZXIuY29udGFpbnMgPSBmdW5jdGlvbiAobGlzdCwgZWwpIHsgcmV0dXJuIGxpc3QuaW5kZXhPZihlbCkgIT09IC0xOyB9O1xyXG4gICAgTGlzdFdyYXBwZXIucmV2ZXJzZWQgPSBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICB2YXIgYSA9IExpc3RXcmFwcGVyLmNsb25lKGFycmF5KTtcclxuICAgICAgICByZXR1cm4gYS5yZXZlcnNlKCk7XHJcbiAgICB9O1xyXG4gICAgTGlzdFdyYXBwZXIuY29uY2F0ID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuY29uY2F0KGIpOyB9O1xyXG4gICAgTGlzdFdyYXBwZXIuaW5zZXJ0ID0gZnVuY3Rpb24gKGxpc3QsIGluZGV4LCB2YWx1ZSkgeyBsaXN0LnNwbGljZShpbmRleCwgMCwgdmFsdWUpOyB9O1xyXG4gICAgTGlzdFdyYXBwZXIucmVtb3ZlQXQgPSBmdW5jdGlvbiAobGlzdCwgaW5kZXgpIHtcclxuICAgICAgICB2YXIgcmVzID0gbGlzdFtpbmRleF07XHJcbiAgICAgICAgbGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG4gICAgTGlzdFdyYXBwZXIucmVtb3ZlQWxsID0gZnVuY3Rpb24gKGxpc3QsIGl0ZW1zKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBsaXN0LmluZGV4T2YoaXRlbXNbaV0pO1xyXG4gICAgICAgICAgICBsaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIExpc3RXcmFwcGVyLnJlbW92ZSA9IGZ1bmN0aW9uIChsaXN0LCBlbCkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IGxpc3QuaW5kZXhPZihlbCk7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgbGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIExpc3RXcmFwcGVyLmNsZWFyID0gZnVuY3Rpb24gKGxpc3QpIHsgbGlzdC5sZW5ndGggPSAwOyB9O1xyXG4gICAgTGlzdFdyYXBwZXIuaXNFbXB0eSA9IGZ1bmN0aW9uIChsaXN0KSB7IHJldHVybiBsaXN0Lmxlbmd0aCA9PSAwOyB9O1xyXG4gICAgTGlzdFdyYXBwZXIuZmlsbCA9IGZ1bmN0aW9uIChsaXN0LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xyXG4gICAgICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxyXG4gICAgICAgIGlmIChlbmQgPT09IHZvaWQgMCkgeyBlbmQgPSBudWxsOyB9XHJcbiAgICAgICAgbGlzdC5maWxsKHZhbHVlLCBzdGFydCwgZW5kID09PSBudWxsID8gbGlzdC5sZW5ndGggOiBlbmQpO1xyXG4gICAgfTtcclxuICAgIExpc3RXcmFwcGVyLmVxdWFscyA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgaWYgKGEubGVuZ3RoICE9IGIubGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmIChhW2ldICE9PSBiW2ldKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbiAgICBMaXN0V3JhcHBlci5zbGljZSA9IGZ1bmN0aW9uIChsLCBmcm9tLCB0bykge1xyXG4gICAgICAgIGlmIChmcm9tID09PSB2b2lkIDApIHsgZnJvbSA9IDA7IH1cclxuICAgICAgICBpZiAodG8gPT09IHZvaWQgMCkgeyB0byA9IG51bGw7IH1cclxuICAgICAgICByZXR1cm4gbC5zbGljZShmcm9tLCB0byA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHRvKTtcclxuICAgIH07XHJcbiAgICBMaXN0V3JhcHBlci5zcGxpY2UgPSBmdW5jdGlvbiAobCwgZnJvbSwgbGVuZ3RoKSB7IHJldHVybiBsLnNwbGljZShmcm9tLCBsZW5ndGgpOyB9O1xyXG4gICAgTGlzdFdyYXBwZXIuc29ydCA9IGZ1bmN0aW9uIChsLCBjb21wYXJlRm4pIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChjb21wYXJlRm4pKSB7XHJcbiAgICAgICAgICAgIGwuc29ydChjb21wYXJlRm4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbC5zb3J0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIExpc3RXcmFwcGVyLnRvU3RyaW5nID0gZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGwudG9TdHJpbmcoKTsgfTtcclxuICAgIExpc3RXcmFwcGVyLnRvSlNPTiA9IGZ1bmN0aW9uIChsKSB7IHJldHVybiBKU09OLnN0cmluZ2lmeShsKTsgfTtcclxuICAgIExpc3RXcmFwcGVyLm1heGltdW0gPSBmdW5jdGlvbiAobGlzdCwgcHJlZGljYXRlKSB7XHJcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzb2x1dGlvbiA9IG51bGw7XHJcbiAgICAgICAgdmFyIG1heFZhbHVlID0gLUluZmluaXR5O1xyXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICB2YXIgY2FuZGlkYXRlID0gbGlzdFtpbmRleF07XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhjYW5kaWRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY2FuZGlkYXRlVmFsdWUgPSBwcmVkaWNhdGUoY2FuZGlkYXRlKTtcclxuICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZVZhbHVlID4gbWF4VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHNvbHV0aW9uID0gY2FuZGlkYXRlO1xyXG4gICAgICAgICAgICAgICAgbWF4VmFsdWUgPSBjYW5kaWRhdGVWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc29sdXRpb247XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIExpc3RXcmFwcGVyO1xyXG59KSgpO1xyXG5leHBvcnRzLkxpc3RXcmFwcGVyID0gTGlzdFdyYXBwZXI7XHJcbmZ1bmN0aW9uIGlzTGlzdExpa2VJdGVyYWJsZShvYmopIHtcclxuICAgIGlmICghbGFuZ18xLmlzSnNPYmplY3Qob2JqKSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICByZXR1cm4gbGFuZ18xLmlzQXJyYXkob2JqKSB8fFxyXG4gICAgICAgICghKG9iaiBpbnN0YW5jZW9mIGV4cG9ydHMuTWFwKSAmJlxyXG4gICAgICAgICAgICBsYW5nXzEuZ2V0U3ltYm9sSXRlcmF0b3IoKSBpbiBvYmopOyAvLyBKUyBJdGVyYWJsZSBoYXZlIGEgU3ltYm9sLml0ZXJhdG9yIHByb3BcclxufVxyXG5leHBvcnRzLmlzTGlzdExpa2VJdGVyYWJsZSA9IGlzTGlzdExpa2VJdGVyYWJsZTtcclxuZnVuY3Rpb24gaXRlcmF0ZUxpc3RMaWtlKG9iaiwgZm4pIHtcclxuICAgIGlmIChsYW5nXzEuaXNBcnJheShvYmopKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZm4ob2JqW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgaXRlcmF0b3IgPSBvYmpbbGFuZ18xLmdldFN5bWJvbEl0ZXJhdG9yKCldKCk7XHJcbiAgICAgICAgdmFyIGl0ZW07XHJcbiAgICAgICAgd2hpbGUgKCEoKGl0ZW0gPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpKSB7XHJcbiAgICAgICAgICAgIGZuKGl0ZW0udmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLml0ZXJhdGVMaXN0TGlrZSA9IGl0ZXJhdGVMaXN0TGlrZTtcclxuLy8gU2FmYXJpIGFuZCBJbnRlcm5ldCBFeHBsb3JlciBkbyBub3Qgc3VwcG9ydCB0aGUgaXRlcmFibGUgcGFyYW1ldGVyIHRvIHRoZVxyXG4vLyBTZXQgY29uc3RydWN0b3IuICBXZSB3b3JrIGFyb3VuZCB0aGF0IGJ5IG1hbnVhbGx5IGFkZGluZyB0aGUgaXRlbXMuXHJcbnZhciBjcmVhdGVTZXRGcm9tTGlzdCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdGVzdCA9IG5ldyBleHBvcnRzLlNldChbMSwgMiwgM10pO1xyXG4gICAgaWYgKHRlc3Quc2l6ZSA9PT0gMykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVTZXRGcm9tTGlzdChsc3QpIHsgcmV0dXJuIG5ldyBleHBvcnRzLlNldChsc3QpOyB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVNldEFuZFBvcHVsYXRlRnJvbUxpc3QobHN0KSB7XHJcbiAgICAgICAgICAgIHZhciByZXMgPSBuZXcgZXhwb3J0cy5TZXQobHN0KTtcclxuICAgICAgICAgICAgaWYgKHJlcy5zaXplICE9PSBsc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5hZGQobHN0W2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0pKCk7XHJcbnZhciBTZXRXcmFwcGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNldFdyYXBwZXIoKSB7XHJcbiAgICB9XHJcbiAgICBTZXRXcmFwcGVyLmNyZWF0ZUZyb21MaXN0ID0gZnVuY3Rpb24gKGxzdCkgeyByZXR1cm4gY3JlYXRlU2V0RnJvbUxpc3QobHN0KTsgfTtcclxuICAgIFNldFdyYXBwZXIuaGFzID0gZnVuY3Rpb24gKHMsIGtleSkgeyByZXR1cm4gcy5oYXMoa2V5KTsgfTtcclxuICAgIFNldFdyYXBwZXIuZGVsZXRlID0gZnVuY3Rpb24gKG0sIGspIHsgbS5kZWxldGUoayk7IH07XHJcbiAgICByZXR1cm4gU2V0V3JhcHBlcjtcclxufSkoKTtcclxuZXhwb3J0cy5TZXRXcmFwcGVyID0gU2V0V3JhcHBlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sbGVjdGlvbi5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIF9BcnJheUxvZ2dlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBfQXJyYXlMb2dnZXIoKSB7XHJcbiAgICAgICAgdGhpcy5yZXMgPSBbXTtcclxuICAgIH1cclxuICAgIF9BcnJheUxvZ2dlci5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKHMpIHsgdGhpcy5yZXMucHVzaChzKTsgfTtcclxuICAgIF9BcnJheUxvZ2dlci5wcm90b3R5cGUubG9nRXJyb3IgPSBmdW5jdGlvbiAocykgeyB0aGlzLnJlcy5wdXNoKHMpOyB9O1xyXG4gICAgX0FycmF5TG9nZ2VyLnByb3RvdHlwZS5sb2dHcm91cCA9IGZ1bmN0aW9uIChzKSB7IHRoaXMucmVzLnB1c2gocyk7IH07XHJcbiAgICBfQXJyYXlMb2dnZXIucHJvdG90eXBlLmxvZ0dyb3VwRW5kID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgO1xyXG4gICAgcmV0dXJuIF9BcnJheUxvZ2dlcjtcclxufSkoKTtcclxuLyoqXHJcbiAqIFByb3ZpZGVzIGEgaG9vayBmb3IgY2VudHJhbGl6ZWQgZXhjZXB0aW9uIGhhbmRsaW5nLlxyXG4gKlxyXG4gKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgRXhjZXB0aW9uSGFuZGxlcmAgcHJpbnRzIGVycm9yIG1lc3NhZ2VzIHRvIHRoZSBgQ29uc29sZWAuIFRvXHJcbiAqIGludGVyY2VwdCBlcnJvciBoYW5kbGluZyxcclxuICogd3JpdGUgYSBjdXN0b20gZXhjZXB0aW9uIGhhbmRsZXIgdGhhdCByZXBsYWNlcyB0aGlzIGRlZmF1bHQgYXMgYXBwcm9wcmlhdGUgZm9yIHlvdXIgYXBwLlxyXG4gKlxyXG4gKiAjIEV4YW1wbGVcclxuICpcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKlxyXG4gKiBjbGFzcyBNeUV4Y2VwdGlvbkhhbmRsZXIgaW1wbGVtZW50cyBFeGNlcHRpb25IYW5kbGVyIHtcclxuICogICBjYWxsKGVycm9yLCBzdGFja1RyYWNlID0gbnVsbCwgcmVhc29uID0gbnVsbCkge1xyXG4gKiAgICAgLy8gZG8gc29tZXRoaW5nIHdpdGggdGhlIGV4Y2VwdGlvblxyXG4gKiAgIH1cclxuICogfVxyXG4gKlxyXG4gKiBib290c3RyYXAoTXlBcHAsIFtwcm92aWRlKEV4Y2VwdGlvbkhhbmRsZXIsIHt1c2VDbGFzczogTXlFeGNlcHRpb25IYW5kbGVyfSldKVxyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbnZhciBFeGNlcHRpb25IYW5kbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEV4Y2VwdGlvbkhhbmRsZXIoX2xvZ2dlciwgX3JldGhyb3dFeGNlcHRpb24pIHtcclxuICAgICAgICBpZiAoX3JldGhyb3dFeGNlcHRpb24gPT09IHZvaWQgMCkgeyBfcmV0aHJvd0V4Y2VwdGlvbiA9IHRydWU7IH1cclxuICAgICAgICB0aGlzLl9sb2dnZXIgPSBfbG9nZ2VyO1xyXG4gICAgICAgIHRoaXMuX3JldGhyb3dFeGNlcHRpb24gPSBfcmV0aHJvd0V4Y2VwdGlvbjtcclxuICAgIH1cclxuICAgIEV4Y2VwdGlvbkhhbmRsZXIuZXhjZXB0aW9uVG9TdHJpbmcgPSBmdW5jdGlvbiAoZXhjZXB0aW9uLCBzdGFja1RyYWNlLCByZWFzb24pIHtcclxuICAgICAgICBpZiAoc3RhY2tUcmFjZSA9PT0gdm9pZCAwKSB7IHN0YWNrVHJhY2UgPSBudWxsOyB9XHJcbiAgICAgICAgaWYgKHJlYXNvbiA9PT0gdm9pZCAwKSB7IHJlYXNvbiA9IG51bGw7IH1cclxuICAgICAgICB2YXIgbCA9IG5ldyBfQXJyYXlMb2dnZXIoKTtcclxuICAgICAgICB2YXIgZSA9IG5ldyBFeGNlcHRpb25IYW5kbGVyKGwsIGZhbHNlKTtcclxuICAgICAgICBlLmNhbGwoZXhjZXB0aW9uLCBzdGFja1RyYWNlLCByZWFzb24pO1xyXG4gICAgICAgIHJldHVybiBsLnJlcy5qb2luKFwiXFxuXCIpO1xyXG4gICAgfTtcclxuICAgIEV4Y2VwdGlvbkhhbmRsZXIucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoZXhjZXB0aW9uLCBzdGFja1RyYWNlLCByZWFzb24pIHtcclxuICAgICAgICBpZiAoc3RhY2tUcmFjZSA9PT0gdm9pZCAwKSB7IHN0YWNrVHJhY2UgPSBudWxsOyB9XHJcbiAgICAgICAgaWYgKHJlYXNvbiA9PT0gdm9pZCAwKSB7IHJlYXNvbiA9IG51bGw7IH1cclxuICAgICAgICB2YXIgb3JpZ2luYWxFeGNlcHRpb24gPSB0aGlzLl9maW5kT3JpZ2luYWxFeGNlcHRpb24oZXhjZXB0aW9uKTtcclxuICAgICAgICB2YXIgb3JpZ2luYWxTdGFjayA9IHRoaXMuX2ZpbmRPcmlnaW5hbFN0YWNrKGV4Y2VwdGlvbik7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLl9maW5kQ29udGV4dChleGNlcHRpb24pO1xyXG4gICAgICAgIHRoaXMuX2xvZ2dlci5sb2dHcm91cChcIkVYQ0VQVElPTjogXCIgKyB0aGlzLl9leHRyYWN0TWVzc2FnZShleGNlcHRpb24pKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChzdGFja1RyYWNlKSAmJiBsYW5nXzEuaXNCbGFuayhvcmlnaW5hbFN0YWNrKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIubG9nRXJyb3IoXCJTVEFDS1RSQUNFOlwiKTtcclxuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmxvZ0Vycm9yKHRoaXMuX2xvbmdTdGFja1RyYWNlKHN0YWNrVHJhY2UpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQocmVhc29uKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIubG9nRXJyb3IoXCJSRUFTT046IFwiICsgcmVhc29uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQob3JpZ2luYWxFeGNlcHRpb24pKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5sb2dFcnJvcihcIk9SSUdJTkFMIEVYQ0VQVElPTjogXCIgKyB0aGlzLl9leHRyYWN0TWVzc2FnZShvcmlnaW5hbEV4Y2VwdGlvbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChvcmlnaW5hbFN0YWNrKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIubG9nRXJyb3IoXCJPUklHSU5BTCBTVEFDS1RSQUNFOlwiKTtcclxuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmxvZ0Vycm9yKHRoaXMuX2xvbmdTdGFja1RyYWNlKG9yaWdpbmFsU3RhY2spKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoY29udGV4dCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmxvZ0Vycm9yKFwiRVJST1IgQ09OVEVYVDpcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5sb2dFcnJvcihjb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbG9nZ2VyLmxvZ0dyb3VwRW5kKCk7XHJcbiAgICAgICAgLy8gV2UgcmV0aHJvdyBleGNlcHRpb25zLCBzbyBvcGVyYXRpb25zIGxpa2UgJ2Jvb3RzdHJhcCcgd2lsbCByZXN1bHQgaW4gYW4gZXJyb3JcclxuICAgICAgICAvLyB3aGVuIGFuIGV4Y2VwdGlvbiBoYXBwZW5zLiBJZiB3ZSBkbyBub3QgcmV0aHJvdywgYm9vdHN0cmFwIHdpbGwgYWx3YXlzIHN1Y2NlZWQuXHJcbiAgICAgICAgaWYgKHRoaXMuX3JldGhyb3dFeGNlcHRpb24pXHJcbiAgICAgICAgICAgIHRocm93IGV4Y2VwdGlvbjtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBFeGNlcHRpb25IYW5kbGVyLnByb3RvdHlwZS5fZXh0cmFjdE1lc3NhZ2UgPSBmdW5jdGlvbiAoZXhjZXB0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4Y2VwdGlvbiBpbnN0YW5jZW9mIGV4Y2VwdGlvbnNfMS5XcmFwcGVkRXhjZXB0aW9uID8gZXhjZXB0aW9uLndyYXBwZXJNZXNzYWdlIDogZXhjZXB0aW9uLnRvU3RyaW5nKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRXhjZXB0aW9uSGFuZGxlci5wcm90b3R5cGUuX2xvbmdTdGFja1RyYWNlID0gZnVuY3Rpb24gKHN0YWNrVHJhY2UpIHtcclxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbl8xLmlzTGlzdExpa2VJdGVyYWJsZShzdGFja1RyYWNlKSA/IHN0YWNrVHJhY2Uuam9pbihcIlxcblxcbi0tLS0tYXN5bmMgZ2FwLS0tLS1cXG5cIikgOlxyXG4gICAgICAgICAgICBzdGFja1RyYWNlLnRvU3RyaW5nKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRXhjZXB0aW9uSGFuZGxlci5wcm90b3R5cGUuX2ZpbmRDb250ZXh0ID0gZnVuY3Rpb24gKGV4Y2VwdGlvbikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghKGV4Y2VwdGlvbiBpbnN0YW5jZW9mIGV4Y2VwdGlvbnNfMS5XcmFwcGVkRXhjZXB0aW9uKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gbGFuZ18xLmlzUHJlc2VudChleGNlcHRpb24uY29udGV4dCkgPyBleGNlcHRpb24uY29udGV4dCA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5kQ29udGV4dChleGNlcHRpb24ub3JpZ2luYWxFeGNlcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAvLyBleGNlcHRpb24uY29udGV4dCBjYW4gdGhyb3cgYW4gZXhjZXB0aW9uLiBpZiBpdCBoYXBwZW5zLCB3ZSBpZ25vcmUgdGhlIGNvbnRleHQuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBFeGNlcHRpb25IYW5kbGVyLnByb3RvdHlwZS5fZmluZE9yaWdpbmFsRXhjZXB0aW9uID0gZnVuY3Rpb24gKGV4Y2VwdGlvbikge1xyXG4gICAgICAgIGlmICghKGV4Y2VwdGlvbiBpbnN0YW5jZW9mIGV4Y2VwdGlvbnNfMS5XcmFwcGVkRXhjZXB0aW9uKSlcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgdmFyIGUgPSBleGNlcHRpb24ub3JpZ2luYWxFeGNlcHRpb247XHJcbiAgICAgICAgd2hpbGUgKGUgaW5zdGFuY2VvZiBleGNlcHRpb25zXzEuV3JhcHBlZEV4Y2VwdGlvbiAmJiBsYW5nXzEuaXNQcmVzZW50KGUub3JpZ2luYWxFeGNlcHRpb24pKSB7XHJcbiAgICAgICAgICAgIGUgPSBlLm9yaWdpbmFsRXhjZXB0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZTtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBFeGNlcHRpb25IYW5kbGVyLnByb3RvdHlwZS5fZmluZE9yaWdpbmFsU3RhY2sgPSBmdW5jdGlvbiAoZXhjZXB0aW9uKSB7XHJcbiAgICAgICAgaWYgKCEoZXhjZXB0aW9uIGluc3RhbmNlb2YgZXhjZXB0aW9uc18xLldyYXBwZWRFeGNlcHRpb24pKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB2YXIgZSA9IGV4Y2VwdGlvbjtcclxuICAgICAgICB2YXIgc3RhY2sgPSBleGNlcHRpb24ub3JpZ2luYWxTdGFjaztcclxuICAgICAgICB3aGlsZSAoZSBpbnN0YW5jZW9mIGV4Y2VwdGlvbnNfMS5XcmFwcGVkRXhjZXB0aW9uICYmIGxhbmdfMS5pc1ByZXNlbnQoZS5vcmlnaW5hbEV4Y2VwdGlvbikpIHtcclxuICAgICAgICAgICAgZSA9IGUub3JpZ2luYWxFeGNlcHRpb247XHJcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgZXhjZXB0aW9uc18xLldyYXBwZWRFeGNlcHRpb24gJiYgbGFuZ18xLmlzUHJlc2VudChlLm9yaWdpbmFsRXhjZXB0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgc3RhY2sgPSBlLm9yaWdpbmFsU3RhY2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0YWNrO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFeGNlcHRpb25IYW5kbGVyO1xyXG59KSgpO1xyXG5leHBvcnRzLkV4Y2VwdGlvbkhhbmRsZXIgPSBFeGNlcHRpb25IYW5kbGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGNlcHRpb25faGFuZGxlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGV4Y2VwdGlvbl9oYW5kbGVyXzEgPSByZXF1aXJlKCcuL2V4Y2VwdGlvbl9oYW5kbGVyJyk7XHJcbnZhciBleGNlcHRpb25faGFuZGxlcl8yID0gcmVxdWlyZSgnLi9leGNlcHRpb25faGFuZGxlcicpO1xyXG5leHBvcnRzLkV4Y2VwdGlvbkhhbmRsZXIgPSBleGNlcHRpb25faGFuZGxlcl8yLkV4Y2VwdGlvbkhhbmRsZXI7XHJcbnZhciBCYXNlRXhjZXB0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhCYXNlRXhjZXB0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQmFzZUV4Y2VwdGlvbihtZXNzYWdlKSB7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkgeyBtZXNzYWdlID0gXCItLVwiOyB9XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxuICAgICAgICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcihtZXNzYWdlKSkuc3RhY2s7XHJcbiAgICB9XHJcbiAgICBCYXNlRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMubWVzc2FnZTsgfTtcclxuICAgIHJldHVybiBCYXNlRXhjZXB0aW9uO1xyXG59KShFcnJvcik7XHJcbmV4cG9ydHMuQmFzZUV4Y2VwdGlvbiA9IEJhc2VFeGNlcHRpb247XHJcbnZhciBXcmFwcGVkRXhjZXB0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhXcmFwcGVkRXhjZXB0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gV3JhcHBlZEV4Y2VwdGlvbihfd3JhcHBlck1lc3NhZ2UsIF9vcmlnaW5hbEV4Y2VwdGlvbiwgX29yaWdpbmFsU3RhY2ssIF9jb250ZXh0KSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgX3dyYXBwZXJNZXNzYWdlKTtcclxuICAgICAgICB0aGlzLl93cmFwcGVyTWVzc2FnZSA9IF93cmFwcGVyTWVzc2FnZTtcclxuICAgICAgICB0aGlzLl9vcmlnaW5hbEV4Y2VwdGlvbiA9IF9vcmlnaW5hbEV4Y2VwdGlvbjtcclxuICAgICAgICB0aGlzLl9vcmlnaW5hbFN0YWNrID0gX29yaWdpbmFsU3RhY2s7XHJcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IF9jb250ZXh0O1xyXG4gICAgICAgIHRoaXMuX3dyYXBwZXJTdGFjayA9IChuZXcgRXJyb3IoX3dyYXBwZXJNZXNzYWdlKSkuc3RhY2s7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZEV4Y2VwdGlvbi5wcm90b3R5cGUsIFwid3JhcHBlck1lc3NhZ2VcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fd3JhcHBlck1lc3NhZ2U7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyYXBwZWRFeGNlcHRpb24ucHJvdG90eXBlLCBcIndyYXBwZXJTdGFja1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl93cmFwcGVyU3RhY2s7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyYXBwZWRFeGNlcHRpb24ucHJvdG90eXBlLCBcIm9yaWdpbmFsRXhjZXB0aW9uXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX29yaWdpbmFsRXhjZXB0aW9uOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcmFwcGVkRXhjZXB0aW9uLnByb3RvdHlwZSwgXCJvcmlnaW5hbFN0YWNrXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX29yaWdpbmFsU3RhY2s7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyYXBwZWRFeGNlcHRpb24ucHJvdG90eXBlLCBcImNvbnRleHRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fY29udGV4dDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZEV4Y2VwdGlvbi5wcm90b3R5cGUsIFwibWVzc2FnZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleGNlcHRpb25faGFuZGxlcl8xLkV4Y2VwdGlvbkhhbmRsZXIuZXhjZXB0aW9uVG9TdHJpbmcodGhpcyk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgV3JhcHBlZEV4Y2VwdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm1lc3NhZ2U7IH07XHJcbiAgICByZXR1cm4gV3JhcHBlZEV4Y2VwdGlvbjtcclxufSkoRXJyb3IpO1xyXG5leHBvcnRzLldyYXBwZWRFeGNlcHRpb24gPSBXcmFwcGVkRXhjZXB0aW9uO1xyXG5mdW5jdGlvbiBtYWtlVHlwZUVycm9yKG1lc3NhZ2UpIHtcclxuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKG1lc3NhZ2UpO1xyXG59XHJcbmV4cG9ydHMubWFrZVR5cGVFcnJvciA9IG1ha2VUeXBlRXJyb3I7XHJcbmZ1bmN0aW9uIHVuaW1wbGVtZW50ZWQoKSB7XHJcbiAgICB0aHJvdyBuZXcgQmFzZUV4Y2VwdGlvbigndW5pbXBsZW1lbnRlZCcpO1xyXG59XHJcbmV4cG9ydHMudW5pbXBsZW1lbnRlZCA9IHVuaW1wbGVtZW50ZWQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4Y2VwdGlvbnMuanMubWFwIiwiJ3VzZSBzdHJpY3QnOyhmdW5jdGlvbiAoTnVtYmVyRm9ybWF0U3R5bGUpIHtcclxuICAgIE51bWJlckZvcm1hdFN0eWxlW051bWJlckZvcm1hdFN0eWxlW1wiRGVjaW1hbFwiXSA9IDBdID0gXCJEZWNpbWFsXCI7XHJcbiAgICBOdW1iZXJGb3JtYXRTdHlsZVtOdW1iZXJGb3JtYXRTdHlsZVtcIlBlcmNlbnRcIl0gPSAxXSA9IFwiUGVyY2VudFwiO1xyXG4gICAgTnVtYmVyRm9ybWF0U3R5bGVbTnVtYmVyRm9ybWF0U3R5bGVbXCJDdXJyZW5jeVwiXSA9IDJdID0gXCJDdXJyZW5jeVwiO1xyXG59KShleHBvcnRzLk51bWJlckZvcm1hdFN0eWxlIHx8IChleHBvcnRzLk51bWJlckZvcm1hdFN0eWxlID0ge30pKTtcclxudmFyIE51bWJlckZvcm1hdFN0eWxlID0gZXhwb3J0cy5OdW1iZXJGb3JtYXRTdHlsZTtcclxudmFyIE51bWJlckZvcm1hdHRlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOdW1iZXJGb3JtYXR0ZXIoKSB7XHJcbiAgICB9XHJcbiAgICBOdW1iZXJGb3JtYXR0ZXIuZm9ybWF0ID0gZnVuY3Rpb24gKG51bWJlciwgbG9jYWxlLCBzdHlsZSwgX2EpIHtcclxuICAgICAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgX2MgPSBfYi5taW5pbXVtSW50ZWdlckRpZ2l0cywgbWluaW11bUludGVnZXJEaWdpdHMgPSBfYyA9PT0gdm9pZCAwID8gMSA6IF9jLCBfZCA9IF9iLm1pbmltdW1GcmFjdGlvbkRpZ2l0cywgbWluaW11bUZyYWN0aW9uRGlnaXRzID0gX2QgPT09IHZvaWQgMCA/IDAgOiBfZCwgX2UgPSBfYi5tYXhpbXVtRnJhY3Rpb25EaWdpdHMsIG1heGltdW1GcmFjdGlvbkRpZ2l0cyA9IF9lID09PSB2b2lkIDAgPyAzIDogX2UsIGN1cnJlbmN5ID0gX2IuY3VycmVuY3ksIF9mID0gX2IuY3VycmVuY3lBc1N5bWJvbCwgY3VycmVuY3lBc1N5bWJvbCA9IF9mID09PSB2b2lkIDAgPyBmYWxzZSA6IF9mO1xyXG4gICAgICAgIHZhciBpbnRsT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgbWluaW11bUludGVnZXJEaWdpdHM6IG1pbmltdW1JbnRlZ2VyRGlnaXRzLFxyXG4gICAgICAgICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IG1pbmltdW1GcmFjdGlvbkRpZ2l0cyxcclxuICAgICAgICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiBtYXhpbXVtRnJhY3Rpb25EaWdpdHNcclxuICAgICAgICB9O1xyXG4gICAgICAgIGludGxPcHRpb25zLnN0eWxlID0gTnVtYmVyRm9ybWF0U3R5bGVbc3R5bGVdLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWYgKHN0eWxlID09IE51bWJlckZvcm1hdFN0eWxlLkN1cnJlbmN5KSB7XHJcbiAgICAgICAgICAgIGludGxPcHRpb25zLmN1cnJlbmN5ID0gY3VycmVuY3k7XHJcbiAgICAgICAgICAgIGludGxPcHRpb25zLmN1cnJlbmN5RGlzcGxheSA9IGN1cnJlbmN5QXNTeW1ib2wgPyAnc3ltYm9sJyA6ICdjb2RlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIGludGxPcHRpb25zKS5mb3JtYXQobnVtYmVyKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTnVtYmVyRm9ybWF0dGVyO1xyXG59KSgpO1xyXG5leHBvcnRzLk51bWJlckZvcm1hdHRlciA9IE51bWJlckZvcm1hdHRlcjtcclxuZnVuY3Rpb24gZGlnaXRDb25kaXRpb24obGVuKSB7XHJcbiAgICByZXR1cm4gbGVuID09IDIgPyAnMi1kaWdpdCcgOiAnbnVtZXJpYyc7XHJcbn1cclxuZnVuY3Rpb24gbmFtZUNvbmRpdGlvbihsZW4pIHtcclxuICAgIHJldHVybiBsZW4gPCA0ID8gJ3Nob3J0JyA6ICdsb25nJztcclxufVxyXG5mdW5jdGlvbiBleHRyYWN0Q29tcG9uZW50cyhwYXR0ZXJuKSB7XHJcbiAgICB2YXIgcmV0ID0ge307XHJcbiAgICB2YXIgaSA9IDAsIGo7XHJcbiAgICB3aGlsZSAoaSA8IHBhdHRlcm4ubGVuZ3RoKSB7XHJcbiAgICAgICAgaiA9IGk7XHJcbiAgICAgICAgd2hpbGUgKGogPCBwYXR0ZXJuLmxlbmd0aCAmJiBwYXR0ZXJuW2pdID09IHBhdHRlcm5baV0pXHJcbiAgICAgICAgICAgIGorKztcclxuICAgICAgICB2YXIgbGVuID0gaiAtIGk7XHJcbiAgICAgICAgc3dpdGNoIChwYXR0ZXJuW2ldKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ0cnOlxyXG4gICAgICAgICAgICAgICAgcmV0LmVyYSA9IG5hbWVDb25kaXRpb24obGVuKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd5JzpcclxuICAgICAgICAgICAgICAgIHJldC55ZWFyID0gZGlnaXRDb25kaXRpb24obGVuKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdNJzpcclxuICAgICAgICAgICAgICAgIGlmIChsZW4gPj0gMylcclxuICAgICAgICAgICAgICAgICAgICByZXQubW9udGggPSBuYW1lQ29uZGl0aW9uKGxlbik7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0Lm1vbnRoID0gZGlnaXRDb25kaXRpb24obGVuKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdkJzpcclxuICAgICAgICAgICAgICAgIHJldC5kYXkgPSBkaWdpdENvbmRpdGlvbihsZW4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ0UnOlxyXG4gICAgICAgICAgICAgICAgcmV0LndlZWtkYXkgPSBuYW1lQ29uZGl0aW9uKGxlbik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnaic6XHJcbiAgICAgICAgICAgICAgICByZXQuaG91ciA9IGRpZ2l0Q29uZGl0aW9uKGxlbik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnaCc6XHJcbiAgICAgICAgICAgICAgICByZXQuaG91ciA9IGRpZ2l0Q29uZGl0aW9uKGxlbik7XHJcbiAgICAgICAgICAgICAgICByZXQuaG91cjEyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdIJzpcclxuICAgICAgICAgICAgICAgIHJldC5ob3VyID0gZGlnaXRDb25kaXRpb24obGVuKTtcclxuICAgICAgICAgICAgICAgIHJldC5ob3VyMTIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdtJzpcclxuICAgICAgICAgICAgICAgIHJldC5taW51dGUgPSBkaWdpdENvbmRpdGlvbihsZW4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxyXG4gICAgICAgICAgICAgICAgcmV0LnNlY29uZCA9IGRpZ2l0Q29uZGl0aW9uKGxlbik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAneic6XHJcbiAgICAgICAgICAgICAgICByZXQudGltZVpvbmVOYW1lID0gJ2xvbmcnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ1onOlxyXG4gICAgICAgICAgICAgICAgcmV0LnRpbWVab25lTmFtZSA9ICdzaG9ydCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaSA9IGo7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XHJcbnZhciBkYXRlRm9ybWF0dGVyQ2FjaGUgPSBuZXcgTWFwKCk7XHJcbnZhciBEYXRlRm9ybWF0dGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERhdGVGb3JtYXR0ZXIoKSB7XHJcbiAgICB9XHJcbiAgICBEYXRlRm9ybWF0dGVyLmZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlLCBsb2NhbGUsIHBhdHRlcm4pIHtcclxuICAgICAgICB2YXIga2V5ID0gbG9jYWxlICsgcGF0dGVybjtcclxuICAgICAgICBpZiAoZGF0ZUZvcm1hdHRlckNhY2hlLmhhcyhrZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRlRm9ybWF0dGVyQ2FjaGUuZ2V0KGtleSkuZm9ybWF0KGRhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZm9ybWF0dGVyID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBleHRyYWN0Q29tcG9uZW50cyhwYXR0ZXJuKSk7XHJcbiAgICAgICAgZGF0ZUZvcm1hdHRlckNhY2hlLnNldChrZXksIGZvcm1hdHRlcik7XHJcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlci5mb3JtYXQoZGF0ZSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERhdGVGb3JtYXR0ZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuRGF0ZUZvcm1hdHRlciA9IERhdGVGb3JtYXR0ZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGwuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBnbG9iYWxTY29wZTtcclxuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBpZiAodHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUpIHtcclxuICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIGFueSB3aXRoIFdvcmtlckdsb2JhbFNjb3BlIGZyb20gbGliLndlYndvcmtlci5kLnRzICMzNDkyXHJcbiAgICAgICAgZ2xvYmFsU2NvcGUgPSBzZWxmO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZ2xvYmFsU2NvcGUgPSBnbG9iYWw7XHJcbiAgICB9XHJcbn1cclxuZWxzZSB7XHJcbiAgICBnbG9iYWxTY29wZSA9IHdpbmRvdztcclxufVxyXG47XHJcbi8vIE5lZWQgdG8gZGVjbGFyZSBhIG5ldyB2YXJpYWJsZSBmb3IgZ2xvYmFsIGhlcmUgc2luY2UgVHlwZVNjcmlwdFxyXG4vLyBleHBvcnRzIHRoZSBvcmlnaW5hbCB2YWx1ZSBvZiB0aGUgc3ltYm9sLlxyXG52YXIgX2dsb2JhbCA9IGdsb2JhbFNjb3BlO1xyXG5leHBvcnRzLmdsb2JhbCA9IF9nbG9iYWw7XHJcbmV4cG9ydHMuVHlwZSA9IEZ1bmN0aW9uO1xyXG5mdW5jdGlvbiBnZXRUeXBlTmFtZUZvckRlYnVnZ2luZyh0eXBlKSB7XHJcbiAgICByZXR1cm4gdHlwZVsnbmFtZSddO1xyXG59XHJcbmV4cG9ydHMuZ2V0VHlwZU5hbWVGb3JEZWJ1Z2dpbmcgPSBnZXRUeXBlTmFtZUZvckRlYnVnZ2luZztcclxuZXhwb3J0cy5NYXRoID0gX2dsb2JhbC5NYXRoO1xyXG5leHBvcnRzLkRhdGUgPSBfZ2xvYmFsLkRhdGU7XHJcbnZhciBhc3NlcnRpb25zRW5hYmxlZF8gPSB0eXBlb2YgX2dsb2JhbFsnYXNzZXJ0J10gIT09ICd1bmRlZmluZWQnO1xyXG5mdW5jdGlvbiBhc3NlcnRpb25zRW5hYmxlZCgpIHtcclxuICAgIHJldHVybiBhc3NlcnRpb25zRW5hYmxlZF87XHJcbn1cclxuZXhwb3J0cy5hc3NlcnRpb25zRW5hYmxlZCA9IGFzc2VydGlvbnNFbmFibGVkO1xyXG4vLyBUT0RPOiByZW1vdmUgY2FsbHMgdG8gYXNzZXJ0IGluIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRcclxuLy8gTm90ZTogQ2FuJ3QganVzdCBleHBvcnQgdGhpcyBhbmQgaW1wb3J0IGluIGluIG90aGVyIGZpbGVzXHJcbi8vIGFzIGBhc3NlcnRgIGlzIGEgcmVzZXJ2ZWQga2V5d29yZCBpbiBEYXJ0XHJcbl9nbG9iYWwuYXNzZXJ0ID0gZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbikge1xyXG4gICAgaWYgKGFzc2VydGlvbnNFbmFibGVkXykge1xyXG4gICAgICAgIF9nbG9iYWxbJ2Fzc2VydCddLmNhbGwoY29uZGl0aW9uKTtcclxuICAgIH1cclxufTtcclxuLy8gVGhpcyBmdW5jdGlvbiBpcyBuZWVkZWQgb25seSB0byBwcm9wZXJseSBzdXBwb3J0IERhcnQncyBjb25zdCBleHByZXNzaW9uc1xyXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvdHMyZGFydC9wdWxsLzE1MSBmb3IgbW9yZSBpbmZvXHJcbmZ1bmN0aW9uIENPTlNUX0VYUFIoZXhwcikge1xyXG4gICAgcmV0dXJuIGV4cHI7XHJcbn1cclxuZXhwb3J0cy5DT05TVF9FWFBSID0gQ09OU1RfRVhQUjtcclxuZnVuY3Rpb24gQ09OU1QoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0OyB9O1xyXG59XHJcbmV4cG9ydHMuQ09OU1QgPSBDT05TVDtcclxuZnVuY3Rpb24gaXNQcmVzZW50KG9iaikge1xyXG4gICAgcmV0dXJuIG9iaiAhPT0gdW5kZWZpbmVkICYmIG9iaiAhPT0gbnVsbDtcclxufVxyXG5leHBvcnRzLmlzUHJlc2VudCA9IGlzUHJlc2VudDtcclxuZnVuY3Rpb24gaXNCbGFuayhvYmopIHtcclxuICAgIHJldHVybiBvYmogPT09IHVuZGVmaW5lZCB8fCBvYmogPT09IG51bGw7XHJcbn1cclxuZXhwb3J0cy5pc0JsYW5rID0gaXNCbGFuaztcclxuZnVuY3Rpb24gaXNTdHJpbmcob2JqKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJzdHJpbmdcIjtcclxufVxyXG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XHJcbmZ1bmN0aW9uIGlzRnVuY3Rpb24ob2JqKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiO1xyXG59XHJcbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XHJcbmZ1bmN0aW9uIGlzVHlwZShvYmopIHtcclxuICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iaik7XHJcbn1cclxuZXhwb3J0cy5pc1R5cGUgPSBpc1R5cGU7XHJcbmZ1bmN0aW9uIGlzU3RyaW5nTWFwKG9iaikge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbDtcclxufVxyXG5leHBvcnRzLmlzU3RyaW5nTWFwID0gaXNTdHJpbmdNYXA7XHJcbmZ1bmN0aW9uIGlzUHJvbWlzZShvYmopIHtcclxuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBfZ2xvYmFsLlByb21pc2U7XHJcbn1cclxuZXhwb3J0cy5pc1Byb21pc2UgPSBpc1Byb21pc2U7XHJcbmZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7XHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShvYmopO1xyXG59XHJcbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XHJcbmZ1bmN0aW9uIGlzTnVtYmVyKG9iaikge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdudW1iZXInO1xyXG59XHJcbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcclxuZnVuY3Rpb24gaXNEYXRlKG9iaikge1xyXG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIGV4cG9ydHMuRGF0ZSAmJiAhaXNOYU4ob2JqLnZhbHVlT2YoKSk7XHJcbn1cclxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XHJcbmZ1bmN0aW9uIHN0cmluZ2lmeSh0b2tlbikge1xyXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gdG9rZW47XHJcbiAgICB9XHJcbiAgICBpZiAodG9rZW4gPT09IHVuZGVmaW5lZCB8fCB0b2tlbiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiAnJyArIHRva2VuO1xyXG4gICAgfVxyXG4gICAgaWYgKHRva2VuLm5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdG9rZW4ubmFtZTtcclxuICAgIH1cclxuICAgIHZhciByZXMgPSB0b2tlbi50b1N0cmluZygpO1xyXG4gICAgdmFyIG5ld0xpbmVJbmRleCA9IHJlcy5pbmRleE9mKFwiXFxuXCIpO1xyXG4gICAgcmV0dXJuIChuZXdMaW5lSW5kZXggPT09IC0xKSA/IHJlcyA6IHJlcy5zdWJzdHJpbmcoMCwgbmV3TGluZUluZGV4KTtcclxufVxyXG5leHBvcnRzLnN0cmluZ2lmeSA9IHN0cmluZ2lmeTtcclxuLy8gc2VyaWFsaXplIC8gZGVzZXJpYWxpemUgZW51bSBleGlzdCBvbmx5IGZvciBjb25zaXN0ZW5jeSB3aXRoIGRhcnQgQVBJXHJcbi8vIGVudW1zIGluIHR5cGVzY3JpcHQgZG9uJ3QgbmVlZCB0byBiZSBzZXJpYWxpemVkXHJcbmZ1bmN0aW9uIHNlcmlhbGl6ZUVudW0odmFsKSB7XHJcbiAgICByZXR1cm4gdmFsO1xyXG59XHJcbmV4cG9ydHMuc2VyaWFsaXplRW51bSA9IHNlcmlhbGl6ZUVudW07XHJcbmZ1bmN0aW9uIGRlc2VyaWFsaXplRW51bSh2YWwsIHZhbHVlcykge1xyXG4gICAgcmV0dXJuIHZhbDtcclxufVxyXG5leHBvcnRzLmRlc2VyaWFsaXplRW51bSA9IGRlc2VyaWFsaXplRW51bTtcclxudmFyIFN0cmluZ1dyYXBwZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3RyaW5nV3JhcHBlcigpIHtcclxuICAgIH1cclxuICAgIFN0cmluZ1dyYXBwZXIuZnJvbUNoYXJDb2RlID0gZnVuY3Rpb24gKGNvZGUpIHsgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7IH07XHJcbiAgICBTdHJpbmdXcmFwcGVyLmNoYXJDb2RlQXQgPSBmdW5jdGlvbiAocywgaW5kZXgpIHsgcmV0dXJuIHMuY2hhckNvZGVBdChpbmRleCk7IH07XHJcbiAgICBTdHJpbmdXcmFwcGVyLnNwbGl0ID0gZnVuY3Rpb24gKHMsIHJlZ0V4cCkgeyByZXR1cm4gcy5zcGxpdChyZWdFeHApOyB9O1xyXG4gICAgU3RyaW5nV3JhcHBlci5lcXVhbHMgPSBmdW5jdGlvbiAocywgczIpIHsgcmV0dXJuIHMgPT09IHMyOyB9O1xyXG4gICAgU3RyaW5nV3JhcHBlci5yZXBsYWNlID0gZnVuY3Rpb24gKHMsIGZyb20sIHJlcGxhY2UpIHtcclxuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKGZyb20sIHJlcGxhY2UpO1xyXG4gICAgfTtcclxuICAgIFN0cmluZ1dyYXBwZXIucmVwbGFjZUFsbCA9IGZ1bmN0aW9uIChzLCBmcm9tLCByZXBsYWNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZShmcm9tLCByZXBsYWNlKTtcclxuICAgIH07XHJcbiAgICBTdHJpbmdXcmFwcGVyLnNsaWNlID0gZnVuY3Rpb24gKHMsIGZyb20sIHRvKSB7XHJcbiAgICAgICAgaWYgKGZyb20gPT09IHZvaWQgMCkgeyBmcm9tID0gMDsgfVxyXG4gICAgICAgIGlmICh0byA9PT0gdm9pZCAwKSB7IHRvID0gbnVsbDsgfVxyXG4gICAgICAgIHJldHVybiBzLnNsaWNlKGZyb20sIHRvID09PSBudWxsID8gdW5kZWZpbmVkIDogdG8pO1xyXG4gICAgfTtcclxuICAgIFN0cmluZ1dyYXBwZXIudG9VcHBlckNhc2UgPSBmdW5jdGlvbiAocykgeyByZXR1cm4gcy50b1VwcGVyQ2FzZSgpOyB9O1xyXG4gICAgU3RyaW5nV3JhcHBlci50b0xvd2VyQ2FzZSA9IGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnRvTG93ZXJDYXNlKCk7IH07XHJcbiAgICBTdHJpbmdXcmFwcGVyLnN0YXJ0c1dpdGggPSBmdW5jdGlvbiAocywgc3RhcnQpIHsgcmV0dXJuIHMuc3RhcnRzV2l0aChzdGFydCk7IH07XHJcbiAgICBTdHJpbmdXcmFwcGVyLnN1YnN0cmluZyA9IGZ1bmN0aW9uIChzLCBzdGFydCwgZW5kKSB7XHJcbiAgICAgICAgaWYgKGVuZCA9PT0gdm9pZCAwKSB7IGVuZCA9IG51bGw7IH1cclxuICAgICAgICByZXR1cm4gcy5zdWJzdHJpbmcoc3RhcnQsIGVuZCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IGVuZCk7XHJcbiAgICB9O1xyXG4gICAgU3RyaW5nV3JhcHBlci5yZXBsYWNlQWxsTWFwcGVkID0gZnVuY3Rpb24gKHMsIGZyb20sIGNiKSB7XHJcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZShmcm9tLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBvZmZzZXQgJiBzdHJpbmcgZnJvbSB0aGUgcmVzdWx0IGFycmF5XHJcbiAgICAgICAgICAgIG1hdGNoZXMuc3BsaWNlKC0yLCAyKTtcclxuICAgICAgICAgICAgLy8gVGhlIGNhbGxiYWNrIHJlY2VpdmVzIG1hdGNoLCBwMSwgLi4uLCBwblxyXG4gICAgICAgICAgICByZXR1cm4gY2IobWF0Y2hlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3RyaW5nV3JhcHBlci5jb250YWlucyA9IGZ1bmN0aW9uIChzLCBzdWJzdHIpIHsgcmV0dXJuIHMuaW5kZXhPZihzdWJzdHIpICE9IC0xOyB9O1xyXG4gICAgU3RyaW5nV3JhcHBlci5jb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICBpZiAoYSA8IGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhID4gYikge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gU3RyaW5nV3JhcHBlcjtcclxufSkoKTtcclxuZXhwb3J0cy5TdHJpbmdXcmFwcGVyID0gU3RyaW5nV3JhcHBlcjtcclxudmFyIFN0cmluZ0pvaW5lciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTdHJpbmdKb2luZXIocGFydHMpIHtcclxuICAgICAgICBpZiAocGFydHMgPT09IHZvaWQgMCkgeyBwYXJ0cyA9IFtdOyB9XHJcbiAgICAgICAgdGhpcy5wYXJ0cyA9IHBhcnRzO1xyXG4gICAgfVxyXG4gICAgU3RyaW5nSm9pbmVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAocGFydCkgeyB0aGlzLnBhcnRzLnB1c2gocGFydCk7IH07XHJcbiAgICBTdHJpbmdKb2luZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5wYXJ0cy5qb2luKFwiXCIpOyB9O1xyXG4gICAgcmV0dXJuIFN0cmluZ0pvaW5lcjtcclxufSkoKTtcclxuZXhwb3J0cy5TdHJpbmdKb2luZXIgPSBTdHJpbmdKb2luZXI7XHJcbnZhciBOdW1iZXJQYXJzZUVycm9yID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhOdW1iZXJQYXJzZUVycm9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTnVtYmVyUGFyc2VFcnJvcihtZXNzYWdlKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxuICAgIH1cclxuICAgIE51bWJlclBhcnNlRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5tZXNzYWdlOyB9O1xyXG4gICAgcmV0dXJuIE51bWJlclBhcnNlRXJyb3I7XHJcbn0pKEVycm9yKTtcclxuZXhwb3J0cy5OdW1iZXJQYXJzZUVycm9yID0gTnVtYmVyUGFyc2VFcnJvcjtcclxudmFyIE51bWJlcldyYXBwZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTnVtYmVyV3JhcHBlcigpIHtcclxuICAgIH1cclxuICAgIE51bWJlcldyYXBwZXIudG9GaXhlZCA9IGZ1bmN0aW9uIChuLCBmcmFjdGlvbkRpZ2l0cykgeyByZXR1cm4gbi50b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKTsgfTtcclxuICAgIE51bWJlcldyYXBwZXIuZXF1YWwgPSBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYSA9PT0gYjsgfTtcclxuICAgIE51bWJlcldyYXBwZXIucGFyc2VJbnRBdXRvUmFkaXggPSBmdW5jdGlvbiAodGV4dCkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBwYXJzZUludCh0ZXh0KTtcclxuICAgICAgICBpZiAoaXNOYU4ocmVzdWx0KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgTnVtYmVyUGFyc2VFcnJvcihcIkludmFsaWQgaW50ZWdlciBsaXRlcmFsIHdoZW4gcGFyc2luZyBcIiArIHRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIE51bWJlcldyYXBwZXIucGFyc2VJbnQgPSBmdW5jdGlvbiAodGV4dCwgcmFkaXgpIHtcclxuICAgICAgICBpZiAocmFkaXggPT0gMTApIHtcclxuICAgICAgICAgICAgaWYgKC9eKFxcLXxcXCspP1swLTldKyQvLnRlc3QodGV4dCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0ZXh0LCByYWRpeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocmFkaXggPT0gMTYpIHtcclxuICAgICAgICAgICAgaWYgKC9eKFxcLXxcXCspP1swLTlBQkNERUZhYmNkZWZdKyQvLnRlc3QodGV4dCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0ZXh0LCByYWRpeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBwYXJzZUludCh0ZXh0LCByYWRpeCk7XHJcbiAgICAgICAgICAgIGlmICghaXNOYU4ocmVzdWx0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgTnVtYmVyUGFyc2VFcnJvcihcIkludmFsaWQgaW50ZWdlciBsaXRlcmFsIHdoZW4gcGFyc2luZyBcIiArIHRleHQgKyBcIiBpbiBiYXNlIFwiICtcclxuICAgICAgICAgICAgcmFkaXgpO1xyXG4gICAgfTtcclxuICAgIC8vIFRPRE86IE5hTiBpcyBhIHZhbGlkIGxpdGVyYWwgYnV0IGlzIHJldHVybmVkIGJ5IHBhcnNlRmxvYXQgdG8gaW5kaWNhdGUgYW4gZXJyb3IuXHJcbiAgICBOdW1iZXJXcmFwcGVyLnBhcnNlRmxvYXQgPSBmdW5jdGlvbiAodGV4dCkgeyByZXR1cm4gcGFyc2VGbG9hdCh0ZXh0KTsgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOdW1iZXJXcmFwcGVyLCBcIk5hTlwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOYU47IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgTnVtYmVyV3JhcHBlci5pc05hTiA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gaXNOYU4odmFsdWUpOyB9O1xyXG4gICAgTnVtYmVyV3JhcHBlci5pc0ludGVnZXIgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIE51bWJlci5pc0ludGVnZXIodmFsdWUpOyB9O1xyXG4gICAgcmV0dXJuIE51bWJlcldyYXBwZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuTnVtYmVyV3JhcHBlciA9IE51bWJlcldyYXBwZXI7XHJcbmV4cG9ydHMuUmVnRXhwID0gX2dsb2JhbC5SZWdFeHA7XHJcbnZhciBSZWdFeHBXcmFwcGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlZ0V4cFdyYXBwZXIoKSB7XHJcbiAgICB9XHJcbiAgICBSZWdFeHBXcmFwcGVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChyZWdFeHBTdHIsIGZsYWdzKSB7XHJcbiAgICAgICAgaWYgKGZsYWdzID09PSB2b2lkIDApIHsgZmxhZ3MgPSAnJzsgfVxyXG4gICAgICAgIGZsYWdzID0gZmxhZ3MucmVwbGFjZSgvZy9nLCAnJyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBfZ2xvYmFsLlJlZ0V4cChyZWdFeHBTdHIsIGZsYWdzICsgJ2cnKTtcclxuICAgIH07XHJcbiAgICBSZWdFeHBXcmFwcGVyLmZpcnN0TWF0Y2ggPSBmdW5jdGlvbiAocmVnRXhwLCBpbnB1dCkge1xyXG4gICAgICAgIC8vIFJlc2V0IG11bHRpbWF0Y2ggcmVnZXggc3RhdGVcclxuICAgICAgICByZWdFeHAubGFzdEluZGV4ID0gMDtcclxuICAgICAgICByZXR1cm4gcmVnRXhwLmV4ZWMoaW5wdXQpO1xyXG4gICAgfTtcclxuICAgIFJlZ0V4cFdyYXBwZXIudGVzdCA9IGZ1bmN0aW9uIChyZWdFeHAsIGlucHV0KSB7XHJcbiAgICAgICAgcmVnRXhwLmxhc3RJbmRleCA9IDA7XHJcbiAgICAgICAgcmV0dXJuIHJlZ0V4cC50ZXN0KGlucHV0KTtcclxuICAgIH07XHJcbiAgICBSZWdFeHBXcmFwcGVyLm1hdGNoZXIgPSBmdW5jdGlvbiAocmVnRXhwLCBpbnB1dCkge1xyXG4gICAgICAgIC8vIFJlc2V0IHJlZ2V4IHN0YXRlIGZvciB0aGUgY2FzZVxyXG4gICAgICAgIC8vIHNvbWVvbmUgZGlkIG5vdCBsb29wIG92ZXIgYWxsIG1hdGNoZXNcclxuICAgICAgICAvLyBsYXN0IHRpbWUuXHJcbiAgICAgICAgcmVnRXhwLmxhc3RJbmRleCA9IDA7XHJcbiAgICAgICAgcmV0dXJuIHsgcmU6IHJlZ0V4cCwgaW5wdXQ6IGlucHV0IH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlZ0V4cFdyYXBwZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuUmVnRXhwV3JhcHBlciA9IFJlZ0V4cFdyYXBwZXI7XHJcbnZhciBSZWdFeHBNYXRjaGVyV3JhcHBlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZWdFeHBNYXRjaGVyV3JhcHBlcigpIHtcclxuICAgIH1cclxuICAgIFJlZ0V4cE1hdGNoZXJXcmFwcGVyLm5leHQgPSBmdW5jdGlvbiAobWF0Y2hlcikge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVyLnJlLmV4ZWMobWF0Y2hlci5pbnB1dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlZ0V4cE1hdGNoZXJXcmFwcGVyO1xyXG59KSgpO1xyXG5leHBvcnRzLlJlZ0V4cE1hdGNoZXJXcmFwcGVyID0gUmVnRXhwTWF0Y2hlcldyYXBwZXI7XHJcbnZhciBGdW5jdGlvbldyYXBwZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRnVuY3Rpb25XcmFwcGVyKCkge1xyXG4gICAgfVxyXG4gICAgRnVuY3Rpb25XcmFwcGVyLmFwcGx5ID0gZnVuY3Rpb24gKGZuLCBwb3NBcmdzKSB7IHJldHVybiBmbi5hcHBseShudWxsLCBwb3NBcmdzKTsgfTtcclxuICAgIHJldHVybiBGdW5jdGlvbldyYXBwZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuRnVuY3Rpb25XcmFwcGVyID0gRnVuY3Rpb25XcmFwcGVyO1xyXG4vLyBKUyBoYXMgTmFOICE9PSBOYU5cclxuZnVuY3Rpb24gbG9vc2VJZGVudGljYWwoYSwgYikge1xyXG4gICAgcmV0dXJuIGEgPT09IGIgfHwgdHlwZW9mIGEgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGIgPT09IFwibnVtYmVyXCIgJiYgaXNOYU4oYSkgJiYgaXNOYU4oYik7XHJcbn1cclxuZXhwb3J0cy5sb29zZUlkZW50aWNhbCA9IGxvb3NlSWRlbnRpY2FsO1xyXG4vLyBKUyBjb25zaWRlcnMgTmFOIGlzIHRoZSBzYW1lIGFzIE5hTiBmb3IgbWFwIEtleSAod2hpbGUgTmFOICE9PSBOYU4gb3RoZXJ3aXNlKVxyXG4vLyBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWFwXHJcbmZ1bmN0aW9uIGdldE1hcEtleSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbmV4cG9ydHMuZ2V0TWFwS2V5ID0gZ2V0TWFwS2V5O1xyXG5mdW5jdGlvbiBub3JtYWxpemVCbGFuayhvYmopIHtcclxuICAgIHJldHVybiBpc0JsYW5rKG9iaikgPyBudWxsIDogb2JqO1xyXG59XHJcbmV4cG9ydHMubm9ybWFsaXplQmxhbmsgPSBub3JtYWxpemVCbGFuaztcclxuZnVuY3Rpb24gbm9ybWFsaXplQm9vbChvYmopIHtcclxuICAgIHJldHVybiBpc0JsYW5rKG9iaikgPyBmYWxzZSA6IG9iajtcclxufVxyXG5leHBvcnRzLm5vcm1hbGl6ZUJvb2wgPSBub3JtYWxpemVCb29sO1xyXG5mdW5jdGlvbiBpc0pzT2JqZWN0KG8pIHtcclxuICAgIHJldHVybiBvICE9PSBudWxsICYmICh0eXBlb2YgbyA9PT0gXCJmdW5jdGlvblwiIHx8IHR5cGVvZiBvID09PSBcIm9iamVjdFwiKTtcclxufVxyXG5leHBvcnRzLmlzSnNPYmplY3QgPSBpc0pzT2JqZWN0O1xyXG5mdW5jdGlvbiBwcmludChvYmopIHtcclxuICAgIGNvbnNvbGUubG9nKG9iaik7XHJcbn1cclxuZXhwb3J0cy5wcmludCA9IHByaW50O1xyXG4vLyBDYW4ndCBiZSBhbGwgdXBwZXJjYXNlIGFzIG91ciB0cmFuc3BpbGVyIHdvdWxkIHRoaW5rIGl0IGlzIGEgc3BlY2lhbCBkaXJlY3RpdmUuLi5cclxudmFyIEpzb24gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSnNvbigpIHtcclxuICAgIH1cclxuICAgIEpzb24ucGFyc2UgPSBmdW5jdGlvbiAocykgeyByZXR1cm4gX2dsb2JhbC5KU09OLnBhcnNlKHMpOyB9O1xyXG4gICAgSnNvbi5zdHJpbmdpZnkgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIC8vIERhcnQgZG9lc24ndCB0YWtlIDMgYXJndW1lbnRzXHJcbiAgICAgICAgcmV0dXJuIF9nbG9iYWwuSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEpzb247XHJcbn0pKCk7XHJcbmV4cG9ydHMuSnNvbiA9IEpzb247XHJcbnZhciBEYXRlV3JhcHBlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEYXRlV3JhcHBlcigpIHtcclxuICAgIH1cclxuICAgIERhdGVXcmFwcGVyLmNyZWF0ZSA9IGZ1bmN0aW9uICh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHMpIHtcclxuICAgICAgICBpZiAobW9udGggPT09IHZvaWQgMCkgeyBtb250aCA9IDE7IH1cclxuICAgICAgICBpZiAoZGF5ID09PSB2b2lkIDApIHsgZGF5ID0gMTsgfVxyXG4gICAgICAgIGlmIChob3VyID09PSB2b2lkIDApIHsgaG91ciA9IDA7IH1cclxuICAgICAgICBpZiAobWludXRlcyA9PT0gdm9pZCAwKSB7IG1pbnV0ZXMgPSAwOyB9XHJcbiAgICAgICAgaWYgKHNlY29uZHMgPT09IHZvaWQgMCkgeyBzZWNvbmRzID0gMDsgfVxyXG4gICAgICAgIGlmIChtaWxsaXNlY29uZHMgPT09IHZvaWQgMCkgeyBtaWxsaXNlY29uZHMgPSAwOyB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBleHBvcnRzLkRhdGUoeWVhciwgbW9udGggLSAxLCBkYXksIGhvdXIsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcyk7XHJcbiAgICB9O1xyXG4gICAgRGF0ZVdyYXBwZXIuZnJvbUlTT1N0cmluZyA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIG5ldyBleHBvcnRzLkRhdGUoc3RyKTsgfTtcclxuICAgIERhdGVXcmFwcGVyLmZyb21NaWxsaXMgPSBmdW5jdGlvbiAobXMpIHsgcmV0dXJuIG5ldyBleHBvcnRzLkRhdGUobXMpOyB9O1xyXG4gICAgRGF0ZVdyYXBwZXIudG9NaWxsaXMgPSBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gZGF0ZS5nZXRUaW1lKCk7IH07XHJcbiAgICBEYXRlV3JhcHBlci5ub3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgZXhwb3J0cy5EYXRlKCk7IH07XHJcbiAgICBEYXRlV3JhcHBlci50b0pzb24gPSBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gZGF0ZS50b0pTT04oKTsgfTtcclxuICAgIHJldHVybiBEYXRlV3JhcHBlcjtcclxufSkoKTtcclxuZXhwb3J0cy5EYXRlV3JhcHBlciA9IERhdGVXcmFwcGVyO1xyXG5mdW5jdGlvbiBzZXRWYWx1ZU9uUGF0aChnbG9iYWwsIHBhdGgsIHZhbHVlKSB7XHJcbiAgICB2YXIgcGFydHMgPSBwYXRoLnNwbGl0KCcuJyk7XHJcbiAgICB2YXIgb2JqID0gZ2xvYmFsO1xyXG4gICAgd2hpbGUgKHBhcnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICB2YXIgbmFtZSA9IHBhcnRzLnNoaWZ0KCk7XHJcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4gICAgICAgICAgICBvYmogPSBvYmpbbmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvYmogPSBvYmpbbmFtZV0gPSB7fTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAob2JqID09PSB1bmRlZmluZWQgfHwgb2JqID09PSBudWxsKSB7XHJcbiAgICAgICAgb2JqID0ge307XHJcbiAgICB9XHJcbiAgICBvYmpbcGFydHMuc2hpZnQoKV0gPSB2YWx1ZTtcclxufVxyXG5leHBvcnRzLnNldFZhbHVlT25QYXRoID0gc2V0VmFsdWVPblBhdGg7XHJcbnZhciBfc3ltYm9sSXRlcmF0b3IgPSBudWxsO1xyXG5mdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpIHtcclxuICAgIGlmIChpc0JsYW5rKF9zeW1ib2xJdGVyYXRvcikpIHtcclxuICAgICAgICBpZiAoaXNQcmVzZW50KFN5bWJvbCkgJiYgaXNQcmVzZW50KFN5bWJvbC5pdGVyYXRvcikpIHtcclxuICAgICAgICAgICAgX3N5bWJvbEl0ZXJhdG9yID0gU3ltYm9sLml0ZXJhdG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZXM2LXNoaW0gc3BlY2lmaWMgbG9naWNcclxuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhNYXAucHJvdG90eXBlKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChrZXkgIT09ICdlbnRyaWVzJyAmJiBrZXkgIT09ICdzaXplJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGVba2V5XSA9PT0gTWFwLnByb3RvdHlwZVsnZW50cmllcyddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3N5bWJvbEl0ZXJhdG9yID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9zeW1ib2xJdGVyYXRvcjtcclxufVxyXG5leHBvcnRzLmdldFN5bWJvbEl0ZXJhdG9yID0gZ2V0U3ltYm9sSXRlcmF0b3I7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhbmcuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG5leHBvcnRzLk1hdGggPSBsYW5nXzEuZ2xvYmFsLk1hdGg7XHJcbmV4cG9ydHMuTmFOID0gdHlwZW9mIGV4cG9ydHMuTmFOO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXRoLmpzLm1hcCIsIid1c2Ugc3RyaWN0JzsvLyBQcm9taXNlcyBhcmUgcHV0IGludG8gdGhlaXIgb3duIGZhY2FkZSBmaWxlIHNvIHRoYXQgdGhleSBjYW4gYmUgdXNlZCB3aXRob3V0XHJcbi8vIGludHJvZHVjaW5nIGEgZGVwZW5kZW5jeSBvbiByeGpzLiBUaGV5IGFyZSByZS1leHBvcnRlZCB0aHJvdWdoIGZhY2FkZS9hc3luYy5cclxudmFyIFByb21pc2VXcmFwcGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFByb21pc2VXcmFwcGVyKCkge1xyXG4gICAgfVxyXG4gICAgUHJvbWlzZVdyYXBwZXIucmVzb2x2ZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZShvYmopOyB9O1xyXG4gICAgUHJvbWlzZVdyYXBwZXIucmVqZWN0ID0gZnVuY3Rpb24gKG9iaiwgXykgeyByZXR1cm4gUHJvbWlzZS5yZWplY3Qob2JqKTsgfTtcclxuICAgIC8vIE5vdGU6IFdlIGNhbid0IHJlbmFtZSB0aGlzIG1ldGhvZCBpbnRvIGBjYXRjaGAsIGFzIHRoaXMgaXMgbm90IGEgdmFsaWRcclxuICAgIC8vIG1ldGhvZCBuYW1lIGluIERhcnQuXHJcbiAgICBQcm9taXNlV3JhcHBlci5jYXRjaEVycm9yID0gZnVuY3Rpb24gKHByb21pc2UsIG9uRXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZS5jYXRjaChvbkVycm9yKTtcclxuICAgIH07XHJcbiAgICBQcm9taXNlV3JhcHBlci5hbGwgPSBmdW5jdGlvbiAocHJvbWlzZXMpIHtcclxuICAgICAgICBpZiAocHJvbWlzZXMubGVuZ3RoID09IDApXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XHJcbiAgICB9O1xyXG4gICAgUHJvbWlzZVdyYXBwZXIudGhlbiA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdWNjZXNzLCByZWplY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKHN1Y2Nlc3MsIHJlamVjdGlvbik7XHJcbiAgICB9O1xyXG4gICAgUHJvbWlzZVdyYXBwZXIud3JhcCA9IGZ1bmN0aW9uIChjb21wdXRhdGlvbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJlcyhjb21wdXRhdGlvbigpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgcmVqKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUHJvbWlzZVdyYXBwZXIuY29tcGxldGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZXNvbHZlO1xyXG4gICAgICAgIHZhciByZWplY3Q7XHJcbiAgICAgICAgdmFyIHAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHtcclxuICAgICAgICAgICAgcmVzb2x2ZSA9IHJlcztcclxuICAgICAgICAgICAgcmVqZWN0ID0gcmVqO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB7IHByb21pc2U6IHAsIHJlc29sdmU6IHJlc29sdmUsIHJlamVjdDogcmVqZWN0IH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFByb21pc2VXcmFwcGVyO1xyXG59KSgpO1xyXG5leHBvcnRzLlByb21pc2VXcmFwcGVyID0gUHJvbWlzZVdyYXBwZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb21pc2UuanMubWFwIiwiJ3VzZSBzdHJpY3QnOy8qKlxyXG4gKiBAbW9kdWxlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGlzIG1vZHVsZSBpcyB1c2VkIGZvciBoYW5kbGluZyB1c2VyIGlucHV0LCBieSBkZWZpbmluZyBhbmQgYnVpbGRpbmcgYSB7QGxpbmsgQ29udHJvbEdyb3VwfSB0aGF0XHJcbiAqIGNvbnNpc3RzIG9mXHJcbiAqIHtAbGluayBDb250cm9sfSBvYmplY3RzLCBhbmQgbWFwcGluZyB0aGVtIG9udG8gdGhlIERPTS4ge0BsaW5rIENvbnRyb2x9IG9iamVjdHMgY2FuIHRoZW4gYmUgdXNlZFxyXG4gKiB0byByZWFkIGluZm9ybWF0aW9uXHJcbiAqIGZyb20gdGhlIGZvcm0gRE9NIGVsZW1lbnRzLlxyXG4gKlxyXG4gKiBUaGlzIG1vZHVsZSBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGBhbmd1bGFyMmAgbW9kdWxlOyB5b3UgbXVzdCBpbXBvcnQgdGhlIGZvcm1zIG1vZHVsZVxyXG4gKiBleHBsaWNpdGx5LlxyXG4gKlxyXG4gKi9cclxudmFyIG1vZGVsXzEgPSByZXF1aXJlKCcuL2Zvcm1zL21vZGVsJyk7XHJcbmV4cG9ydHMuQWJzdHJhY3RDb250cm9sID0gbW9kZWxfMS5BYnN0cmFjdENvbnRyb2w7XHJcbmV4cG9ydHMuQ29udHJvbCA9IG1vZGVsXzEuQ29udHJvbDtcclxuZXhwb3J0cy5Db250cm9sR3JvdXAgPSBtb2RlbF8xLkNvbnRyb2xHcm91cDtcclxuZXhwb3J0cy5Db250cm9sQXJyYXkgPSBtb2RlbF8xLkNvbnRyb2xBcnJheTtcclxudmFyIGFic3RyYWN0X2NvbnRyb2xfZGlyZWN0aXZlXzEgPSByZXF1aXJlKCcuL2Zvcm1zL2RpcmVjdGl2ZXMvYWJzdHJhY3RfY29udHJvbF9kaXJlY3RpdmUnKTtcclxuZXhwb3J0cy5BYnN0cmFjdENvbnRyb2xEaXJlY3RpdmUgPSBhYnN0cmFjdF9jb250cm9sX2RpcmVjdGl2ZV8xLkFic3RyYWN0Q29udHJvbERpcmVjdGl2ZTtcclxudmFyIGNvbnRyb2xfY29udGFpbmVyXzEgPSByZXF1aXJlKCcuL2Zvcm1zL2RpcmVjdGl2ZXMvY29udHJvbF9jb250YWluZXInKTtcclxuZXhwb3J0cy5Db250cm9sQ29udGFpbmVyID0gY29udHJvbF9jb250YWluZXJfMS5Db250cm9sQ29udGFpbmVyO1xyXG52YXIgbmdfY29udHJvbF9uYW1lXzEgPSByZXF1aXJlKCcuL2Zvcm1zL2RpcmVjdGl2ZXMvbmdfY29udHJvbF9uYW1lJyk7XHJcbmV4cG9ydHMuTmdDb250cm9sTmFtZSA9IG5nX2NvbnRyb2xfbmFtZV8xLk5nQ29udHJvbE5hbWU7XHJcbnZhciBuZ19mb3JtX2NvbnRyb2xfMSA9IHJlcXVpcmUoJy4vZm9ybXMvZGlyZWN0aXZlcy9uZ19mb3JtX2NvbnRyb2wnKTtcclxuZXhwb3J0cy5OZ0Zvcm1Db250cm9sID0gbmdfZm9ybV9jb250cm9sXzEuTmdGb3JtQ29udHJvbDtcclxudmFyIG5nX21vZGVsXzEgPSByZXF1aXJlKCcuL2Zvcm1zL2RpcmVjdGl2ZXMvbmdfbW9kZWwnKTtcclxuZXhwb3J0cy5OZ01vZGVsID0gbmdfbW9kZWxfMS5OZ01vZGVsO1xyXG52YXIgbmdfY29udHJvbF8xID0gcmVxdWlyZSgnLi9mb3Jtcy9kaXJlY3RpdmVzL25nX2NvbnRyb2wnKTtcclxuZXhwb3J0cy5OZ0NvbnRyb2wgPSBuZ19jb250cm9sXzEuTmdDb250cm9sO1xyXG52YXIgbmdfY29udHJvbF9ncm91cF8xID0gcmVxdWlyZSgnLi9mb3Jtcy9kaXJlY3RpdmVzL25nX2NvbnRyb2xfZ3JvdXAnKTtcclxuZXhwb3J0cy5OZ0NvbnRyb2xHcm91cCA9IG5nX2NvbnRyb2xfZ3JvdXBfMS5OZ0NvbnRyb2xHcm91cDtcclxudmFyIG5nX2Zvcm1fbW9kZWxfMSA9IHJlcXVpcmUoJy4vZm9ybXMvZGlyZWN0aXZlcy9uZ19mb3JtX21vZGVsJyk7XHJcbmV4cG9ydHMuTmdGb3JtTW9kZWwgPSBuZ19mb3JtX21vZGVsXzEuTmdGb3JtTW9kZWw7XHJcbnZhciBuZ19mb3JtXzEgPSByZXF1aXJlKCcuL2Zvcm1zL2RpcmVjdGl2ZXMvbmdfZm9ybScpO1xyXG5leHBvcnRzLk5nRm9ybSA9IG5nX2Zvcm1fMS5OZ0Zvcm07XHJcbnZhciBkZWZhdWx0X3ZhbHVlX2FjY2Vzc29yXzEgPSByZXF1aXJlKCcuL2Zvcm1zL2RpcmVjdGl2ZXMvZGVmYXVsdF92YWx1ZV9hY2Nlc3NvcicpO1xyXG5leHBvcnRzLkRlZmF1bHRWYWx1ZUFjY2Vzc29yID0gZGVmYXVsdF92YWx1ZV9hY2Nlc3Nvcl8xLkRlZmF1bHRWYWx1ZUFjY2Vzc29yO1xyXG52YXIgbmdfY29udHJvbF9zdGF0dXNfMSA9IHJlcXVpcmUoJy4vZm9ybXMvZGlyZWN0aXZlcy9uZ19jb250cm9sX3N0YXR1cycpO1xyXG5leHBvcnRzLk5nQ29udHJvbFN0YXR1cyA9IG5nX2NvbnRyb2xfc3RhdHVzXzEuTmdDb250cm9sU3RhdHVzO1xyXG52YXIgY2hlY2tib3hfdmFsdWVfYWNjZXNzb3JfMSA9IHJlcXVpcmUoJy4vZm9ybXMvZGlyZWN0aXZlcy9jaGVja2JveF92YWx1ZV9hY2Nlc3NvcicpO1xyXG5leHBvcnRzLkNoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3IgPSBjaGVja2JveF92YWx1ZV9hY2Nlc3Nvcl8xLkNoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3I7XHJcbnZhciBzZWxlY3RfY29udHJvbF92YWx1ZV9hY2Nlc3Nvcl8xID0gcmVxdWlyZSgnLi9mb3Jtcy9kaXJlY3RpdmVzL3NlbGVjdF9jb250cm9sX3ZhbHVlX2FjY2Vzc29yJyk7XHJcbmV4cG9ydHMuTmdTZWxlY3RPcHRpb24gPSBzZWxlY3RfY29udHJvbF92YWx1ZV9hY2Nlc3Nvcl8xLk5nU2VsZWN0T3B0aW9uO1xyXG5leHBvcnRzLlNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yID0gc2VsZWN0X2NvbnRyb2xfdmFsdWVfYWNjZXNzb3JfMS5TZWxlY3RDb250cm9sVmFsdWVBY2Nlc3NvcjtcclxudmFyIGRpcmVjdGl2ZXNfMSA9IHJlcXVpcmUoJy4vZm9ybXMvZGlyZWN0aXZlcycpO1xyXG5leHBvcnRzLkZPUk1fRElSRUNUSVZFUyA9IGRpcmVjdGl2ZXNfMS5GT1JNX0RJUkVDVElWRVM7XHJcbnZhciB2YWxpZGF0b3JzXzEgPSByZXF1aXJlKCcuL2Zvcm1zL3ZhbGlkYXRvcnMnKTtcclxuZXhwb3J0cy5OR19WQUxJREFUT1JTID0gdmFsaWRhdG9yc18xLk5HX1ZBTElEQVRPUlM7XHJcbmV4cG9ydHMuVmFsaWRhdG9ycyA9IHZhbGlkYXRvcnNfMS5WYWxpZGF0b3JzO1xyXG52YXIgdmFsaWRhdG9yc18yID0gcmVxdWlyZSgnLi9mb3Jtcy9kaXJlY3RpdmVzL3ZhbGlkYXRvcnMnKTtcclxuZXhwb3J0cy5SZXF1aXJlZFZhbGlkYXRvciA9IHZhbGlkYXRvcnNfMi5SZXF1aXJlZFZhbGlkYXRvcjtcclxuZXhwb3J0cy5NaW5MZW5ndGhWYWxpZGF0b3IgPSB2YWxpZGF0b3JzXzIuTWluTGVuZ3RoVmFsaWRhdG9yO1xyXG5leHBvcnRzLk1heExlbmd0aFZhbGlkYXRvciA9IHZhbGlkYXRvcnNfMi5NYXhMZW5ndGhWYWxpZGF0b3I7XHJcbnZhciBmb3JtX2J1aWxkZXJfMSA9IHJlcXVpcmUoJy4vZm9ybXMvZm9ybV9idWlsZGVyJyk7XHJcbmV4cG9ydHMuRm9ybUJ1aWxkZXIgPSBmb3JtX2J1aWxkZXJfMS5Gb3JtQnVpbGRlcjtcclxudmFyIGZvcm1fYnVpbGRlcl8yID0gcmVxdWlyZSgnLi9mb3Jtcy9mb3JtX2J1aWxkZXInKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJy4vZmFjYWRlL2xhbmcnKTtcclxuLyoqXHJcbiAqIFNob3J0aGFuZCBzZXQgb2YgcHJvdmlkZXJzIHVzZWQgZm9yIGJ1aWxkaW5nIEFuZ3VsYXIgZm9ybXMuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlOlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGJvb3RzdHJhcChNeUFwcCwgW0ZPUk1fUFJPVklERVJTXSk7XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0cy5GT1JNX1BST1ZJREVSUyA9IGxhbmdfMS5DT05TVF9FWFBSKFtmb3JtX2J1aWxkZXJfMi5Gb3JtQnVpbGRlcl0pO1xyXG4vKipcclxuICogQGRlcHJlY2F0ZWRcclxuICovXHJcbmV4cG9ydHMuRk9STV9CSU5ESU5HUyA9IGV4cG9ydHMuRk9STV9QUk9WSURFUlM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1zLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIG5nX2NvbnRyb2xfbmFtZV8xID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL25nX2NvbnRyb2xfbmFtZScpO1xyXG52YXIgbmdfZm9ybV9jb250cm9sXzEgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvbmdfZm9ybV9jb250cm9sJyk7XHJcbnZhciBuZ19tb2RlbF8xID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL25nX21vZGVsJyk7XHJcbnZhciBuZ19jb250cm9sX2dyb3VwXzEgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvbmdfY29udHJvbF9ncm91cCcpO1xyXG52YXIgbmdfZm9ybV9tb2RlbF8xID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL25nX2Zvcm1fbW9kZWwnKTtcclxudmFyIG5nX2Zvcm1fMSA9IHJlcXVpcmUoJy4vZGlyZWN0aXZlcy9uZ19mb3JtJyk7XHJcbnZhciBkZWZhdWx0X3ZhbHVlX2FjY2Vzc29yXzEgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvZGVmYXVsdF92YWx1ZV9hY2Nlc3NvcicpO1xyXG52YXIgY2hlY2tib3hfdmFsdWVfYWNjZXNzb3JfMSA9IHJlcXVpcmUoJy4vZGlyZWN0aXZlcy9jaGVja2JveF92YWx1ZV9hY2Nlc3NvcicpO1xyXG52YXIgbnVtYmVyX3ZhbHVlX2FjY2Vzc29yXzEgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvbnVtYmVyX3ZhbHVlX2FjY2Vzc29yJyk7XHJcbnZhciBuZ19jb250cm9sX3N0YXR1c18xID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL25nX2NvbnRyb2xfc3RhdHVzJyk7XHJcbnZhciBzZWxlY3RfY29udHJvbF92YWx1ZV9hY2Nlc3Nvcl8xID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL3NlbGVjdF9jb250cm9sX3ZhbHVlX2FjY2Vzc29yJyk7XHJcbnZhciB2YWxpZGF0b3JzXzEgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvdmFsaWRhdG9ycycpO1xyXG52YXIgbmdfY29udHJvbF9uYW1lXzIgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvbmdfY29udHJvbF9uYW1lJyk7XHJcbmV4cG9ydHMuTmdDb250cm9sTmFtZSA9IG5nX2NvbnRyb2xfbmFtZV8yLk5nQ29udHJvbE5hbWU7XHJcbnZhciBuZ19mb3JtX2NvbnRyb2xfMiA9IHJlcXVpcmUoJy4vZGlyZWN0aXZlcy9uZ19mb3JtX2NvbnRyb2wnKTtcclxuZXhwb3J0cy5OZ0Zvcm1Db250cm9sID0gbmdfZm9ybV9jb250cm9sXzIuTmdGb3JtQ29udHJvbDtcclxudmFyIG5nX21vZGVsXzIgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvbmdfbW9kZWwnKTtcclxuZXhwb3J0cy5OZ01vZGVsID0gbmdfbW9kZWxfMi5OZ01vZGVsO1xyXG52YXIgbmdfY29udHJvbF8xID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL25nX2NvbnRyb2wnKTtcclxuZXhwb3J0cy5OZ0NvbnRyb2wgPSBuZ19jb250cm9sXzEuTmdDb250cm9sO1xyXG52YXIgbmdfY29udHJvbF9ncm91cF8yID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL25nX2NvbnRyb2xfZ3JvdXAnKTtcclxuZXhwb3J0cy5OZ0NvbnRyb2xHcm91cCA9IG5nX2NvbnRyb2xfZ3JvdXBfMi5OZ0NvbnRyb2xHcm91cDtcclxudmFyIG5nX2Zvcm1fbW9kZWxfMiA9IHJlcXVpcmUoJy4vZGlyZWN0aXZlcy9uZ19mb3JtX21vZGVsJyk7XHJcbmV4cG9ydHMuTmdGb3JtTW9kZWwgPSBuZ19mb3JtX21vZGVsXzIuTmdGb3JtTW9kZWw7XHJcbnZhciBuZ19mb3JtXzIgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvbmdfZm9ybScpO1xyXG5leHBvcnRzLk5nRm9ybSA9IG5nX2Zvcm1fMi5OZ0Zvcm07XHJcbnZhciBkZWZhdWx0X3ZhbHVlX2FjY2Vzc29yXzIgPSByZXF1aXJlKCcuL2RpcmVjdGl2ZXMvZGVmYXVsdF92YWx1ZV9hY2Nlc3NvcicpO1xyXG5leHBvcnRzLkRlZmF1bHRWYWx1ZUFjY2Vzc29yID0gZGVmYXVsdF92YWx1ZV9hY2Nlc3Nvcl8yLkRlZmF1bHRWYWx1ZUFjY2Vzc29yO1xyXG52YXIgY2hlY2tib3hfdmFsdWVfYWNjZXNzb3JfMiA9IHJlcXVpcmUoJy4vZGlyZWN0aXZlcy9jaGVja2JveF92YWx1ZV9hY2Nlc3NvcicpO1xyXG5leHBvcnRzLkNoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3IgPSBjaGVja2JveF92YWx1ZV9hY2Nlc3Nvcl8yLkNoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3I7XHJcbnZhciBzZWxlY3RfY29udHJvbF92YWx1ZV9hY2Nlc3Nvcl8yID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL3NlbGVjdF9jb250cm9sX3ZhbHVlX2FjY2Vzc29yJyk7XHJcbmV4cG9ydHMuU2VsZWN0Q29udHJvbFZhbHVlQWNjZXNzb3IgPSBzZWxlY3RfY29udHJvbF92YWx1ZV9hY2Nlc3Nvcl8yLlNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yO1xyXG5leHBvcnRzLk5nU2VsZWN0T3B0aW9uID0gc2VsZWN0X2NvbnRyb2xfdmFsdWVfYWNjZXNzb3JfMi5OZ1NlbGVjdE9wdGlvbjtcclxudmFyIHZhbGlkYXRvcnNfMiA9IHJlcXVpcmUoJy4vZGlyZWN0aXZlcy92YWxpZGF0b3JzJyk7XHJcbmV4cG9ydHMuUmVxdWlyZWRWYWxpZGF0b3IgPSB2YWxpZGF0b3JzXzIuUmVxdWlyZWRWYWxpZGF0b3I7XHJcbmV4cG9ydHMuTWluTGVuZ3RoVmFsaWRhdG9yID0gdmFsaWRhdG9yc18yLk1pbkxlbmd0aFZhbGlkYXRvcjtcclxuZXhwb3J0cy5NYXhMZW5ndGhWYWxpZGF0b3IgPSB2YWxpZGF0b3JzXzIuTWF4TGVuZ3RoVmFsaWRhdG9yO1xyXG52YXIgbmdfY29udHJvbF9zdGF0dXNfMiA9IHJlcXVpcmUoJy4vZGlyZWN0aXZlcy9uZ19jb250cm9sX3N0YXR1cycpO1xyXG5leHBvcnRzLk5nQ29udHJvbFN0YXR1cyA9IG5nX2NvbnRyb2xfc3RhdHVzXzIuTmdDb250cm9sU3RhdHVzO1xyXG4vKipcclxuICpcclxuICogQSBsaXN0IG9mIGFsbCB0aGUgZm9ybSBkaXJlY3RpdmVzIHVzZWQgYXMgcGFydCBvZiBhIGBAVmlld2AgYW5ub3RhdGlvbi5cclxuICpcclxuICogIFRoaXMgaXMgYSBzaG9ydGhhbmQgZm9yIGltcG9ydGluZyB0aGVtIGVhY2ggaW5kaXZpZHVhbGx5LlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZTpcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ215LWFwcCcsXHJcbiAqICAgZGlyZWN0aXZlczogW0ZPUk1fRElSRUNUSVZFU11cclxuICogfSlcclxuICogY2xhc3MgTXlBcHAge31cclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnRzLkZPUk1fRElSRUNUSVZFUyA9IGxhbmdfMS5DT05TVF9FWFBSKFtcclxuICAgIG5nX2NvbnRyb2xfbmFtZV8xLk5nQ29udHJvbE5hbWUsXHJcbiAgICBuZ19jb250cm9sX2dyb3VwXzEuTmdDb250cm9sR3JvdXAsXHJcbiAgICBuZ19mb3JtX2NvbnRyb2xfMS5OZ0Zvcm1Db250cm9sLFxyXG4gICAgbmdfbW9kZWxfMS5OZ01vZGVsLFxyXG4gICAgbmdfZm9ybV9tb2RlbF8xLk5nRm9ybU1vZGVsLFxyXG4gICAgbmdfZm9ybV8xLk5nRm9ybSxcclxuICAgIHNlbGVjdF9jb250cm9sX3ZhbHVlX2FjY2Vzc29yXzEuTmdTZWxlY3RPcHRpb24sXHJcbiAgICBkZWZhdWx0X3ZhbHVlX2FjY2Vzc29yXzEuRGVmYXVsdFZhbHVlQWNjZXNzb3IsXHJcbiAgICBudW1iZXJfdmFsdWVfYWNjZXNzb3JfMS5OdW1iZXJWYWx1ZUFjY2Vzc29yLFxyXG4gICAgY2hlY2tib3hfdmFsdWVfYWNjZXNzb3JfMS5DaGVja2JveENvbnRyb2xWYWx1ZUFjY2Vzc29yLFxyXG4gICAgc2VsZWN0X2NvbnRyb2xfdmFsdWVfYWNjZXNzb3JfMS5TZWxlY3RDb250cm9sVmFsdWVBY2Nlc3NvcixcclxuICAgIG5nX2NvbnRyb2xfc3RhdHVzXzEuTmdDb250cm9sU3RhdHVzLFxyXG4gICAgdmFsaWRhdG9yc18xLlJlcXVpcmVkVmFsaWRhdG9yLFxyXG4gICAgdmFsaWRhdG9yc18xLk1pbkxlbmd0aFZhbGlkYXRvcixcclxuICAgIHZhbGlkYXRvcnNfMS5NYXhMZW5ndGhWYWxpZGF0b3JcclxuXSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpcmVjdGl2ZXMuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgQWJzdHJhY3RDb250cm9sRGlyZWN0aXZlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFic3RyYWN0Q29udHJvbERpcmVjdGl2ZSgpIHtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2xEaXJlY3RpdmUucHJvdG90eXBlLCBcImNvbnRyb2xcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHRoaXMuY29udHJvbCkgPyB0aGlzLmNvbnRyb2wudmFsdWUgOiBudWxsOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2xEaXJlY3RpdmUucHJvdG90eXBlLCBcInZhbGlkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQodGhpcy5jb250cm9sKSA/IHRoaXMuY29udHJvbC52YWxpZCA6IG51bGw7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbERpcmVjdGl2ZS5wcm90b3R5cGUsIFwiZXJyb3JzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQodGhpcy5jb250cm9sKSA/IHRoaXMuY29udHJvbC5lcnJvcnMgOiBudWxsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbERpcmVjdGl2ZS5wcm90b3R5cGUsIFwicHJpc3RpbmVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGFuZ18xLmlzUHJlc2VudCh0aGlzLmNvbnRyb2wpID8gdGhpcy5jb250cm9sLnByaXN0aW5lIDogbnVsbDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJkaXJ0eVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHRoaXMuY29udHJvbCkgPyB0aGlzLmNvbnRyb2wuZGlydHkgOiBudWxsOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2xEaXJlY3RpdmUucHJvdG90eXBlLCBcInRvdWNoZWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGFuZ18xLmlzUHJlc2VudCh0aGlzLmNvbnRyb2wpID8gdGhpcy5jb250cm9sLnRvdWNoZWQgOiBudWxsOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2xEaXJlY3RpdmUucHJvdG90eXBlLCBcInVudG91Y2hlZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHRoaXMuY29udHJvbCkgPyB0aGlzLmNvbnRyb2wudW50b3VjaGVkIDogbnVsbDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gQWJzdHJhY3RDb250cm9sRGlyZWN0aXZlO1xyXG59KSgpO1xyXG5leHBvcnRzLkFic3RyYWN0Q29udHJvbERpcmVjdGl2ZSA9IEFic3RyYWN0Q29udHJvbERpcmVjdGl2ZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWJzdHJhY3RfY29udHJvbF9kaXJlY3RpdmUuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBtZXRhZGF0YV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbWV0YWRhdGEnKTtcclxudmFyIHJlbmRlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvcmVuZGVyJyk7XHJcbnZhciBsaW5rZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlcicpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBjb250cm9sX3ZhbHVlX2FjY2Vzc29yXzEgPSByZXF1aXJlKCcuL2NvbnRyb2xfdmFsdWVfYWNjZXNzb3InKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBzaGFyZWRfMSA9IHJlcXVpcmUoJy4vc2hhcmVkJyk7XHJcbnZhciBDSEVDS0JPWF9WQUxVRV9BQ0NFU1NPUiA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBkaV8xLlByb3ZpZGVyKGNvbnRyb2xfdmFsdWVfYWNjZXNzb3JfMS5OR19WQUxVRV9BQ0NFU1NPUiwgeyB1c2VFeGlzdGluZzogZGlfMS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIENoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3I7IH0pLCBtdWx0aTogdHJ1ZSB9KSk7XHJcbi8qKlxyXG4gKiBUaGUgYWNjZXNzb3IgZm9yIHdyaXRpbmcgYSB2YWx1ZSBhbmQgbGlzdGVuaW5nIHRvIGNoYW5nZXMgb24gYSBjaGVja2JveCBpbnB1dCBlbGVtZW50LlxyXG4gKlxyXG4gKiAgIyBFeGFtcGxlXHJcbiAqICBgYGBcclxuICogIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBbbmctY29udHJvbF09XCJyZW1lbWJlckxvZ2luXCI+XHJcbiAqICBgYGBcclxuICovXHJcbnZhciBDaGVja2JveENvbnRyb2xWYWx1ZUFjY2Vzc29yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3IoX3JlbmRlcmVyLCBfZWxlbWVudFJlZikge1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gX3JlbmRlcmVyO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnRSZWYgPSBfZWxlbWVudFJlZjtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKF8pIHsgfTtcclxuICAgICAgICB0aGlzLm9uVG91Y2hlZCA9IGZ1bmN0aW9uICgpIHsgfTtcclxuICAgIH1cclxuICAgIENoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3IucHJvdG90eXBlLndyaXRlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHsgc2hhcmVkXzEuc2V0UHJvcGVydHkodGhpcy5fcmVuZGVyZXIsIHRoaXMuX2VsZW1lbnRSZWYsIFwiY2hlY2tlZFwiLCB2YWx1ZSk7IH07XHJcbiAgICBDaGVja2JveENvbnRyb2xWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS5yZWdpc3Rlck9uQ2hhbmdlID0gZnVuY3Rpb24gKGZuKSB7IHRoaXMub25DaGFuZ2UgPSBmbjsgfTtcclxuICAgIENoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3IucHJvdG90eXBlLnJlZ2lzdGVyT25Ub3VjaGVkID0gZnVuY3Rpb24gKGZuKSB7IHRoaXMub25Ub3VjaGVkID0gZm47IH07XHJcbiAgICBDaGVja2JveENvbnRyb2xWYWx1ZUFjY2Vzc29yID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbWV0YWRhdGFfMS5EaXJlY3RpdmUoe1xyXG4gICAgICAgICAgICBzZWxlY3RvcjogJ2lucHV0W3R5cGU9Y2hlY2tib3hdW25nLWNvbnRyb2xdLGlucHV0W3R5cGU9Y2hlY2tib3hdW25nLWZvcm0tY29udHJvbF0saW5wdXRbdHlwZT1jaGVja2JveF1bbmctbW9kZWxdJyxcclxuICAgICAgICAgICAgaG9zdDogeyAnKGNoYW5nZSknOiAnb25DaGFuZ2UoJGV2ZW50LnRhcmdldC5jaGVja2VkKScsICcoYmx1ciknOiAnb25Ub3VjaGVkKCknIH0sXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiBbQ0hFQ0tCT1hfVkFMVUVfQUNDRVNTT1JdXHJcbiAgICAgICAgfSksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW3JlbmRlcl8xLlJlbmRlcmVyLCBsaW5rZXJfMS5FbGVtZW50UmVmXSlcclxuICAgIF0sIENoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3IpO1xyXG4gICAgcmV0dXJuIENoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3I7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQ2hlY2tib3hDb250cm9sVmFsdWVBY2Nlc3NvciA9IENoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3I7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoZWNrYm94X3ZhbHVlX2FjY2Vzc29yLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgYWJzdHJhY3RfY29udHJvbF9kaXJlY3RpdmVfMSA9IHJlcXVpcmUoJy4vYWJzdHJhY3RfY29udHJvbF9kaXJlY3RpdmUnKTtcclxuLyoqXHJcbiAqIEEgZGlyZWN0aXZlIHRoYXQgY29udGFpbnMgbXVsdGlwbGUge0BsaW5rIE5nQ29udHJvbH0uXHJcbiAqXHJcbiAqIE9ubHkgdXNlZCBieSB0aGUgZm9ybXMgbW9kdWxlLlxyXG4gKi9cclxudmFyIENvbnRyb2xDb250YWluZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKENvbnRyb2xDb250YWluZXIsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBDb250cm9sQ29udGFpbmVyKCkge1xyXG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnRyb2xDb250YWluZXIucHJvdG90eXBlLCBcImZvcm1EaXJlY3RpdmVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29udHJvbENvbnRhaW5lci5wcm90b3R5cGUsIFwicGF0aFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBDb250cm9sQ29udGFpbmVyO1xyXG59KShhYnN0cmFjdF9jb250cm9sX2RpcmVjdGl2ZV8xLkFic3RyYWN0Q29udHJvbERpcmVjdGl2ZSk7XHJcbmV4cG9ydHMuQ29udHJvbENvbnRhaW5lciA9IENvbnRyb2xDb250YWluZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRyb2xfY29udGFpbmVyLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG5leHBvcnRzLk5HX1ZBTFVFX0FDQ0VTU09SID0gbGFuZ18xLkNPTlNUX0VYUFIobmV3IGRpXzEuT3BhcXVlVG9rZW4oXCJOZ1ZhbHVlQWNjZXNzb3JcIikpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250cm9sX3ZhbHVlX2FjY2Vzc29yLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgbWV0YWRhdGFfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL21ldGFkYXRhJyk7XHJcbnZhciBsaW5rZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2xpbmtlcicpO1xyXG52YXIgcmVuZGVyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9yZW5kZXInKTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgY29udHJvbF92YWx1ZV9hY2Nlc3Nvcl8xID0gcmVxdWlyZSgnLi9jb250cm9sX3ZhbHVlX2FjY2Vzc29yJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgc2hhcmVkXzEgPSByZXF1aXJlKCcuL3NoYXJlZCcpO1xyXG52YXIgREVGQVVMVF9WQUxVRV9BQ0NFU1NPUiA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBkaV8xLlByb3ZpZGVyKGNvbnRyb2xfdmFsdWVfYWNjZXNzb3JfMS5OR19WQUxVRV9BQ0NFU1NPUiwgeyB1c2VFeGlzdGluZzogZGlfMS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIERlZmF1bHRWYWx1ZUFjY2Vzc29yOyB9KSwgbXVsdGk6IHRydWUgfSkpO1xyXG4vKipcclxuICogVGhlIGRlZmF1bHQgYWNjZXNzb3IgZm9yIHdyaXRpbmcgYSB2YWx1ZSBhbmQgbGlzdGVuaW5nIHRvIGNoYW5nZXMgdGhhdCBpcyB1c2VkIGJ5IHRoZVxyXG4gKiB7QGxpbmsgTmdNb2RlbH0sIHtAbGluayBOZ0Zvcm1Db250cm9sfSwgYW5kIHtAbGluayBOZ0NvbnRyb2xOYW1lfSBkaXJlY3RpdmVzLlxyXG4gKlxyXG4gKiAgIyBFeGFtcGxlXHJcbiAqICBgYGBcclxuICogIDxpbnB1dCB0eXBlPVwidGV4dFwiIFsobmctbW9kZWwpXT1cInNlYXJjaFF1ZXJ5XCI+XHJcbiAqICBgYGBcclxuICovXHJcbnZhciBEZWZhdWx0VmFsdWVBY2Nlc3NvciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEZWZhdWx0VmFsdWVBY2Nlc3NvcihfcmVuZGVyZXIsIF9lbGVtZW50UmVmKSB7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSBfcmVuZGVyZXI7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudFJlZiA9IF9lbGVtZW50UmVmO1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSBmdW5jdGlvbiAoXykgeyB9O1xyXG4gICAgICAgIHRoaXMub25Ub3VjaGVkID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgfVxyXG4gICAgRGVmYXVsdFZhbHVlQWNjZXNzb3IucHJvdG90eXBlLndyaXRlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YXIgbm9ybWFsaXplZFZhbHVlID0gbGFuZ18xLmlzQmxhbmsodmFsdWUpID8gJycgOiB2YWx1ZTtcclxuICAgICAgICBzaGFyZWRfMS5zZXRQcm9wZXJ0eSh0aGlzLl9yZW5kZXJlciwgdGhpcy5fZWxlbWVudFJlZiwgJ3ZhbHVlJywgbm9ybWFsaXplZFZhbHVlKTtcclxuICAgIH07XHJcbiAgICBEZWZhdWx0VmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUucmVnaXN0ZXJPbkNoYW5nZSA9IGZ1bmN0aW9uIChmbikgeyB0aGlzLm9uQ2hhbmdlID0gZm47IH07XHJcbiAgICBEZWZhdWx0VmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUucmVnaXN0ZXJPblRvdWNoZWQgPSBmdW5jdGlvbiAoZm4pIHsgdGhpcy5vblRvdWNoZWQgPSBmbjsgfTtcclxuICAgIERlZmF1bHRWYWx1ZUFjY2Vzc29yID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbWV0YWRhdGFfMS5EaXJlY3RpdmUoe1xyXG4gICAgICAgICAgICBzZWxlY3RvcjogJ1tuZy1jb250cm9sXSxbbmctbW9kZWxdLFtuZy1mb3JtLWNvbnRyb2xdJyxcclxuICAgICAgICAgICAgaG9zdDoge1xyXG4gICAgICAgICAgICAgICAgJyhjaGFuZ2UpJzogJ29uQ2hhbmdlKCRldmVudC50YXJnZXQudmFsdWUpJyxcclxuICAgICAgICAgICAgICAgICcoaW5wdXQpJzogJ29uQ2hhbmdlKCRldmVudC50YXJnZXQudmFsdWUpJyxcclxuICAgICAgICAgICAgICAgICcoYmx1ciknOiAnb25Ub3VjaGVkKCknXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiBbREVGQVVMVF9WQUxVRV9BQ0NFU1NPUl1cclxuICAgICAgICB9KSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbcmVuZGVyXzEuUmVuZGVyZXIsIGxpbmtlcl8xLkVsZW1lbnRSZWZdKVxyXG4gICAgXSwgRGVmYXVsdFZhbHVlQWNjZXNzb3IpO1xyXG4gICAgcmV0dXJuIERlZmF1bHRWYWx1ZUFjY2Vzc29yO1xyXG59KSgpO1xyXG5leHBvcnRzLkRlZmF1bHRWYWx1ZUFjY2Vzc29yID0gRGVmYXVsdFZhbHVlQWNjZXNzb3I7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRfdmFsdWVfYWNjZXNzb3IuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBhYnN0cmFjdF9jb250cm9sX2RpcmVjdGl2ZV8xID0gcmVxdWlyZSgnLi9hYnN0cmFjdF9jb250cm9sX2RpcmVjdGl2ZScpO1xyXG4vKipcclxuICogQSBiYXNlIGNsYXNzIHRoYXQgYWxsIGNvbnRyb2wgZGlyZWN0aXZlIGV4dGVuZC5cclxuICogSXQgYmluZHMgYSB7QGxpbmsgQ29udHJvbH0gb2JqZWN0IHRvIGEgRE9NIGVsZW1lbnQuXHJcbiAqL1xyXG4vLyBDYW5ub3QgY3VycmVudGx5IGJlIGFic3RyYWN0IGJlY2F1c2UgaXQgd291bGQgY29udGFpblxyXG4vLyBhbiBhYnN0cmFjdCBtZXRob2QgaW4gdGhlIHB1YmxpYyBBUEksIGFuZCB3ZSBjYW5ub3QgcmVmbGVjdFxyXG4vLyBvbiB0aGF0IGluIERhcnQgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJ0LWxhbmcvc2RrL2lzc3Vlcy8xODcyMVxyXG4vLyBBbHNvIHdlIGRvbid0IGhhdmUgYWJzdHJhY3Qgc2V0dGVycywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvNDY2OVxyXG52YXIgTmdDb250cm9sID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhOZ0NvbnRyb2wsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBOZ0NvbnRyb2woKSB7XHJcbiAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZhbHVlQWNjZXNzb3IgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5nQ29udHJvbC5wcm90b3R5cGUsIFwidmFsaWRhdG9yXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5nQ29udHJvbC5wcm90b3R5cGUsIFwicGF0aFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE5nQ29udHJvbC5wcm90b3R5cGUudmlld1RvTW9kZWxVcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHsgfTtcclxuICAgIHJldHVybiBOZ0NvbnRyb2w7XHJcbn0pKGFic3RyYWN0X2NvbnRyb2xfZGlyZWN0aXZlXzEuQWJzdHJhY3RDb250cm9sRGlyZWN0aXZlKTtcclxuZXhwb3J0cy5OZ0NvbnRyb2wgPSBOZ0NvbnRyb2w7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5nX2NvbnRyb2wuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBfX3BhcmFtID0gKHRoaXMgJiYgdGhpcy5fX3BhcmFtKSB8fCBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufTtcclxudmFyIG1ldGFkYXRhXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YScpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgY29udHJvbF9jb250YWluZXJfMSA9IHJlcXVpcmUoJy4vY29udHJvbF9jb250YWluZXInKTtcclxudmFyIHNoYXJlZF8xID0gcmVxdWlyZSgnLi9zaGFyZWQnKTtcclxudmFyIGNvbnRyb2xHcm91cEJpbmRpbmcgPSBsYW5nXzEuQ09OU1RfRVhQUihuZXcgZGlfMS5Qcm92aWRlcihjb250cm9sX2NvbnRhaW5lcl8xLkNvbnRyb2xDb250YWluZXIsIHsgdXNlRXhpc3Rpbmc6IGRpXzEuZm9yd2FyZFJlZihmdW5jdGlvbiAoKSB7IHJldHVybiBOZ0NvbnRyb2xHcm91cDsgfSkgfSkpO1xyXG4vKipcclxuICogQ3JlYXRlcyBhbmQgYmluZHMgYSBjb250cm9sIGdyb3VwIHRvIGEgRE9NIGVsZW1lbnQuXHJcbiAqXHJcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBvbmx5IGJlIHVzZWQgYXMgYSBjaGlsZCBvZiB7QGxpbmsgTmdGb3JtfSBvciB7QGxpbmsgTmdGb3JtTW9kZWx9LlxyXG4gKlxyXG4gKiAjIEV4YW1wbGVcclxuICpcclxuICogSW4gdGhpcyBleGFtcGxlLCB3ZSBjcmVhdGUgdGhlIGNyZWRlbnRpYWxzIGFuZCBwZXJzb25hbCBjb250cm9sIGdyb3Vwcy5cclxuICogV2UgY2FuIHdvcmsgd2l0aCBlYWNoIGdyb3VwIHNlcGFyYXRlbHk6IGNoZWNrIGl0cyB2YWxpZGl0eSwgZ2V0IGl0cyB2YWx1ZSwgbGlzdGVuIHRvIGl0cyBjaGFuZ2VzLlxyXG4gKlxyXG4gKiAgYGBgXHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgICAgIHNlbGVjdG9yOiBcInNpZ251cC1jb21wXCIsXHJcbiAqICAgICAgZGlyZWN0aXZlczogW0ZPUk1fRElSRUNUSVZFU10sXHJcbiAqICAgICAgdGVtcGxhdGU6IGBcclxuICogICAgICAgICAgICAgIDxmb3JtICNmPVwiZm9ybVwiIChzdWJtaXQpPSdvblNpZ25VcChmLnZhbHVlKSc+XHJcbiAqICAgICAgICAgICAgICAgIDxkaXYgbmctY29udHJvbC1ncm91cD0nY3JlZGVudGlhbHMnICNjcmVkZW50aWFscz1cImZvcm1cIj5cclxuICogICAgICAgICAgICAgICAgICBMb2dpbiA8aW5wdXQgdHlwZT0ndGV4dCcgbmctY29udHJvbD0nbG9naW4nPlxyXG4gKiAgICAgICAgICAgICAgICAgIFBhc3N3b3JkIDxpbnB1dCB0eXBlPSdwYXNzd29yZCcgbmctY29udHJvbD0ncGFzc3dvcmQnPlxyXG4gKiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICogICAgICAgICAgICAgICAgPGRpdiAqbmctaWY9XCIhY3JlZGVudGlhbHMudmFsaWRcIj5DcmVkZW50aWFscyBhcmUgaW52YWxpZDwvZGl2PlxyXG4gKlxyXG4gKiAgICAgICAgICAgICAgICA8ZGl2IG5nLWNvbnRyb2wtZ3JvdXA9J3BlcnNvbmFsJz5cclxuICogICAgICAgICAgICAgICAgICBOYW1lIDxpbnB1dCB0eXBlPSd0ZXh0JyBuZy1jb250cm9sPSduYW1lJz5cclxuICogICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAqICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0nc3VibWl0Jz5TaWduIFVwITwvYnV0dG9uPlxyXG4gKiAgICAgICAgICAgICAgPC9mb3JtPlxyXG4gKiAgICAgIGB9KVxyXG4gKiBjbGFzcyBTaWdudXBDb21wIHtcclxuICogIG9uU2lnblVwKHZhbHVlKSB7XHJcbiAqICAgIC8vIHZhbHVlID09PSB7XHJcbiAqICAgIC8vICBwZXJzb25hbDoge25hbWU6ICdzb21lIG5hbWUnfSxcclxuICogICAgLy8gIGNyZWRlbnRpYWxzOiB7bG9naW46ICdzb21lIGxvZ2luJywgcGFzc3dvcmQ6ICdzb21lIHBhc3N3b3JkJ319XHJcbiAqICB9XHJcbiAqIH1cclxuICpcclxuICogIGBgYFxyXG4gKi9cclxudmFyIE5nQ29udHJvbEdyb3VwID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhOZ0NvbnRyb2xHcm91cCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE5nQ29udHJvbEdyb3VwKF9wYXJlbnQpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLl9wYXJlbnQgPSBfcGFyZW50O1xyXG4gICAgfVxyXG4gICAgTmdDb250cm9sR3JvdXAucHJvdG90eXBlLm9uSW5pdCA9IGZ1bmN0aW9uICgpIHsgdGhpcy5mb3JtRGlyZWN0aXZlLmFkZENvbnRyb2xHcm91cCh0aGlzKTsgfTtcclxuICAgIE5nQ29udHJvbEdyb3VwLnByb3RvdHlwZS5vbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7IHRoaXMuZm9ybURpcmVjdGl2ZS5yZW1vdmVDb250cm9sR3JvdXAodGhpcyk7IH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdDb250cm9sR3JvdXAucHJvdG90eXBlLCBcImNvbnRyb2xcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5mb3JtRGlyZWN0aXZlLmdldENvbnRyb2xHcm91cCh0aGlzKTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdDb250cm9sR3JvdXAucHJvdG90eXBlLCBcInBhdGhcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2hhcmVkXzEuY29udHJvbFBhdGgodGhpcy5uYW1lLCB0aGlzLl9wYXJlbnQpOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ0NvbnRyb2xHcm91cC5wcm90b3R5cGUsIFwiZm9ybURpcmVjdGl2ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuZm9ybURpcmVjdGl2ZTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBOZ0NvbnRyb2xHcm91cCA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIG1ldGFkYXRhXzEuRGlyZWN0aXZlKHtcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICdbbmctY29udHJvbC1ncm91cF0nLFxyXG4gICAgICAgICAgICBiaW5kaW5nczogW2NvbnRyb2xHcm91cEJpbmRpbmddLFxyXG4gICAgICAgICAgICBpbnB1dHM6IFsnbmFtZTogbmctY29udHJvbC1ncm91cCddLFxyXG4gICAgICAgICAgICBleHBvcnRBczogJ2Zvcm0nXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgX19wYXJhbSgwLCBkaV8xLkhvc3QoKSksXHJcbiAgICAgICAgX19wYXJhbSgwLCBkaV8xLlNraXBTZWxmKCkpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtjb250cm9sX2NvbnRhaW5lcl8xLkNvbnRyb2xDb250YWluZXJdKVxyXG4gICAgXSwgTmdDb250cm9sR3JvdXApO1xyXG4gICAgcmV0dXJuIE5nQ29udHJvbEdyb3VwO1xyXG59KShjb250cm9sX2NvbnRhaW5lcl8xLkNvbnRyb2xDb250YWluZXIpO1xyXG5leHBvcnRzLk5nQ29udHJvbEdyb3VwID0gTmdDb250cm9sR3JvdXA7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5nX2NvbnRyb2xfZ3JvdXAuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBfX3BhcmFtID0gKHRoaXMgJiYgdGhpcy5fX3BhcmFtKSB8fCBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBhc3luY18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2FzeW5jJyk7XHJcbnZhciBtZXRhZGF0YV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbWV0YWRhdGEnKTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgY29udHJvbF9jb250YWluZXJfMSA9IHJlcXVpcmUoJy4vY29udHJvbF9jb250YWluZXInKTtcclxudmFyIG5nX2NvbnRyb2xfMSA9IHJlcXVpcmUoJy4vbmdfY29udHJvbCcpO1xyXG52YXIgY29udHJvbF92YWx1ZV9hY2Nlc3Nvcl8xID0gcmVxdWlyZSgnLi9jb250cm9sX3ZhbHVlX2FjY2Vzc29yJyk7XHJcbnZhciBzaGFyZWRfMSA9IHJlcXVpcmUoJy4vc2hhcmVkJyk7XHJcbnZhciB2YWxpZGF0b3JzXzEgPSByZXF1aXJlKCcuLi92YWxpZGF0b3JzJyk7XHJcbnZhciBjb250cm9sTmFtZUJpbmRpbmcgPSBsYW5nXzEuQ09OU1RfRVhQUihuZXcgZGlfMS5Qcm92aWRlcihuZ19jb250cm9sXzEuTmdDb250cm9sLCB7IHVzZUV4aXN0aW5nOiBkaV8xLmZvcndhcmRSZWYoZnVuY3Rpb24gKCkgeyByZXR1cm4gTmdDb250cm9sTmFtZTsgfSkgfSkpO1xyXG4vKipcclxuICogQ3JlYXRlcyBhbmQgYmluZHMgYSBjb250cm9sIHdpdGggYSBzcGVjaWZpZWQgbmFtZSB0byBhIERPTSBlbGVtZW50LlxyXG4gKlxyXG4gKiBUaGlzIGRpcmVjdGl2ZSBjYW4gb25seSBiZSB1c2VkIGFzIGEgY2hpbGQgb2Yge0BsaW5rIE5nRm9ybX0gb3Ige0BsaW5rIE5nRm9ybU1vZGVsfS5cclxuXHJcbiAqICMgRXhhbXBsZVxyXG4gKlxyXG4gKiBJbiB0aGlzIGV4YW1wbGUsIHdlIGNyZWF0ZSB0aGUgbG9naW4gYW5kIHBhc3N3b3JkIGNvbnRyb2xzLlxyXG4gKiBXZSBjYW4gd29yayB3aXRoIGVhY2ggY29udHJvbCBzZXBhcmF0ZWx5OiBjaGVjayBpdHMgdmFsaWRpdHksIGdldCBpdHMgdmFsdWUsIGxpc3RlbiB0byBpdHNcclxuICogY2hhbmdlcy5cclxuICpcclxuICogIGBgYFxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICAgICBzZWxlY3RvcjogXCJsb2dpbi1jb21wXCIsXHJcbiAqICAgICAgZGlyZWN0aXZlczogW0ZPUk1fRElSRUNUSVZFU10sXHJcbiAqICAgICAgdGVtcGxhdGU6IGBcclxuICogICAgICAgIDxmb3JtICNmPVwiZm9ybVwiIChzdWJtaXQpPSdvbkxvZ0luKGYudmFsdWUpJz5cclxuICogICAgICAgICAgTG9naW4gPGlucHV0IHR5cGU9J3RleHQnIG5nLWNvbnRyb2w9J2xvZ2luJyAjbD1cImZvcm1cIj5cclxuICogICAgICAgICAgPGRpdiAqbmctaWY9XCIhbC52YWxpZFwiPkxvZ2luIGlzIGludmFsaWQ8L2Rpdj5cclxuICpcclxuICogICAgICAgICAgUGFzc3dvcmQgPGlucHV0IHR5cGU9J3Bhc3N3b3JkJyBuZy1jb250cm9sPSdwYXNzd29yZCc+XHJcbiAqICAgICAgICAgIDxidXR0b24gdHlwZT0nc3VibWl0Jz5Mb2cgaW4hPC9idXR0b24+XHJcbiAqICAgICAgICA8L2Zvcm0+XHJcbiAqICAgICAgYH0pXHJcbiAqIGNsYXNzIExvZ2luQ29tcCB7XHJcbiAqICBvbkxvZ0luKHZhbHVlKTogdm9pZCB7XHJcbiAqICAgIC8vIHZhbHVlID09PSB7bG9naW46ICdzb21lIGxvZ2luJywgcGFzc3dvcmQ6ICdzb21lIHBhc3N3b3JkJ31cclxuICogIH1cclxuICogfVxyXG4gKiAgYGBgXHJcbiAqXHJcbiAqIFdlIGNhbiBhbHNvIHVzZSBuZy1tb2RlbCB0byBiaW5kIGEgZG9tYWluIG1vZGVsIHRvIHRoZSBmb3JtLlxyXG4gKlxyXG4gKiAgYGBgXHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgICAgIHNlbGVjdG9yOiBcImxvZ2luLWNvbXBcIixcclxuICogICAgICBkaXJlY3RpdmVzOiBbRk9STV9ESVJFQ1RJVkVTXSxcclxuICogICAgICB0ZW1wbGF0ZTogYFxyXG4gKiAgICAgICAgPGZvcm0gKHN1Ym1pdCk9J29uTG9nSW4oKSc+XHJcbiAqICAgICAgICAgIExvZ2luIDxpbnB1dCB0eXBlPSd0ZXh0JyBuZy1jb250cm9sPSdsb2dpbicgWyhuZy1tb2RlbCldPVwiY3JlZGVudGlhbHMubG9naW5cIj5cclxuICogICAgICAgICAgUGFzc3dvcmQgPGlucHV0IHR5cGU9J3Bhc3N3b3JkJyBuZy1jb250cm9sPSdwYXNzd29yZCdcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgIFsobmctbW9kZWwpXT1cImNyZWRlbnRpYWxzLnBhc3N3b3JkXCI+XHJcbiAqICAgICAgICAgIDxidXR0b24gdHlwZT0nc3VibWl0Jz5Mb2cgaW4hPC9idXR0b24+XHJcbiAqICAgICAgICA8L2Zvcm0+XHJcbiAqICAgICAgYH0pXHJcbiAqIGNsYXNzIExvZ2luQ29tcCB7XHJcbiAqICBjcmVkZW50aWFsczoge2xvZ2luOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nfTtcclxuICpcclxuICogIG9uTG9nSW4oKTogdm9pZCB7XHJcbiAqICAgIC8vIHRoaXMuY3JlZGVudGlhbHMubG9naW4gPT09IFwic29tZSBsb2dpblwiXHJcbiAqICAgIC8vIHRoaXMuY3JlZGVudGlhbHMucGFzc3dvcmQgPT09IFwic29tZSBwYXNzd29yZFwiXHJcbiAqICB9XHJcbiAqIH1cclxuICogIGBgYFxyXG4gKi9cclxudmFyIE5nQ29udHJvbE5hbWUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE5nQ29udHJvbE5hbWUsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBOZ0NvbnRyb2xOYW1lKHBhcmVudCwgdmFsaWRhdG9ycywgdmFsdWVBY2Nlc3NvcnMpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZSA9IG5ldyBhc3luY18xLkV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9hZGRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcclxuICAgICAgICB0aGlzLnZhbGlkYXRvcnMgPSB2YWxpZGF0b3JzO1xyXG4gICAgICAgIHRoaXMudmFsdWVBY2Nlc3NvciA9IHNoYXJlZF8xLnNlbGVjdFZhbHVlQWNjZXNzb3IodGhpcywgdmFsdWVBY2Nlc3NvcnMpO1xyXG4gICAgfVxyXG4gICAgTmdDb250cm9sTmFtZS5wcm90b3R5cGUub25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2FkZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9ybURpcmVjdGl2ZS5hZGRDb250cm9sKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLl9hZGRlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzaGFyZWRfMS5pc1Byb3BlcnR5VXBkYXRlZChjaGFuZ2VzLCB0aGlzLnZpZXdNb2RlbCkpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3TW9kZWwgPSB0aGlzLm1vZGVsO1xyXG4gICAgICAgICAgICB0aGlzLmZvcm1EaXJlY3RpdmUudXBkYXRlTW9kZWwodGhpcywgdGhpcy5tb2RlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE5nQ29udHJvbE5hbWUucHJvdG90eXBlLm9uRGVzdHJveSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5mb3JtRGlyZWN0aXZlLnJlbW92ZUNvbnRyb2wodGhpcyk7IH07XHJcbiAgICBOZ0NvbnRyb2xOYW1lLnByb3RvdHlwZS52aWV3VG9Nb2RlbFVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgIHRoaXMudmlld01vZGVsID0gbmV3VmFsdWU7XHJcbiAgICAgICAgYXN5bmNfMS5PYnNlcnZhYmxlV3JhcHBlci5jYWxsTmV4dCh0aGlzLnVwZGF0ZSwgbmV3VmFsdWUpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ0NvbnRyb2xOYW1lLnByb3RvdHlwZSwgXCJwYXRoXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNoYXJlZF8xLmNvbnRyb2xQYXRoKHRoaXMubmFtZSwgdGhpcy5fcGFyZW50KTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdDb250cm9sTmFtZS5wcm90b3R5cGUsIFwiZm9ybURpcmVjdGl2ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuZm9ybURpcmVjdGl2ZTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdDb250cm9sTmFtZS5wcm90b3R5cGUsIFwiY29udHJvbFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmZvcm1EaXJlY3RpdmUuZ2V0Q29udHJvbCh0aGlzKTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdDb250cm9sTmFtZS5wcm90b3R5cGUsIFwidmFsaWRhdG9yXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbGlkYXRvcnNfMS5WYWxpZGF0b3JzLmNvbXBvc2UodGhpcy52YWxpZGF0b3JzKTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBOZ0NvbnRyb2xOYW1lID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbWV0YWRhdGFfMS5EaXJlY3RpdmUoe1xyXG4gICAgICAgICAgICBzZWxlY3RvcjogJ1tuZy1jb250cm9sXScsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiBbY29udHJvbE5hbWVCaW5kaW5nXSxcclxuICAgICAgICAgICAgaW5wdXRzOiBbJ25hbWU6IG5nQ29udHJvbCcsICdtb2RlbDogbmdNb2RlbCddLFxyXG4gICAgICAgICAgICBvdXRwdXRzOiBbJ3VwZGF0ZTogbmdNb2RlbENoYW5nZSddLFxyXG4gICAgICAgICAgICBleHBvcnRBczogJ2Zvcm0nXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgX19wYXJhbSgwLCBkaV8xLkhvc3QoKSksXHJcbiAgICAgICAgX19wYXJhbSgwLCBkaV8xLlNraXBTZWxmKCkpLFxyXG4gICAgICAgIF9fcGFyYW0oMSwgZGlfMS5PcHRpb25hbCgpKSxcclxuICAgICAgICBfX3BhcmFtKDEsIGRpXzEuSW5qZWN0KHZhbGlkYXRvcnNfMS5OR19WQUxJREFUT1JTKSksXHJcbiAgICAgICAgX19wYXJhbSgyLCBkaV8xLk9wdGlvbmFsKCkpLFxyXG4gICAgICAgIF9fcGFyYW0oMiwgZGlfMS5JbmplY3QoY29udHJvbF92YWx1ZV9hY2Nlc3Nvcl8xLk5HX1ZBTFVFX0FDQ0VTU09SKSksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW2NvbnRyb2xfY29udGFpbmVyXzEuQ29udHJvbENvbnRhaW5lciwgQXJyYXksIEFycmF5XSlcclxuICAgIF0sIE5nQ29udHJvbE5hbWUpO1xyXG4gICAgcmV0dXJuIE5nQ29udHJvbE5hbWU7XHJcbn0pKG5nX2NvbnRyb2xfMS5OZ0NvbnRyb2wpO1xyXG5leHBvcnRzLk5nQ29udHJvbE5hbWUgPSBOZ0NvbnRyb2xOYW1lO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZ19jb250cm9sX25hbWUuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBfX3BhcmFtID0gKHRoaXMgJiYgdGhpcy5fX3BhcmFtKSB8fCBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufTtcclxudmFyIG1ldGFkYXRhXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YScpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBuZ19jb250cm9sXzEgPSByZXF1aXJlKCcuL25nX2NvbnRyb2wnKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBOZ0NvbnRyb2xTdGF0dXMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTmdDb250cm9sU3RhdHVzKGNkKSB7XHJcbiAgICAgICAgdGhpcy5fY2QgPSBjZDtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ0NvbnRyb2xTdGF0dXMucHJvdG90eXBlLCBcIm5nQ2xhc3NVbnRvdWNoZWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGFuZ18xLmlzUHJlc2VudCh0aGlzLl9jZC5jb250cm9sKSA/IHRoaXMuX2NkLmNvbnRyb2wudW50b3VjaGVkIDogZmFsc2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdDb250cm9sU3RhdHVzLnByb3RvdHlwZSwgXCJuZ0NsYXNzVG91Y2hlZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHRoaXMuX2NkLmNvbnRyb2wpID8gdGhpcy5fY2QuY29udHJvbC50b3VjaGVkIDogZmFsc2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdDb250cm9sU3RhdHVzLnByb3RvdHlwZSwgXCJuZ0NsYXNzUHJpc3RpbmVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGFuZ18xLmlzUHJlc2VudCh0aGlzLl9jZC5jb250cm9sKSA/IHRoaXMuX2NkLmNvbnRyb2wucHJpc3RpbmUgOiBmYWxzZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ0NvbnRyb2xTdGF0dXMucHJvdG90eXBlLCBcIm5nQ2xhc3NEaXJ0eVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHRoaXMuX2NkLmNvbnRyb2wpID8gdGhpcy5fY2QuY29udHJvbC5kaXJ0eSA6IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5nQ29udHJvbFN0YXR1cy5wcm90b3R5cGUsIFwibmdDbGFzc1ZhbGlkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQodGhpcy5fY2QuY29udHJvbCkgPyB0aGlzLl9jZC5jb250cm9sLnZhbGlkIDogZmFsc2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdDb250cm9sU3RhdHVzLnByb3RvdHlwZSwgXCJuZ0NsYXNzSW52YWxpZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHRoaXMuX2NkLmNvbnRyb2wpID8gIXRoaXMuX2NkLmNvbnRyb2wudmFsaWQgOiBmYWxzZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE5nQ29udHJvbFN0YXR1cyA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIG1ldGFkYXRhXzEuRGlyZWN0aXZlKHtcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICdbbmctY29udHJvbF0sW25nLW1vZGVsXSxbbmctZm9ybS1jb250cm9sXScsXHJcbiAgICAgICAgICAgIGhvc3Q6IHtcclxuICAgICAgICAgICAgICAgICdbY2xhc3MubmctdW50b3VjaGVkXSc6ICduZ0NsYXNzVW50b3VjaGVkJyxcclxuICAgICAgICAgICAgICAgICdbY2xhc3MubmctdG91Y2hlZF0nOiAnbmdDbGFzc1RvdWNoZWQnLFxyXG4gICAgICAgICAgICAgICAgJ1tjbGFzcy5uZy1wcmlzdGluZV0nOiAnbmdDbGFzc1ByaXN0aW5lJyxcclxuICAgICAgICAgICAgICAgICdbY2xhc3MubmctZGlydHldJzogJ25nQ2xhc3NEaXJ0eScsXHJcbiAgICAgICAgICAgICAgICAnW2NsYXNzLm5nLXZhbGlkXSc6ICduZ0NsYXNzVmFsaWQnLFxyXG4gICAgICAgICAgICAgICAgJ1tjbGFzcy5uZy1pbnZhbGlkXSc6ICduZ0NsYXNzSW52YWxpZCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIF9fcGFyYW0oMCwgZGlfMS5TZWxmKCkpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtuZ19jb250cm9sXzEuTmdDb250cm9sXSlcclxuICAgIF0sIE5nQ29udHJvbFN0YXR1cyk7XHJcbiAgICByZXR1cm4gTmdDb250cm9sU3RhdHVzO1xyXG59KSgpO1xyXG5leHBvcnRzLk5nQ29udHJvbFN0YXR1cyA9IE5nQ29udHJvbFN0YXR1cztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmdfY29udHJvbF9zdGF0dXMuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBhc3luY18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2FzeW5jJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIG1ldGFkYXRhXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YScpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBjb250cm9sX2NvbnRhaW5lcl8xID0gcmVxdWlyZSgnLi9jb250cm9sX2NvbnRhaW5lcicpO1xyXG52YXIgbW9kZWxfMSA9IHJlcXVpcmUoJy4uL21vZGVsJyk7XHJcbnZhciBzaGFyZWRfMSA9IHJlcXVpcmUoJy4vc2hhcmVkJyk7XHJcbnZhciBmb3JtRGlyZWN0aXZlUHJvdmlkZXIgPSBsYW5nXzEuQ09OU1RfRVhQUihuZXcgZGlfMS5Qcm92aWRlcihjb250cm9sX2NvbnRhaW5lcl8xLkNvbnRyb2xDb250YWluZXIsIHsgdXNlRXhpc3Rpbmc6IGRpXzEuZm9yd2FyZFJlZihmdW5jdGlvbiAoKSB7IHJldHVybiBOZ0Zvcm07IH0pIH0pKTtcclxuLyoqXHJcbiAqIElmIGBOZ0Zvcm1gIGlzIGJvdW5kIGluIGEgY29tcG9uZW50LCBgPGZvcm0+YCBlbGVtZW50cyBpbiB0aGF0IGNvbXBvbmVudCB3aWxsIGJlXHJcbiAqIHVwZ3JhZGVkIHRvIHVzZSB0aGUgQW5ndWxhciBmb3JtIHN5c3RlbS5cclxuICpcclxuICogIyBUeXBpY2FsIFVzZVxyXG4gKlxyXG4gKiBJbmNsdWRlIGBGT1JNX0RJUkVDVElWRVNgIGluIHRoZSBgZGlyZWN0aXZlc2Agc2VjdGlvbiBvZiBhIHtAbGluayBWaWV3fSBhbm5vdGF0aW9uXHJcbiAqIHRvIHVzZSBgTmdGb3JtYCBhbmQgaXRzIGFzc29jaWF0ZWQgY29udHJvbHMuXHJcbiAqXHJcbiAqICMgU3RydWN0dXJlXHJcbiAqXHJcbiAqIEFuIEFuZ3VsYXIgZm9ybSBpcyBhIGNvbGxlY3Rpb24gb2YgYENvbnRyb2xgcyBpbiBzb21lIGhpZXJhcmNoeS5cclxuICogYENvbnRyb2xgcyBjYW4gYmUgYXQgdGhlIHRvcCBsZXZlbCBvciBjYW4gYmUgb3JnYW5pemVkIGluIGBDb250cm9sR3JvdXBgc1xyXG4gKiBvciBgQ29udHJvbEFycmF5YHMuIFRoaXMgaGllcmFyY2h5IGlzIHJlZmxlY3RlZCBpbiB0aGUgZm9ybSdzIGB2YWx1ZWAsIGFcclxuICogSlNPTiBvYmplY3QgdGhhdCBtaXJyb3JzIHRoZSBmb3JtIHN0cnVjdHVyZS5cclxuICpcclxuICogIyBTdWJtaXNzaW9uXHJcbiAqXHJcbiAqIFRoZSBgbmctc3VibWl0YCBldmVudCBzaWduYWxzIHdoZW4gdGhlIHVzZXIgdHJpZ2dlcnMgYSBmb3JtIHN1Ym1pc3Npb24uXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9sdGRnWWo0UDBpWTY0QVI3MUVwTD9wPXByZXZpZXcpKVxyXG4gKlxyXG4gKiAgYGBgdHlwZXNjcmlwdFxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ215LWFwcCcsXHJcbiAqICAgdGVtcGxhdGU6IGBcclxuICogICAgIDxkaXY+XHJcbiAqICAgICAgIDxwPlN1Ym1pdCB0aGUgZm9ybSB0byBzZWUgdGhlIGRhdGEgb2JqZWN0IEFuZ3VsYXIgYnVpbGRzPC9wPlxyXG4gKiAgICAgICA8aDI+TmdGb3JtIGRlbW88L2gyPlxyXG4gKiAgICAgICA8Zm9ybSAjZj1cImZvcm1cIiAobmctc3VibWl0KT1cIm9uU3VibWl0KGYudmFsdWUpXCI+XHJcbiAqICAgICAgICAgPGgzPkNvbnRyb2wgZ3JvdXA6IGNyZWRlbnRpYWxzPC9oMz5cclxuICogICAgICAgICA8ZGl2IG5nLWNvbnRyb2wtZ3JvdXA9XCJjcmVkZW50aWFsc1wiPlxyXG4gKiAgICAgICAgICAgPHA+TG9naW46IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLWNvbnRyb2w9XCJsb2dpblwiPjwvcD5cclxuICogICAgICAgICAgIDxwPlBhc3N3b3JkOiA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgbmctY29udHJvbD1cInBhc3N3b3JkXCI+PC9wPlxyXG4gKiAgICAgICAgIDwvZGl2PlxyXG4gKiAgICAgICAgIDxoMz5Db250cm9sIGdyb3VwOiBwZXJzb248L2gzPlxyXG4gKiAgICAgICAgIDxkaXYgbmctY29udHJvbC1ncm91cD1cInBlcnNvblwiPlxyXG4gKiAgICAgICAgICAgPHA+Rmlyc3QgbmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctY29udHJvbD1cImZpcnN0TmFtZVwiPjwvcD5cclxuICogICAgICAgICAgIDxwPkxhc3QgbmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctY29udHJvbD1cImxhc3ROYW1lXCI+PC9wPlxyXG4gKiAgICAgICAgIDwvZGl2PlxyXG4gKiAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiPlN1Ym1pdCBGb3JtPC9idXR0b24+XHJcbiAqICAgICAgIDxwPkZvcm0gZGF0YSBzdWJtaXR0ZWQ6PC9wPlxyXG4gKiAgICAgICA8L2Zvcm0+XHJcbiAqICAgICAgIDxwcmU+e3tkYXRhfX08L3ByZT5cclxuICogICAgIDwvZGl2PlxyXG4gKiBgLFxyXG4gKiAgIGRpcmVjdGl2ZXM6IFtDT1JFX0RJUkVDVElWRVMsIEZPUk1fRElSRUNUSVZFU11cclxuICogfSlcclxuICogZXhwb3J0IGNsYXNzIEFwcCB7XHJcbiAqICAgY29uc3RydWN0b3IoKSB7fVxyXG4gKlxyXG4gKiAgIGRhdGE6IHN0cmluZztcclxuICpcclxuICogICBvblN1Ym1pdChkYXRhKSB7XHJcbiAqICAgICB0aGlzLmRhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKTtcclxuICogICB9XHJcbiAqIH1cclxuICogIGBgYFxyXG4gKi9cclxudmFyIE5nRm9ybSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoTmdGb3JtLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTmdGb3JtKCkge1xyXG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuZm9ybSA9IG5ldyBtb2RlbF8xLkNvbnRyb2xHcm91cCh7fSk7XHJcbiAgICAgICAgdGhpcy5uZ1N1Ym1pdCA9IG5ldyBhc3luY18xLkV2ZW50RW1pdHRlcigpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5nRm9ybS5wcm90b3R5cGUsIFwiZm9ybURpcmVjdGl2ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ0Zvcm0ucHJvdG90eXBlLCBcImNvbnRyb2xcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5mb3JtOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ0Zvcm0ucHJvdG90eXBlLCBcInBhdGhcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5nRm9ybS5wcm90b3R5cGUsIFwiY29udHJvbHNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5mb3JtLmNvbnRyb2xzOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE5nRm9ybS5wcm90b3R5cGUuYWRkQ29udHJvbCA9IGZ1bmN0aW9uIChkaXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX2xhdGVyKGZ1bmN0aW9uIChfKSB7XHJcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBfdGhpcy5fZmluZENvbnRhaW5lcihkaXIucGF0aCk7XHJcbiAgICAgICAgICAgIHZhciBjdHJsID0gbmV3IG1vZGVsXzEuQ29udHJvbCgpO1xyXG4gICAgICAgICAgICBzaGFyZWRfMS5zZXRVcENvbnRyb2woY3RybCwgZGlyKTtcclxuICAgICAgICAgICAgY29udGFpbmVyLmFkZENvbnRyb2woZGlyLm5hbWUsIGN0cmwpO1xyXG4gICAgICAgICAgICBjdHJsLnVwZGF0ZVZhbGlkaXR5KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTmdGb3JtLnByb3RvdHlwZS5nZXRDb250cm9sID0gZnVuY3Rpb24gKGRpcikgeyByZXR1cm4gdGhpcy5mb3JtLmZpbmQoZGlyLnBhdGgpOyB9O1xyXG4gICAgTmdGb3JtLnByb3RvdHlwZS5yZW1vdmVDb250cm9sID0gZnVuY3Rpb24gKGRpcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5fbGF0ZXIoZnVuY3Rpb24gKF8pIHtcclxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IF90aGlzLl9maW5kQ29udGFpbmVyKGRpci5wYXRoKTtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoY29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZUNvbnRyb2woZGlyLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnVwZGF0ZVZhbGlkaXR5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBOZ0Zvcm0ucHJvdG90eXBlLmFkZENvbnRyb2xHcm91cCA9IGZ1bmN0aW9uIChkaXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX2xhdGVyKGZ1bmN0aW9uIChfKSB7XHJcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBfdGhpcy5fZmluZENvbnRhaW5lcihkaXIucGF0aCk7XHJcbiAgICAgICAgICAgIHZhciBncm91cCA9IG5ldyBtb2RlbF8xLkNvbnRyb2xHcm91cCh7fSk7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5hZGRDb250cm9sKGRpci5uYW1lLCBncm91cCk7XHJcbiAgICAgICAgICAgIGdyb3VwLnVwZGF0ZVZhbGlkaXR5KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTmdGb3JtLnByb3RvdHlwZS5yZW1vdmVDb250cm9sR3JvdXAgPSBmdW5jdGlvbiAoZGlyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9sYXRlcihmdW5jdGlvbiAoXykge1xyXG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gX3RoaXMuX2ZpbmRDb250YWluZXIoZGlyLnBhdGgpO1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChjb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIucmVtb3ZlQ29udHJvbChkaXIubmFtZSk7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIudXBkYXRlVmFsaWRpdHkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE5nRm9ybS5wcm90b3R5cGUuZ2V0Q29udHJvbEdyb3VwID0gZnVuY3Rpb24gKGRpcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm0uZmluZChkaXIucGF0aCk7XHJcbiAgICB9O1xyXG4gICAgTmdGb3JtLnByb3RvdHlwZS51cGRhdGVNb2RlbCA9IGZ1bmN0aW9uIChkaXIsIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9sYXRlcihmdW5jdGlvbiAoXykge1xyXG4gICAgICAgICAgICB2YXIgY3RybCA9IF90aGlzLmZvcm0uZmluZChkaXIucGF0aCk7XHJcbiAgICAgICAgICAgIGN0cmwudXBkYXRlVmFsdWUodmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE5nRm9ybS5wcm90b3R5cGUub25TdWJtaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXN5bmNfMS5PYnNlcnZhYmxlV3JhcHBlci5jYWxsTmV4dCh0aGlzLm5nU3VibWl0LCBudWxsKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgTmdGb3JtLnByb3RvdHlwZS5fZmluZENvbnRhaW5lciA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgcGF0aC5wb3AoKTtcclxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmlzRW1wdHkocGF0aCkgPyB0aGlzLmZvcm0gOiB0aGlzLmZvcm0uZmluZChwYXRoKTtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBOZ0Zvcm0ucHJvdG90eXBlLl9sYXRlciA9IGZ1bmN0aW9uIChmbikgeyBhc3luY18xLlByb21pc2VXcmFwcGVyLnRoZW4oYXN5bmNfMS5Qcm9taXNlV3JhcHBlci5yZXNvbHZlKG51bGwpLCBmbiwgZnVuY3Rpb24gKF8pIHsgfSk7IH07XHJcbiAgICBOZ0Zvcm0gPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBtZXRhZGF0YV8xLkRpcmVjdGl2ZSh7XHJcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnZm9ybTpub3QoW25nLW5vLWZvcm1dKTpub3QoW25nLWZvcm0tbW9kZWxdKSxuZy1mb3JtLFtuZy1mb3JtXScsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiBbZm9ybURpcmVjdGl2ZVByb3ZpZGVyXSxcclxuICAgICAgICAgICAgaG9zdDoge1xyXG4gICAgICAgICAgICAgICAgJyhzdWJtaXQpJzogJ29uU3VibWl0KCknLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvdXRwdXRzOiBbJ25nU3VibWl0J10sXHJcbiAgICAgICAgICAgIGV4cG9ydEFzOiAnZm9ybSdcclxuICAgICAgICB9KSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcclxuICAgIF0sIE5nRm9ybSk7XHJcbiAgICByZXR1cm4gTmdGb3JtO1xyXG59KShjb250cm9sX2NvbnRhaW5lcl8xLkNvbnRyb2xDb250YWluZXIpO1xyXG5leHBvcnRzLk5nRm9ybSA9IE5nRm9ybTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmdfZm9ybS5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIF9fcGFyYW0gPSAodGhpcyAmJiB0aGlzLl9fcGFyYW0pIHx8IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59O1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGFzeW5jXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvYXN5bmMnKTtcclxudmFyIG1ldGFkYXRhXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YScpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBuZ19jb250cm9sXzEgPSByZXF1aXJlKCcuL25nX2NvbnRyb2wnKTtcclxudmFyIHZhbGlkYXRvcnNfMSA9IHJlcXVpcmUoJy4uL3ZhbGlkYXRvcnMnKTtcclxudmFyIGNvbnRyb2xfdmFsdWVfYWNjZXNzb3JfMSA9IHJlcXVpcmUoJy4vY29udHJvbF92YWx1ZV9hY2Nlc3NvcicpO1xyXG52YXIgc2hhcmVkXzEgPSByZXF1aXJlKCcuL3NoYXJlZCcpO1xyXG52YXIgZm9ybUNvbnRyb2xCaW5kaW5nID0gbGFuZ18xLkNPTlNUX0VYUFIobmV3IGRpXzEuUHJvdmlkZXIobmdfY29udHJvbF8xLk5nQ29udHJvbCwgeyB1c2VFeGlzdGluZzogZGlfMS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5nRm9ybUNvbnRyb2w7IH0pIH0pKTtcclxuLyoqXHJcbiAqIEJpbmRzIGFuIGV4aXN0aW5nIHtAbGluayBDb250cm9sfSB0byBhIERPTSBlbGVtZW50LlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvamNRbFoydFRoMjJCWloydWNOQVQ/cD1wcmV2aWV3KSlcclxuICpcclxuICogSW4gdGhpcyBleGFtcGxlLCB3ZSBiaW5kIHRoZSBjb250cm9sIHRvIGFuIGlucHV0IGVsZW1lbnQuIFdoZW4gdGhlIHZhbHVlIG9mIHRoZSBpbnB1dCBlbGVtZW50XHJcbiAqIGNoYW5nZXMsIHRoZSB2YWx1ZSBvZiB0aGUgY29udHJvbCB3aWxsIHJlZmxlY3QgdGhhdCBjaGFuZ2UuIExpa2V3aXNlLCBpZiB0aGUgdmFsdWUgb2YgdGhlXHJcbiAqIGNvbnRyb2wgY2hhbmdlcywgdGhlIGlucHV0IGVsZW1lbnQgcmVmbGVjdHMgdGhhdCBjaGFuZ2UuXHJcbiAqXHJcbiAqICBgYGB0eXBlc2NyaXB0XHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgIHNlbGVjdG9yOiAnbXktYXBwJyxcclxuICogICB0ZW1wbGF0ZTogYFxyXG4gKiAgICAgPGRpdj5cclxuICogICAgICAgPGgyPk5nRm9ybUNvbnRyb2wgRXhhbXBsZTwvaDI+XHJcbiAqICAgICAgIDxmb3JtPlxyXG4gKiAgICAgICAgIDxwPkVsZW1lbnQgd2l0aCBleGlzdGluZyBjb250cm9sOiA8aW5wdXQgdHlwZT1cInRleHRcIlxyXG4gKiBbbmctZm9ybS1jb250cm9sXT1cImxvZ2luQ29udHJvbFwiPjwvcD5cclxuICogICAgICAgICA8cD5WYWx1ZSBvZiBleGlzdGluZyBjb250cm9sOiB7e2xvZ2luQ29udHJvbC52YWx1ZX19PC9wPlxyXG4gKiAgICAgICA8L2Zvcm0+XHJcbiAqICAgICA8L2Rpdj5cclxuICogICBgLFxyXG4gKiAgIGRpcmVjdGl2ZXM6IFtDT1JFX0RJUkVDVElWRVMsIEZPUk1fRElSRUNUSVZFU11cclxuICogfSlcclxuICogZXhwb3J0IGNsYXNzIEFwcCB7XHJcbiAqICAgbG9naW5Db250cm9sOiBDb250cm9sID0gbmV3IENvbnRyb2woJycpO1xyXG4gKiB9XHJcbiAqICBgYGBcclxuICpcclxuICogIyBuZy1tb2RlbFxyXG4gKlxyXG4gKiBXZSBjYW4gYWxzbyB1c2UgYG5nLW1vZGVsYCB0byBiaW5kIGEgZG9tYWluIG1vZGVsIHRvIHRoZSBmb3JtLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQveUhNTHVITzdETmdUOFh2dGpUREg/cD1wcmV2aWV3KSlcclxuICpcclxuICogIGBgYHR5cGVzY3JpcHRcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgICAgc2VsZWN0b3I6IFwibG9naW4tY29tcFwiLFxyXG4gKiAgICAgIGRpcmVjdGl2ZXM6IFtGT1JNX0RJUkVDVElWRVNdLFxyXG4gKiAgICAgIHRlbXBsYXRlOiBcIjxpbnB1dCB0eXBlPSd0ZXh0JyBbbmctZm9ybS1jb250cm9sXT0nbG9naW5Db250cm9sJyBbKG5nLW1vZGVsKV09J2xvZ2luJz5cIlxyXG4gKiAgICAgIH0pXHJcbiAqIGNsYXNzIExvZ2luQ29tcCB7XHJcbiAqICBsb2dpbkNvbnRyb2w6IENvbnRyb2wgPSBuZXcgQ29udHJvbCgnJyk7XHJcbiAqICBsb2dpbjpzdHJpbmc7XHJcbiAqIH1cclxuICogIGBgYFxyXG4gKi9cclxudmFyIE5nRm9ybUNvbnRyb2wgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE5nRm9ybUNvbnRyb2wsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBOZ0Zvcm1Db250cm9sKHZhbGlkYXRvcnMsIHZhbHVlQWNjZXNzb3JzKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy51cGRhdGUgPSBuZXcgYXN5bmNfMS5FdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5fYWRkZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnZhbGlkYXRvcnMgPSB2YWxpZGF0b3JzO1xyXG4gICAgICAgIHRoaXMudmFsdWVBY2Nlc3NvciA9IHNoYXJlZF8xLnNlbGVjdFZhbHVlQWNjZXNzb3IodGhpcywgdmFsdWVBY2Nlc3NvcnMpO1xyXG4gICAgfVxyXG4gICAgTmdGb3JtQ29udHJvbC5wcm90b3R5cGUub25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2FkZGVkKSB7XHJcbiAgICAgICAgICAgIHNoYXJlZF8xLnNldFVwQ29udHJvbCh0aGlzLmZvcm0sIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLmZvcm0udXBkYXRlVmFsaWRpdHkoKTtcclxuICAgICAgICAgICAgdGhpcy5fYWRkZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2hhcmVkXzEuaXNQcm9wZXJ0eVVwZGF0ZWQoY2hhbmdlcywgdGhpcy52aWV3TW9kZWwpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9ybS51cGRhdGVWYWx1ZSh0aGlzLm1vZGVsKTtcclxuICAgICAgICAgICAgdGhpcy52aWV3TW9kZWwgPSB0aGlzLm1vZGVsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdGb3JtQ29udHJvbC5wcm90b3R5cGUsIFwicGF0aFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdGb3JtQ29udHJvbC5wcm90b3R5cGUsIFwiY29udHJvbFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmZvcm07IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5nRm9ybUNvbnRyb2wucHJvdG90eXBlLCBcInZhbGlkYXRvclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWxpZGF0b3JzXzEuVmFsaWRhdG9ycy5jb21wb3NlKHRoaXMudmFsaWRhdG9ycyk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgTmdGb3JtQ29udHJvbC5wcm90b3R5cGUudmlld1RvTW9kZWxVcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcclxuICAgICAgICB0aGlzLnZpZXdNb2RlbCA9IG5ld1ZhbHVlO1xyXG4gICAgICAgIGFzeW5jXzEuT2JzZXJ2YWJsZVdyYXBwZXIuY2FsbE5leHQodGhpcy51cGRhdGUsIG5ld1ZhbHVlKTtcclxuICAgIH07XHJcbiAgICBOZ0Zvcm1Db250cm9sID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbWV0YWRhdGFfMS5EaXJlY3RpdmUoe1xyXG4gICAgICAgICAgICBzZWxlY3RvcjogJ1tuZy1mb3JtLWNvbnRyb2xdJyxcclxuICAgICAgICAgICAgYmluZGluZ3M6IFtmb3JtQ29udHJvbEJpbmRpbmddLFxyXG4gICAgICAgICAgICBpbnB1dHM6IFsnZm9ybTogbmdGb3JtQ29udHJvbCcsICdtb2RlbDogbmdNb2RlbCddLFxyXG4gICAgICAgICAgICBvdXRwdXRzOiBbJ3VwZGF0ZTogbmdNb2RlbENoYW5nZSddLFxyXG4gICAgICAgICAgICBleHBvcnRBczogJ2Zvcm0nXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgX19wYXJhbSgwLCBkaV8xLk9wdGlvbmFsKCkpLFxyXG4gICAgICAgIF9fcGFyYW0oMCwgZGlfMS5JbmplY3QodmFsaWRhdG9yc18xLk5HX1ZBTElEQVRPUlMpKSxcclxuICAgICAgICBfX3BhcmFtKDEsIGRpXzEuT3B0aW9uYWwoKSksXHJcbiAgICAgICAgX19wYXJhbSgxLCBkaV8xLkluamVjdChjb250cm9sX3ZhbHVlX2FjY2Vzc29yXzEuTkdfVkFMVUVfQUNDRVNTT1IpKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbQXJyYXksIEFycmF5XSlcclxuICAgIF0sIE5nRm9ybUNvbnRyb2wpO1xyXG4gICAgcmV0dXJuIE5nRm9ybUNvbnRyb2w7XHJcbn0pKG5nX2NvbnRyb2xfMS5OZ0NvbnRyb2wpO1xyXG5leHBvcnRzLk5nRm9ybUNvbnRyb2wgPSBOZ0Zvcm1Db250cm9sO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZ19mb3JtX2NvbnRyb2wuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIGFzeW5jXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvYXN5bmMnKTtcclxudmFyIG1ldGFkYXRhXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YScpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBjb250cm9sX2NvbnRhaW5lcl8xID0gcmVxdWlyZSgnLi9jb250cm9sX2NvbnRhaW5lcicpO1xyXG52YXIgc2hhcmVkXzEgPSByZXF1aXJlKCcuL3NoYXJlZCcpO1xyXG52YXIgZm9ybURpcmVjdGl2ZVByb3ZpZGVyID0gbGFuZ18xLkNPTlNUX0VYUFIobmV3IGRpXzEuUHJvdmlkZXIoY29udHJvbF9jb250YWluZXJfMS5Db250cm9sQ29udGFpbmVyLCB7IHVzZUV4aXN0aW5nOiBkaV8xLmZvcndhcmRSZWYoZnVuY3Rpb24gKCkgeyByZXR1cm4gTmdGb3JtTW9kZWw7IH0pIH0pKTtcclxuLyoqXHJcbiAqIEJpbmRzIGFuIGV4aXN0aW5nIGNvbnRyb2wgZ3JvdXAgdG8gYSBET00gZWxlbWVudC5cclxuICpcclxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L2pxclZpcnVkWThhbkp4VE1ValRQP3A9cHJldmlldykpXHJcbiAqXHJcbiAqIEluIHRoaXMgZXhhbXBsZSwgd2UgYmluZCB0aGUgY29udHJvbCBncm91cCB0byB0aGUgZm9ybSBlbGVtZW50LCBhbmQgd2UgYmluZCB0aGUgbG9naW4gYW5kXHJcbiAqIHBhc3N3b3JkIGNvbnRyb2xzIHRvIHRoZSBsb2dpbiBhbmQgcGFzc3dvcmQgZWxlbWVudHMuXHJcbiAqXHJcbiAqICBgYGB0eXBlc2NyaXB0XHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgIHNlbGVjdG9yOiAnbXktYXBwJyxcclxuICogICB0ZW1wbGF0ZTogYFxyXG4gKiAgICAgPGRpdj5cclxuICogICAgICAgPGgyPk5nRm9ybU1vZGVsIEV4YW1wbGU8L2gyPlxyXG4gKiAgICAgICA8Zm9ybSBbbmctZm9ybS1tb2RlbF09XCJsb2dpbkZvcm1cIj5cclxuICogICAgICAgICA8cD5Mb2dpbjogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctY29udHJvbD1cImxvZ2luXCI+PC9wPlxyXG4gKiAgICAgICAgIDxwPlBhc3N3b3JkOiA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgbmctY29udHJvbD1cInBhc3N3b3JkXCI+PC9wPlxyXG4gKiAgICAgICA8L2Zvcm0+XHJcbiAqICAgICAgIDxwPlZhbHVlOjwvcD5cclxuICogICAgICAgPHByZT57e3ZhbHVlfX08L3ByZT5cclxuICogICAgIDwvZGl2PlxyXG4gKiAgIGAsXHJcbiAqICAgZGlyZWN0aXZlczogW0ZPUk1fRElSRUNUSVZFU11cclxuICogfSlcclxuICogZXhwb3J0IGNsYXNzIEFwcCB7XHJcbiAqICAgbG9naW5Gb3JtOiBDb250cm9sR3JvdXA7XHJcbiAqXHJcbiAqICAgY29uc3RydWN0b3IoKSB7XHJcbiAqICAgICB0aGlzLmxvZ2luRm9ybSA9IG5ldyBDb250cm9sR3JvdXAoe1xyXG4gKiAgICAgICBsb2dpbjogbmV3IENvbnRyb2woXCJcIiksXHJcbiAqICAgICAgIHBhc3N3b3JkOiBuZXcgQ29udHJvbChcIlwiKVxyXG4gKiAgICAgfSk7XHJcbiAqICAgfVxyXG4gKlxyXG4gKiAgIGdldCB2YWx1ZSgpOiBzdHJpbmcge1xyXG4gKiAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMubG9naW5Gb3JtLnZhbHVlLCBudWxsLCAyKTtcclxuICogICB9XHJcbiAqIH1cclxuICogIGBgYFxyXG4gKlxyXG4gKiBXZSBjYW4gYWxzbyB1c2UgbmctbW9kZWwgdG8gYmluZCBhIGRvbWFpbiBtb2RlbCB0byB0aGUgZm9ybS5cclxuICpcclxuICogIGBgYHR5cGVzY3JpcHRcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgICAgc2VsZWN0b3I6IFwibG9naW4tY29tcFwiLFxyXG4gKiAgICAgIGRpcmVjdGl2ZXM6IFtGT1JNX0RJUkVDVElWRVNdLFxyXG4gKiAgICAgIHRlbXBsYXRlOiBgXHJcbiAqICAgICAgICA8Zm9ybSBbbmctZm9ybS1tb2RlbF09J2xvZ2luRm9ybSc+XHJcbiAqICAgICAgICAgIExvZ2luIDxpbnB1dCB0eXBlPSd0ZXh0JyBuZy1jb250cm9sPSdsb2dpbicgWyhuZy1tb2RlbCldPSdjcmVkZW50aWFscy5sb2dpbic+XHJcbiAqICAgICAgICAgIFBhc3N3b3JkIDxpbnB1dCB0eXBlPSdwYXNzd29yZCcgbmctY29udHJvbD0ncGFzc3dvcmQnXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBbKG5nLW1vZGVsKV09J2NyZWRlbnRpYWxzLnBhc3N3b3JkJz5cclxuICogICAgICAgICAgPGJ1dHRvbiAoY2xpY2spPVwib25Mb2dpbigpXCI+TG9naW48L2J1dHRvbj5cclxuICogICAgICAgIDwvZm9ybT5gXHJcbiAqICAgICAgfSlcclxuICogY2xhc3MgTG9naW5Db21wIHtcclxuICogIGNyZWRlbnRpYWxzOiB7bG9naW46IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZ307XHJcbiAqICBsb2dpbkZvcm06IENvbnRyb2xHcm91cDtcclxuICpcclxuICogIGNvbnN0cnVjdG9yKCkge1xyXG4gKiAgICB0aGlzLmxvZ2luRm9ybSA9IG5ldyBDb250cm9sR3JvdXAoe1xyXG4gKiAgICAgIGxvZ2luOiBuZXcgQ29udHJvbChcIlwiKSxcclxuICogICAgICBwYXNzd29yZDogbmV3IENvbnRyb2woXCJcIilcclxuICogICAgfSk7XHJcbiAqICB9XHJcbiAqXHJcbiAqICBvbkxvZ2luKCk6IHZvaWQge1xyXG4gKiAgICAvLyB0aGlzLmNyZWRlbnRpYWxzLmxvZ2luID09PSAnc29tZSBsb2dpbidcclxuICogICAgLy8gdGhpcy5jcmVkZW50aWFscy5wYXNzd29yZCA9PT0gJ3NvbWUgcGFzc3dvcmQnXHJcbiAqICB9XHJcbiAqIH1cclxuICogIGBgYFxyXG4gKi9cclxudmFyIE5nRm9ybU1vZGVsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhOZ0Zvcm1Nb2RlbCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE5nRm9ybU1vZGVsKCkge1xyXG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuZm9ybSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gW107XHJcbiAgICAgICAgdGhpcy5uZ1N1Ym1pdCA9IG5ldyBhc3luY18xLkV2ZW50RW1pdHRlcigpO1xyXG4gICAgfVxyXG4gICAgTmdGb3JtTW9kZWwucHJvdG90eXBlLm9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChfKSB7IHRoaXMuX3VwZGF0ZURvbVZhbHVlKCk7IH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdGb3JtTW9kZWwucHJvdG90eXBlLCBcImZvcm1EaXJlY3RpdmVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdGb3JtTW9kZWwucHJvdG90eXBlLCBcImNvbnRyb2xcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5mb3JtOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ0Zvcm1Nb2RlbC5wcm90b3R5cGUsIFwicGF0aFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBOZ0Zvcm1Nb2RlbC5wcm90b3R5cGUuYWRkQ29udHJvbCA9IGZ1bmN0aW9uIChkaXIpIHtcclxuICAgICAgICB2YXIgY3RybCA9IHRoaXMuZm9ybS5maW5kKGRpci5wYXRoKTtcclxuICAgICAgICBzaGFyZWRfMS5zZXRVcENvbnRyb2woY3RybCwgZGlyKTtcclxuICAgICAgICBjdHJsLnVwZGF0ZVZhbGlkaXR5KCk7XHJcbiAgICAgICAgdGhpcy5kaXJlY3RpdmVzLnB1c2goZGlyKTtcclxuICAgIH07XHJcbiAgICBOZ0Zvcm1Nb2RlbC5wcm90b3R5cGUuZ2V0Q29udHJvbCA9IGZ1bmN0aW9uIChkaXIpIHsgcmV0dXJuIHRoaXMuZm9ybS5maW5kKGRpci5wYXRoKTsgfTtcclxuICAgIE5nRm9ybU1vZGVsLnByb3RvdHlwZS5yZW1vdmVDb250cm9sID0gZnVuY3Rpb24gKGRpcikgeyBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIucmVtb3ZlKHRoaXMuZGlyZWN0aXZlcywgZGlyKTsgfTtcclxuICAgIE5nRm9ybU1vZGVsLnByb3RvdHlwZS5hZGRDb250cm9sR3JvdXAgPSBmdW5jdGlvbiAoZGlyKSB7IH07XHJcbiAgICBOZ0Zvcm1Nb2RlbC5wcm90b3R5cGUucmVtb3ZlQ29udHJvbEdyb3VwID0gZnVuY3Rpb24gKGRpcikgeyB9O1xyXG4gICAgTmdGb3JtTW9kZWwucHJvdG90eXBlLmdldENvbnRyb2xHcm91cCA9IGZ1bmN0aW9uIChkaXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtLmZpbmQoZGlyLnBhdGgpO1xyXG4gICAgfTtcclxuICAgIE5nRm9ybU1vZGVsLnByb3RvdHlwZS51cGRhdGVNb2RlbCA9IGZ1bmN0aW9uIChkaXIsIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGN0cmwgPSB0aGlzLmZvcm0uZmluZChkaXIucGF0aCk7XHJcbiAgICAgICAgY3RybC51cGRhdGVWYWx1ZSh2YWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgTmdGb3JtTW9kZWwucHJvdG90eXBlLm9uU3VibWl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGFzeW5jXzEuT2JzZXJ2YWJsZVdyYXBwZXIuY2FsbE5leHQodGhpcy5uZ1N1Ym1pdCwgbnVsbCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIE5nRm9ybU1vZGVsLnByb3RvdHlwZS5fdXBkYXRlRG9tVmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmRpcmVjdGl2ZXMuZm9yRWFjaChmdW5jdGlvbiAoZGlyKSB7XHJcbiAgICAgICAgICAgIHZhciBjdHJsID0gX3RoaXMuZm9ybS5maW5kKGRpci5wYXRoKTtcclxuICAgICAgICAgICAgZGlyLnZhbHVlQWNjZXNzb3Iud3JpdGVWYWx1ZShjdHJsLnZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBOZ0Zvcm1Nb2RlbCA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIG1ldGFkYXRhXzEuRGlyZWN0aXZlKHtcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICdbbmctZm9ybS1tb2RlbF0nLFxyXG4gICAgICAgICAgICBiaW5kaW5nczogW2Zvcm1EaXJlY3RpdmVQcm92aWRlcl0sXHJcbiAgICAgICAgICAgIGlucHV0czogWydmb3JtOiBuZy1mb3JtLW1vZGVsJ10sXHJcbiAgICAgICAgICAgIGhvc3Q6IHsgJyhzdWJtaXQpJzogJ29uU3VibWl0KCknIH0sXHJcbiAgICAgICAgICAgIG91dHB1dHM6IFsnbmdTdWJtaXQnXSxcclxuICAgICAgICAgICAgZXhwb3J0QXM6ICdmb3JtJ1xyXG4gICAgICAgIH0pLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgTmdGb3JtTW9kZWwpO1xyXG4gICAgcmV0dXJuIE5nRm9ybU1vZGVsO1xyXG59KShjb250cm9sX2NvbnRhaW5lcl8xLkNvbnRyb2xDb250YWluZXIpO1xyXG5leHBvcnRzLk5nRm9ybU1vZGVsID0gTmdGb3JtTW9kZWw7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5nX2Zvcm1fbW9kZWwuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBfX3BhcmFtID0gKHRoaXMgJiYgdGhpcy5fX3BhcmFtKSB8fCBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBhc3luY18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2FzeW5jJyk7XHJcbnZhciBtZXRhZGF0YV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbWV0YWRhdGEnKTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgY29udHJvbF92YWx1ZV9hY2Nlc3Nvcl8xID0gcmVxdWlyZSgnLi9jb250cm9sX3ZhbHVlX2FjY2Vzc29yJyk7XHJcbnZhciBuZ19jb250cm9sXzEgPSByZXF1aXJlKCcuL25nX2NvbnRyb2wnKTtcclxudmFyIG1vZGVsXzEgPSByZXF1aXJlKCcuLi9tb2RlbCcpO1xyXG52YXIgdmFsaWRhdG9yc18xID0gcmVxdWlyZSgnLi4vdmFsaWRhdG9ycycpO1xyXG52YXIgc2hhcmVkXzEgPSByZXF1aXJlKCcuL3NoYXJlZCcpO1xyXG52YXIgZm9ybUNvbnRyb2xCaW5kaW5nID0gbGFuZ18xLkNPTlNUX0VYUFIobmV3IGRpXzEuUHJvdmlkZXIobmdfY29udHJvbF8xLk5nQ29udHJvbCwgeyB1c2VFeGlzdGluZzogZGlfMS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5nTW9kZWw7IH0pIH0pKTtcclxuLyoqXHJcbiAqIEJpbmRzIGEgZG9tYWluIG1vZGVsIHRvIGEgZm9ybSBjb250cm9sLlxyXG4gKlxyXG4gKiAjIFVzYWdlXHJcbiAqXHJcbiAqIGBuZy1tb2RlbGAgYmluZHMgYW4gZXhpc3RpbmcgZG9tYWluIG1vZGVsIHRvIGEgZm9ybSBjb250cm9sLiBGb3IgYVxyXG4gKiB0d28td2F5IGJpbmRpbmcsIHVzZSBgWyhuZy1tb2RlbCldYCB0byBlbnN1cmUgdGhlIG1vZGVsIHVwZGF0ZXMgaW5cclxuICogYm90aCBkaXJlY3Rpb25zLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvUjNVWDVxRGFVcUZPMlZZUjBVekg/cD1wcmV2aWV3KSlcclxuICogIGBgYHR5cGVzY3JpcHRcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgICAgc2VsZWN0b3I6IFwic2VhcmNoLWNvbXBcIixcclxuICogICAgICBkaXJlY3RpdmVzOiBbRk9STV9ESVJFQ1RJVkVTXSxcclxuICogICAgICB0ZW1wbGF0ZTogYDxpbnB1dCB0eXBlPSd0ZXh0JyBbKG5nLW1vZGVsKV09XCJzZWFyY2hRdWVyeVwiPmBcclxuICogICAgICB9KVxyXG4gKiBjbGFzcyBTZWFyY2hDb21wIHtcclxuICogIHNlYXJjaFF1ZXJ5OiBzdHJpbmc7XHJcbiAqIH1cclxuICogIGBgYFxyXG4gKi9cclxudmFyIE5nTW9kZWwgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE5nTW9kZWwsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBOZ01vZGVsKHZhbGlkYXRvcnMsIHZhbHVlQWNjZXNzb3JzKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wgPSBuZXcgbW9kZWxfMS5Db250cm9sKCk7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX2FkZGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy51cGRhdGUgPSBuZXcgYXN5bmNfMS5FdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLnZhbGlkYXRvcnMgPSB2YWxpZGF0b3JzO1xyXG4gICAgICAgIHRoaXMudmFsdWVBY2Nlc3NvciA9IHNoYXJlZF8xLnNlbGVjdFZhbHVlQWNjZXNzb3IodGhpcywgdmFsdWVBY2Nlc3NvcnMpO1xyXG4gICAgfVxyXG4gICAgTmdNb2RlbC5wcm90b3R5cGUub25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2FkZGVkKSB7XHJcbiAgICAgICAgICAgIHNoYXJlZF8xLnNldFVwQ29udHJvbCh0aGlzLl9jb250cm9sLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fY29udHJvbC51cGRhdGVWYWxpZGl0eSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9hZGRlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzaGFyZWRfMS5pc1Byb3BlcnR5VXBkYXRlZChjaGFuZ2VzLCB0aGlzLnZpZXdNb2RlbCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fY29udHJvbC51cGRhdGVWYWx1ZSh0aGlzLm1vZGVsKTtcclxuICAgICAgICAgICAgdGhpcy52aWV3TW9kZWwgPSB0aGlzLm1vZGVsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdNb2RlbC5wcm90b3R5cGUsIFwiY29udHJvbFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9jb250cm9sOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ01vZGVsLnByb3RvdHlwZSwgXCJwYXRoXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ01vZGVsLnByb3RvdHlwZSwgXCJ2YWxpZGF0b3JcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsaWRhdG9yc18xLlZhbGlkYXRvcnMuY29tcG9zZSh0aGlzLnZhbGlkYXRvcnMpOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE5nTW9kZWwucHJvdG90eXBlLnZpZXdUb01vZGVsVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy52aWV3TW9kZWwgPSBuZXdWYWx1ZTtcclxuICAgICAgICBhc3luY18xLk9ic2VydmFibGVXcmFwcGVyLmNhbGxOZXh0KHRoaXMudXBkYXRlLCBuZXdWYWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgTmdNb2RlbCA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIG1ldGFkYXRhXzEuRGlyZWN0aXZlKHtcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICdbbmctbW9kZWxdOm5vdChbbmctY29udHJvbF0pOm5vdChbbmctZm9ybS1jb250cm9sXSknLFxyXG4gICAgICAgICAgICBiaW5kaW5nczogW2Zvcm1Db250cm9sQmluZGluZ10sXHJcbiAgICAgICAgICAgIGlucHV0czogWydtb2RlbDogbmdNb2RlbCddLFxyXG4gICAgICAgICAgICBvdXRwdXRzOiBbJ3VwZGF0ZTogbmdNb2RlbENoYW5nZSddLFxyXG4gICAgICAgICAgICBleHBvcnRBczogJ2Zvcm0nXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgX19wYXJhbSgwLCBkaV8xLk9wdGlvbmFsKCkpLFxyXG4gICAgICAgIF9fcGFyYW0oMCwgZGlfMS5JbmplY3QodmFsaWRhdG9yc18xLk5HX1ZBTElEQVRPUlMpKSxcclxuICAgICAgICBfX3BhcmFtKDEsIGRpXzEuT3B0aW9uYWwoKSksXHJcbiAgICAgICAgX19wYXJhbSgxLCBkaV8xLkluamVjdChjb250cm9sX3ZhbHVlX2FjY2Vzc29yXzEuTkdfVkFMVUVfQUNDRVNTT1IpKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbQXJyYXksIEFycmF5XSlcclxuICAgIF0sIE5nTW9kZWwpO1xyXG4gICAgcmV0dXJuIE5nTW9kZWw7XHJcbn0pKG5nX2NvbnRyb2xfMS5OZ0NvbnRyb2wpO1xyXG5leHBvcnRzLk5nTW9kZWwgPSBOZ01vZGVsO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZ19tb2RlbC5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIG1ldGFkYXRhXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YScpO1xyXG52YXIgbGlua2VyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9saW5rZXInKTtcclxudmFyIHJlbmRlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvcmVuZGVyJyk7XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIGNvbnRyb2xfdmFsdWVfYWNjZXNzb3JfMSA9IHJlcXVpcmUoJy4vY29udHJvbF92YWx1ZV9hY2Nlc3NvcicpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIHNoYXJlZF8xID0gcmVxdWlyZSgnLi9zaGFyZWQnKTtcclxudmFyIE5VTUJFUl9WQUxVRV9BQ0NFU1NPUiA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBkaV8xLlByb3ZpZGVyKGNvbnRyb2xfdmFsdWVfYWNjZXNzb3JfMS5OR19WQUxVRV9BQ0NFU1NPUiwgeyB1c2VFeGlzdGluZzogZGlfMS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE51bWJlclZhbHVlQWNjZXNzb3I7IH0pLCBtdWx0aTogdHJ1ZSB9KSk7XHJcbi8qKlxyXG4gKiBUaGUgYWNjZXNzb3IgZm9yIHdyaXRpbmcgYSBudW1iZXIgdmFsdWUgYW5kIGxpc3RlbmluZyB0byBjaGFuZ2VzIHRoYXQgaXMgdXNlZCBieSB0aGVcclxuICoge0BsaW5rIE5nTW9kZWx9LCB7QGxpbmsgTmdGb3JtQ29udHJvbH0sIGFuZCB7QGxpbmsgTmdDb250cm9sTmFtZX0gZGlyZWN0aXZlcy5cclxuICpcclxuICogICMgRXhhbXBsZVxyXG4gKiAgYGBgXHJcbiAqICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIFsobmctbW9kZWwpXT1cImFnZVwiPlxyXG4gKiAgYGBgXHJcbiAqL1xyXG52YXIgTnVtYmVyVmFsdWVBY2Nlc3NvciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOdW1iZXJWYWx1ZUFjY2Vzc29yKF9yZW5kZXJlciwgX2VsZW1lbnRSZWYpIHtcclxuICAgICAgICB0aGlzLl9yZW5kZXJlciA9IF9yZW5kZXJlcjtcclxuICAgICAgICB0aGlzLl9lbGVtZW50UmVmID0gX2VsZW1lbnRSZWY7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IGZ1bmN0aW9uIChfKSB7IH07XHJcbiAgICAgICAgdGhpcy5vblRvdWNoZWQgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICB9XHJcbiAgICBOdW1iZXJWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS53cml0ZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7IHNoYXJlZF8xLnNldFByb3BlcnR5KHRoaXMuX3JlbmRlcmVyLCB0aGlzLl9lbGVtZW50UmVmLCAndmFsdWUnLCB2YWx1ZSk7IH07XHJcbiAgICBOdW1iZXJWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS5yZWdpc3Rlck9uQ2hhbmdlID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IGZ1bmN0aW9uICh2YWx1ZSkgeyBmbihsYW5nXzEuTnVtYmVyV3JhcHBlci5wYXJzZUZsb2F0KHZhbHVlKSk7IH07XHJcbiAgICB9O1xyXG4gICAgTnVtYmVyVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUucmVnaXN0ZXJPblRvdWNoZWQgPSBmdW5jdGlvbiAoZm4pIHsgdGhpcy5vblRvdWNoZWQgPSBmbjsgfTtcclxuICAgIE51bWJlclZhbHVlQWNjZXNzb3IgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBtZXRhZGF0YV8xLkRpcmVjdGl2ZSh7XHJcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnaW5wdXRbdHlwZT1udW1iZXJdW25nLWNvbnRyb2xdLGlucHV0W3R5cGU9bnVtYmVyXVtuZy1mb3JtLWNvbnRyb2xdLGlucHV0W3R5cGU9bnVtYmVyXVtuZy1tb2RlbF0nLFxyXG4gICAgICAgICAgICBob3N0OiB7XHJcbiAgICAgICAgICAgICAgICAnKGNoYW5nZSknOiAnb25DaGFuZ2UoJGV2ZW50LnRhcmdldC52YWx1ZSknLFxyXG4gICAgICAgICAgICAgICAgJyhpbnB1dCknOiAnb25DaGFuZ2UoJGV2ZW50LnRhcmdldC52YWx1ZSknLFxyXG4gICAgICAgICAgICAgICAgJyhibHVyKSc6ICdvblRvdWNoZWQoKSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYmluZGluZ3M6IFtOVU1CRVJfVkFMVUVfQUNDRVNTT1JdXHJcbiAgICAgICAgfSksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW3JlbmRlcl8xLlJlbmRlcmVyLCBsaW5rZXJfMS5FbGVtZW50UmVmXSlcclxuICAgIF0sIE51bWJlclZhbHVlQWNjZXNzb3IpO1xyXG4gICAgcmV0dXJuIE51bWJlclZhbHVlQWNjZXNzb3I7XHJcbn0pKCk7XHJcbmV4cG9ydHMuTnVtYmVyVmFsdWVBY2Nlc3NvciA9IE51bWJlclZhbHVlQWNjZXNzb3I7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bWJlcl92YWx1ZV9hY2Nlc3Nvci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIF9fcGFyYW0gPSAodGhpcyAmJiB0aGlzLl9fcGFyYW0pIHx8IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59O1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciByZW5kZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL3JlbmRlcicpO1xyXG52YXIgbGlua2VyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9saW5rZXInKTtcclxudmFyIG1ldGFkYXRhXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YScpO1xyXG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9hc3luYycpO1xyXG52YXIgY29udHJvbF92YWx1ZV9hY2Nlc3Nvcl8xID0gcmVxdWlyZSgnLi9jb250cm9sX3ZhbHVlX2FjY2Vzc29yJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgc2hhcmVkXzEgPSByZXF1aXJlKCcuL3NoYXJlZCcpO1xyXG52YXIgU0VMRUNUX1ZBTFVFX0FDQ0VTU09SID0gbGFuZ18xLkNPTlNUX0VYUFIobmV3IGRpXzEuUHJvdmlkZXIoY29udHJvbF92YWx1ZV9hY2Nlc3Nvcl8xLk5HX1ZBTFVFX0FDQ0VTU09SLCB7IHVzZUV4aXN0aW5nOiBkaV8xLmZvcndhcmRSZWYoZnVuY3Rpb24gKCkgeyByZXR1cm4gU2VsZWN0Q29udHJvbFZhbHVlQWNjZXNzb3I7IH0pLCBtdWx0aTogdHJ1ZSB9KSk7XHJcbi8qKlxyXG4gKiBNYXJrcyBgPG9wdGlvbj5gIGFzIGR5bmFtaWMsIHNvIEFuZ3VsYXIgY2FuIGJlIG5vdGlmaWVkIHdoZW4gb3B0aW9ucyBjaGFuZ2UuXHJcbiAqXHJcbiAqICNFeGFtcGxlOlxyXG4gKlxyXG4gKiBgYGBcclxuICogPHNlbGVjdCBuZy1jb250cm9sPVwiY2l0eVwiPlxyXG4gKiAgIDxvcHRpb24gKm5nLWZvcj1cIiNjIG9mIGNpdGllc1wiIFt2YWx1ZV09XCJjXCI+PC9vcHRpb24+XHJcbiAqIDwvc2VsZWN0PlxyXG4gKiBgYGBcclxuICovXHJcbnZhciBOZ1NlbGVjdE9wdGlvbiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOZ1NlbGVjdE9wdGlvbigpIHtcclxuICAgIH1cclxuICAgIE5nU2VsZWN0T3B0aW9uID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbWV0YWRhdGFfMS5EaXJlY3RpdmUoeyBzZWxlY3RvcjogJ29wdGlvbicgfSksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXHJcbiAgICBdLCBOZ1NlbGVjdE9wdGlvbik7XHJcbiAgICByZXR1cm4gTmdTZWxlY3RPcHRpb247XHJcbn0pKCk7XHJcbmV4cG9ydHMuTmdTZWxlY3RPcHRpb24gPSBOZ1NlbGVjdE9wdGlvbjtcclxuLyoqXHJcbiAqIFRoZSBhY2Nlc3NvciBmb3Igd3JpdGluZyBhIHZhbHVlIGFuZCBsaXN0ZW5pbmcgdG8gY2hhbmdlcyBvbiBhIHNlbGVjdCBlbGVtZW50LlxyXG4gKi9cclxudmFyIFNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yKF9yZW5kZXJlciwgX2VsZW1lbnRSZWYsIHF1ZXJ5KSB7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSBfcmVuZGVyZXI7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudFJlZiA9IF9lbGVtZW50UmVmO1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSBmdW5jdGlvbiAoXykgeyB9O1xyXG4gICAgICAgIHRoaXMub25Ub3VjaGVkID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZVZhbHVlV2hlbkxpc3RPZk9wdGlvbnNDaGFuZ2VzKHF1ZXJ5KTtcclxuICAgIH1cclxuICAgIFNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS53cml0ZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHNoYXJlZF8xLnNldFByb3BlcnR5KHRoaXMuX3JlbmRlcmVyLCB0aGlzLl9lbGVtZW50UmVmLCBcInZhbHVlXCIsIHZhbHVlKTtcclxuICAgIH07XHJcbiAgICBTZWxlY3RDb250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUucmVnaXN0ZXJPbkNoYW5nZSA9IGZ1bmN0aW9uIChmbikgeyB0aGlzLm9uQ2hhbmdlID0gZm47IH07XHJcbiAgICBTZWxlY3RDb250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUucmVnaXN0ZXJPblRvdWNoZWQgPSBmdW5jdGlvbiAoZm4pIHsgdGhpcy5vblRvdWNoZWQgPSBmbjsgfTtcclxuICAgIFNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS5fdXBkYXRlVmFsdWVXaGVuTGlzdE9mT3B0aW9uc0NoYW5nZXMgPSBmdW5jdGlvbiAocXVlcnkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGFzeW5jXzEuT2JzZXJ2YWJsZVdyYXBwZXIuc3Vic2NyaWJlKHF1ZXJ5LmNoYW5nZXMsIGZ1bmN0aW9uIChfKSB7IHJldHVybiBfdGhpcy53cml0ZVZhbHVlKF90aGlzLnZhbHVlKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgU2VsZWN0Q29udHJvbFZhbHVlQWNjZXNzb3IgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBtZXRhZGF0YV8xLkRpcmVjdGl2ZSh7XHJcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnc2VsZWN0W25nLWNvbnRyb2xdLHNlbGVjdFtuZy1mb3JtLWNvbnRyb2xdLHNlbGVjdFtuZy1tb2RlbF0nLFxyXG4gICAgICAgICAgICBob3N0OiB7XHJcbiAgICAgICAgICAgICAgICAnKGNoYW5nZSknOiAnb25DaGFuZ2UoJGV2ZW50LnRhcmdldC52YWx1ZSknLFxyXG4gICAgICAgICAgICAgICAgJyhpbnB1dCknOiAnb25DaGFuZ2UoJGV2ZW50LnRhcmdldC52YWx1ZSknLFxyXG4gICAgICAgICAgICAgICAgJyhibHVyKSc6ICdvblRvdWNoZWQoKSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYmluZGluZ3M6IFtTRUxFQ1RfVkFMVUVfQUNDRVNTT1JdXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgX19wYXJhbSgyLCBtZXRhZGF0YV8xLlF1ZXJ5KE5nU2VsZWN0T3B0aW9uLCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbcmVuZGVyXzEuUmVuZGVyZXIsIGxpbmtlcl8xLkVsZW1lbnRSZWYsIGxpbmtlcl8xLlF1ZXJ5TGlzdF0pXHJcbiAgICBdLCBTZWxlY3RDb250cm9sVmFsdWVBY2Nlc3Nvcik7XHJcbiAgICByZXR1cm4gU2VsZWN0Q29udHJvbFZhbHVlQWNjZXNzb3I7XHJcbn0pKCk7XHJcbmV4cG9ydHMuU2VsZWN0Q29udHJvbFZhbHVlQWNjZXNzb3IgPSBTZWxlY3RDb250cm9sVmFsdWVBY2Nlc3NvcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VsZWN0X2NvbnRyb2xfdmFsdWVfYWNjZXNzb3IuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciB2YWxpZGF0b3JzXzEgPSByZXF1aXJlKCcuLi92YWxpZGF0b3JzJyk7XHJcbnZhciBkZWZhdWx0X3ZhbHVlX2FjY2Vzc29yXzEgPSByZXF1aXJlKCcuL2RlZmF1bHRfdmFsdWVfYWNjZXNzb3InKTtcclxudmFyIG51bWJlcl92YWx1ZV9hY2Nlc3Nvcl8xID0gcmVxdWlyZSgnLi9udW1iZXJfdmFsdWVfYWNjZXNzb3InKTtcclxudmFyIGNoZWNrYm94X3ZhbHVlX2FjY2Vzc29yXzEgPSByZXF1aXJlKCcuL2NoZWNrYm94X3ZhbHVlX2FjY2Vzc29yJyk7XHJcbnZhciBzZWxlY3RfY29udHJvbF92YWx1ZV9hY2Nlc3Nvcl8xID0gcmVxdWlyZSgnLi9zZWxlY3RfY29udHJvbF92YWx1ZV9hY2Nlc3NvcicpO1xyXG5mdW5jdGlvbiBjb250cm9sUGF0aChuYW1lLCBwYXJlbnQpIHtcclxuICAgIHZhciBwID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNsb25lKHBhcmVudC5wYXRoKTtcclxuICAgIHAucHVzaChuYW1lKTtcclxuICAgIHJldHVybiBwO1xyXG59XHJcbmV4cG9ydHMuY29udHJvbFBhdGggPSBjb250cm9sUGF0aDtcclxuZnVuY3Rpb24gc2V0VXBDb250cm9sKGNvbnRyb2wsIGRpcikge1xyXG4gICAgaWYgKGxhbmdfMS5pc0JsYW5rKGNvbnRyb2wpKVxyXG4gICAgICAgIF90aHJvd0Vycm9yKGRpciwgXCJDYW5ub3QgZmluZCBjb250cm9sXCIpO1xyXG4gICAgaWYgKGxhbmdfMS5pc0JsYW5rKGRpci52YWx1ZUFjY2Vzc29yKSlcclxuICAgICAgICBfdGhyb3dFcnJvcihkaXIsIFwiTm8gdmFsdWUgYWNjZXNzb3IgZm9yXCIpO1xyXG4gICAgY29udHJvbC52YWxpZGF0b3IgPSB2YWxpZGF0b3JzXzEuVmFsaWRhdG9ycy5jb21wb3NlKFtjb250cm9sLnZhbGlkYXRvciwgZGlyLnZhbGlkYXRvcl0pO1xyXG4gICAgZGlyLnZhbHVlQWNjZXNzb3Iud3JpdGVWYWx1ZShjb250cm9sLnZhbHVlKTtcclxuICAgIC8vIHZpZXcgLT4gbW9kZWxcclxuICAgIGRpci52YWx1ZUFjY2Vzc29yLnJlZ2lzdGVyT25DaGFuZ2UoZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgZGlyLnZpZXdUb01vZGVsVXBkYXRlKG5ld1ZhbHVlKTtcclxuICAgICAgICBjb250cm9sLnVwZGF0ZVZhbHVlKG5ld1ZhbHVlLCB7IGVtaXRNb2RlbFRvVmlld0NoYW5nZTogZmFsc2UgfSk7XHJcbiAgICAgICAgY29udHJvbC5tYXJrQXNEaXJ0eSgpO1xyXG4gICAgfSk7XHJcbiAgICAvLyBtb2RlbCAtPiB2aWV3XHJcbiAgICBjb250cm9sLnJlZ2lzdGVyT25DaGFuZ2UoZnVuY3Rpb24gKG5ld1ZhbHVlKSB7IHJldHVybiBkaXIudmFsdWVBY2Nlc3Nvci53cml0ZVZhbHVlKG5ld1ZhbHVlKTsgfSk7XHJcbiAgICAvLyB0b3VjaGVkXHJcbiAgICBkaXIudmFsdWVBY2Nlc3Nvci5yZWdpc3Rlck9uVG91Y2hlZChmdW5jdGlvbiAoKSB7IHJldHVybiBjb250cm9sLm1hcmtBc1RvdWNoZWQoKTsgfSk7XHJcbn1cclxuZXhwb3J0cy5zZXRVcENvbnRyb2wgPSBzZXRVcENvbnRyb2w7XHJcbmZ1bmN0aW9uIF90aHJvd0Vycm9yKGRpciwgbWVzc2FnZSkge1xyXG4gICAgdmFyIHBhdGggPSBkaXIucGF0aC5qb2luKFwiIC0+IFwiKTtcclxuICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihtZXNzYWdlICsgXCIgJ1wiICsgcGF0aCArIFwiJ1wiKTtcclxufVxyXG5mdW5jdGlvbiBzZXRQcm9wZXJ0eShyZW5kZXJlciwgZWxlbWVudFJlZiwgcHJvcE5hbWUsIHByb3BWYWx1ZSkge1xyXG4gICAgcmVuZGVyZXIuc2V0RWxlbWVudFByb3BlcnR5KGVsZW1lbnRSZWYsIHByb3BOYW1lLCBwcm9wVmFsdWUpO1xyXG59XHJcbmV4cG9ydHMuc2V0UHJvcGVydHkgPSBzZXRQcm9wZXJ0eTtcclxuZnVuY3Rpb24gaXNQcm9wZXJ0eVVwZGF0ZWQoY2hhbmdlcywgdmlld01vZGVsKSB7XHJcbiAgICBpZiAoIWNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLmNvbnRhaW5zKGNoYW5nZXMsIFwibW9kZWxcIikpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGNoYW5nZSA9IGNoYW5nZXNbXCJtb2RlbFwiXTtcclxuICAgIGlmIChjaGFuZ2UuaXNGaXJzdENoYW5nZSgpKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgcmV0dXJuICFsYW5nXzEubG9vc2VJZGVudGljYWwodmlld01vZGVsLCBjaGFuZ2UuY3VycmVudFZhbHVlKTtcclxufVxyXG5leHBvcnRzLmlzUHJvcGVydHlVcGRhdGVkID0gaXNQcm9wZXJ0eVVwZGF0ZWQ7XHJcbi8vIFRPRE86IHZzYXZraW4gcmVtb3ZlIGl0IG9uY2UgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMzAxMSBpcyBpbXBsZW1lbnRlZFxyXG5mdW5jdGlvbiBzZWxlY3RWYWx1ZUFjY2Vzc29yKGRpciwgdmFsdWVBY2Nlc3NvcnMpIHtcclxuICAgIGlmIChsYW5nXzEuaXNCbGFuayh2YWx1ZUFjY2Vzc29ycykpXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB2YXIgZGVmYXVsdEFjY2Vzc29yO1xyXG4gICAgdmFyIGJ1aWx0aW5BY2Nlc3NvcjtcclxuICAgIHZhciBjdXN0b21BY2Nlc3NvcjtcclxuICAgIHZhbHVlQWNjZXNzb3JzLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICBpZiAodiBpbnN0YW5jZW9mIGRlZmF1bHRfdmFsdWVfYWNjZXNzb3JfMS5EZWZhdWx0VmFsdWVBY2Nlc3Nvcikge1xyXG4gICAgICAgICAgICBkZWZhdWx0QWNjZXNzb3IgPSB2O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2IGluc3RhbmNlb2YgY2hlY2tib3hfdmFsdWVfYWNjZXNzb3JfMS5DaGVja2JveENvbnRyb2xWYWx1ZUFjY2Vzc29yIHx8IHYgaW5zdGFuY2VvZiBudW1iZXJfdmFsdWVfYWNjZXNzb3JfMS5OdW1iZXJWYWx1ZUFjY2Vzc29yIHx8XHJcbiAgICAgICAgICAgIHYgaW5zdGFuY2VvZiBzZWxlY3RfY29udHJvbF92YWx1ZV9hY2Nlc3Nvcl8xLlNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yKSB7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGJ1aWx0aW5BY2Nlc3NvcikpXHJcbiAgICAgICAgICAgICAgICBfdGhyb3dFcnJvcihkaXIsIFwiTW9yZSB0aGFuIG9uZSBidWlsdC1pbiB2YWx1ZSBhY2Nlc3NvciBtYXRjaGVzXCIpO1xyXG4gICAgICAgICAgICBidWlsdGluQWNjZXNzb3IgPSB2O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoY3VzdG9tQWNjZXNzb3IpKVxyXG4gICAgICAgICAgICAgICAgX3Rocm93RXJyb3IoZGlyLCBcIk1vcmUgdGhhbiBvbmUgY3VzdG9tIHZhbHVlIGFjY2Vzc29yIG1hdGNoZXNcIik7XHJcbiAgICAgICAgICAgIGN1c3RvbUFjY2Vzc29yID0gdjtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGN1c3RvbUFjY2Vzc29yKSlcclxuICAgICAgICByZXR1cm4gY3VzdG9tQWNjZXNzb3I7XHJcbiAgICBpZiAobGFuZ18xLmlzUHJlc2VudChidWlsdGluQWNjZXNzb3IpKVxyXG4gICAgICAgIHJldHVybiBidWlsdGluQWNjZXNzb3I7XHJcbiAgICBpZiAobGFuZ18xLmlzUHJlc2VudChkZWZhdWx0QWNjZXNzb3IpKVxyXG4gICAgICAgIHJldHVybiBkZWZhdWx0QWNjZXNzb3I7XHJcbiAgICBfdGhyb3dFcnJvcihkaXIsIFwiTm8gdmFsaWQgdmFsdWUgYWNjZXNzb3IgZm9yXCIpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuZXhwb3J0cy5zZWxlY3RWYWx1ZUFjY2Vzc29yID0gc2VsZWN0VmFsdWVBY2Nlc3NvcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmVkLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgX19wYXJhbSA9ICh0aGlzICYmIHRoaXMuX19wYXJhbSkgfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn07XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBtZXRhZGF0YV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbWV0YWRhdGEnKTtcclxudmFyIHZhbGlkYXRvcnNfMSA9IHJlcXVpcmUoJy4uL3ZhbGlkYXRvcnMnKTtcclxudmFyIGxhbmdfMiA9IHJlcXVpcmUoXCJhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZ1wiKTtcclxudmFyIFJFUVVJUkVEX1ZBTElEQVRPUiA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBkaV8xLlByb3ZpZGVyKHZhbGlkYXRvcnNfMS5OR19WQUxJREFUT1JTLCB7IHVzZVZhbHVlOiB2YWxpZGF0b3JzXzEuVmFsaWRhdG9ycy5yZXF1aXJlZCwgbXVsdGk6IHRydWUgfSkpO1xyXG52YXIgUmVxdWlyZWRWYWxpZGF0b3IgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVxdWlyZWRWYWxpZGF0b3IoKSB7XHJcbiAgICB9XHJcbiAgICBSZXF1aXJlZFZhbGlkYXRvciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIG1ldGFkYXRhXzEuRGlyZWN0aXZlKHtcclxuICAgICAgICAgICAgc2VsZWN0b3I6ICdbcmVxdWlyZWRdW25nLWNvbnRyb2xdLFtyZXF1aXJlZF1bbmctZm9ybS1jb250cm9sXSxbcmVxdWlyZWRdW25nLW1vZGVsXScsXHJcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1JFUVVJUkVEX1ZBTElEQVRPUl1cclxuICAgICAgICB9KSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcclxuICAgIF0sIFJlcXVpcmVkVmFsaWRhdG9yKTtcclxuICAgIHJldHVybiBSZXF1aXJlZFZhbGlkYXRvcjtcclxufSkoKTtcclxuZXhwb3J0cy5SZXF1aXJlZFZhbGlkYXRvciA9IFJlcXVpcmVkVmFsaWRhdG9yO1xyXG5mdW5jdGlvbiBjcmVhdGVNaW5MZW5ndGhWYWxpZGF0b3IoZGlyKSB7XHJcbiAgICByZXR1cm4gdmFsaWRhdG9yc18xLlZhbGlkYXRvcnMubWluTGVuZ3RoKGRpci5taW5MZW5ndGgpO1xyXG59XHJcbnZhciBNSU5fTEVOR1RIX1ZBTElEQVRPUiA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBkaV8xLlByb3ZpZGVyKHZhbGlkYXRvcnNfMS5OR19WQUxJREFUT1JTLCB7XHJcbiAgICB1c2VGYWN0b3J5OiBjcmVhdGVNaW5MZW5ndGhWYWxpZGF0b3IsXHJcbiAgICBkZXBzOiBbZGlfMS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1pbkxlbmd0aFZhbGlkYXRvcjsgfSldLFxyXG4gICAgbXVsdGk6IHRydWVcclxufSkpO1xyXG52YXIgTWluTGVuZ3RoVmFsaWRhdG9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1pbkxlbmd0aFZhbGlkYXRvcihtaW5MZW5ndGgpIHtcclxuICAgICAgICB0aGlzLm1pbkxlbmd0aCA9IGxhbmdfMi5OdW1iZXJXcmFwcGVyLnBhcnNlSW50KG1pbkxlbmd0aCwgMTApO1xyXG4gICAgfVxyXG4gICAgTWluTGVuZ3RoVmFsaWRhdG9yID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbWV0YWRhdGFfMS5EaXJlY3RpdmUoe1xyXG4gICAgICAgICAgICBzZWxlY3RvcjogJ1ttaW5sZW5ndGhdW25nLWNvbnRyb2xdLFttaW5sZW5ndGhdW25nLWZvcm0tY29udHJvbF0sW21pbmxlbmd0aF1bbmctbW9kZWxdJyxcclxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbTUlOX0xFTkdUSF9WQUxJREFUT1JdXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgX19wYXJhbSgwLCBtZXRhZGF0YV8xLkF0dHJpYnV0ZShcIm1pbmxlbmd0aFwiKSksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW1N0cmluZ10pXHJcbiAgICBdLCBNaW5MZW5ndGhWYWxpZGF0b3IpO1xyXG4gICAgcmV0dXJuIE1pbkxlbmd0aFZhbGlkYXRvcjtcclxufSkoKTtcclxuZXhwb3J0cy5NaW5MZW5ndGhWYWxpZGF0b3IgPSBNaW5MZW5ndGhWYWxpZGF0b3I7XHJcbmZ1bmN0aW9uIGNyZWF0ZU1heExlbmd0aFZhbGlkYXRvcihkaXIpIHtcclxuICAgIHJldHVybiB2YWxpZGF0b3JzXzEuVmFsaWRhdG9ycy5tYXhMZW5ndGgoZGlyLm1heExlbmd0aCk7XHJcbn1cclxudmFyIE1BWF9MRU5HVEhfVkFMSURBVE9SID0gbGFuZ18xLkNPTlNUX0VYUFIobmV3IGRpXzEuUHJvdmlkZXIodmFsaWRhdG9yc18xLk5HX1ZBTElEQVRPUlMsIHtcclxuICAgIHVzZUZhY3Rvcnk6IGNyZWF0ZU1heExlbmd0aFZhbGlkYXRvcixcclxuICAgIGRlcHM6IFtkaV8xLmZvcndhcmRSZWYoZnVuY3Rpb24gKCkgeyByZXR1cm4gTWF4TGVuZ3RoVmFsaWRhdG9yOyB9KV0sXHJcbiAgICBtdWx0aTogdHJ1ZVxyXG59KSk7XHJcbnZhciBNYXhMZW5ndGhWYWxpZGF0b3IgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTWF4TGVuZ3RoVmFsaWRhdG9yKG1heExlbmd0aCkge1xyXG4gICAgICAgIHRoaXMubWF4TGVuZ3RoID0gbGFuZ18yLk51bWJlcldyYXBwZXIucGFyc2VJbnQobWF4TGVuZ3RoLCAxMCk7XHJcbiAgICB9XHJcbiAgICBNYXhMZW5ndGhWYWxpZGF0b3IgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBtZXRhZGF0YV8xLkRpcmVjdGl2ZSh7XHJcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnW21heGxlbmd0aF1bbmctY29udHJvbF0sW21heGxlbmd0aF1bbmctZm9ybS1jb250cm9sXSxbbWF4bGVuZ3RoXVtuZy1tb2RlbF0nLFxyXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtNQVhfTEVOR1RIX1ZBTElEQVRPUl1cclxuICAgICAgICB9KSxcclxuICAgICAgICBfX3BhcmFtKDAsIG1ldGFkYXRhXzEuQXR0cmlidXRlKFwibWF4bGVuZ3RoXCIpKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbU3RyaW5nXSlcclxuICAgIF0sIE1heExlbmd0aFZhbGlkYXRvcik7XHJcbiAgICByZXR1cm4gTWF4TGVuZ3RoVmFsaWRhdG9yO1xyXG59KSgpO1xyXG5leHBvcnRzLk1heExlbmd0aFZhbGlkYXRvciA9IE1heExlbmd0aFZhbGlkYXRvcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdG9ycy5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBtb2RlbE1vZHVsZSA9IHJlcXVpcmUoJy4vbW9kZWwnKTtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBmb3JtIG9iamVjdCBmcm9tIGEgdXNlci1zcGVjaWZpZWQgY29uZmlndXJhdGlvbi5cclxuICpcclxuICogIyBFeGFtcGxlXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBpbXBvcnQge0NvbXBvbmVudCwgYm9vdHN0cmFwfSBmcm9tICdhbmd1bGFyMi9hbmd1bGFyMic7XHJcbiAqIGltcG9ydCB7Rm9ybUJ1aWxkZXIsIFZhbGlkYXRvcnMsIEZPUk1fRElSRUNUSVZFUywgQ29udHJvbEdyb3VwfSBmcm9tICdhbmd1bGFyMi9jb3JlJztcclxuICpcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgc2VsZWN0b3I6ICdsb2dpbi1jb21wJyxcclxuICogICB2aWV3UHJvdmlkZXJzOiBbRm9ybUJ1aWxkZXJdLFxyXG4gKiAgIHRlbXBsYXRlOiBgXHJcbiAqICAgICA8Zm9ybSBbY29udHJvbC1ncm91cF09XCJsb2dpbkZvcm1cIj5cclxuICogICAgICAgTG9naW4gPGlucHV0IGNvbnRyb2w9XCJsb2dpblwiPlxyXG4gKlxyXG4gKiAgICAgICA8ZGl2IGNvbnRyb2wtZ3JvdXA9XCJwYXNzd29yZFJldHJ5XCI+XHJcbiAqICAgICAgICAgUGFzc3dvcmQgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIGNvbnRyb2w9XCJwYXNzd29yZFwiPlxyXG4gKiAgICAgICAgIENvbmZpcm0gcGFzc3dvcmQgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIGNvbnRyb2w9XCJwYXNzd29yZENvbmZpcm1hdGlvblwiPlxyXG4gKiAgICAgICA8L2Rpdj5cclxuICogICAgIDwvZm9ybT5cclxuICogICBgLFxyXG4gKiAgIGRpcmVjdGl2ZXM6IFtGT1JNX0RJUkVDVElWRVNdXHJcbiAqIH0pXHJcbiAqIGNsYXNzIExvZ2luQ29tcCB7XHJcbiAqICAgbG9naW5Gb3JtOiBDb250cm9sR3JvdXA7XHJcbiAqXHJcbiAqICAgY29uc3RydWN0b3IoYnVpbGRlcjogRm9ybUJ1aWxkZXIpIHtcclxuICogICAgIHRoaXMubG9naW5Gb3JtID0gYnVpbGRlci5ncm91cCh7XHJcbiAqICAgICAgIGxvZ2luOiBbXCJcIiwgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbiAqXHJcbiAqICAgICAgIHBhc3N3b3JkUmV0cnk6IGJ1aWxkZXIuZ3JvdXAoe1xyXG4gKiAgICAgICAgIHBhc3N3b3JkOiBbXCJcIiwgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbiAqICAgICAgICAgcGFzc3dvcmRDb25maXJtYXRpb246IFtcIlwiLCBWYWxpZGF0b3JzLnJlcXVpcmVkXVxyXG4gKiAgICAgICB9KVxyXG4gKiAgICAgfSk7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqXHJcbiAqIGJvb3RzdHJhcChMb2dpbkNvbXApO1xyXG4gKiBgYGBcclxuICpcclxuICogVGhpcyBleGFtcGxlIGNyZWF0ZXMgYSB7QGxpbmsgQ29udHJvbEdyb3VwfSB0aGF0IGNvbnNpc3RzIG9mIGEgYGxvZ2luYCB7QGxpbmsgQ29udHJvbH0sIGFuZCBhXHJcbiAqIG5lc3RlZCB7QGxpbmsgQ29udHJvbEdyb3VwfSB0aGF0IGRlZmluZXMgYSBgcGFzc3dvcmRgIGFuZCBhIGBwYXNzd29yZENvbmZpcm1hdGlvbmBcclxuICoge0BsaW5rIENvbnRyb2x9OlxyXG4gKlxyXG4gKiBgYGBcclxuICogIHZhciBsb2dpbkZvcm0gPSBidWlsZGVyLmdyb3VwKHtcclxuICogICAgbG9naW46IFtcIlwiLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICpcclxuICogICAgcGFzc3dvcmRSZXRyeTogYnVpbGRlci5ncm91cCh7XHJcbiAqICAgICAgcGFzc3dvcmQ6IFtcIlwiLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICogICAgICBwYXNzd29yZENvbmZpcm1hdGlvbjogW1wiXCIsIFZhbGlkYXRvcnMucmVxdWlyZWRdXHJcbiAqICAgIH0pXHJcbiAqICB9KTtcclxuICpcclxuICogIGBgYFxyXG4gKi9cclxudmFyIEZvcm1CdWlsZGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZvcm1CdWlsZGVyKCkge1xyXG4gICAgfVxyXG4gICAgRm9ybUJ1aWxkZXIucHJvdG90eXBlLmdyb3VwID0gZnVuY3Rpb24gKGNvbnRyb2xzQ29uZmlnLCBleHRyYSkge1xyXG4gICAgICAgIGlmIChleHRyYSA9PT0gdm9pZCAwKSB7IGV4dHJhID0gbnVsbDsgfVxyXG4gICAgICAgIHZhciBjb250cm9scyA9IHRoaXMuX3JlZHVjZUNvbnRyb2xzKGNvbnRyb2xzQ29uZmlnKTtcclxuICAgICAgICB2YXIgb3B0aW9uYWxzID0gbGFuZ18xLmlzUHJlc2VudChleHRyYSkgPyBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5nZXQoZXh0cmEsIFwib3B0aW9uYWxzXCIpIDogbnVsbDtcclxuICAgICAgICB2YXIgdmFsaWRhdG9yID0gbGFuZ18xLmlzUHJlc2VudChleHRyYSkgPyBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5nZXQoZXh0cmEsIFwidmFsaWRhdG9yXCIpIDogbnVsbDtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh2YWxpZGF0b3IpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgbW9kZWxNb2R1bGUuQ29udHJvbEdyb3VwKGNvbnRyb2xzLCBvcHRpb25hbHMsIHZhbGlkYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IG1vZGVsTW9kdWxlLkNvbnRyb2xHcm91cChjb250cm9scywgb3B0aW9uYWxzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRm9ybUJ1aWxkZXIucHJvdG90eXBlLmNvbnRyb2wgPSBmdW5jdGlvbiAodmFsdWUsIHZhbGlkYXRvcikge1xyXG4gICAgICAgIGlmICh2YWxpZGF0b3IgPT09IHZvaWQgMCkgeyB2YWxpZGF0b3IgPSBudWxsOyB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodmFsaWRhdG9yKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IG1vZGVsTW9kdWxlLkNvbnRyb2wodmFsdWUsIHZhbGlkYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IG1vZGVsTW9kdWxlLkNvbnRyb2wodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGb3JtQnVpbGRlci5wcm90b3R5cGUuYXJyYXkgPSBmdW5jdGlvbiAoY29udHJvbHNDb25maWcsIHZhbGlkYXRvcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHZhbGlkYXRvciA9PT0gdm9pZCAwKSB7IHZhbGlkYXRvciA9IG51bGw7IH1cclxuICAgICAgICB2YXIgY29udHJvbHMgPSBjb250cm9sc0NvbmZpZy5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIF90aGlzLl9jcmVhdGVDb250cm9sKGMpOyB9KTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh2YWxpZGF0b3IpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgbW9kZWxNb2R1bGUuQ29udHJvbEFycmF5KGNvbnRyb2xzLCB2YWxpZGF0b3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBtb2RlbE1vZHVsZS5Db250cm9sQXJyYXkoY29udHJvbHMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBGb3JtQnVpbGRlci5wcm90b3R5cGUuX3JlZHVjZUNvbnRyb2xzID0gZnVuY3Rpb24gKGNvbnRyb2xzQ29uZmlnKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgY29udHJvbHMgPSB7fTtcclxuICAgICAgICBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5mb3JFYWNoKGNvbnRyb2xzQ29uZmlnLCBmdW5jdGlvbiAoY29udHJvbENvbmZpZywgY29udHJvbE5hbWUpIHtcclxuICAgICAgICAgICAgY29udHJvbHNbY29udHJvbE5hbWVdID0gX3RoaXMuX2NyZWF0ZUNvbnRyb2woY29udHJvbENvbmZpZyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRyb2xzO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIEZvcm1CdWlsZGVyLnByb3RvdHlwZS5fY3JlYXRlQ29udHJvbCA9IGZ1bmN0aW9uIChjb250cm9sQ29uZmlnKSB7XHJcbiAgICAgICAgaWYgKGNvbnRyb2xDb25maWcgaW5zdGFuY2VvZiBtb2RlbE1vZHVsZS5Db250cm9sIHx8XHJcbiAgICAgICAgICAgIGNvbnRyb2xDb25maWcgaW5zdGFuY2VvZiBtb2RlbE1vZHVsZS5Db250cm9sR3JvdXAgfHxcclxuICAgICAgICAgICAgY29udHJvbENvbmZpZyBpbnN0YW5jZW9mIG1vZGVsTW9kdWxlLkNvbnRyb2xBcnJheSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29udHJvbENvbmZpZztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGFuZ18xLmlzQXJyYXkoY29udHJvbENvbmZpZykpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gY29udHJvbENvbmZpZ1swXTtcclxuICAgICAgICAgICAgdmFyIHZhbGlkYXRvciA9IGNvbnRyb2xDb25maWcubGVuZ3RoID4gMSA/IGNvbnRyb2xDb25maWdbMV0gOiBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sKHZhbHVlLCB2YWxpZGF0b3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbChjb250cm9sQ29uZmlnKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRm9ybUJ1aWxkZXIgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcclxuICAgIF0sIEZvcm1CdWlsZGVyKTtcclxuICAgIHJldHVybiBGb3JtQnVpbGRlcjtcclxufSkoKTtcclxuZXhwb3J0cy5Gb3JtQnVpbGRlciA9IEZvcm1CdWlsZGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtX2J1aWxkZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9hc3luYycpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIHZhbGlkYXRvcnNfMSA9IHJlcXVpcmUoJy4vdmFsaWRhdG9ycycpO1xyXG4vKipcclxuICogSW5kaWNhdGVzIHRoYXQgYSBDb250cm9sIGlzIHZhbGlkLCBpLmUuIHRoYXQgbm8gZXJyb3JzIGV4aXN0IGluIHRoZSBpbnB1dCB2YWx1ZS5cclxuICovXHJcbmV4cG9ydHMuVkFMSUQgPSBcIlZBTElEXCI7XHJcbi8qKlxyXG4gKiBJbmRpY2F0ZXMgdGhhdCBhIENvbnRyb2wgaXMgaW52YWxpZCwgaS5lLiB0aGF0IGFuIGVycm9yIGV4aXN0cyBpbiB0aGUgaW5wdXQgdmFsdWUuXHJcbiAqL1xyXG5leHBvcnRzLklOVkFMSUQgPSBcIklOVkFMSURcIjtcclxuZnVuY3Rpb24gaXNDb250cm9sKGNvbnRyb2wpIHtcclxuICAgIHJldHVybiBjb250cm9sIGluc3RhbmNlb2YgQWJzdHJhY3RDb250cm9sO1xyXG59XHJcbmV4cG9ydHMuaXNDb250cm9sID0gaXNDb250cm9sO1xyXG5mdW5jdGlvbiBfZmluZChjb250cm9sLCBwYXRoKSB7XHJcbiAgICBpZiAobGFuZ18xLmlzQmxhbmsocGF0aCkpXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICBpZiAoIShwYXRoIGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcbiAgICAgICAgcGF0aCA9IHBhdGguc3BsaXQoXCIvXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKHBhdGggaW5zdGFuY2VvZiBBcnJheSAmJiBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuaXNFbXB0eShwYXRoKSlcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIHJldHVybiBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIucmVkdWNlKHBhdGgsIGZ1bmN0aW9uICh2LCBuYW1lKSB7XHJcbiAgICAgICAgaWYgKHYgaW5zdGFuY2VvZiBDb250cm9sR3JvdXApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQodi5jb250cm9sc1tuYW1lXSkgPyB2LmNvbnRyb2xzW25hbWVdIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodiBpbnN0YW5jZW9mIENvbnRyb2xBcnJheSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBuYW1lO1xyXG4gICAgICAgICAgICByZXR1cm4gbGFuZ18xLmlzUHJlc2VudCh2LmF0KGluZGV4KSkgPyB2LmF0KGluZGV4KSA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9LCBjb250cm9sKTtcclxufVxyXG4vKipcclxuICogT21pdHRpbmcgZnJvbSBleHRlcm5hbCBBUEkgZG9jIGFzIHRoaXMgaXMgcmVhbGx5IGFuIGFic3RyYWN0IGludGVybmFsIGNvbmNlcHQuXHJcbiAqL1xyXG52YXIgQWJzdHJhY3RDb250cm9sID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFic3RyYWN0Q29udHJvbCh2YWxpZGF0b3IpIHtcclxuICAgICAgICB0aGlzLnZhbGlkYXRvciA9IHZhbGlkYXRvcjtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5fcHJpc3RpbmUgPSB0cnVlO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl90b3VjaGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl92YWx1ZTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZSwgXCJzdGF0dXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fc3RhdHVzOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLCBcInZhbGlkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3N0YXR1cyA9PT0gZXhwb3J0cy5WQUxJRDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZSwgXCJlcnJvcnNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZXJyb3JzOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLCBcInByaXN0aW5lXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3ByaXN0aW5lOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLCBcImRpcnR5XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICF0aGlzLnByaXN0aW5lOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLCBcInRvdWNoZWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fdG91Y2hlZDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZSwgXCJ1bnRvdWNoZWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gIXRoaXMuX3RvdWNoZWQ7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUsIFwidmFsdWVDaGFuZ2VzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3ZhbHVlQ2hhbmdlczsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLm1hcmtBc1RvdWNoZWQgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX3RvdWNoZWQgPSB0cnVlOyB9O1xyXG4gICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS5tYXJrQXNEaXJ0eSA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgIHZhciBvbmx5U2VsZiA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkub25seVNlbGY7XHJcbiAgICAgICAgb25seVNlbGYgPSBsYW5nXzEubm9ybWFsaXplQm9vbChvbmx5U2VsZik7XHJcbiAgICAgICAgdGhpcy5fcHJpc3RpbmUgPSBmYWxzZTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLl9wYXJlbnQpICYmICFvbmx5U2VsZikge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQubWFya0FzRGlydHkoeyBvbmx5U2VsZjogb25seVNlbGYgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUuc2V0UGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkgeyB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7IH07XHJcbiAgICBBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLnVwZGF0ZVZhbGlkaXR5ID0gZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgdmFyIG9ubHlTZWxmID0gKF9hID09PSB2b2lkIDAgPyB7fSA6IF9hKS5vbmx5U2VsZjtcclxuICAgICAgICBvbmx5U2VsZiA9IGxhbmdfMS5ub3JtYWxpemVCb29sKG9ubHlTZWxmKTtcclxuICAgICAgICB0aGlzLl9lcnJvcnMgPSB0aGlzLnZhbGlkYXRvcih0aGlzKTtcclxuICAgICAgICB0aGlzLl9zdGF0dXMgPSBsYW5nXzEuaXNQcmVzZW50KHRoaXMuX2Vycm9ycykgPyBleHBvcnRzLklOVkFMSUQgOiBleHBvcnRzLlZBTElEO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRoaXMuX3BhcmVudCkgJiYgIW9ubHlTZWxmKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudC51cGRhdGVWYWxpZGl0eSh7IG9ubHlTZWxmOiBvbmx5U2VsZiB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5ID0gZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIG9ubHlTZWxmID0gX2Iub25seVNlbGYsIGVtaXRFdmVudCA9IF9iLmVtaXRFdmVudDtcclxuICAgICAgICBvbmx5U2VsZiA9IGxhbmdfMS5ub3JtYWxpemVCb29sKG9ubHlTZWxmKTtcclxuICAgICAgICBlbWl0RXZlbnQgPSBsYW5nXzEuaXNQcmVzZW50KGVtaXRFdmVudCkgPyBlbWl0RXZlbnQgOiB0cnVlO1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZVZhbHVlKCk7XHJcbiAgICAgICAgdGhpcy5fZXJyb3JzID0gdGhpcy52YWxpZGF0b3IodGhpcyk7XHJcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gbGFuZ18xLmlzUHJlc2VudCh0aGlzLl9lcnJvcnMpID8gZXhwb3J0cy5JTlZBTElEIDogZXhwb3J0cy5WQUxJRDtcclxuICAgICAgICBpZiAoZW1pdEV2ZW50KSB7XHJcbiAgICAgICAgICAgIGFzeW5jXzEuT2JzZXJ2YWJsZVdyYXBwZXIuY2FsbE5leHQodGhpcy5fdmFsdWVDaGFuZ2VzLCB0aGlzLl92YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRoaXMuX3BhcmVudCkgJiYgIW9ubHlTZWxmKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudC51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KHsgb25seVNlbGY6IG9ubHlTZWxmLCBlbWl0RXZlbnQ6IGVtaXRFdmVudCB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKHBhdGgpIHsgcmV0dXJuIF9maW5kKHRoaXMsIHBhdGgpOyB9O1xyXG4gICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS5nZXRFcnJvciA9IGZ1bmN0aW9uIChlcnJvckNvZGUsIHBhdGgpIHtcclxuICAgICAgICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7IHBhdGggPSBudWxsOyB9XHJcbiAgICAgICAgdmFyIGNvbnRyb2wgPSBsYW5nXzEuaXNQcmVzZW50KHBhdGgpICYmICFjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuaXNFbXB0eShwYXRoKSA/IHRoaXMuZmluZChwYXRoKSA6IHRoaXM7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoY29udHJvbCkgJiYgbGFuZ18xLmlzUHJlc2VudChjb250cm9sLl9lcnJvcnMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5nZXQoY29udHJvbC5fZXJyb3JzLCBlcnJvckNvZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUuaGFzRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3JDb2RlLCBwYXRoKSB7XHJcbiAgICAgICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gbnVsbDsgfVxyXG4gICAgICAgIHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHRoaXMuZ2V0RXJyb3IoZXJyb3JDb2RlLCBwYXRoKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS5fdXBkYXRlVmFsdWUgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICByZXR1cm4gQWJzdHJhY3RDb250cm9sO1xyXG59KSgpO1xyXG5leHBvcnRzLkFic3RyYWN0Q29udHJvbCA9IEFic3RyYWN0Q29udHJvbDtcclxuLyoqXHJcbiAqIERlZmluZXMgYSBwYXJ0IG9mIGEgZm9ybSB0aGF0IGNhbm5vdCBiZSBkaXZpZGVkIGludG8gb3RoZXIgY29udHJvbHMuIGBDb250cm9sYHMgaGF2ZSB2YWx1ZXMgYW5kXHJcbiAqIHZhbGlkYXRpb24gc3RhdGUsIHdoaWNoIGlzIGRldGVybWluZWQgYnkgYW4gb3B0aW9uYWwgdmFsaWRhdGlvbiBmdW5jdGlvbi5cclxuICpcclxuICogYENvbnRyb2xgIGlzIG9uZSBvZiB0aGUgdGhyZWUgZnVuZGFtZW50YWwgYnVpbGRpbmcgYmxvY2tzIHVzZWQgdG8gZGVmaW5lIGZvcm1zIGluIEFuZ3VsYXIsIGFsb25nXHJcbiAqIHdpdGgge0BsaW5rIENvbnRyb2xHcm91cH0gYW5kIHtAbGluayBDb250cm9sQXJyYXl9LlxyXG4gKlxyXG4gKiAjIFVzYWdlXHJcbiAqXHJcbiAqIEJ5IGRlZmF1bHQsIGEgYENvbnRyb2xgIGlzIGNyZWF0ZWQgZm9yIGV2ZXJ5IGA8aW5wdXQ+YCBvciBvdGhlciBmb3JtIGNvbXBvbmVudC5cclxuICogV2l0aCB7QGxpbmsgTmdGb3JtQ29udHJvbH0gb3Ige0BsaW5rIE5nRm9ybU1vZGVsfSBhbiBleGlzdGluZyB7QGxpbmsgQ29udHJvbH0gY2FuIGJlXHJcbiAqIGJvdW5kIHRvIGEgRE9NIGVsZW1lbnQgaW5zdGVhZC4gVGhpcyBgQ29udHJvbGAgY2FuIGJlIGNvbmZpZ3VyZWQgd2l0aCBhIGN1c3RvbVxyXG4gKiB2YWxpZGF0aW9uIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvMjNERVNPcGJObkJwQkhadDFCUjQ/cD1wcmV2aWV3KSlcclxuICovXHJcbnZhciBDb250cm9sID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhDb250cm9sLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ29udHJvbCh2YWx1ZSwgdmFsaWRhdG9yKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHsgdmFsdWUgPSBudWxsOyB9XHJcbiAgICAgICAgaWYgKHZhbGlkYXRvciA9PT0gdm9pZCAwKSB7IHZhbGlkYXRvciA9IHZhbGlkYXRvcnNfMS5WYWxpZGF0b3JzLm51bGxWYWxpZGF0b3I7IH1cclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB2YWxpZGF0b3IpO1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy51cGRhdGVWYWxpZGl0eSh7IG9ubHlTZWxmOiB0cnVlIH0pO1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlQ2hhbmdlcyA9IG5ldyBhc3luY18xLkV2ZW50RW1pdHRlcigpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIHZhbHVlIG9mIHRoZSBjb250cm9sIHRvIGB2YWx1ZWAuXHJcbiAgICAgKlxyXG4gICAgICogSWYgYG9ubHlTZWxmYCBpcyBgdHJ1ZWAsIHRoaXMgY2hhbmdlIHdpbGwgb25seSBhZmZlY3QgdGhlIHZhbGlkYXRpb24gb2YgdGhpcyBgQ29udHJvbGBcclxuICAgICAqIGFuZCBub3QgaXRzIHBhcmVudCBjb21wb25lbnQuIElmIGBlbWl0RXZlbnRgIGlzIGB0cnVlYCwgdGhpcyBjaGFuZ2Ugd2lsbCBjYXVzZSBhXHJcbiAgICAgKiBgdmFsdWVDaGFuZ2VzYCBldmVudCBvbiB0aGUgYENvbnRyb2xgIHRvIGJlIGVtaXR0ZWQuIEJvdGggb2YgdGhlc2Ugb3B0aW9ucyBkZWZhdWx0IHRvXHJcbiAgICAgKiBgZmFsc2VgLlxyXG4gICAgICpcclxuICAgICAqIElmIGBlbWl0TW9kZWxUb1ZpZXdDaGFuZ2VgIGlzIGB0cnVlYCwgdGhlIHZpZXcgd2lsbCBiZSBub3RpZmllZCBhYm91dCB0aGUgbmV3IHZhbHVlXHJcbiAgICAgKiB2aWEgYW4gYG9uQ2hhbmdlYCBldmVudC4gVGhpcyBpcyB0aGUgZGVmYXVsdCBiZWhhdmlvciBpZiBgZW1pdE1vZGVsVG9WaWV3Q2hhbmdlYCBpcyBub3RcclxuICAgICAqIHNwZWNpZmllZC5cclxuICAgICAqL1xyXG4gICAgQ29udHJvbC5wcm90b3R5cGUudXBkYXRlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICAgICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIG9ubHlTZWxmID0gX2Iub25seVNlbGYsIGVtaXRFdmVudCA9IF9iLmVtaXRFdmVudCwgZW1pdE1vZGVsVG9WaWV3Q2hhbmdlID0gX2IuZW1pdE1vZGVsVG9WaWV3Q2hhbmdlO1xyXG4gICAgICAgIGVtaXRNb2RlbFRvVmlld0NoYW5nZSA9IGxhbmdfMS5pc1ByZXNlbnQoZW1pdE1vZGVsVG9WaWV3Q2hhbmdlKSA/IGVtaXRNb2RlbFRvVmlld0NoYW5nZSA6IHRydWU7XHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLl9vbkNoYW5nZSkgJiYgZW1pdE1vZGVsVG9WaWV3Q2hhbmdlKVxyXG4gICAgICAgICAgICB0aGlzLl9vbkNoYW5nZSh0aGlzLl92YWx1ZSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KHsgb25seVNlbGY6IG9ubHlTZWxmLCBlbWl0RXZlbnQ6IGVtaXRFdmVudCB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGEgbGlzdGVuZXIgZm9yIGNoYW5nZSBldmVudHMuXHJcbiAgICAgKi9cclxuICAgIENvbnRyb2wucHJvdG90eXBlLnJlZ2lzdGVyT25DaGFuZ2UgPSBmdW5jdGlvbiAoZm4pIHsgdGhpcy5fb25DaGFuZ2UgPSBmbjsgfTtcclxuICAgIHJldHVybiBDb250cm9sO1xyXG59KShBYnN0cmFjdENvbnRyb2wpO1xyXG5leHBvcnRzLkNvbnRyb2wgPSBDb250cm9sO1xyXG4vKipcclxuICogRGVmaW5lcyBhIHBhcnQgb2YgYSBmb3JtLCBvZiBmaXhlZCBsZW5ndGgsIHRoYXQgY2FuIGNvbnRhaW4gb3RoZXIgY29udHJvbHMuXHJcbiAqXHJcbiAqIEEgYENvbnRyb2xHcm91cGAgYWdncmVnYXRlcyB0aGUgdmFsdWVzIGFuZCBlcnJvcnMgb2YgZWFjaCB7QGxpbmsgQ29udHJvbH0gaW4gdGhlIGdyb3VwLiBUaHVzLCBpZlxyXG4gKiBvbmUgb2YgdGhlIGNvbnRyb2xzIGluIGEgZ3JvdXAgaXMgaW52YWxpZCwgdGhlIGVudGlyZSBncm91cCBpcyBpbnZhbGlkLiBTaW1pbGFybHksIGlmIGEgY29udHJvbFxyXG4gKiBjaGFuZ2VzIGl0cyB2YWx1ZSwgdGhlIGVudGlyZSBncm91cCBjaGFuZ2VzIGFzIHdlbGwuXHJcbiAqXHJcbiAqIGBDb250cm9sR3JvdXBgIGlzIG9uZSBvZiB0aGUgdGhyZWUgZnVuZGFtZW50YWwgYnVpbGRpbmcgYmxvY2tzIHVzZWQgdG8gZGVmaW5lIGZvcm1zIGluIEFuZ3VsYXIsXHJcbiAqIGFsb25nIHdpdGgge0BsaW5rIENvbnRyb2x9IGFuZCB7QGxpbmsgQ29udHJvbEFycmF5fS4ge0BsaW5rIENvbnRyb2xBcnJheX0gY2FuIGFsc28gY29udGFpbiBvdGhlclxyXG4gKiBjb250cm9scywgYnV0IGlzIG9mIHZhcmlhYmxlIGxlbmd0aC5cclxuICpcclxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0LzIzREVTT3BiTm5CcEJIWnQxQlI0P3A9cHJldmlldykpXHJcbiAqL1xyXG52YXIgQ29udHJvbEdyb3VwID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhDb250cm9sR3JvdXAsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBDb250cm9sR3JvdXAoY29udHJvbHMsIG9wdGlvbmFscywgdmFsaWRhdG9yKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbmFscyA9PT0gdm9pZCAwKSB7IG9wdGlvbmFscyA9IG51bGw7IH1cclxuICAgICAgICBpZiAodmFsaWRhdG9yID09PSB2b2lkIDApIHsgdmFsaWRhdG9yID0gdmFsaWRhdG9yc18xLlZhbGlkYXRvcnMuZ3JvdXA7IH1cclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB2YWxpZGF0b3IpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbHMgPSBjb250cm9scztcclxuICAgICAgICB0aGlzLl9vcHRpb25hbHMgPSBsYW5nXzEuaXNQcmVzZW50KG9wdGlvbmFscykgPyBvcHRpb25hbHMgOiB7fTtcclxuICAgICAgICB0aGlzLl92YWx1ZUNoYW5nZXMgPSBuZXcgYXN5bmNfMS5FdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLl9zZXRQYXJlbnRGb3JDb250cm9scygpO1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5fcmVkdWNlVmFsdWUoKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVZhbGlkaXR5KHsgb25seVNlbGY6IHRydWUgfSk7XHJcbiAgICB9XHJcbiAgICBDb250cm9sR3JvdXAucHJvdG90eXBlLmFkZENvbnRyb2wgPSBmdW5jdGlvbiAobmFtZSwgY29udHJvbCkge1xyXG4gICAgICAgIHRoaXMuY29udHJvbHNbbmFtZV0gPSBjb250cm9sO1xyXG4gICAgICAgIGNvbnRyb2wuc2V0UGFyZW50KHRoaXMpO1xyXG4gICAgfTtcclxuICAgIENvbnRyb2xHcm91cC5wcm90b3R5cGUucmVtb3ZlQ29udHJvbCA9IGZ1bmN0aW9uIChuYW1lKSB7IGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLmRlbGV0ZSh0aGlzLmNvbnRyb2xzLCBuYW1lKTsgfTtcclxuICAgIENvbnRyb2xHcm91cC5wcm90b3R5cGUuaW5jbHVkZSA9IGZ1bmN0aW9uIChjb250cm9sTmFtZSkge1xyXG4gICAgICAgIGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLnNldCh0aGlzLl9vcHRpb25hbHMsIGNvbnRyb2xOYW1lLCB0cnVlKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcclxuICAgIH07XHJcbiAgICBDb250cm9sR3JvdXAucHJvdG90eXBlLmV4Y2x1ZGUgPSBmdW5jdGlvbiAoY29udHJvbE5hbWUpIHtcclxuICAgICAgICBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5zZXQodGhpcy5fb3B0aW9uYWxzLCBjb250cm9sTmFtZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xyXG4gICAgfTtcclxuICAgIENvbnRyb2xHcm91cC5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAoY29udHJvbE5hbWUpIHtcclxuICAgICAgICB2YXIgYyA9IGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLmNvbnRhaW5zKHRoaXMuY29udHJvbHMsIGNvbnRyb2xOYW1lKTtcclxuICAgICAgICByZXR1cm4gYyAmJiB0aGlzLl9pbmNsdWRlZChjb250cm9sTmFtZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQ29udHJvbEdyb3VwLnByb3RvdHlwZS5fc2V0UGFyZW50Rm9yQ29udHJvbHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5mb3JFYWNoKHRoaXMuY29udHJvbHMsIGZ1bmN0aW9uIChjb250cm9sLCBuYW1lKSB7IGNvbnRyb2wuc2V0UGFyZW50KF90aGlzKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQ29udHJvbEdyb3VwLnByb3RvdHlwZS5fdXBkYXRlVmFsdWUgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX3ZhbHVlID0gdGhpcy5fcmVkdWNlVmFsdWUoKTsgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIENvbnRyb2xHcm91cC5wcm90b3R5cGUuX3JlZHVjZVZhbHVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWR1Y2VDaGlsZHJlbih7fSwgZnVuY3Rpb24gKGFjYywgY29udHJvbCwgbmFtZSkge1xyXG4gICAgICAgICAgICBhY2NbbmFtZV0gPSBjb250cm9sLnZhbHVlO1xyXG4gICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIENvbnRyb2xHcm91cC5wcm90b3R5cGUuX3JlZHVjZUNoaWxkcmVuID0gZnVuY3Rpb24gKGluaXRWYWx1ZSwgZm4pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciByZXMgPSBpbml0VmFsdWU7XHJcbiAgICAgICAgY29sbGVjdGlvbl8xLlN0cmluZ01hcFdyYXBwZXIuZm9yRWFjaCh0aGlzLmNvbnRyb2xzLCBmdW5jdGlvbiAoY29udHJvbCwgbmFtZSkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuX2luY2x1ZGVkKG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXMgPSBmbihyZXMsIGNvbnRyb2wsIG5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBDb250cm9sR3JvdXAucHJvdG90eXBlLl9pbmNsdWRlZCA9IGZ1bmN0aW9uIChjb250cm9sTmFtZSkge1xyXG4gICAgICAgIHZhciBpc09wdGlvbmFsID0gY29sbGVjdGlvbl8xLlN0cmluZ01hcFdyYXBwZXIuY29udGFpbnModGhpcy5fb3B0aW9uYWxzLCBjb250cm9sTmFtZSk7XHJcbiAgICAgICAgcmV0dXJuICFpc09wdGlvbmFsIHx8IGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLmdldCh0aGlzLl9vcHRpb25hbHMsIGNvbnRyb2xOYW1lKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29udHJvbEdyb3VwO1xyXG59KShBYnN0cmFjdENvbnRyb2wpO1xyXG5leHBvcnRzLkNvbnRyb2xHcm91cCA9IENvbnRyb2xHcm91cDtcclxuLyoqXHJcbiAqIERlZmluZXMgYSBwYXJ0IG9mIGEgZm9ybSwgb2YgdmFyaWFibGUgbGVuZ3RoLCB0aGF0IGNhbiBjb250YWluIG90aGVyIGNvbnRyb2xzLlxyXG4gKlxyXG4gKiBBIGBDb250cm9sQXJyYXlgIGFnZ3JlZ2F0ZXMgdGhlIHZhbHVlcyBhbmQgZXJyb3JzIG9mIGVhY2gge0BsaW5rIENvbnRyb2x9IGluIHRoZSBncm91cC4gVGh1cywgaWZcclxuICogb25lIG9mIHRoZSBjb250cm9scyBpbiBhIGdyb3VwIGlzIGludmFsaWQsIHRoZSBlbnRpcmUgZ3JvdXAgaXMgaW52YWxpZC4gU2ltaWxhcmx5LCBpZiBhIGNvbnRyb2xcclxuICogY2hhbmdlcyBpdHMgdmFsdWUsIHRoZSBlbnRpcmUgZ3JvdXAgY2hhbmdlcyBhcyB3ZWxsLlxyXG4gKlxyXG4gKiBgQ29udHJvbEFycmF5YCBpcyBvbmUgb2YgdGhlIHRocmVlIGZ1bmRhbWVudGFsIGJ1aWxkaW5nIGJsb2NrcyB1c2VkIHRvIGRlZmluZSBmb3JtcyBpbiBBbmd1bGFyLFxyXG4gKiBhbG9uZyB3aXRoIHtAbGluayBDb250cm9sfSBhbmQge0BsaW5rIENvbnRyb2xHcm91cH0uIHtAbGluayBDb250cm9sR3JvdXB9IGNhbiBhbHNvIGNvbnRhaW5cclxuICogb3RoZXIgY29udHJvbHMsIGJ1dCBpcyBvZiBmaXhlZCBsZW5ndGguXHJcbiAqXHJcbiAqICMgQWRkaW5nIG9yIHJlbW92aW5nIGNvbnRyb2xzXHJcbiAqXHJcbiAqIFRvIGNoYW5nZSB0aGUgY29udHJvbHMgaW4gdGhlIGFycmF5LCB1c2UgdGhlIGBwdXNoYCwgYGluc2VydGAsIG9yIGByZW1vdmVBdGAgbWV0aG9kc1xyXG4gKiBpbiBgQ29udHJvbEFycmF5YCBpdHNlbGYuIFRoZXNlIG1ldGhvZHMgZW5zdXJlIHRoZSBjb250cm9scyBhcmUgcHJvcGVybHkgdHJhY2tlZCBpbiB0aGVcclxuICogZm9ybSdzIGhpZXJhcmNoeS4gRG8gbm90IG1vZGlmeSB0aGUgYXJyYXkgb2YgYEFic3RyYWN0Q29udHJvbGBzIHVzZWQgdG8gaW5zdGFudGlhdGVcclxuICogdGhlIGBDb250cm9sQXJyYXlgIGRpcmVjdGx5LCBhcyB0aGF0IHdpbGwgcmVzdWx0IGluIHN0cmFuZ2UgYW5kIHVuZXhwZWN0ZWQgYmVoYXZpb3Igc3VjaFxyXG4gKiBhcyBicm9rZW4gY2hhbmdlIGRldGVjdGlvbi5cclxuICpcclxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0LzIzREVTT3BiTm5CcEJIWnQxQlI0P3A9cHJldmlldykpXHJcbiAqL1xyXG52YXIgQ29udHJvbEFycmF5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhDb250cm9sQXJyYXksIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBDb250cm9sQXJyYXkoY29udHJvbHMsIHZhbGlkYXRvcikge1xyXG4gICAgICAgIGlmICh2YWxpZGF0b3IgPT09IHZvaWQgMCkgeyB2YWxpZGF0b3IgPSB2YWxpZGF0b3JzXzEuVmFsaWRhdG9ycy5hcnJheTsgfVxyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHZhbGlkYXRvcik7XHJcbiAgICAgICAgdGhpcy5jb250cm9scyA9IGNvbnRyb2xzO1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlQ2hhbmdlcyA9IG5ldyBhc3luY18xLkV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMuX3NldFBhcmVudEZvckNvbnRyb2xzKCk7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlVmFsdWUoKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVZhbGlkaXR5KHsgb25seVNlbGY6IHRydWUgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUge0BsaW5rIEFic3RyYWN0Q29udHJvbH0gYXQgdGhlIGdpdmVuIGBpbmRleGAgaW4gdGhlIGFycmF5LlxyXG4gICAgICovXHJcbiAgICBDb250cm9sQXJyYXkucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24gKGluZGV4KSB7IHJldHVybiB0aGlzLmNvbnRyb2xzW2luZGV4XTsgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW5zZXJ0IGEgbmV3IHtAbGluayBBYnN0cmFjdENvbnRyb2x9IGF0IHRoZSBlbmQgb2YgdGhlIGFycmF5LlxyXG4gICAgICovXHJcbiAgICBDb250cm9sQXJyYXkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY29udHJvbCkge1xyXG4gICAgICAgIHRoaXMuY29udHJvbHMucHVzaChjb250cm9sKTtcclxuICAgICAgICBjb250cm9sLnNldFBhcmVudCh0aGlzKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEluc2VydCBhIG5ldyB7QGxpbmsgQWJzdHJhY3RDb250cm9sfSBhdCB0aGUgZ2l2ZW4gYGluZGV4YCBpbiB0aGUgYXJyYXkuXHJcbiAgICAgKi9cclxuICAgIENvbnRyb2xBcnJheS5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24gKGluZGV4LCBjb250cm9sKSB7XHJcbiAgICAgICAgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmluc2VydCh0aGlzLmNvbnRyb2xzLCBpbmRleCwgY29udHJvbCk7XHJcbiAgICAgICAgY29udHJvbC5zZXRQYXJlbnQodGhpcyk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgdGhlIGNvbnRyb2wgYXQgdGhlIGdpdmVuIGBpbmRleGAgaW4gdGhlIGFycmF5LlxyXG4gICAgICovXHJcbiAgICBDb250cm9sQXJyYXkucHJvdG90eXBlLnJlbW92ZUF0ID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLnJlbW92ZUF0KHRoaXMuY29udHJvbHMsIGluZGV4KTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29udHJvbEFycmF5LnByb3RvdHlwZSwgXCJsZW5ndGhcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldCB0aGUgbGVuZ3RoIG9mIHRoZSBjb250cm9sIGFycmF5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5jb250cm9scy5sZW5ndGg7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQ29udHJvbEFycmF5LnByb3RvdHlwZS5fdXBkYXRlVmFsdWUgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX3ZhbHVlID0gdGhpcy5jb250cm9scy5tYXAoZnVuY3Rpb24gKGNvbnRyb2wpIHsgcmV0dXJuIGNvbnRyb2wudmFsdWU7IH0pOyB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQ29udHJvbEFycmF5LnByb3RvdHlwZS5fc2V0UGFyZW50Rm9yQ29udHJvbHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmNvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2wpIHsgY29udHJvbC5zZXRQYXJlbnQoX3RoaXMpOyB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29udHJvbEFycmF5O1xyXG59KShBYnN0cmFjdENvbnRyb2wpO1xyXG5leHBvcnRzLkNvbnRyb2xBcnJheSA9IENvbnRyb2xBcnJheTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kZWwuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgbGFuZ18yID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxuZXhwb3J0cy5OR19WQUxJREFUT1JTID0gbGFuZ18yLkNPTlNUX0VYUFIobmV3IGRpXzEuT3BhcXVlVG9rZW4oXCJOZ1ZhbGlkYXRvcnNcIikpO1xyXG4vKipcclxuICogUHJvdmlkZXMgYSBzZXQgb2YgdmFsaWRhdG9ycyB1c2VkIGJ5IGZvcm0gY29udHJvbHMuXHJcbiAqXHJcbiAqICMgRXhhbXBsZVxyXG4gKlxyXG4gKiBgYGBcclxuICogdmFyIGxvZ2luQ29udHJvbCA9IG5ldyBDb250cm9sKFwiXCIsIFZhbGlkYXRvcnMucmVxdWlyZWQpXHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIFZhbGlkYXRvcnMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVmFsaWRhdG9ycygpIHtcclxuICAgIH1cclxuICAgIFZhbGlkYXRvcnMucmVxdWlyZWQgPSBmdW5jdGlvbiAoY29udHJvbCkge1xyXG4gICAgICAgIHJldHVybiBsYW5nXzEuaXNCbGFuayhjb250cm9sLnZhbHVlKSB8fCBjb250cm9sLnZhbHVlID09IFwiXCIgPyB7IFwicmVxdWlyZWRcIjogdHJ1ZSB9IDogbnVsbDtcclxuICAgIH07XHJcbiAgICBWYWxpZGF0b3JzLm1pbkxlbmd0aCA9IGZ1bmN0aW9uIChtaW5MZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoVmFsaWRhdG9ycy5yZXF1aXJlZChjb250cm9sKSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgdmFyIHYgPSBjb250cm9sLnZhbHVlO1xyXG4gICAgICAgICAgICByZXR1cm4gdi5sZW5ndGggPCBtaW5MZW5ndGggP1xyXG4gICAgICAgICAgICAgICAgeyBcIm1pbmxlbmd0aFwiOiB7IFwicmVxdWlyZWRMZW5ndGhcIjogbWluTGVuZ3RoLCBcImFjdHVhbExlbmd0aFwiOiB2Lmxlbmd0aCB9IH0gOlxyXG4gICAgICAgICAgICAgICAgbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIFZhbGlkYXRvcnMubWF4TGVuZ3RoID0gZnVuY3Rpb24gKG1heExlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoY29udHJvbCkge1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChWYWxpZGF0b3JzLnJlcXVpcmVkKGNvbnRyb2wpKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB2YXIgdiA9IGNvbnRyb2wudmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybiB2Lmxlbmd0aCA+IG1heExlbmd0aCA/XHJcbiAgICAgICAgICAgICAgICB7IFwibWF4bGVuZ3RoXCI6IHsgXCJyZXF1aXJlZExlbmd0aFwiOiBtYXhMZW5ndGgsIFwiYWN0dWFsTGVuZ3RoXCI6IHYubGVuZ3RoIH0gfSA6XHJcbiAgICAgICAgICAgICAgICBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgVmFsaWRhdG9ycy5udWxsVmFsaWRhdG9yID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG51bGw7IH07XHJcbiAgICBWYWxpZGF0b3JzLmNvbXBvc2UgPSBmdW5jdGlvbiAodmFsaWRhdG9ycykge1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayh2YWxpZGF0b3JzKSlcclxuICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMubnVsbFZhbGlkYXRvcjtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgdmFyIHJlcyA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5yZWR1Y2UodmFsaWRhdG9ycywgZnVuY3Rpb24gKHJlcywgdmFsaWRhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JzID0gdmFsaWRhdG9yKGNvbnRyb2wpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQoZXJyb3JzKSA/IGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLm1lcmdlKHJlcywgZXJyb3JzKSA6IHJlcztcclxuICAgICAgICAgICAgfSwge30pO1xyXG4gICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbl8xLlN0cmluZ01hcFdyYXBwZXIuaXNFbXB0eShyZXMpID8gbnVsbCA6IHJlcztcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIFZhbGlkYXRvcnMuZ3JvdXAgPSBmdW5jdGlvbiAoZ3JvdXApIHtcclxuICAgICAgICB2YXIgcmVzID0ge307XHJcbiAgICAgICAgY29sbGVjdGlvbl8xLlN0cmluZ01hcFdyYXBwZXIuZm9yRWFjaChncm91cC5jb250cm9scywgZnVuY3Rpb24gKGNvbnRyb2wsIG5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKGdyb3VwLmNvbnRhaW5zKG5hbWUpICYmIGxhbmdfMS5pc1ByZXNlbnQoY29udHJvbC5lcnJvcnMpKSB7XHJcbiAgICAgICAgICAgICAgICBWYWxpZGF0b3JzLl9tZXJnZUVycm9ycyhjb250cm9sLCByZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLmlzRW1wdHkocmVzKSA/IG51bGwgOiByZXM7XHJcbiAgICB9O1xyXG4gICAgVmFsaWRhdG9ycy5hcnJheSA9IGZ1bmN0aW9uIChhcnJheSkge1xyXG4gICAgICAgIHZhciByZXMgPSB7fTtcclxuICAgICAgICBhcnJheS5jb250cm9scy5mb3JFYWNoKGZ1bmN0aW9uIChjb250cm9sKSB7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGNvbnRyb2wuZXJyb3JzKSkge1xyXG4gICAgICAgICAgICAgICAgVmFsaWRhdG9ycy5fbWVyZ2VFcnJvcnMoY29udHJvbCwgcmVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5pc0VtcHR5KHJlcykgPyBudWxsIDogcmVzO1xyXG4gICAgfTtcclxuICAgIFZhbGlkYXRvcnMuX21lcmdlRXJyb3JzID0gZnVuY3Rpb24gKGNvbnRyb2wsIHJlcykge1xyXG4gICAgICAgIGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLmZvckVhY2goY29udHJvbC5lcnJvcnMsIGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IpIHtcclxuICAgICAgICAgICAgaWYgKCFjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5jb250YWlucyhyZXMsIGVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgcmVzW2Vycm9yXSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gcmVzW2Vycm9yXTtcclxuICAgICAgICAgICAgY3VycmVudC5wdXNoKGNvbnRyb2wpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBWYWxpZGF0b3JzO1xyXG59KSgpO1xyXG5leHBvcnRzLlZhbGlkYXRvcnMgPSBWYWxpZGF0b3JzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0b3JzLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgZXhjZXB0aW9uc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2V4Y2VwdGlvbnMnKTtcclxudmFyIHByb2ZpbGVfMSA9IHJlcXVpcmUoJy4uL3Byb2ZpbGUvcHJvZmlsZScpO1xyXG4vKipcclxuICogUHJvdmlkZXMgYWNjZXNzIHRvIGV4cGxpY2l0bHkgdHJpZ2dlciBjaGFuZ2UgZGV0ZWN0aW9uIGluIGFuIGFwcGxpY2F0aW9uLlxyXG4gKlxyXG4gKiBCeSBkZWZhdWx0LCBgWm9uZWAgdHJpZ2dlcnMgY2hhbmdlIGRldGVjdGlvbiBpbiBBbmd1bGFyIG9uIGVhY2ggdmlydHVhbCBtYWNoaW5lIChWTSkgdHVybi4gV2hlblxyXG4gKiB0ZXN0aW5nLCBvciBpbiBzb21lXHJcbiAqIGxpbWl0ZWQgYXBwbGljYXRpb24gdXNlIGNhc2VzLCBhIGRldmVsb3BlciBjYW4gYWxzbyB0cmlnZ2VyIGNoYW5nZSBkZXRlY3Rpb24gd2l0aCB0aGVcclxuICogYGxpZmVjeWNsZS50aWNrKClgIG1ldGhvZC5cclxuICpcclxuICogRWFjaCBBbmd1bGFyIGFwcGxpY2F0aW9uIGhhcyBhIHNpbmdsZSBgTGlmZUN5Y2xlYCBpbnN0YW5jZS5cclxuICpcclxuICogIyBFeGFtcGxlXHJcbiAqXHJcbiAqIFRoaXMgaXMgYSBjb250cml2ZWQgZXhhbXBsZSwgc2luY2UgdGhlIGJvb3RzdHJhcCBhdXRvbWF0aWNhbGx5IHJ1bnMgaW5zaWRlIG9mIHRoZSBgWm9uZWAsIHdoaWNoXHJcbiAqIGludm9rZXNcclxuICogYGxpZmVjeWNsZS50aWNrKClgIG9uIHlvdXIgYmVoYWxmLlxyXG4gKlxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIGJvb3RzdHJhcChNeUFwcCkudGhlbigocmVmOkNvbXBvbmVudFJlZikgPT4ge1xyXG4gKiAgIHZhciBsaWZlQ3ljbGUgPSByZWYuaW5qZWN0b3IuZ2V0KExpZmVDeWNsZSk7XHJcbiAqICAgdmFyIG15QXBwID0gcmVmLmluc3RhbmNlO1xyXG4gKlxyXG4gKiAgIHJlZi5kb1NvbWV0aGluZygpO1xyXG4gKiAgIGxpZmVjeWNsZS50aWNrKCk7XHJcbiAqIH0pO1xyXG4gKiBgYGBcclxuICovXHJcbnZhciBMaWZlQ3ljbGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTGlmZUN5Y2xlKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIExpZmVDeWNsZTtcclxufSkoKTtcclxuZXhwb3J0cy5MaWZlQ3ljbGUgPSBMaWZlQ3ljbGU7XHJcbnZhciBMaWZlQ3ljbGVfID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhMaWZlQ3ljbGVfLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTGlmZUN5Y2xlXyhjaGFuZ2VEZXRlY3RvciwgZW5mb3JjZU5vTmV3Q2hhbmdlcykge1xyXG4gICAgICAgIGlmIChjaGFuZ2VEZXRlY3RvciA9PT0gdm9pZCAwKSB7IGNoYW5nZURldGVjdG9yID0gbnVsbDsgfVxyXG4gICAgICAgIGlmIChlbmZvcmNlTm9OZXdDaGFuZ2VzID09PSB2b2lkIDApIHsgZW5mb3JjZU5vTmV3Q2hhbmdlcyA9IGZhbHNlOyB9XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX3J1bm5pbmdUaWNrID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JzID0gW107XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoY2hhbmdlRGV0ZWN0b3IpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9ycy5wdXNoKGNoYW5nZURldGVjdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZW5mb3JjZU5vTmV3Q2hhbmdlcyA9IGVuZm9yY2VOb05ld0NoYW5nZXM7XHJcbiAgICB9XHJcbiAgICBMaWZlQ3ljbGVfLnByb3RvdHlwZS5yZWdpc3RlcldpdGggPSBmdW5jdGlvbiAoem9uZSwgY2hhbmdlRGV0ZWN0b3IpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChjaGFuZ2VEZXRlY3RvciA9PT0gdm9pZCAwKSB7IGNoYW5nZURldGVjdG9yID0gbnVsbDsgfVxyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGNoYW5nZURldGVjdG9yKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvcnMucHVzaChjaGFuZ2VEZXRlY3Rvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHpvbmUub3ZlcnJpZGVPblR1cm5Eb25lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnRpY2soKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgTGlmZUN5Y2xlXy5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5fcnVubmluZ1RpY2spIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKFwiTGlmZUN5Y2xlLnRpY2sgaXMgY2FsbGVkIHJlY3Vyc2l2ZWx5XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcyA9IExpZmVDeWNsZV8uX3RpY2tTY29wZSgpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3J1bm5pbmdUaWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JzLmZvckVhY2goZnVuY3Rpb24gKGRldGVjdG9yKSB7IHJldHVybiBkZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7IH0pO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZW5mb3JjZU5vTmV3Q2hhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JzLmZvckVhY2goZnVuY3Rpb24gKGRldGVjdG9yKSB7IHJldHVybiBkZXRlY3Rvci5jaGVja05vQ2hhbmdlcygpOyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy5fcnVubmluZ1RpY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgcHJvZmlsZV8xLnd0ZkxlYXZlKHMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMaWZlQ3ljbGVfLl90aWNrU2NvcGUgPSBwcm9maWxlXzEud3RmQ3JlYXRlU2NvcGUoJ0xpZmVDeWNsZSN0aWNrKCknKTtcclxuICAgIExpZmVDeWNsZV8gPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbT2JqZWN0LCBCb29sZWFuXSlcclxuICAgIF0sIExpZmVDeWNsZV8pO1xyXG4gICAgcmV0dXJuIExpZmVDeWNsZV87XHJcbn0pKExpZmVDeWNsZSk7XHJcbmV4cG9ydHMuTGlmZUN5Y2xlXyA9IExpZmVDeWNsZV87XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZmVfY3ljbGUuanMubWFwIiwiJ3VzZSBzdHJpY3QnOy8vIFB1YmxpYyBBUEkgZm9yIExpZmVDeWNsZVxyXG52YXIgbGlmZV9jeWNsZV8xID0gcmVxdWlyZSgnLi9saWZlX2N5Y2xlL2xpZmVfY3ljbGUnKTtcclxuZXhwb3J0cy5MaWZlQ3ljbGUgPSBsaWZlX2N5Y2xlXzEuTGlmZUN5Y2xlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWZlY3ljbGUuanMubWFwIiwiJ3VzZSBzdHJpY3QnOy8vIFB1YmxpYyBBUEkgZm9yIGNvbXBpbGVyXHJcbnZhciBkaXJlY3RpdmVfcmVzb2x2ZXJfMSA9IHJlcXVpcmUoJy4vbGlua2VyL2RpcmVjdGl2ZV9yZXNvbHZlcicpO1xyXG5leHBvcnRzLkRpcmVjdGl2ZVJlc29sdmVyID0gZGlyZWN0aXZlX3Jlc29sdmVyXzEuRGlyZWN0aXZlUmVzb2x2ZXI7XHJcbnZhciBjb21waWxlcl8xID0gcmVxdWlyZSgnLi9saW5rZXIvY29tcGlsZXInKTtcclxuZXhwb3J0cy5Db21waWxlciA9IGNvbXBpbGVyXzEuQ29tcGlsZXI7XHJcbnZhciB2aWV3X21hbmFnZXJfMSA9IHJlcXVpcmUoJy4vbGlua2VyL3ZpZXdfbWFuYWdlcicpO1xyXG5leHBvcnRzLkFwcFZpZXdNYW5hZ2VyID0gdmlld19tYW5hZ2VyXzEuQXBwVmlld01hbmFnZXI7XHJcbnZhciBxdWVyeV9saXN0XzEgPSByZXF1aXJlKCcuL2xpbmtlci9xdWVyeV9saXN0Jyk7XHJcbmV4cG9ydHMuUXVlcnlMaXN0ID0gcXVlcnlfbGlzdF8xLlF1ZXJ5TGlzdDtcclxudmFyIGR5bmFtaWNfY29tcG9uZW50X2xvYWRlcl8xID0gcmVxdWlyZSgnLi9saW5rZXIvZHluYW1pY19jb21wb25lbnRfbG9hZGVyJyk7XHJcbmV4cG9ydHMuRHluYW1pY0NvbXBvbmVudExvYWRlciA9IGR5bmFtaWNfY29tcG9uZW50X2xvYWRlcl8xLkR5bmFtaWNDb21wb25lbnRMb2FkZXI7XHJcbnZhciBlbGVtZW50X3JlZl8xID0gcmVxdWlyZSgnLi9saW5rZXIvZWxlbWVudF9yZWYnKTtcclxuZXhwb3J0cy5FbGVtZW50UmVmID0gZWxlbWVudF9yZWZfMS5FbGVtZW50UmVmO1xyXG52YXIgdGVtcGxhdGVfcmVmXzEgPSByZXF1aXJlKCcuL2xpbmtlci90ZW1wbGF0ZV9yZWYnKTtcclxuZXhwb3J0cy5UZW1wbGF0ZVJlZiA9IHRlbXBsYXRlX3JlZl8xLlRlbXBsYXRlUmVmO1xyXG52YXIgdmlld19yZWZfMSA9IHJlcXVpcmUoJy4vbGlua2VyL3ZpZXdfcmVmJyk7XHJcbmV4cG9ydHMuVmlld1JlZiA9IHZpZXdfcmVmXzEuVmlld1JlZjtcclxuZXhwb3J0cy5Qcm90b1ZpZXdSZWYgPSB2aWV3X3JlZl8xLlByb3RvVmlld1JlZjtcclxudmFyIHZpZXdfY29udGFpbmVyX3JlZl8xID0gcmVxdWlyZSgnLi9saW5rZXIvdmlld19jb250YWluZXJfcmVmJyk7XHJcbmV4cG9ydHMuVmlld0NvbnRhaW5lclJlZiA9IHZpZXdfY29udGFpbmVyX3JlZl8xLlZpZXdDb250YWluZXJSZWY7XHJcbnZhciBkeW5hbWljX2NvbXBvbmVudF9sb2FkZXJfMiA9IHJlcXVpcmUoJy4vbGlua2VyL2R5bmFtaWNfY29tcG9uZW50X2xvYWRlcicpO1xyXG5leHBvcnRzLkNvbXBvbmVudFJlZiA9IGR5bmFtaWNfY29tcG9uZW50X2xvYWRlcl8yLkNvbXBvbmVudFJlZjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlua2VyLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgcHJvdG9fdmlld19mYWN0b3J5XzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvcHJvdG9fdmlld19mYWN0b3J5Jyk7XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9hc3luYycpO1xyXG52YXIgcmVmbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvcmVmbGVjdGlvbi9yZWZsZWN0aW9uJyk7XHJcbnZhciB0ZW1wbGF0ZV9jb21tYW5kc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL3RlbXBsYXRlX2NvbW1hbmRzJyk7XHJcbi8qKlxyXG4gKiBMb3ctbGV2ZWwgc2VydmljZSBmb3IgY29tcGlsaW5nIHtAbGluayBDb21wb25lbnR9cyBpbnRvIHtAbGluayBQcm90b1ZpZXdSZWYgUHJvdG9WaWV3c31zLCB3aGljaFxyXG4gKiBjYW4gbGF0ZXIgYmUgdXNlZCB0byBjcmVhdGUgYW5kIHJlbmRlciBhIENvbXBvbmVudCBpbnN0YW5jZS5cclxuICpcclxuICogTW9zdCBhcHBsaWNhdGlvbnMgc2hvdWxkIGluc3RlYWQgdXNlIGhpZ2hlci1sZXZlbCB7QGxpbmsgRHluYW1pY0NvbXBvbmVudExvYWRlcn0gc2VydmljZSwgd2hpY2hcclxuICogYm90aCBjb21waWxlcyBhbmQgaW5zdGFudGlhdGVzIGEgQ29tcG9uZW50LlxyXG4gKi9cclxudmFyIENvbXBpbGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbXBpbGVyKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIENvbXBpbGVyO1xyXG59KSgpO1xyXG5leHBvcnRzLkNvbXBpbGVyID0gQ29tcGlsZXI7XHJcbnZhciBDb21waWxlcl8gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKENvbXBpbGVyXywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIENvbXBpbGVyXyhfcHJvdG9WaWV3RmFjdG9yeSkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX3Byb3RvVmlld0ZhY3RvcnkgPSBfcHJvdG9WaWV3RmFjdG9yeTtcclxuICAgIH1cclxuICAgIENvbXBpbGVyXy5wcm90b3R5cGUuY29tcGlsZUluSG9zdCA9IGZ1bmN0aW9uIChjb21wb25lbnRUeXBlKSB7XHJcbiAgICAgICAgdmFyIG1ldGFkYXRhcyA9IHJlZmxlY3Rpb25fMS5yZWZsZWN0b3IuYW5ub3RhdGlvbnMoY29tcG9uZW50VHlwZSk7XHJcbiAgICAgICAgdmFyIGNvbXBpbGVkSG9zdFRlbXBsYXRlID0gbnVsbDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1ldGFkYXRhcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgbWV0YWRhdGEgPSBtZXRhZGF0YXNbaV07XHJcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YSBpbnN0YW5jZW9mIHRlbXBsYXRlX2NvbW1hbmRzXzEuQ29tcGlsZWRIb3N0VGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBpbGVkSG9zdFRlbXBsYXRlID0gbWV0YWRhdGE7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoY29tcGlsZWRIb3N0VGVtcGxhdGUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihcIk5vIHByZWNvbXBpbGVkIHRlbXBsYXRlIGZvciBjb21wb25lbnQgXCIgKyBsYW5nXzEuc3RyaW5naWZ5KGNvbXBvbmVudFR5cGUpICsgXCIgZm91bmRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhc3luY18xLlByb21pc2VXcmFwcGVyLnJlc29sdmUodGhpcy5fY3JlYXRlUHJvdG9WaWV3KGNvbXBpbGVkSG9zdFRlbXBsYXRlKSk7XHJcbiAgICB9O1xyXG4gICAgQ29tcGlsZXJfLnByb3RvdHlwZS5fY3JlYXRlUHJvdG9WaWV3ID0gZnVuY3Rpb24gKGNvbXBpbGVkSG9zdFRlbXBsYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3RvVmlld0ZhY3RvcnkuY3JlYXRlSG9zdChjb21waWxlZEhvc3RUZW1wbGF0ZSkucmVmO1xyXG4gICAgfTtcclxuICAgIENvbXBpbGVyXy5wcm90b3R5cGUuY2xlYXJDYWNoZSA9IGZ1bmN0aW9uICgpIHsgdGhpcy5fcHJvdG9WaWV3RmFjdG9yeS5jbGVhckNhY2hlKCk7IH07XHJcbiAgICBDb21waWxlcl8gPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbcHJvdG9fdmlld19mYWN0b3J5XzEuUHJvdG9WaWV3RmFjdG9yeV0pXHJcbiAgICBdLCBDb21waWxlcl8pO1xyXG4gICAgcmV0dXJuIENvbXBpbGVyXztcclxufSkoQ29tcGlsZXIpO1xyXG5leHBvcnRzLkNvbXBpbGVyXyA9IENvbXBpbGVyXztcclxuZnVuY3Rpb24gaW50ZXJuYWxDcmVhdGVQcm90b1ZpZXcoY29tcGlsZXIsIGNvbXBpbGVkSG9zdFRlbXBsYXRlKSB7XHJcbiAgICByZXR1cm4gY29tcGlsZXIuX2NyZWF0ZVByb3RvVmlldyhjb21waWxlZEhvc3RUZW1wbGF0ZSk7XHJcbn1cclxuZXhwb3J0cy5pbnRlcm5hbENyZWF0ZVByb3RvVmlldyA9IGludGVybmFsQ3JlYXRlUHJvdG9WaWV3O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21waWxlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBpbnRlcmZhY2VzXzEgPSByZXF1aXJlKCcuL2ludGVyZmFjZXMnKTtcclxuZnVuY3Rpb24gaGFzTGlmZWN5Y2xlSG9vayhsY0ludGVyZmFjZSwgdG9rZW4pIHtcclxuICAgIGlmICghKHRva2VuIGluc3RhbmNlb2YgbGFuZ18xLlR5cGUpKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBwcm90byA9IHRva2VuLnByb3RvdHlwZTtcclxuICAgIHN3aXRjaCAobGNJbnRlcmZhY2UpIHtcclxuICAgICAgICBjYXNlIGludGVyZmFjZXNfMS5MaWZlY3ljbGVIb29rcy5BZnRlckNvbnRlbnRJbml0OlxyXG4gICAgICAgICAgICByZXR1cm4gISFwcm90by5hZnRlckNvbnRlbnRJbml0O1xyXG4gICAgICAgIGNhc2UgaW50ZXJmYWNlc18xLkxpZmVjeWNsZUhvb2tzLkFmdGVyQ29udGVudENoZWNrZWQ6XHJcbiAgICAgICAgICAgIHJldHVybiAhIXByb3RvLmFmdGVyQ29udGVudENoZWNrZWQ7XHJcbiAgICAgICAgY2FzZSBpbnRlcmZhY2VzXzEuTGlmZWN5Y2xlSG9va3MuQWZ0ZXJWaWV3SW5pdDpcclxuICAgICAgICAgICAgcmV0dXJuICEhcHJvdG8uYWZ0ZXJWaWV3SW5pdDtcclxuICAgICAgICBjYXNlIGludGVyZmFjZXNfMS5MaWZlY3ljbGVIb29rcy5BZnRlclZpZXdDaGVja2VkOlxyXG4gICAgICAgICAgICByZXR1cm4gISFwcm90by5hZnRlclZpZXdDaGVja2VkO1xyXG4gICAgICAgIGNhc2UgaW50ZXJmYWNlc18xLkxpZmVjeWNsZUhvb2tzLk9uQ2hhbmdlczpcclxuICAgICAgICAgICAgcmV0dXJuICEhcHJvdG8ub25DaGFuZ2VzO1xyXG4gICAgICAgIGNhc2UgaW50ZXJmYWNlc18xLkxpZmVjeWNsZUhvb2tzLkRvQ2hlY2s6XHJcbiAgICAgICAgICAgIHJldHVybiAhIXByb3RvLmRvQ2hlY2s7XHJcbiAgICAgICAgY2FzZSBpbnRlcmZhY2VzXzEuTGlmZWN5Y2xlSG9va3MuT25EZXN0cm95OlxyXG4gICAgICAgICAgICByZXR1cm4gISFwcm90by5vbkRlc3Ryb3k7XHJcbiAgICAgICAgY2FzZSBpbnRlcmZhY2VzXzEuTGlmZWN5Y2xlSG9va3MuT25Jbml0OlxyXG4gICAgICAgICAgICByZXR1cm4gISFwcm90by5vbkluaXQ7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuaGFzTGlmZWN5Y2xlSG9vayA9IGhhc0xpZmVjeWNsZUhvb2s7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpcmVjdGl2ZV9saWZlY3ljbGVfcmVmbGVjdG9yLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgZXhjZXB0aW9uc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2V4Y2VwdGlvbnMnKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBtZXRhZGF0YV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbWV0YWRhdGEnKTtcclxudmFyIHJlZmxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL3JlZmxlY3Rpb24vcmVmbGVjdGlvbicpO1xyXG4vKlxyXG4gKiBSZXNvbHZlIGEgYFR5cGVgIGZvciB7QGxpbmsgRGlyZWN0aXZlTWV0YWRhdGF9LlxyXG4gKlxyXG4gKiBUaGlzIGludGVyZmFjZSBjYW4gYmUgb3ZlcnJpZGRlbiBieSB0aGUgYXBwbGljYXRpb24gZGV2ZWxvcGVyIHRvIGNyZWF0ZSBjdXN0b20gYmVoYXZpb3IuXHJcbiAqXHJcbiAqIFNlZSB7QGxpbmsgQ29tcGlsZXJ9XHJcbiAqL1xyXG52YXIgRGlyZWN0aXZlUmVzb2x2ZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGlyZWN0aXZlUmVzb2x2ZXIoKSB7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiB7QGxpbmsgRGlyZWN0aXZlTWV0YWRhdGF9IGZvciBhIGdpdmVuIGBUeXBlYC5cclxuICAgICAqL1xyXG4gICAgRGlyZWN0aXZlUmVzb2x2ZXIucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgIHZhciB0eXBlTWV0YWRhdGEgPSByZWZsZWN0aW9uXzEucmVmbGVjdG9yLmFubm90YXRpb25zKGRpXzEucmVzb2x2ZUZvcndhcmRSZWYodHlwZSkpO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHR5cGVNZXRhZGF0YSkpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlTWV0YWRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBtZXRhZGF0YSA9IHR5cGVNZXRhZGF0YVtpXTtcclxuICAgICAgICAgICAgICAgIGlmIChtZXRhZGF0YSBpbnN0YW5jZW9mIG1ldGFkYXRhXzEuRGlyZWN0aXZlTWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHlNZXRhZGF0YSA9IHJlZmxlY3Rpb25fMS5yZWZsZWN0b3IucHJvcE1ldGFkYXRhKHR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tZXJnZVdpdGhQcm9wZXJ0eU1ldGFkYXRhKG1ldGFkYXRhLCBwcm9wZXJ0eU1ldGFkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oXCJObyBEaXJlY3RpdmUgYW5ub3RhdGlvbiBmb3VuZCBvbiBcIiArIGxhbmdfMS5zdHJpbmdpZnkodHlwZSkpO1xyXG4gICAgfTtcclxuICAgIERpcmVjdGl2ZVJlc29sdmVyLnByb3RvdHlwZS5fbWVyZ2VXaXRoUHJvcGVydHlNZXRhZGF0YSA9IGZ1bmN0aW9uIChkbSwgcHJvcGVydHlNZXRhZGF0YSkge1xyXG4gICAgICAgIHZhciBpbnB1dHMgPSBbXTtcclxuICAgICAgICB2YXIgb3V0cHV0cyA9IFtdO1xyXG4gICAgICAgIHZhciBob3N0ID0ge307XHJcbiAgICAgICAgdmFyIHF1ZXJpZXMgPSB7fTtcclxuICAgICAgICBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5mb3JFYWNoKHByb3BlcnR5TWV0YWRhdGEsIGZ1bmN0aW9uIChtZXRhZGF0YSwgcHJvcE5hbWUpIHtcclxuICAgICAgICAgICAgbWV0YWRhdGEuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGEgaW5zdGFuY2VvZiBtZXRhZGF0YV8xLklucHV0TWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChhLmJpbmRpbmdQcm9wZXJ0eU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0cy5wdXNoKHByb3BOYW1lICsgXCI6IFwiICsgYS5iaW5kaW5nUHJvcGVydHlOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0cy5wdXNoKHByb3BOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYSBpbnN0YW5jZW9mIG1ldGFkYXRhXzEuT3V0cHV0TWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChhLmJpbmRpbmdQcm9wZXJ0eU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dHMucHVzaChwcm9wTmFtZSArIFwiOiBcIiArIGEuYmluZGluZ1Byb3BlcnR5TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRzLnB1c2gocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhIGluc3RhbmNlb2YgbWV0YWRhdGFfMS5Ib3N0QmluZGluZ01ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoYS5ob3N0UHJvcGVydHlOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0WyhcIltcIiArIGEuaG9zdFByb3BlcnR5TmFtZSArIFwiXVwiKV0gPSBwcm9wTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RbKFwiW1wiICsgcHJvcE5hbWUgKyBcIl1cIildID0gcHJvcE5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGEgaW5zdGFuY2VvZiBtZXRhZGF0YV8xLkhvc3RMaXN0ZW5lck1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBsYW5nXzEuaXNQcmVzZW50KGEuYXJncykgPyBhLmFyZ3Muam9pbignLCAnKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGhvc3RbKFwiKFwiICsgYS5ldmVudE5hbWUgKyBcIilcIildID0gcHJvcE5hbWUgKyBcIihcIiArIGFyZ3MgKyBcIilcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhIGluc3RhbmNlb2YgbWV0YWRhdGFfMS5Db250ZW50Q2hpbGRyZW5NZXRhZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJpZXNbcHJvcE5hbWVdID0gYTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhIGluc3RhbmNlb2YgbWV0YWRhdGFfMS5WaWV3Q2hpbGRyZW5NZXRhZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJpZXNbcHJvcE5hbWVdID0gYTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhIGluc3RhbmNlb2YgbWV0YWRhdGFfMS5Db250ZW50Q2hpbGRNZXRhZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJpZXNbcHJvcE5hbWVdID0gYTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhIGluc3RhbmNlb2YgbWV0YWRhdGFfMS5WaWV3Q2hpbGRNZXRhZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJpZXNbcHJvcE5hbWVdID0gYTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21lcmdlKGRtLCBpbnB1dHMsIG91dHB1dHMsIGhvc3QsIHF1ZXJpZXMpO1xyXG4gICAgfTtcclxuICAgIERpcmVjdGl2ZVJlc29sdmVyLnByb3RvdHlwZS5fbWVyZ2UgPSBmdW5jdGlvbiAoZG0sIGlucHV0cywgb3V0cHV0cywgaG9zdCwgcXVlcmllcykge1xyXG4gICAgICAgIHZhciBtZXJnZWRJbnB1dHMgPSBsYW5nXzEuaXNQcmVzZW50KGRtLmlucHV0cykgPyBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuY29uY2F0KGRtLmlucHV0cywgaW5wdXRzKSA6IGlucHV0cztcclxuICAgICAgICB2YXIgbWVyZ2VkT3V0cHV0cyA9IGxhbmdfMS5pc1ByZXNlbnQoZG0ub3V0cHV0cykgPyBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuY29uY2F0KGRtLm91dHB1dHMsIG91dHB1dHMpIDogb3V0cHV0cztcclxuICAgICAgICB2YXIgbWVyZ2VkSG9zdCA9IGxhbmdfMS5pc1ByZXNlbnQoZG0uaG9zdCkgPyBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5tZXJnZShkbS5ob3N0LCBob3N0KSA6IGhvc3Q7XHJcbiAgICAgICAgdmFyIG1lcmdlZFF1ZXJpZXMgPSBsYW5nXzEuaXNQcmVzZW50KGRtLnF1ZXJpZXMpID8gY29sbGVjdGlvbl8xLlN0cmluZ01hcFdyYXBwZXIubWVyZ2UoZG0ucXVlcmllcywgcXVlcmllcykgOiBxdWVyaWVzO1xyXG4gICAgICAgIGlmIChkbSBpbnN0YW5jZW9mIG1ldGFkYXRhXzEuQ29tcG9uZW50TWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBtZXRhZGF0YV8xLkNvbXBvbmVudE1ldGFkYXRhKHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBkbS5zZWxlY3RvcixcclxuICAgICAgICAgICAgICAgIGlucHV0czogbWVyZ2VkSW5wdXRzLFxyXG4gICAgICAgICAgICAgICAgb3V0cHV0czogbWVyZ2VkT3V0cHV0cyxcclxuICAgICAgICAgICAgICAgIGhvc3Q6IG1lcmdlZEhvc3QsXHJcbiAgICAgICAgICAgICAgICBleHBvcnRBczogZG0uZXhwb3J0QXMsXHJcbiAgICAgICAgICAgICAgICBtb2R1bGVJZDogZG0ubW9kdWxlSWQsXHJcbiAgICAgICAgICAgICAgICBxdWVyaWVzOiBtZXJnZWRRdWVyaWVzLFxyXG4gICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0aW9uOiBkbS5jaGFuZ2VEZXRlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICBwcm92aWRlcnM6IGRtLnByb3ZpZGVycyxcclxuICAgICAgICAgICAgICAgIHZpZXdQcm92aWRlcnM6IGRtLnZpZXdQcm92aWRlcnNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IG1ldGFkYXRhXzEuRGlyZWN0aXZlTWV0YWRhdGEoe1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6IGRtLnNlbGVjdG9yLFxyXG4gICAgICAgICAgICAgICAgaW5wdXRzOiBtZXJnZWRJbnB1dHMsXHJcbiAgICAgICAgICAgICAgICBvdXRwdXRzOiBtZXJnZWRPdXRwdXRzLFxyXG4gICAgICAgICAgICAgICAgaG9zdDogbWVyZ2VkSG9zdCxcclxuICAgICAgICAgICAgICAgIGV4cG9ydEFzOiBkbS5leHBvcnRBcyxcclxuICAgICAgICAgICAgICAgIG1vZHVsZUlkOiBkbS5tb2R1bGVJZCxcclxuICAgICAgICAgICAgICAgIHF1ZXJpZXM6IG1lcmdlZFF1ZXJpZXMsXHJcbiAgICAgICAgICAgICAgICBwcm92aWRlcnM6IGRtLnByb3ZpZGVyc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRGlyZWN0aXZlUmVzb2x2ZXIgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcclxuICAgIF0sIERpcmVjdGl2ZVJlc29sdmVyKTtcclxuICAgIHJldHVybiBEaXJlY3RpdmVSZXNvbHZlcjtcclxufSkoKTtcclxuZXhwb3J0cy5EaXJlY3RpdmVSZXNvbHZlciA9IERpcmVjdGl2ZVJlc29sdmVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXJlY3RpdmVfcmVzb2x2ZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIGNvbXBpbGVyXzEgPSByZXF1aXJlKCcuL2NvbXBpbGVyJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgdmlld19tYW5hZ2VyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvdmlld19tYW5hZ2VyJyk7XHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGFuIGluc3RhbmNlIG9mIGEgQ29tcG9uZW50IGNyZWF0ZWQgdmlhIHtAbGluayBEeW5hbWljQ29tcG9uZW50TG9hZGVyfS5cclxuICpcclxuICogYENvbXBvbmVudFJlZmAgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBDb21wb25lbnQgSW5zdGFuY2UgYXMgd2VsbCBvdGhlciBvYmplY3RzIHJlbGF0ZWQgdG8gdGhpc1xyXG4gKiBDb21wb25lbnQgSW5zdGFuY2UgYW5kIGFsbG93cyB5b3UgdG8gZGVzdHJveSB0aGUgQ29tcG9uZW50IEluc3RhbmNlIHZpYSB0aGUge0BsaW5rICNkaXNwb3NlfVxyXG4gKiBtZXRob2QuXHJcbiAqL1xyXG52YXIgQ29tcG9uZW50UmVmID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbXBvbmVudFJlZigpIHtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb21wb25lbnRSZWYucHJvdG90eXBlLCBcImhvc3RWaWV3XCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUge0BsaW5rIFZpZXdSZWZ9IG9mIHRoZSBIb3N0IFZpZXcgb2YgdGhpcyBDb21wb25lbnQgaW5zdGFuY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmxvY2F0aW9uLnBhcmVudFZpZXc7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbXBvbmVudFJlZi5wcm90b3R5cGUsIFwiaG9zdENvbXBvbmVudFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBUaGUgaW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFRPRE8oaSk6IHRoaXMgYXBpIHNob3VsZCBiZSByZW1vdmVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmluc3RhbmNlOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBDb21wb25lbnRSZWY7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQ29tcG9uZW50UmVmID0gQ29tcG9uZW50UmVmO1xyXG52YXIgQ29tcG9uZW50UmVmXyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQ29tcG9uZW50UmVmXywgX3N1cGVyKTtcclxuICAgIC8qKlxyXG4gICAgICogVE9ETyhpKTogcmVmYWN0b3IgaW50byBwdWJsaWMvcHJpdmF0ZSBmaWVsZHNcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gQ29tcG9uZW50UmVmXyhsb2NhdGlvbiwgaW5zdGFuY2UsIGNvbXBvbmVudFR5cGUsIGluamVjdG9yLCBfZGlzcG9zZSkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX2Rpc3Bvc2UgPSBfZGlzcG9zZTtcclxuICAgICAgICB0aGlzLmxvY2F0aW9uID0gbG9jYXRpb247XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50VHlwZSA9IGNvbXBvbmVudFR5cGU7XHJcbiAgICAgICAgdGhpcy5pbmplY3RvciA9IGluamVjdG9yO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbXBvbmVudFJlZl8ucHJvdG90eXBlLCBcImhvc3RDb21wb25lbnRUeXBlXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFJldHVybnMgdGhlIHR5cGUgb2YgdGhpcyBDb21wb25lbnQgaW5zdGFuY2UuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBUT0RPKGkpOiB0aGlzIGFwaSBzaG91bGQgYmUgcmVtb3ZlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5jb21wb25lbnRUeXBlOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIENvbXBvbmVudFJlZl8ucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX2Rpc3Bvc2UoKTsgfTtcclxuICAgIHJldHVybiBDb21wb25lbnRSZWZfO1xyXG59KShDb21wb25lbnRSZWYpO1xyXG5leHBvcnRzLkNvbXBvbmVudFJlZl8gPSBDb21wb25lbnRSZWZfO1xyXG4vKipcclxuICogU2VydmljZSBmb3IgaW5zdGFudGlhdGluZyBhIENvbXBvbmVudCBhbmQgYXR0YWNoaW5nIGl0IHRvIGEgVmlldyBhdCBhIHNwZWNpZmllZCBsb2NhdGlvbi5cclxuICovXHJcbnZhciBEeW5hbWljQ29tcG9uZW50TG9hZGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIER5bmFtaWNDb21wb25lbnRMb2FkZXIoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRHluYW1pY0NvbXBvbmVudExvYWRlcjtcclxufSkoKTtcclxuZXhwb3J0cy5EeW5hbWljQ29tcG9uZW50TG9hZGVyID0gRHluYW1pY0NvbXBvbmVudExvYWRlcjtcclxudmFyIER5bmFtaWNDb21wb25lbnRMb2FkZXJfID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhEeW5hbWljQ29tcG9uZW50TG9hZGVyXywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIER5bmFtaWNDb21wb25lbnRMb2FkZXJfKF9jb21waWxlciwgX3ZpZXdNYW5hZ2VyKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5fY29tcGlsZXIgPSBfY29tcGlsZXI7XHJcbiAgICAgICAgdGhpcy5fdmlld01hbmFnZXIgPSBfdmlld01hbmFnZXI7XHJcbiAgICB9XHJcbiAgICBEeW5hbWljQ29tcG9uZW50TG9hZGVyXy5wcm90b3R5cGUubG9hZEFzUm9vdCA9IGZ1bmN0aW9uICh0eXBlLCBvdmVycmlkZVNlbGVjdG9yLCBpbmplY3Rvciwgb25EaXNwb3NlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29tcGlsZXIuY29tcGlsZUluSG9zdCh0eXBlKS50aGVuKGZ1bmN0aW9uIChob3N0UHJvdG9WaWV3UmVmKSB7XHJcbiAgICAgICAgICAgIHZhciBob3N0Vmlld1JlZiA9IF90aGlzLl92aWV3TWFuYWdlci5jcmVhdGVSb290SG9zdFZpZXcoaG9zdFByb3RvVmlld1JlZiwgb3ZlcnJpZGVTZWxlY3RvciwgaW5qZWN0b3IpO1xyXG4gICAgICAgICAgICB2YXIgbmV3TG9jYXRpb24gPSBfdGhpcy5fdmlld01hbmFnZXIuZ2V0SG9zdEVsZW1lbnQoaG9zdFZpZXdSZWYpO1xyXG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gX3RoaXMuX3ZpZXdNYW5hZ2VyLmdldENvbXBvbmVudChuZXdMb2NhdGlvbik7XHJcbiAgICAgICAgICAgIHZhciBkaXNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3ZpZXdNYW5hZ2VyLmRlc3Ryb3lSb290SG9zdFZpZXcoaG9zdFZpZXdSZWYpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQob25EaXNwb3NlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBvbmVudFJlZl8obmV3TG9jYXRpb24sIGNvbXBvbmVudCwgdHlwZSwgaW5qZWN0b3IsIGRpc3Bvc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIER5bmFtaWNDb21wb25lbnRMb2FkZXJfLnByb3RvdHlwZS5sb2FkSW50b0xvY2F0aW9uID0gZnVuY3Rpb24gKHR5cGUsIGhvc3RMb2NhdGlvbiwgYW5jaG9yTmFtZSwgcHJvdmlkZXJzKSB7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVycyA9PT0gdm9pZCAwKSB7IHByb3ZpZGVycyA9IG51bGw7IH1cclxuICAgICAgICByZXR1cm4gdGhpcy5sb2FkTmV4dFRvTG9jYXRpb24odHlwZSwgdGhpcy5fdmlld01hbmFnZXIuZ2V0TmFtZWRFbGVtZW50SW5Db21wb25lbnRWaWV3KGhvc3RMb2NhdGlvbiwgYW5jaG9yTmFtZSksIHByb3ZpZGVycyk7XHJcbiAgICB9O1xyXG4gICAgRHluYW1pY0NvbXBvbmVudExvYWRlcl8ucHJvdG90eXBlLmxvYWROZXh0VG9Mb2NhdGlvbiA9IGZ1bmN0aW9uICh0eXBlLCBsb2NhdGlvbiwgcHJvdmlkZXJzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAocHJvdmlkZXJzID09PSB2b2lkIDApIHsgcHJvdmlkZXJzID0gbnVsbDsgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb21waWxlci5jb21waWxlSW5Ib3N0KHR5cGUpLnRoZW4oZnVuY3Rpb24gKGhvc3RQcm90b1ZpZXdSZWYpIHtcclxuICAgICAgICAgICAgdmFyIHZpZXdDb250YWluZXIgPSBfdGhpcy5fdmlld01hbmFnZXIuZ2V0Vmlld0NvbnRhaW5lcihsb2NhdGlvbik7XHJcbiAgICAgICAgICAgIHZhciBob3N0Vmlld1JlZiA9IHZpZXdDb250YWluZXIuY3JlYXRlSG9zdFZpZXcoaG9zdFByb3RvVmlld1JlZiwgdmlld0NvbnRhaW5lci5sZW5ndGgsIHByb3ZpZGVycyk7XHJcbiAgICAgICAgICAgIHZhciBuZXdMb2NhdGlvbiA9IF90aGlzLl92aWV3TWFuYWdlci5nZXRIb3N0RWxlbWVudChob3N0Vmlld1JlZik7XHJcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBfdGhpcy5fdmlld01hbmFnZXIuZ2V0Q29tcG9uZW50KG5ld0xvY2F0aW9uKTtcclxuICAgICAgICAgICAgdmFyIGRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB2aWV3Q29udGFpbmVyLmluZGV4T2YoaG9zdFZpZXdSZWYpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdDb250YWluZXIucmVtb3ZlKGluZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wb25lbnRSZWZfKG5ld0xvY2F0aW9uLCBjb21wb25lbnQsIHR5cGUsIG51bGwsIGRpc3Bvc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIER5bmFtaWNDb21wb25lbnRMb2FkZXJfID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgZGlfMS5JbmplY3RhYmxlKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW2NvbXBpbGVyXzEuQ29tcGlsZXIsIHZpZXdfbWFuYWdlcl8xLkFwcFZpZXdNYW5hZ2VyXSlcclxuICAgIF0sIER5bmFtaWNDb21wb25lbnRMb2FkZXJfKTtcclxuICAgIHJldHVybiBEeW5hbWljQ29tcG9uZW50TG9hZGVyXztcclxufSkoRHluYW1pY0NvbXBvbmVudExvYWRlcik7XHJcbmV4cG9ydHMuRHluYW1pY0NvbXBvbmVudExvYWRlcl8gPSBEeW5hbWljQ29tcG9uZW50TG9hZGVyXztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHluYW1pY19jb21wb25lbnRfbG9hZGVyLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBFbGVtZW50QmluZGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVsZW1lbnRCaW5kZXIoaW5kZXgsIHBhcmVudCwgZGlzdGFuY2VUb1BhcmVudCwgcHJvdG9FbGVtZW50SW5qZWN0b3IsIGNvbXBvbmVudERpcmVjdGl2ZSwgbmVzdGVkUHJvdG9WaWV3KSB7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgIHRoaXMuZGlzdGFuY2VUb1BhcmVudCA9IGRpc3RhbmNlVG9QYXJlbnQ7XHJcbiAgICAgICAgdGhpcy5wcm90b0VsZW1lbnRJbmplY3RvciA9IHByb3RvRWxlbWVudEluamVjdG9yO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50RGlyZWN0aXZlID0gY29tcG9uZW50RGlyZWN0aXZlO1xyXG4gICAgICAgIHRoaXMubmVzdGVkUHJvdG9WaWV3ID0gbmVzdGVkUHJvdG9WaWV3O1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhpbmRleCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKCdudWxsIGluZGV4IG5vdCBhbGxvd2VkLicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBFbGVtZW50QmluZGVyO1xyXG59KSgpO1xyXG5leHBvcnRzLkVsZW1lbnRCaW5kZXIgPSBFbGVtZW50QmluZGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbGVtZW50X2JpbmRlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9hc3luYycpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgaW5qZWN0b3JfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpL2luamVjdG9yJyk7XHJcbnZhciBwcm92aWRlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGkvcHJvdmlkZXInKTtcclxudmFyIGRpXzIgPSByZXF1aXJlKCcuLi9tZXRhZGF0YS9kaScpO1xyXG52YXIgYXZtTW9kdWxlID0gcmVxdWlyZSgnLi92aWV3X21hbmFnZXInKTtcclxudmFyIHZpZXdfY29udGFpbmVyX3JlZl8xID0gcmVxdWlyZSgnLi92aWV3X2NvbnRhaW5lcl9yZWYnKTtcclxudmFyIGVsZW1lbnRfcmVmXzEgPSByZXF1aXJlKCcuL2VsZW1lbnRfcmVmJyk7XHJcbnZhciB0ZW1wbGF0ZV9yZWZfMSA9IHJlcXVpcmUoJy4vdGVtcGxhdGVfcmVmJyk7XHJcbnZhciBkaXJlY3RpdmVzXzEgPSByZXF1aXJlKCcuLi9tZXRhZGF0YS9kaXJlY3RpdmVzJyk7XHJcbnZhciBkaXJlY3RpdmVfbGlmZWN5Y2xlX3JlZmxlY3Rvcl8xID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVfbGlmZWN5Y2xlX3JlZmxlY3RvcicpO1xyXG52YXIgY2hhbmdlX2RldGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9jaGFuZ2VfZGV0ZWN0aW9uJyk7XHJcbnZhciBxdWVyeV9saXN0XzEgPSByZXF1aXJlKCcuL3F1ZXJ5X2xpc3QnKTtcclxudmFyIHJlZmxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL3JlZmxlY3Rpb24vcmVmbGVjdGlvbicpO1xyXG52YXIgZXZlbnRfY29uZmlnXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9saW5rZXIvZXZlbnRfY29uZmlnJyk7XHJcbnZhciBwaXBlX3Byb3ZpZGVyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9waXBlcy9waXBlX3Byb3ZpZGVyJyk7XHJcbnZhciBpbnRlcmZhY2VzXzEgPSByZXF1aXJlKCcuL2ludGVyZmFjZXMnKTtcclxudmFyIHZpZXdfY29udGFpbmVyX3JlZl8yID0gcmVxdWlyZShcIi4vdmlld19jb250YWluZXJfcmVmXCIpO1xyXG52YXIgX3N0YXRpY0tleXM7XHJcbnZhciBTdGF0aWNLZXlzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN0YXRpY0tleXMoKSB7XHJcbiAgICAgICAgdGhpcy52aWV3TWFuYWdlcklkID0gZGlfMS5LZXkuZ2V0KGF2bU1vZHVsZS5BcHBWaWV3TWFuYWdlcikuaWQ7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVJlZklkID0gZGlfMS5LZXkuZ2V0KHRlbXBsYXRlX3JlZl8xLlRlbXBsYXRlUmVmKS5pZDtcclxuICAgICAgICB0aGlzLnZpZXdDb250YWluZXJJZCA9IGRpXzEuS2V5LmdldCh2aWV3X2NvbnRhaW5lcl9yZWZfMS5WaWV3Q29udGFpbmVyUmVmKS5pZDtcclxuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmSWQgPSBkaV8xLktleS5nZXQoY2hhbmdlX2RldGVjdGlvbl8xLkNoYW5nZURldGVjdG9yUmVmKS5pZDtcclxuICAgICAgICB0aGlzLmVsZW1lbnRSZWZJZCA9IGRpXzEuS2V5LmdldChlbGVtZW50X3JlZl8xLkVsZW1lbnRSZWYpLmlkO1xyXG4gICAgfVxyXG4gICAgU3RhdGljS2V5cy5pbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoX3N0YXRpY0tleXMpKVxyXG4gICAgICAgICAgICBfc3RhdGljS2V5cyA9IG5ldyBTdGF0aWNLZXlzKCk7XHJcbiAgICAgICAgcmV0dXJuIF9zdGF0aWNLZXlzO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBTdGF0aWNLZXlzO1xyXG59KSgpO1xyXG5leHBvcnRzLlN0YXRpY0tleXMgPSBTdGF0aWNLZXlzO1xyXG52YXIgVHJlZU5vZGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVHJlZU5vZGUocGFyZW50KSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQocGFyZW50KSkge1xyXG4gICAgICAgICAgICBwYXJlbnQuYWRkQ2hpbGQodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFRyZWVOb2RlLnByb3RvdHlwZS5hZGRDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZCkgeyBjaGlsZC5fcGFyZW50ID0gdGhpczsgfTtcclxuICAgIFRyZWVOb2RlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX3BhcmVudCA9IG51bGw7IH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJlZU5vZGUucHJvdG90eXBlLCBcInBhcmVudFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wYXJlbnQ7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIFRyZWVOb2RlO1xyXG59KSgpO1xyXG5leHBvcnRzLlRyZWVOb2RlID0gVHJlZU5vZGU7XHJcbnZhciBEaXJlY3RpdmVEZXBlbmRlbmN5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhEaXJlY3RpdmVEZXBlbmRlbmN5LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRGlyZWN0aXZlRGVwZW5kZW5jeShrZXksIG9wdGlvbmFsLCBsb3dlckJvdW5kVmlzaWJpbGl0eSwgdXBwZXJCb3VuZFZpc2liaWxpdHksIHByb3BlcnRpZXMsIGF0dHJpYnV0ZU5hbWUsIHF1ZXJ5RGVjb3JhdG9yKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywga2V5LCBvcHRpb25hbCwgbG93ZXJCb3VuZFZpc2liaWxpdHksIHVwcGVyQm91bmRWaXNpYmlsaXR5LCBwcm9wZXJ0aWVzKTtcclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVOYW1lO1xyXG4gICAgICAgIHRoaXMucXVlcnlEZWNvcmF0b3IgPSBxdWVyeURlY29yYXRvcjtcclxuICAgICAgICB0aGlzLl92ZXJpZnkoKTtcclxuICAgIH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIERpcmVjdGl2ZURlcGVuZGVuY3kucHJvdG90eXBlLl92ZXJpZnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLnF1ZXJ5RGVjb3JhdG9yKSlcclxuICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLmF0dHJpYnV0ZU5hbWUpKVxyXG4gICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgIGlmIChjb3VudCA+IDEpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbignQSBkaXJlY3RpdmUgaW5qZWN0YWJsZSBjYW4gY29udGFpbiBvbmx5IG9uZSBvZiB0aGUgZm9sbG93aW5nIEBBdHRyaWJ1dGUgb3IgQFF1ZXJ5LicpO1xyXG4gICAgfTtcclxuICAgIERpcmVjdGl2ZURlcGVuZGVuY3kuY3JlYXRlRnJvbSA9IGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEaXJlY3RpdmVEZXBlbmRlbmN5KGQua2V5LCBkLm9wdGlvbmFsLCBkLmxvd2VyQm91bmRWaXNpYmlsaXR5LCBkLnVwcGVyQm91bmRWaXNpYmlsaXR5LCBkLnByb3BlcnRpZXMsIERpcmVjdGl2ZURlcGVuZGVuY3kuX2F0dHJpYnV0ZU5hbWUoZC5wcm9wZXJ0aWVzKSwgRGlyZWN0aXZlRGVwZW5kZW5jeS5fcXVlcnkoZC5wcm9wZXJ0aWVzKSk7XHJcbiAgICB9O1xyXG4gICAgRGlyZWN0aXZlRGVwZW5kZW5jeS5fYXR0cmlidXRlTmFtZSA9IGZ1bmN0aW9uIChwcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgdmFyIHAgPSBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuZmluZChwcm9wZXJ0aWVzLCBmdW5jdGlvbiAocCkgeyByZXR1cm4gcCBpbnN0YW5jZW9mIGRpXzIuQXR0cmlidXRlTWV0YWRhdGE7IH0pO1xyXG4gICAgICAgIHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHApID8gcC5hdHRyaWJ1dGVOYW1lIDogbnVsbDtcclxuICAgIH07XHJcbiAgICBEaXJlY3RpdmVEZXBlbmRlbmN5Ll9xdWVyeSA9IGZ1bmN0aW9uIChwcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5maW5kKHByb3BlcnRpZXMsIGZ1bmN0aW9uIChwKSB7IHJldHVybiBwIGluc3RhbmNlb2YgZGlfMi5RdWVyeU1ldGFkYXRhOyB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGlyZWN0aXZlRGVwZW5kZW5jeTtcclxufSkoZGlfMS5EZXBlbmRlbmN5KTtcclxuZXhwb3J0cy5EaXJlY3RpdmVEZXBlbmRlbmN5ID0gRGlyZWN0aXZlRGVwZW5kZW5jeTtcclxudmFyIERpcmVjdGl2ZVByb3ZpZGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhEaXJlY3RpdmVQcm92aWRlciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIERpcmVjdGl2ZVByb3ZpZGVyKGtleSwgZmFjdG9yeSwgZGVwcywgbWV0YWRhdGEsIHByb3ZpZGVycywgdmlld1Byb3ZpZGVycykge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGtleSwgW25ldyBwcm92aWRlcl8xLlJlc29sdmVkRmFjdG9yeShmYWN0b3J5LCBkZXBzKV0sIGZhbHNlKTtcclxuICAgICAgICB0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGE7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMgPSBwcm92aWRlcnM7XHJcbiAgICAgICAgdGhpcy52aWV3UHJvdmlkZXJzID0gdmlld1Byb3ZpZGVycztcclxuICAgICAgICB0aGlzLmNhbGxPbkRlc3Ryb3kgPSBkaXJlY3RpdmVfbGlmZWN5Y2xlX3JlZmxlY3Rvcl8xLmhhc0xpZmVjeWNsZUhvb2soaW50ZXJmYWNlc18xLkxpZmVjeWNsZUhvb2tzLk9uRGVzdHJveSwga2V5LnRva2VuKTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaXJlY3RpdmVQcm92aWRlci5wcm90b3R5cGUsIFwiZGlzcGxheU5hbWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5rZXkuZGlzcGxheU5hbWU7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERpcmVjdGl2ZVByb3ZpZGVyLnByb3RvdHlwZSwgXCJxdWVyaWVzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHRoaXMubWV0YWRhdGEucXVlcmllcykpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgIHZhciByZXMgPSBbXTtcclxuICAgICAgICAgICAgY29sbGVjdGlvbl8xLlN0cmluZ01hcFdyYXBwZXIuZm9yRWFjaCh0aGlzLm1ldGFkYXRhLnF1ZXJpZXMsIGZ1bmN0aW9uIChtZXRhLCBmaWVsZE5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzZXR0ZXIgPSByZWZsZWN0aW9uXzEucmVmbGVjdG9yLnNldHRlcihmaWVsZE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgcmVzLnB1c2gobmV3IFF1ZXJ5TWV0YWRhdGFXaXRoU2V0dGVyKHNldHRlciwgbWV0YSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaXJlY3RpdmVQcm92aWRlci5wcm90b3R5cGUsIFwiZXZlbnRFbWl0dGVyc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHRoaXMubWV0YWRhdGEpICYmIGxhbmdfMS5pc1ByZXNlbnQodGhpcy5tZXRhZGF0YS5vdXRwdXRzKSA/IHRoaXMubWV0YWRhdGEub3V0cHV0cyA6XHJcbiAgICAgICAgICAgICAgICBbXTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIERpcmVjdGl2ZVByb3ZpZGVyLmNyZWF0ZUZyb21Qcm92aWRlciA9IGZ1bmN0aW9uIChwcm92aWRlciwgbWV0YSkge1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhtZXRhKSkge1xyXG4gICAgICAgICAgICBtZXRhID0gbmV3IGRpcmVjdGl2ZXNfMS5EaXJlY3RpdmVNZXRhZGF0YSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmIgPSBwcm92aWRlcl8xLnJlc29sdmVQcm92aWRlcihwcm92aWRlcik7XHJcbiAgICAgICAgdmFyIHJmID0gcmIucmVzb2x2ZWRGYWN0b3JpZXNbMF07XHJcbiAgICAgICAgdmFyIGRlcHMgPSByZi5kZXBlbmRlbmNpZXMubWFwKERpcmVjdGl2ZURlcGVuZGVuY3kuY3JlYXRlRnJvbSk7XHJcbiAgICAgICAgdmFyIHByb3ZpZGVycyA9IGxhbmdfMS5pc1ByZXNlbnQobWV0YS5wcm92aWRlcnMpID8gbWV0YS5wcm92aWRlcnMgOiBbXTtcclxuICAgICAgICB2YXIgdmlld0JpbmRpZ3MgPSBtZXRhIGluc3RhbmNlb2YgZGlyZWN0aXZlc18xLkNvbXBvbmVudE1ldGFkYXRhICYmIGxhbmdfMS5pc1ByZXNlbnQobWV0YS52aWV3UHJvdmlkZXJzKSA/XHJcbiAgICAgICAgICAgIG1ldGEudmlld1Byb3ZpZGVycyA6XHJcbiAgICAgICAgICAgIFtdO1xyXG4gICAgICAgIHJldHVybiBuZXcgRGlyZWN0aXZlUHJvdmlkZXIocmIua2V5LCByZi5mYWN0b3J5LCBkZXBzLCBtZXRhLCBwcm92aWRlcnMsIHZpZXdCaW5kaWdzKTtcclxuICAgIH07XHJcbiAgICBEaXJlY3RpdmVQcm92aWRlci5jcmVhdGVGcm9tVHlwZSA9IGZ1bmN0aW9uICh0eXBlLCBhbm5vdGF0aW9uKSB7XHJcbiAgICAgICAgdmFyIHByb3ZpZGVyID0gbmV3IGRpXzEuUHJvdmlkZXIodHlwZSwgeyB1c2VDbGFzczogdHlwZSB9KTtcclxuICAgICAgICByZXR1cm4gRGlyZWN0aXZlUHJvdmlkZXIuY3JlYXRlRnJvbVByb3ZpZGVyKHByb3ZpZGVyLCBhbm5vdGF0aW9uKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGlyZWN0aXZlUHJvdmlkZXI7XHJcbn0pKHByb3ZpZGVyXzEuUmVzb2x2ZWRQcm92aWRlcl8pO1xyXG5leHBvcnRzLkRpcmVjdGl2ZVByb3ZpZGVyID0gRGlyZWN0aXZlUHJvdmlkZXI7XHJcbi8vIFRPRE8ocmFkbyk6IGJlbmNobWFyayBhbmQgY29uc2lkZXIgcm9sbGluZyBpbiBhcyBFbGVtZW50SW5qZWN0b3IgZmllbGRzLlxyXG52YXIgUHJlQnVpbHRPYmplY3RzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFByZUJ1aWx0T2JqZWN0cyh2aWV3TWFuYWdlciwgdmlldywgZWxlbWVudFJlZiwgdGVtcGxhdGVSZWYpIHtcclxuICAgICAgICB0aGlzLnZpZXdNYW5hZ2VyID0gdmlld01hbmFnZXI7XHJcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgICAgICB0aGlzLmVsZW1lbnRSZWYgPSBlbGVtZW50UmVmO1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGVSZWYgPSB0ZW1wbGF0ZVJlZjtcclxuICAgICAgICB0aGlzLm5lc3RlZFZpZXcgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFByZUJ1aWx0T2JqZWN0cztcclxufSkoKTtcclxuZXhwb3J0cy5QcmVCdWlsdE9iamVjdHMgPSBQcmVCdWlsdE9iamVjdHM7XHJcbnZhciBRdWVyeU1ldGFkYXRhV2l0aFNldHRlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBRdWVyeU1ldGFkYXRhV2l0aFNldHRlcihzZXR0ZXIsIG1ldGFkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5zZXR0ZXIgPSBzZXR0ZXI7XHJcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG1ldGFkYXRhO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFF1ZXJ5TWV0YWRhdGFXaXRoU2V0dGVyO1xyXG59KSgpO1xyXG5leHBvcnRzLlF1ZXJ5TWV0YWRhdGFXaXRoU2V0dGVyID0gUXVlcnlNZXRhZGF0YVdpdGhTZXR0ZXI7XHJcbnZhciBFdmVudEVtaXR0ZXJBY2Nlc3NvciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFdmVudEVtaXR0ZXJBY2Nlc3NvcihldmVudE5hbWUsIGdldHRlcikge1xyXG4gICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lO1xyXG4gICAgICAgIHRoaXMuZ2V0dGVyID0gZ2V0dGVyO1xyXG4gICAgfVxyXG4gICAgRXZlbnRFbWl0dGVyQWNjZXNzb3IucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uICh2aWV3LCBib3VuZEVsZW1lbnRJbmRleCwgZGlyZWN0aXZlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgZXZlbnRFbWl0dGVyID0gdGhpcy5nZXR0ZXIoZGlyZWN0aXZlKTtcclxuICAgICAgICByZXR1cm4gYXN5bmNfMS5PYnNlcnZhYmxlV3JhcHBlci5zdWJzY3JpYmUoZXZlbnRFbWl0dGVyLCBmdW5jdGlvbiAoZXZlbnRPYmopIHsgcmV0dXJuIHZpZXcudHJpZ2dlckV2ZW50SGFuZGxlcnMoX3RoaXMuZXZlbnROYW1lLCBldmVudE9iaiwgYm91bmRFbGVtZW50SW5kZXgpOyB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyQWNjZXNzb3I7XHJcbn0pKCk7XHJcbmV4cG9ydHMuRXZlbnRFbWl0dGVyQWNjZXNzb3IgPSBFdmVudEVtaXR0ZXJBY2Nlc3NvcjtcclxuZnVuY3Rpb24gX2NyZWF0ZUV2ZW50RW1pdHRlckFjY2Vzc29ycyhid3YpIHtcclxuICAgIHZhciBwcm92aWRlciA9IGJ3di5wcm92aWRlcjtcclxuICAgIGlmICghKHByb3ZpZGVyIGluc3RhbmNlb2YgRGlyZWN0aXZlUHJvdmlkZXIpKVxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIHZhciBkYiA9IHByb3ZpZGVyO1xyXG4gICAgcmV0dXJuIGRiLmV2ZW50RW1pdHRlcnMubWFwKGZ1bmN0aW9uIChldmVudENvbmZpZykge1xyXG4gICAgICAgIHZhciBwYXJzZWRFdmVudCA9IGV2ZW50X2NvbmZpZ18xLkV2ZW50Q29uZmlnLnBhcnNlKGV2ZW50Q29uZmlnKTtcclxuICAgICAgICByZXR1cm4gbmV3IEV2ZW50RW1pdHRlckFjY2Vzc29yKHBhcnNlZEV2ZW50LmV2ZW50TmFtZSwgcmVmbGVjdGlvbl8xLnJlZmxlY3Rvci5nZXR0ZXIocGFyc2VkRXZlbnQuZmllbGROYW1lKSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBfY3JlYXRlUHJvdG9RdWVyeVJlZnMocHJvdmlkZXJzKSB7XHJcbiAgICB2YXIgcmVzID0gW107XHJcbiAgICBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuZm9yRWFjaFdpdGhJbmRleChwcm92aWRlcnMsIGZ1bmN0aW9uIChiLCBpKSB7XHJcbiAgICAgICAgaWYgKGIucHJvdmlkZXIgaW5zdGFuY2VvZiBEaXJlY3RpdmVQcm92aWRlcikge1xyXG4gICAgICAgICAgICB2YXIgZGlyZWN0aXZlUHJvdmlkZXIgPSBiLnByb3ZpZGVyO1xyXG4gICAgICAgICAgICAvLyBmaWVsZCBxdWVyaWVzXHJcbiAgICAgICAgICAgIHZhciBxdWVyaWVzID0gZGlyZWN0aXZlUHJvdmlkZXIucXVlcmllcztcclxuICAgICAgICAgICAgcXVlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChxKSB7IHJldHVybiByZXMucHVzaChuZXcgUHJvdG9RdWVyeVJlZihpLCBxLnNldHRlciwgcS5tZXRhZGF0YSkpOyB9KTtcclxuICAgICAgICAgICAgLy8gcXVlcmllcyBwYXNzZWQgaW50byB0aGUgY29uc3RydWN0b3IuXHJcbiAgICAgICAgICAgIC8vIFRPRE86IHJlbW92ZSB0aGlzIGFmdGVyIGNvbnN0cnVjdG9yIHF1ZXJpZXMgYXJlIG5vIGxvbmdlciBzdXBwb3J0ZWRcclxuICAgICAgICAgICAgdmFyIGRlcHMgPSBkaXJlY3RpdmVQcm92aWRlci5yZXNvbHZlZEZhY3RvcnkuZGVwZW5kZW5jaWVzO1xyXG4gICAgICAgICAgICBkZXBzLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGQucXVlcnlEZWNvcmF0b3IpKVxyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKG5ldyBQcm90b1F1ZXJ5UmVmKGksIG51bGwsIGQucXVlcnlEZWNvcmF0b3IpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbnZhciBQcm90b0VsZW1lbnRJbmplY3RvciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQcm90b0VsZW1lbnRJbmplY3RvcihwYXJlbnQsIGluZGV4LCBid3YsIGRpc3RhbmNlVG9QYXJlbnQsIF9maXJzdFByb3ZpZGVySXNDb21wb25lbnQsIGRpcmVjdGl2ZVZhcmlhYmxlQmluZGluZ3MpIHtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgdGhpcy5kaXN0YW5jZVRvUGFyZW50ID0gZGlzdGFuY2VUb1BhcmVudDtcclxuICAgICAgICB0aGlzLmRpcmVjdGl2ZVZhcmlhYmxlQmluZGluZ3MgPSBkaXJlY3RpdmVWYXJpYWJsZUJpbmRpbmdzO1xyXG4gICAgICAgIHRoaXMuX2ZpcnN0UHJvdmlkZXJJc0NvbXBvbmVudCA9IF9maXJzdFByb3ZpZGVySXNDb21wb25lbnQ7XHJcbiAgICAgICAgdmFyIGxlbmd0aCA9IGJ3di5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5wcm90b0luamVjdG9yID0gbmV3IGluamVjdG9yXzEuUHJvdG9JbmplY3Rvcihid3YpO1xyXG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyQWNjZXNzb3JzID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNyZWF0ZUZpeGVkU2l6ZShsZW5ndGgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXJBY2Nlc3NvcnNbaV0gPSBfY3JlYXRlRXZlbnRFbWl0dGVyQWNjZXNzb3JzKGJ3dltpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucHJvdG9RdWVyeVJlZnMgPSBfY3JlYXRlUHJvdG9RdWVyeVJlZnMoYnd2KTtcclxuICAgIH1cclxuICAgIFByb3RvRWxlbWVudEluamVjdG9yLmNyZWF0ZSA9IGZ1bmN0aW9uIChwYXJlbnQsIGluZGV4LCBwcm92aWRlcnMsIGZpcnN0UHJvdmlkZXJJc0NvbXBvbmVudCwgZGlzdGFuY2VUb1BhcmVudCwgZGlyZWN0aXZlVmFyaWFibGVCaW5kaW5ncykge1xyXG4gICAgICAgIHZhciBiZCA9IFtdO1xyXG4gICAgICAgIFByb3RvRWxlbWVudEluamVjdG9yLl9jcmVhdGVEaXJlY3RpdmVQcm92aWRlcldpdGhWaXNpYmlsaXR5KHByb3ZpZGVycywgYmQsIGZpcnN0UHJvdmlkZXJJc0NvbXBvbmVudCk7XHJcbiAgICAgICAgaWYgKGZpcnN0UHJvdmlkZXJJc0NvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBQcm90b0VsZW1lbnRJbmplY3Rvci5fY3JlYXRlVmlld1Byb3ZpZGVyc1dpdGhWaXNpYmlsaXR5KHByb3ZpZGVycywgYmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBQcm90b0VsZW1lbnRJbmplY3Rvci5fY3JlYXRlUHJvdmlkZXJzV2l0aFZpc2liaWxpdHkocHJvdmlkZXJzLCBiZCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm90b0VsZW1lbnRJbmplY3RvcihwYXJlbnQsIGluZGV4LCBiZCwgZGlzdGFuY2VUb1BhcmVudCwgZmlyc3RQcm92aWRlcklzQ29tcG9uZW50LCBkaXJlY3RpdmVWYXJpYWJsZUJpbmRpbmdzKTtcclxuICAgIH07XHJcbiAgICBQcm90b0VsZW1lbnRJbmplY3Rvci5fY3JlYXRlRGlyZWN0aXZlUHJvdmlkZXJXaXRoVmlzaWJpbGl0eSA9IGZ1bmN0aW9uIChkaXJQcm92aWRlcnMsIGJkLCBmaXJzdFByb3ZpZGVySXNDb21wb25lbnQpIHtcclxuICAgICAgICBkaXJQcm92aWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoZGlyUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgYmQucHVzaChQcm90b0VsZW1lbnRJbmplY3Rvci5fY3JlYXRlUHJvdmlkZXJXaXRoVmlzaWJpbGl0eShmaXJzdFByb3ZpZGVySXNDb21wb25lbnQsIGRpclByb3ZpZGVyLCBkaXJQcm92aWRlcnMsIGRpclByb3ZpZGVyKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUHJvdG9FbGVtZW50SW5qZWN0b3IuX2NyZWF0ZVByb3ZpZGVyc1dpdGhWaXNpYmlsaXR5ID0gZnVuY3Rpb24gKGRpclByb3ZpZGVycywgYmQpIHtcclxuICAgICAgICB2YXIgcHJvdmlkZXJzRnJvbUFsbERpcmVjdGl2ZXMgPSBbXTtcclxuICAgICAgICBkaXJQcm92aWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoZGlyUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgcHJvdmlkZXJzRnJvbUFsbERpcmVjdGl2ZXMgPVxyXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNvbmNhdChwcm92aWRlcnNGcm9tQWxsRGlyZWN0aXZlcywgZGlyUHJvdmlkZXIucHJvdmlkZXJzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgcmVzb2x2ZWQgPSBkaV8xLkluamVjdG9yLnJlc29sdmUocHJvdmlkZXJzRnJvbUFsbERpcmVjdGl2ZXMpO1xyXG4gICAgICAgIHJlc29sdmVkLmZvckVhY2goZnVuY3Rpb24gKGIpIHsgcmV0dXJuIGJkLnB1c2gobmV3IGluamVjdG9yXzEuUHJvdmlkZXJXaXRoVmlzaWJpbGl0eShiLCBpbmplY3Rvcl8xLlZpc2liaWxpdHkuUHVibGljKSk7IH0pO1xyXG4gICAgfTtcclxuICAgIFByb3RvRWxlbWVudEluamVjdG9yLl9jcmVhdGVQcm92aWRlcldpdGhWaXNpYmlsaXR5ID0gZnVuY3Rpb24gKGZpcnN0UHJvdmlkZXJJc0NvbXBvbmVudCwgZGlyUHJvdmlkZXIsIGRpclByb3ZpZGVycywgcHJvdmlkZXIpIHtcclxuICAgICAgICB2YXIgaXNDb21wb25lbnQgPSBmaXJzdFByb3ZpZGVySXNDb21wb25lbnQgJiYgZGlyUHJvdmlkZXJzWzBdID09PSBkaXJQcm92aWRlcjtcclxuICAgICAgICByZXR1cm4gbmV3IGluamVjdG9yXzEuUHJvdmlkZXJXaXRoVmlzaWJpbGl0eShwcm92aWRlciwgaXNDb21wb25lbnQgPyBpbmplY3Rvcl8xLlZpc2liaWxpdHkuUHVibGljQW5kUHJpdmF0ZSA6IGluamVjdG9yXzEuVmlzaWJpbGl0eS5QdWJsaWMpO1xyXG4gICAgfTtcclxuICAgIFByb3RvRWxlbWVudEluamVjdG9yLl9jcmVhdGVWaWV3UHJvdmlkZXJzV2l0aFZpc2liaWxpdHkgPSBmdW5jdGlvbiAoZGlyUHJvdmlkZXJzLCBiZCkge1xyXG4gICAgICAgIHZhciByZXNvbHZlZFZpZXdQcm92aWRlcnMgPSBkaV8xLkluamVjdG9yLnJlc29sdmUoZGlyUHJvdmlkZXJzWzBdLnZpZXdQcm92aWRlcnMpO1xyXG4gICAgICAgIHJlc29sdmVkVmlld1Byb3ZpZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7IHJldHVybiBiZC5wdXNoKG5ldyBpbmplY3Rvcl8xLlByb3ZpZGVyV2l0aFZpc2liaWxpdHkoYiwgaW5qZWN0b3JfMS5WaXNpYmlsaXR5LlByaXZhdGUpKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgUHJvdG9FbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLmluc3RhbnRpYXRlID0gZnVuY3Rpb24gKHBhcmVudCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRWxlbWVudEluamVjdG9yKHRoaXMsIHBhcmVudCk7XHJcbiAgICB9O1xyXG4gICAgUHJvdG9FbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLmRpcmVjdFBhcmVudCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZGlzdGFuY2VUb1BhcmVudCA8IDIgPyB0aGlzLnBhcmVudCA6IG51bGw7IH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHJvdG9FbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLCBcImhhc0JpbmRpbmdzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZXZlbnRFbWl0dGVyQWNjZXNzb3JzLmxlbmd0aCA+IDA7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgUHJvdG9FbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLmdldFByb3ZpZGVyQXRJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gdGhpcy5wcm90b0luamVjdG9yLmdldFByb3ZpZGVyQXRJbmRleChpbmRleCk7IH07XHJcbiAgICByZXR1cm4gUHJvdG9FbGVtZW50SW5qZWN0b3I7XHJcbn0pKCk7XHJcbmV4cG9ydHMuUHJvdG9FbGVtZW50SW5qZWN0b3IgPSBQcm90b0VsZW1lbnRJbmplY3RvcjtcclxudmFyIF9Db250ZXh0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIF9Db250ZXh0KGVsZW1lbnQsIGNvbXBvbmVudEVsZW1lbnQsIGluamVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB0aGlzLmNvbXBvbmVudEVsZW1lbnQgPSBjb21wb25lbnRFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuaW5qZWN0b3IgPSBpbmplY3RvcjtcclxuICAgIH1cclxuICAgIHJldHVybiBfQ29udGV4dDtcclxufSkoKTtcclxudmFyIEVsZW1lbnRJbmplY3RvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRWxlbWVudEluamVjdG9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRWxlbWVudEluamVjdG9yKF9wcm90bywgcGFyZW50KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBwYXJlbnQpO1xyXG4gICAgICAgIHRoaXMuX3ByZUJ1aWx0T2JqZWN0cyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fcHJvdG8gPSBfcHJvdG87XHJcbiAgICAgICAgdGhpcy5faW5qZWN0b3IgPVxyXG4gICAgICAgICAgICBuZXcgZGlfMS5JbmplY3Rvcih0aGlzLl9wcm90by5wcm90b0luamVjdG9yLCBudWxsLCB0aGlzLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fZGVidWdDb250ZXh0KCk7IH0pO1xyXG4gICAgICAgIC8vIHdlIGNvdXBsZSBvdXJzZWx2ZXMgdG8gdGhlIGluamVjdG9yIHN0cmF0ZWd5IHRvIGF2b2lkIHBvbHltb3ByaGljIGNhbGxzXHJcbiAgICAgICAgdmFyIGluamVjdG9yU3RyYXRlZ3kgPSB0aGlzLl9pbmplY3Rvci5pbnRlcm5hbFN0cmF0ZWd5O1xyXG4gICAgICAgIHRoaXMuX3N0cmF0ZWd5ID0gaW5qZWN0b3JTdHJhdGVneSBpbnN0YW5jZW9mIGluamVjdG9yXzEuSW5qZWN0b3JJbmxpbmVTdHJhdGVneSA/XHJcbiAgICAgICAgICAgIG5ldyBFbGVtZW50SW5qZWN0b3JJbmxpbmVTdHJhdGVneShpbmplY3RvclN0cmF0ZWd5LCB0aGlzKSA6XHJcbiAgICAgICAgICAgIG5ldyBFbGVtZW50SW5qZWN0b3JEeW5hbWljU3RyYXRlZ3koaW5qZWN0b3JTdHJhdGVneSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5oeWRyYXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX3F1ZXJ5U3RyYXRlZ3kgPSB0aGlzLl9idWlsZFF1ZXJ5U3RyYXRlZ3koKTtcclxuICAgIH1cclxuICAgIEVsZW1lbnRJbmplY3Rvci5wcm90b3R5cGUuZGVoeWRyYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuaHlkcmF0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9ob3N0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9wcmVCdWlsdE9iamVjdHMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3N0cmF0ZWd5LmNhbGxPbkRlc3Ryb3koKTtcclxuICAgICAgICB0aGlzLl9zdHJhdGVneS5kZWh5ZHJhdGUoKTtcclxuICAgICAgICB0aGlzLl9xdWVyeVN0cmF0ZWd5LmRlaHlkcmF0ZSgpO1xyXG4gICAgfTtcclxuICAgIEVsZW1lbnRJbmplY3Rvci5wcm90b3R5cGUuaHlkcmF0ZSA9IGZ1bmN0aW9uIChpbXBlcmF0aXZlbHlDcmVhdGVkSW5qZWN0b3IsIGhvc3QsIHByZUJ1aWx0T2JqZWN0cykge1xyXG4gICAgICAgIHRoaXMuX2hvc3QgPSBob3N0O1xyXG4gICAgICAgIHRoaXMuX3ByZUJ1aWx0T2JqZWN0cyA9IHByZUJ1aWx0T2JqZWN0cztcclxuICAgICAgICB0aGlzLl9yZWF0dGFjaEluamVjdG9ycyhpbXBlcmF0aXZlbHlDcmVhdGVkSW5qZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX3F1ZXJ5U3RyYXRlZ3kuaHlkcmF0ZSgpO1xyXG4gICAgICAgIHRoaXMuX3N0cmF0ZWd5Lmh5ZHJhdGUoKTtcclxuICAgICAgICB0aGlzLmh5ZHJhdGVkID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLl9kZWJ1Z0NvbnRleHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHAgPSB0aGlzLl9wcmVCdWlsdE9iamVjdHM7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gcC5lbGVtZW50UmVmLmJvdW5kRWxlbWVudEluZGV4IC0gcC52aWV3LmVsZW1lbnRPZmZzZXQ7XHJcbiAgICAgICAgdmFyIGMgPSB0aGlzLl9wcmVCdWlsdE9iamVjdHMudmlldy5nZXREZWJ1Z0NvbnRleHQoaW5kZXgsIG51bGwpO1xyXG4gICAgICAgIHJldHVybiBsYW5nXzEuaXNQcmVzZW50KGMpID8gbmV3IF9Db250ZXh0KGMuZWxlbWVudCwgYy5jb21wb25lbnRFbGVtZW50LCBjLmluamVjdG9yKSA6IG51bGw7XHJcbiAgICB9O1xyXG4gICAgRWxlbWVudEluamVjdG9yLnByb3RvdHlwZS5fcmVhdHRhY2hJbmplY3RvcnMgPSBmdW5jdGlvbiAoaW1wZXJhdGl2ZWx5Q3JlYXRlZEluamVjdG9yKSB7XHJcbiAgICAgICAgLy8gRHluYW1pY2FsbHktbG9hZGVkIGNvbXBvbmVudCBpbiB0aGUgdGVtcGxhdGUuIE5vdCBhIHJvb3QgRWxlbWVudEluamVjdG9yLlxyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRoaXMuX3BhcmVudCkpIHtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoaW1wZXJhdGl2ZWx5Q3JlYXRlZEluamVjdG9yKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhlIGltcGVyYXRpdmUgaW5qZWN0b3IgaXMgc2ltaWxhciB0byBoYXZpbmcgYW4gZWxlbWVudCBiZXR3ZWVuXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgZHluYW1pYy1sb2FkZWQgY29tcG9uZW50IGFuZCBpdHMgcGFyZW50ID0+IG5vIGJvdW5kYXJpZXMuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWF0dGFjaEluamVjdG9yKHRoaXMuX2luamVjdG9yLCBpbXBlcmF0aXZlbHlDcmVhdGVkSW5qZWN0b3IsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYXR0YWNoSW5qZWN0b3IoaW1wZXJhdGl2ZWx5Q3JlYXRlZEluamVjdG9yLCB0aGlzLl9wYXJlbnQuX2luamVjdG9yLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWF0dGFjaEluamVjdG9yKHRoaXMuX2luamVjdG9yLCB0aGlzLl9wYXJlbnQuX2luamVjdG9yLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLl9ob3N0KSkge1xyXG4gICAgICAgICAgICAvLyBUaGUgaW1wZXJhdGl2ZSBpbmplY3RvciBpcyBzaW1pbGFyIHRvIGhhdmluZyBhbiBlbGVtZW50IGJldHdlZW5cclxuICAgICAgICAgICAgLy8gdGhlIGR5bmFtaWMtbG9hZGVkIGNvbXBvbmVudCBhbmQgaXRzIHBhcmVudCA9PiBubyBib3VuZGFyeSBiZXR3ZWVuXHJcbiAgICAgICAgICAgIC8vIHRoZSBjb21wb25lbnQgYW5kIGltcGVyYXRpdmVseUNyZWF0ZWRJbmplY3Rvci5cclxuICAgICAgICAgICAgLy8gQnV0IHNpbmNlIGl0IGlzIGEgcm9vdCBFbGVtZW50SW5qZWN0b3IsIHdlIG5lZWQgdG8gY3JlYXRlIGEgYm91bmRhcnlcclxuICAgICAgICAgICAgLy8gYmV0d2VlbiBpbXBlcmF0aXZlbHlDcmVhdGVkSW5qZWN0b3IgYW5kIF9ob3N0LlxyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChpbXBlcmF0aXZlbHlDcmVhdGVkSW5qZWN0b3IpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWF0dGFjaEluamVjdG9yKHRoaXMuX2luamVjdG9yLCBpbXBlcmF0aXZlbHlDcmVhdGVkSW5qZWN0b3IsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYXR0YWNoSW5qZWN0b3IoaW1wZXJhdGl2ZWx5Q3JlYXRlZEluamVjdG9yLCB0aGlzLl9ob3N0Ll9pbmplY3RvciwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWF0dGFjaEluamVjdG9yKHRoaXMuX2luamVjdG9yLCB0aGlzLl9ob3N0Ll9pbmplY3RvciwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGltcGVyYXRpdmVseUNyZWF0ZWRJbmplY3RvcikpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYXR0YWNoSW5qZWN0b3IodGhpcy5faW5qZWN0b3IsIGltcGVyYXRpdmVseUNyZWF0ZWRJbmplY3RvciwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRWxlbWVudEluamVjdG9yLnByb3RvdHlwZS5fcmVhdHRhY2hJbmplY3RvciA9IGZ1bmN0aW9uIChpbmplY3RvciwgcGFyZW50SW5qZWN0b3IsIGlzQm91bmRhcnkpIHtcclxuICAgICAgICBpbmplY3Rvci5pbnRlcm5hbFN0cmF0ZWd5LmF0dGFjaChwYXJlbnRJbmplY3RvciwgaXNCb3VuZGFyeSk7XHJcbiAgICB9O1xyXG4gICAgRWxlbWVudEluamVjdG9yLnByb3RvdHlwZS5oYXNWYXJpYWJsZUJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHZhciB2YiA9IHRoaXMuX3Byb3RvLmRpcmVjdGl2ZVZhcmlhYmxlQmluZGluZ3M7XHJcbiAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQodmIpICYmIHZiLmhhcyhuYW1lKTtcclxuICAgIH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLmdldFZhcmlhYmxlQmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fcHJvdG8uZGlyZWN0aXZlVmFyaWFibGVCaW5kaW5ncy5nZXQobmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQoaW5kZXgpID8gdGhpcy5nZXREaXJlY3RpdmVBdEluZGV4KGluZGV4KSA6IHRoaXMuZ2V0RWxlbWVudFJlZigpO1xyXG4gICAgfTtcclxuICAgIEVsZW1lbnRJbmplY3Rvci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHRva2VuKSB7IHJldHVybiB0aGlzLl9pbmplY3Rvci5nZXQodG9rZW4pOyB9O1xyXG4gICAgRWxlbWVudEluamVjdG9yLnByb3RvdHlwZS5oYXNEaXJlY3RpdmUgPSBmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gbGFuZ18xLmlzUHJlc2VudCh0aGlzLl9pbmplY3Rvci5nZXRPcHRpb25hbCh0eXBlKSk7IH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLmdldEV2ZW50RW1pdHRlckFjY2Vzc29ycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3RvLmV2ZW50RW1pdHRlckFjY2Vzc29yczsgfTtcclxuICAgIEVsZW1lbnRJbmplY3Rvci5wcm90b3R5cGUuZ2V0RGlyZWN0aXZlVmFyaWFibGVCaW5kaW5ncyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvdG8uZGlyZWN0aXZlVmFyaWFibGVCaW5kaW5ncztcclxuICAgIH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLmdldENvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3N0cmF0ZWd5LmdldENvbXBvbmVudCgpOyB9O1xyXG4gICAgRWxlbWVudEluamVjdG9yLnByb3RvdHlwZS5nZXRJbmplY3RvciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2luamVjdG9yOyB9O1xyXG4gICAgRWxlbWVudEluamVjdG9yLnByb3RvdHlwZS5nZXRFbGVtZW50UmVmID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJlQnVpbHRPYmplY3RzLmVsZW1lbnRSZWY7IH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLmdldFZpZXdDb250YWluZXJSZWYgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyB2aWV3X2NvbnRhaW5lcl9yZWZfMi5WaWV3Q29udGFpbmVyUmVmXyh0aGlzLl9wcmVCdWlsdE9iamVjdHMudmlld01hbmFnZXIsIHRoaXMuZ2V0RWxlbWVudFJlZigpKTtcclxuICAgIH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLmdldE5lc3RlZFZpZXcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcmVCdWlsdE9iamVjdHMubmVzdGVkVmlldzsgfTtcclxuICAgIEVsZW1lbnRJbmplY3Rvci5wcm90b3R5cGUuZ2V0VmlldyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3ByZUJ1aWx0T2JqZWN0cy52aWV3OyB9O1xyXG4gICAgRWxlbWVudEluamVjdG9yLnByb3RvdHlwZS5kaXJlY3RQYXJlbnQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm90by5kaXN0YW5jZVRvUGFyZW50IDwgMiA/IHRoaXMucGFyZW50IDogbnVsbDsgfTtcclxuICAgIEVsZW1lbnRJbmplY3Rvci5wcm90b3R5cGUuaXNDb21wb25lbnRLZXkgPSBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiB0aGlzLl9zdHJhdGVneS5pc0NvbXBvbmVudEtleShrZXkpOyB9O1xyXG4gICAgRWxlbWVudEluamVjdG9yLnByb3RvdHlwZS5nZXREZXBlbmRlbmN5ID0gZnVuY3Rpb24gKGluamVjdG9yLCBwcm92aWRlciwgZGVwKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IGRlcC5rZXk7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVyIGluc3RhbmNlb2YgRGlyZWN0aXZlUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgdmFyIGRpckRlcCA9IGRlcDtcclxuICAgICAgICAgICAgdmFyIGRpclByb3ZpZGVyID0gcHJvdmlkZXI7XHJcbiAgICAgICAgICAgIHZhciBzdGF0aWNLZXlzID0gU3RhdGljS2V5cy5pbnN0YW5jZSgpO1xyXG4gICAgICAgICAgICBpZiAoa2V5LmlkID09PSBzdGF0aWNLZXlzLnZpZXdNYW5hZ2VySWQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJlQnVpbHRPYmplY3RzLnZpZXdNYW5hZ2VyO1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChkaXJEZXAuYXR0cmlidXRlTmFtZSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYnVpbGRBdHRyaWJ1dGUoZGlyRGVwKTtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoZGlyRGVwLnF1ZXJ5RGVjb3JhdG9yKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9xdWVyeVN0cmF0ZWd5LmZpbmRRdWVyeShkaXJEZXAucXVlcnlEZWNvcmF0b3IpLmxpc3Q7XHJcbiAgICAgICAgICAgIGlmIChkaXJEZXAua2V5LmlkID09PSBTdGF0aWNLZXlzLmluc3RhbmNlKCkuY2hhbmdlRGV0ZWN0b3JSZWZJZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgcHJvdmlkZSB0aGUgY29tcG9uZW50J3MgdmlldyBjaGFuZ2UgZGV0ZWN0b3IgdG8gY29tcG9uZW50cyBhbmRcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBzdXJyb3VuZGluZyBjb21wb25lbnQncyBjaGFuZ2UgZGV0ZWN0b3IgdG8gZGlyZWN0aXZlcy5cclxuICAgICAgICAgICAgICAgIGlmIChkaXJQcm92aWRlci5tZXRhZGF0YSBpbnN0YW5jZW9mIGRpcmVjdGl2ZXNfMS5Db21wb25lbnRNZXRhZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnRWaWV3ID0gdGhpcy5fcHJlQnVpbHRPYmplY3RzLnZpZXcuZ2V0TmVzdGVkVmlldyh0aGlzLl9wcmVCdWlsdE9iamVjdHMuZWxlbWVudFJlZi5ib3VuZEVsZW1lbnRJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudFZpZXcuY2hhbmdlRGV0ZWN0b3IucmVmO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByZUJ1aWx0T2JqZWN0cy52aWV3LmNoYW5nZURldGVjdG9yLnJlZjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGlyRGVwLmtleS5pZCA9PT0gU3RhdGljS2V5cy5pbnN0YW5jZSgpLmVsZW1lbnRSZWZJZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudFJlZigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkaXJEZXAua2V5LmlkID09PSBTdGF0aWNLZXlzLmluc3RhbmNlKCkudmlld0NvbnRhaW5lcklkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWaWV3Q29udGFpbmVyUmVmKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRpckRlcC5rZXkuaWQgPT09IFN0YXRpY0tleXMuaW5zdGFuY2UoKS50ZW1wbGF0ZVJlZklkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsodGhpcy5fcHJlQnVpbHRPYmplY3RzLnRlbXBsYXRlUmVmKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXJEZXAub3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBkaV8xLk5vUHJvdmlkZXJFcnJvcihudWxsLCBkaXJEZXAua2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcmVCdWlsdE9iamVjdHMudGVtcGxhdGVSZWY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocHJvdmlkZXIgaW5zdGFuY2VvZiBwaXBlX3Byb3ZpZGVyXzEuUGlwZVByb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgIGlmIChkZXAua2V5LmlkID09PSBTdGF0aWNLZXlzLmluc3RhbmNlKCkuY2hhbmdlRGV0ZWN0b3JSZWZJZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudFZpZXcgPSB0aGlzLl9wcmVCdWlsdE9iamVjdHMudmlldy5nZXROZXN0ZWRWaWV3KHRoaXMuX3ByZUJ1aWx0T2JqZWN0cy5lbGVtZW50UmVmLmJvdW5kRWxlbWVudEluZGV4KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21wb25lbnRWaWV3LmNoYW5nZURldGVjdG9yLnJlZjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5qZWN0b3JfMS5VTkRFRklORUQ7XHJcbiAgICB9O1xyXG4gICAgRWxlbWVudEluamVjdG9yLnByb3RvdHlwZS5fYnVpbGRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoZGVwKSB7XHJcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSB0aGlzLl9wcm90by5hdHRyaWJ1dGVzO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGF0dHJpYnV0ZXMpICYmIGF0dHJpYnV0ZXMuaGFzKGRlcC5hdHRyaWJ1dGVOYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlcy5nZXQoZGVwLmF0dHJpYnV0ZU5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEVsZW1lbnRJbmplY3Rvci5wcm90b3R5cGUuYWRkRGlyZWN0aXZlc01hdGNoaW5nUXVlcnkgPSBmdW5jdGlvbiAocXVlcnksIGxpc3QpIHtcclxuICAgICAgICB2YXIgdGVtcGxhdGVSZWYgPSBsYW5nXzEuaXNCbGFuayh0aGlzLl9wcmVCdWlsdE9iamVjdHMpID8gbnVsbCA6IHRoaXMuX3ByZUJ1aWx0T2JqZWN0cy50ZW1wbGF0ZVJlZjtcclxuICAgICAgICBpZiAocXVlcnkuc2VsZWN0b3IgPT09IHRlbXBsYXRlX3JlZl8xLlRlbXBsYXRlUmVmICYmIGxhbmdfMS5pc1ByZXNlbnQodGVtcGxhdGVSZWYpKSB7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaCh0ZW1wbGF0ZVJlZik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3N0cmF0ZWd5LmFkZERpcmVjdGl2ZXNNYXRjaGluZ1F1ZXJ5KHF1ZXJ5LCBsaXN0KTtcclxuICAgIH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLl9idWlsZFF1ZXJ5U3RyYXRlZ3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3Byb3RvLnByb3RvUXVlcnlSZWZzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VtcHR5UXVlcnlTdHJhdGVneTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fcHJvdG8ucHJvdG9RdWVyeVJlZnMubGVuZ3RoIDw9XHJcbiAgICAgICAgICAgIElubGluZVF1ZXJ5U3RyYXRlZ3kuTlVNQkVSX09GX1NVUFBPUlRFRF9RVUVSSUVTKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW5saW5lUXVlcnlTdHJhdGVneSh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRHluYW1pY1F1ZXJ5U3RyYXRlZ3kodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEVsZW1lbnRJbmplY3Rvci5wcm90b3R5cGUubGluayA9IGZ1bmN0aW9uIChwYXJlbnQpIHsgcGFyZW50LmFkZENoaWxkKHRoaXMpOyB9O1xyXG4gICAgRWxlbWVudEluamVjdG9yLnByb3RvdHlwZS51bmxpbmsgPSBmdW5jdGlvbiAoKSB7IHRoaXMucmVtb3ZlKCk7IH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLmdldERpcmVjdGl2ZUF0SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHsgcmV0dXJuIHRoaXMuX2luamVjdG9yLmdldEF0KGluZGV4KTsgfTtcclxuICAgIEVsZW1lbnRJbmplY3Rvci5wcm90b3R5cGUuaGFzSW5zdGFuY2VzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvdG8uaGFzQmluZGluZ3MgJiYgdGhpcy5oeWRyYXRlZDsgfTtcclxuICAgIEVsZW1lbnRJbmplY3Rvci5wcm90b3R5cGUuZ2V0SG9zdCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2hvc3Q7IH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLmdldEJvdW5kRWxlbWVudEluZGV4ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvdG8uaW5kZXg7IH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLmdldFJvb3RWaWV3SW5qZWN0b3JzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5oeWRyYXRlZClcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIHZhciB2aWV3ID0gdGhpcy5fcHJlQnVpbHRPYmplY3RzLnZpZXc7XHJcbiAgICAgICAgdmFyIG5lc3RlZFZpZXcgPSB2aWV3LmdldE5lc3RlZFZpZXcodmlldy5lbGVtZW50T2Zmc2V0ICsgdGhpcy5nZXRCb3VuZEVsZW1lbnRJbmRleCgpKTtcclxuICAgICAgICByZXR1cm4gbGFuZ18xLmlzUHJlc2VudChuZXN0ZWRWaWV3KSA/IG5lc3RlZFZpZXcucm9vdEVsZW1lbnRJbmplY3RvcnMgOiBbXTtcclxuICAgIH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLmFmdGVyVmlld0NoZWNrZWQgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX3F1ZXJ5U3RyYXRlZ3kudXBkYXRlVmlld1F1ZXJpZXMoKTsgfTtcclxuICAgIEVsZW1lbnRJbmplY3Rvci5wcm90b3R5cGUuYWZ0ZXJDb250ZW50Q2hlY2tlZCA9IGZ1bmN0aW9uICgpIHsgdGhpcy5fcXVlcnlTdHJhdGVneS51cGRhdGVDb250ZW50UXVlcmllcygpOyB9O1xyXG4gICAgRWxlbWVudEluamVjdG9yLnByb3RvdHlwZS50cmF2ZXJzZUFuZFNldFF1ZXJpZXNBc0RpcnR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpbmogPSB0aGlzO1xyXG4gICAgICAgIHdoaWxlIChsYW5nXzEuaXNQcmVzZW50KGluaikpIHtcclxuICAgICAgICAgICAgaW5qLl9zZXRRdWVyaWVzQXNEaXJ0eSgpO1xyXG4gICAgICAgICAgICBpbmogPSBpbmoucGFyZW50O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3IucHJvdG90eXBlLl9zZXRRdWVyaWVzQXNEaXJ0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9xdWVyeVN0cmF0ZWd5LnNldENvbnRlbnRRdWVyaWVzQXNEaXJ0eSgpO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRoaXMuX2hvc3QpKVxyXG4gICAgICAgICAgICB0aGlzLl9ob3N0Ll9xdWVyeVN0cmF0ZWd5LnNldFZpZXdRdWVyaWVzQXNEaXJ0eSgpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFbGVtZW50SW5qZWN0b3I7XHJcbn0pKFRyZWVOb2RlKTtcclxuZXhwb3J0cy5FbGVtZW50SW5qZWN0b3IgPSBFbGVtZW50SW5qZWN0b3I7XHJcbnZhciBfRW1wdHlRdWVyeVN0cmF0ZWd5ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIF9FbXB0eVF1ZXJ5U3RyYXRlZ3koKSB7XHJcbiAgICB9XHJcbiAgICBfRW1wdHlRdWVyeVN0cmF0ZWd5LnByb3RvdHlwZS5zZXRDb250ZW50UXVlcmllc0FzRGlydHkgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICBfRW1wdHlRdWVyeVN0cmF0ZWd5LnByb3RvdHlwZS5zZXRWaWV3UXVlcmllc0FzRGlydHkgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICBfRW1wdHlRdWVyeVN0cmF0ZWd5LnByb3RvdHlwZS5oeWRyYXRlID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgX0VtcHR5UXVlcnlTdHJhdGVneS5wcm90b3R5cGUuZGVoeWRyYXRlID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgX0VtcHR5UXVlcnlTdHJhdGVneS5wcm90b3R5cGUudXBkYXRlQ29udGVudFF1ZXJpZXMgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICBfRW1wdHlRdWVyeVN0cmF0ZWd5LnByb3RvdHlwZS51cGRhdGVWaWV3UXVlcmllcyA9IGZ1bmN0aW9uICgpIHsgfTtcclxuICAgIF9FbXB0eVF1ZXJ5U3RyYXRlZ3kucHJvdG90eXBlLmZpbmRRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeSkge1xyXG4gICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihcIkNhbm5vdCBmaW5kIHF1ZXJ5IGZvciBkaXJlY3RpdmUgXCIgKyBxdWVyeSArIFwiLlwiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX0VtcHR5UXVlcnlTdHJhdGVneTtcclxufSkoKTtcclxudmFyIF9lbXB0eVF1ZXJ5U3RyYXRlZ3kgPSBuZXcgX0VtcHR5UXVlcnlTdHJhdGVneSgpO1xyXG52YXIgSW5saW5lUXVlcnlTdHJhdGVneSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBJbmxpbmVRdWVyeVN0cmF0ZWd5KGVpKSB7XHJcbiAgICAgICAgdmFyIHByb3RvUmVmcyA9IGVpLl9wcm90by5wcm90b1F1ZXJ5UmVmcztcclxuICAgICAgICBpZiAocHJvdG9SZWZzLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIHRoaXMucXVlcnkwID0gbmV3IFF1ZXJ5UmVmKHByb3RvUmVmc1swXSwgZWkpO1xyXG4gICAgICAgIGlmIChwcm90b1JlZnMubGVuZ3RoID4gMSlcclxuICAgICAgICAgICAgdGhpcy5xdWVyeTEgPSBuZXcgUXVlcnlSZWYocHJvdG9SZWZzWzFdLCBlaSk7XHJcbiAgICAgICAgaWYgKHByb3RvUmVmcy5sZW5ndGggPiAyKVxyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5MiA9IG5ldyBRdWVyeVJlZihwcm90b1JlZnNbMl0sIGVpKTtcclxuICAgIH1cclxuICAgIElubGluZVF1ZXJ5U3RyYXRlZ3kucHJvdG90eXBlLnNldENvbnRlbnRRdWVyaWVzQXNEaXJ0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLnF1ZXJ5MCkgJiYgIXRoaXMucXVlcnkwLmlzVmlld1F1ZXJ5KVxyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5MC5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5xdWVyeTEpICYmICF0aGlzLnF1ZXJ5MS5pc1ZpZXdRdWVyeSlcclxuICAgICAgICAgICAgdGhpcy5xdWVyeTEuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRoaXMucXVlcnkyKSAmJiAhdGhpcy5xdWVyeTIuaXNWaWV3UXVlcnkpXHJcbiAgICAgICAgICAgIHRoaXMucXVlcnkyLmRpcnR5ID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICBJbmxpbmVRdWVyeVN0cmF0ZWd5LnByb3RvdHlwZS5zZXRWaWV3UXVlcmllc0FzRGlydHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5xdWVyeTApICYmIHRoaXMucXVlcnkwLmlzVmlld1F1ZXJ5KVxyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5MC5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5xdWVyeTEpICYmIHRoaXMucXVlcnkxLmlzVmlld1F1ZXJ5KVxyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5MS5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5xdWVyeTIpICYmIHRoaXMucXVlcnkyLmlzVmlld1F1ZXJ5KVxyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5Mi5kaXJ0eSA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgSW5saW5lUXVlcnlTdHJhdGVneS5wcm90b3R5cGUuaHlkcmF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLnF1ZXJ5MCkpXHJcbiAgICAgICAgICAgIHRoaXMucXVlcnkwLmh5ZHJhdGUoKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLnF1ZXJ5MSkpXHJcbiAgICAgICAgICAgIHRoaXMucXVlcnkxLmh5ZHJhdGUoKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLnF1ZXJ5MikpXHJcbiAgICAgICAgICAgIHRoaXMucXVlcnkyLmh5ZHJhdGUoKTtcclxuICAgIH07XHJcbiAgICBJbmxpbmVRdWVyeVN0cmF0ZWd5LnByb3RvdHlwZS5kZWh5ZHJhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5xdWVyeTApKVxyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5MC5kZWh5ZHJhdGUoKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLnF1ZXJ5MSkpXHJcbiAgICAgICAgICAgIHRoaXMucXVlcnkxLmRlaHlkcmF0ZSgpO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRoaXMucXVlcnkyKSlcclxuICAgICAgICAgICAgdGhpcy5xdWVyeTIuZGVoeWRyYXRlKCk7XHJcbiAgICB9O1xyXG4gICAgSW5saW5lUXVlcnlTdHJhdGVneS5wcm90b3R5cGUudXBkYXRlQ29udGVudFF1ZXJpZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5xdWVyeTApICYmICF0aGlzLnF1ZXJ5MC5pc1ZpZXdRdWVyeSkge1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5MC51cGRhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5xdWVyeTEpICYmICF0aGlzLnF1ZXJ5MS5pc1ZpZXdRdWVyeSkge1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5MS51cGRhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5xdWVyeTIpICYmICF0aGlzLnF1ZXJ5Mi5pc1ZpZXdRdWVyeSkge1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5Mi51cGRhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSW5saW5lUXVlcnlTdHJhdGVneS5wcm90b3R5cGUudXBkYXRlVmlld1F1ZXJpZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5xdWVyeTApICYmIHRoaXMucXVlcnkwLmlzVmlld1F1ZXJ5KSB7XHJcbiAgICAgICAgICAgIHRoaXMucXVlcnkwLnVwZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLnF1ZXJ5MSkgJiYgdGhpcy5xdWVyeTEuaXNWaWV3UXVlcnkpIHtcclxuICAgICAgICAgICAgdGhpcy5xdWVyeTEudXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRoaXMucXVlcnkyKSAmJiB0aGlzLnF1ZXJ5Mi5pc1ZpZXdRdWVyeSkge1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5Mi51cGRhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSW5saW5lUXVlcnlTdHJhdGVneS5wcm90b3R5cGUuZmluZFF1ZXJ5ID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5xdWVyeTApICYmIHRoaXMucXVlcnkwLnByb3RvUXVlcnlSZWYucXVlcnkgPT09IHF1ZXJ5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5MDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5xdWVyeTEpICYmIHRoaXMucXVlcnkxLnByb3RvUXVlcnlSZWYucXVlcnkgPT09IHF1ZXJ5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5MTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5xdWVyeTIpICYmIHRoaXMucXVlcnkyLnByb3RvUXVlcnlSZWYucXVlcnkgPT09IHF1ZXJ5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5MjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKFwiQ2Fubm90IGZpbmQgcXVlcnkgZm9yIGRpcmVjdGl2ZSBcIiArIHF1ZXJ5ICsgXCIuXCIpO1xyXG4gICAgfTtcclxuICAgIElubGluZVF1ZXJ5U3RyYXRlZ3kuTlVNQkVSX09GX1NVUFBPUlRFRF9RVUVSSUVTID0gMztcclxuICAgIHJldHVybiBJbmxpbmVRdWVyeVN0cmF0ZWd5O1xyXG59KSgpO1xyXG52YXIgRHluYW1pY1F1ZXJ5U3RyYXRlZ3kgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRHluYW1pY1F1ZXJ5U3RyYXRlZ3koZWkpIHtcclxuICAgICAgICB0aGlzLnF1ZXJpZXMgPSBlaS5fcHJvdG8ucHJvdG9RdWVyeVJlZnMubWFwKGZ1bmN0aW9uIChwKSB7IHJldHVybiBuZXcgUXVlcnlSZWYocCwgZWkpOyB9KTtcclxuICAgIH1cclxuICAgIER5bmFtaWNRdWVyeVN0cmF0ZWd5LnByb3RvdHlwZS5zZXRDb250ZW50UXVlcmllc0FzRGlydHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnF1ZXJpZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIHEgPSB0aGlzLnF1ZXJpZXNbaV07XHJcbiAgICAgICAgICAgIGlmICghcS5pc1ZpZXdRdWVyeSlcclxuICAgICAgICAgICAgICAgIHEuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEeW5hbWljUXVlcnlTdHJhdGVneS5wcm90b3R5cGUuc2V0Vmlld1F1ZXJpZXNBc0RpcnR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5xdWVyaWVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHZhciBxID0gdGhpcy5xdWVyaWVzW2ldO1xyXG4gICAgICAgICAgICBpZiAocS5pc1ZpZXdRdWVyeSlcclxuICAgICAgICAgICAgICAgIHEuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEeW5hbWljUXVlcnlTdHJhdGVneS5wcm90b3R5cGUuaHlkcmF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucXVlcmllcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB2YXIgcSA9IHRoaXMucXVlcmllc1tpXTtcclxuICAgICAgICAgICAgcS5oeWRyYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIER5bmFtaWNRdWVyeVN0cmF0ZWd5LnByb3RvdHlwZS5kZWh5ZHJhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnF1ZXJpZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIHEgPSB0aGlzLnF1ZXJpZXNbaV07XHJcbiAgICAgICAgICAgIHEuZGVoeWRyYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIER5bmFtaWNRdWVyeVN0cmF0ZWd5LnByb3RvdHlwZS51cGRhdGVDb250ZW50UXVlcmllcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucXVlcmllcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB2YXIgcSA9IHRoaXMucXVlcmllc1tpXTtcclxuICAgICAgICAgICAgaWYgKCFxLmlzVmlld1F1ZXJ5KSB7XHJcbiAgICAgICAgICAgICAgICBxLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIER5bmFtaWNRdWVyeVN0cmF0ZWd5LnByb3RvdHlwZS51cGRhdGVWaWV3UXVlcmllcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucXVlcmllcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB2YXIgcSA9IHRoaXMucXVlcmllc1tpXTtcclxuICAgICAgICAgICAgaWYgKHEuaXNWaWV3UXVlcnkpIHtcclxuICAgICAgICAgICAgICAgIHEudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRHluYW1pY1F1ZXJ5U3RyYXRlZ3kucHJvdG90eXBlLmZpbmRRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeSkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5xdWVyaWVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHZhciBxID0gdGhpcy5xdWVyaWVzW2ldO1xyXG4gICAgICAgICAgICBpZiAocS5wcm90b1F1ZXJ5UmVmLnF1ZXJ5ID09PSBxdWVyeSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKFwiQ2Fubm90IGZpbmQgcXVlcnkgZm9yIGRpcmVjdGl2ZSBcIiArIHF1ZXJ5ICsgXCIuXCIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEeW5hbWljUXVlcnlTdHJhdGVneTtcclxufSkoKTtcclxuLyoqXHJcbiAqIFN0cmF0ZWd5IHVzZWQgYnkgdGhlIGBFbGVtZW50SW5qZWN0b3JgIHdoZW4gdGhlIG51bWJlciBvZiBwcm92aWRlcnMgaXMgMTAgb3IgbGVzcy5cclxuICogSW4gc3VjaCBhIGNhc2UsIGlubGluaW5nIGZpZWxkcyBpcyBiZW5lZmljaWFsIGZvciBwZXJmb3JtYW5jZXMuXHJcbiAqL1xyXG52YXIgRWxlbWVudEluamVjdG9ySW5saW5lU3RyYXRlZ3kgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRWxlbWVudEluamVjdG9ySW5saW5lU3RyYXRlZ3koaW5qZWN0b3JTdHJhdGVneSwgX2VpKSB7XHJcbiAgICAgICAgdGhpcy5pbmplY3RvclN0cmF0ZWd5ID0gaW5qZWN0b3JTdHJhdGVneTtcclxuICAgICAgICB0aGlzLl9laSA9IF9laTtcclxuICAgIH1cclxuICAgIEVsZW1lbnRJbmplY3RvcklubGluZVN0cmF0ZWd5LnByb3RvdHlwZS5oeWRyYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpID0gdGhpcy5pbmplY3RvclN0cmF0ZWd5O1xyXG4gICAgICAgIHZhciBwID0gaS5wcm90b1N0cmF0ZWd5O1xyXG4gICAgICAgIGkucmVzZXRDb25zdHJ1Y3Rpb25Db3VudGVyKCk7XHJcbiAgICAgICAgaWYgKHAucHJvdmlkZXIwIGluc3RhbmNlb2YgRGlyZWN0aXZlUHJvdmlkZXIgJiYgbGFuZ18xLmlzUHJlc2VudChwLmtleUlkMCkgJiYgaS5vYmowID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRClcclxuICAgICAgICAgICAgaS5vYmowID0gaS5pbnN0YW50aWF0ZVByb3ZpZGVyKHAucHJvdmlkZXIwLCBwLnZpc2liaWxpdHkwKTtcclxuICAgICAgICBpZiAocC5wcm92aWRlcjEgaW5zdGFuY2VvZiBEaXJlY3RpdmVQcm92aWRlciAmJiBsYW5nXzEuaXNQcmVzZW50KHAua2V5SWQxKSAmJiBpLm9iajEgPT09IGluamVjdG9yXzEuVU5ERUZJTkVEKVxyXG4gICAgICAgICAgICBpLm9iajEgPSBpLmluc3RhbnRpYXRlUHJvdmlkZXIocC5wcm92aWRlcjEsIHAudmlzaWJpbGl0eTEpO1xyXG4gICAgICAgIGlmIChwLnByb3ZpZGVyMiBpbnN0YW5jZW9mIERpcmVjdGl2ZVByb3ZpZGVyICYmIGxhbmdfMS5pc1ByZXNlbnQocC5rZXlJZDIpICYmIGkub2JqMiA9PT0gaW5qZWN0b3JfMS5VTkRFRklORUQpXHJcbiAgICAgICAgICAgIGkub2JqMiA9IGkuaW5zdGFudGlhdGVQcm92aWRlcihwLnByb3ZpZGVyMiwgcC52aXNpYmlsaXR5Mik7XHJcbiAgICAgICAgaWYgKHAucHJvdmlkZXIzIGluc3RhbmNlb2YgRGlyZWN0aXZlUHJvdmlkZXIgJiYgbGFuZ18xLmlzUHJlc2VudChwLmtleUlkMykgJiYgaS5vYmozID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRClcclxuICAgICAgICAgICAgaS5vYmozID0gaS5pbnN0YW50aWF0ZVByb3ZpZGVyKHAucHJvdmlkZXIzLCBwLnZpc2liaWxpdHkzKTtcclxuICAgICAgICBpZiAocC5wcm92aWRlcjQgaW5zdGFuY2VvZiBEaXJlY3RpdmVQcm92aWRlciAmJiBsYW5nXzEuaXNQcmVzZW50KHAua2V5SWQ0KSAmJiBpLm9iajQgPT09IGluamVjdG9yXzEuVU5ERUZJTkVEKVxyXG4gICAgICAgICAgICBpLm9iajQgPSBpLmluc3RhbnRpYXRlUHJvdmlkZXIocC5wcm92aWRlcjQsIHAudmlzaWJpbGl0eTQpO1xyXG4gICAgICAgIGlmIChwLnByb3ZpZGVyNSBpbnN0YW5jZW9mIERpcmVjdGl2ZVByb3ZpZGVyICYmIGxhbmdfMS5pc1ByZXNlbnQocC5rZXlJZDUpICYmIGkub2JqNSA9PT0gaW5qZWN0b3JfMS5VTkRFRklORUQpXHJcbiAgICAgICAgICAgIGkub2JqNSA9IGkuaW5zdGFudGlhdGVQcm92aWRlcihwLnByb3ZpZGVyNSwgcC52aXNpYmlsaXR5NSk7XHJcbiAgICAgICAgaWYgKHAucHJvdmlkZXI2IGluc3RhbmNlb2YgRGlyZWN0aXZlUHJvdmlkZXIgJiYgbGFuZ18xLmlzUHJlc2VudChwLmtleUlkNikgJiYgaS5vYmo2ID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRClcclxuICAgICAgICAgICAgaS5vYmo2ID0gaS5pbnN0YW50aWF0ZVByb3ZpZGVyKHAucHJvdmlkZXI2LCBwLnZpc2liaWxpdHk2KTtcclxuICAgICAgICBpZiAocC5wcm92aWRlcjcgaW5zdGFuY2VvZiBEaXJlY3RpdmVQcm92aWRlciAmJiBsYW5nXzEuaXNQcmVzZW50KHAua2V5SWQ3KSAmJiBpLm9iajcgPT09IGluamVjdG9yXzEuVU5ERUZJTkVEKVxyXG4gICAgICAgICAgICBpLm9iajcgPSBpLmluc3RhbnRpYXRlUHJvdmlkZXIocC5wcm92aWRlcjcsIHAudmlzaWJpbGl0eTcpO1xyXG4gICAgICAgIGlmIChwLnByb3ZpZGVyOCBpbnN0YW5jZW9mIERpcmVjdGl2ZVByb3ZpZGVyICYmIGxhbmdfMS5pc1ByZXNlbnQocC5rZXlJZDgpICYmIGkub2JqOCA9PT0gaW5qZWN0b3JfMS5VTkRFRklORUQpXHJcbiAgICAgICAgICAgIGkub2JqOCA9IGkuaW5zdGFudGlhdGVQcm92aWRlcihwLnByb3ZpZGVyOCwgcC52aXNpYmlsaXR5OCk7XHJcbiAgICAgICAgaWYgKHAucHJvdmlkZXI5IGluc3RhbmNlb2YgRGlyZWN0aXZlUHJvdmlkZXIgJiYgbGFuZ18xLmlzUHJlc2VudChwLmtleUlkOSkgJiYgaS5vYmo5ID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRClcclxuICAgICAgICAgICAgaS5vYmo5ID0gaS5pbnN0YW50aWF0ZVByb3ZpZGVyKHAucHJvdmlkZXI5LCBwLnZpc2liaWxpdHk5KTtcclxuICAgIH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3JJbmxpbmVTdHJhdGVneS5wcm90b3R5cGUuZGVoeWRyYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpID0gdGhpcy5pbmplY3RvclN0cmF0ZWd5O1xyXG4gICAgICAgIGkub2JqMCA9IGluamVjdG9yXzEuVU5ERUZJTkVEO1xyXG4gICAgICAgIGkub2JqMSA9IGluamVjdG9yXzEuVU5ERUZJTkVEO1xyXG4gICAgICAgIGkub2JqMiA9IGluamVjdG9yXzEuVU5ERUZJTkVEO1xyXG4gICAgICAgIGkub2JqMyA9IGluamVjdG9yXzEuVU5ERUZJTkVEO1xyXG4gICAgICAgIGkub2JqNCA9IGluamVjdG9yXzEuVU5ERUZJTkVEO1xyXG4gICAgICAgIGkub2JqNSA9IGluamVjdG9yXzEuVU5ERUZJTkVEO1xyXG4gICAgICAgIGkub2JqNiA9IGluamVjdG9yXzEuVU5ERUZJTkVEO1xyXG4gICAgICAgIGkub2JqNyA9IGluamVjdG9yXzEuVU5ERUZJTkVEO1xyXG4gICAgICAgIGkub2JqOCA9IGluamVjdG9yXzEuVU5ERUZJTkVEO1xyXG4gICAgICAgIGkub2JqOSA9IGluamVjdG9yXzEuVU5ERUZJTkVEO1xyXG4gICAgfTtcclxuICAgIEVsZW1lbnRJbmplY3RvcklubGluZVN0cmF0ZWd5LnByb3RvdHlwZS5jYWxsT25EZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpID0gdGhpcy5pbmplY3RvclN0cmF0ZWd5O1xyXG4gICAgICAgIHZhciBwID0gaS5wcm90b1N0cmF0ZWd5O1xyXG4gICAgICAgIGlmIChwLnByb3ZpZGVyMCBpbnN0YW5jZW9mIERpcmVjdGl2ZVByb3ZpZGVyICYmXHJcbiAgICAgICAgICAgIHAucHJvdmlkZXIwLmNhbGxPbkRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgaS5vYmowLm9uRGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocC5wcm92aWRlcjEgaW5zdGFuY2VvZiBEaXJlY3RpdmVQcm92aWRlciAmJlxyXG4gICAgICAgICAgICBwLnByb3ZpZGVyMS5jYWxsT25EZXN0cm95KSB7XHJcbiAgICAgICAgICAgIGkub2JqMS5vbkRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHAucHJvdmlkZXIyIGluc3RhbmNlb2YgRGlyZWN0aXZlUHJvdmlkZXIgJiZcclxuICAgICAgICAgICAgcC5wcm92aWRlcjIuY2FsbE9uRGVzdHJveSkge1xyXG4gICAgICAgICAgICBpLm9iajIub25EZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwLnByb3ZpZGVyMyBpbnN0YW5jZW9mIERpcmVjdGl2ZVByb3ZpZGVyICYmXHJcbiAgICAgICAgICAgIHAucHJvdmlkZXIzLmNhbGxPbkRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgaS5vYmozLm9uRGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocC5wcm92aWRlcjQgaW5zdGFuY2VvZiBEaXJlY3RpdmVQcm92aWRlciAmJlxyXG4gICAgICAgICAgICBwLnByb3ZpZGVyNC5jYWxsT25EZXN0cm95KSB7XHJcbiAgICAgICAgICAgIGkub2JqNC5vbkRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHAucHJvdmlkZXI1IGluc3RhbmNlb2YgRGlyZWN0aXZlUHJvdmlkZXIgJiZcclxuICAgICAgICAgICAgcC5wcm92aWRlcjUuY2FsbE9uRGVzdHJveSkge1xyXG4gICAgICAgICAgICBpLm9iajUub25EZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwLnByb3ZpZGVyNiBpbnN0YW5jZW9mIERpcmVjdGl2ZVByb3ZpZGVyICYmXHJcbiAgICAgICAgICAgIHAucHJvdmlkZXI2LmNhbGxPbkRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgaS5vYmo2Lm9uRGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocC5wcm92aWRlcjcgaW5zdGFuY2VvZiBEaXJlY3RpdmVQcm92aWRlciAmJlxyXG4gICAgICAgICAgICBwLnByb3ZpZGVyNy5jYWxsT25EZXN0cm95KSB7XHJcbiAgICAgICAgICAgIGkub2JqNy5vbkRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHAucHJvdmlkZXI4IGluc3RhbmNlb2YgRGlyZWN0aXZlUHJvdmlkZXIgJiZcclxuICAgICAgICAgICAgcC5wcm92aWRlcjguY2FsbE9uRGVzdHJveSkge1xyXG4gICAgICAgICAgICBpLm9iajgub25EZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwLnByb3ZpZGVyOSBpbnN0YW5jZW9mIERpcmVjdGl2ZVByb3ZpZGVyICYmXHJcbiAgICAgICAgICAgIHAucHJvdmlkZXI5LmNhbGxPbkRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgaS5vYmo5Lm9uRGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3JJbmxpbmVTdHJhdGVneS5wcm90b3R5cGUuZ2V0Q29tcG9uZW50ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pbmplY3RvclN0cmF0ZWd5Lm9iajA7IH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3JJbmxpbmVTdHJhdGVneS5wcm90b3R5cGUuaXNDb21wb25lbnRLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VpLl9wcm90by5fZmlyc3RQcm92aWRlcklzQ29tcG9uZW50ICYmIGxhbmdfMS5pc1ByZXNlbnQoa2V5KSAmJlxyXG4gICAgICAgICAgICBrZXkuaWQgPT09IHRoaXMuaW5qZWN0b3JTdHJhdGVneS5wcm90b1N0cmF0ZWd5LmtleUlkMDtcclxuICAgIH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3JJbmxpbmVTdHJhdGVneS5wcm90b3R5cGUuYWRkRGlyZWN0aXZlc01hdGNoaW5nUXVlcnkgPSBmdW5jdGlvbiAocXVlcnksIGxpc3QpIHtcclxuICAgICAgICB2YXIgaSA9IHRoaXMuaW5qZWN0b3JTdHJhdGVneTtcclxuICAgICAgICB2YXIgcCA9IGkucHJvdG9TdHJhdGVneTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwLnByb3ZpZGVyMCkgJiYgcC5wcm92aWRlcjAua2V5LnRva2VuID09PSBxdWVyeS5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICBpZiAoaS5vYmowID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRClcclxuICAgICAgICAgICAgICAgIGkub2JqMCA9IGkuaW5zdGFudGlhdGVQcm92aWRlcihwLnByb3ZpZGVyMCwgcC52aXNpYmlsaXR5MCk7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaChpLm9iajApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwLnByb3ZpZGVyMSkgJiYgcC5wcm92aWRlcjEua2V5LnRva2VuID09PSBxdWVyeS5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICBpZiAoaS5vYmoxID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRClcclxuICAgICAgICAgICAgICAgIGkub2JqMSA9IGkuaW5zdGFudGlhdGVQcm92aWRlcihwLnByb3ZpZGVyMSwgcC52aXNpYmlsaXR5MSk7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaChpLm9iajEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwLnByb3ZpZGVyMikgJiYgcC5wcm92aWRlcjIua2V5LnRva2VuID09PSBxdWVyeS5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICBpZiAoaS5vYmoyID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRClcclxuICAgICAgICAgICAgICAgIGkub2JqMiA9IGkuaW5zdGFudGlhdGVQcm92aWRlcihwLnByb3ZpZGVyMiwgcC52aXNpYmlsaXR5Mik7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaChpLm9iajIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwLnByb3ZpZGVyMykgJiYgcC5wcm92aWRlcjMua2V5LnRva2VuID09PSBxdWVyeS5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICBpZiAoaS5vYmozID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRClcclxuICAgICAgICAgICAgICAgIGkub2JqMyA9IGkuaW5zdGFudGlhdGVQcm92aWRlcihwLnByb3ZpZGVyMywgcC52aXNpYmlsaXR5Myk7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaChpLm9iajMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwLnByb3ZpZGVyNCkgJiYgcC5wcm92aWRlcjQua2V5LnRva2VuID09PSBxdWVyeS5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICBpZiAoaS5vYmo0ID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRClcclxuICAgICAgICAgICAgICAgIGkub2JqNCA9IGkuaW5zdGFudGlhdGVQcm92aWRlcihwLnByb3ZpZGVyNCwgcC52aXNpYmlsaXR5NCk7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaChpLm9iajQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwLnByb3ZpZGVyNSkgJiYgcC5wcm92aWRlcjUua2V5LnRva2VuID09PSBxdWVyeS5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICBpZiAoaS5vYmo1ID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRClcclxuICAgICAgICAgICAgICAgIGkub2JqNSA9IGkuaW5zdGFudGlhdGVQcm92aWRlcihwLnByb3ZpZGVyNSwgcC52aXNpYmlsaXR5NSk7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaChpLm9iajUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwLnByb3ZpZGVyNikgJiYgcC5wcm92aWRlcjYua2V5LnRva2VuID09PSBxdWVyeS5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICBpZiAoaS5vYmo2ID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRClcclxuICAgICAgICAgICAgICAgIGkub2JqNiA9IGkuaW5zdGFudGlhdGVQcm92aWRlcihwLnByb3ZpZGVyNiwgcC52aXNpYmlsaXR5Nik7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaChpLm9iajYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwLnByb3ZpZGVyNykgJiYgcC5wcm92aWRlcjcua2V5LnRva2VuID09PSBxdWVyeS5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICBpZiAoaS5vYmo3ID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRClcclxuICAgICAgICAgICAgICAgIGkub2JqNyA9IGkuaW5zdGFudGlhdGVQcm92aWRlcihwLnByb3ZpZGVyNywgcC52aXNpYmlsaXR5Nyk7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaChpLm9iajcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwLnByb3ZpZGVyOCkgJiYgcC5wcm92aWRlcjgua2V5LnRva2VuID09PSBxdWVyeS5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICBpZiAoaS5vYmo4ID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRClcclxuICAgICAgICAgICAgICAgIGkub2JqOCA9IGkuaW5zdGFudGlhdGVQcm92aWRlcihwLnByb3ZpZGVyOCwgcC52aXNpYmlsaXR5OCk7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaChpLm9iajgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwLnByb3ZpZGVyOSkgJiYgcC5wcm92aWRlcjkua2V5LnRva2VuID09PSBxdWVyeS5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICBpZiAoaS5vYmo5ID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRClcclxuICAgICAgICAgICAgICAgIGkub2JqOSA9IGkuaW5zdGFudGlhdGVQcm92aWRlcihwLnByb3ZpZGVyOSwgcC52aXNpYmlsaXR5OSk7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaChpLm9iajkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRWxlbWVudEluamVjdG9ySW5saW5lU3RyYXRlZ3k7XHJcbn0pKCk7XHJcbi8qKlxyXG4gKiBTdHJhdGVneSB1c2VkIGJ5IHRoZSBgRWxlbWVudEluamVjdG9yYCB3aGVuIHRoZSBudW1iZXIgb2YgcHJvdmlkZXJzIGlzIDEwIG9yIGxlc3MuXHJcbiAqIEluIHN1Y2ggYSBjYXNlLCBpbmxpbmluZyBmaWVsZHMgaXMgYmVuZWZpY2lhbCBmb3IgcGVyZm9ybWFuY2VzLlxyXG4gKi9cclxudmFyIEVsZW1lbnRJbmplY3RvckR5bmFtaWNTdHJhdGVneSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFbGVtZW50SW5qZWN0b3JEeW5hbWljU3RyYXRlZ3koaW5qZWN0b3JTdHJhdGVneSwgX2VpKSB7XHJcbiAgICAgICAgdGhpcy5pbmplY3RvclN0cmF0ZWd5ID0gaW5qZWN0b3JTdHJhdGVneTtcclxuICAgICAgICB0aGlzLl9laSA9IF9laTtcclxuICAgIH1cclxuICAgIEVsZW1lbnRJbmplY3RvckR5bmFtaWNTdHJhdGVneS5wcm90b3R5cGUuaHlkcmF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaW5qID0gdGhpcy5pbmplY3RvclN0cmF0ZWd5O1xyXG4gICAgICAgIHZhciBwID0gaW5qLnByb3RvU3RyYXRlZ3k7XHJcbiAgICAgICAgaW5qLnJlc2V0Q29uc3RydWN0aW9uQ291bnRlcigpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcC5rZXlJZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHAucHJvdmlkZXJzW2ldIGluc3RhbmNlb2YgRGlyZWN0aXZlUHJvdmlkZXIgJiYgbGFuZ18xLmlzUHJlc2VudChwLmtleUlkc1tpXSkgJiZcclxuICAgICAgICAgICAgICAgIGluai5vYmpzW2ldID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRCkge1xyXG4gICAgICAgICAgICAgICAgaW5qLm9ianNbaV0gPSBpbmouaW5zdGFudGlhdGVQcm92aWRlcihwLnByb3ZpZGVyc1tpXSwgcC52aXNpYmlsaXRpZXNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEVsZW1lbnRJbmplY3RvckR5bmFtaWNTdHJhdGVneS5wcm90b3R5cGUuZGVoeWRyYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpbmogPSB0aGlzLmluamVjdG9yU3RyYXRlZ3k7XHJcbiAgICAgICAgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmZpbGwoaW5qLm9ianMsIGluamVjdG9yXzEuVU5ERUZJTkVEKTtcclxuICAgIH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3JEeW5hbWljU3RyYXRlZ3kucHJvdG90eXBlLmNhbGxPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGlzdCA9IHRoaXMuaW5qZWN0b3JTdHJhdGVneTtcclxuICAgICAgICB2YXIgcCA9IGlzdC5wcm90b1N0cmF0ZWd5O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcC5wcm92aWRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHAucHJvdmlkZXJzW2ldIGluc3RhbmNlb2YgRGlyZWN0aXZlUHJvdmlkZXIgJiZcclxuICAgICAgICAgICAgICAgIHAucHJvdmlkZXJzW2ldLmNhbGxPbkRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgICAgIGlzdC5vYmpzW2ldLm9uRGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEVsZW1lbnRJbmplY3RvckR5bmFtaWNTdHJhdGVneS5wcm90b3R5cGUuZ2V0Q29tcG9uZW50ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pbmplY3RvclN0cmF0ZWd5Lm9ianNbMF07IH07XHJcbiAgICBFbGVtZW50SW5qZWN0b3JEeW5hbWljU3RyYXRlZ3kucHJvdG90eXBlLmlzQ29tcG9uZW50S2V5ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciBwID0gdGhpcy5pbmplY3RvclN0cmF0ZWd5LnByb3RvU3RyYXRlZ3k7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VpLl9wcm90by5fZmlyc3RQcm92aWRlcklzQ29tcG9uZW50ICYmIGxhbmdfMS5pc1ByZXNlbnQoa2V5KSAmJiBrZXkuaWQgPT09IHAua2V5SWRzWzBdO1xyXG4gICAgfTtcclxuICAgIEVsZW1lbnRJbmplY3RvckR5bmFtaWNTdHJhdGVneS5wcm90b3R5cGUuYWRkRGlyZWN0aXZlc01hdGNoaW5nUXVlcnkgPSBmdW5jdGlvbiAocXVlcnksIGxpc3QpIHtcclxuICAgICAgICB2YXIgaXN0ID0gdGhpcy5pbmplY3RvclN0cmF0ZWd5O1xyXG4gICAgICAgIHZhciBwID0gaXN0LnByb3RvU3RyYXRlZ3k7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLnByb3ZpZGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAocC5wcm92aWRlcnNbaV0ua2V5LnRva2VuID09PSBxdWVyeS5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzdC5vYmpzW2ldID09PSBpbmplY3Rvcl8xLlVOREVGSU5FRCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzdC5vYmpzW2ldID0gaXN0Lmluc3RhbnRpYXRlUHJvdmlkZXIocC5wcm92aWRlcnNbaV0sIHAudmlzaWJpbGl0aWVzW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxpc3QucHVzaChpc3Qub2Jqc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEVsZW1lbnRJbmplY3RvckR5bmFtaWNTdHJhdGVneTtcclxufSkoKTtcclxudmFyIFByb3RvUXVlcnlSZWYgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUHJvdG9RdWVyeVJlZihkaXJJbmRleCwgc2V0dGVyLCBxdWVyeSkge1xyXG4gICAgICAgIHRoaXMuZGlySW5kZXggPSBkaXJJbmRleDtcclxuICAgICAgICB0aGlzLnNldHRlciA9IHNldHRlcjtcclxuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHJvdG9RdWVyeVJlZi5wcm90b3R5cGUsIFwidXNlc1Byb3BlcnR5U3ludGF4XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQodGhpcy5zZXR0ZXIpOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBQcm90b1F1ZXJ5UmVmO1xyXG59KSgpO1xyXG5leHBvcnRzLlByb3RvUXVlcnlSZWYgPSBQcm90b1F1ZXJ5UmVmO1xyXG52YXIgUXVlcnlSZWYgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUXVlcnlSZWYocHJvdG9RdWVyeVJlZiwgb3JpZ2luYXRvcikge1xyXG4gICAgICAgIHRoaXMucHJvdG9RdWVyeVJlZiA9IHByb3RvUXVlcnlSZWY7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hdG9yID0gb3JpZ2luYXRvcjtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShRdWVyeVJlZi5wcm90b3R5cGUsIFwiaXNWaWV3UXVlcnlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5wcm90b1F1ZXJ5UmVmLnF1ZXJ5LmlzVmlld1F1ZXJ5OyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIFF1ZXJ5UmVmLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRpcnR5KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlKCk7XHJcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgIC8vIFRPRE8gZGVsZXRlIHRoZSBjaGVjayBvbmNlIG9ubHkgZmllbGQgcXVlcmllcyBhcmUgc3VwcG9ydGVkXHJcbiAgICAgICAgaWYgKHRoaXMucHJvdG9RdWVyeVJlZi51c2VzUHJvcGVydHlTeW50YXgpIHtcclxuICAgICAgICAgICAgdmFyIGRpciA9IHRoaXMub3JpZ2luYXRvci5nZXREaXJlY3RpdmVBdEluZGV4KHRoaXMucHJvdG9RdWVyeVJlZi5kaXJJbmRleCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3RvUXVlcnlSZWYucXVlcnkuZmlyc3QpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvdG9RdWVyeVJlZi5zZXR0ZXIoZGlyLCB0aGlzLmxpc3QubGVuZ3RoID4gMCA/IHRoaXMubGlzdC5maXJzdCA6IG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm90b1F1ZXJ5UmVmLnNldHRlcihkaXIsIHRoaXMubGlzdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5saXN0Lm5vdGlmeU9uQ2hhbmdlcygpO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5UmVmLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhZ2dyZWdhdG9yID0gW107XHJcbiAgICAgICAgaWYgKHRoaXMucHJvdG9RdWVyeVJlZi5xdWVyeS5pc1ZpZXdRdWVyeSkge1xyXG4gICAgICAgICAgICB2YXIgdmlldyA9IHRoaXMub3JpZ2luYXRvci5nZXRWaWV3KCk7XHJcbiAgICAgICAgICAgIC8vIGludGVudGlvbmFsbHkgc2tpcHBpbmcgb3JpZ2luYXRvciBmb3IgdmlldyBxdWVyaWVzLlxyXG4gICAgICAgICAgICB2YXIgbmVzdGVkVmlldyA9IHZpZXcuZ2V0TmVzdGVkVmlldyh2aWV3LmVsZW1lbnRPZmZzZXQgKyB0aGlzLm9yaWdpbmF0b3IuZ2V0Qm91bmRFbGVtZW50SW5kZXgoKSk7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KG5lc3RlZFZpZXcpKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmlzaXRWaWV3KG5lc3RlZFZpZXcsIGFnZ3JlZ2F0b3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdmlzaXQodGhpcy5vcmlnaW5hdG9yLCBhZ2dyZWdhdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5saXN0LnJlc2V0KGFnZ3JlZ2F0b3IpO1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIFF1ZXJ5UmVmLnByb3RvdHlwZS5fdmlzaXQgPSBmdW5jdGlvbiAoaW5qLCBhZ2dyZWdhdG9yKSB7XHJcbiAgICAgICAgdmFyIHZpZXcgPSBpbmouZ2V0VmlldygpO1xyXG4gICAgICAgIHZhciBzdGFydElkeCA9IHZpZXcuZWxlbWVudE9mZnNldCArIGluai5fcHJvdG8uaW5kZXg7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0SWR4OyBpIDwgdmlldy5lbGVtZW50T2Zmc2V0ICsgdmlldy5vd25CaW5kZXJzQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgY3VySW5qID0gdmlldy5lbGVtZW50SW5qZWN0b3JzW2ldO1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoY3VySW5qKSlcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAvLyBUaGUgZmlyc3QgaW5qZWN0b3IgYWZ0ZXIgaW5qLCB0aGF0IGlzIG91dHNpZGUgdGhlIHN1YnRyZWUgcm9vdGVkIGF0XHJcbiAgICAgICAgICAgIC8vIGluaiBoYXMgdG8gaGF2ZSBhIG51bGwgcGFyZW50IG9yIGEgcGFyZW50IHRoYXQgaXMgYW4gYW5jZXN0b3Igb2YgaW5qLlxyXG4gICAgICAgICAgICBpZiAoaSA+IHN0YXJ0SWR4ICYmIChsYW5nXzEuaXNCbGFuayhjdXJJbmopIHx8IGxhbmdfMS5pc0JsYW5rKGN1ckluai5wYXJlbnQpIHx8XHJcbiAgICAgICAgICAgICAgICB2aWV3LmVsZW1lbnRPZmZzZXQgKyBjdXJJbmoucGFyZW50Ll9wcm90by5pbmRleCA8IHN0YXJ0SWR4KSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF0aGlzLnByb3RvUXVlcnlSZWYucXVlcnkuZGVzY2VuZGFudHMgJiZcclxuICAgICAgICAgICAgICAgICEoY3VySW5qLnBhcmVudCA9PSB0aGlzLm9yaWdpbmF0b3IgfHwgY3VySW5qID09IHRoaXMub3JpZ2luYXRvcikpXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgLy8gV2UgdmlzaXQgdGhlIHZpZXcgY29udGFpbmVyKFZDKSB2aWV3cyByaWdodCBhZnRlciB0aGUgaW5qZWN0b3IgdGhhdCBjb250YWluc1xyXG4gICAgICAgICAgICAvLyB0aGUgVkMuIFRoZW9yZXRpY2FsbHksIHRoYXQgbWlnaHQgbm90IGJlIHRoZSByaWdodCBvcmRlciBpZiB0aGVyZSBhcmVcclxuICAgICAgICAgICAgLy8gY2hpbGQgaW5qZWN0b3JzIG9mIHNhaWQgaW5qZWN0b3IuIE5vdCBjbGVhciB3aGV0aGVyIGlmIHN1Y2ggY2FzZSBjYW5cclxuICAgICAgICAgICAgLy8gZXZlbiBiZSBjb25zdHJ1Y3RlZCB3aXRoIHRoZSBjdXJyZW50IGFwaXMuXHJcbiAgICAgICAgICAgIHRoaXMuX3Zpc2l0SW5qZWN0b3IoY3VySW5qLCBhZ2dyZWdhdG9yKTtcclxuICAgICAgICAgICAgdmFyIHZjID0gdmlldy52aWV3Q29udGFpbmVyc1tpXTtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodmMpKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmlzaXRWaWV3Q29udGFpbmVyKHZjLCBhZ2dyZWdhdG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUXVlcnlSZWYucHJvdG90eXBlLl92aXNpdEluamVjdG9yID0gZnVuY3Rpb24gKGluaiwgYWdncmVnYXRvcikge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3RvUXVlcnlSZWYucXVlcnkuaXNWYXJCaW5kaW5nUXVlcnkpIHtcclxuICAgICAgICAgICAgdGhpcy5fYWdncmVnYXRlVmFyaWFibGVCaW5kaW5nKGluaiwgYWdncmVnYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9hZ2dyZWdhdGVEaXJlY3RpdmUoaW5qLCBhZ2dyZWdhdG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUXVlcnlSZWYucHJvdG90eXBlLl92aXNpdFZpZXdDb250YWluZXIgPSBmdW5jdGlvbiAodmMsIGFnZ3JlZ2F0b3IpIHtcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZjLnZpZXdzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Zpc2l0Vmlldyh2Yy52aWV3c1tqXSwgYWdncmVnYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFF1ZXJ5UmVmLnByb3RvdHlwZS5fdmlzaXRWaWV3ID0gZnVuY3Rpb24gKHZpZXcsIGFnZ3JlZ2F0b3IpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gdmlldy5lbGVtZW50T2Zmc2V0OyBpIDwgdmlldy5lbGVtZW50T2Zmc2V0ICsgdmlldy5vd25CaW5kZXJzQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgaW5qID0gdmlldy5lbGVtZW50SW5qZWN0b3JzW2ldO1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoaW5qKSlcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB0aGlzLl92aXNpdEluamVjdG9yKGluaiwgYWdncmVnYXRvcik7XHJcbiAgICAgICAgICAgIHZhciB2YyA9IHZpZXcudmlld0NvbnRhaW5lcnNbaV07XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHZjKSlcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Zpc2l0Vmlld0NvbnRhaW5lcih2YywgYWdncmVnYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFF1ZXJ5UmVmLnByb3RvdHlwZS5fYWdncmVnYXRlVmFyaWFibGVCaW5kaW5nID0gZnVuY3Rpb24gKGluaiwgYWdncmVnYXRvcikge1xyXG4gICAgICAgIHZhciB2YiA9IHRoaXMucHJvdG9RdWVyeVJlZi5xdWVyeS52YXJCaW5kaW5ncztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZiLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmIChpbmouaGFzVmFyaWFibGVCaW5kaW5nKHZiW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgYWdncmVnYXRvci5wdXNoKGluai5nZXRWYXJpYWJsZUJpbmRpbmcodmJbaV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBRdWVyeVJlZi5wcm90b3R5cGUuX2FnZ3JlZ2F0ZURpcmVjdGl2ZSA9IGZ1bmN0aW9uIChpbmosIGFnZ3JlZ2F0b3IpIHtcclxuICAgICAgICBpbmouYWRkRGlyZWN0aXZlc01hdGNoaW5nUXVlcnkodGhpcy5wcm90b1F1ZXJ5UmVmLnF1ZXJ5LCBhZ2dyZWdhdG9yKTtcclxuICAgIH07XHJcbiAgICBRdWVyeVJlZi5wcm90b3R5cGUuZGVoeWRyYXRlID0gZnVuY3Rpb24gKCkgeyB0aGlzLmxpc3QgPSBudWxsOyB9O1xyXG4gICAgUXVlcnlSZWYucHJvdG90eXBlLmh5ZHJhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5saXN0ID0gbmV3IHF1ZXJ5X2xpc3RfMS5RdWVyeUxpc3QoKTtcclxuICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUXVlcnlSZWY7XHJcbn0pKCk7XHJcbmV4cG9ydHMuUXVlcnlSZWYgPSBRdWVyeVJlZjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWxlbWVudF9pbmplY3Rvci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGEgbG9jYXRpb24gaW4gYSBWaWV3IHRoYXQgaGFzIGFuIGluamVjdGlvbiwgY2hhbmdlLWRldGVjdGlvbiBhbmQgcmVuZGVyIGNvbnRleHRcclxuICogYXNzb2NpYXRlZCB3aXRoIGl0LlxyXG4gKlxyXG4gKiBBbiBgRWxlbWVudFJlZmAgaXMgY3JlYXRlZCBmb3IgZWFjaCBlbGVtZW50IGluIHRoZSBUZW1wbGF0ZSB0aGF0IGNvbnRhaW5zIGEgRGlyZWN0aXZlLCBDb21wb25lbnRcclxuICogb3IgZGF0YS1iaW5kaW5nLlxyXG4gKlxyXG4gKiBBbiBgRWxlbWVudFJlZmAgaXMgYmFja2VkIGJ5IGEgcmVuZGVyLXNwZWNpZmljIGVsZW1lbnQuIEluIHRoZSBicm93c2VyLCB0aGlzIGlzIHVzdWFsbHkgYSBET01cclxuICogZWxlbWVudC5cclxuICovXHJcbnZhciBFbGVtZW50UmVmID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVsZW1lbnRSZWYoKSB7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRWxlbWVudFJlZi5wcm90b3R5cGUsIFwibmF0aXZlRWxlbWVudFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHVuZGVybHlpbmcgbmF0aXZlIGVsZW1lbnQgb3IgYG51bGxgIGlmIGRpcmVjdCBhY2Nlc3MgdG8gbmF0aXZlIGVsZW1lbnRzIGlzIG5vdCBzdXBwb3J0ZWRcclxuICAgICAgICAgKiAoZS5nLiB3aGVuIHRoZSBhcHBsaWNhdGlvbiBydW5zIGluIGEgd2ViIHdvcmtlcikuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiA8ZGl2IGNsYXNzPVwiY2FsbG91dCBpcy1jcml0aWNhbFwiPlxyXG4gICAgICAgICAqICAgPGhlYWRlcj5Vc2Ugd2l0aCBjYXV0aW9uPC9oZWFkZXI+XHJcbiAgICAgICAgICogICA8cD5cclxuICAgICAgICAgKiAgICBVc2UgdGhpcyBBUEkgYXMgdGhlIGxhc3QgcmVzb3J0IHdoZW4gZGlyZWN0IGFjY2VzcyB0byBET00gaXMgbmVlZGVkLiBVc2UgdGVtcGxhdGluZyBhbmRcclxuICAgICAgICAgKiAgICBkYXRhLWJpbmRpbmcgcHJvdmlkZWQgYnkgQW5ndWxhciBpbnN0ZWFkLiBBbHRlcm5hdGl2ZWx5IHlvdSB0YWtlIGEgbG9vayBhdCB7QGxpbmsgUmVuZGVyZXJ9XHJcbiAgICAgICAgICogICAgd2hpY2ggcHJvdmlkZXMgQVBJIHRoYXQgY2FuIHNhZmVseSBiZSB1c2VkIGV2ZW4gd2hlbiBkaXJlY3QgYWNjZXNzIHRvIG5hdGl2ZSBlbGVtZW50cyBpcyBub3RcclxuICAgICAgICAgKiAgICBzdXBwb3J0ZWQuXHJcbiAgICAgICAgICogICA8L3A+XHJcbiAgICAgICAgICogICA8cD5cclxuICAgICAgICAgKiAgICBSZWx5aW5nIG9uIGRpcmVjdCBET00gYWNjZXNzIGNyZWF0ZXMgdGlnaHQgY291cGxpbmcgYmV0d2VlbiB5b3VyIGFwcGxpY2F0aW9uIGFuZCByZW5kZXJpbmdcclxuICAgICAgICAgKiAgICBsYXllcnMgd2hpY2ggd2lsbCBtYWtlIGl0IGltcG9zc2libGUgdG8gc2VwYXJhdGUgdGhlIHR3byBhbmQgZGVwbG95IHlvdXIgYXBwbGljYXRpb24gaW50byBhXHJcbiAgICAgICAgICogICAgd2ViIHdvcmtlci5cclxuICAgICAgICAgKiAgIDwvcD5cclxuICAgICAgICAgKiA8L2Rpdj5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4Y2VwdGlvbnNfMS51bmltcGxlbWVudGVkKCk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVsZW1lbnRSZWYucHJvdG90eXBlLCBcInJlbmRlclZpZXdcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhjZXB0aW9uc18xLnVuaW1wbGVtZW50ZWQoKTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gRWxlbWVudFJlZjtcclxufSkoKTtcclxuZXhwb3J0cy5FbGVtZW50UmVmID0gRWxlbWVudFJlZjtcclxudmFyIEVsZW1lbnRSZWZfID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhFbGVtZW50UmVmXywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEVsZW1lbnRSZWZfKHBhcmVudFZpZXcsIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluZGV4IG9mIHRoZSBlbGVtZW50IGluc2lkZSB0aGUge0BsaW5rIFZpZXdSZWZ9LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogVGhpcyBpcyB1c2VkIGludGVybmFsbHkgYnkgdGhlIEFuZ3VsYXIgZnJhbWV3b3JrIHRvIGxvY2F0ZSBlbGVtZW50cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBib3VuZEVsZW1lbnRJbmRleCwgX3JlbmRlcmVyKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRWaWV3ID0gcGFyZW50VmlldztcclxuICAgICAgICB0aGlzLmJvdW5kRWxlbWVudEluZGV4ID0gYm91bmRFbGVtZW50SW5kZXg7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSBfcmVuZGVyZXI7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRWxlbWVudFJlZl8ucHJvdG90eXBlLCBcInJlbmRlclZpZXdcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5wYXJlbnRWaWV3LnJlbmRlcjsgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyBleGNlcHRpb25zXzEudW5pbXBsZW1lbnRlZCgpOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFbGVtZW50UmVmXy5wcm90b3R5cGUsIFwibmF0aXZlRWxlbWVudFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9yZW5kZXJlci5nZXROYXRpdmVFbGVtZW50U3luYyh0aGlzKTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gRWxlbWVudFJlZl87XHJcbn0pKEVsZW1lbnRSZWYpO1xyXG5leHBvcnRzLkVsZW1lbnRSZWZfID0gRWxlbWVudFJlZl87XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVsZW1lbnRfcmVmLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxuZXhwb3J0cy5FVkVOVF9UQVJHRVRfU0VQQVJBVE9SID0gJzonO1xyXG52YXIgRXZlbnRDb25maWcgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRXZlbnRDb25maWcoZmllbGROYW1lLCBldmVudE5hbWUsIGlzTG9uZ0Zvcm0pIHtcclxuICAgICAgICB0aGlzLmZpZWxkTmFtZSA9IGZpZWxkTmFtZTtcclxuICAgICAgICB0aGlzLmV2ZW50TmFtZSA9IGV2ZW50TmFtZTtcclxuICAgICAgICB0aGlzLmlzTG9uZ0Zvcm0gPSBpc0xvbmdGb3JtO1xyXG4gICAgfVxyXG4gICAgRXZlbnRDb25maWcucGFyc2UgPSBmdW5jdGlvbiAoZXZlbnRDb25maWcpIHtcclxuICAgICAgICB2YXIgZmllbGROYW1lID0gZXZlbnRDb25maWcsIGV2ZW50TmFtZSA9IGV2ZW50Q29uZmlnLCBpc0xvbmdGb3JtID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIHNlcGFyYXRvcklkeCA9IGV2ZW50Q29uZmlnLmluZGV4T2YoZXhwb3J0cy5FVkVOVF9UQVJHRVRfU0VQQVJBVE9SKTtcclxuICAgICAgICBpZiAoc2VwYXJhdG9ySWR4ID4gLTEpIHtcclxuICAgICAgICAgICAgLy8gbG9uZyBmb3JtYXQ6ICdmaWVsZE5hbWU6IGV2ZW50TmFtZSdcclxuICAgICAgICAgICAgZmllbGROYW1lID0gbGFuZ18xLlN0cmluZ1dyYXBwZXIuc3Vic3RyaW5nKGV2ZW50Q29uZmlnLCAwLCBzZXBhcmF0b3JJZHgpLnRyaW0oKTtcclxuICAgICAgICAgICAgZXZlbnROYW1lID0gbGFuZ18xLlN0cmluZ1dyYXBwZXIuc3Vic3RyaW5nKGV2ZW50Q29uZmlnLCBzZXBhcmF0b3JJZHggKyAxKS50cmltKCk7XHJcbiAgICAgICAgICAgIGlzTG9uZ0Zvcm0gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IEV2ZW50Q29uZmlnKGZpZWxkTmFtZSwgZXZlbnROYW1lLCBpc0xvbmdGb3JtKTtcclxuICAgIH07XHJcbiAgICBFdmVudENvbmZpZy5wcm90b3R5cGUuZ2V0RnVsbE5hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNMb25nRm9ybSA/IFwiXCIgKyB0aGlzLmZpZWxkTmFtZSArIGV4cG9ydHMuRVZFTlRfVEFSR0VUX1NFUEFSQVRPUiArIHRoaXMuZXZlbnROYW1lIDpcclxuICAgICAgICAgICAgdGhpcy5ldmVudE5hbWU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEV2ZW50Q29uZmlnO1xyXG59KSgpO1xyXG5leHBvcnRzLkV2ZW50Q29uZmlnID0gRXZlbnRDb25maWc7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50X2NvbmZpZy5qcy5tYXAiLCIndXNlIHN0cmljdCc7KGZ1bmN0aW9uIChMaWZlY3ljbGVIb29rcykge1xyXG4gICAgTGlmZWN5Y2xlSG9va3NbTGlmZWN5Y2xlSG9va3NbXCJPbkluaXRcIl0gPSAwXSA9IFwiT25Jbml0XCI7XHJcbiAgICBMaWZlY3ljbGVIb29rc1tMaWZlY3ljbGVIb29rc1tcIk9uRGVzdHJveVwiXSA9IDFdID0gXCJPbkRlc3Ryb3lcIjtcclxuICAgIExpZmVjeWNsZUhvb2tzW0xpZmVjeWNsZUhvb2tzW1wiRG9DaGVja1wiXSA9IDJdID0gXCJEb0NoZWNrXCI7XHJcbiAgICBMaWZlY3ljbGVIb29rc1tMaWZlY3ljbGVIb29rc1tcIk9uQ2hhbmdlc1wiXSA9IDNdID0gXCJPbkNoYW5nZXNcIjtcclxuICAgIExpZmVjeWNsZUhvb2tzW0xpZmVjeWNsZUhvb2tzW1wiQWZ0ZXJDb250ZW50SW5pdFwiXSA9IDRdID0gXCJBZnRlckNvbnRlbnRJbml0XCI7XHJcbiAgICBMaWZlY3ljbGVIb29rc1tMaWZlY3ljbGVIb29rc1tcIkFmdGVyQ29udGVudENoZWNrZWRcIl0gPSA1XSA9IFwiQWZ0ZXJDb250ZW50Q2hlY2tlZFwiO1xyXG4gICAgTGlmZWN5Y2xlSG9va3NbTGlmZWN5Y2xlSG9va3NbXCJBZnRlclZpZXdJbml0XCJdID0gNl0gPSBcIkFmdGVyVmlld0luaXRcIjtcclxuICAgIExpZmVjeWNsZUhvb2tzW0xpZmVjeWNsZUhvb2tzW1wiQWZ0ZXJWaWV3Q2hlY2tlZFwiXSA9IDddID0gXCJBZnRlclZpZXdDaGVja2VkXCI7XHJcbn0pKGV4cG9ydHMuTGlmZWN5Y2xlSG9va3MgfHwgKGV4cG9ydHMuTGlmZWN5Y2xlSG9va3MgPSB7fSkpO1xyXG52YXIgTGlmZWN5Y2xlSG9va3MgPSBleHBvcnRzLkxpZmVjeWNsZUhvb2tzO1xyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5leHBvcnRzLkxJRkVDWUNMRV9IT09LU19WQUxVRVMgPSBbXHJcbiAgICBMaWZlY3ljbGVIb29rcy5PbkluaXQsXHJcbiAgICBMaWZlY3ljbGVIb29rcy5PbkRlc3Ryb3ksXHJcbiAgICBMaWZlY3ljbGVIb29rcy5Eb0NoZWNrLFxyXG4gICAgTGlmZWN5Y2xlSG9va3MuT25DaGFuZ2VzLFxyXG4gICAgTGlmZWN5Y2xlSG9va3MuQWZ0ZXJDb250ZW50SW5pdCxcclxuICAgIExpZmVjeWNsZUhvb2tzLkFmdGVyQ29udGVudENoZWNrZWQsXHJcbiAgICBMaWZlY3ljbGVIb29rcy5BZnRlclZpZXdJbml0LFxyXG4gICAgTGlmZWN5Y2xlSG9va3MuQWZ0ZXJWaWV3Q2hlY2tlZFxyXG5dO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcmZhY2VzLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgZXhjZXB0aW9uc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2V4Y2VwdGlvbnMnKTtcclxudmFyIG1ldGFkYXRhXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YScpO1xyXG52YXIgcmVmbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvcmVmbGVjdGlvbi9yZWZsZWN0aW9uJyk7XHJcbi8qKlxyXG4gKiBSZXNvbHZlIGEgYFR5cGVgIGZvciB7QGxpbmsgUGlwZU1ldGFkYXRhfS5cclxuICpcclxuICogVGhpcyBpbnRlcmZhY2UgY2FuIGJlIG92ZXJyaWRkZW4gYnkgdGhlIGFwcGxpY2F0aW9uIGRldmVsb3BlciB0byBjcmVhdGUgY3VzdG9tIGJlaGF2aW9yLlxyXG4gKlxyXG4gKiBTZWUge0BsaW5rIENvbXBpbGVyfVxyXG4gKi9cclxudmFyIFBpcGVSZXNvbHZlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQaXBlUmVzb2x2ZXIoKSB7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiB7QGxpbmsgUGlwZU1ldGFkYXRhfSBmb3IgYSBnaXZlbiBgVHlwZWAuXHJcbiAgICAgKi9cclxuICAgIFBpcGVSZXNvbHZlci5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgdmFyIG1ldGFzID0gcmVmbGVjdGlvbl8xLnJlZmxlY3Rvci5hbm5vdGF0aW9ucyhkaV8xLnJlc29sdmVGb3J3YXJkUmVmKHR5cGUpKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChtZXRhcykpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXRhcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFubm90YXRpb24gPSBtZXRhc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChhbm5vdGF0aW9uIGluc3RhbmNlb2YgbWV0YWRhdGFfMS5QaXBlTWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5ub3RhdGlvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oXCJObyBQaXBlIGRlY29yYXRvciBmb3VuZCBvbiBcIiArIGxhbmdfMS5zdHJpbmdpZnkodHlwZSkpO1xyXG4gICAgfTtcclxuICAgIFBpcGVSZXNvbHZlciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgUGlwZVJlc29sdmVyKTtcclxuICAgIHJldHVybiBQaXBlUmVzb2x2ZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuUGlwZVJlc29sdmVyID0gUGlwZVJlc29sdmVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlX3Jlc29sdmVyLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgX19wYXJhbSA9ICh0aGlzICYmIHRoaXMuX19wYXJhbSkgfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn07XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgcGlwZV9wcm92aWRlcl8xID0gcmVxdWlyZSgnLi4vcGlwZXMvcGlwZV9wcm92aWRlcicpO1xyXG52YXIgcGlwZXNfMSA9IHJlcXVpcmUoJy4uL3BpcGVzL3BpcGVzJyk7XHJcbnZhciB2aWV3XzEgPSByZXF1aXJlKCcuL3ZpZXcnKTtcclxudmFyIGVsZW1lbnRfYmluZGVyXzEgPSByZXF1aXJlKCcuL2VsZW1lbnRfYmluZGVyJyk7XHJcbnZhciBlbGVtZW50X2luamVjdG9yXzEgPSByZXF1aXJlKCcuL2VsZW1lbnRfaW5qZWN0b3InKTtcclxudmFyIGRpcmVjdGl2ZV9yZXNvbHZlcl8xID0gcmVxdWlyZSgnLi9kaXJlY3RpdmVfcmVzb2x2ZXInKTtcclxudmFyIHZpZXdfcmVzb2x2ZXJfMSA9IHJlcXVpcmUoJy4vdmlld19yZXNvbHZlcicpO1xyXG52YXIgcGlwZV9yZXNvbHZlcl8xID0gcmVxdWlyZSgnLi9waXBlX3Jlc29sdmVyJyk7XHJcbnZhciBwaXBlc18yID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvcGlwZXMnKTtcclxudmFyIHRlbXBsYXRlX2NvbW1hbmRzXzEgPSByZXF1aXJlKCcuL3RlbXBsYXRlX2NvbW1hbmRzJyk7XHJcbnZhciByZW5kZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3JlbmRlcicpO1xyXG52YXIgYXBwbGljYXRpb25fdG9rZW5zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9hcHBsaWNhdGlvbl90b2tlbnMnKTtcclxudmFyIFByb3RvVmlld0ZhY3RvcnkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUHJvdG9WaWV3RmFjdG9yeShfcmVuZGVyZXIsIGRlZmF1bHRQaXBlcywgX2RpcmVjdGl2ZVJlc29sdmVyLCBfdmlld1Jlc29sdmVyLCBfcGlwZVJlc29sdmVyLCBhcHBJZCkge1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gX3JlbmRlcmVyO1xyXG4gICAgICAgIHRoaXMuX2RpcmVjdGl2ZVJlc29sdmVyID0gX2RpcmVjdGl2ZVJlc29sdmVyO1xyXG4gICAgICAgIHRoaXMuX3ZpZXdSZXNvbHZlciA9IF92aWV3UmVzb2x2ZXI7XHJcbiAgICAgICAgdGhpcy5fcGlwZVJlc29sdmVyID0gX3BpcGVSZXNvbHZlcjtcclxuICAgICAgICB0aGlzLl9jYWNoZSA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLl9kZWZhdWx0UGlwZXMgPSBkZWZhdWx0UGlwZXM7XHJcbiAgICAgICAgdGhpcy5fYXBwSWQgPSBhcHBJZDtcclxuICAgIH1cclxuICAgIFByb3RvVmlld0ZhY3RvcnkucHJvdG90eXBlLmNsZWFyQ2FjaGUgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX2NhY2hlLmNsZWFyKCk7IH07XHJcbiAgICBQcm90b1ZpZXdGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVIb3N0ID0gZnVuY3Rpb24gKGNvbXBpbGVkSG9zdFRlbXBsYXRlKSB7XHJcbiAgICAgICAgdmFyIGNvbXBpbGVkVGVtcGxhdGUgPSBjb21waWxlZEhvc3RUZW1wbGF0ZS5nZXRUZW1wbGF0ZSgpO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9jYWNoZS5nZXQoY29tcGlsZWRUZW1wbGF0ZS5pZCk7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlRGF0YSA9IGNvbXBpbGVkVGVtcGxhdGUuZ2V0RGF0YSh0aGlzLl9hcHBJZCk7XHJcbiAgICAgICAgICAgIHZhciBlbXB0eU1hcCA9IHt9O1xyXG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgdmlld18xLkFwcFByb3RvVmlldyh0ZW1wbGF0ZURhdGEuY29tbWFuZHMsIHZpZXdfMS5WaWV3VHlwZS5IT1NULCB0cnVlLCB0ZW1wbGF0ZURhdGEuY2hhbmdlRGV0ZWN0b3JGYWN0b3J5LCBudWxsLCBuZXcgcGlwZXNfMS5Qcm90b1BpcGVzKGVtcHR5TWFwKSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlLnNldChjb21waWxlZFRlbXBsYXRlLmlkLCByZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIFByb3RvVmlld0ZhY3RvcnkucHJvdG90eXBlLl9jcmVhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoY21kKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgbmVzdGVkUHJvdG9WaWV3ID0gdGhpcy5fY2FjaGUuZ2V0KGNtZC50ZW1wbGF0ZUlkKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsobmVzdGVkUHJvdG9WaWV3KSkge1xyXG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gY21kLmRpcmVjdGl2ZXNbMF07XHJcbiAgICAgICAgICAgIHZhciB2aWV3ID0gdGhpcy5fdmlld1Jlc29sdmVyLnJlc29sdmUoY29tcG9uZW50KTtcclxuICAgICAgICAgICAgdmFyIGNvbXBpbGVkVGVtcGxhdGVEYXRhID0gY21kLnRlbXBsYXRlLmdldERhdGEodGhpcy5fYXBwSWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5yZWdpc3RlckNvbXBvbmVudFRlbXBsYXRlKGNtZC50ZW1wbGF0ZUlkLCBjb21waWxlZFRlbXBsYXRlRGF0YS5jb21tYW5kcywgY29tcGlsZWRUZW1wbGF0ZURhdGEuc3R5bGVzLCBjbWQubmF0aXZlU2hhZG93KTtcclxuICAgICAgICAgICAgdmFyIGJvdW5kUGlwZXMgPSB0aGlzLl9mbGF0dGVuUGlwZXModmlldykubWFwKGZ1bmN0aW9uIChwaXBlKSB7IHJldHVybiBfdGhpcy5fYmluZFBpcGUocGlwZSk7IH0pO1xyXG4gICAgICAgICAgICBuZXN0ZWRQcm90b1ZpZXcgPSBuZXcgdmlld18xLkFwcFByb3RvVmlldyhjb21waWxlZFRlbXBsYXRlRGF0YS5jb21tYW5kcywgdmlld18xLlZpZXdUeXBlLkNPTVBPTkVOVCwgdHJ1ZSwgY29tcGlsZWRUZW1wbGF0ZURhdGEuY2hhbmdlRGV0ZWN0b3JGYWN0b3J5LCBudWxsLCBwaXBlc18xLlByb3RvUGlwZXMuZnJvbVByb3ZpZGVycyhib3VuZFBpcGVzKSk7XHJcbiAgICAgICAgICAgIC8vIE5vdGU6IFRoZSBjYWNoZSBpcyB1cGRhdGVkIGJlZm9yZSByZWN1cnNpbmdcclxuICAgICAgICAgICAgLy8gdG8gYmUgYWJsZSB0byByZXNvbHZlIGN5Y2xlc1xyXG4gICAgICAgICAgICB0aGlzLl9jYWNoZS5zZXQoY21kLnRlbXBsYXRlLmlkLCBuZXN0ZWRQcm90b1ZpZXcpO1xyXG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplUHJvdG9WaWV3KG5lc3RlZFByb3RvVmlldywgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXN0ZWRQcm90b1ZpZXc7XHJcbiAgICB9O1xyXG4gICAgUHJvdG9WaWV3RmFjdG9yeS5wcm90b3R5cGUuX2NyZWF0ZUVtYmVkZGVkVGVtcGxhdGUgPSBmdW5jdGlvbiAoY21kLCBwYXJlbnQpIHtcclxuICAgICAgICB2YXIgbmVzdGVkUHJvdG9WaWV3ID0gbmV3IHZpZXdfMS5BcHBQcm90b1ZpZXcoY21kLmNoaWxkcmVuLCB2aWV3XzEuVmlld1R5cGUuRU1CRURERUQsIGNtZC5pc01lcmdlZCwgY21kLmNoYW5nZURldGVjdG9yRmFjdG9yeSwgYXJyYXlUb01hcChjbWQudmFyaWFibGVOYW1lQW5kVmFsdWVzLCB0cnVlKSwgbmV3IHBpcGVzXzEuUHJvdG9QaXBlcyhwYXJlbnQucGlwZXMuY29uZmlnKSk7XHJcbiAgICAgICAgaWYgKGNtZC5pc01lcmdlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVQcm90b1ZpZXdJZk5lZWRlZChuZXN0ZWRQcm90b1ZpZXcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmVzdGVkUHJvdG9WaWV3O1xyXG4gICAgfTtcclxuICAgIFByb3RvVmlld0ZhY3RvcnkucHJvdG90eXBlLmluaXRpYWxpemVQcm90b1ZpZXdJZk5lZWRlZCA9IGZ1bmN0aW9uIChwcm90b1ZpZXcpIHtcclxuICAgICAgICBpZiAoIXByb3RvVmlldy5pc0luaXRpYWxpemVkKCkpIHtcclxuICAgICAgICAgICAgdmFyIHJlbmRlciA9IHRoaXMuX3JlbmRlcmVyLmNyZWF0ZVByb3RvVmlldyhwcm90b1ZpZXcudGVtcGxhdGVDbWRzKTtcclxuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZVByb3RvVmlldyhwcm90b1ZpZXcsIHJlbmRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFByb3RvVmlld0ZhY3RvcnkucHJvdG90eXBlLl9pbml0aWFsaXplUHJvdG9WaWV3ID0gZnVuY3Rpb24gKHByb3RvVmlldywgcmVuZGVyKSB7XHJcbiAgICAgICAgdmFyIGluaXRpYWxpemVyID0gbmV3IF9Qcm90b1ZpZXdJbml0aWFsaXplcihwcm90b1ZpZXcsIHRoaXMuX2RpcmVjdGl2ZVJlc29sdmVyLCB0aGlzKTtcclxuICAgICAgICB0ZW1wbGF0ZV9jb21tYW5kc18xLnZpc2l0QWxsQ29tbWFuZHMoaW5pdGlhbGl6ZXIsIHByb3RvVmlldy50ZW1wbGF0ZUNtZHMpO1xyXG4gICAgICAgIHZhciBtZXJnZUluZm8gPSBuZXcgdmlld18xLkFwcFByb3RvVmlld01lcmdlSW5mbyhpbml0aWFsaXplci5tZXJnZUVtYmVkZGVkVmlld0NvdW50LCBpbml0aWFsaXplci5tZXJnZUVsZW1lbnRDb3VudCwgaW5pdGlhbGl6ZXIubWVyZ2VWaWV3Q291bnQpO1xyXG4gICAgICAgIHByb3RvVmlldy5pbml0KHJlbmRlciwgaW5pdGlhbGl6ZXIuZWxlbWVudEJpbmRlcnMsIGluaXRpYWxpemVyLmJvdW5kVGV4dENvdW50LCBtZXJnZUluZm8sIGluaXRpYWxpemVyLnZhcmlhYmxlTG9jYXRpb25zKTtcclxuICAgIH07XHJcbiAgICBQcm90b1ZpZXdGYWN0b3J5LnByb3RvdHlwZS5fYmluZFBpcGUgPSBmdW5jdGlvbiAodHlwZU9yUHJvdmlkZXIpIHtcclxuICAgICAgICB2YXIgbWV0YSA9IHRoaXMuX3BpcGVSZXNvbHZlci5yZXNvbHZlKHR5cGVPclByb3ZpZGVyKTtcclxuICAgICAgICByZXR1cm4gcGlwZV9wcm92aWRlcl8xLlBpcGVQcm92aWRlci5jcmVhdGVGcm9tVHlwZSh0eXBlT3JQcm92aWRlciwgbWV0YSk7XHJcbiAgICB9O1xyXG4gICAgUHJvdG9WaWV3RmFjdG9yeS5wcm90b3R5cGUuX2ZsYXR0ZW5QaXBlcyA9IGZ1bmN0aW9uICh2aWV3KSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHZpZXcucGlwZXMpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFBpcGVzO1xyXG4gICAgICAgIHZhciBwaXBlcyA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jbG9uZSh0aGlzLl9kZWZhdWx0UGlwZXMpO1xyXG4gICAgICAgIF9mbGF0dGVuTGlzdCh2aWV3LnBpcGVzLCBwaXBlcyk7XHJcbiAgICAgICAgcmV0dXJuIHBpcGVzO1xyXG4gICAgfTtcclxuICAgIFByb3RvVmlld0ZhY3RvcnkgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSxcclxuICAgICAgICBfX3BhcmFtKDEsIGRpXzEuSW5qZWN0KHBpcGVzXzIuREVGQVVMVF9QSVBFU19UT0tFTikpLFxyXG4gICAgICAgIF9fcGFyYW0oNSwgZGlfMS5JbmplY3QoYXBwbGljYXRpb25fdG9rZW5zXzEuQVBQX0lEKSksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW3JlbmRlcl8xLlJlbmRlcmVyLCBBcnJheSwgZGlyZWN0aXZlX3Jlc29sdmVyXzEuRGlyZWN0aXZlUmVzb2x2ZXIsIHZpZXdfcmVzb2x2ZXJfMS5WaWV3UmVzb2x2ZXIsIHBpcGVfcmVzb2x2ZXJfMS5QaXBlUmVzb2x2ZXIsIFN0cmluZ10pXHJcbiAgICBdLCBQcm90b1ZpZXdGYWN0b3J5KTtcclxuICAgIHJldHVybiBQcm90b1ZpZXdGYWN0b3J5O1xyXG59KSgpO1xyXG5leHBvcnRzLlByb3RvVmlld0ZhY3RvcnkgPSBQcm90b1ZpZXdGYWN0b3J5O1xyXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQocHJvdG9WaWV3RmFjdG9yeSwgY21kKSB7XHJcbiAgICByZXR1cm4gcHJvdG9WaWV3RmFjdG9yeS5fY3JlYXRlQ29tcG9uZW50KGNtZCk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlRW1iZWRkZWRUZW1wbGF0ZShwcm90b1ZpZXdGYWN0b3J5LCBjbWQsIHBhcmVudCkge1xyXG4gICAgcmV0dXJuIHByb3RvVmlld0ZhY3RvcnkuX2NyZWF0ZUVtYmVkZGVkVGVtcGxhdGUoY21kLCBwYXJlbnQpO1xyXG59XHJcbnZhciBfUHJvdG9WaWV3SW5pdGlhbGl6ZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gX1Byb3RvVmlld0luaXRpYWxpemVyKF9wcm90b1ZpZXcsIF9kaXJlY3RpdmVSZXNvbHZlciwgX3Byb3RvVmlld0ZhY3RvcnkpIHtcclxuICAgICAgICB0aGlzLl9wcm90b1ZpZXcgPSBfcHJvdG9WaWV3O1xyXG4gICAgICAgIHRoaXMuX2RpcmVjdGl2ZVJlc29sdmVyID0gX2RpcmVjdGl2ZVJlc29sdmVyO1xyXG4gICAgICAgIHRoaXMuX3Byb3RvVmlld0ZhY3RvcnkgPSBfcHJvdG9WaWV3RmFjdG9yeTtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlTG9jYXRpb25zID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuYm91bmRUZXh0Q291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuYm91bmRFbGVtZW50SW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudEJpbmRlclN0YWNrID0gW107XHJcbiAgICAgICAgdGhpcy5kaXN0YW5jZVRvUGFyZW50RWxlbWVudEJpbmRlciA9IDA7XHJcbiAgICAgICAgdGhpcy5kaXN0YW5jZVRvUGFyZW50UHJvdG9FbGVtZW50SW5qZWN0b3IgPSAwO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudEJpbmRlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLm1lcmdlRW1iZWRkZWRWaWV3Q291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMubWVyZ2VFbGVtZW50Q291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMubWVyZ2VWaWV3Q291bnQgPSAxO1xyXG4gICAgfVxyXG4gICAgX1Byb3RvVmlld0luaXRpYWxpemVyLnByb3RvdHlwZS52aXNpdFRleHQgPSBmdW5jdGlvbiAoY21kLCBjb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKGNtZC5pc0JvdW5kKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYm91bmRUZXh0Q291bnQrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgX1Byb3RvVmlld0luaXRpYWxpemVyLnByb3RvdHlwZS52aXNpdE5nQ29udGVudCA9IGZ1bmN0aW9uIChjbWQsIGNvbnRleHQpIHsgcmV0dXJuIG51bGw7IH07XHJcbiAgICBfUHJvdG9WaWV3SW5pdGlhbGl6ZXIucHJvdG90eXBlLnZpc2l0QmVnaW5FbGVtZW50ID0gZnVuY3Rpb24gKGNtZCwgY29udGV4dCkge1xyXG4gICAgICAgIGlmIChjbWQuaXNCb3VuZCkge1xyXG4gICAgICAgICAgICB0aGlzLl92aXNpdEJlZ2luQm91bmRFbGVtZW50KGNtZCwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl92aXNpdEJlZ2luRWxlbWVudChjbWQsIG51bGwsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBfUHJvdG9WaWV3SW5pdGlhbGl6ZXIucHJvdG90eXBlLnZpc2l0RW5kRWxlbWVudCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7IHJldHVybiB0aGlzLl92aXNpdEVuZEVsZW1lbnQoKTsgfTtcclxuICAgIF9Qcm90b1ZpZXdJbml0aWFsaXplci5wcm90b3R5cGUudmlzaXRCZWdpbkNvbXBvbmVudCA9IGZ1bmN0aW9uIChjbWQsIGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgbmVzdGVkUHJvdG9WaWV3ID0gY3JlYXRlQ29tcG9uZW50KHRoaXMuX3Byb3RvVmlld0ZhY3RvcnksIGNtZCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2l0QmVnaW5Cb3VuZEVsZW1lbnQoY21kLCBuZXN0ZWRQcm90b1ZpZXcpO1xyXG4gICAgfTtcclxuICAgIF9Qcm90b1ZpZXdJbml0aWFsaXplci5wcm90b3R5cGUudmlzaXRFbmRDb21wb25lbnQgPSBmdW5jdGlvbiAoY29udGV4dCkgeyByZXR1cm4gdGhpcy5fdmlzaXRFbmRFbGVtZW50KCk7IH07XHJcbiAgICBfUHJvdG9WaWV3SW5pdGlhbGl6ZXIucHJvdG90eXBlLnZpc2l0RW1iZWRkZWRUZW1wbGF0ZSA9IGZ1bmN0aW9uIChjbWQsIGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgbmVzdGVkUHJvdG9WaWV3ID0gY3JlYXRlRW1iZWRkZWRUZW1wbGF0ZSh0aGlzLl9wcm90b1ZpZXdGYWN0b3J5LCBjbWQsIHRoaXMuX3Byb3RvVmlldyk7XHJcbiAgICAgICAgaWYgKGNtZC5pc01lcmdlZCkge1xyXG4gICAgICAgICAgICB0aGlzLm1lcmdlRW1iZWRkZWRWaWV3Q291bnQrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdmlzaXRCZWdpbkJvdW5kRWxlbWVudChjbWQsIG5lc3RlZFByb3RvVmlldyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2l0RW5kRWxlbWVudCgpO1xyXG4gICAgfTtcclxuICAgIF9Qcm90b1ZpZXdJbml0aWFsaXplci5wcm90b3R5cGUuX3Zpc2l0QmVnaW5Cb3VuZEVsZW1lbnQgPSBmdW5jdGlvbiAoY21kLCBuZXN0ZWRQcm90b1ZpZXcpIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChuZXN0ZWRQcm90b1ZpZXcpICYmIG5lc3RlZFByb3RvVmlldy5pc01lcmdhYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWVyZ2VFbGVtZW50Q291bnQgKz0gbmVzdGVkUHJvdG9WaWV3Lm1lcmdlSW5mby5lbGVtZW50Q291bnQ7XHJcbiAgICAgICAgICAgIHRoaXMubWVyZ2VWaWV3Q291bnQgKz0gbmVzdGVkUHJvdG9WaWV3Lm1lcmdlSW5mby52aWV3Q291bnQ7XHJcbiAgICAgICAgICAgIHRoaXMubWVyZ2VFbWJlZGRlZFZpZXdDb3VudCArPSBuZXN0ZWRQcm90b1ZpZXcubWVyZ2VJbmZvLmVtYmVkZGVkVmlld0NvdW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZWxlbWVudEJpbmRlciA9IF9jcmVhdGVFbGVtZW50QmluZGVyKHRoaXMuX2RpcmVjdGl2ZVJlc29sdmVyLCBuZXN0ZWRQcm90b1ZpZXcsIHRoaXMuZWxlbWVudEJpbmRlclN0YWNrLCB0aGlzLmJvdW5kRWxlbWVudEluZGV4LCB0aGlzLmRpc3RhbmNlVG9QYXJlbnRFbGVtZW50QmluZGVyLCB0aGlzLmRpc3RhbmNlVG9QYXJlbnRQcm90b0VsZW1lbnRJbmplY3RvciwgY21kKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnRCaW5kZXJzLnB1c2goZWxlbWVudEJpbmRlcik7XHJcbiAgICAgICAgdmFyIHByb3RvRWxlbWVudEluamVjdG9yID0gZWxlbWVudEJpbmRlci5wcm90b0VsZW1lbnRJbmplY3RvcjtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNtZC52YXJpYWJsZU5hbWVBbmRWYWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgdGhpcy52YXJpYWJsZUxvY2F0aW9ucy5zZXQoY21kLnZhcmlhYmxlTmFtZUFuZFZhbHVlc1tpXSwgdGhpcy5ib3VuZEVsZW1lbnRJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYm91bmRFbGVtZW50SW5kZXgrKztcclxuICAgICAgICB0aGlzLm1lcmdlRWxlbWVudENvdW50Kys7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2l0QmVnaW5FbGVtZW50KGNtZCwgZWxlbWVudEJpbmRlciwgcHJvdG9FbGVtZW50SW5qZWN0b3IpO1xyXG4gICAgfTtcclxuICAgIF9Qcm90b1ZpZXdJbml0aWFsaXplci5wcm90b3R5cGUuX3Zpc2l0QmVnaW5FbGVtZW50ID0gZnVuY3Rpb24gKGNtZCwgZWxlbWVudEJpbmRlciwgcHJvdG9FbGVtZW50SW5qZWN0b3IpIHtcclxuICAgICAgICB0aGlzLmRpc3RhbmNlVG9QYXJlbnRFbGVtZW50QmluZGVyID1cclxuICAgICAgICAgICAgbGFuZ18xLmlzUHJlc2VudChlbGVtZW50QmluZGVyKSA/IDEgOiB0aGlzLmRpc3RhbmNlVG9QYXJlbnRFbGVtZW50QmluZGVyICsgMTtcclxuICAgICAgICB0aGlzLmRpc3RhbmNlVG9QYXJlbnRQcm90b0VsZW1lbnRJbmplY3RvciA9XHJcbiAgICAgICAgICAgIGxhbmdfMS5pc1ByZXNlbnQocHJvdG9FbGVtZW50SW5qZWN0b3IpID8gMSA6IHRoaXMuZGlzdGFuY2VUb1BhcmVudFByb3RvRWxlbWVudEluamVjdG9yICsgMTtcclxuICAgICAgICB0aGlzLmVsZW1lbnRCaW5kZXJTdGFjay5wdXNoKGVsZW1lbnRCaW5kZXIpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIF9Qcm90b1ZpZXdJbml0aWFsaXplci5wcm90b3R5cGUuX3Zpc2l0RW5kRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcGFyZW50RWxlbWVudEJpbmRlciA9IHRoaXMuZWxlbWVudEJpbmRlclN0YWNrLnBvcCgpO1xyXG4gICAgICAgIHZhciBwYXJlbnRQcm90b0VsZW1lbnRJbmplY3RvciA9IGxhbmdfMS5pc1ByZXNlbnQocGFyZW50RWxlbWVudEJpbmRlcikgPyBwYXJlbnRFbGVtZW50QmluZGVyLnByb3RvRWxlbWVudEluamVjdG9yIDogbnVsbDtcclxuICAgICAgICB0aGlzLmRpc3RhbmNlVG9QYXJlbnRFbGVtZW50QmluZGVyID0gbGFuZ18xLmlzUHJlc2VudChwYXJlbnRFbGVtZW50QmluZGVyKSA/XHJcbiAgICAgICAgICAgIHBhcmVudEVsZW1lbnRCaW5kZXIuZGlzdGFuY2VUb1BhcmVudCA6XHJcbiAgICAgICAgICAgIHRoaXMuZGlzdGFuY2VUb1BhcmVudEVsZW1lbnRCaW5kZXIgLSAxO1xyXG4gICAgICAgIHRoaXMuZGlzdGFuY2VUb1BhcmVudFByb3RvRWxlbWVudEluamVjdG9yID0gbGFuZ18xLmlzUHJlc2VudChwYXJlbnRQcm90b0VsZW1lbnRJbmplY3RvcikgP1xyXG4gICAgICAgICAgICBwYXJlbnRQcm90b0VsZW1lbnRJbmplY3Rvci5kaXN0YW5jZVRvUGFyZW50IDpcclxuICAgICAgICAgICAgdGhpcy5kaXN0YW5jZVRvUGFyZW50UHJvdG9FbGVtZW50SW5qZWN0b3IgLSAxO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfUHJvdG9WaWV3SW5pdGlhbGl6ZXI7XHJcbn0pKCk7XHJcbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50QmluZGVyKGRpcmVjdGl2ZVJlc29sdmVyLCBuZXN0ZWRQcm90b1ZpZXcsIGVsZW1lbnRCaW5kZXJTdGFjaywgYm91bmRFbGVtZW50SW5kZXgsIGRpc3RhbmNlVG9QYXJlbnRCaW5kZXIsIGRpc3RhbmNlVG9QYXJlbnRQZWksIGJlZ2luRWxlbWVudENtZCkge1xyXG4gICAgdmFyIHBhcmVudEVsZW1lbnRCaW5kZXIgPSBudWxsO1xyXG4gICAgdmFyIHBhcmVudFByb3RvRWxlbWVudEluamVjdG9yID0gbnVsbDtcclxuICAgIGlmIChkaXN0YW5jZVRvUGFyZW50QmluZGVyID4gMCkge1xyXG4gICAgICAgIHBhcmVudEVsZW1lbnRCaW5kZXIgPSBlbGVtZW50QmluZGVyU3RhY2tbZWxlbWVudEJpbmRlclN0YWNrLmxlbmd0aCAtIGRpc3RhbmNlVG9QYXJlbnRCaW5kZXJdO1xyXG4gICAgfVxyXG4gICAgaWYgKGxhbmdfMS5pc0JsYW5rKHBhcmVudEVsZW1lbnRCaW5kZXIpKSB7XHJcbiAgICAgICAgZGlzdGFuY2VUb1BhcmVudEJpbmRlciA9IC0xO1xyXG4gICAgfVxyXG4gICAgaWYgKGRpc3RhbmNlVG9QYXJlbnRQZWkgPiAwKSB7XHJcbiAgICAgICAgdmFyIHBlaUJpbmRlciA9IGVsZW1lbnRCaW5kZXJTdGFja1tlbGVtZW50QmluZGVyU3RhY2subGVuZ3RoIC0gZGlzdGFuY2VUb1BhcmVudFBlaV07XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQocGVpQmluZGVyKSkge1xyXG4gICAgICAgICAgICBwYXJlbnRQcm90b0VsZW1lbnRJbmplY3RvciA9IHBlaUJpbmRlci5wcm90b0VsZW1lbnRJbmplY3RvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAobGFuZ18xLmlzQmxhbmsocGFyZW50UHJvdG9FbGVtZW50SW5qZWN0b3IpKSB7XHJcbiAgICAgICAgZGlzdGFuY2VUb1BhcmVudFBlaSA9IC0xO1xyXG4gICAgfVxyXG4gICAgdmFyIGNvbXBvbmVudERpcmVjdGl2ZVByb3ZpZGVyID0gbnVsbDtcclxuICAgIHZhciBpc0VtYmVkZGVkVGVtcGxhdGUgPSBmYWxzZTtcclxuICAgIHZhciBkaXJlY3RpdmVQcm92aWRlcnMgPSBiZWdpbkVsZW1lbnRDbWQuZGlyZWN0aXZlcy5tYXAoZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIHByb3ZpZGVEaXJlY3RpdmUoZGlyZWN0aXZlUmVzb2x2ZXIsIHR5cGUpOyB9KTtcclxuICAgIGlmIChiZWdpbkVsZW1lbnRDbWQgaW5zdGFuY2VvZiB0ZW1wbGF0ZV9jb21tYW5kc18xLkJlZ2luQ29tcG9uZW50Q21kKSB7XHJcbiAgICAgICAgY29tcG9uZW50RGlyZWN0aXZlUHJvdmlkZXIgPSBkaXJlY3RpdmVQcm92aWRlcnNbMF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChiZWdpbkVsZW1lbnRDbWQgaW5zdGFuY2VvZiB0ZW1wbGF0ZV9jb21tYW5kc18xLkVtYmVkZGVkVGVtcGxhdGVDbWQpIHtcclxuICAgICAgICBpc0VtYmVkZGVkVGVtcGxhdGUgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgdmFyIHByb3RvRWxlbWVudEluamVjdG9yID0gbnVsbDtcclxuICAgIC8vIENyZWF0ZSBhIHByb3RvRWxlbWVudEluamVjdG9yIGZvciBhbnkgZWxlbWVudCB0aGF0IGVpdGhlciBoYXMgYmluZGluZ3MgKm9yKiBoYXMgb25lXHJcbiAgICAvLyBvciBtb3JlIHZhci0gZGVmaW5lZCAqb3IqIGZvciA8dGVtcGxhdGU+IGVsZW1lbnRzOlxyXG4gICAgLy8gLSBFbGVtZW50cyB3aXRoIGEgdmFyLSBkZWZpbmVkIG5lZWQgYSB0aGVpciBvd24gZWxlbWVudCBpbmplY3RvclxyXG4gICAgLy8gICBzbyB0aGF0LCB3aGVuIGh5ZHJhdGluZywgJGltcGxpY2l0IGNhbiBiZSBzZXQgdG8gdGhlIGVsZW1lbnQuXHJcbiAgICAvLyAtIDx0ZW1wbGF0ZT4gZWxlbWVudHMgbmVlZCB0aGVpciBvd24gRWxlbWVudEluamVjdG9yIHNvIHRoYXQgd2UgY2FuIHF1ZXJ5IHRoZWlyIFRlbXBsYXRlUmVmXHJcbiAgICB2YXIgaGFzVmFyaWFibGVzID0gYmVnaW5FbGVtZW50Q21kLnZhcmlhYmxlTmFtZUFuZFZhbHVlcy5sZW5ndGggPiAwO1xyXG4gICAgaWYgKGRpcmVjdGl2ZVByb3ZpZGVycy5sZW5ndGggPiAwIHx8IGhhc1ZhcmlhYmxlcyB8fCBpc0VtYmVkZGVkVGVtcGxhdGUpIHtcclxuICAgICAgICB2YXIgZGlyZWN0aXZlVmFyaWFibGVCaW5kaW5ncyA9IG5ldyBNYXAoKTtcclxuICAgICAgICBpZiAoIWlzRW1iZWRkZWRUZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICBkaXJlY3RpdmVWYXJpYWJsZUJpbmRpbmdzID0gY3JlYXRlRGlyZWN0aXZlVmFyaWFibGVCaW5kaW5ncyhiZWdpbkVsZW1lbnRDbWQudmFyaWFibGVOYW1lQW5kVmFsdWVzLCBkaXJlY3RpdmVQcm92aWRlcnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcm90b0VsZW1lbnRJbmplY3RvciA9IGVsZW1lbnRfaW5qZWN0b3JfMS5Qcm90b0VsZW1lbnRJbmplY3Rvci5jcmVhdGUocGFyZW50UHJvdG9FbGVtZW50SW5qZWN0b3IsIGJvdW5kRWxlbWVudEluZGV4LCBkaXJlY3RpdmVQcm92aWRlcnMsIGxhbmdfMS5pc1ByZXNlbnQoY29tcG9uZW50RGlyZWN0aXZlUHJvdmlkZXIpLCBkaXN0YW5jZVRvUGFyZW50UGVpLCBkaXJlY3RpdmVWYXJpYWJsZUJpbmRpbmdzKTtcclxuICAgICAgICBwcm90b0VsZW1lbnRJbmplY3Rvci5hdHRyaWJ1dGVzID0gYXJyYXlUb01hcChiZWdpbkVsZW1lbnRDbWQuYXR0ck5hbWVBbmRWYWx1ZXMsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgZWxlbWVudF9iaW5kZXJfMS5FbGVtZW50QmluZGVyKGJvdW5kRWxlbWVudEluZGV4LCBwYXJlbnRFbGVtZW50QmluZGVyLCBkaXN0YW5jZVRvUGFyZW50QmluZGVyLCBwcm90b0VsZW1lbnRJbmplY3RvciwgY29tcG9uZW50RGlyZWN0aXZlUHJvdmlkZXIsIG5lc3RlZFByb3RvVmlldyk7XHJcbn1cclxuZnVuY3Rpb24gcHJvdmlkZURpcmVjdGl2ZShkaXJlY3RpdmVSZXNvbHZlciwgdHlwZSkge1xyXG4gICAgdmFyIGFubm90YXRpb24gPSBkaXJlY3RpdmVSZXNvbHZlci5yZXNvbHZlKHR5cGUpO1xyXG4gICAgcmV0dXJuIGVsZW1lbnRfaW5qZWN0b3JfMS5EaXJlY3RpdmVQcm92aWRlci5jcmVhdGVGcm9tVHlwZSh0eXBlLCBhbm5vdGF0aW9uKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVEaXJlY3RpdmVWYXJpYWJsZUJpbmRpbmdzKHZhcmlhYmxlTmFtZUFuZFZhbHVlcywgZGlyZWN0aXZlUHJvdmlkZXJzKSB7XHJcbiAgICB2YXIgZGlyZWN0aXZlVmFyaWFibGVCaW5kaW5ncyA9IG5ldyBNYXAoKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFyaWFibGVOYW1lQW5kVmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XHJcbiAgICAgICAgdmFyIHRlbXBsYXRlTmFtZSA9IHZhcmlhYmxlTmFtZUFuZFZhbHVlc1tpXTtcclxuICAgICAgICB2YXIgZGlySW5kZXggPSB2YXJpYWJsZU5hbWVBbmRWYWx1ZXNbaSArIDFdO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNOdW1iZXIoZGlySW5kZXgpKSB7XHJcbiAgICAgICAgICAgIGRpcmVjdGl2ZVZhcmlhYmxlQmluZGluZ3Muc2V0KHRlbXBsYXRlTmFtZSwgZGlySW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gYSB2YXJpYWJsZSB3aXRob3V0IGEgZGlyZWN0aXZlIGluZGV4IC0+IHJlZmVyZW5jZSB0aGUgZWxlbWVudFxyXG4gICAgICAgICAgICBkaXJlY3RpdmVWYXJpYWJsZUJpbmRpbmdzLnNldCh0ZW1wbGF0ZU5hbWUsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBkaXJlY3RpdmVWYXJpYWJsZUJpbmRpbmdzO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlRGlyZWN0aXZlVmFyaWFibGVCaW5kaW5ncyA9IGNyZWF0ZURpcmVjdGl2ZVZhcmlhYmxlQmluZGluZ3M7XHJcbmZ1bmN0aW9uIGFycmF5VG9NYXAoYXJyLCBpbnZlcnNlKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gbmV3IE1hcCgpO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDIpIHtcclxuICAgICAgICBpZiAoaW52ZXJzZSkge1xyXG4gICAgICAgICAgICByZXN1bHQuc2V0KGFycltpICsgMV0sIGFycltpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHQuc2V0KGFycltpXSwgYXJyW2kgKyAxXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBfZmxhdHRlbkxpc3QodHJlZSwgb3V0KSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgaXRlbSA9IGRpXzEucmVzb2x2ZUZvcndhcmRSZWYodHJlZVtpXSk7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0FycmF5KGl0ZW0pKSB7XHJcbiAgICAgICAgICAgIF9mbGF0dGVuTGlzdChpdGVtLCBvdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb3V0LnB1c2goaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3RvX3ZpZXdfZmFjdG9yeS5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9hc3luYycpO1xyXG4vKipcclxuICogQW4gdW5tb2RpZmlhYmxlIGxpc3Qgb2YgaXRlbXMgdGhhdCBBbmd1bGFyIGtlZXBzIHVwIHRvIGRhdGUgd2hlbiB0aGUgc3RhdGVcclxuICogb2YgdGhlIGFwcGxpY2F0aW9uIGNoYW5nZXMuXHJcbiAqXHJcbiAqIFRoZSB0eXBlIG9mIG9iamVjdCB0aGF0IHtAbGluayBRdWVyeU1ldGFkYXRhfSBhbmQge0BsaW5rIFZpZXdRdWVyeU1ldGFkYXRhfSBwcm92aWRlLlxyXG4gKlxyXG4gKiBJbXBsZW1lbnRzIGFuIGl0ZXJhYmxlIGludGVyZmFjZSwgdGhlcmVmb3JlIGl0IGNhbiBiZSB1c2VkIGluIGJvdGggRVM2XHJcbiAqIGphdmFzY3JpcHQgYGZvciAodmFyIGkgb2YgaXRlbXMpYCBsb29wcyBhcyB3ZWxsIGFzIGluIEFuZ3VsYXIgdGVtcGxhdGVzIHdpdGhcclxuICogYCpuZy1mb3I9XCIjaSBvZiBteUxpc3RcImAuXHJcbiAqXHJcbiAqIENoYW5nZXMgY2FuIGJlIG9ic2VydmVkIGJ5IHN1YnNjcmliaW5nIHRvIHRoZSBjaGFuZ2VzIGBPYnNlcnZhYmxlYC5cclxuICpcclxuICogTk9URTogSW4gdGhlIGZ1dHVyZSB0aGlzIGNsYXNzIHdpbGwgaW1wbGVtZW50IGFuIGBPYnNlcnZhYmxlYCBpbnRlcmZhY2UuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9SWDhzSm5RWWw5Rld1U0NXbWU1ej9wPXByZXZpZXcpKVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIEBDb21wb25lbnQoey4uLn0pXHJcbiAqIGNsYXNzIENvbnRhaW5lciB7XHJcbiAqICAgY29uc3RydWN0b3IoQFF1ZXJ5KEl0ZW0pIGl0ZW1zOiBRdWVyeUxpc3Q8SXRlbT4pIHtcclxuICogICAgIGl0ZW1zLmNoYW5nZXMuc3Vic2NyaWJlKF8gPT4gY29uc29sZS5sb2coaXRlbXMubGVuZ3RoKSk7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIFF1ZXJ5TGlzdCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBRdWVyeUxpc3QoKSB7XHJcbiAgICAgICAgdGhpcy5fcmVzdWx0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgYXN5bmNfMS5FdmVudEVtaXR0ZXIoKTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShRdWVyeUxpc3QucHJvdG90eXBlLCBcImNoYW5nZXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZW1pdHRlcjsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUXVlcnlMaXN0LnByb3RvdHlwZSwgXCJsZW5ndGhcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcmVzdWx0cy5sZW5ndGg7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFF1ZXJ5TGlzdC5wcm90b3R5cGUsIFwiZmlyc3RcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmZpcnN0KHRoaXMuX3Jlc3VsdHMpOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShRdWVyeUxpc3QucHJvdG90eXBlLCBcImxhc3RcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmxhc3QodGhpcy5fcmVzdWx0cyk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggdGhlIHBhc3NlZCBpbiBmdW5jdGlvbiBhcHBsaWVkIHRvIGVhY2ggZWxlbWVudC5cclxuICAgICAqL1xyXG4gICAgUXVlcnlMaXN0LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIHRoaXMuX3Jlc3VsdHMubWFwKGZuKTsgfTtcclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyBhIGZpbHRlcmVkIGFycmF5LlxyXG4gICAgICovXHJcbiAgICBRdWVyeUxpc3QucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChmbikgeyByZXR1cm4gdGhpcy5fcmVzdWx0cy5maWx0ZXIoZm4pOyB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIGEgcmVkdWNlZCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgUXVlcnlMaXN0LnByb3RvdHlwZS5yZWR1Y2UgPSBmdW5jdGlvbiAoZm4sIGluaXQpIHsgcmV0dXJuIHRoaXMuX3Jlc3VsdHMucmVkdWNlKGZuLCBpbml0KTsgfTtcclxuICAgIC8qKlxyXG4gICAgICogY29udmVydHMgUXVlcnlMaXN0IGludG8gYW4gYXJyYXlcclxuICAgICAqL1xyXG4gICAgUXVlcnlMaXN0LnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNsb25lKHRoaXMuX3Jlc3VsdHMpOyB9O1xyXG4gICAgUXVlcnlMaXN0LnByb3RvdHlwZVtsYW5nXzEuZ2V0U3ltYm9sSXRlcmF0b3IoKV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9yZXN1bHRzW2xhbmdfMS5nZXRTeW1ib2xJdGVyYXRvcigpXSgpOyB9O1xyXG4gICAgUXVlcnlMaXN0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Jlc3VsdHMudG9TdHJpbmcoKTsgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5TGlzdC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAocmVzKSB7IHRoaXMuX3Jlc3VsdHMgPSByZXM7IH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBRdWVyeUxpc3QucHJvdG90eXBlLm5vdGlmeU9uQ2hhbmdlcyA9IGZ1bmN0aW9uICgpIHsgdGhpcy5fZW1pdHRlci5uZXh0KHRoaXMpOyB9O1xyXG4gICAgcmV0dXJuIFF1ZXJ5TGlzdDtcclxufSkoKTtcclxuZXhwb3J0cy5RdWVyeUxpc3QgPSBRdWVyeUxpc3Q7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5X2xpc3QuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgX25leHRUZW1wbGF0ZUlkID0gMDtcclxuZnVuY3Rpb24gbmV4dFRlbXBsYXRlSWQoKSB7XHJcbiAgICByZXR1cm4gX25leHRUZW1wbGF0ZUlkKys7XHJcbn1cclxuZXhwb3J0cy5uZXh0VGVtcGxhdGVJZCA9IG5leHRUZW1wbGF0ZUlkO1xyXG4vKipcclxuICogQSBjb21waWxlZCBob3N0IHRlbXBsYXRlLlxyXG4gKlxyXG4gKiBUaGlzIGlzIGNvbnN0IGFzIHdlIGFyZSBzdG9yaW5nIGl0IGFzIGFubm90YXRpb25cclxuICogZm9yIHRoZSBjb21waWxlZCBjb21wb25lbnQgdHlwZS5cclxuICovXHJcbnZhciBDb21waWxlZEhvc3RUZW1wbGF0ZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBOb3RlOiBfdGVtcGxhdGVHZXR0ZXIgaXMgYSBmdW5jdGlvbiBzbyB0aGF0IENvbXBpbGVkSG9zdFRlbXBsYXRlIGNhbiBiZVxyXG4gICAgLy8gYSBjb25zdCFcclxuICAgIGZ1bmN0aW9uIENvbXBpbGVkSG9zdFRlbXBsYXRlKF90ZW1wbGF0ZUdldHRlcikge1xyXG4gICAgICAgIHRoaXMuX3RlbXBsYXRlR2V0dGVyID0gX3RlbXBsYXRlR2V0dGVyO1xyXG4gICAgfVxyXG4gICAgQ29tcGlsZWRIb3N0VGVtcGxhdGUucHJvdG90eXBlLmdldFRlbXBsYXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fdGVtcGxhdGVHZXR0ZXIoKTsgfTtcclxuICAgIENvbXBpbGVkSG9zdFRlbXBsYXRlID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW0Z1bmN0aW9uXSlcclxuICAgIF0sIENvbXBpbGVkSG9zdFRlbXBsYXRlKTtcclxuICAgIHJldHVybiBDb21waWxlZEhvc3RUZW1wbGF0ZTtcclxufSkoKTtcclxuZXhwb3J0cy5Db21waWxlZEhvc3RUZW1wbGF0ZSA9IENvbXBpbGVkSG9zdFRlbXBsYXRlO1xyXG4vKipcclxuICogQSBjb21waWxlZCB0ZW1wbGF0ZS5cclxuICovXHJcbnZhciBDb21waWxlZFRlbXBsYXRlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIE5vdGU6IHBhcmFtR2V0dGVyIGlzIGEgZnVuY3Rpb24gc28gdGhhdCB3ZSBjYW4gaGF2ZSBjeWNsZXMgYmV0d2VlbiB0ZW1wbGF0ZXMhXHJcbiAgICAvLyBwYXJhbUdldHRlciByZXR1cm5zIGEgdHVwbGUgd2l0aDpcclxuICAgIC8vIC0gQ2hhbmdlRGV0ZWN0b3IgZmFjdG9yeSBmdW5jdGlvblxyXG4gICAgLy8gLSBUZW1wbGF0ZUNtZFtdXHJcbiAgICAvLyAtIHN0eWxlc1xyXG4gICAgZnVuY3Rpb24gQ29tcGlsZWRUZW1wbGF0ZShpZCwgX2RhdGFHZXR0ZXIpIHtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgdGhpcy5fZGF0YUdldHRlciA9IF9kYXRhR2V0dGVyO1xyXG4gICAgfVxyXG4gICAgQ29tcGlsZWRUZW1wbGF0ZS5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uIChhcHBJZCkge1xyXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YUdldHRlcihhcHBJZCwgdGhpcy5pZCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlZFRlbXBsYXRlRGF0YShkYXRhWzBdLCBkYXRhWzFdLCBkYXRhWzJdKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29tcGlsZWRUZW1wbGF0ZTtcclxufSkoKTtcclxuZXhwb3J0cy5Db21waWxlZFRlbXBsYXRlID0gQ29tcGlsZWRUZW1wbGF0ZTtcclxudmFyIENvbXBpbGVkVGVtcGxhdGVEYXRhID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbXBpbGVkVGVtcGxhdGVEYXRhKGNoYW5nZURldGVjdG9yRmFjdG9yeSwgY29tbWFuZHMsIHN0eWxlcykge1xyXG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JGYWN0b3J5ID0gY2hhbmdlRGV0ZWN0b3JGYWN0b3J5O1xyXG4gICAgICAgIHRoaXMuY29tbWFuZHMgPSBjb21tYW5kcztcclxuICAgICAgICB0aGlzLnN0eWxlcyA9IHN0eWxlcztcclxuICAgIH1cclxuICAgIHJldHVybiBDb21waWxlZFRlbXBsYXRlRGF0YTtcclxufSkoKTtcclxuZXhwb3J0cy5Db21waWxlZFRlbXBsYXRlRGF0YSA9IENvbXBpbGVkVGVtcGxhdGVEYXRhO1xyXG52YXIgRU1QVFlfQVJSID0gbGFuZ18xLkNPTlNUX0VYUFIoW10pO1xyXG52YXIgVGV4dENtZCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUZXh0Q21kKHZhbHVlLCBpc0JvdW5kLCBuZ0NvbnRlbnRJbmRleCkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmlzQm91bmQgPSBpc0JvdW5kO1xyXG4gICAgICAgIHRoaXMubmdDb250ZW50SW5kZXggPSBuZ0NvbnRlbnRJbmRleDtcclxuICAgIH1cclxuICAgIFRleHRDbWQucHJvdG90eXBlLnZpc2l0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdFRleHQodGhpcywgY29udGV4dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFRleHRDbWQ7XHJcbn0pKCk7XHJcbmV4cG9ydHMuVGV4dENtZCA9IFRleHRDbWQ7XHJcbmZ1bmN0aW9uIHRleHQodmFsdWUsIGlzQm91bmQsIG5nQ29udGVudEluZGV4KSB7XHJcbiAgICByZXR1cm4gbmV3IFRleHRDbWQodmFsdWUsIGlzQm91bmQsIG5nQ29udGVudEluZGV4KTtcclxufVxyXG5leHBvcnRzLnRleHQgPSB0ZXh0O1xyXG52YXIgTmdDb250ZW50Q21kID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5nQ29udGVudENtZChpbmRleCwgbmdDb250ZW50SW5kZXgpIHtcclxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgdGhpcy5uZ0NvbnRlbnRJbmRleCA9IG5nQ29udGVudEluZGV4O1xyXG4gICAgICAgIHRoaXMuaXNCb3VuZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgTmdDb250ZW50Q21kLnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBjb250ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXROZ0NvbnRlbnQodGhpcywgY29udGV4dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE5nQ29udGVudENtZDtcclxufSkoKTtcclxuZXhwb3J0cy5OZ0NvbnRlbnRDbWQgPSBOZ0NvbnRlbnRDbWQ7XHJcbmZ1bmN0aW9uIG5nQ29udGVudChpbmRleCwgbmdDb250ZW50SW5kZXgpIHtcclxuICAgIHJldHVybiBuZXcgTmdDb250ZW50Q21kKGluZGV4LCBuZ0NvbnRlbnRJbmRleCk7XHJcbn1cclxuZXhwb3J0cy5uZ0NvbnRlbnQgPSBuZ0NvbnRlbnQ7XHJcbnZhciBCZWdpbkVsZW1lbnRDbWQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQmVnaW5FbGVtZW50Q21kKG5hbWUsIGF0dHJOYW1lQW5kVmFsdWVzLCBldmVudFRhcmdldEFuZE5hbWVzLCB2YXJpYWJsZU5hbWVBbmRWYWx1ZXMsIGRpcmVjdGl2ZXMsIGlzQm91bmQsIG5nQ29udGVudEluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmF0dHJOYW1lQW5kVmFsdWVzID0gYXR0ck5hbWVBbmRWYWx1ZXM7XHJcbiAgICAgICAgdGhpcy5ldmVudFRhcmdldEFuZE5hbWVzID0gZXZlbnRUYXJnZXRBbmROYW1lcztcclxuICAgICAgICB0aGlzLnZhcmlhYmxlTmFtZUFuZFZhbHVlcyA9IHZhcmlhYmxlTmFtZUFuZFZhbHVlcztcclxuICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzO1xyXG4gICAgICAgIHRoaXMuaXNCb3VuZCA9IGlzQm91bmQ7XHJcbiAgICAgICAgdGhpcy5uZ0NvbnRlbnRJbmRleCA9IG5nQ29udGVudEluZGV4O1xyXG4gICAgfVxyXG4gICAgQmVnaW5FbGVtZW50Q21kLnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBjb250ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRCZWdpbkVsZW1lbnQodGhpcywgY29udGV4dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEJlZ2luRWxlbWVudENtZDtcclxufSkoKTtcclxuZXhwb3J0cy5CZWdpbkVsZW1lbnRDbWQgPSBCZWdpbkVsZW1lbnRDbWQ7XHJcbmZ1bmN0aW9uIGJlZ2luRWxlbWVudChuYW1lLCBhdHRyTmFtZUFuZFZhbHVlcywgZXZlbnRUYXJnZXRBbmROYW1lcywgdmFyaWFibGVOYW1lQW5kVmFsdWVzLCBkaXJlY3RpdmVzLCBpc0JvdW5kLCBuZ0NvbnRlbnRJbmRleCkge1xyXG4gICAgcmV0dXJuIG5ldyBCZWdpbkVsZW1lbnRDbWQobmFtZSwgYXR0ck5hbWVBbmRWYWx1ZXMsIGV2ZW50VGFyZ2V0QW5kTmFtZXMsIHZhcmlhYmxlTmFtZUFuZFZhbHVlcywgZGlyZWN0aXZlcywgaXNCb3VuZCwgbmdDb250ZW50SW5kZXgpO1xyXG59XHJcbmV4cG9ydHMuYmVnaW5FbGVtZW50ID0gYmVnaW5FbGVtZW50O1xyXG52YXIgRW5kRWxlbWVudENtZCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFbmRFbGVtZW50Q21kKCkge1xyXG4gICAgfVxyXG4gICAgRW5kRWxlbWVudENtZC5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvciwgY29udGV4dCkge1xyXG4gICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0RW5kRWxlbWVudChjb250ZXh0KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRW5kRWxlbWVudENtZDtcclxufSkoKTtcclxuZXhwb3J0cy5FbmRFbGVtZW50Q21kID0gRW5kRWxlbWVudENtZDtcclxuZnVuY3Rpb24gZW5kRWxlbWVudCgpIHtcclxuICAgIHJldHVybiBuZXcgRW5kRWxlbWVudENtZCgpO1xyXG59XHJcbmV4cG9ydHMuZW5kRWxlbWVudCA9IGVuZEVsZW1lbnQ7XHJcbnZhciBCZWdpbkNvbXBvbmVudENtZCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCZWdpbkNvbXBvbmVudENtZChuYW1lLCBhdHRyTmFtZUFuZFZhbHVlcywgZXZlbnRUYXJnZXRBbmROYW1lcywgdmFyaWFibGVOYW1lQW5kVmFsdWVzLCBkaXJlY3RpdmVzLCBuYXRpdmVTaGFkb3csIG5nQ29udGVudEluZGV4LCB0ZW1wbGF0ZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5hdHRyTmFtZUFuZFZhbHVlcyA9IGF0dHJOYW1lQW5kVmFsdWVzO1xyXG4gICAgICAgIHRoaXMuZXZlbnRUYXJnZXRBbmROYW1lcyA9IGV2ZW50VGFyZ2V0QW5kTmFtZXM7XHJcbiAgICAgICAgdGhpcy52YXJpYWJsZU5hbWVBbmRWYWx1ZXMgPSB2YXJpYWJsZU5hbWVBbmRWYWx1ZXM7XHJcbiAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gZGlyZWN0aXZlcztcclxuICAgICAgICB0aGlzLm5hdGl2ZVNoYWRvdyA9IG5hdGl2ZVNoYWRvdztcclxuICAgICAgICB0aGlzLm5nQ29udGVudEluZGV4ID0gbmdDb250ZW50SW5kZXg7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xyXG4gICAgICAgIHRoaXMuaXNCb3VuZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZUlkID0gdGVtcGxhdGUuaWQ7XHJcbiAgICB9XHJcbiAgICBCZWdpbkNvbXBvbmVudENtZC5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbiAodmlzaXRvciwgY29udGV4dCkge1xyXG4gICAgICAgIHJldHVybiB2aXNpdG9yLnZpc2l0QmVnaW5Db21wb25lbnQodGhpcywgY29udGV4dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEJlZ2luQ29tcG9uZW50Q21kO1xyXG59KSgpO1xyXG5leHBvcnRzLkJlZ2luQ29tcG9uZW50Q21kID0gQmVnaW5Db21wb25lbnRDbWQ7XHJcbmZ1bmN0aW9uIGJlZ2luQ29tcG9uZW50KG5hbWUsIGF0dHJOYW1lQW5zVmFsdWVzLCBldmVudFRhcmdldEFuZE5hbWVzLCB2YXJpYWJsZU5hbWVBbmRWYWx1ZXMsIGRpcmVjdGl2ZXMsIG5hdGl2ZVNoYWRvdywgbmdDb250ZW50SW5kZXgsIHRlbXBsYXRlKSB7XHJcbiAgICByZXR1cm4gbmV3IEJlZ2luQ29tcG9uZW50Q21kKG5hbWUsIGF0dHJOYW1lQW5zVmFsdWVzLCBldmVudFRhcmdldEFuZE5hbWVzLCB2YXJpYWJsZU5hbWVBbmRWYWx1ZXMsIGRpcmVjdGl2ZXMsIG5hdGl2ZVNoYWRvdywgbmdDb250ZW50SW5kZXgsIHRlbXBsYXRlKTtcclxufVxyXG5leHBvcnRzLmJlZ2luQ29tcG9uZW50ID0gYmVnaW5Db21wb25lbnQ7XHJcbnZhciBFbmRDb21wb25lbnRDbWQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRW5kQ29tcG9uZW50Q21kKCkge1xyXG4gICAgfVxyXG4gICAgRW5kQ29tcG9uZW50Q21kLnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBjb250ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRFbmRDb21wb25lbnQoY29udGV4dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEVuZENvbXBvbmVudENtZDtcclxufSkoKTtcclxuZXhwb3J0cy5FbmRDb21wb25lbnRDbWQgPSBFbmRDb21wb25lbnRDbWQ7XHJcbmZ1bmN0aW9uIGVuZENvbXBvbmVudCgpIHtcclxuICAgIHJldHVybiBuZXcgRW5kQ29tcG9uZW50Q21kKCk7XHJcbn1cclxuZXhwb3J0cy5lbmRDb21wb25lbnQgPSBlbmRDb21wb25lbnQ7XHJcbnZhciBFbWJlZGRlZFRlbXBsYXRlQ21kID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVtYmVkZGVkVGVtcGxhdGVDbWQoYXR0ck5hbWVBbmRWYWx1ZXMsIHZhcmlhYmxlTmFtZUFuZFZhbHVlcywgZGlyZWN0aXZlcywgaXNNZXJnZWQsIG5nQ29udGVudEluZGV4LCBjaGFuZ2VEZXRlY3RvckZhY3RvcnksIGNoaWxkcmVuKSB7XHJcbiAgICAgICAgdGhpcy5hdHRyTmFtZUFuZFZhbHVlcyA9IGF0dHJOYW1lQW5kVmFsdWVzO1xyXG4gICAgICAgIHRoaXMudmFyaWFibGVOYW1lQW5kVmFsdWVzID0gdmFyaWFibGVOYW1lQW5kVmFsdWVzO1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXM7XHJcbiAgICAgICAgdGhpcy5pc01lcmdlZCA9IGlzTWVyZ2VkO1xyXG4gICAgICAgIHRoaXMubmdDb250ZW50SW5kZXggPSBuZ0NvbnRlbnRJbmRleDtcclxuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yRmFjdG9yeSA9IGNoYW5nZURldGVjdG9yRmFjdG9yeTtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgICAgICAgdGhpcy5pc0JvdW5kID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZXZlbnRUYXJnZXRBbmROYW1lcyA9IEVNUFRZX0FSUjtcclxuICAgIH1cclxuICAgIEVtYmVkZGVkVGVtcGxhdGVDbWQucHJvdG90eXBlLnZpc2l0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gdmlzaXRvci52aXNpdEVtYmVkZGVkVGVtcGxhdGUodGhpcywgY29udGV4dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEVtYmVkZGVkVGVtcGxhdGVDbWQ7XHJcbn0pKCk7XHJcbmV4cG9ydHMuRW1iZWRkZWRUZW1wbGF0ZUNtZCA9IEVtYmVkZGVkVGVtcGxhdGVDbWQ7XHJcbmZ1bmN0aW9uIGVtYmVkZGVkVGVtcGxhdGUoYXR0ck5hbWVBbmRWYWx1ZXMsIHZhcmlhYmxlTmFtZUFuZFZhbHVlcywgZGlyZWN0aXZlcywgaXNNZXJnZWQsIG5nQ29udGVudEluZGV4LCBjaGFuZ2VEZXRlY3RvckZhY3RvcnksIGNoaWxkcmVuKSB7XHJcbiAgICByZXR1cm4gbmV3IEVtYmVkZGVkVGVtcGxhdGVDbWQoYXR0ck5hbWVBbmRWYWx1ZXMsIHZhcmlhYmxlTmFtZUFuZFZhbHVlcywgZGlyZWN0aXZlcywgaXNNZXJnZWQsIG5nQ29udGVudEluZGV4LCBjaGFuZ2VEZXRlY3RvckZhY3RvcnksIGNoaWxkcmVuKTtcclxufVxyXG5leHBvcnRzLmVtYmVkZGVkVGVtcGxhdGUgPSBlbWJlZGRlZFRlbXBsYXRlO1xyXG5mdW5jdGlvbiB2aXNpdEFsbENvbW1hbmRzKHZpc2l0b3IsIGNtZHMsIGNvbnRleHQpIHtcclxuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IG51bGw7IH1cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY21kcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNtZHNbaV0udmlzaXQodmlzaXRvciwgY29udGV4dCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy52aXNpdEFsbENvbW1hbmRzID0gdmlzaXRBbGxDb21tYW5kcztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVtcGxhdGVfY29tbWFuZHMuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciB2aWV3X3JlZl8xID0gcmVxdWlyZSgnLi92aWV3X3JlZicpO1xyXG4vKipcclxuICogUmVwcmVzZW50cyBhbiBFbWJlZGRlZCBUZW1wbGF0ZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGluc3RhbnRpYXRlIEVtYmVkZGVkIFZpZXdzLlxyXG4gKlxyXG4gKiBZb3UgY2FuIGFjY2VzcyBhIGBUZW1wbGF0ZVJlZmAsIGluIHR3byB3YXlzLiBWaWEgYSBkaXJlY3RpdmUgcGxhY2VkIG9uIGEgYDx0ZW1wbGF0ZT5gIGVsZW1lbnQgKG9yXHJcbiAqIGRpcmVjdGl2ZSBwcmVmaXhlZCB3aXRoIGAqYCkgYW5kIGhhdmUgdGhlIGBUZW1wbGF0ZVJlZmAgZm9yIHRoaXMgRW1iZWRkZWQgVmlldyBpbmplY3RlZCBpbnRvIHRoZVxyXG4gKiBjb25zdHJ1Y3RvciBvZiB0aGUgZGlyZWN0aXZlIHVzaW5nIHRoZSBgVGVtcGxhdGVSZWZgIFRva2VuLiBBbHRlcm5hdGl2ZWx5IHlvdSBjYW4gcXVlcnkgZm9yIHRoZVxyXG4gKiBgVGVtcGxhdGVSZWZgIGZyb20gYSBDb21wb25lbnQgb3IgYSBEaXJlY3RpdmUgdmlhIHtAbGluayBRdWVyeX0uXHJcbiAqXHJcbiAqIFRvIGluc3RhbnRpYXRlIEVtYmVkZGVkIFZpZXdzIGJhc2VkIG9uIGEgVGVtcGxhdGUsIHVzZVxyXG4gKiB7QGxpbmsgVmlld0NvbnRhaW5lclJlZiNjcmVhdGVFbWJlZGRlZFZpZXd9LCB3aGljaCB3aWxsIGNyZWF0ZSB0aGUgVmlldyBhbmQgYXR0YWNoIGl0IHRvIHRoZVxyXG4gKiBWaWV3IENvbnRhaW5lci5cclxuICovXHJcbnZhciBUZW1wbGF0ZVJlZiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUZW1wbGF0ZVJlZigpIHtcclxuICAgIH1cclxuICAgIHJldHVybiBUZW1wbGF0ZVJlZjtcclxufSkoKTtcclxuZXhwb3J0cy5UZW1wbGF0ZVJlZiA9IFRlbXBsYXRlUmVmO1xyXG52YXIgVGVtcGxhdGVSZWZfID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhUZW1wbGF0ZVJlZl8sIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBUZW1wbGF0ZVJlZl8oZWxlbWVudFJlZikge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudFJlZiA9IGVsZW1lbnRSZWY7XHJcbiAgICB9XHJcbiAgICBUZW1wbGF0ZVJlZl8ucHJvdG90eXBlLl9nZXRQcm90b1ZpZXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnRSZWYgPSB0aGlzLmVsZW1lbnRSZWY7XHJcbiAgICAgICAgdmFyIHBhcmVudFZpZXcgPSB2aWV3X3JlZl8xLmludGVybmFsVmlldyhlbGVtZW50UmVmLnBhcmVudFZpZXcpO1xyXG4gICAgICAgIHJldHVybiBwYXJlbnRWaWV3LnByb3RvLmVsZW1lbnRCaW5kZXJzW2VsZW1lbnRSZWYuYm91bmRFbGVtZW50SW5kZXggLSBwYXJlbnRWaWV3LmVsZW1lbnRPZmZzZXRdXHJcbiAgICAgICAgICAgIC5uZXN0ZWRQcm90b1ZpZXc7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRlbXBsYXRlUmVmXy5wcm90b3R5cGUsIFwicHJvdG9WaWV3UmVmXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIFByb3RvVmlldyB1c2VkIGZvciBjcmVhdGluZyBFbWJlZGRlZCBWaWV3cyB0aGF0IGFyZSBiYXNlZCBvbiB0aGUgY29tcGlsZWRcclxuICAgICAgICAgKiBFbWJlZGRlZCBUZW1wbGF0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2dldFByb3RvVmlldygpLnJlZjsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBUZW1wbGF0ZVJlZl8ucHJvdG90eXBlLmhhc0xvY2FsID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UHJvdG9WaWV3KCkudGVtcGxhdGVWYXJpYWJsZUJpbmRpbmdzLmhhcyhuYW1lKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gVGVtcGxhdGVSZWZfO1xyXG59KShUZW1wbGF0ZVJlZik7XHJcbmV4cG9ydHMuVGVtcGxhdGVSZWZfID0gVGVtcGxhdGVSZWZfO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZV9yZWYuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgY2hhbmdlX2RldGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9jaGFuZ2VfZGV0ZWN0aW9uJyk7XHJcbnZhciBpbnRlcmZhY2VzXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uL2ludGVyZmFjZXMnKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgdmlld19yZWZfMSA9IHJlcXVpcmUoJy4vdmlld19yZWYnKTtcclxudmFyIHV0aWxfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL3JlbmRlci9kb20vdXRpbCcpO1xyXG52YXIgdmlld19yZWZfMiA9IHJlcXVpcmUoXCIuL3ZpZXdfcmVmXCIpO1xyXG52YXIgaW50ZXJmYWNlc18yID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbi9pbnRlcmZhY2VzJyk7XHJcbmV4cG9ydHMuRGVidWdDb250ZXh0ID0gaW50ZXJmYWNlc18yLkRlYnVnQ29udGV4dDtcclxudmFyIFJFRkxFQ1RfUFJFRklYID0gJ25nLXJlZmxlY3QtJztcclxuKGZ1bmN0aW9uIChWaWV3VHlwZSkge1xyXG4gICAgLy8gQSB2aWV3IHRoYXQgY29udGFpbnMgdGhlIGhvc3QgZWxlbWVudCB3aXRoIGJvdW5kIGNvbXBvbmVudCBkaXJlY3RpdmUuXHJcbiAgICAvLyBDb250YWlucyBhIENPTVBPTkVOVCB2aWV3XHJcbiAgICBWaWV3VHlwZVtWaWV3VHlwZVtcIkhPU1RcIl0gPSAwXSA9IFwiSE9TVFwiO1xyXG4gICAgLy8gVGhlIHZpZXcgb2YgdGhlIGNvbXBvbmVudFxyXG4gICAgLy8gQ2FuIGNvbnRhaW4gMCB0byBuIEVNQkVEREVEIHZpZXdzXHJcbiAgICBWaWV3VHlwZVtWaWV3VHlwZVtcIkNPTVBPTkVOVFwiXSA9IDFdID0gXCJDT01QT05FTlRcIjtcclxuICAgIC8vIEEgdmlldyB0aGF0IGlzIGVtYmVkZGVkIGludG8gYW5vdGhlciBWaWV3IHZpYSBhIDx0ZW1wbGF0ZT4gZWxlbWVudFxyXG4gICAgLy8gaW5zaWRlIG9mIGEgQ09NUE9ORU5UIHZpZXdcclxuICAgIFZpZXdUeXBlW1ZpZXdUeXBlW1wiRU1CRURERURcIl0gPSAyXSA9IFwiRU1CRURERURcIjtcclxufSkoZXhwb3J0cy5WaWV3VHlwZSB8fCAoZXhwb3J0cy5WaWV3VHlwZSA9IHt9KSk7XHJcbnZhciBWaWV3VHlwZSA9IGV4cG9ydHMuVmlld1R5cGU7XHJcbnZhciBBcHBWaWV3Q29udGFpbmVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFwcFZpZXdDb250YWluZXIoKSB7XHJcbiAgICAgICAgLy8gVGhlIG9yZGVyIGluIHRoaXMgbGlzdCBtYXRjaGVzIHRoZSBET00gb3JkZXIuXHJcbiAgICAgICAgdGhpcy52aWV3cyA9IFtdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEFwcFZpZXdDb250YWluZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQXBwVmlld0NvbnRhaW5lciA9IEFwcFZpZXdDb250YWluZXI7XHJcbi8qKlxyXG4gKiBDb3N0IG9mIG1ha2luZyBvYmplY3RzOiBodHRwOi8vanNwZXJmLmNvbS9pbnN0YW50aWF0ZS1zaXplLW9mLW9iamVjdFxyXG4gKlxyXG4gKi9cclxudmFyIEFwcFZpZXcgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXBwVmlldyhyZW5kZXJlciwgcHJvdG8sIHZpZXdPZmZzZXQsIGVsZW1lbnRPZmZzZXQsIHRleHRPZmZzZXQsIHByb3RvTG9jYWxzLCByZW5kZXIsIHJlbmRlckZyYWdtZW50LCBjb250YWluZXJFbGVtZW50SW5qZWN0b3IpIHtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICAgICAgdGhpcy5wcm90byA9IHByb3RvO1xyXG4gICAgICAgIHRoaXMudmlld09mZnNldCA9IHZpZXdPZmZzZXQ7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50T2Zmc2V0ID0gZWxlbWVudE9mZnNldDtcclxuICAgICAgICB0aGlzLnRleHRPZmZzZXQgPSB0ZXh0T2Zmc2V0O1xyXG4gICAgICAgIHRoaXMucmVuZGVyID0gcmVuZGVyO1xyXG4gICAgICAgIHRoaXMucmVuZGVyRnJhZ21lbnQgPSByZW5kZXJGcmFnbWVudDtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lckVsZW1lbnRJbmplY3RvciA9IGNvbnRhaW5lckVsZW1lbnRJbmplY3RvcjtcclxuICAgICAgICAvLyBBcHBWaWV3cyB0aGF0IGhhdmUgYmVlbiBtZXJnZWQgaW4gZGVwdGggZmlyc3Qgb3JkZXIuXHJcbiAgICAgICAgLy8gVGhpcyBsaXN0IGlzIHNoYXJlZCBiZXR3ZWVuIGFsbCBtZXJnZWQgdmlld3MuIFVzZSB0aGlzLmVsZW1lbnRPZmZzZXQgdG8gZ2V0IHRoZSBsb2NhbFxyXG4gICAgICAgIC8vIGVudHJpZXMuXHJcbiAgICAgICAgdGhpcy52aWV3cyA9IG51bGw7XHJcbiAgICAgICAgLy8gRWxlbWVudEluamVjdG9ycyBvZiBhbGwgQXBwVmlld3MgaW4gdmlld3MgZ3JvdXBlZCBieSB2aWV3LlxyXG4gICAgICAgIC8vIFRoaXMgbGlzdCBpcyBzaGFyZWQgYmV0d2VlbiBhbGwgbWVyZ2VkIHZpZXdzLiBVc2UgdGhpcy5lbGVtZW50T2Zmc2V0IHRvIGdldCB0aGUgbG9jYWxcclxuICAgICAgICAvLyBlbnRyaWVzLlxyXG4gICAgICAgIHRoaXMuZWxlbWVudEluamVjdG9ycyA9IG51bGw7XHJcbiAgICAgICAgLy8gVmlld0NvbnRhaW5lcnMgb2YgYWxsIEFwcFZpZXdzIGluIHZpZXdzIGdyb3VwZWQgYnkgdmlldy5cclxuICAgICAgICAvLyBUaGlzIGxpc3QgaXMgc2hhcmVkIGJldHdlZW4gYWxsIG1lcmdlZCB2aWV3cy4gVXNlIHRoaXMuZWxlbWVudE9mZnNldCB0byBnZXQgdGhlIGxvY2FsXHJcbiAgICAgICAgLy8gZW50cmllcy5cclxuICAgICAgICB0aGlzLnZpZXdDb250YWluZXJzID0gbnVsbDtcclxuICAgICAgICAvLyBQcmVCdWlsdE9iamVjdHMgb2YgYWxsIEFwcFZpZXdzIGluIHZpZXdzIGdyb3VwZWQgYnkgdmlldy5cclxuICAgICAgICAvLyBUaGlzIGxpc3QgaXMgc2hhcmVkIGJldHdlZW4gYWxsIG1lcmdlZCB2aWV3cy4gVXNlIHRoaXMuZWxlbWVudE9mZnNldCB0byBnZXQgdGhlIGxvY2FsXHJcbiAgICAgICAgLy8gZW50cmllcy5cclxuICAgICAgICB0aGlzLnByZUJ1aWx0T2JqZWN0cyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvciA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGNvbnRleHQgYWdhaW5zdCB3aGljaCBkYXRhLWJpbmRpbmcgZXhwcmVzc2lvbnMgaW4gdGhpcyB2aWV3IGFyZSBldmFsdWF0ZWQgYWdhaW5zdC5cclxuICAgICAgICAgKiBUaGlzIGlzIGFsd2F5cyBhIGNvbXBvbmVudCBpbnN0YW5jZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucmVmID0gbmV3IHZpZXdfcmVmXzIuVmlld1JlZl8odGhpcyk7XHJcbiAgICAgICAgdGhpcy5sb2NhbHMgPSBuZXcgY2hhbmdlX2RldGVjdGlvbl8xLkxvY2FscyhudWxsLCBjb2xsZWN0aW9uXzEuTWFwV3JhcHBlci5jbG9uZShwcm90b0xvY2FscykpOyAvLyBUT0RPIG9wdGltaXplIHRoaXNcclxuICAgIH1cclxuICAgIEFwcFZpZXcucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoY2hhbmdlRGV0ZWN0b3IsIGVsZW1lbnRJbmplY3RvcnMsIHJvb3RFbGVtZW50SW5qZWN0b3JzLCBwcmVCdWlsdE9iamVjdHMsIHZpZXdzLCBlbGVtZW50UmVmcywgdmlld0NvbnRhaW5lcnMpIHtcclxuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yID0gY2hhbmdlRGV0ZWN0b3I7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50SW5qZWN0b3JzID0gZWxlbWVudEluamVjdG9ycztcclxuICAgICAgICB0aGlzLnJvb3RFbGVtZW50SW5qZWN0b3JzID0gcm9vdEVsZW1lbnRJbmplY3RvcnM7XHJcbiAgICAgICAgdGhpcy5wcmVCdWlsdE9iamVjdHMgPSBwcmVCdWlsdE9iamVjdHM7XHJcbiAgICAgICAgdGhpcy52aWV3cyA9IHZpZXdzO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudFJlZnMgPSBlbGVtZW50UmVmcztcclxuICAgICAgICB0aGlzLnZpZXdDb250YWluZXJzID0gdmlld0NvbnRhaW5lcnM7XHJcbiAgICB9O1xyXG4gICAgQXBwVmlldy5wcm90b3R5cGUuc2V0TG9jYWwgPSBmdW5jdGlvbiAoY29udGV4dE5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmh5ZHJhdGVkKCkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbignQ2Fubm90IHNldCBsb2NhbHMgb24gZGVoeWRyYXRlZCB2aWV3LicpO1xyXG4gICAgICAgIGlmICghdGhpcy5wcm90by50ZW1wbGF0ZVZhcmlhYmxlQmluZGluZ3MuaGFzKGNvbnRleHROYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB0ZW1wbGF0ZU5hbWUgPSB0aGlzLnByb3RvLnRlbXBsYXRlVmFyaWFibGVCaW5kaW5ncy5nZXQoY29udGV4dE5hbWUpO1xyXG4gICAgICAgIHRoaXMubG9jYWxzLnNldCh0ZW1wbGF0ZU5hbWUsIHZhbHVlKTtcclxuICAgIH07XHJcbiAgICBBcHBWaWV3LnByb3RvdHlwZS5oeWRyYXRlZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQodGhpcy5jb250ZXh0KTsgfTtcclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgdGhlIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgZWxlbWVudCBhbmQgdGhlIGRpcmVjdGl2ZXMuXHJcbiAgICAgKlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgaW50ZW5kZWQgdG8gYmUgY2FsbGVkIGZyb20gZGlyZWN0aXZlIEV2ZW50RW1pdHRlcnMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxyXG4gICAgICogQHBhcmFtIHsqfSBldmVudE9ialxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJvdW5kRWxlbWVudEluZGV4XHJcbiAgICAgKi9cclxuICAgIEFwcFZpZXcucHJvdG90eXBlLnRyaWdnZXJFdmVudEhhbmRsZXJzID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZXZlbnRPYmosIGJvdW5kRWxlbWVudEluZGV4KSB7XHJcbiAgICAgICAgdmFyIGxvY2FscyA9IG5ldyBjb2xsZWN0aW9uXzEuTWFwKCk7XHJcbiAgICAgICAgbG9jYWxzLnNldCgnJGV2ZW50JywgZXZlbnRPYmopO1xyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChib3VuZEVsZW1lbnRJbmRleCwgZXZlbnROYW1lLCBsb2NhbHMpO1xyXG4gICAgfTtcclxuICAgIC8vIGRpc3BhdGNoIHRvIGVsZW1lbnQgaW5qZWN0b3Igb3IgdGV4dCBub2RlcyBiYXNlZCBvbiBjb250ZXh0XHJcbiAgICBBcHBWaWV3LnByb3RvdHlwZS5ub3RpZnlPbkJpbmRpbmcgPSBmdW5jdGlvbiAoYiwgY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgaWYgKGIuaXNUZXh0Tm9kZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0VGV4dCh0aGlzLnJlbmRlciwgYi5lbGVtZW50SW5kZXggKyB0aGlzLnRleHRPZmZzZXQsIGN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudFJlZiA9IHRoaXMuZWxlbWVudFJlZnNbdGhpcy5lbGVtZW50T2Zmc2V0ICsgYi5lbGVtZW50SW5kZXhdO1xyXG4gICAgICAgICAgICBpZiAoYi5pc0VsZW1lbnRQcm9wZXJ0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEVsZW1lbnRQcm9wZXJ0eShlbGVtZW50UmVmLCBiLm5hbWUsIGN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoYi5pc0VsZW1lbnRBdHRyaWJ1dGUoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRFbGVtZW50QXR0cmlidXRlKGVsZW1lbnRSZWYsIGIubmFtZSwgbGFuZ18xLmlzUHJlc2VudChjdXJyZW50VmFsdWUpID8gXCJcIiArIGN1cnJlbnRWYWx1ZSA6IG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGIuaXNFbGVtZW50Q2xhc3MoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRFbGVtZW50Q2xhc3MoZWxlbWVudFJlZiwgYi5uYW1lLCBjdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGIuaXNFbGVtZW50U3R5bGUoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHVuaXQgPSBsYW5nXzEuaXNQcmVzZW50KGIudW5pdCkgPyBiLnVuaXQgOiAnJztcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0RWxlbWVudFN0eWxlKGVsZW1lbnRSZWYsIGIubmFtZSwgXCJcIiArIGN1cnJlbnRWYWx1ZSArIHVuaXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKCdVbnN1cHBvcnRlZCBkaXJlY3RpdmUgcmVjb3JkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQXBwVmlldy5wcm90b3R5cGUubG9nQmluZGluZ1VwZGF0ZSA9IGZ1bmN0aW9uIChiLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmIChiLmlzRGlyZWN0aXZlKCkgfHwgYi5pc0VsZW1lbnRQcm9wZXJ0eSgpKSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50UmVmID0gdGhpcy5lbGVtZW50UmVmc1t0aGlzLmVsZW1lbnRPZmZzZXQgKyBiLmVsZW1lbnRJbmRleF07XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0RWxlbWVudEF0dHJpYnV0ZShlbGVtZW50UmVmLCBcIlwiICsgUkVGTEVDVF9QUkVGSVggKyB1dGlsXzEuY2FtZWxDYXNlVG9EYXNoQ2FzZShiLm5hbWUpLCBcIlwiICsgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBcHBWaWV3LnByb3RvdHlwZS5ub3RpZnlBZnRlckNvbnRlbnRDaGVja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlaUNvdW50ID0gdGhpcy5wcm90by5lbGVtZW50QmluZGVycy5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGVpID0gdGhpcy5lbGVtZW50SW5qZWN0b3JzO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSBlaUNvdW50IC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoZWlbaSArIHRoaXMuZWxlbWVudE9mZnNldF0pKVxyXG4gICAgICAgICAgICAgICAgZWlbaSArIHRoaXMuZWxlbWVudE9mZnNldF0uYWZ0ZXJDb250ZW50Q2hlY2tlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBcHBWaWV3LnByb3RvdHlwZS5ub3RpZnlBZnRlclZpZXdDaGVja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlaUNvdW50ID0gdGhpcy5wcm90by5lbGVtZW50QmluZGVycy5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGVpID0gdGhpcy5lbGVtZW50SW5qZWN0b3JzO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSBlaUNvdW50IC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoZWlbaSArIHRoaXMuZWxlbWVudE9mZnNldF0pKVxyXG4gICAgICAgICAgICAgICAgZWlbaSArIHRoaXMuZWxlbWVudE9mZnNldF0uYWZ0ZXJWaWV3Q2hlY2tlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBcHBWaWV3LnByb3RvdHlwZS5nZXREaXJlY3RpdmVGb3IgPSBmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnRJbmplY3RvciA9IHRoaXMuZWxlbWVudEluamVjdG9yc1t0aGlzLmVsZW1lbnRPZmZzZXQgKyBkaXJlY3RpdmUuZWxlbWVudEluZGV4XTtcclxuICAgICAgICByZXR1cm4gZWxlbWVudEluamVjdG9yLmdldERpcmVjdGl2ZUF0SW5kZXgoZGlyZWN0aXZlLmRpcmVjdGl2ZUluZGV4KTtcclxuICAgIH07XHJcbiAgICBBcHBWaWV3LnByb3RvdHlwZS5nZXROZXN0ZWRWaWV3ID0gZnVuY3Rpb24gKGJvdW5kRWxlbWVudEluZGV4KSB7XHJcbiAgICAgICAgdmFyIGVsaSA9IHRoaXMuZWxlbWVudEluamVjdG9yc1tib3VuZEVsZW1lbnRJbmRleF07XHJcbiAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQoZWxpKSA/IGVsaS5nZXROZXN0ZWRWaWV3KCkgOiBudWxsO1xyXG4gICAgfTtcclxuICAgIEFwcFZpZXcucHJvdG90eXBlLmdldENvbnRhaW5lckVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQodGhpcy5jb250YWluZXJFbGVtZW50SW5qZWN0b3IpID9cclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbGVtZW50SW5qZWN0b3IuZ2V0RWxlbWVudFJlZigpIDpcclxuICAgICAgICAgICAgbnVsbDtcclxuICAgIH07XHJcbiAgICBBcHBWaWV3LnByb3RvdHlwZS5nZXREZWJ1Z0NvbnRleHQgPSBmdW5jdGlvbiAoZWxlbWVudEluZGV4LCBkaXJlY3RpdmVJbmRleCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBvZmZzZXR0ZWRJbmRleCA9IHRoaXMuZWxlbWVudE9mZnNldCArIGVsZW1lbnRJbmRleDtcclxuICAgICAgICAgICAgdmFyIGhhc1JlZkZvckluZGV4ID0gb2Zmc2V0dGVkSW5kZXggPCB0aGlzLmVsZW1lbnRSZWZzLmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnRSZWYgPSBoYXNSZWZGb3JJbmRleCA/IHRoaXMuZWxlbWVudFJlZnNbdGhpcy5lbGVtZW50T2Zmc2V0ICsgZWxlbWVudEluZGV4XSA6IG51bGw7XHJcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmdldENvbnRhaW5lckVsZW1lbnQoKTtcclxuICAgICAgICAgICAgdmFyIGVpID0gaGFzUmVmRm9ySW5kZXggPyB0aGlzLmVsZW1lbnRJbmplY3RvcnNbdGhpcy5lbGVtZW50T2Zmc2V0ICsgZWxlbWVudEluZGV4XSA6IG51bGw7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gbGFuZ18xLmlzUHJlc2VudChlbGVtZW50UmVmKSA/IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCA6IG51bGw7XHJcbiAgICAgICAgICAgIHZhciBjb21wb25lbnRFbGVtZW50ID0gbGFuZ18xLmlzUHJlc2VudChjb250YWluZXIpID8gY29udGFpbmVyLm5hdGl2ZUVsZW1lbnQgOiBudWxsO1xyXG4gICAgICAgICAgICB2YXIgZGlyZWN0aXZlID0gbGFuZ18xLmlzUHJlc2VudChkaXJlY3RpdmVJbmRleCkgPyB0aGlzLmdldERpcmVjdGl2ZUZvcihkaXJlY3RpdmVJbmRleCkgOiBudWxsO1xyXG4gICAgICAgICAgICB2YXIgaW5qZWN0b3IgPSBsYW5nXzEuaXNQcmVzZW50KGVpKSA/IGVpLmdldEluamVjdG9yKCkgOiBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGludGVyZmFjZXNfMS5EZWJ1Z0NvbnRleHQoZWxlbWVudCwgY29tcG9uZW50RWxlbWVudCwgZGlyZWN0aXZlLCB0aGlzLmNvbnRleHQsIF9sb2NhbHNUb1N0cmluZ01hcCh0aGlzLmxvY2FscyksIGluamVjdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgLy8gVE9ETzogdnNhdmtpbiBsb2cgdGhlIGV4Y2VwdGlvbiBvbmNlIHdlIGhhdmUgYSBnb29kIHdheSB0byBsb2cgZXJyb3JzIGFuZCB3YXJuaW5nc1xyXG4gICAgICAgICAgICAvLyBpZiBhbiBlcnJvciBoYXBwZW5zIGR1cmluZyBnZXR0aW5nIHRoZSBkZWJ1ZyBjb250ZXh0LCB3ZSByZXR1cm4gbnVsbC5cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFwcFZpZXcucHJvdG90eXBlLmdldERldGVjdG9yRm9yID0gZnVuY3Rpb24gKGRpcmVjdGl2ZSkge1xyXG4gICAgICAgIHZhciBjaGlsZFZpZXcgPSB0aGlzLmdldE5lc3RlZFZpZXcodGhpcy5lbGVtZW50T2Zmc2V0ICsgZGlyZWN0aXZlLmVsZW1lbnRJbmRleCk7XHJcbiAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQoY2hpbGRWaWV3KSA/IGNoaWxkVmlldy5jaGFuZ2VEZXRlY3RvciA6IG51bGw7XHJcbiAgICB9O1xyXG4gICAgQXBwVmlldy5wcm90b3R5cGUuaW52b2tlRWxlbWVudE1ldGhvZCA9IGZ1bmN0aW9uIChlbGVtZW50SW5kZXgsIG1ldGhvZE5hbWUsIGFyZ3MpIHtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLmludm9rZUVsZW1lbnRNZXRob2QodGhpcy5lbGVtZW50UmVmc1tlbGVtZW50SW5kZXhdLCBtZXRob2ROYW1lLCBhcmdzKTtcclxuICAgIH07XHJcbiAgICAvLyBpbXBsZW1lbnRhdGlvbiBvZiBSZW5kZXJFdmVudERpc3BhdGNoZXIjZGlzcGF0Y2hSZW5kZXJFdmVudFxyXG4gICAgQXBwVmlldy5wcm90b3R5cGUuZGlzcGF0Y2hSZW5kZXJFdmVudCA9IGZ1bmN0aW9uIChib3VuZEVsZW1lbnRJbmRleCwgZXZlbnROYW1lLCBsb2NhbHMpIHtcclxuICAgICAgICB2YXIgZWxlbWVudFJlZiA9IHRoaXMuZWxlbWVudFJlZnNbYm91bmRFbGVtZW50SW5kZXhdO1xyXG4gICAgICAgIHZhciB2aWV3ID0gdmlld19yZWZfMS5pbnRlcm5hbFZpZXcoZWxlbWVudFJlZi5wYXJlbnRWaWV3KTtcclxuICAgICAgICByZXR1cm4gdmlldy5kaXNwYXRjaEV2ZW50KGVsZW1lbnRSZWYuYm91bmRFbGVtZW50SW5kZXgsIGV2ZW50TmFtZSwgbG9jYWxzKTtcclxuICAgIH07XHJcbiAgICAvLyByZXR1cm5zIGZhbHNlIGlmIHByZXZlbnREZWZhdWx0IG11c3QgYmUgYXBwbGllZCB0byB0aGUgRE9NIGV2ZW50XHJcbiAgICBBcHBWaWV3LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24gKGJvdW5kRWxlbWVudEluZGV4LCBldmVudE5hbWUsIGxvY2Fscykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmh5ZHJhdGVkKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5jaGFuZ2VEZXRlY3Rvci5oYW5kbGVFdmVudChldmVudE5hbWUsIGJvdW5kRWxlbWVudEluZGV4IC0gdGhpcy5lbGVtZW50T2Zmc2V0LCBuZXcgY2hhbmdlX2RldGVjdGlvbl8xLkxvY2Fscyh0aGlzLmxvY2FscywgbG9jYWxzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB2YXIgYyA9IHRoaXMuZ2V0RGVidWdDb250ZXh0KGJvdW5kRWxlbWVudEluZGV4IC0gdGhpcy5lbGVtZW50T2Zmc2V0LCBudWxsKTtcclxuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBsYW5nXzEuaXNQcmVzZW50KGMpID8gbmV3IF9Db250ZXh0KGMuZWxlbWVudCwgYy5jb21wb25lbnRFbGVtZW50LCBjLmNvbnRleHQsIGMubG9jYWxzLCBjLmluamVjdG9yKSA6XHJcbiAgICAgICAgICAgICAgICBudWxsO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXZlbnRFdmFsdWF0aW9uRXJyb3IoZXZlbnROYW1lLCBlLCBlLnN0YWNrLCBjb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFwcFZpZXcucHJvdG90eXBlLCBcIm93bkJpbmRlcnNDb3VudFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnByb3RvLmVsZW1lbnRCaW5kZXJzLmxlbmd0aDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gQXBwVmlldztcclxufSkoKTtcclxuZXhwb3J0cy5BcHBWaWV3ID0gQXBwVmlldztcclxuZnVuY3Rpb24gX2xvY2Fsc1RvU3RyaW5nTWFwKGxvY2Fscykge1xyXG4gICAgdmFyIHJlcyA9IHt9O1xyXG4gICAgdmFyIGMgPSBsb2NhbHM7XHJcbiAgICB3aGlsZSAobGFuZ18xLmlzUHJlc2VudChjKSkge1xyXG4gICAgICAgIHJlcyA9IGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLm1lcmdlKHJlcywgY29sbGVjdGlvbl8xLk1hcFdyYXBwZXIudG9TdHJpbmdNYXAoYy5jdXJyZW50KSk7XHJcbiAgICAgICAgYyA9IGMucGFyZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG4vKipcclxuICogRXJyb3IgY29udGV4dCBpbmNsdWRlZCB3aGVuIGFuIGV2ZW50IGhhbmRsZXIgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cclxuICovXHJcbnZhciBfQ29udGV4dCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBfQ29udGV4dChlbGVtZW50LCBjb21wb25lbnRFbGVtZW50LCBjb250ZXh0LCBsb2NhbHMsIGluamVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB0aGlzLmNvbXBvbmVudEVsZW1lbnQgPSBjb21wb25lbnRFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5sb2NhbHMgPSBsb2NhbHM7XHJcbiAgICAgICAgdGhpcy5pbmplY3RvciA9IGluamVjdG9yO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9Db250ZXh0O1xyXG59KSgpO1xyXG4vKipcclxuICogV3JhcHMgYW4gZXhjZXB0aW9uIHRocm93biBieSBhbiBldmVudCBoYW5kbGVyLlxyXG4gKi9cclxudmFyIEV2ZW50RXZhbHVhdGlvbkVycm9yID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhFdmVudEV2YWx1YXRpb25FcnJvciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEV2ZW50RXZhbHVhdGlvbkVycm9yKGV2ZW50TmFtZSwgb3JpZ2luYWxFeGNlcHRpb24sIG9yaWdpbmFsU3RhY2ssIGNvbnRleHQpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBcIkVycm9yIGR1cmluZyBldmFsdWF0aW9uIG9mIFxcXCJcIiArIGV2ZW50TmFtZSArIFwiXFxcIlwiLCBvcmlnaW5hbEV4Y2VwdGlvbiwgb3JpZ2luYWxTdGFjaywgY29udGV4dCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRXZlbnRFdmFsdWF0aW9uRXJyb3I7XHJcbn0pKGV4Y2VwdGlvbnNfMS5XcmFwcGVkRXhjZXB0aW9uKTtcclxudmFyIEFwcFByb3RvVmlld01lcmdlSW5mbyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBcHBQcm90b1ZpZXdNZXJnZUluZm8oZW1iZWRkZWRWaWV3Q291bnQsIGVsZW1lbnRDb3VudCwgdmlld0NvdW50KSB7XHJcbiAgICAgICAgdGhpcy5lbWJlZGRlZFZpZXdDb3VudCA9IGVtYmVkZGVkVmlld0NvdW50O1xyXG4gICAgICAgIHRoaXMuZWxlbWVudENvdW50ID0gZWxlbWVudENvdW50O1xyXG4gICAgICAgIHRoaXMudmlld0NvdW50ID0gdmlld0NvdW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEFwcFByb3RvVmlld01lcmdlSW5mbztcclxufSkoKTtcclxuZXhwb3J0cy5BcHBQcm90b1ZpZXdNZXJnZUluZm8gPSBBcHBQcm90b1ZpZXdNZXJnZUluZm87XHJcbi8qKlxyXG4gKlxyXG4gKi9cclxudmFyIEFwcFByb3RvVmlldyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBcHBQcm90b1ZpZXcodGVtcGxhdGVDbWRzLCB0eXBlLCBpc01lcmdhYmxlLCBjaGFuZ2VEZXRlY3RvckZhY3RvcnksIHRlbXBsYXRlVmFyaWFibGVCaW5kaW5ncywgcGlwZXMpIHtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlQ21kcyA9IHRlbXBsYXRlQ21kcztcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMuaXNNZXJnYWJsZSA9IGlzTWVyZ2FibGU7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvckZhY3RvcnkgPSBjaGFuZ2VEZXRlY3RvckZhY3Rvcnk7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVZhcmlhYmxlQmluZGluZ3MgPSB0ZW1wbGF0ZVZhcmlhYmxlQmluZGluZ3M7XHJcbiAgICAgICAgdGhpcy5waXBlcyA9IHBpcGVzO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudEJpbmRlcnMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubWVyZ2VJbmZvID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlTG9jYXRpb25zID0gbnVsbDtcclxuICAgICAgICB0aGlzLnRleHRCaW5kaW5nQ291bnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucmVuZGVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLnJlZiA9IG5ldyB2aWV3X3JlZl8yLlByb3RvVmlld1JlZl8odGhpcyk7XHJcbiAgICB9XHJcbiAgICBBcHBQcm90b1ZpZXcucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAocmVuZGVyLCBlbGVtZW50QmluZGVycywgdGV4dEJpbmRpbmdDb3VudCwgbWVyZ2VJbmZvLCB2YXJpYWJsZUxvY2F0aW9ucykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIgPSByZW5kZXI7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50QmluZGVycyA9IGVsZW1lbnRCaW5kZXJzO1xyXG4gICAgICAgIHRoaXMudGV4dEJpbmRpbmdDb3VudCA9IHRleHRCaW5kaW5nQ291bnQ7XHJcbiAgICAgICAgdGhpcy5tZXJnZUluZm8gPSBtZXJnZUluZm87XHJcbiAgICAgICAgdGhpcy52YXJpYWJsZUxvY2F0aW9ucyA9IHZhcmlhYmxlTG9jYXRpb25zO1xyXG4gICAgICAgIHRoaXMucHJvdG9Mb2NhbHMgPSBuZXcgY29sbGVjdGlvbl8xLk1hcCgpO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRoaXMudGVtcGxhdGVWYXJpYWJsZUJpbmRpbmdzKSkge1xyXG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlVmFyaWFibGVCaW5kaW5ncy5mb3JFYWNoKGZ1bmN0aW9uICh0ZW1wbGF0ZU5hbWUsIF8pIHsgX3RoaXMucHJvdG9Mb2NhbHMuc2V0KHRlbXBsYXRlTmFtZSwgbnVsbCk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh2YXJpYWJsZUxvY2F0aW9ucykpIHtcclxuICAgICAgICAgICAgLy8gVGhlIHZpZXcncyBsb2NhbHMgbmVlZHMgdG8gaGF2ZSBhIGZ1bGwgc2V0IG9mIHZhcmlhYmxlIG5hbWVzIGF0IGNvbnN0cnVjdGlvbiB0aW1lXHJcbiAgICAgICAgICAgIC8vIGluIG9yZGVyIHRvIHByZXZlbnQgbmV3IHZhcmlhYmxlcyBmcm9tIGJlaW5nIHNldCBsYXRlciBpbiB0aGUgbGlmZWN5Y2xlLiBTaW5jZSB3ZSBkb24ndFxyXG4gICAgICAgICAgICAvLyB3YW50XHJcbiAgICAgICAgICAgIC8vIHRvIGFjdHVhbGx5IGNyZWF0ZSB2YXJpYWJsZSBiaW5kaW5ncyBmb3IgdGhlICRpbXBsaWNpdCBiaW5kaW5ncywgYWRkIHRvIHRoZVxyXG4gICAgICAgICAgICAvLyBwcm90b0xvY2FscyBtYW51YWxseS5cclxuICAgICAgICAgICAgdmFyaWFibGVMb2NhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoXywgdGVtcGxhdGVOYW1lKSB7IF90aGlzLnByb3RvTG9jYWxzLnNldCh0ZW1wbGF0ZU5hbWUsIG51bGwpOyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQXBwUHJvdG9WaWV3LnByb3RvdHlwZS5pc0luaXRpYWxpemVkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbGFuZ18xLmlzUHJlc2VudCh0aGlzLmVsZW1lbnRCaW5kZXJzKTsgfTtcclxuICAgIHJldHVybiBBcHBQcm90b1ZpZXc7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQXBwUHJvdG9WaWV3ID0gQXBwUHJvdG9WaWV3O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWV3LmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgdmlld19yZWZfMSA9IHJlcXVpcmUoJy4vdmlld19yZWYnKTtcclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBjb250YWluZXIgd2hlcmUgb25lIG9yIG1vcmUgVmlld3MgY2FuIGJlIGF0dGFjaGVkLlxyXG4gKlxyXG4gKiBUaGUgY29udGFpbmVyIGNhbiBjb250YWluIHR3byBraW5kcyBvZiBWaWV3cy4gSG9zdCBWaWV3cywgY3JlYXRlZCBieSBpbnN0YW50aWF0aW5nIGFcclxuICoge0BsaW5rIENvbXBvbmVudH0gdmlhIHtAbGluayAjY3JlYXRlSG9zdFZpZXd9LCBhbmQgRW1iZWRkZWQgVmlld3MsIGNyZWF0ZWQgYnkgaW5zdGFudGlhdGluZyBhblxyXG4gKiB7QGxpbmsgVGVtcGxhdGVSZWYgRW1iZWRkZWQgVGVtcGxhdGV9IHZpYSB7QGxpbmsgI2NyZWF0ZUVtYmVkZGVkVmlld30uXHJcbiAqXHJcbiAqIFRoZSBsb2NhdGlvbiBvZiB0aGUgVmlldyBDb250YWluZXIgd2l0aGluIHRoZSBjb250YWluaW5nIFZpZXcgaXMgc3BlY2lmaWVkIGJ5IHRoZSBBbmNob3JcclxuICogYGVsZW1lbnRgLiBFYWNoIFZpZXcgQ29udGFpbmVyIGNhbiBoYXZlIG9ubHkgb25lIEFuY2hvciBFbGVtZW50IGFuZCBlYWNoIEFuY2hvciBFbGVtZW50IGNhbiBvbmx5XHJcbiAqIGhhdmUgYSBzaW5nbGUgVmlldyBDb250YWluZXIuXHJcbiAqXHJcbiAqIFJvb3QgZWxlbWVudHMgb2YgVmlld3MgYXR0YWNoZWQgdG8gdGhpcyBjb250YWluZXIgYmVjb21lIHNpYmxpbmdzIG9mIHRoZSBBbmNob3IgRWxlbWVudCBpblxyXG4gKiB0aGUgUmVuZGVyZWQgVmlldy5cclxuICpcclxuICogVG8gYWNjZXNzIGEgYFZpZXdDb250YWluZXJSZWZgIG9mIGFuIEVsZW1lbnQsIHlvdSBjYW4gZWl0aGVyIHBsYWNlIGEge0BsaW5rIERpcmVjdGl2ZX0gaW5qZWN0ZWRcclxuICogd2l0aCBgVmlld0NvbnRhaW5lclJlZmAgb24gdGhlIEVsZW1lbnQsIG9yIHlvdSBvYnRhaW4gaXQgdmlhXHJcbiAqIHtAbGluayBBcHBWaWV3TWFuYWdlciNnZXRWaWV3Q29udGFpbmVyfS5cclxuICpcclxuICogPCEtLSBUT0RPKGkpOiB3ZSBhcmUgYWxzbyBjb25zaWRlcmluZyBFbGVtZW50UmVmI3ZpZXdDb250YWluZXIgYXBpIC0tPlxyXG4gKi9cclxudmFyIFZpZXdDb250YWluZXJSZWYgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVmlld0NvbnRhaW5lclJlZigpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGVzdHJveXMgYWxsIFZpZXdzIGluIHRoaXMgY29udGFpbmVyLlxyXG4gICAgICovXHJcbiAgICBWaWV3Q29udGFpbmVyUmVmLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZShpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpZXdDb250YWluZXJSZWYucHJvdG90eXBlLCBcImxlbmd0aFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIFZpZXdzIGN1cnJlbnRseSBhdHRhY2hlZCB0byB0aGlzIGNvbnRhaW5lci5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4Y2VwdGlvbnNfMS51bmltcGxlbWVudGVkKCk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgO1xyXG4gICAgcmV0dXJuIFZpZXdDb250YWluZXJSZWY7XHJcbn0pKCk7XHJcbmV4cG9ydHMuVmlld0NvbnRhaW5lclJlZiA9IFZpZXdDb250YWluZXJSZWY7XHJcbnZhciBWaWV3Q29udGFpbmVyUmVmXyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoVmlld0NvbnRhaW5lclJlZl8sIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBWaWV3Q29udGFpbmVyUmVmXyh2aWV3TWFuYWdlciwgZWxlbWVudCkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMudmlld01hbmFnZXIgPSB2aWV3TWFuYWdlcjtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgfVxyXG4gICAgVmlld0NvbnRhaW5lclJlZl8ucHJvdG90eXBlLl9nZXRWaWV3cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcclxuICAgICAgICB2YXIgdmMgPSB2aWV3X3JlZl8xLmludGVybmFsVmlldyhlbGVtZW50LnBhcmVudFZpZXcpLnZpZXdDb250YWluZXJzW2VsZW1lbnQuYm91bmRFbGVtZW50SW5kZXhdO1xyXG4gICAgICAgIHJldHVybiBsYW5nXzEuaXNQcmVzZW50KHZjKSA/IHZjLnZpZXdzIDogW107XHJcbiAgICB9O1xyXG4gICAgVmlld0NvbnRhaW5lclJlZl8ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gdGhpcy5fZ2V0Vmlld3MoKVtpbmRleF0ucmVmOyB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpZXdDb250YWluZXJSZWZfLnByb3RvdHlwZSwgXCJsZW5ndGhcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZ2V0Vmlld3MoKS5sZW5ndGg7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLy8gVE9ETyhyYWRvKTogcHJvZmlsZSBhbmQgZGVjaWRlIHdoZXRoZXIgYm91bmRzIGNoZWNrcyBzaG91bGQgYmUgYWRkZWRcclxuICAgIC8vIHRvIHRoZSBtZXRob2RzIGJlbG93LlxyXG4gICAgVmlld0NvbnRhaW5lclJlZl8ucHJvdG90eXBlLmNyZWF0ZUVtYmVkZGVkVmlldyA9IGZ1bmN0aW9uICh0ZW1wbGF0ZVJlZiwgaW5kZXgpIHtcclxuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkgeyBpbmRleCA9IC0xOyB9XHJcbiAgICAgICAgaWYgKGluZGV4ID09IC0xKVxyXG4gICAgICAgICAgICBpbmRleCA9IHRoaXMubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdNYW5hZ2VyLmNyZWF0ZUVtYmVkZGVkVmlld0luQ29udGFpbmVyKHRoaXMuZWxlbWVudCwgaW5kZXgsIHRlbXBsYXRlUmVmKTtcclxuICAgIH07XHJcbiAgICBWaWV3Q29udGFpbmVyUmVmXy5wcm90b3R5cGUuY3JlYXRlSG9zdFZpZXcgPSBmdW5jdGlvbiAocHJvdG9WaWV3UmVmLCBpbmRleCwgZHluYW1pY2FsbHlDcmVhdGVkUHJvdmlkZXJzKSB7XHJcbiAgICAgICAgaWYgKHByb3RvVmlld1JlZiA9PT0gdm9pZCAwKSB7IHByb3RvVmlld1JlZiA9IG51bGw7IH1cclxuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkgeyBpbmRleCA9IC0xOyB9XHJcbiAgICAgICAgaWYgKGR5bmFtaWNhbGx5Q3JlYXRlZFByb3ZpZGVycyA9PT0gdm9pZCAwKSB7IGR5bmFtaWNhbGx5Q3JlYXRlZFByb3ZpZGVycyA9IG51bGw7IH1cclxuICAgICAgICBpZiAoaW5kZXggPT0gLTEpXHJcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5sZW5ndGg7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld01hbmFnZXIuY3JlYXRlSG9zdFZpZXdJbkNvbnRhaW5lcih0aGlzLmVsZW1lbnQsIGluZGV4LCBwcm90b1ZpZXdSZWYsIGR5bmFtaWNhbGx5Q3JlYXRlZFByb3ZpZGVycyk7XHJcbiAgICB9O1xyXG4gICAgLy8gVE9ETyhpKTogcmVmYWN0b3IgaW5zZXJ0K3JlbW92ZSBpbnRvIG1vdmVcclxuICAgIFZpZXdDb250YWluZXJSZWZfLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbiAodmlld1JlZiwgaW5kZXgpIHtcclxuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkgeyBpbmRleCA9IC0xOyB9XHJcbiAgICAgICAgaWYgKGluZGV4ID09IC0xKVxyXG4gICAgICAgICAgICBpbmRleCA9IHRoaXMubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdNYW5hZ2VyLmF0dGFjaFZpZXdJbkNvbnRhaW5lcih0aGlzLmVsZW1lbnQsIGluZGV4LCB2aWV3UmVmKTtcclxuICAgIH07XHJcbiAgICBWaWV3Q29udGFpbmVyUmVmXy5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uICh2aWV3UmVmKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5pbmRleE9mKHRoaXMuX2dldFZpZXdzKCksIHZpZXdfcmVmXzEuaW50ZXJuYWxWaWV3KHZpZXdSZWYpKTtcclxuICAgIH07XHJcbiAgICAvLyBUT0RPKGkpOiByZW5hbWUgdG8gZGVzdHJveVxyXG4gICAgVmlld0NvbnRhaW5lclJlZl8ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7IGluZGV4ID0gLTE7IH1cclxuICAgICAgICBpZiAoaW5kZXggPT0gLTEpXHJcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5sZW5ndGggLSAxO1xyXG4gICAgICAgIHRoaXMudmlld01hbmFnZXIuZGVzdHJveVZpZXdJbkNvbnRhaW5lcih0aGlzLmVsZW1lbnQsIGluZGV4KTtcclxuICAgICAgICAvLyB2aWV3IGlzIGludGVudGlvbmFsbHkgbm90IHJldHVybmVkIHRvIHRoZSBjbGllbnQuXHJcbiAgICB9O1xyXG4gICAgLy8gVE9ETyhpKTogcmVmYWN0b3IgaW5zZXJ0K3JlbW92ZSBpbnRvIG1vdmVcclxuICAgIFZpZXdDb250YWluZXJSZWZfLnByb3RvdHlwZS5kZXRhY2ggPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkgeyBpbmRleCA9IC0xOyB9XHJcbiAgICAgICAgaWYgKGluZGV4ID09IC0xKVxyXG4gICAgICAgICAgICBpbmRleCA9IHRoaXMubGVuZ3RoIC0gMTtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWV3TWFuYWdlci5kZXRhY2hWaWV3SW5Db250YWluZXIodGhpcy5lbGVtZW50LCBpbmRleCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFZpZXdDb250YWluZXJSZWZfO1xyXG59KShWaWV3Q29udGFpbmVyUmVmKTtcclxuZXhwb3J0cy5WaWV3Q29udGFpbmVyUmVmXyA9IFZpZXdDb250YWluZXJSZWZfO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWV3X2NvbnRhaW5lcl9yZWYuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxuLyoqXHJcbiAqIExpc3RlbmVyIGZvciB2aWV3IGNyZWF0aW9uIC8gZGVzdHJ1Y3Rpb24uXHJcbiAqL1xyXG52YXIgQXBwVmlld0xpc3RlbmVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFwcFZpZXdMaXN0ZW5lcigpIHtcclxuICAgIH1cclxuICAgIEFwcFZpZXdMaXN0ZW5lci5wcm90b3R5cGUudmlld0NyZWF0ZWQgPSBmdW5jdGlvbiAodmlldykgeyB9O1xyXG4gICAgQXBwVmlld0xpc3RlbmVyLnByb3RvdHlwZS52aWV3RGVzdHJveWVkID0gZnVuY3Rpb24gKHZpZXcpIHsgfTtcclxuICAgIEFwcFZpZXdMaXN0ZW5lciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgQXBwVmlld0xpc3RlbmVyKTtcclxuICAgIHJldHVybiBBcHBWaWV3TGlzdGVuZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQXBwVmlld0xpc3RlbmVyID0gQXBwVmlld0xpc3RlbmVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWV3X2xpc3RlbmVyLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgX19wYXJhbSA9ICh0aGlzICYmIHRoaXMuX19wYXJhbSkgfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn07XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgdmlld01vZHVsZSA9IHJlcXVpcmUoJy4vdmlldycpO1xyXG52YXIgdmlld19yZWZfMSA9IHJlcXVpcmUoJy4vdmlld19yZWYnKTtcclxudmFyIGFwaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvcmVuZGVyL2FwaScpO1xyXG52YXIgdmlld19tYW5hZ2VyX3V0aWxzXzEgPSByZXF1aXJlKCcuL3ZpZXdfbWFuYWdlcl91dGlscycpO1xyXG52YXIgdmlld19wb29sXzEgPSByZXF1aXJlKCcuL3ZpZXdfcG9vbCcpO1xyXG52YXIgdmlld19saXN0ZW5lcl8xID0gcmVxdWlyZSgnLi92aWV3X2xpc3RlbmVyJyk7XHJcbnZhciBwcm9maWxlXzEgPSByZXF1aXJlKCcuLi9wcm9maWxlL3Byb2ZpbGUnKTtcclxudmFyIHByb3RvX3ZpZXdfZmFjdG9yeV8xID0gcmVxdWlyZSgnLi9wcm90b192aWV3X2ZhY3RvcnknKTtcclxuLyoqXHJcbiAqIFNlcnZpY2UgZXhwb3NpbmcgbG93IGxldmVsIEFQSSBmb3IgY3JlYXRpbmcsIG1vdmluZyBhbmQgZGVzdHJveWluZyBWaWV3cy5cclxuICpcclxuICogTW9zdCBhcHBsaWNhdGlvbnMgc2hvdWxkIHVzZSBoaWdoZXItbGV2ZWwgYWJzdHJhY3Rpb25zIGxpa2Uge0BsaW5rIER5bmFtaWNDb21wb25lbnRMb2FkZXJ9IGFuZFxyXG4gKiB7QGxpbmsgVmlld0NvbnRhaW5lclJlZn0gaW5zdGVhZC5cclxuICovXHJcbnZhciBBcHBWaWV3TWFuYWdlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBcHBWaWV3TWFuYWdlcigpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUge0BsaW5rIEVsZW1lbnRSZWZ9IHRoYXQgbWFrZXMgdXAgdGhlIHNwZWNpZmllZCBIb3N0IFZpZXcuXHJcbiAgICAgKi9cclxuICAgIEFwcFZpZXdNYW5hZ2VyLnByb3RvdHlwZS5nZXRIb3N0RWxlbWVudCA9IGZ1bmN0aW9uIChob3N0Vmlld1JlZikge1xyXG4gICAgICAgIHZhciBob3N0VmlldyA9IHZpZXdfcmVmXzEuaW50ZXJuYWxWaWV3KGhvc3RWaWV3UmVmKTtcclxuICAgICAgICBpZiAoaG9zdFZpZXcucHJvdG8udHlwZSAhPT0gdmlld01vZHVsZS5WaWV3VHlwZS5IT1NUKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbignVGhpcyBvcGVyYXRpb24gaXMgb25seSBhbGxvd2VkIG9uIGhvc3Qgdmlld3MnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhvc3RWaWV3LmVsZW1lbnRSZWZzW2hvc3RWaWV3LmVsZW1lbnRPZmZzZXRdO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBBcHBWaWV3TWFuYWdlcjtcclxufSkoKTtcclxuZXhwb3J0cy5BcHBWaWV3TWFuYWdlciA9IEFwcFZpZXdNYW5hZ2VyO1xyXG52YXIgQXBwVmlld01hbmFnZXJfID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhBcHBWaWV3TWFuYWdlcl8sIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBBcHBWaWV3TWFuYWdlcl8oX3ZpZXdQb29sLCBfdmlld0xpc3RlbmVyLCBfdXRpbHMsIF9yZW5kZXJlciwgX3Byb3RvVmlld0ZhY3RvcnkpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLl92aWV3UG9vbCA9IF92aWV3UG9vbDtcclxuICAgICAgICB0aGlzLl92aWV3TGlzdGVuZXIgPSBfdmlld0xpc3RlbmVyO1xyXG4gICAgICAgIHRoaXMuX3V0aWxzID0gX3V0aWxzO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gX3JlbmRlcmVyO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9jcmVhdGVSb290SG9zdFZpZXdTY29wZSA9IHByb2ZpbGVfMS53dGZDcmVhdGVTY29wZSgnQXBwVmlld01hbmFnZXIjY3JlYXRlUm9vdEhvc3RWaWV3KCknKTtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5fZGVzdHJveVJvb3RIb3N0Vmlld1Njb3BlID0gcHJvZmlsZV8xLnd0ZkNyZWF0ZVNjb3BlKCdBcHBWaWV3TWFuYWdlciNkZXN0cm95Um9vdEhvc3RWaWV3KCknKTtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5fY3JlYXRlRW1iZWRkZWRWaWV3SW5Db250YWluZXJTY29wZSA9IHByb2ZpbGVfMS53dGZDcmVhdGVTY29wZSgnQXBwVmlld01hbmFnZXIjY3JlYXRlRW1iZWRkZWRWaWV3SW5Db250YWluZXIoKScpO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9jcmVhdGVIb3N0Vmlld0luQ29udGFpbmVyU2NvcGUgPSBwcm9maWxlXzEud3RmQ3JlYXRlU2NvcGUoJ0FwcFZpZXdNYW5hZ2VyI2NyZWF0ZUhvc3RWaWV3SW5Db250YWluZXIoKScpO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9kZXN0cm95Vmlld0luQ29udGFpbmVyU2NvcGUgPSBwcm9maWxlXzEud3RmQ3JlYXRlU2NvcGUoJ0FwcFZpZXdNYW5hbmdlciNkZXN0cm95Vmlld0luQ29udGFpbmVyKCknKTtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5fYXR0YWNoVmlld0luQ29udGFpbmVyU2NvcGUgPSBwcm9maWxlXzEud3RmQ3JlYXRlU2NvcGUoJ0FwcFZpZXdNYW5hbmdlciNhdHRhY2hWaWV3SW5Db250YWluZXIoKScpO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9kZXRhY2hWaWV3SW5Db250YWluZXJTY29wZSA9IHByb2ZpbGVfMS53dGZDcmVhdGVTY29wZSgnQXBwVmlld01hbmFuZ2VyI2RldGFjaFZpZXdJbkNvbnRhaW5lcigpJyk7XHJcbiAgICAgICAgdGhpcy5fcHJvdG9WaWV3RmFjdG9yeSA9IF9wcm90b1ZpZXdGYWN0b3J5O1xyXG4gICAgfVxyXG4gICAgQXBwVmlld01hbmFnZXJfLnByb3RvdHlwZS5nZXRWaWV3Q29udGFpbmVyID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XHJcbiAgICAgICAgdmFyIGhvc3RWaWV3ID0gdmlld19yZWZfMS5pbnRlcm5hbFZpZXcobG9jYXRpb24ucGFyZW50Vmlldyk7XHJcbiAgICAgICAgcmV0dXJuIGhvc3RWaWV3LmVsZW1lbnRJbmplY3RvcnNbbG9jYXRpb24uYm91bmRFbGVtZW50SW5kZXhdXHJcbiAgICAgICAgICAgIC5nZXRWaWV3Q29udGFpbmVyUmVmKCk7XHJcbiAgICB9O1xyXG4gICAgQXBwVmlld01hbmFnZXJfLnByb3RvdHlwZS5nZXROYW1lZEVsZW1lbnRJbkNvbXBvbmVudFZpZXcgPSBmdW5jdGlvbiAoaG9zdExvY2F0aW9uLCB2YXJpYWJsZU5hbWUpIHtcclxuICAgICAgICB2YXIgaG9zdFZpZXcgPSB2aWV3X3JlZl8xLmludGVybmFsVmlldyhob3N0TG9jYXRpb24ucGFyZW50Vmlldyk7XHJcbiAgICAgICAgdmFyIGJvdW5kRWxlbWVudEluZGV4ID0gaG9zdExvY2F0aW9uLmJvdW5kRWxlbWVudEluZGV4O1xyXG4gICAgICAgIHZhciBjb21wb25lbnRWaWV3ID0gaG9zdFZpZXcuZ2V0TmVzdGVkVmlldyhib3VuZEVsZW1lbnRJbmRleCk7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKGNvbXBvbmVudFZpZXcpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihcIlRoZXJlIGlzIG5vIGNvbXBvbmVudCBkaXJlY3RpdmUgYXQgZWxlbWVudCBcIiArIGJvdW5kRWxlbWVudEluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJpbmRlcklkeCA9IGNvbXBvbmVudFZpZXcucHJvdG8udmFyaWFibGVMb2NhdGlvbnMuZ2V0KHZhcmlhYmxlTmFtZSk7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKGJpbmRlcklkeCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKFwiQ291bGQgbm90IGZpbmQgdmFyaWFibGUgXCIgKyB2YXJpYWJsZU5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29tcG9uZW50Vmlldy5lbGVtZW50UmVmc1tjb21wb25lbnRWaWV3LmVsZW1lbnRPZmZzZXQgKyBiaW5kZXJJZHhdO1xyXG4gICAgfTtcclxuICAgIEFwcFZpZXdNYW5hZ2VyXy5wcm90b3R5cGUuZ2V0Q29tcG9uZW50ID0gZnVuY3Rpb24gKGhvc3RMb2NhdGlvbikge1xyXG4gICAgICAgIHZhciBob3N0VmlldyA9IHZpZXdfcmVmXzEuaW50ZXJuYWxWaWV3KGhvc3RMb2NhdGlvbi5wYXJlbnRWaWV3KTtcclxuICAgICAgICB2YXIgYm91bmRFbGVtZW50SW5kZXggPSBob3N0TG9jYXRpb24uYm91bmRFbGVtZW50SW5kZXg7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3V0aWxzLmdldENvbXBvbmVudEluc3RhbmNlKGhvc3RWaWV3LCBib3VuZEVsZW1lbnRJbmRleCk7XHJcbiAgICB9O1xyXG4gICAgQXBwVmlld01hbmFnZXJfLnByb3RvdHlwZS5jcmVhdGVSb290SG9zdFZpZXcgPSBmdW5jdGlvbiAoaG9zdFByb3RvVmlld1JlZiwgb3ZlcnJpZGVTZWxlY3RvciwgaW5qZWN0b3IpIHtcclxuICAgICAgICB2YXIgcyA9IHRoaXMuX2NyZWF0ZVJvb3RIb3N0Vmlld1Njb3BlKCk7XHJcbiAgICAgICAgdmFyIGhvc3RQcm90b1ZpZXcgPSB2aWV3X3JlZl8xLmludGVybmFsUHJvdG9WaWV3KGhvc3RQcm90b1ZpZXdSZWYpO1xyXG4gICAgICAgIHRoaXMuX3Byb3RvVmlld0ZhY3RvcnkuaW5pdGlhbGl6ZVByb3RvVmlld0lmTmVlZGVkKGhvc3RQcm90b1ZpZXcpO1xyXG4gICAgICAgIHZhciBob3N0RWxlbWVudFNlbGVjdG9yID0gb3ZlcnJpZGVTZWxlY3RvcjtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoaG9zdEVsZW1lbnRTZWxlY3RvcikpIHtcclxuICAgICAgICAgICAgaG9zdEVsZW1lbnRTZWxlY3RvciA9IGhvc3RQcm90b1ZpZXcuZWxlbWVudEJpbmRlcnNbMF0uY29tcG9uZW50RGlyZWN0aXZlLm1ldGFkYXRhLnNlbGVjdG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVuZGVyVmlld1dpdGhGcmFnbWVudHMgPSB0aGlzLl9yZW5kZXJlci5jcmVhdGVSb290SG9zdFZpZXcoaG9zdFByb3RvVmlldy5yZW5kZXIsIGhvc3RQcm90b1ZpZXcubWVyZ2VJbmZvLmVtYmVkZGVkVmlld0NvdW50ICsgMSwgaG9zdEVsZW1lbnRTZWxlY3Rvcik7XHJcbiAgICAgICAgdmFyIGhvc3RWaWV3ID0gdGhpcy5fY3JlYXRlTWFpblZpZXcoaG9zdFByb3RvVmlldywgcmVuZGVyVmlld1dpdGhGcmFnbWVudHMpO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLmh5ZHJhdGVWaWV3KGhvc3RWaWV3LnJlbmRlcik7XHJcbiAgICAgICAgdGhpcy5fdXRpbHMuaHlkcmF0ZVJvb3RIb3N0Vmlldyhob3N0VmlldywgaW5qZWN0b3IpO1xyXG4gICAgICAgIHJldHVybiBwcm9maWxlXzEud3RmTGVhdmUocywgaG9zdFZpZXcucmVmKTtcclxuICAgIH07XHJcbiAgICBBcHBWaWV3TWFuYWdlcl8ucHJvdG90eXBlLmRlc3Ryb3lSb290SG9zdFZpZXcgPSBmdW5jdGlvbiAoaG9zdFZpZXdSZWYpIHtcclxuICAgICAgICAvLyBOb3RlOiBEb24ndCBwdXQgdGhlIGhvc3RWaWV3IGludG8gdGhlIHZpZXcgcG9vbFxyXG4gICAgICAgIC8vIGFzIGl0IGlzIGRlcGVuZGluZyBvbiB0aGUgZWxlbWVudCBmb3Igd2hpY2ggaXQgd2FzIGNyZWF0ZWQuXHJcbiAgICAgICAgdmFyIHMgPSB0aGlzLl9kZXN0cm95Um9vdEhvc3RWaWV3U2NvcGUoKTtcclxuICAgICAgICB2YXIgaG9zdFZpZXcgPSB2aWV3X3JlZl8xLmludGVybmFsVmlldyhob3N0Vmlld1JlZik7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIuZGV0YWNoRnJhZ21lbnQoaG9zdFZpZXcucmVuZGVyRnJhZ21lbnQpO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLmRlaHlkcmF0ZVZpZXcoaG9zdFZpZXcucmVuZGVyKTtcclxuICAgICAgICB0aGlzLl92aWV3RGVoeWRyYXRlUmVjdXJzZShob3N0Vmlldyk7XHJcbiAgICAgICAgdGhpcy5fdmlld0xpc3RlbmVyLnZpZXdEZXN0cm95ZWQoaG9zdFZpZXcpO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLmRlc3Ryb3lWaWV3KGhvc3RWaWV3LnJlbmRlcik7XHJcbiAgICAgICAgcHJvZmlsZV8xLnd0ZkxlYXZlKHMpO1xyXG4gICAgfTtcclxuICAgIEFwcFZpZXdNYW5hZ2VyXy5wcm90b3R5cGUuY3JlYXRlRW1iZWRkZWRWaWV3SW5Db250YWluZXIgPSBmdW5jdGlvbiAodmlld0NvbnRhaW5lckxvY2F0aW9uLCBpbmRleCwgdGVtcGxhdGVSZWYpIHtcclxuICAgICAgICB2YXIgcyA9IHRoaXMuX2NyZWF0ZUVtYmVkZGVkVmlld0luQ29udGFpbmVyU2NvcGUoKTtcclxuICAgICAgICB2YXIgcHJvdG9WaWV3ID0gdmlld19yZWZfMS5pbnRlcm5hbFByb3RvVmlldyh0ZW1wbGF0ZVJlZi5wcm90b1ZpZXdSZWYpO1xyXG4gICAgICAgIGlmIChwcm90b1ZpZXcudHlwZSAhPT0gdmlld01vZHVsZS5WaWV3VHlwZS5FTUJFRERFRCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oJ1RoaXMgbWV0aG9kIGNhbiBvbmx5IGJlIGNhbGxlZCB3aXRoIGVtYmVkZGVkIFByb3RvVmlld3MhJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3Byb3RvVmlld0ZhY3RvcnkuaW5pdGlhbGl6ZVByb3RvVmlld0lmTmVlZGVkKHByb3RvVmlldyk7XHJcbiAgICAgICAgcmV0dXJuIHByb2ZpbGVfMS53dGZMZWF2ZShzLCB0aGlzLl9jcmVhdGVWaWV3SW5Db250YWluZXIodmlld0NvbnRhaW5lckxvY2F0aW9uLCBpbmRleCwgcHJvdG9WaWV3LCB0ZW1wbGF0ZVJlZi5lbGVtZW50UmVmLCBudWxsKSk7XHJcbiAgICB9O1xyXG4gICAgQXBwVmlld01hbmFnZXJfLnByb3RvdHlwZS5jcmVhdGVIb3N0Vmlld0luQ29udGFpbmVyID0gZnVuY3Rpb24gKHZpZXdDb250YWluZXJMb2NhdGlvbiwgaW5kZXgsIHByb3RvVmlld1JlZiwgaW1wZXJhdGl2ZWx5Q3JlYXRlZEluamVjdG9yKSB7XHJcbiAgICAgICAgdmFyIHMgPSB0aGlzLl9jcmVhdGVIb3N0Vmlld0luQ29udGFpbmVyU2NvcGUoKTtcclxuICAgICAgICB2YXIgcHJvdG9WaWV3ID0gdmlld19yZWZfMS5pbnRlcm5hbFByb3RvVmlldyhwcm90b1ZpZXdSZWYpO1xyXG4gICAgICAgIGlmIChwcm90b1ZpZXcudHlwZSAhPT0gdmlld01vZHVsZS5WaWV3VHlwZS5IT1NUKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbignVGhpcyBtZXRob2QgY2FuIG9ubHkgYmUgY2FsbGVkIHdpdGggaG9zdCBQcm90b1ZpZXdzIScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9wcm90b1ZpZXdGYWN0b3J5LmluaXRpYWxpemVQcm90b1ZpZXdJZk5lZWRlZChwcm90b1ZpZXcpO1xyXG4gICAgICAgIHJldHVybiBwcm9maWxlXzEud3RmTGVhdmUocywgdGhpcy5fY3JlYXRlVmlld0luQ29udGFpbmVyKHZpZXdDb250YWluZXJMb2NhdGlvbiwgaW5kZXgsIHByb3RvVmlldywgdmlld0NvbnRhaW5lckxvY2F0aW9uLCBpbXBlcmF0aXZlbHlDcmVhdGVkSW5qZWN0b3IpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBTZWUge0BsaW5rIEFwcFZpZXdNYW5hZ2VyI2Rlc3Ryb3lWaWV3SW5Db250YWluZXJ9LlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIEFwcFZpZXdNYW5hZ2VyXy5wcm90b3R5cGUuX2NyZWF0ZVZpZXdJbkNvbnRhaW5lciA9IGZ1bmN0aW9uICh2aWV3Q29udGFpbmVyTG9jYXRpb24sIGluZGV4LCBwcm90b1ZpZXcsIGNvbnRleHQsIGltcGVyYXRpdmVseUNyZWF0ZWRJbmplY3Rvcikge1xyXG4gICAgICAgIHZhciBwYXJlbnRWaWV3ID0gdmlld19yZWZfMS5pbnRlcm5hbFZpZXcodmlld0NvbnRhaW5lckxvY2F0aW9uLnBhcmVudFZpZXcpO1xyXG4gICAgICAgIHZhciBib3VuZEVsZW1lbnRJbmRleCA9IHZpZXdDb250YWluZXJMb2NhdGlvbi5ib3VuZEVsZW1lbnRJbmRleDtcclxuICAgICAgICB2YXIgY29udGV4dFZpZXcgPSB2aWV3X3JlZl8xLmludGVybmFsVmlldyhjb250ZXh0LnBhcmVudFZpZXcpO1xyXG4gICAgICAgIHZhciBjb250ZXh0Qm91bmRFbGVtZW50SW5kZXggPSBjb250ZXh0LmJvdW5kRWxlbWVudEluZGV4O1xyXG4gICAgICAgIHZhciBlbWJlZGRlZEZyYWdtZW50VmlldyA9IGNvbnRleHRWaWV3LmdldE5lc3RlZFZpZXcoY29udGV4dEJvdW5kRWxlbWVudEluZGV4KTtcclxuICAgICAgICB2YXIgdmlldztcclxuICAgICAgICBpZiAocHJvdG9WaWV3LnR5cGUgPT09IHZpZXdNb2R1bGUuVmlld1R5cGUuRU1CRURERUQgJiYgbGFuZ18xLmlzUHJlc2VudChlbWJlZGRlZEZyYWdtZW50VmlldykgJiZcclxuICAgICAgICAgICAgIWVtYmVkZGVkRnJhZ21lbnRWaWV3Lmh5ZHJhdGVkKCkpIHtcclxuICAgICAgICAgICAgLy8gQ2FzZSAxOiBpbnN0YW50aWF0ZSB0aGUgZmlyc3QgdmlldyBvZiBhIHRlbXBsYXRlIHRoYXQgaGFzIGJlZW4gbWVyZ2VkIGludG8gYSBwYXJlbnRcclxuICAgICAgICAgICAgdmlldyA9IGVtYmVkZGVkRnJhZ21lbnRWaWV3O1xyXG4gICAgICAgICAgICB0aGlzLl9hdHRhY2hSZW5kZXJWaWV3KHBhcmVudFZpZXcsIGJvdW5kRWxlbWVudEluZGV4LCBpbmRleCwgdmlldyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBDYXNlIDI6IGluc3RhbnRpYXRlIGFub3RoZXIgY29weSBvZiB0aGUgdGVtcGxhdGUgb3IgYSBob3N0IFByb3RvVmlldy5cclxuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHNlcGFyYXRlIGNhc2VcclxuICAgICAgICAgICAgLy8gYXMgd2Ugb25seSBpbmxpbmUgb25lIGNvcHkgb2YgdGhlIHRlbXBsYXRlIGludG8gdGhlIHBhcmVudCB2aWV3LlxyXG4gICAgICAgICAgICB2aWV3ID0gdGhpcy5fY3JlYXRlUG9vbGVkVmlldyhwcm90b1ZpZXcpO1xyXG4gICAgICAgICAgICB0aGlzLl9hdHRhY2hSZW5kZXJWaWV3KHBhcmVudFZpZXcsIGJvdW5kRWxlbWVudEluZGV4LCBpbmRleCwgdmlldyk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmh5ZHJhdGVWaWV3KHZpZXcucmVuZGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdXRpbHMuYXR0YWNoVmlld0luQ29udGFpbmVyKHBhcmVudFZpZXcsIGJvdW5kRWxlbWVudEluZGV4LCBjb250ZXh0VmlldywgY29udGV4dEJvdW5kRWxlbWVudEluZGV4LCBpbmRleCwgdmlldyk7XHJcbiAgICAgICAgdGhpcy5fdXRpbHMuaHlkcmF0ZVZpZXdJbkNvbnRhaW5lcihwYXJlbnRWaWV3LCBib3VuZEVsZW1lbnRJbmRleCwgY29udGV4dFZpZXcsIGNvbnRleHRCb3VuZEVsZW1lbnRJbmRleCwgaW5kZXgsIGltcGVyYXRpdmVseUNyZWF0ZWRJbmplY3Rvcik7XHJcbiAgICAgICAgcmV0dXJuIHZpZXcucmVmO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIEFwcFZpZXdNYW5hZ2VyXy5wcm90b3R5cGUuX2F0dGFjaFJlbmRlclZpZXcgPSBmdW5jdGlvbiAocGFyZW50VmlldywgYm91bmRFbGVtZW50SW5kZXgsIGluZGV4LCB2aWV3KSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnRSZWYgPSBwYXJlbnRWaWV3LmVsZW1lbnRSZWZzW2JvdW5kRWxlbWVudEluZGV4XTtcclxuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuYXR0YWNoRnJhZ21lbnRBZnRlckVsZW1lbnQoZWxlbWVudFJlZiwgdmlldy5yZW5kZXJGcmFnbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcHJldlZpZXcgPSBwYXJlbnRWaWV3LnZpZXdDb250YWluZXJzW2JvdW5kRWxlbWVudEluZGV4XS52aWV3c1tpbmRleCAtIDFdO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5hdHRhY2hGcmFnbWVudEFmdGVyRnJhZ21lbnQocHJldlZpZXcucmVuZGVyRnJhZ21lbnQsIHZpZXcucmVuZGVyRnJhZ21lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBcHBWaWV3TWFuYWdlcl8ucHJvdG90eXBlLmRlc3Ryb3lWaWV3SW5Db250YWluZXIgPSBmdW5jdGlvbiAodmlld0NvbnRhaW5lckxvY2F0aW9uLCBpbmRleCkge1xyXG4gICAgICAgIHZhciBzID0gdGhpcy5fZGVzdHJveVZpZXdJbkNvbnRhaW5lclNjb3BlKCk7XHJcbiAgICAgICAgdmFyIHBhcmVudFZpZXcgPSB2aWV3X3JlZl8xLmludGVybmFsVmlldyh2aWV3Q29udGFpbmVyTG9jYXRpb24ucGFyZW50Vmlldyk7XHJcbiAgICAgICAgdmFyIGJvdW5kRWxlbWVudEluZGV4ID0gdmlld0NvbnRhaW5lckxvY2F0aW9uLmJvdW5kRWxlbWVudEluZGV4O1xyXG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lWaWV3SW5Db250YWluZXIocGFyZW50VmlldywgYm91bmRFbGVtZW50SW5kZXgsIGluZGV4KTtcclxuICAgICAgICBwcm9maWxlXzEud3RmTGVhdmUocyk7XHJcbiAgICB9O1xyXG4gICAgLy8gVE9ETyhpKTogcmVmYWN0b3IgZGV0YWNoVmlld0luQ29udGFpbmVyK2F0dGFjaFZpZXdJbkNvbnRhaW5lciB0byBtb3ZlVmlld0luQ29udGFpbmVyXHJcbiAgICBBcHBWaWV3TWFuYWdlcl8ucHJvdG90eXBlLmF0dGFjaFZpZXdJbkNvbnRhaW5lciA9IGZ1bmN0aW9uICh2aWV3Q29udGFpbmVyTG9jYXRpb24sIGluZGV4LCB2aWV3UmVmKSB7XHJcbiAgICAgICAgdmFyIHMgPSB0aGlzLl9hdHRhY2hWaWV3SW5Db250YWluZXJTY29wZSgpO1xyXG4gICAgICAgIHZhciB2aWV3ID0gdmlld19yZWZfMS5pbnRlcm5hbFZpZXcodmlld1JlZik7XHJcbiAgICAgICAgdmFyIHBhcmVudFZpZXcgPSB2aWV3X3JlZl8xLmludGVybmFsVmlldyh2aWV3Q29udGFpbmVyTG9jYXRpb24ucGFyZW50Vmlldyk7XHJcbiAgICAgICAgdmFyIGJvdW5kRWxlbWVudEluZGV4ID0gdmlld0NvbnRhaW5lckxvY2F0aW9uLmJvdW5kRWxlbWVudEluZGV4O1xyXG4gICAgICAgIC8vIFRPRE8odGJvc2NoKTogdGhlIHB1YmxpYyBtZXRob2RzIGF0dGFjaFZpZXdJbkNvbnRhaW5lci9kZXRhY2hWaWV3SW5Db250YWluZXJcclxuICAgICAgICAvLyBhcmUgdXNlZCBmb3IgbW92aW5nIGVsZW1lbnRzIHdpdGhvdXQgdGhlIHNhbWUgY29udGFpbmVyLlxyXG4gICAgICAgIC8vIFdlIHdpbGwgY2hhbmdlIHRoaXMgaW50byBhbiBhdG9taWMgYG1vdmVgIG9wZXJhdGlvbiwgd2hpY2ggc2hvdWxkIHByZXNlcnZlIHRoZVxyXG4gICAgICAgIC8vIHByZXZpb3VzIHBhcmVudCBpbmplY3RvciAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzEzNzcpLlxyXG4gICAgICAgIC8vIFJpZ2h0IG5vdyB3ZSBhcmUgZGVzdHJveWluZyBhbnkgc3BlY2lhbFxyXG4gICAgICAgIC8vIGNvbnRleHQgdmlldyB0aGF0IG1pZ2h0IGhhdmUgYmVlbiB1c2VkLlxyXG4gICAgICAgIHRoaXMuX3V0aWxzLmF0dGFjaFZpZXdJbkNvbnRhaW5lcihwYXJlbnRWaWV3LCBib3VuZEVsZW1lbnRJbmRleCwgbnVsbCwgbnVsbCwgaW5kZXgsIHZpZXcpO1xyXG4gICAgICAgIHRoaXMuX2F0dGFjaFJlbmRlclZpZXcocGFyZW50VmlldywgYm91bmRFbGVtZW50SW5kZXgsIGluZGV4LCB2aWV3KTtcclxuICAgICAgICByZXR1cm4gcHJvZmlsZV8xLnd0ZkxlYXZlKHMsIHZpZXdSZWYpO1xyXG4gICAgfTtcclxuICAgIC8vIFRPRE8oaSk6IHJlZmFjdG9yIGRldGFjaFZpZXdJbkNvbnRhaW5lcithdHRhY2hWaWV3SW5Db250YWluZXIgdG8gbW92ZVZpZXdJbkNvbnRhaW5lclxyXG4gICAgQXBwVmlld01hbmFnZXJfLnByb3RvdHlwZS5kZXRhY2hWaWV3SW5Db250YWluZXIgPSBmdW5jdGlvbiAodmlld0NvbnRhaW5lckxvY2F0aW9uLCBpbmRleCkge1xyXG4gICAgICAgIHZhciBzID0gdGhpcy5fZGV0YWNoVmlld0luQ29udGFpbmVyU2NvcGUoKTtcclxuICAgICAgICB2YXIgcGFyZW50VmlldyA9IHZpZXdfcmVmXzEuaW50ZXJuYWxWaWV3KHZpZXdDb250YWluZXJMb2NhdGlvbi5wYXJlbnRWaWV3KTtcclxuICAgICAgICB2YXIgYm91bmRFbGVtZW50SW5kZXggPSB2aWV3Q29udGFpbmVyTG9jYXRpb24uYm91bmRFbGVtZW50SW5kZXg7XHJcbiAgICAgICAgdmFyIHZpZXdDb250YWluZXIgPSBwYXJlbnRWaWV3LnZpZXdDb250YWluZXJzW2JvdW5kRWxlbWVudEluZGV4XTtcclxuICAgICAgICB2YXIgdmlldyA9IHZpZXdDb250YWluZXIudmlld3NbaW5kZXhdO1xyXG4gICAgICAgIHRoaXMuX3V0aWxzLmRldGFjaFZpZXdJbkNvbnRhaW5lcihwYXJlbnRWaWV3LCBib3VuZEVsZW1lbnRJbmRleCwgaW5kZXgpO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLmRldGFjaEZyYWdtZW50KHZpZXcucmVuZGVyRnJhZ21lbnQpO1xyXG4gICAgICAgIHJldHVybiBwcm9maWxlXzEud3RmTGVhdmUocywgdmlldy5yZWYpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIEFwcFZpZXdNYW5hZ2VyXy5wcm90b3R5cGUuX2NyZWF0ZU1haW5WaWV3ID0gZnVuY3Rpb24gKHByb3RvVmlldywgcmVuZGVyVmlld1dpdGhGcmFnbWVudHMpIHtcclxuICAgICAgICB2YXIgbWVyZ2VkUGFyZW50VmlldyA9IHRoaXMuX3V0aWxzLmNyZWF0ZVZpZXcocHJvdG9WaWV3LCByZW5kZXJWaWV3V2l0aEZyYWdtZW50cywgdGhpcywgdGhpcy5fcmVuZGVyZXIpO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldEV2ZW50RGlzcGF0Y2hlcihtZXJnZWRQYXJlbnRWaWV3LnJlbmRlciwgbWVyZ2VkUGFyZW50Vmlldyk7XHJcbiAgICAgICAgdGhpcy5fdmlld0xpc3RlbmVyLnZpZXdDcmVhdGVkKG1lcmdlZFBhcmVudFZpZXcpO1xyXG4gICAgICAgIHJldHVybiBtZXJnZWRQYXJlbnRWaWV3O1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIEFwcFZpZXdNYW5hZ2VyXy5wcm90b3R5cGUuX2NyZWF0ZVBvb2xlZFZpZXcgPSBmdW5jdGlvbiAocHJvdG9WaWV3KSB7XHJcbiAgICAgICAgdmFyIHZpZXcgPSB0aGlzLl92aWV3UG9vbC5nZXRWaWV3KHByb3RvVmlldyk7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHZpZXcpKSB7XHJcbiAgICAgICAgICAgIHZpZXcgPSB0aGlzLl9jcmVhdGVNYWluVmlldyhwcm90b1ZpZXcsIHRoaXMuX3JlbmRlcmVyLmNyZWF0ZVZpZXcocHJvdG9WaWV3LnJlbmRlciwgcHJvdG9WaWV3Lm1lcmdlSW5mby5lbWJlZGRlZFZpZXdDb3VudCArIDEpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZpZXc7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQXBwVmlld01hbmFnZXJfLnByb3RvdHlwZS5fZGVzdHJveVBvb2xlZFZpZXcgPSBmdW5jdGlvbiAodmlldykge1xyXG4gICAgICAgIHZhciB3YXNSZXR1cm5lZCA9IHRoaXMuX3ZpZXdQb29sLnJldHVyblZpZXcodmlldyk7XHJcbiAgICAgICAgaWYgKCF3YXNSZXR1cm5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLl92aWV3TGlzdGVuZXIudmlld0Rlc3Ryb3llZCh2aWV3KTtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuZGVzdHJveVZpZXcodmlldy5yZW5kZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBBcHBWaWV3TWFuYWdlcl8ucHJvdG90eXBlLl9kZXN0cm95Vmlld0luQ29udGFpbmVyID0gZnVuY3Rpb24gKHBhcmVudFZpZXcsIGJvdW5kRWxlbWVudEluZGV4LCBpbmRleCkge1xyXG4gICAgICAgIHZhciB2aWV3Q29udGFpbmVyID0gcGFyZW50Vmlldy52aWV3Q29udGFpbmVyc1tib3VuZEVsZW1lbnRJbmRleF07XHJcbiAgICAgICAgdmFyIHZpZXcgPSB2aWV3Q29udGFpbmVyLnZpZXdzW2luZGV4XTtcclxuICAgICAgICB0aGlzLl92aWV3RGVoeWRyYXRlUmVjdXJzZSh2aWV3KTtcclxuICAgICAgICB0aGlzLl91dGlscy5kZXRhY2hWaWV3SW5Db250YWluZXIocGFyZW50VmlldywgYm91bmRFbGVtZW50SW5kZXgsIGluZGV4KTtcclxuICAgICAgICBpZiAodmlldy52aWV3T2Zmc2V0ID4gMCkge1xyXG4gICAgICAgICAgICAvLyBDYXNlIDE6IGEgdmlldyB0aGF0IGlzIHBhcnQgb2YgYW5vdGhlciB2aWV3LlxyXG4gICAgICAgICAgICAvLyBKdXN0IGRldGFjaCB0aGUgZnJhZ21lbnRcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuZGV0YWNoRnJhZ21lbnQodmlldy5yZW5kZXJGcmFnbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBDYXNlIDI6IGEgdmlldyB0aGF0IGlzIG5vdCBwYXJ0IG9mIGFub3RoZXIgdmlldy5cclxuICAgICAgICAgICAgLy8gZGVoeWRyYXRlIGFuZCBkZXN0cm95IGl0LlxyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5kZWh5ZHJhdGVWaWV3KHZpZXcucmVuZGVyKTtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuZGV0YWNoRnJhZ21lbnQodmlldy5yZW5kZXJGcmFnbWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lQb29sZWRWaWV3KHZpZXcpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBBcHBWaWV3TWFuYWdlcl8ucHJvdG90eXBlLl92aWV3RGVoeWRyYXRlUmVjdXJzZSA9IGZ1bmN0aW9uICh2aWV3KSB7XHJcbiAgICAgICAgaWYgKHZpZXcuaHlkcmF0ZWQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLl91dGlscy5kZWh5ZHJhdGVWaWV3KHZpZXcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmlld0NvbnRhaW5lcnMgPSB2aWV3LnZpZXdDb250YWluZXJzO1xyXG4gICAgICAgIHZhciBzdGFydFZpZXdPZmZzZXQgPSB2aWV3LnZpZXdPZmZzZXQ7XHJcbiAgICAgICAgdmFyIGVuZFZpZXdPZmZzZXQgPSB2aWV3LnZpZXdPZmZzZXQgKyB2aWV3LnByb3RvLm1lcmdlSW5mby52aWV3Q291bnQgLSAxO1xyXG4gICAgICAgIHZhciBlbGVtZW50T2Zmc2V0ID0gdmlldy5lbGVtZW50T2Zmc2V0O1xyXG4gICAgICAgIGZvciAodmFyIHZpZXdJZHggPSBzdGFydFZpZXdPZmZzZXQ7IHZpZXdJZHggPD0gZW5kVmlld09mZnNldDsgdmlld0lkeCsrKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyVmlldyA9IHZpZXcudmlld3Nbdmlld0lkeF07XHJcbiAgICAgICAgICAgIGZvciAodmFyIGJpbmRlcklkeCA9IDA7IGJpbmRlcklkeCA8IGN1cnJWaWV3LnByb3RvLmVsZW1lbnRCaW5kZXJzLmxlbmd0aDsgYmluZGVySWR4KyssIGVsZW1lbnRPZmZzZXQrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZjID0gdmlld0NvbnRhaW5lcnNbZWxlbWVudE9mZnNldF07XHJcbiAgICAgICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh2YykpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gdmMudmlld3MubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveVZpZXdJbkNvbnRhaW5lcihjdXJyVmlldywgZWxlbWVudE9mZnNldCwgaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFwcFZpZXdNYW5hZ2VyXyA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLFxyXG4gICAgICAgIF9fcGFyYW0oNCwgZGlfMS5JbmplY3QoZGlfMS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvX3ZpZXdfZmFjdG9yeV8xLlByb3RvVmlld0ZhY3Rvcnk7IH0pKSksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW3ZpZXdfcG9vbF8xLkFwcFZpZXdQb29sLCB2aWV3X2xpc3RlbmVyXzEuQXBwVmlld0xpc3RlbmVyLCB2aWV3X21hbmFnZXJfdXRpbHNfMS5BcHBWaWV3TWFuYWdlclV0aWxzLCBhcGlfMS5SZW5kZXJlciwgT2JqZWN0XSlcclxuICAgIF0sIEFwcFZpZXdNYW5hZ2VyXyk7XHJcbiAgICByZXR1cm4gQXBwVmlld01hbmFnZXJfO1xyXG59KShBcHBWaWV3TWFuYWdlcik7XHJcbmV4cG9ydHMuQXBwVmlld01hbmFnZXJfID0gQXBwVmlld01hbmFnZXJfO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWV3X21hbmFnZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBlbGkgPSByZXF1aXJlKCcuL2VsZW1lbnRfaW5qZWN0b3InKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciB2aWV3TW9kdWxlID0gcmVxdWlyZSgnLi92aWV3Jyk7XHJcbnZhciBlbGVtZW50X3JlZl8xID0gcmVxdWlyZSgnLi9lbGVtZW50X3JlZicpO1xyXG52YXIgdGVtcGxhdGVfcmVmXzEgPSByZXF1aXJlKCcuL3RlbXBsYXRlX3JlZicpO1xyXG52YXIgcGlwZXNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL3BpcGVzL3BpcGVzJyk7XHJcbnZhciBBcHBWaWV3TWFuYWdlclV0aWxzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFwcFZpZXdNYW5hZ2VyVXRpbHMoKSB7XHJcbiAgICB9XHJcbiAgICBBcHBWaWV3TWFuYWdlclV0aWxzLnByb3RvdHlwZS5nZXRDb21wb25lbnRJbnN0YW5jZSA9IGZ1bmN0aW9uIChwYXJlbnRWaWV3LCBib3VuZEVsZW1lbnRJbmRleCkge1xyXG4gICAgICAgIHZhciBlbGkgPSBwYXJlbnRWaWV3LmVsZW1lbnRJbmplY3RvcnNbYm91bmRFbGVtZW50SW5kZXhdO1xyXG4gICAgICAgIHJldHVybiBlbGkuZ2V0Q29tcG9uZW50KCk7XHJcbiAgICB9O1xyXG4gICAgQXBwVmlld01hbmFnZXJVdGlscy5wcm90b3R5cGUuY3JlYXRlVmlldyA9IGZ1bmN0aW9uIChtZXJnZWRQYXJlbnRWaWV3UHJvdG8sIHJlbmRlclZpZXdXaXRoRnJhZ21lbnRzLCB2aWV3TWFuYWdlciwgcmVuZGVyZXIpIHtcclxuICAgICAgICB2YXIgcmVuZGVyRnJhZ21lbnRzID0gcmVuZGVyVmlld1dpdGhGcmFnbWVudHMuZnJhZ21lbnRSZWZzO1xyXG4gICAgICAgIHZhciByZW5kZXJWaWV3ID0gcmVuZGVyVmlld1dpdGhGcmFnbWVudHMudmlld1JlZjtcclxuICAgICAgICB2YXIgZWxlbWVudENvdW50ID0gbWVyZ2VkUGFyZW50Vmlld1Byb3RvLm1lcmdlSW5mby5lbGVtZW50Q291bnQ7XHJcbiAgICAgICAgdmFyIHZpZXdDb3VudCA9IG1lcmdlZFBhcmVudFZpZXdQcm90by5tZXJnZUluZm8udmlld0NvdW50O1xyXG4gICAgICAgIHZhciBlbGVtZW50UmVmcyA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jcmVhdGVGaXhlZFNpemUoZWxlbWVudENvdW50KTtcclxuICAgICAgICB2YXIgdmlld0NvbnRhaW5lcnMgPSBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuY3JlYXRlRml4ZWRTaXplKGVsZW1lbnRDb3VudCk7XHJcbiAgICAgICAgdmFyIHByZUJ1aWx0T2JqZWN0cyA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jcmVhdGVGaXhlZFNpemUoZWxlbWVudENvdW50KTtcclxuICAgICAgICB2YXIgZWxlbWVudEluamVjdG9ycyA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jcmVhdGVGaXhlZFNpemUoZWxlbWVudENvdW50KTtcclxuICAgICAgICB2YXIgdmlld3MgPSBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuY3JlYXRlRml4ZWRTaXplKHZpZXdDb3VudCk7XHJcbiAgICAgICAgdmFyIGVsZW1lbnRPZmZzZXQgPSAwO1xyXG4gICAgICAgIHZhciB0ZXh0T2Zmc2V0ID0gMDtcclxuICAgICAgICB2YXIgZnJhZ21lbnRJZHggPSAwO1xyXG4gICAgICAgIHZhciBjb250YWluZXJFbGVtZW50SW5kaWNlc0J5Vmlld0luZGV4ID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNyZWF0ZUZpeGVkU2l6ZSh2aWV3Q291bnQpO1xyXG4gICAgICAgIGZvciAodmFyIHZpZXdPZmZzZXQgPSAwOyB2aWV3T2Zmc2V0IDwgdmlld0NvdW50OyB2aWV3T2Zmc2V0KyspIHtcclxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lckVsZW1lbnRJbmRleCA9IGNvbnRhaW5lckVsZW1lbnRJbmRpY2VzQnlWaWV3SW5kZXhbdmlld09mZnNldF07XHJcbiAgICAgICAgICAgIHZhciBjb250YWluZXJFbGVtZW50SW5qZWN0b3IgPSBsYW5nXzEuaXNQcmVzZW50KGNvbnRhaW5lckVsZW1lbnRJbmRleCkgPyBlbGVtZW50SW5qZWN0b3JzW2NvbnRhaW5lckVsZW1lbnRJbmRleF0gOiBudWxsO1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50VmlldyA9IGxhbmdfMS5pc1ByZXNlbnQoY29udGFpbmVyRWxlbWVudEluamVjdG9yKSA/IHByZUJ1aWx0T2JqZWN0c1tjb250YWluZXJFbGVtZW50SW5kZXhdLnZpZXcgOiBudWxsO1xyXG4gICAgICAgICAgICB2YXIgcHJvdG9WaWV3ID0gbGFuZ18xLmlzUHJlc2VudChjb250YWluZXJFbGVtZW50SW5kZXgpID9cclxuICAgICAgICAgICAgICAgIHBhcmVudFZpZXcucHJvdG8uZWxlbWVudEJpbmRlcnNbY29udGFpbmVyRWxlbWVudEluZGV4IC0gcGFyZW50Vmlldy5lbGVtZW50T2Zmc2V0XVxyXG4gICAgICAgICAgICAgICAgICAgIC5uZXN0ZWRQcm90b1ZpZXcgOlxyXG4gICAgICAgICAgICAgICAgbWVyZ2VkUGFyZW50Vmlld1Byb3RvO1xyXG4gICAgICAgICAgICB2YXIgcmVuZGVyRnJhZ21lbnQgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodmlld09mZnNldCA9PT0gMCB8fCBwcm90b1ZpZXcudHlwZSA9PT0gdmlld01vZHVsZS5WaWV3VHlwZS5FTUJFRERFRCkge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyRnJhZ21lbnQgPSByZW5kZXJGcmFnbWVudHNbZnJhZ21lbnRJZHgrK107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRWaWV3ID0gbmV3IHZpZXdNb2R1bGUuQXBwVmlldyhyZW5kZXJlciwgcHJvdG9WaWV3LCB2aWV3T2Zmc2V0LCBlbGVtZW50T2Zmc2V0LCB0ZXh0T2Zmc2V0LCBwcm90b1ZpZXcucHJvdG9Mb2NhbHMsIHJlbmRlclZpZXcsIHJlbmRlckZyYWdtZW50LCBjb250YWluZXJFbGVtZW50SW5qZWN0b3IpO1xyXG4gICAgICAgICAgICB2aWV3c1t2aWV3T2Zmc2V0XSA9IGN1cnJlbnRWaWV3O1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChjb250YWluZXJFbGVtZW50SW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICBwcmVCdWlsdE9iamVjdHNbY29udGFpbmVyRWxlbWVudEluZGV4XS5uZXN0ZWRWaWV3ID0gY3VycmVudFZpZXc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHJvb3RFbGVtZW50SW5qZWN0b3JzID0gW107XHJcbiAgICAgICAgICAgIHZhciBuZXN0ZWRWaWV3T2Zmc2V0ID0gdmlld09mZnNldCArIDE7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGJpbmRlcklkeCA9IDA7IGJpbmRlcklkeCA8IHByb3RvVmlldy5lbGVtZW50QmluZGVycy5sZW5ndGg7IGJpbmRlcklkeCsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmluZGVyID0gcHJvdG9WaWV3LmVsZW1lbnRCaW5kZXJzW2JpbmRlcklkeF07XHJcbiAgICAgICAgICAgICAgICB2YXIgYm91bmRFbGVtZW50SW5kZXggPSBlbGVtZW50T2Zmc2V0ICsgYmluZGVySWR4O1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRJbmplY3RvciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChiaW5kZXIubmVzdGVkUHJvdG9WaWV3KSAmJiBiaW5kZXIubmVzdGVkUHJvdG9WaWV3LmlzTWVyZ2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50SW5kaWNlc0J5Vmlld0luZGV4W25lc3RlZFZpZXdPZmZzZXRdID0gYm91bmRFbGVtZW50SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgbmVzdGVkVmlld09mZnNldCArPSBiaW5kZXIubmVzdGVkUHJvdG9WaWV3Lm1lcmdlSW5mby52aWV3Q291bnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBlbGVtZW50SW5qZWN0b3JzIGFuZCByb290RWxlbWVudEluamVjdG9yc1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb3RvRWxlbWVudEluamVjdG9yID0gYmluZGVyLnByb3RvRWxlbWVudEluamVjdG9yO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQocHJvdG9FbGVtZW50SW5qZWN0b3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQocHJvdG9FbGVtZW50SW5qZWN0b3IucGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50RWxlbWVudEluamVjdG9yID0gZWxlbWVudEluamVjdG9yc1tlbGVtZW50T2Zmc2V0ICsgcHJvdG9FbGVtZW50SW5qZWN0b3IucGFyZW50LmluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudEluamVjdG9yID0gcHJvdG9FbGVtZW50SW5qZWN0b3IuaW5zdGFudGlhdGUocGFyZW50RWxlbWVudEluamVjdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRJbmplY3RvciA9IHByb3RvRWxlbWVudEluamVjdG9yLmluc3RhbnRpYXRlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb290RWxlbWVudEluamVjdG9ycy5wdXNoKGVsZW1lbnRJbmplY3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxlbWVudEluamVjdG9yc1tib3VuZEVsZW1lbnRJbmRleF0gPSBlbGVtZW50SW5qZWN0b3I7XHJcbiAgICAgICAgICAgICAgICAvLyBlbGVtZW50UmVmc1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsID0gbmV3IGVsZW1lbnRfcmVmXzEuRWxlbWVudFJlZl8oY3VycmVudFZpZXcucmVmLCBib3VuZEVsZW1lbnRJbmRleCwgcmVuZGVyZXIpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudFJlZnNbZWwuYm91bmRFbGVtZW50SW5kZXhdID0gZWw7XHJcbiAgICAgICAgICAgICAgICAvLyBwcmVCdWlsdE9iamVjdHNcclxuICAgICAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGVsZW1lbnRJbmplY3RvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGVSZWYgPSBsYW5nXzEuaXNQcmVzZW50KGJpbmRlci5uZXN0ZWRQcm90b1ZpZXcpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRlci5uZXN0ZWRQcm90b1ZpZXcudHlwZSA9PT0gdmlld01vZHVsZS5WaWV3VHlwZS5FTUJFRERFRCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyB0ZW1wbGF0ZV9yZWZfMS5UZW1wbGF0ZVJlZl8oZWwpIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBwcmVCdWlsdE9iamVjdHNbYm91bmRFbGVtZW50SW5kZXhdID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IGVsaS5QcmVCdWlsdE9iamVjdHModmlld01hbmFnZXIsIGN1cnJlbnRWaWV3LCBlbCwgdGVtcGxhdGVSZWYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnJlbnRWaWV3LmluaXQocHJvdG9WaWV3LmNoYW5nZURldGVjdG9yRmFjdG9yeShjdXJyZW50VmlldyksIGVsZW1lbnRJbmplY3RvcnMsIHJvb3RFbGVtZW50SW5qZWN0b3JzLCBwcmVCdWlsdE9iamVjdHMsIHZpZXdzLCBlbGVtZW50UmVmcywgdmlld0NvbnRhaW5lcnMpO1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwYXJlbnRWaWV3KSAmJiBwcm90b1ZpZXcudHlwZSA9PT0gdmlld01vZHVsZS5WaWV3VHlwZS5DT01QT05FTlQpIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudFZpZXcuY2hhbmdlRGV0ZWN0b3IuYWRkU2hhZG93RG9tQ2hpbGQoY3VycmVudFZpZXcuY2hhbmdlRGV0ZWN0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsZW1lbnRPZmZzZXQgKz0gcHJvdG9WaWV3LmVsZW1lbnRCaW5kZXJzLmxlbmd0aDtcclxuICAgICAgICAgICAgdGV4dE9mZnNldCArPSBwcm90b1ZpZXcudGV4dEJpbmRpbmdDb3VudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZpZXdzWzBdO1xyXG4gICAgfTtcclxuICAgIEFwcFZpZXdNYW5hZ2VyVXRpbHMucHJvdG90eXBlLmh5ZHJhdGVSb290SG9zdFZpZXcgPSBmdW5jdGlvbiAoaG9zdFZpZXcsIGluamVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5faHlkcmF0ZVZpZXcoaG9zdFZpZXcsIGluamVjdG9yLCBudWxsLCBuZXcgT2JqZWN0KCksIG51bGwpO1xyXG4gICAgfTtcclxuICAgIC8vIE1pc25vbWVyOiB0aGlzIG1ldGhvZCBpcyBhdHRhY2hpbmcgbmV4dCB0byB0aGUgdmlldyBjb250YWluZXIuXHJcbiAgICBBcHBWaWV3TWFuYWdlclV0aWxzLnByb3RvdHlwZS5hdHRhY2hWaWV3SW5Db250YWluZXIgPSBmdW5jdGlvbiAocGFyZW50VmlldywgYm91bmRFbGVtZW50SW5kZXgsIGNvbnRleHRWaWV3LCBjb250ZXh0Qm91bmRFbGVtZW50SW5kZXgsIGluZGV4LCB2aWV3KSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKGNvbnRleHRWaWV3KSkge1xyXG4gICAgICAgICAgICBjb250ZXh0VmlldyA9IHBhcmVudFZpZXc7XHJcbiAgICAgICAgICAgIGNvbnRleHRCb3VuZEVsZW1lbnRJbmRleCA9IGJvdW5kRWxlbWVudEluZGV4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBwYXJlbnRWaWV3LmNoYW5nZURldGVjdG9yLmFkZENoaWxkKHZpZXcuY2hhbmdlRGV0ZWN0b3IpO1xyXG4gICAgICAgIHZhciB2aWV3Q29udGFpbmVyID0gcGFyZW50Vmlldy52aWV3Q29udGFpbmVyc1tib3VuZEVsZW1lbnRJbmRleF07XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHZpZXdDb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgIHZpZXdDb250YWluZXIgPSBuZXcgdmlld01vZHVsZS5BcHBWaWV3Q29udGFpbmVyKCk7XHJcbiAgICAgICAgICAgIHBhcmVudFZpZXcudmlld0NvbnRhaW5lcnNbYm91bmRFbGVtZW50SW5kZXhdID0gdmlld0NvbnRhaW5lcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmluc2VydCh2aWV3Q29udGFpbmVyLnZpZXdzLCBpbmRleCwgdmlldyk7XHJcbiAgICAgICAgdmFyIGVsZW1lbnRJbmplY3RvciA9IGNvbnRleHRWaWV3LmVsZW1lbnRJbmplY3RvcnNbY29udGV4dEJvdW5kRWxlbWVudEluZGV4XTtcclxuICAgICAgICBmb3IgKHZhciBpID0gdmlldy5yb290RWxlbWVudEluamVjdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChlbGVtZW50SW5qZWN0b3IucGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgdmlldy5yb290RWxlbWVudEluamVjdG9yc1tpXS5saW5rKGVsZW1lbnRJbmplY3Rvci5wYXJlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsZW1lbnRJbmplY3Rvci50cmF2ZXJzZUFuZFNldFF1ZXJpZXNBc0RpcnR5KCk7XHJcbiAgICB9O1xyXG4gICAgQXBwVmlld01hbmFnZXJVdGlscy5wcm90b3R5cGUuZGV0YWNoVmlld0luQ29udGFpbmVyID0gZnVuY3Rpb24gKHBhcmVudFZpZXcsIGJvdW5kRWxlbWVudEluZGV4LCBpbmRleCkge1xyXG4gICAgICAgIHZhciB2aWV3Q29udGFpbmVyID0gcGFyZW50Vmlldy52aWV3Q29udGFpbmVyc1tib3VuZEVsZW1lbnRJbmRleF07XHJcbiAgICAgICAgdmFyIHZpZXcgPSB2aWV3Q29udGFpbmVyLnZpZXdzW2luZGV4XTtcclxuICAgICAgICBwYXJlbnRWaWV3LmVsZW1lbnRJbmplY3RvcnNbYm91bmRFbGVtZW50SW5kZXhdLnRyYXZlcnNlQW5kU2V0UXVlcmllc0FzRGlydHkoKTtcclxuICAgICAgICB2aWV3LmNoYW5nZURldGVjdG9yLnJlbW92ZSgpO1xyXG4gICAgICAgIGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5yZW1vdmVBdCh2aWV3Q29udGFpbmVyLnZpZXdzLCBpbmRleCk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3LnJvb3RFbGVtZW50SW5qZWN0b3JzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHZhciBpbmogPSB2aWV3LnJvb3RFbGVtZW50SW5qZWN0b3JzW2ldO1xyXG4gICAgICAgICAgICBpbmoudW5saW5rKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFwcFZpZXdNYW5hZ2VyVXRpbHMucHJvdG90eXBlLmh5ZHJhdGVWaWV3SW5Db250YWluZXIgPSBmdW5jdGlvbiAocGFyZW50VmlldywgYm91bmRFbGVtZW50SW5kZXgsIGNvbnRleHRWaWV3LCBjb250ZXh0Qm91bmRFbGVtZW50SW5kZXgsIGluZGV4LCBpbXBlcmF0aXZlbHlDcmVhdGVkUHJvdmlkZXJzKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKGNvbnRleHRWaWV3KSkge1xyXG4gICAgICAgICAgICBjb250ZXh0VmlldyA9IHBhcmVudFZpZXc7XHJcbiAgICAgICAgICAgIGNvbnRleHRCb3VuZEVsZW1lbnRJbmRleCA9IGJvdW5kRWxlbWVudEluZGV4O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmlld0NvbnRhaW5lciA9IHBhcmVudFZpZXcudmlld0NvbnRhaW5lcnNbYm91bmRFbGVtZW50SW5kZXhdO1xyXG4gICAgICAgIHZhciB2aWV3ID0gdmlld0NvbnRhaW5lci52aWV3c1tpbmRleF07XHJcbiAgICAgICAgdmFyIGVsZW1lbnRJbmplY3RvciA9IGNvbnRleHRWaWV3LmVsZW1lbnRJbmplY3RvcnNbY29udGV4dEJvdW5kRWxlbWVudEluZGV4XTtcclxuICAgICAgICB2YXIgaW5qZWN0b3IgPSBsYW5nXzEuaXNQcmVzZW50KGltcGVyYXRpdmVseUNyZWF0ZWRQcm92aWRlcnMpID9cclxuICAgICAgICAgICAgZGlfMS5JbmplY3Rvci5mcm9tUmVzb2x2ZWRQcm92aWRlcnMoaW1wZXJhdGl2ZWx5Q3JlYXRlZFByb3ZpZGVycykgOlxyXG4gICAgICAgICAgICBudWxsO1xyXG4gICAgICAgIHRoaXMuX2h5ZHJhdGVWaWV3KHZpZXcsIGluamVjdG9yLCBlbGVtZW50SW5qZWN0b3IuZ2V0SG9zdCgpLCBjb250ZXh0Vmlldy5jb250ZXh0LCBjb250ZXh0Vmlldy5sb2NhbHMpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIEFwcFZpZXdNYW5hZ2VyVXRpbHMucHJvdG90eXBlLl9oeWRyYXRlVmlldyA9IGZ1bmN0aW9uIChpbml0VmlldywgaW1wZXJhdGl2ZWx5Q3JlYXRlZEluamVjdG9yLCBob3N0RWxlbWVudEluamVjdG9yLCBjb250ZXh0LCBwYXJlbnRMb2NhbHMpIHtcclxuICAgICAgICB2YXIgdmlld0lkeCA9IGluaXRWaWV3LnZpZXdPZmZzZXQ7XHJcbiAgICAgICAgdmFyIGVuZFZpZXdPZmZzZXQgPSB2aWV3SWR4ICsgaW5pdFZpZXcucHJvdG8ubWVyZ2VJbmZvLnZpZXdDb3VudCAtIDE7XHJcbiAgICAgICAgd2hpbGUgKHZpZXdJZHggPD0gZW5kVmlld09mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgY3VyclZpZXcgPSBpbml0Vmlldy52aWV3c1t2aWV3SWR4XTtcclxuICAgICAgICAgICAgdmFyIGN1cnJQcm90b1ZpZXcgPSBjdXJyVmlldy5wcm90bztcclxuICAgICAgICAgICAgaWYgKGN1cnJWaWV3ICE9PSBpbml0VmlldyAmJiBjdXJyVmlldy5wcm90by50eXBlID09PSB2aWV3TW9kdWxlLlZpZXdUeXBlLkVNQkVEREVEKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBEb24ndCBoeWRyYXRlIGNvbXBvbmVudHMgb2YgZW1iZWRkZWQgZnJhZ21lbnQgdmlld3MuXHJcbiAgICAgICAgICAgICAgICB2aWV3SWR4ICs9IGN1cnJWaWV3LnByb3RvLm1lcmdlSW5mby52aWV3Q291bnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VyclZpZXcgIT09IGluaXRWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaHlkcmF0ZSBhIG5lc3RlZCBjb21wb25lbnQgdmlld1xyXG4gICAgICAgICAgICAgICAgICAgIGltcGVyYXRpdmVseUNyZWF0ZWRJbmplY3RvciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50TG9jYWxzID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBob3N0RWxlbWVudEluamVjdG9yID0gY3VyclZpZXcuY29udGFpbmVyRWxlbWVudEluamVjdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBob3N0RWxlbWVudEluamVjdG9yLmdldENvbXBvbmVudCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY3VyclZpZXcuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgICAgICAgICBjdXJyVmlldy5sb2NhbHMucGFyZW50ID0gcGFyZW50TG9jYWxzO1xyXG4gICAgICAgICAgICAgICAgdmFyIGJpbmRlcnMgPSBjdXJyUHJvdG9WaWV3LmVsZW1lbnRCaW5kZXJzO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYmluZGVySWR4ID0gMDsgYmluZGVySWR4IDwgYmluZGVycy5sZW5ndGg7IGJpbmRlcklkeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvdW5kRWxlbWVudEluZGV4ID0gYmluZGVySWR4ICsgY3VyclZpZXcuZWxlbWVudE9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudEluamVjdG9yID0gaW5pdFZpZXcuZWxlbWVudEluamVjdG9yc1tib3VuZEVsZW1lbnRJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoZWxlbWVudEluamVjdG9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50SW5qZWN0b3IuaHlkcmF0ZShpbXBlcmF0aXZlbHlDcmVhdGVkSW5qZWN0b3IsIGhvc3RFbGVtZW50SW5qZWN0b3IsIGN1cnJWaWV3LnByZUJ1aWx0T2JqZWN0c1tib3VuZEVsZW1lbnRJbmRleF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3B1bGF0ZVZpZXdMb2NhbHMoY3VyclZpZXcsIGVsZW1lbnRJbmplY3RvciwgYm91bmRFbGVtZW50SW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRVcEV2ZW50RW1pdHRlcnMoY3VyclZpZXcsIGVsZW1lbnRJbmplY3RvciwgYm91bmRFbGVtZW50SW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBwaXBlcyA9IGxhbmdfMS5pc1ByZXNlbnQoaG9zdEVsZW1lbnRJbmplY3RvcikgP1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBwaXBlc18xLlBpcGVzKGN1cnJWaWV3LnByb3RvLnBpcGVzLCBob3N0RWxlbWVudEluamVjdG9yLmdldEluamVjdG9yKCkpIDpcclxuICAgICAgICAgICAgICAgICAgICBudWxsO1xyXG4gICAgICAgICAgICAgICAgY3VyclZpZXcuY2hhbmdlRGV0ZWN0b3IuaHlkcmF0ZShjdXJyVmlldy5jb250ZXh0LCBjdXJyVmlldy5sb2NhbHMsIGN1cnJWaWV3LCBwaXBlcyk7XHJcbiAgICAgICAgICAgICAgICB2aWV3SWR4Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQXBwVmlld01hbmFnZXJVdGlscy5wcm90b3R5cGUuX3BvcHVsYXRlVmlld0xvY2FscyA9IGZ1bmN0aW9uICh2aWV3LCBlbGVtZW50SW5qZWN0b3IsIGJvdW5kRWxlbWVudElkeCkge1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGVsZW1lbnRJbmplY3Rvci5nZXREaXJlY3RpdmVWYXJpYWJsZUJpbmRpbmdzKCkpKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnRJbmplY3Rvci5nZXREaXJlY3RpdmVWYXJpYWJsZUJpbmRpbmdzKCkuZm9yRWFjaChmdW5jdGlvbiAoZGlyZWN0aXZlSW5kZXgsIG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhkaXJlY3RpdmVJbmRleCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3LmxvY2Fscy5zZXQobmFtZSwgdmlldy5lbGVtZW50UmVmc1tib3VuZEVsZW1lbnRJZHhdLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlldy5sb2NhbHMuc2V0KG5hbWUsIGVsZW1lbnRJbmplY3Rvci5nZXREaXJlY3RpdmVBdEluZGV4KGRpcmVjdGl2ZUluZGV4KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBBcHBWaWV3TWFuYWdlclV0aWxzLnByb3RvdHlwZS5fc2V0VXBFdmVudEVtaXR0ZXJzID0gZnVuY3Rpb24gKHZpZXcsIGVsZW1lbnRJbmplY3RvciwgYm91bmRFbGVtZW50SW5kZXgpIHtcclxuICAgICAgICB2YXIgZW1pdHRlcnMgPSBlbGVtZW50SW5qZWN0b3IuZ2V0RXZlbnRFbWl0dGVyQWNjZXNzb3JzKCk7XHJcbiAgICAgICAgZm9yICh2YXIgZGlyZWN0aXZlSW5kZXggPSAwOyBkaXJlY3RpdmVJbmRleCA8IGVtaXR0ZXJzLmxlbmd0aDsgKytkaXJlY3RpdmVJbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgZGlyZWN0aXZlRW1pdHRlcnMgPSBlbWl0dGVyc1tkaXJlY3RpdmVJbmRleF07XHJcbiAgICAgICAgICAgIHZhciBkaXJlY3RpdmUgPSBlbGVtZW50SW5qZWN0b3IuZ2V0RGlyZWN0aXZlQXRJbmRleChkaXJlY3RpdmVJbmRleCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGV2ZW50SW5kZXggPSAwOyBldmVudEluZGV4IDwgZGlyZWN0aXZlRW1pdHRlcnMubGVuZ3RoOyArK2V2ZW50SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBldmVudEVtaXR0ZXJBY2Nlc3NvciA9IGRpcmVjdGl2ZUVtaXR0ZXJzW2V2ZW50SW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgZXZlbnRFbWl0dGVyQWNjZXNzb3Iuc3Vic2NyaWJlKHZpZXcsIGJvdW5kRWxlbWVudEluZGV4LCBkaXJlY3RpdmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFwcFZpZXdNYW5hZ2VyVXRpbHMucHJvdG90eXBlLmRlaHlkcmF0ZVZpZXcgPSBmdW5jdGlvbiAoaW5pdFZpZXcpIHtcclxuICAgICAgICB2YXIgZW5kVmlld09mZnNldCA9IGluaXRWaWV3LnZpZXdPZmZzZXQgKyBpbml0Vmlldy5wcm90by5tZXJnZUluZm8udmlld0NvdW50IC0gMTtcclxuICAgICAgICBmb3IgKHZhciB2aWV3SWR4ID0gaW5pdFZpZXcudmlld09mZnNldDsgdmlld0lkeCA8PSBlbmRWaWV3T2Zmc2V0OyB2aWV3SWR4KyspIHtcclxuICAgICAgICAgICAgdmFyIGN1cnJWaWV3ID0gaW5pdFZpZXcudmlld3Nbdmlld0lkeF07XHJcbiAgICAgICAgICAgIGlmIChjdXJyVmlldy5oeWRyYXRlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChjdXJyVmlldy5sb2NhbHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyclZpZXcubG9jYWxzLmNsZWFyVmFsdWVzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjdXJyVmlldy5jb250ZXh0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGN1cnJWaWV3LmNoYW5nZURldGVjdG9yLmRlaHlkcmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGJpbmRlcnMgPSBjdXJyVmlldy5wcm90by5lbGVtZW50QmluZGVycztcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGJpbmRlcklkeCA9IDA7IGJpbmRlcklkeCA8IGJpbmRlcnMubGVuZ3RoOyBiaW5kZXJJZHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGkgPSBpbml0Vmlldy5lbGVtZW50SW5qZWN0b3JzW2N1cnJWaWV3LmVsZW1lbnRPZmZzZXQgKyBiaW5kZXJJZHhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGVsaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxpLmRlaHlkcmF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBcHBWaWV3TWFuYWdlclV0aWxzID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgZGlfMS5JbmplY3RhYmxlKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXHJcbiAgICBdLCBBcHBWaWV3TWFuYWdlclV0aWxzKTtcclxuICAgIHJldHVybiBBcHBWaWV3TWFuYWdlclV0aWxzO1xyXG59KSgpO1xyXG5leHBvcnRzLkFwcFZpZXdNYW5hZ2VyVXRpbHMgPSBBcHBWaWV3TWFuYWdlclV0aWxzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWV3X21hbmFnZXJfdXRpbHMuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBfX3BhcmFtID0gKHRoaXMgJiYgdGhpcy5fX3BhcmFtKSB8fCBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbmV4cG9ydHMuQVBQX1ZJRVdfUE9PTF9DQVBBQ0lUWSA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBkaV8xLk9wYXF1ZVRva2VuKCdBcHBWaWV3UG9vbC52aWV3UG9vbENhcGFjaXR5JykpO1xyXG52YXIgQXBwVmlld1Bvb2wgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXBwVmlld1Bvb2wocG9vbENhcGFjaXR5UGVyUHJvdG9WaWV3KSB7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX3Bvb2xlZFZpZXdzUGVyUHJvdG9WaWV3ID0gbmV3IGNvbGxlY3Rpb25fMS5NYXAoKTtcclxuICAgICAgICB0aGlzLl9wb29sQ2FwYWNpdHlQZXJQcm90b1ZpZXcgPSBwb29sQ2FwYWNpdHlQZXJQcm90b1ZpZXc7XHJcbiAgICB9XHJcbiAgICBBcHBWaWV3UG9vbC5wcm90b3R5cGUuZ2V0VmlldyA9IGZ1bmN0aW9uIChwcm90b1ZpZXcpIHtcclxuICAgICAgICB2YXIgcG9vbGVkVmlld3MgPSB0aGlzLl9wb29sZWRWaWV3c1BlclByb3RvVmlldy5nZXQocHJvdG9WaWV3KTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwb29sZWRWaWV3cykgJiYgcG9vbGVkVmlld3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcG9vbGVkVmlld3MucG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIEFwcFZpZXdQb29sLnByb3RvdHlwZS5yZXR1cm5WaWV3ID0gZnVuY3Rpb24gKHZpZXcpIHtcclxuICAgICAgICB2YXIgcHJvdG9WaWV3ID0gdmlldy5wcm90bztcclxuICAgICAgICB2YXIgcG9vbGVkVmlld3MgPSB0aGlzLl9wb29sZWRWaWV3c1BlclByb3RvVmlldy5nZXQocHJvdG9WaWV3KTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsocG9vbGVkVmlld3MpKSB7XHJcbiAgICAgICAgICAgIHBvb2xlZFZpZXdzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuX3Bvb2xlZFZpZXdzUGVyUHJvdG9WaWV3LnNldChwcm90b1ZpZXcsIHBvb2xlZFZpZXdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGhhdmVSZW1haW5pbmdDYXBhY2l0eSA9IHBvb2xlZFZpZXdzLmxlbmd0aCA8IHRoaXMuX3Bvb2xDYXBhY2l0eVBlclByb3RvVmlldztcclxuICAgICAgICBpZiAoaGF2ZVJlbWFpbmluZ0NhcGFjaXR5KSB7XHJcbiAgICAgICAgICAgIHBvb2xlZFZpZXdzLnB1c2godmlldyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoYXZlUmVtYWluaW5nQ2FwYWNpdHk7XHJcbiAgICB9O1xyXG4gICAgQXBwVmlld1Bvb2wgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSxcclxuICAgICAgICBfX3BhcmFtKDAsIGRpXzEuSW5qZWN0KGV4cG9ydHMuQVBQX1ZJRVdfUE9PTF9DQVBBQ0lUWSkpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtPYmplY3RdKVxyXG4gICAgXSwgQXBwVmlld1Bvb2wpO1xyXG4gICAgcmV0dXJuIEFwcFZpZXdQb29sO1xyXG59KSgpO1xyXG5leHBvcnRzLkFwcFZpZXdQb29sID0gQXBwVmlld1Bvb2w7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZpZXdfcG9vbC5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG4vLyBUaGlzIGlzIGEgd29ya2Fyb3VuZCBmb3IgcHJpdmFjeSBpbiBEYXJ0IGFzIHdlIGRvbid0IGhhdmUgbGlicmFyeSBwYXJ0c1xyXG5mdW5jdGlvbiBpbnRlcm5hbFZpZXcodmlld1JlZikge1xyXG4gICAgcmV0dXJuIHZpZXdSZWYuX3ZpZXc7XHJcbn1cclxuZXhwb3J0cy5pbnRlcm5hbFZpZXcgPSBpbnRlcm5hbFZpZXc7XHJcbi8vIFRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciBwcml2YWN5IGluIERhcnQgYXMgd2UgZG9uJ3QgaGF2ZSBsaWJyYXJ5IHBhcnRzXHJcbmZ1bmN0aW9uIGludGVybmFsUHJvdG9WaWV3KHByb3RvVmlld1JlZikge1xyXG4gICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQocHJvdG9WaWV3UmVmKSA/IHByb3RvVmlld1JlZi5fcHJvdG9WaWV3IDogbnVsbDtcclxufVxyXG5leHBvcnRzLmludGVybmFsUHJvdG9WaWV3ID0gaW50ZXJuYWxQcm90b1ZpZXc7XHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGFuIEFuZ3VsYXIgVmlldy5cclxuICpcclxuICogPCEtLSBUT0RPOiBtb3ZlIHRoZSBuZXh0IHR3byBwYXJhZ3JhcGhzIHRvIHRoZSBkZXYgZ3VpZGUgLS0+XHJcbiAqIEEgVmlldyBpcyBhIGZ1bmRhbWVudGFsIGJ1aWxkaW5nIGJsb2NrIG9mIHRoZSBhcHBsaWNhdGlvbiBVSS4gSXQgaXMgdGhlIHNtYWxsZXN0IGdyb3VwaW5nIG9mXHJcbiAqIEVsZW1lbnRzIHdoaWNoIGFyZSBjcmVhdGVkIGFuZCBkZXN0cm95ZWQgdG9nZXRoZXIuXHJcbiAqXHJcbiAqIFByb3BlcnRpZXMgb2YgZWxlbWVudHMgaW4gYSBWaWV3IGNhbiBjaGFuZ2UsIGJ1dCB0aGUgc3RydWN0dXJlIChudW1iZXIgYW5kIG9yZGVyKSBvZiBlbGVtZW50cyBpblxyXG4gKiBhIFZpZXcgY2Fubm90LiBDaGFuZ2luZyB0aGUgc3RydWN0dXJlIG9mIEVsZW1lbnRzIGNhbiBvbmx5IGJlIGRvbmUgYnkgaW5zZXJ0aW5nLCBtb3Zpbmcgb3JcclxuICogcmVtb3ZpbmcgbmVzdGVkIFZpZXdzIHZpYSBhIHtAbGluayBWaWV3Q29udGFpbmVyfS4gRWFjaCBWaWV3IGNhbiBjb250YWluIG1hbnkgVmlldyBDb250YWluZXJzLlxyXG4gKiA8IS0tIC9UT0RPIC0tPlxyXG4gKlxyXG4gKiAjIyBFeGFtcGxlXHJcbiAqXHJcbiAqIEdpdmVuIHRoaXMgdGVtcGxhdGUuLi5cclxuICpcclxuICogYGBgXHJcbiAqIENvdW50OiB7e2l0ZW1zLmxlbmd0aH19XHJcbiAqIDx1bD5cclxuICogICA8bGkgKm5nLWZvcj1cInZhciBpdGVtIG9mIGl0ZW1zXCI+e3tpdGVtfX08L2xpPlxyXG4gKiA8L3VsPlxyXG4gKiBgYGBcclxuICpcclxuICogLi4uIHdlIGhhdmUgdHdvIHtAbGluayBQcm90b1ZpZXdSZWZ9czpcclxuICpcclxuICogT3V0ZXIge0BsaW5rIFByb3RvVmlld1JlZn06XHJcbiAqIGBgYFxyXG4gKiBDb3VudDoge3tpdGVtcy5sZW5ndGh9fVxyXG4gKiA8dWw+XHJcbiAqICAgPHRlbXBsYXRlIG5nLWZvciB2YXItaXRlbSBbbmctZm9yLW9mXT1cIml0ZW1zXCI+PC90ZW1wbGF0ZT5cclxuICogPC91bD5cclxuICogYGBgXHJcbiAqXHJcbiAqIElubmVyIHtAbGluayBQcm90b1ZpZXdSZWZ9OlxyXG4gKiBgYGBcclxuICogICA8bGk+e3tpdGVtfX08L2xpPlxyXG4gKiBgYGBcclxuICpcclxuICogTm90aWNlIHRoYXQgdGhlIG9yaWdpbmFsIHRlbXBsYXRlIGlzIGJyb2tlbiBkb3duIGludG8gdHdvIHNlcGFyYXRlIHtAbGluayBQcm90b1ZpZXdSZWZ9cy5cclxuICpcclxuICogVGhlIG91dGVyL2lubmVyIHtAbGluayBQcm90b1ZpZXdSZWZ9cyBhcmUgdGhlbiBhc3NlbWJsZWQgaW50byB2aWV3cyBsaWtlIHNvOlxyXG4gKlxyXG4gKiBgYGBcclxuICogPCEtLSBWaWV3UmVmOiBvdXRlci0wIC0tPlxyXG4gKiBDb3VudDogMlxyXG4gKiA8dWw+XHJcbiAqICAgPHRlbXBsYXRlIHZpZXctY29udGFpbmVyLXJlZj48L3RlbXBsYXRlPlxyXG4gKiAgIDwhLS0gVmlld1JlZjogaW5uZXItMSAtLT48bGk+Zmlyc3Q8L2xpPjwhLS0gL1ZpZXdSZWY6IGlubmVyLTEgLS0+XHJcbiAqICAgPCEtLSBWaWV3UmVmOiBpbm5lci0yIC0tPjxsaT5zZWNvbmQ8L2xpPjwhLS0gL1ZpZXdSZWY6IGlubmVyLTIgLS0+XHJcbiAqIDwvdWw+XHJcbiAqIDwhLS0gL1ZpZXdSZWY6IG91dGVyLTAgLS0+XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIFZpZXdSZWYgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVmlld1JlZigpIHtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaWV3UmVmLnByb3RvdHlwZSwgXCJjaGFuZ2VEZXRlY3RvclJlZlwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleGNlcHRpb25zXzEudW5pbXBsZW1lbnRlZCgpOyB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGV4Y2VwdGlvbnNfMS51bmltcGxlbWVudGVkKCk7IC8vIFRPRE86IGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBWaWV3UmVmO1xyXG59KSgpO1xyXG5leHBvcnRzLlZpZXdSZWYgPSBWaWV3UmVmO1xyXG52YXIgVmlld1JlZl8gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFZpZXdSZWZfLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gVmlld1JlZl8oX3ZpZXcpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fdmlldyA9IF92aWV3O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpZXdSZWZfLnByb3RvdHlwZSwgXCJyZW5kZXJcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybiBgUmVuZGVyVmlld1JlZmBcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3ZpZXcucmVuZGVyOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaWV3UmVmXy5wcm90b3R5cGUsIFwicmVuZGVyRnJhZ21lbnRcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybiBgUmVuZGVyRnJhZ21lbnRSZWZgXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl92aWV3LnJlbmRlckZyYWdtZW50OyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaWV3UmVmXy5wcm90b3R5cGUsIFwiY2hhbmdlRGV0ZWN0b3JSZWZcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybiBgQ2hhbmdlRGV0ZWN0b3JSZWZgXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYgPSB0aGlzLl92aWV3LmNoYW5nZURldGVjdG9yLnJlZjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWY7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBWaWV3UmVmXy5wcm90b3R5cGUuc2V0TG9jYWwgPSBmdW5jdGlvbiAodmFyaWFibGVOYW1lLCB2YWx1ZSkgeyB0aGlzLl92aWV3LnNldExvY2FsKHZhcmlhYmxlTmFtZSwgdmFsdWUpOyB9O1xyXG4gICAgcmV0dXJuIFZpZXdSZWZfO1xyXG59KShWaWV3UmVmKTtcclxuZXhwb3J0cy5WaWV3UmVmXyA9IFZpZXdSZWZfO1xyXG4vKipcclxuICogUmVwcmVzZW50cyBhbiBBbmd1bGFyIFByb3RvVmlldy5cclxuICpcclxuICogQSBQcm90b1ZpZXcgaXMgYSBwcm90b3R5cGljYWwge0BsaW5rIFZpZXdSZWYgVmlld30gdGhhdCBpcyB0aGUgcmVzdWx0IG9mIFRlbXBsYXRlIGNvbXBpbGF0aW9uIGFuZFxyXG4gKiBpcyB1c2VkIGJ5IEFuZ3VsYXIgdG8gZWZmaWNpZW50bHkgY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgVmlldyBiYXNlZCBvbiB0aGUgY29tcGlsZWQgVGVtcGxhdGUuXHJcbiAqXHJcbiAqIE1vc3QgUHJvdG9WaWV3cyBhcmUgY3JlYXRlZCBhbmQgdXNlZCBpbnRlcm5hbGx5IGJ5IEFuZ3VsYXIgYW5kIHlvdSBkb24ndCBuZWVkIHRvIGtub3cgYWJvdXQgdGhlbSxcclxuICogZXhjZXB0IGluIGFkdmFuY2VkIHVzZS1jYXNlcyB3aGVyZSB5b3UgY29tcGlsZSBjb21wb25lbnRzIHlvdXJzZWxmIHZpYSB0aGUgbG93LWxldmVsXHJcbiAqIHtAbGluayBDb21waWxlciNjb21waWxlSW5Ib3N0fSBBUEkuXHJcbiAqXHJcbiAqXHJcbiAqICMjIEV4YW1wbGVcclxuICpcclxuICogR2l2ZW4gdGhpcyB0ZW1wbGF0ZTpcclxuICpcclxuICogYGBgXHJcbiAqIENvdW50OiB7e2l0ZW1zLmxlbmd0aH19XHJcbiAqIDx1bD5cclxuICogICA8bGkgKm5nLWZvcj1cInZhciBpdGVtIG9mIGl0ZW1zXCI+e3tpdGVtfX08L2xpPlxyXG4gKiA8L3VsPlxyXG4gKiBgYGBcclxuICpcclxuICogQW5ndWxhciBkZXN1Z2FycyBhbmQgY29tcGlsZXMgdGhlIHRlbXBsYXRlIGludG8gdHdvIFByb3RvVmlld3M6XHJcbiAqXHJcbiAqIE91dGVyIFByb3RvVmlldzpcclxuICogYGBgXHJcbiAqIENvdW50OiB7e2l0ZW1zLmxlbmd0aH19XHJcbiAqIDx1bD5cclxuICogICA8dGVtcGxhdGUgbmctZm9yIHZhci1pdGVtIFtuZy1mb3Itb2ZdPVwiaXRlbXNcIj48L3RlbXBsYXRlPlxyXG4gKiA8L3VsPlxyXG4gKiBgYGBcclxuICpcclxuICogSW5uZXIgUHJvdG9WaWV3OlxyXG4gKiBgYGBcclxuICogICA8bGk+e3tpdGVtfX08L2xpPlxyXG4gKiBgYGBcclxuICpcclxuICogTm90aWNlIHRoYXQgdGhlIG9yaWdpbmFsIHRlbXBsYXRlIGlzIGJyb2tlbiBkb3duIGludG8gdHdvIHNlcGFyYXRlIFByb3RvVmlld3MuXHJcbiAqL1xyXG52YXIgUHJvdG9WaWV3UmVmID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFByb3RvVmlld1JlZigpIHtcclxuICAgIH1cclxuICAgIHJldHVybiBQcm90b1ZpZXdSZWY7XHJcbn0pKCk7XHJcbmV4cG9ydHMuUHJvdG9WaWV3UmVmID0gUHJvdG9WaWV3UmVmO1xyXG52YXIgUHJvdG9WaWV3UmVmXyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUHJvdG9WaWV3UmVmXywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFByb3RvVmlld1JlZl8oX3Byb3RvVmlldykge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX3Byb3RvVmlldyA9IF9wcm90b1ZpZXc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvdG9WaWV3UmVmXztcclxufSkoUHJvdG9WaWV3UmVmKTtcclxuZXhwb3J0cy5Qcm90b1ZpZXdSZWZfID0gUHJvdG9WaWV3UmVmXztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmlld19yZWYuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIHZpZXdfMSA9IHJlcXVpcmUoJy4uL21ldGFkYXRhL3ZpZXcnKTtcclxudmFyIGRpcmVjdGl2ZXNfMSA9IHJlcXVpcmUoJy4uL21ldGFkYXRhL2RpcmVjdGl2ZXMnKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIHJlZmxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL3JlZmxlY3Rpb24vcmVmbGVjdGlvbicpO1xyXG52YXIgVmlld1Jlc29sdmVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFZpZXdSZXNvbHZlcigpIHtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5fY2FjaGUgPSBuZXcgY29sbGVjdGlvbl8xLk1hcCgpO1xyXG4gICAgfVxyXG4gICAgVmlld1Jlc29sdmVyLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG4gICAgICAgIHZhciB2aWV3ID0gdGhpcy5fY2FjaGUuZ2V0KGNvbXBvbmVudCk7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHZpZXcpKSB7XHJcbiAgICAgICAgICAgIHZpZXcgPSB0aGlzLl9yZXNvbHZlKGNvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlLnNldChjb21wb25lbnQsIHZpZXcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmlldztcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBWaWV3UmVzb2x2ZXIucHJvdG90eXBlLl9yZXNvbHZlID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG4gICAgICAgIHZhciBjb21wTWV0YTtcclxuICAgICAgICB2YXIgdmlld01ldGE7XHJcbiAgICAgICAgcmVmbGVjdGlvbl8xLnJlZmxlY3Rvci5hbm5vdGF0aW9ucyhjb21wb25lbnQpLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcclxuICAgICAgICAgICAgaWYgKG0gaW5zdGFuY2VvZiB2aWV3XzEuVmlld01ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2aWV3TWV0YSA9IG07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG0gaW5zdGFuY2VvZiBkaXJlY3RpdmVzXzEuQ29tcG9uZW50TWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBNZXRhID0gbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGNvbXBNZXRhKSkge1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoY29tcE1ldGEudGVtcGxhdGUpICYmIGxhbmdfMS5pc0JsYW5rKGNvbXBNZXRhLnRlbXBsYXRlVXJsKSAmJiBsYW5nXzEuaXNCbGFuayh2aWV3TWV0YSkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihcIkNvbXBvbmVudCAnXCIgKyBsYW5nXzEuc3RyaW5naWZ5KGNvbXBvbmVudCkgKyBcIicgbXVzdCBoYXZlIGVpdGhlciAndGVtcGxhdGUnLCAndGVtcGxhdGVVcmwnLCBvciAnQFZpZXcnIHNldC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobGFuZ18xLmlzUHJlc2VudChjb21wTWV0YS50ZW1wbGF0ZSkgJiYgbGFuZ18xLmlzUHJlc2VudCh2aWV3TWV0YSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Rocm93TWl4aW5nVmlld0FuZENvbXBvbmVudChcInRlbXBsYXRlXCIsIGNvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobGFuZ18xLmlzUHJlc2VudChjb21wTWV0YS50ZW1wbGF0ZVVybCkgJiYgbGFuZ18xLmlzUHJlc2VudCh2aWV3TWV0YSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Rocm93TWl4aW5nVmlld0FuZENvbXBvbmVudChcInRlbXBsYXRlVXJsXCIsIGNvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobGFuZ18xLmlzUHJlc2VudChjb21wTWV0YS5kaXJlY3RpdmVzKSAmJiBsYW5nXzEuaXNQcmVzZW50KHZpZXdNZXRhKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGhyb3dNaXhpbmdWaWV3QW5kQ29tcG9uZW50KFwiZGlyZWN0aXZlc1wiLCBjb21wb25lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGxhbmdfMS5pc1ByZXNlbnQoY29tcE1ldGEucGlwZXMpICYmIGxhbmdfMS5pc1ByZXNlbnQodmlld01ldGEpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90aHJvd01peGluZ1ZpZXdBbmRDb21wb25lbnQoXCJwaXBlc1wiLCBjb21wb25lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGxhbmdfMS5pc1ByZXNlbnQoY29tcE1ldGEuZW5jYXBzdWxhdGlvbikgJiYgbGFuZ18xLmlzUHJlc2VudCh2aWV3TWV0YSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Rocm93TWl4aW5nVmlld0FuZENvbXBvbmVudChcImVuY2Fwc3VsYXRpb25cIiwgY29tcG9uZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChsYW5nXzEuaXNQcmVzZW50KGNvbXBNZXRhLnN0eWxlcykgJiYgbGFuZ18xLmlzUHJlc2VudCh2aWV3TWV0YSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Rocm93TWl4aW5nVmlld0FuZENvbXBvbmVudChcInN0eWxlc1wiLCBjb21wb25lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGxhbmdfMS5pc1ByZXNlbnQoY29tcE1ldGEuc3R5bGVVcmxzKSAmJiBsYW5nXzEuaXNQcmVzZW50KHZpZXdNZXRhKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGhyb3dNaXhpbmdWaWV3QW5kQ29tcG9uZW50KFwic3R5bGVVcmxzXCIsIGNvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobGFuZ18xLmlzUHJlc2VudCh2aWV3TWV0YSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2aWV3TWV0YTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdmlld18xLlZpZXdNZXRhZGF0YSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IGNvbXBNZXRhLnRlbXBsYXRlVXJsLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBjb21wTWV0YS50ZW1wbGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBjb21wTWV0YS5kaXJlY3RpdmVzLFxyXG4gICAgICAgICAgICAgICAgICAgIHBpcGVzOiBjb21wTWV0YS5waXBlcyxcclxuICAgICAgICAgICAgICAgICAgICBlbmNhcHN1bGF0aW9uOiBjb21wTWV0YS5lbmNhcHN1bGF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlczogY29tcE1ldGEuc3R5bGVzLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlVXJsczogY29tcE1ldGEuc3R5bGVVcmxzXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHZpZXdNZXRhKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKFwiTm8gVmlldyBkZWNvcmF0b3IgZm91bmQgb24gY29tcG9uZW50ICdcIiArIGxhbmdfMS5zdHJpbmdpZnkoY29tcG9uZW50KSArIFwiJ1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2aWV3TWV0YTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBWaWV3UmVzb2x2ZXIucHJvdG90eXBlLl90aHJvd01peGluZ1ZpZXdBbmRDb21wb25lbnQgPSBmdW5jdGlvbiAocHJvcGVydHlOYW1lLCBjb21wb25lbnQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oXCJDb21wb25lbnQgJ1wiICsgbGFuZ18xLnN0cmluZ2lmeShjb21wb25lbnQpICsgXCInIGNhbm5vdCBoYXZlIGJvdGggJ1wiICsgcHJvcGVydHlOYW1lICsgXCInIGFuZCAnQFZpZXcnIHNldCBhdCB0aGUgc2FtZSB0aW1lXFxcIlwiKTtcclxuICAgIH07XHJcbiAgICBWaWV3UmVzb2x2ZXIgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcclxuICAgIF0sIFZpZXdSZXNvbHZlcik7XHJcbiAgICByZXR1cm4gVmlld1Jlc29sdmVyO1xyXG59KSgpO1xyXG5leHBvcnRzLlZpZXdSZXNvbHZlciA9IFZpZXdSZXNvbHZlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmlld19yZXNvbHZlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7LyoqXHJcbiAqIFRoaXMgaW5kaXJlY3Rpb24gaXMgbmVlZGVkIHRvIGZyZWUgdXAgQ29tcG9uZW50LCBldGMgc3ltYm9scyBpbiB0aGUgcHVibGljIEFQSVxyXG4gKiB0byBiZSB1c2VkIGJ5IHRoZSBkZWNvcmF0b3IgdmVyc2lvbnMgb2YgdGhlc2UgYW5ub3RhdGlvbnMuXHJcbiAqL1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJy4vbWV0YWRhdGEvZGknKTtcclxuZXhwb3J0cy5RdWVyeU1ldGFkYXRhID0gZGlfMS5RdWVyeU1ldGFkYXRhO1xyXG5leHBvcnRzLkNvbnRlbnRDaGlsZHJlbk1ldGFkYXRhID0gZGlfMS5Db250ZW50Q2hpbGRyZW5NZXRhZGF0YTtcclxuZXhwb3J0cy5Db250ZW50Q2hpbGRNZXRhZGF0YSA9IGRpXzEuQ29udGVudENoaWxkTWV0YWRhdGE7XHJcbmV4cG9ydHMuVmlld0NoaWxkcmVuTWV0YWRhdGEgPSBkaV8xLlZpZXdDaGlsZHJlbk1ldGFkYXRhO1xyXG5leHBvcnRzLlZpZXdRdWVyeU1ldGFkYXRhID0gZGlfMS5WaWV3UXVlcnlNZXRhZGF0YTtcclxuZXhwb3J0cy5WaWV3Q2hpbGRNZXRhZGF0YSA9IGRpXzEuVmlld0NoaWxkTWV0YWRhdGE7XHJcbmV4cG9ydHMuQXR0cmlidXRlTWV0YWRhdGEgPSBkaV8xLkF0dHJpYnV0ZU1ldGFkYXRhO1xyXG52YXIgZGlyZWN0aXZlc18xID0gcmVxdWlyZSgnLi9tZXRhZGF0YS9kaXJlY3RpdmVzJyk7XHJcbmV4cG9ydHMuQ29tcG9uZW50TWV0YWRhdGEgPSBkaXJlY3RpdmVzXzEuQ29tcG9uZW50TWV0YWRhdGE7XHJcbmV4cG9ydHMuRGlyZWN0aXZlTWV0YWRhdGEgPSBkaXJlY3RpdmVzXzEuRGlyZWN0aXZlTWV0YWRhdGE7XHJcbmV4cG9ydHMuUGlwZU1ldGFkYXRhID0gZGlyZWN0aXZlc18xLlBpcGVNZXRhZGF0YTtcclxuZXhwb3J0cy5JbnB1dE1ldGFkYXRhID0gZGlyZWN0aXZlc18xLklucHV0TWV0YWRhdGE7XHJcbmV4cG9ydHMuT3V0cHV0TWV0YWRhdGEgPSBkaXJlY3RpdmVzXzEuT3V0cHV0TWV0YWRhdGE7XHJcbmV4cG9ydHMuSG9zdEJpbmRpbmdNZXRhZGF0YSA9IGRpcmVjdGl2ZXNfMS5Ib3N0QmluZGluZ01ldGFkYXRhO1xyXG5leHBvcnRzLkhvc3RMaXN0ZW5lck1ldGFkYXRhID0gZGlyZWN0aXZlc18xLkhvc3RMaXN0ZW5lck1ldGFkYXRhO1xyXG52YXIgdmlld18xID0gcmVxdWlyZSgnLi9tZXRhZGF0YS92aWV3Jyk7XHJcbmV4cG9ydHMuVmlld01ldGFkYXRhID0gdmlld18xLlZpZXdNZXRhZGF0YTtcclxuZXhwb3J0cy5WaWV3RW5jYXBzdWxhdGlvbiA9IHZpZXdfMS5WaWV3RW5jYXBzdWxhdGlvbjtcclxudmFyIGRpXzIgPSByZXF1aXJlKCcuL21ldGFkYXRhL2RpJyk7XHJcbnZhciBkaXJlY3RpdmVzXzIgPSByZXF1aXJlKCcuL21ldGFkYXRhL2RpcmVjdGl2ZXMnKTtcclxudmFyIHZpZXdfMiA9IHJlcXVpcmUoJy4vbWV0YWRhdGEvdmlldycpO1xyXG52YXIgZGVjb3JhdG9yc18xID0gcmVxdWlyZSgnLi91dGlsL2RlY29yYXRvcnMnKTtcclxuLy8gVE9ETyhhbGV4ZWFnbGUpOiByZW1vdmUgdGhlIGR1cGxpY2F0aW9uIG9mIHRoaXMgZG9jLiBJdCBpcyBjb3BpZWQgZnJvbSBDb21wb25lbnRNZXRhZGF0YS5cclxuLyoqXHJcbiAqIERlY2xhcmUgcmV1c2FibGUgVUkgYnVpbGRpbmcgYmxvY2tzIGZvciBhbiBhcHBsaWNhdGlvbi5cclxuICpcclxuICogRWFjaCBBbmd1bGFyIGNvbXBvbmVudCByZXF1aXJlcyBhIHNpbmdsZSBgQENvbXBvbmVudGAgYW5kIGF0IGxlYXN0IG9uZSBgQFZpZXdgIGFubm90YXRpb24uIFRoZVxyXG4gKiBgQENvbXBvbmVudGBcclxuICogYW5ub3RhdGlvbiBzcGVjaWZpZXMgd2hlbiBhIGNvbXBvbmVudCBpcyBpbnN0YW50aWF0ZWQsIGFuZCB3aGljaCBwcm9wZXJ0aWVzIGFuZCBob3N0TGlzdGVuZXJzIGl0XHJcbiAqIGJpbmRzIHRvLlxyXG4gKlxyXG4gKiBXaGVuIGEgY29tcG9uZW50IGlzIGluc3RhbnRpYXRlZCwgQW5ndWxhclxyXG4gKiAtIGNyZWF0ZXMgYSBzaGFkb3cgRE9NIGZvciB0aGUgY29tcG9uZW50LlxyXG4gKiAtIGxvYWRzIHRoZSBzZWxlY3RlZCB0ZW1wbGF0ZSBpbnRvIHRoZSBzaGFkb3cgRE9NLlxyXG4gKiAtIGNyZWF0ZXMgYWxsIHRoZSBpbmplY3RhYmxlIG9iamVjdHMgY29uZmlndXJlZCB3aXRoIGBwcm92aWRlcnNgIGFuZCBgdmlld1Byb3ZpZGVyc2AuXHJcbiAqXHJcbiAqIEFsbCB0ZW1wbGF0ZSBleHByZXNzaW9ucyBhbmQgc3RhdGVtZW50cyBhcmUgdGhlbiBldmFsdWF0ZWQgYWdhaW5zdCB0aGUgY29tcG9uZW50IGluc3RhbmNlLlxyXG4gKlxyXG4gKiBGb3IgZGV0YWlscyBvbiB0aGUgYEBWaWV3YCBhbm5vdGF0aW9uLCBzZWUge0BsaW5rIFZpZXdNZXRhZGF0YX0uXHJcbiAqXHJcbiAqICMjIExpZmVjeWNsZSBob29rc1xyXG4gKlxyXG4gKiBXaGVuIHRoZSBjb21wb25lbnQgY2xhc3MgaW1wbGVtZW50cyBzb21lIHtAbGluayBhbmd1bGFyMi9saWZlY3ljbGVfaG9va3N9IHRoZSBjYWxsYmFja3MgYXJlXHJcbiAqIGNhbGxlZCBieSB0aGUgY2hhbmdlIGRldGVjdGlvbiBhdCBkZWZpbmVkIHBvaW50cyBpbiB0aW1lIGR1cmluZyB0aGUgbGlmZSBvZiB0aGUgY29tcG9uZW50LlxyXG4gKlxyXG4gKiAjIyBFeGFtcGxlXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ2dyZWV0JyxcclxuICogICB0ZW1wbGF0ZTogJ0hlbGxvIHt7bmFtZX19ISdcclxuICogfSlcclxuICogY2xhc3MgR3JlZXQge1xyXG4gKiAgIG5hbWU6IHN0cmluZztcclxuICpcclxuICogICBjb25zdHJ1Y3RvcigpIHtcclxuICogICAgIHRoaXMubmFtZSA9ICdXb3JsZCc7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKi9cclxuZXhwb3J0cy5Db21wb25lbnQgPSBkZWNvcmF0b3JzXzEubWFrZURlY29yYXRvcihkaXJlY3RpdmVzXzIuQ29tcG9uZW50TWV0YWRhdGEsIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4uVmlldyA9IGV4cG9ydHMuVmlldzsgfSk7XHJcbi8vIFRPRE8oYWxleGVhZ2xlKTogcmVtb3ZlIHRoZSBkdXBsaWNhdGlvbiBvZiB0aGlzIGRvYy4gSXQgaXMgY29waWVkIGZyb20gRGlyZWN0aXZlTWV0YWRhdGEuXHJcbi8qKlxyXG4gKiBEaXJlY3RpdmVzIGFsbG93IHlvdSB0byBhdHRhY2ggYmVoYXZpb3IgdG8gZWxlbWVudHMgaW4gdGhlIERPTS5cclxuICpcclxuICoge0BsaW5rIERpcmVjdGl2ZU1ldGFkYXRhfXMgd2l0aCBhbiBlbWJlZGRlZCB2aWV3IGFyZSBjYWxsZWQge0BsaW5rIENvbXBvbmVudE1ldGFkYXRhfXMuXHJcbiAqXHJcbiAqIEEgZGlyZWN0aXZlIGNvbnNpc3RzIG9mIGEgc2luZ2xlIGRpcmVjdGl2ZSBhbm5vdGF0aW9uIGFuZCBhIGNvbnRyb2xsZXIgY2xhc3MuIFdoZW4gdGhlXHJcbiAqIGRpcmVjdGl2ZSdzIGBzZWxlY3RvcmAgbWF0Y2hlc1xyXG4gKiBlbGVtZW50cyBpbiB0aGUgRE9NLCB0aGUgZm9sbG93aW5nIHN0ZXBzIG9jY3VyOlxyXG4gKlxyXG4gKiAxLiBGb3IgZWFjaCBkaXJlY3RpdmUsIHRoZSBgRWxlbWVudEluamVjdG9yYCBhdHRlbXB0cyB0byByZXNvbHZlIHRoZSBkaXJlY3RpdmUncyBjb25zdHJ1Y3RvclxyXG4gKiBhcmd1bWVudHMuXHJcbiAqIDIuIEFuZ3VsYXIgaW5zdGFudGlhdGVzIGRpcmVjdGl2ZXMgZm9yIGVhY2ggbWF0Y2hlZCBlbGVtZW50IHVzaW5nIGBFbGVtZW50SW5qZWN0b3JgIGluIGFcclxuICogZGVwdGgtZmlyc3Qgb3JkZXIsXHJcbiAqICAgIGFzIGRlY2xhcmVkIGluIHRoZSBIVE1MLlxyXG4gKlxyXG4gKiAjIyBVbmRlcnN0YW5kaW5nIEhvdyBJbmplY3Rpb24gV29ya3NcclxuICpcclxuICogVGhlcmUgYXJlIHRocmVlIHN0YWdlcyBvZiBpbmplY3Rpb24gcmVzb2x1dGlvbi5cclxuICogLSAqUHJlLWV4aXN0aW5nIEluamVjdG9ycyo6XHJcbiAqICAgLSBUaGUgdGVybWluYWwge0BsaW5rIEluamVjdG9yfSBjYW5ub3QgcmVzb2x2ZSBkZXBlbmRlbmNpZXMuIEl0IGVpdGhlciB0aHJvd3MgYW4gZXJyb3Igb3IsIGlmXHJcbiAqIHRoZSBkZXBlbmRlbmN5IHdhc1xyXG4gKiAgICAgc3BlY2lmaWVkIGFzIGBAT3B0aW9uYWxgLCByZXR1cm5zIGBudWxsYC5cclxuICogICAtIFRoZSBwbGF0Zm9ybSBpbmplY3RvciByZXNvbHZlcyBicm93c2VyIHNpbmdsZXRvbiByZXNvdXJjZXMsIHN1Y2ggYXM6IGNvb2tpZXMsIHRpdGxlLFxyXG4gKiBsb2NhdGlvbiwgYW5kIG90aGVycy5cclxuICogLSAqQ29tcG9uZW50IEluamVjdG9ycyo6IEVhY2ggY29tcG9uZW50IGluc3RhbmNlIGhhcyBpdHMgb3duIHtAbGluayBJbmplY3Rvcn0sIGFuZCB0aGV5IGZvbGxvd1xyXG4gKiB0aGUgc2FtZSBwYXJlbnQtY2hpbGQgaGllcmFyY2h5XHJcbiAqICAgICBhcyB0aGUgY29tcG9uZW50IGluc3RhbmNlcyBpbiB0aGUgRE9NLlxyXG4gKiAtICpFbGVtZW50IEluamVjdG9ycyo6IEVhY2ggY29tcG9uZW50IGluc3RhbmNlIGhhcyBhIFNoYWRvdyBET00uIFdpdGhpbiB0aGUgU2hhZG93IERPTSBlYWNoXHJcbiAqIGVsZW1lbnQgaGFzIGFuIGBFbGVtZW50SW5qZWN0b3JgXHJcbiAqICAgICB3aGljaCBmb2xsb3cgdGhlIHNhbWUgcGFyZW50LWNoaWxkIGhpZXJhcmNoeSBhcyB0aGUgRE9NIGVsZW1lbnRzIHRoZW1zZWx2ZXMuXHJcbiAqXHJcbiAqIFdoZW4gYSB0ZW1wbGF0ZSBpcyBpbnN0YW50aWF0ZWQsIGl0IGFsc28gbXVzdCBpbnN0YW50aWF0ZSB0aGUgY29ycmVzcG9uZGluZyBkaXJlY3RpdmVzIGluIGFcclxuICogZGVwdGgtZmlyc3Qgb3JkZXIuIFRoZVxyXG4gKiBjdXJyZW50IGBFbGVtZW50SW5qZWN0b3JgIHJlc29sdmVzIHRoZSBjb25zdHJ1Y3RvciBkZXBlbmRlbmNpZXMgZm9yIGVhY2ggZGlyZWN0aXZlLlxyXG4gKlxyXG4gKiBBbmd1bGFyIHRoZW4gcmVzb2x2ZXMgZGVwZW5kZW5jaWVzIGFzIGZvbGxvd3MsIGFjY29yZGluZyB0byB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcHBlYXIgaW4gdGhlXHJcbiAqIHtAbGluayBWaWV3TWV0YWRhdGF9OlxyXG4gKlxyXG4gKiAxLiBEZXBlbmRlbmNpZXMgb24gdGhlIGN1cnJlbnQgZWxlbWVudFxyXG4gKiAyLiBEZXBlbmRlbmNpZXMgb24gZWxlbWVudCBpbmplY3RvcnMgYW5kIHRoZWlyIHBhcmVudHMgdW50aWwgaXQgZW5jb3VudGVycyBhIFNoYWRvdyBET00gYm91bmRhcnlcclxuICogMy4gRGVwZW5kZW5jaWVzIG9uIGNvbXBvbmVudCBpbmplY3RvcnMgYW5kIHRoZWlyIHBhcmVudHMgdW50aWwgaXQgZW5jb3VudGVycyB0aGUgcm9vdCBjb21wb25lbnRcclxuICogNC4gRGVwZW5kZW5jaWVzIG9uIHByZS1leGlzdGluZyBpbmplY3RvcnNcclxuICpcclxuICpcclxuICogVGhlIGBFbGVtZW50SW5qZWN0b3JgIGNhbiBpbmplY3Qgb3RoZXIgZGlyZWN0aXZlcywgZWxlbWVudC1zcGVjaWZpYyBzcGVjaWFsIG9iamVjdHMsIG9yIGl0IGNhblxyXG4gKiBkZWxlZ2F0ZSB0byB0aGUgcGFyZW50XHJcbiAqIGluamVjdG9yLlxyXG4gKlxyXG4gKiBUbyBpbmplY3Qgb3RoZXIgZGlyZWN0aXZlcywgZGVjbGFyZSB0aGUgY29uc3RydWN0b3IgcGFyYW1ldGVyIGFzOlxyXG4gKiAtIGBkaXJlY3RpdmU6RGlyZWN0aXZlVHlwZWA6IGEgZGlyZWN0aXZlIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQgb25seVxyXG4gKiAtIGBASG9zdCgpIGRpcmVjdGl2ZTpEaXJlY3RpdmVUeXBlYDogYW55IGRpcmVjdGl2ZSB0aGF0IG1hdGNoZXMgdGhlIHR5cGUgYmV0d2VlbiB0aGUgY3VycmVudFxyXG4gKiBlbGVtZW50IGFuZCB0aGVcclxuICogICAgU2hhZG93IERPTSByb290LlxyXG4gKiAtIGBAUXVlcnkoRGlyZWN0aXZlVHlwZSkgcXVlcnk6UXVlcnlMaXN0PERpcmVjdGl2ZVR5cGU+YDogQSBsaXZlIGNvbGxlY3Rpb24gb2YgZGlyZWN0IGNoaWxkXHJcbiAqIGRpcmVjdGl2ZXMuXHJcbiAqIC0gYEBRdWVyeURlc2NlbmRhbnRzKERpcmVjdGl2ZVR5cGUpIHF1ZXJ5OlF1ZXJ5TGlzdDxEaXJlY3RpdmVUeXBlPmA6IEEgbGl2ZSBjb2xsZWN0aW9uIG9mIGFueVxyXG4gKiBjaGlsZCBkaXJlY3RpdmVzLlxyXG4gKlxyXG4gKiBUbyBpbmplY3QgZWxlbWVudC1zcGVjaWZpYyBzcGVjaWFsIG9iamVjdHMsIGRlY2xhcmUgdGhlIGNvbnN0cnVjdG9yIHBhcmFtZXRlciBhczpcclxuICogLSBgZWxlbWVudDogRWxlbWVudFJlZmAgdG8gb2J0YWluIGEgcmVmZXJlbmNlIHRvIGxvZ2ljYWwgZWxlbWVudCBpbiB0aGUgdmlldy5cclxuICogLSBgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZmAgdG8gY29udHJvbCBjaGlsZCB0ZW1wbGF0ZSBpbnN0YW50aWF0aW9uLCBmb3JcclxuICoge0BsaW5rIERpcmVjdGl2ZU1ldGFkYXRhfSBkaXJlY3RpdmVzIG9ubHlcclxuICogLSBgYmluZGluZ1Byb3BhZ2F0aW9uOiBCaW5kaW5nUHJvcGFnYXRpb25gIHRvIGNvbnRyb2wgY2hhbmdlIGRldGVjdGlvbiBpbiBhIG1vcmUgZ3JhbnVsYXIgd2F5LlxyXG4gKlxyXG4gKiAjIyBFeGFtcGxlXHJcbiAqXHJcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgaG93IGRlcGVuZGVuY3kgaW5qZWN0aW9uIHJlc29sdmVzIGNvbnN0cnVjdG9yIGFyZ3VtZW50cyBpblxyXG4gKiBwcmFjdGljZS5cclxuICpcclxuICpcclxuICogQXNzdW1lIHRoaXMgSFRNTCB0ZW1wbGF0ZTpcclxuICpcclxuICogYGBgXHJcbiAqIDxkaXYgZGVwZW5kZW5jeT1cIjFcIj5cclxuICogICA8ZGl2IGRlcGVuZGVuY3k9XCIyXCI+XHJcbiAqICAgICA8ZGl2IGRlcGVuZGVuY3k9XCIzXCIgbXktZGlyZWN0aXZlPlxyXG4gKiAgICAgICA8ZGl2IGRlcGVuZGVuY3k9XCI0XCI+XHJcbiAqICAgICAgICAgPGRpdiBkZXBlbmRlbmN5PVwiNVwiPjwvZGl2PlxyXG4gKiAgICAgICA8L2Rpdj5cclxuICogICAgICAgPGRpdiBkZXBlbmRlbmN5PVwiNlwiPjwvZGl2PlxyXG4gKiAgICAgPC9kaXY+XHJcbiAqICAgPC9kaXY+XHJcbiAqIDwvZGl2PlxyXG4gKiBgYGBcclxuICpcclxuICogV2l0aCB0aGUgZm9sbG93aW5nIGBkZXBlbmRlbmN5YCBkZWNvcmF0b3IgYW5kIGBTb21lU2VydmljZWAgaW5qZWN0YWJsZSBjbGFzcy5cclxuICpcclxuICogYGBgXHJcbiAqIEBJbmplY3RhYmxlKClcclxuICogY2xhc3MgU29tZVNlcnZpY2Uge1xyXG4gKiB9XHJcbiAqXHJcbiAqIEBEaXJlY3RpdmUoe1xyXG4gKiAgIHNlbGVjdG9yOiAnW2RlcGVuZGVuY3ldJyxcclxuICogICBpbnB1dHM6IFtcclxuICogICAgICdpZDogZGVwZW5kZW5jeSdcclxuICogICBdXHJcbiAqIH0pXHJcbiAqIGNsYXNzIERlcGVuZGVuY3kge1xyXG4gKiAgIGlkOnN0cmluZztcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogTGV0J3Mgc3RlcCB0aHJvdWdoIHRoZSBkaWZmZXJlbnQgd2F5cyBpbiB3aGljaCBgTXlEaXJlY3RpdmVgIGNvdWxkIGJlIGRlY2xhcmVkLi4uXHJcbiAqXHJcbiAqXHJcbiAqICMjIyBObyBpbmplY3Rpb25cclxuICpcclxuICogSGVyZSB0aGUgY29uc3RydWN0b3IgaXMgZGVjbGFyZWQgd2l0aCBubyBhcmd1bWVudHMsIHRoZXJlZm9yZSBub3RoaW5nIGlzIGluamVjdGVkIGludG9cclxuICogYE15RGlyZWN0aXZlYC5cclxuICpcclxuICogYGBgXHJcbiAqIEBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tteS1kaXJlY3RpdmVdJyB9KVxyXG4gKiBjbGFzcyBNeURpcmVjdGl2ZSB7XHJcbiAqICAgY29uc3RydWN0b3IoKSB7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBUaGlzIGRpcmVjdGl2ZSB3b3VsZCBiZSBpbnN0YW50aWF0ZWQgd2l0aCBubyBkZXBlbmRlbmNpZXMuXHJcbiAqXHJcbiAqXHJcbiAqICMjIyBDb21wb25lbnQtbGV2ZWwgaW5qZWN0aW9uXHJcbiAqXHJcbiAqIERpcmVjdGl2ZXMgY2FuIGluamVjdCBhbnkgaW5qZWN0YWJsZSBpbnN0YW5jZSBmcm9tIHRoZSBjbG9zZXN0IGNvbXBvbmVudCBpbmplY3RvciBvciBhbnkgb2YgaXRzXHJcbiAqIHBhcmVudHMuXHJcbiAqXHJcbiAqIEhlcmUsIHRoZSBjb25zdHJ1Y3RvciBkZWNsYXJlcyBhIHBhcmFtZXRlciwgYHNvbWVTZXJ2aWNlYCwgYW5kIGluamVjdHMgdGhlIGBTb21lU2VydmljZWAgdHlwZVxyXG4gKiBmcm9tIHRoZSBwYXJlbnRcclxuICogY29tcG9uZW50J3MgaW5qZWN0b3IuXHJcbiAqIGBgYFxyXG4gKiBARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbXktZGlyZWN0aXZlXScgfSlcclxuICogY2xhc3MgTXlEaXJlY3RpdmUge1xyXG4gKiAgIGNvbnN0cnVjdG9yKHNvbWVTZXJ2aWNlOiBTb21lU2VydmljZSkge1xyXG4gKiAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogVGhpcyBkaXJlY3RpdmUgd291bGQgYmUgaW5zdGFudGlhdGVkIHdpdGggYSBkZXBlbmRlbmN5IG9uIGBTb21lU2VydmljZWAuXHJcbiAqXHJcbiAqXHJcbiAqICMjIyBJbmplY3RpbmcgYSBkaXJlY3RpdmUgZnJvbSB0aGUgY3VycmVudCBlbGVtZW50XHJcbiAqXHJcbiAqIERpcmVjdGl2ZXMgY2FuIGluamVjdCBvdGhlciBkaXJlY3RpdmVzIGRlY2xhcmVkIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQuXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbXktZGlyZWN0aXZlXScgfSlcclxuICogY2xhc3MgTXlEaXJlY3RpdmUge1xyXG4gKiAgIGNvbnN0cnVjdG9yKGRlcGVuZGVuY3k6IERlcGVuZGVuY3kpIHtcclxuICogICAgIGV4cGVjdChkZXBlbmRlbmN5LmlkKS50b0VxdWFsKDMpO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICogVGhpcyBkaXJlY3RpdmUgd291bGQgYmUgaW5zdGFudGlhdGVkIHdpdGggYERlcGVuZGVuY3lgIGRlY2xhcmVkIGF0IHRoZSBzYW1lIGVsZW1lbnQsIGluIHRoaXMgY2FzZVxyXG4gKiBgZGVwZW5kZW5jeT1cIjNcImAuXHJcbiAqXHJcbiAqICMjIyBJbmplY3RpbmcgYSBkaXJlY3RpdmUgZnJvbSBhbnkgYW5jZXN0b3IgZWxlbWVudHNcclxuICpcclxuICogRGlyZWN0aXZlcyBjYW4gaW5qZWN0IG90aGVyIGRpcmVjdGl2ZXMgZGVjbGFyZWQgb24gYW55IGFuY2VzdG9yIGVsZW1lbnQgKGluIHRoZSBjdXJyZW50IFNoYWRvd1xyXG4gKiBET00pLCBpLmUuIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQsIHRoZVxyXG4gKiBwYXJlbnQgZWxlbWVudCwgb3IgaXRzIHBhcmVudHMuXHJcbiAqIGBgYFxyXG4gKiBARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbXktZGlyZWN0aXZlXScgfSlcclxuICogY2xhc3MgTXlEaXJlY3RpdmUge1xyXG4gKiAgIGNvbnN0cnVjdG9yKEBIb3N0KCkgZGVwZW5kZW5jeTogRGVwZW5kZW5jeSkge1xyXG4gKiAgICAgZXhwZWN0KGRlcGVuZGVuY3kuaWQpLnRvRXF1YWwoMik7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBgQEhvc3RgIGNoZWNrcyB0aGUgY3VycmVudCBlbGVtZW50LCB0aGUgcGFyZW50LCBhcyB3ZWxsIGFzIGl0cyBwYXJlbnRzIHJlY3Vyc2l2ZWx5LiBJZlxyXG4gKiBgZGVwZW5kZW5jeT1cIjJcImAgZGlkbid0XHJcbiAqIGV4aXN0IG9uIHRoZSBkaXJlY3QgcGFyZW50LCB0aGlzIGluamVjdGlvbiB3b3VsZFxyXG4gKiBoYXZlIHJldHVybmVkXHJcbiAqIGBkZXBlbmRlbmN5PVwiMVwiYC5cclxuICpcclxuICpcclxuICogIyMjIEluamVjdGluZyBhIGxpdmUgY29sbGVjdGlvbiBvZiBkaXJlY3QgY2hpbGQgZGlyZWN0aXZlc1xyXG4gKlxyXG4gKlxyXG4gKiBBIGRpcmVjdGl2ZSBjYW4gYWxzbyBxdWVyeSBmb3Igb3RoZXIgY2hpbGQgZGlyZWN0aXZlcy4gU2luY2UgcGFyZW50IGRpcmVjdGl2ZXMgYXJlIGluc3RhbnRpYXRlZFxyXG4gKiBiZWZvcmUgY2hpbGQgZGlyZWN0aXZlcywgYSBkaXJlY3RpdmUgY2FuJ3Qgc2ltcGx5IGluamVjdCB0aGUgbGlzdCBvZiBjaGlsZCBkaXJlY3RpdmVzLiBJbnN0ZWFkLFxyXG4gKiB0aGUgZGlyZWN0aXZlIGluamVjdHMgYSB7QGxpbmsgUXVlcnlMaXN0fSwgd2hpY2ggdXBkYXRlcyBpdHMgY29udGVudHMgYXMgY2hpbGRyZW4gYXJlIGFkZGVkLFxyXG4gKiByZW1vdmVkLCBvciBtb3ZlZCBieSBhIGRpcmVjdGl2ZSB0aGF0IHVzZXMgYSB7QGxpbmsgVmlld0NvbnRhaW5lclJlZn0gc3VjaCBhcyBhIGBuZy1mb3JgLCBhblxyXG4gKiBgbmctaWZgLCBvciBhbiBgbmctc3dpdGNoYC5cclxuICpcclxuICogYGBgXHJcbiAqIEBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tteS1kaXJlY3RpdmVdJyB9KVxyXG4gKiBjbGFzcyBNeURpcmVjdGl2ZSB7XHJcbiAqICAgY29uc3RydWN0b3IoQFF1ZXJ5KERlcGVuZGVuY3kpIGRlcGVuZGVuY2llczpRdWVyeUxpc3Q8RGVwZW5kZW5jeT4pIHtcclxuICogICB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIFRoaXMgZGlyZWN0aXZlIHdvdWxkIGJlIGluc3RhbnRpYXRlZCB3aXRoIGEge0BsaW5rIFF1ZXJ5TGlzdH0gd2hpY2ggY29udGFpbnMgYERlcGVuZGVuY3lgIDQgYW5kXHJcbiAqIDYuIEhlcmUsIGBEZXBlbmRlbmN5YCA1IHdvdWxkIG5vdCBiZSBpbmNsdWRlZCwgYmVjYXVzZSBpdCBpcyBub3QgYSBkaXJlY3QgY2hpbGQuXHJcbiAqXHJcbiAqICMjIyBJbmplY3RpbmcgYSBsaXZlIGNvbGxlY3Rpb24gb2YgZGVzY2VuZGFudCBkaXJlY3RpdmVzXHJcbiAqXHJcbiAqIEJ5IHBhc3NpbmcgdGhlIGRlc2NlbmRhbnQgZmxhZyB0byBgQFF1ZXJ5YCBhYm92ZSwgd2UgY2FuIGluY2x1ZGUgdGhlIGNoaWxkcmVuIG9mIHRoZSBjaGlsZFxyXG4gKiBlbGVtZW50cy5cclxuICpcclxuICogYGBgXHJcbiAqIEBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tteS1kaXJlY3RpdmVdJyB9KVxyXG4gKiBjbGFzcyBNeURpcmVjdGl2ZSB7XHJcbiAqICAgY29uc3RydWN0b3IoQFF1ZXJ5KERlcGVuZGVuY3ksIHtkZXNjZW5kYW50czogdHJ1ZX0pIGRlcGVuZGVuY2llczpRdWVyeUxpc3Q8RGVwZW5kZW5jeT4pIHtcclxuICogICB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIFRoaXMgZGlyZWN0aXZlIHdvdWxkIGJlIGluc3RhbnRpYXRlZCB3aXRoIGEgUXVlcnkgd2hpY2ggd291bGQgY29udGFpbiBgRGVwZW5kZW5jeWAgNCwgNSBhbmQgNi5cclxuICpcclxuICogIyMjIE9wdGlvbmFsIGluamVjdGlvblxyXG4gKlxyXG4gKiBUaGUgbm9ybWFsIGJlaGF2aW9yIG9mIGRpcmVjdGl2ZXMgaXMgdG8gcmV0dXJuIGFuIGVycm9yIHdoZW4gYSBzcGVjaWZpZWQgZGVwZW5kZW5jeSBjYW5ub3QgYmVcclxuICogcmVzb2x2ZWQuIElmIHlvdVxyXG4gKiB3b3VsZCBsaWtlIHRvIGluamVjdCBgbnVsbGAgb24gdW5yZXNvbHZlZCBkZXBlbmRlbmN5IGluc3RlYWQsIHlvdSBjYW4gYW5ub3RhdGUgdGhhdCBkZXBlbmRlbmN5XHJcbiAqIHdpdGggYEBPcHRpb25hbCgpYC5cclxuICogVGhpcyBleHBsaWNpdGx5IHBlcm1pdHMgdGhlIGF1dGhvciBvZiBhIHRlbXBsYXRlIHRvIHRyZWF0IHNvbWUgb2YgdGhlIHN1cnJvdW5kaW5nIGRpcmVjdGl2ZXMgYXNcclxuICogb3B0aW9uYWwuXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbXktZGlyZWN0aXZlXScgfSlcclxuICogY2xhc3MgTXlEaXJlY3RpdmUge1xyXG4gKiAgIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIGRlcGVuZGVuY3k6RGVwZW5kZW5jeSkge1xyXG4gKiAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogVGhpcyBkaXJlY3RpdmUgd291bGQgYmUgaW5zdGFudGlhdGVkIHdpdGggYSBgRGVwZW5kZW5jeWAgZGlyZWN0aXZlIGZvdW5kIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQuXHJcbiAqIElmIG5vbmUgY2FuIGJlXHJcbiAqIGZvdW5kLCB0aGUgaW5qZWN0b3Igc3VwcGxpZXMgYG51bGxgIGluc3RlYWQgb2YgdGhyb3dpbmcgYW4gZXJyb3IuXHJcbiAqXHJcbiAqICMjIEV4YW1wbGVcclxuICpcclxuICogSGVyZSB3ZSB1c2UgYSBkZWNvcmF0b3IgZGlyZWN0aXZlIHRvIHNpbXBseSBkZWZpbmUgYmFzaWMgdG9vbC10aXAgYmVoYXZpb3IuXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBARGlyZWN0aXZlKHtcclxuICogICBzZWxlY3RvcjogJ1t0b29sdGlwXScsXHJcbiAqICAgaW5wdXRzOiBbXHJcbiAqICAgICAndGV4dDogdG9vbHRpcCdcclxuICogICBdLFxyXG4gKiAgIGhvc3Q6IHtcclxuICogICAgICcobW91c2VlbnRlciknOiAnb25Nb3VzZUVudGVyKCknLFxyXG4gKiAgICAgJyhtb3VzZWxlYXZlKSc6ICdvbk1vdXNlTGVhdmUoKSdcclxuICogICB9XHJcbiAqIH0pXHJcbiAqIGNsYXNzIFRvb2x0aXB7XHJcbiAqICAgdGV4dDpzdHJpbmc7XHJcbiAqICAgb3ZlcmxheTpPdmVybGF5OyAvLyBOT1QgWUVUIElNUExFTUVOVEVEXHJcbiAqICAgb3ZlcmxheU1hbmFnZXI6T3ZlcmxheU1hbmFnZXI7IC8vIE5PVCBZRVQgSU1QTEVNRU5URURcclxuICpcclxuICogICBjb25zdHJ1Y3RvcihvdmVybGF5TWFuYWdlcjpPdmVybGF5TWFuYWdlcikge1xyXG4gKiAgICAgdGhpcy5vdmVybGF5ID0gb3ZlcmxheTtcclxuICogICB9XHJcbiAqXHJcbiAqICAgb25Nb3VzZUVudGVyKCkge1xyXG4gKiAgICAgLy8gZXhhY3Qgc2lnbmF0dXJlIHRvIGJlIGRldGVybWluZWRcclxuICogICAgIHRoaXMub3ZlcmxheSA9IHRoaXMub3ZlcmxheU1hbmFnZXIub3Blbih0ZXh0LCAuLi4pO1xyXG4gKiAgIH1cclxuICpcclxuICogICBvbk1vdXNlTGVhdmUoKSB7XHJcbiAqICAgICB0aGlzLm92ZXJsYXkuY2xvc2UoKTtcclxuICogICAgIHRoaXMub3ZlcmxheSA9IG51bGw7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKiBJbiBvdXIgSFRNTCB0ZW1wbGF0ZSwgd2UgY2FuIHRoZW4gYWRkIHRoaXMgYmVoYXZpb3IgdG8gYSBgPGRpdj5gIG9yIGFueSBvdGhlciBlbGVtZW50IHdpdGggdGhlXHJcbiAqIGB0b29sdGlwYCBzZWxlY3RvcixcclxuICogbGlrZSBzbzpcclxuICpcclxuICogYGBgXHJcbiAqIDxkaXYgdG9vbHRpcD1cInNvbWUgdGV4dCBoZXJlXCI+PC9kaXY+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBEaXJlY3RpdmVzIGNhbiBhbHNvIGNvbnRyb2wgdGhlIGluc3RhbnRpYXRpb24sIGRlc3RydWN0aW9uLCBhbmQgcG9zaXRpb25pbmcgb2YgaW5saW5lIHRlbXBsYXRlXHJcbiAqIGVsZW1lbnRzOlxyXG4gKlxyXG4gKiBBIGRpcmVjdGl2ZSB1c2VzIGEge0BsaW5rIFZpZXdDb250YWluZXJSZWZ9IHRvIGluc3RhbnRpYXRlLCBpbnNlcnQsIG1vdmUsIGFuZCBkZXN0cm95IHZpZXdzIGF0XHJcbiAqIHJ1bnRpbWUuXHJcbiAqIFRoZSB7QGxpbmsgVmlld0NvbnRhaW5lclJlZn0gaXMgY3JlYXRlZCBhcyBhIHJlc3VsdCBvZiBgPHRlbXBsYXRlPmAgZWxlbWVudCwgYW5kIHJlcHJlc2VudHMgYVxyXG4gKiBsb2NhdGlvbiBpbiB0aGUgY3VycmVudCB2aWV3XHJcbiAqIHdoZXJlIHRoZXNlIGFjdGlvbnMgYXJlIHBlcmZvcm1lZC5cclxuICpcclxuICogVmlld3MgYXJlIGFsd2F5cyBjcmVhdGVkIGFzIGNoaWxkcmVuIG9mIHRoZSBjdXJyZW50IHtAbGluayBWaWV3TWV0YWRhdGF9LCBhbmQgYXMgc2libGluZ3Mgb2YgdGhlXHJcbiAqIGA8dGVtcGxhdGU+YCBlbGVtZW50LiBUaHVzIGFcclxuICogZGlyZWN0aXZlIGluIGEgY2hpbGQgdmlldyBjYW5ub3QgaW5qZWN0IHRoZSBkaXJlY3RpdmUgdGhhdCBjcmVhdGVkIGl0LlxyXG4gKlxyXG4gKiBTaW5jZSBkaXJlY3RpdmVzIHRoYXQgY3JlYXRlIHZpZXdzIHZpYSBWaWV3Q29udGFpbmVycyBhcmUgY29tbW9uIGluIEFuZ3VsYXIsIGFuZCB1c2luZyB0aGUgZnVsbFxyXG4gKiBgPHRlbXBsYXRlPmAgZWxlbWVudCBzeW50YXggaXMgd29yZHksIEFuZ3VsYXJcclxuICogYWxzbyBzdXBwb3J0cyBhIHNob3J0aGFuZCBub3RhdGlvbjogYDxsaSAqZm9vPVwiYmFyXCI+YCBhbmQgYDxsaSB0ZW1wbGF0ZT1cImZvbzogYmFyXCI+YCBhcmVcclxuICogZXF1aXZhbGVudC5cclxuICpcclxuICogVGh1cyxcclxuICpcclxuICogYGBgXHJcbiAqIDx1bD5cclxuICogICA8bGkgKmZvbz1cImJhclwiIHRpdGxlPVwidGV4dFwiPjwvbGk+XHJcbiAqIDwvdWw+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBFeHBhbmRzIGluIHVzZSB0bzpcclxuICpcclxuICogYGBgXHJcbiAqIDx1bD5cclxuICogICA8dGVtcGxhdGUgW2Zvb109XCJiYXJcIj5cclxuICogICAgIDxsaSB0aXRsZT1cInRleHRcIj48L2xpPlxyXG4gKiAgIDwvdGVtcGxhdGU+XHJcbiAqIDwvdWw+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBOb3RpY2UgdGhhdCBhbHRob3VnaCB0aGUgc2hvcnRoYW5kIHBsYWNlcyBgKmZvbz1cImJhclwiYCB3aXRoaW4gdGhlIGA8bGk+YCBlbGVtZW50LCB0aGUgYmluZGluZyBmb3JcclxuICogdGhlIGRpcmVjdGl2ZVxyXG4gKiBjb250cm9sbGVyIGlzIGNvcnJlY3RseSBpbnN0YW50aWF0ZWQgb24gdGhlIGA8dGVtcGxhdGU+YCBlbGVtZW50IHJhdGhlciB0aGFuIHRoZSBgPGxpPmAgZWxlbWVudC5cclxuICpcclxuICogIyMgTGlmZWN5Y2xlIGhvb2tzXHJcbiAqXHJcbiAqIFdoZW4gdGhlIGRpcmVjdGl2ZSBjbGFzcyBpbXBsZW1lbnRzIHNvbWUge0BsaW5rIGFuZ3VsYXIyL2xpZmVjeWNsZV9ob29rc30gdGhlIGNhbGxiYWNrcyBhcmVcclxuICogY2FsbGVkIGJ5IHRoZSBjaGFuZ2UgZGV0ZWN0aW9uIGF0IGRlZmluZWQgcG9pbnRzIGluIHRpbWUgZHVyaW5nIHRoZSBsaWZlIG9mIHRoZSBkaXJlY3RpdmUuXHJcbiAqXHJcbiAqICMjIEV4YW1wbGVcclxuICpcclxuICogTGV0J3Mgc3VwcG9zZSB3ZSB3YW50IHRvIGltcGxlbWVudCB0aGUgYHVubGVzc2AgYmVoYXZpb3IsIHRvIGNvbmRpdGlvbmFsbHkgaW5jbHVkZSBhIHRlbXBsYXRlLlxyXG4gKlxyXG4gKiBIZXJlIGlzIGEgc2ltcGxlIGRpcmVjdGl2ZSB0aGF0IHRyaWdnZXJzIG9uIGFuIGB1bmxlc3NgIHNlbGVjdG9yOlxyXG4gKlxyXG4gKiBgYGBcclxuICogQERpcmVjdGl2ZSh7XHJcbiAqICAgc2VsZWN0b3I6ICdbdW5sZXNzXScsXHJcbiAqICAgaW5wdXRzOiBbJ3VubGVzcyddXHJcbiAqIH0pXHJcbiAqIGV4cG9ydCBjbGFzcyBVbmxlc3Mge1xyXG4gKiAgIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWY7XHJcbiAqICAgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmO1xyXG4gKiAgIHByZXZDb25kaXRpb246IGJvb2xlYW47XHJcbiAqXHJcbiAqICAgY29uc3RydWN0b3Iodmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZiwgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmKSB7XHJcbiAqICAgICB0aGlzLnZpZXdDb250YWluZXIgPSB2aWV3Q29udGFpbmVyO1xyXG4gKiAgICAgdGhpcy50ZW1wbGF0ZVJlZiA9IHRlbXBsYXRlUmVmO1xyXG4gKiAgICAgdGhpcy5wcmV2Q29uZGl0aW9uID0gbnVsbDtcclxuICogICB9XHJcbiAqXHJcbiAqICAgc2V0IHVubGVzcyhuZXdDb25kaXRpb24pIHtcclxuICogICAgIGlmIChuZXdDb25kaXRpb24gJiYgKGlzQmxhbmsodGhpcy5wcmV2Q29uZGl0aW9uKSB8fCAhdGhpcy5wcmV2Q29uZGl0aW9uKSkge1xyXG4gKiAgICAgICB0aGlzLnByZXZDb25kaXRpb24gPSB0cnVlO1xyXG4gKiAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcclxuICogICAgIH0gZWxzZSBpZiAoIW5ld0NvbmRpdGlvbiAmJiAoaXNCbGFuayh0aGlzLnByZXZDb25kaXRpb24pIHx8IHRoaXMucHJldkNvbmRpdGlvbikpIHtcclxuICogICAgICAgdGhpcy5wcmV2Q29uZGl0aW9uID0gZmFsc2U7XHJcbiAqICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGUodGhpcy50ZW1wbGF0ZVJlZik7XHJcbiAqICAgICB9XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBXZSBjYW4gdGhlbiB1c2UgdGhpcyBgdW5sZXNzYCBzZWxlY3RvciBpbiBhIHRlbXBsYXRlOlxyXG4gKiBgYGBcclxuICogPHVsPlxyXG4gKiAgIDxsaSAqdW5sZXNzPVwiZXhwclwiPjwvbGk+XHJcbiAqIDwvdWw+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBPbmNlIHRoZSBkaXJlY3RpdmUgaW5zdGFudGlhdGVzIHRoZSBjaGlsZCB2aWV3LCB0aGUgc2hvcnRoYW5kIG5vdGF0aW9uIGZvciB0aGUgdGVtcGxhdGUgZXhwYW5kc1xyXG4gKiBhbmQgdGhlIHJlc3VsdCBpczpcclxuICpcclxuICogYGBgXHJcbiAqIDx1bD5cclxuICogICA8dGVtcGxhdGUgW3VubGVzc109XCJleHBcIj5cclxuICogICAgIDxsaT48L2xpPlxyXG4gKiAgIDwvdGVtcGxhdGU+XHJcbiAqICAgPGxpPjwvbGk+XHJcbiAqIDwvdWw+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBOb3RlIGFsc28gdGhhdCBhbHRob3VnaCB0aGUgYDxsaT48L2xpPmAgdGVtcGxhdGUgc3RpbGwgZXhpc3RzIGluc2lkZSB0aGUgYDx0ZW1wbGF0ZT48L3RlbXBsYXRlPmAsXHJcbiAqIHRoZSBpbnN0YW50aWF0ZWRcclxuICogdmlldyBvY2N1cnMgb24gdGhlIHNlY29uZCBgPGxpPjwvbGk+YCB3aGljaCBpcyBhIHNpYmxpbmcgdG8gdGhlIGA8dGVtcGxhdGU+YCBlbGVtZW50LlxyXG4gKi9cclxuZXhwb3J0cy5EaXJlY3RpdmUgPSBkZWNvcmF0b3JzXzEubWFrZURlY29yYXRvcihkaXJlY3RpdmVzXzIuRGlyZWN0aXZlTWV0YWRhdGEpO1xyXG4vLyBUT0RPKGFsZXhlYWdsZSk6IHJlbW92ZSB0aGUgZHVwbGljYXRpb24gb2YgdGhpcyBkb2MuIEl0IGlzIGNvcGllZCBmcm9tIFZpZXdNZXRhZGF0YS5cclxuLyoqXHJcbiAqIE1ldGFkYXRhIHByb3BlcnRpZXMgYXZhaWxhYmxlIGZvciBjb25maWd1cmluZyBWaWV3cy5cclxuICpcclxuICogRWFjaCBBbmd1bGFyIGNvbXBvbmVudCByZXF1aXJlcyBhIHNpbmdsZSBgQENvbXBvbmVudGAgYW5kIGF0IGxlYXN0IG9uZSBgQFZpZXdgIGFubm90YXRpb24uIFRoZVxyXG4gKiBgQFZpZXdgIGFubm90YXRpb24gc3BlY2lmaWVzIHRoZSBIVE1MIHRlbXBsYXRlIHRvIHVzZSwgYW5kIGxpc3RzIHRoZSBkaXJlY3RpdmVzIHRoYXQgYXJlIGFjdGl2ZVxyXG4gKiB3aXRoaW4gdGhlIHRlbXBsYXRlLlxyXG4gKlxyXG4gKiBXaGVuIGEgY29tcG9uZW50IGlzIGluc3RhbnRpYXRlZCwgdGhlIHRlbXBsYXRlIGlzIGxvYWRlZCBpbnRvIHRoZSBjb21wb25lbnQncyBzaGFkb3cgcm9vdCwgYW5kXHJcbiAqIHRoZSBleHByZXNzaW9ucyBhbmQgc3RhdGVtZW50cyBpbiB0aGUgdGVtcGxhdGUgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0IHRoZSBjb21wb25lbnQuXHJcbiAqXHJcbiAqIEZvciBkZXRhaWxzIG9uIHRoZSBgQENvbXBvbmVudGAgYW5ub3RhdGlvbiwgc2VlIHtAbGluayBDb21wb25lbnRNZXRhZGF0YX0uXHJcbiAqXHJcbiAqICMjIEV4YW1wbGVcclxuICpcclxuICogYGBgXHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgIHNlbGVjdG9yOiAnZ3JlZXQnLFxyXG4gKiAgIHRlbXBsYXRlOiAnSGVsbG8ge3tuYW1lfX0hJyxcclxuICogICBkaXJlY3RpdmVzOiBbR3JlZXRVc2VyLCBCb2xkXVxyXG4gKiB9KVxyXG4gKiBjbGFzcyBHcmVldCB7XHJcbiAqICAgbmFtZTogc3RyaW5nO1xyXG4gKlxyXG4gKiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gKiAgICAgdGhpcy5uYW1lID0gJ1dvcmxkJztcclxuICogICB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnRzLlZpZXcgPSBkZWNvcmF0b3JzXzEubWFrZURlY29yYXRvcih2aWV3XzIuVmlld01ldGFkYXRhLCBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuLlZpZXcgPSBleHBvcnRzLlZpZXc7IH0pO1xyXG4vLyBUT0RPKGFsZXhlYWdsZSk6IHJlbW92ZSB0aGUgZHVwbGljYXRpb24gb2YgdGhpcyBkb2MuIEl0IGlzIGNvcGllZCBmcm9tIEF0dHJpYnV0ZU1ldGFkYXRhLlxyXG4vKipcclxuICogTWV0YWRhdGEgcHJvcGVydGllcyBhdmFpbGFibGUgZm9yIGNvbmZpZ3VyaW5nIFZpZXdzLlxyXG4gKlxyXG4gKiBFYWNoIEFuZ3VsYXIgY29tcG9uZW50IHJlcXVpcmVzIGEgc2luZ2xlIGBAQ29tcG9uZW50YCBhbmQgYXQgbGVhc3Qgb25lIGBAVmlld2AgYW5ub3RhdGlvbi4gVGhlXHJcbiAqIGBAVmlld2AgYW5ub3RhdGlvbiBzcGVjaWZpZXMgdGhlIEhUTUwgdGVtcGxhdGUgdG8gdXNlLCBhbmQgbGlzdHMgdGhlIGRpcmVjdGl2ZXMgdGhhdCBhcmUgYWN0aXZlXHJcbiAqIHdpdGhpbiB0aGUgdGVtcGxhdGUuXHJcbiAqXHJcbiAqIFdoZW4gYSBjb21wb25lbnQgaXMgaW5zdGFudGlhdGVkLCB0aGUgdGVtcGxhdGUgaXMgbG9hZGVkIGludG8gdGhlIGNvbXBvbmVudCdzIHNoYWRvdyByb290LCBhbmRcclxuICogdGhlIGV4cHJlc3Npb25zIGFuZCBzdGF0ZW1lbnRzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgZXZhbHVhdGVkIGFnYWluc3QgdGhlIGNvbXBvbmVudC5cclxuICpcclxuICogRm9yIGRldGFpbHMgb24gdGhlIGBAQ29tcG9uZW50YCBhbm5vdGF0aW9uLCBzZWUge0BsaW5rIENvbXBvbmVudE1ldGFkYXRhfS5cclxuICpcclxuICogIyMgRXhhbXBsZVxyXG4gKlxyXG4gKiBgYGBcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgc2VsZWN0b3I6ICdncmVldCcsXHJcbiAqICAgdGVtcGxhdGU6ICdIZWxsbyB7e25hbWV9fSEnLFxyXG4gKiAgIGRpcmVjdGl2ZXM6IFtHcmVldFVzZXIsIEJvbGRdXHJcbiAqIH0pXHJcbiAqIGNsYXNzIEdyZWV0IHtcclxuICogICBuYW1lOiBzdHJpbmc7XHJcbiAqXHJcbiAqICAgY29uc3RydWN0b3IoKSB7XHJcbiAqICAgICB0aGlzLm5hbWUgPSAnV29ybGQnO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydHMuQXR0cmlidXRlID0gZGVjb3JhdG9yc18xLm1ha2VQYXJhbURlY29yYXRvcihkaV8yLkF0dHJpYnV0ZU1ldGFkYXRhKTtcclxuLy8gVE9ETyhhbGV4ZWFnbGUpOiByZW1vdmUgdGhlIGR1cGxpY2F0aW9uIG9mIHRoaXMgZG9jLiBJdCBpcyBjb3BpZWQgZnJvbSBRdWVyeU1ldGFkYXRhLlxyXG4vKipcclxuICogRGVjbGFyZXMgYW4gaW5qZWN0YWJsZSBwYXJhbWV0ZXIgdG8gYmUgYSBsaXZlIGxpc3Qgb2YgZGlyZWN0aXZlcyBvciB2YXJpYWJsZVxyXG4gKiBiaW5kaW5ncyBmcm9tIHRoZSBjb250ZW50IGNoaWxkcmVuIG9mIGEgZGlyZWN0aXZlLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvbFk5bThITHk3ejA2dkRvVWFTTjI/cD1wcmV2aWV3KSlcclxuICpcclxuICogQXNzdW1lIHRoYXQgYDx0YWJzPmAgY29tcG9uZW50IHdvdWxkIGxpa2UgdG8gZ2V0IGEgbGlzdCBpdHMgY2hpbGRyZW4gYDxwYW5lPmBcclxuICogY29tcG9uZW50cyBhcyBzaG93biBpbiB0aGlzIGV4YW1wbGU6XHJcbiAqXHJcbiAqIGBgYGh0bWxcclxuICogPHRhYnM+XHJcbiAqICAgPHBhbmUgdGl0bGU9XCJPdmVydmlld1wiPi4uLjwvcGFuZT5cclxuICogICA8cGFuZSAqbmctZm9yPVwiI28gb2Ygb2JqZWN0c1wiIFt0aXRsZV09XCJvLnRpdGxlXCI+e3tvLnRleHR9fTwvcGFuZT5cclxuICogPC90YWJzPlxyXG4gKiBgYGBcclxuICpcclxuICogVGhlIHByZWZlcnJlZCBzb2x1dGlvbiBpcyB0byBxdWVyeSBmb3IgYFBhbmVgIGRpcmVjdGl2ZXMgdXNpbmcgdGhpcyBkZWNvcmF0b3IuXHJcbiAqXHJcbiAqIGBgYGphdmFzY3JpcHRcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgc2VsZWN0b3I6ICdwYW5lJyxcclxuICogICBpbnB1dHM6IFsndGl0bGUnXVxyXG4gKiB9KVxyXG4gKiBjbGFzcyBQYW5lIHtcclxuICogICB0aXRsZTpzdHJpbmc7XHJcbiAqIH1cclxuICpcclxuICogQENvbXBvbmVudCh7XHJcbiAqICBzZWxlY3RvcjogJ3RhYnMnLFxyXG4gKiAgdGVtcGxhdGU6IGBcclxuICogICAgPHVsPlxyXG4gKiAgICAgIDxsaSAqbmctZm9yPVwiI3BhbmUgb2YgcGFuZXNcIj57e3BhbmUudGl0bGV9fTwvbGk+XHJcbiAqICAgIDwvdWw+XHJcbiAqICAgIDxjb250ZW50PjwvY29udGVudD5cclxuICogIGBcclxuICogfSlcclxuICogY2xhc3MgVGFicyB7XHJcbiAqICAgcGFuZXM6IFF1ZXJ5TGlzdDxQYW5lPjtcclxuICogICBjb25zdHJ1Y3RvcihAUXVlcnkoUGFuZSkgcGFuZXM6UXVlcnlMaXN0PFBhbmU+KSB7XHJcbiAqICAgICB0aGlzLnBhbmVzID0gcGFuZXM7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBBIHF1ZXJ5IGNhbiBsb29rIGZvciB2YXJpYWJsZSBiaW5kaW5ncyBieSBwYXNzaW5nIGluIGEgc3RyaW5nIHdpdGggZGVzaXJlZCBiaW5kaW5nIHN5bWJvbC5cclxuICpcclxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L3NUMmoyNWNIMWRVUkF5QlJDS3gxP3A9cHJldmlldykpXHJcbiAqIGBgYGh0bWxcclxuICogPHNlZWtlcj5cclxuICogICA8ZGl2ICNmaW5kbWU+Li4uPC9kaXY+XHJcbiAqIDwvc2Vla2VyPlxyXG4gKlxyXG4gKiBAQ29tcG9uZW50KHsgc2VsZWN0b3I6ICdmb28nIH0pXHJcbiAqIGNsYXNzIHNlZWtlciB7XHJcbiAqICAgY29uc3RydWN0b3IoQFF1ZXJ5KCdmaW5kbWUnKSBlbExpc3Q6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPikgey4uLn1cclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogSW4gdGhpcyBjYXNlIHRoZSBvYmplY3QgdGhhdCBpcyBpbmplY3RlZCBkZXBlbmQgb24gdGhlIHR5cGUgb2YgdGhlIHZhcmlhYmxlXHJcbiAqIGJpbmRpbmcuIEl0IGNhbiBiZSBhbiBFbGVtZW50UmVmLCBhIGRpcmVjdGl2ZSBvciBhIGNvbXBvbmVudC5cclxuICpcclxuICogUGFzc2luZyBpbiBhIGNvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIHZhcmlhYmxlIGJpbmRpbmdzIHdpbGwgcXVlcnkgZm9yIGFsbCBvZiB0aGVtLlxyXG4gKlxyXG4gKiBgYGBodG1sXHJcbiAqIDxzZWVrZXI+XHJcbiAqICAgPGRpdiAjZmluZC1tZT4uLi48L2Rpdj5cclxuICogICA8ZGl2ICNmaW5kLW1lLXRvbz4uLi48L2Rpdj5cclxuICogPC9zZWVrZXI+XHJcbiAqXHJcbiAqICBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ2ZvbydcclxuICogfSlcclxuICogY2xhc3MgU2Vla2VyIHtcclxuICogICBjb25zdHJ1Y3RvcihAUXVlcnkoJ2ZpbmRNZSwgZmluZE1lVG9vJykgZWxMaXN0OiBRdWVyeUxpc3Q8RWxlbWVudFJlZj4pIHsuLi59XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIENvbmZpZ3VyZSB3aGV0aGVyIHF1ZXJ5IGxvb2tzIGZvciBkaXJlY3QgY2hpbGRyZW4gb3IgYWxsIGRlc2NlbmRhbnRzXHJcbiAqIG9mIHRoZSBxdWVyeWluZyBlbGVtZW50LCBieSB1c2luZyB0aGUgYGRlc2NlbmRhbnRzYCBwYXJhbWV0ZXIuXHJcbiAqIEl0IGlzIHNldCB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC93dEdlQjk3N2J2N3F2QTVGVFlsOT9wPXByZXZpZXcpKVxyXG4gKiBgYGBodG1sXHJcbiAqIDxjb250YWluZXIgI2ZpcnN0PlxyXG4gKiAgIDxpdGVtPmE8L2l0ZW0+XHJcbiAqICAgPGl0ZW0+YjwvaXRlbT5cclxuICogICA8Y29udGFpbmVyICNzZWNvbmQ+XHJcbiAqICAgICA8aXRlbT5jPC9pdGVtPlxyXG4gKiAgIDwvY29udGFpbmVyPlxyXG4gKiA8L2NvbnRhaW5lcj5cclxuICogYGBgXHJcbiAqXHJcbiAqIFdoZW4gcXVlcnlpbmcgZm9yIGl0ZW1zLCB0aGUgZmlyc3QgY29udGFpbmVyIHdpbGwgc2VlIG9ubHkgYGFgIGFuZCBgYmAgYnkgZGVmYXVsdCxcclxuICogYnV0IHdpdGggYFF1ZXJ5KFRleHREaXJlY3RpdmUsIHtkZXNjZW5kYW50czogdHJ1ZX0pYCBpdCB3aWxsIHNlZSBgY2AgdG9vLlxyXG4gKlxyXG4gKiBUaGUgcXVlcmllZCBkaXJlY3RpdmVzIGFyZSBrZXB0IGluIGEgZGVwdGgtZmlyc3QgcHJlLW9yZGVyIHdpdGggcmVzcGVjdCB0byB0aGVpclxyXG4gKiBwb3NpdGlvbnMgaW4gdGhlIERPTS5cclxuICpcclxuICogUXVlcnkgZG9lcyBub3QgbG9vayBkZWVwIGludG8gYW55IHN1YmNvbXBvbmVudCB2aWV3cy5cclxuICpcclxuICogUXVlcnkgaXMgdXBkYXRlZCBhcyBwYXJ0IG9mIHRoZSBjaGFuZ2UtZGV0ZWN0aW9uIGN5Y2xlLiBTaW5jZSBjaGFuZ2UgZGV0ZWN0aW9uXHJcbiAqIGhhcHBlbnMgYWZ0ZXIgY29uc3RydWN0aW9uIG9mIGEgZGlyZWN0aXZlLCBRdWVyeUxpc3Qgd2lsbCBhbHdheXMgYmUgZW1wdHkgd2hlbiBvYnNlcnZlZCBpbiB0aGVcclxuICogY29uc3RydWN0b3IuXHJcbiAqXHJcbiAqIFRoZSBpbmplY3RlZCBvYmplY3QgaXMgYW4gdW5tb2RpZmlhYmxlIGxpdmUgbGlzdC5cclxuICogU2VlIHtAbGluayBRdWVyeUxpc3R9IGZvciBtb3JlIGRldGFpbHMuXHJcbiAqL1xyXG5leHBvcnRzLlF1ZXJ5ID0gZGVjb3JhdG9yc18xLm1ha2VQYXJhbURlY29yYXRvcihkaV8yLlF1ZXJ5TWV0YWRhdGEpO1xyXG4vLyBUT0RPKGFsZXhlYWdsZSk6IHJlbW92ZSB0aGUgZHVwbGljYXRpb24gb2YgdGhpcyBkb2MuIEl0IGlzIGNvcGllZCBmcm9tIENvbnRlbnRDaGlsZHJlbk1ldGFkYXRhLlxyXG4vKipcclxuICogQ29uZmlndXJlcyBhIGNvbnRlbnQgcXVlcnkuXHJcbiAqXHJcbiAqIENvbnRlbnQgcXVlcmllcyBhcmUgc2V0IGJlZm9yZSB0aGUgYGFmdGVyQ29udGVudEluaXRgIGNhbGxiYWNrIGlzIGNhbGxlZC5cclxuICpcclxuICogIyMjIEV4YW1wbGVcclxuICpcclxuICogYGBgXHJcbiAqIEBEaXJlY3RpdmUoe1xyXG4gKiAgIHNlbGVjdG9yOiAnc29tZURpcidcclxuICogfSlcclxuICogY2xhc3MgU29tZURpciB7XHJcbiAqICAgQENvbnRlbnRDaGlsZHJlbihDaGlsZERpcmVjdGl2ZSkgY29udGVudENoaWxkcmVuOiBRdWVyeUxpc3Q8Q2hpbGREaXJlY3RpdmU+O1xyXG4gKlxyXG4gKiAgIGFmdGVyQ29udGVudEluaXQoKSB7XHJcbiAqICAgICAvLyBjb250ZW50Q2hpbGRyZW4gaXMgc2V0XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0cy5Db250ZW50Q2hpbGRyZW4gPSBkZWNvcmF0b3JzXzEubWFrZVByb3BEZWNvcmF0b3IoZGlfMi5Db250ZW50Q2hpbGRyZW5NZXRhZGF0YSk7XHJcbi8vIFRPRE8oYWxleGVhZ2xlKTogcmVtb3ZlIHRoZSBkdXBsaWNhdGlvbiBvZiB0aGlzIGRvYy4gSXQgaXMgY29waWVkIGZyb20gQ29udGVudENoaWxkTWV0YWRhdGEuXHJcbi8qKlxyXG4gKiBDb25maWd1cmVzIGEgY29udGVudCBxdWVyeS5cclxuICpcclxuICogQ29udGVudCBxdWVyaWVzIGFyZSBzZXQgYmVmb3JlIHRoZSBgYWZ0ZXJDb250ZW50SW5pdGAgY2FsbGJhY2sgaXMgY2FsbGVkLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZVxyXG4gKlxyXG4gKiBgYGBcclxuICogQERpcmVjdGl2ZSh7XHJcbiAqICAgc2VsZWN0b3I6ICdzb21lRGlyJ1xyXG4gKiB9KVxyXG4gKiBjbGFzcyBTb21lRGlyIHtcclxuICogICBAQ29udGVudENoaWxkKENoaWxkRGlyZWN0aXZlKSBjb250ZW50Q2hpbGQ7XHJcbiAqXHJcbiAqICAgYWZ0ZXJDb250ZW50SW5pdCgpIHtcclxuICogICAgIC8vIGNvbnRlbnRDaGlsZCBpcyBzZXRcclxuICogICB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnRzLkNvbnRlbnRDaGlsZCA9IGRlY29yYXRvcnNfMS5tYWtlUHJvcERlY29yYXRvcihkaV8yLkNvbnRlbnRDaGlsZE1ldGFkYXRhKTtcclxuLy8gVE9ETyhhbGV4ZWFnbGUpOiByZW1vdmUgdGhlIGR1cGxpY2F0aW9uIG9mIHRoaXMgZG9jLiBJdCBpcyBjb3BpZWQgZnJvbSBWaWV3Q2hpbGRyZW5NZXRhZGF0YS5cclxuLyoqXHJcbiAqIENvbmZpZ3VyZXMgYSB2aWV3IHF1ZXJ5LlxyXG4gKlxyXG4gKiBWaWV3IHF1ZXJpZXMgYXJlIHNldCBiZWZvcmUgdGhlIGBhZnRlclZpZXdJbml0YCBjYWxsYmFjayBpcyBjYWxsZWQuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ3NvbWVEaXInLFxyXG4gKiAgIHRlbXBsYXRlVXJsOiAnc29tZVRlbXBsYXRlJyxcclxuICogICBkaXJlY3RpdmVzOiBbSXRlbURpcmVjdGl2ZV1cclxuICogfSlcclxuICogY2xhc3MgU29tZURpciB7XHJcbiAqICAgQFZpZXdDaGlsZHJlbihJdGVtRGlyZWN0aXZlKSB2aWV3Q2hpbGRyZW46IFF1ZXJ5TGlzdDxJdGVtRGlyZWN0aXZlPjtcclxuICpcclxuICogICBhZnRlclZpZXdJbml0KCkge1xyXG4gKiAgICAgLy8gdmlld0NoaWxkcmVuIGlzIHNldFxyXG4gKiAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydHMuVmlld0NoaWxkcmVuID0gZGVjb3JhdG9yc18xLm1ha2VQcm9wRGVjb3JhdG9yKGRpXzIuVmlld0NoaWxkcmVuTWV0YWRhdGEpO1xyXG4vLyBUT0RPKGFsZXhlYWdsZSk6IHJlbW92ZSB0aGUgZHVwbGljYXRpb24gb2YgdGhpcyBkb2MuIEl0IGlzIGNvcGllZCBmcm9tIFZpZXdDaGlsZE1ldGFkYXRhLlxyXG4vKipcclxuICogQ29uZmlndXJlcyBhIHZpZXcgcXVlcnkuXHJcbiAqXHJcbiAqIFZpZXcgcXVlcmllcyBhcmUgc2V0IGJlZm9yZSB0aGUgYGFmdGVyVmlld0luaXRgIGNhbGxiYWNrIGlzIGNhbGxlZC5cclxuICpcclxuICogIyMjIEV4YW1wbGVcclxuICpcclxuICogYGBgXHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgIHNlbGVjdG9yOiAnc29tZURpcicsXHJcbiAqICAgdGVtcGxhdGVVcmw6ICdzb21lVGVtcGxhdGUnLFxyXG4gKiAgIGRpcmVjdGl2ZXM6IFtJdGVtRGlyZWN0aXZlXVxyXG4gKiB9KVxyXG4gKiBjbGFzcyBTb21lRGlyIHtcclxuICogICBAVmlld0NoaWxkKEl0ZW1EaXJlY3RpdmUpIHZpZXdDaGlsZDpJdGVtRGlyZWN0aXZlO1xyXG4gKlxyXG4gKiAgIGFmdGVyVmlld0luaXQoKSB7XHJcbiAqICAgICAvLyB2aWV3Q2hpbGQgaXMgc2V0XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0cy5WaWV3Q2hpbGQgPSBkZWNvcmF0b3JzXzEubWFrZVByb3BEZWNvcmF0b3IoZGlfMi5WaWV3Q2hpbGRNZXRhZGF0YSk7XHJcbi8vIFRPRE8oYWxleGVhZ2xlKTogcmVtb3ZlIHRoZSBkdXBsaWNhdGlvbiBvZiB0aGlzIGRvYy4gSXQgaXMgY29waWVkIGZyb20gVmlld1F1ZXJ5TWV0YWRhdGEuXHJcbi8qKlxyXG4gKiBTaW1pbGFyIHRvIHtAbGluayBRdWVyeU1ldGFkYXRhfSwgYnV0IHF1ZXJ5aW5nIHRoZSBjb21wb25lbnQgdmlldywgaW5zdGVhZCBvZlxyXG4gKiB0aGUgY29udGVudCBjaGlsZHJlbi5cclxuICpcclxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L2VOc0ZIRGY3WWp5TTZJekt4TTFqP3A9cHJldmlldykpXHJcbiAqXHJcbiAqIGBgYGphdmFzY3JpcHRcclxuICogQENvbXBvbmVudCh7Li4ufSlcclxuICogQFZpZXcoe1xyXG4gKiAgIHRlbXBsYXRlOiBgXHJcbiAqICAgICA8aXRlbT4gYSA8L2l0ZW0+XHJcbiAqICAgICA8aXRlbT4gYiA8L2l0ZW0+XHJcbiAqICAgICA8aXRlbT4gYyA8L2l0ZW0+XHJcbiAqICAgYFxyXG4gKiB9KVxyXG4gKiBjbGFzcyBNeUNvbXBvbmVudCB7XHJcbiAqICAgc2hvd246IGJvb2xlYW47XHJcbiAqXHJcbiAqICAgY29uc3RydWN0b3IocHJpdmF0ZSBAUXVlcnkoSXRlbSkgaXRlbXM6UXVlcnlMaXN0PEl0ZW0+KSB7XHJcbiAqICAgICBpdGVtcy5vbkNoYW5nZSgoKSA9PiBjb25zb2xlLmxvZyhpdGVtcy5sZW5ndGgpKTtcclxuICogICB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIFN1cHBvcnRzIHRoZSBzYW1lIHF1ZXJ5aW5nIHBhcmFtZXRlcnMgYXMge0BsaW5rIFF1ZXJ5TWV0YWRhdGF9LCBleGNlcHRcclxuICogYGRlc2NlbmRhbnRzYC4gVGhpcyBhbHdheXMgcXVlcmllcyB0aGUgd2hvbGUgdmlldy5cclxuICpcclxuICogQXMgYHNob3duYCBpcyBmbGlwcGVkIGJldHdlZW4gdHJ1ZSBhbmQgZmFsc2UsIGl0ZW1zIHdpbGwgY29udGFpbiB6ZXJvIG9mIG9uZVxyXG4gKiBpdGVtcy5cclxuICpcclxuICogU3BlY2lmaWVzIHRoYXQgYSB7QGxpbmsgUXVlcnlMaXN0fSBzaG91bGQgYmUgaW5qZWN0ZWQuXHJcbiAqXHJcbiAqIFRoZSBpbmplY3RlZCBvYmplY3QgaXMgYW4gaXRlcmFibGUgYW5kIG9ic2VydmFibGUgbGl2ZSBsaXN0LlxyXG4gKiBTZWUge0BsaW5rIFF1ZXJ5TGlzdH0gZm9yIG1vcmUgZGV0YWlscy5cclxuICovXHJcbmV4cG9ydHMuVmlld1F1ZXJ5ID0gZGVjb3JhdG9yc18xLm1ha2VQYXJhbURlY29yYXRvcihkaV8yLlZpZXdRdWVyeU1ldGFkYXRhKTtcclxuLy8gVE9ETyhhbGV4ZWFnbGUpOiByZW1vdmUgdGhlIGR1cGxpY2F0aW9uIG9mIHRoaXMgZG9jLiBJdCBpcyBjb3BpZWQgZnJvbSBQaXBlTWV0YWRhdGEuXHJcbi8qKlxyXG4gKiBEZWNsYXJlIHJldXNhYmxlIHBpcGUgZnVuY3Rpb24uXHJcbiAqXHJcbiAqICMjIEV4YW1wbGVcclxuICpcclxuICogYGBgXHJcbiAqIEBQaXBlKHtcclxuICogICBuYW1lOiAnbG93ZXJjYXNlJ1xyXG4gKiB9KVxyXG4gKiBjbGFzcyBMb3dlcmNhc2Uge1xyXG4gKiAgIHRyYW5zZm9ybSh2LCBhcmdzKSB7IHJldHVybiB2LnRvTG93ZXJDYXNlKCk7IH1cclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydHMuUGlwZSA9IGRlY29yYXRvcnNfMS5tYWtlRGVjb3JhdG9yKGRpcmVjdGl2ZXNfMi5QaXBlTWV0YWRhdGEpO1xyXG4vLyBUT0RPKGFsZXhlYWdsZSk6IHJlbW92ZSB0aGUgZHVwbGljYXRpb24gb2YgdGhpcyBkb2MuIEl0IGlzIGNvcGllZCBmcm9tIElucHV0TWV0YWRhdGEuXHJcbi8qKlxyXG4gKiBEZWNsYXJlcyBhIGRhdGEtYm91bmQgaW5wdXQgcHJvcGVydHkuXHJcbiAqXHJcbiAqIEFuZ3VsYXIgYXV0b21hdGljYWxseSB1cGRhdGVzIGRhdGEtYm91bmQgcHJvcGVydGllcyBkdXJpbmcgY2hhbmdlIGRldGVjdGlvbi5cclxuICpcclxuICogYElucHV0TWV0YWRhdGFgIHRha2VzIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB0aGF0IHNwZWNpZmllcyB0aGUgbmFtZVxyXG4gKiB1c2VkIHdoZW4gaW5zdGFudGlhdGluZyBhIGNvbXBvbmVudCBpbiB0aGUgdGVtcGxhdGUuIFdoZW4gbm90IHByb3ZpZGVkLFxyXG4gKiB0aGUgbmFtZSBvZiB0aGUgZGVjb3JhdGVkIHByb3BlcnR5IGlzIHVzZWQuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlXHJcbiAqXHJcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBjcmVhdGVzIGEgY29tcG9uZW50IHdpdGggdHdvIGlucHV0IHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgc2VsZWN0b3I6ICdiYW5rLWFjY291bnQnLFxyXG4gKiAgIHRlbXBsYXRlOiBgXHJcbiAqICAgICBCYW5rIE5hbWU6IHt7YmFua05hbWV9fVxyXG4gKiAgICAgQWNjb3VudCBJZDoge3tpZH19XHJcbiAqICAgYFxyXG4gKiB9KVxyXG4gKiBjbGFzcyBCYW5rQWNjb3VudCB7XHJcbiAqICAgQElucHV0KCkgYmFua05hbWU6IHN0cmluZztcclxuICogICBASW5wdXQoJ2FjY291bnQtaWQnKSBpZDogc3RyaW5nO1xyXG4gKlxyXG4gKiAgIC8vIHRoaXMgcHJvcGVydHkgaXMgbm90IGJvdW5kLCBhbmQgd29uJ3QgYmUgYXV0b21hdGljYWxseSB1cGRhdGVkIGJ5IEFuZ3VsYXJcclxuICogICBub3JtYWxpemVkQmFua05hbWU6IHN0cmluZztcclxuICogfVxyXG4gKlxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ2FwcCcsXHJcbiAqICAgdGVtcGxhdGU6IGBcclxuICogICAgIDxiYW5rLWFjY291bnQgYmFuay1uYW1lPVwiUkJDXCIgYWNjb3VudC1pZD1cIjQ3NDdcIj48L2JhbmstYWNjb3VudD5cclxuICogICBgLFxyXG4gKiAgIGRpcmVjdGl2ZXM6IFtCYW5rQWNjb3VudF1cclxuICogfSlcclxuICogY2xhc3MgQXBwIHt9XHJcbiAqXHJcbiAqIGJvb3RzdHJhcChBcHApO1xyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydHMuSW5wdXQgPSBkZWNvcmF0b3JzXzEubWFrZVByb3BEZWNvcmF0b3IoZGlyZWN0aXZlc18yLklucHV0TWV0YWRhdGEpO1xyXG4vLyBUT0RPKGFsZXhlYWdsZSk6IHJlbW92ZSB0aGUgZHVwbGljYXRpb24gb2YgdGhpcyBkb2MuIEl0IGlzIGNvcGllZCBmcm9tIE91dHB1dE1ldGFkYXRhLlxyXG4vKipcclxuICogRGVjbGFyZXMgYW4gZXZlbnQtYm91bmQgb3V0cHV0IHByb3BlcnR5LlxyXG4gKlxyXG4gKiBXaGVuIGFuIG91dHB1dCBwcm9wZXJ0eSBlbWl0cyBhbiBldmVudCwgYW4gZXZlbnQgaGFuZGxlciBhdHRhY2hlZCB0byB0aGF0IGV2ZW50XHJcbiAqIHRoZSB0ZW1wbGF0ZSBpcyBpbnZva2VkLlxyXG4gKlxyXG4gKiBgT3V0cHV0TWV0YWRhdGFgIHRha2VzIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB0aGF0IHNwZWNpZmllcyB0aGUgbmFtZVxyXG4gKiB1c2VkIHdoZW4gaW5zdGFudGlhdGluZyBhIGNvbXBvbmVudCBpbiB0aGUgdGVtcGxhdGUuIFdoZW4gbm90IHByb3ZpZGVkLFxyXG4gKiB0aGUgbmFtZSBvZiB0aGUgZGVjb3JhdGVkIHByb3BlcnR5IGlzIHVzZWQuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogQERpcmVjdGl2ZSh7XHJcbiAqICAgc2VsZWN0b3I6ICdpbnRlcnZhbC1kaXInLFxyXG4gKiB9KVxyXG4gKiBjbGFzcyBJbnRlcnZhbERpciB7XHJcbiAqICAgQE91dHB1dCgpIGV2ZXJ5U2Vjb25kID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gKiAgIEBPdXRwdXQoJ2V2ZXJ5Rml2ZVNlY29uZHMnKSBmaXZlNVNlY3MgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAqXHJcbiAqICAgY29uc3RydWN0b3IoKSB7XHJcbiAqICAgICBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLmV2ZXJ5U2Vjb25kLm5leHQoXCJldmVudFwiKSwgMTAwMCk7XHJcbiAqICAgICBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLmZpdmU1U2Vjcy5uZXh0KFwiZXZlbnRcIiksIDUwMDApO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKlxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ2FwcCcsXHJcbiAqICAgdGVtcGxhdGU6IGBcclxuICogICAgIDxpbnRlcnZhbC1kaXIgKGV2ZXJ5LXNlY29uZCk9XCJldmVyeVNlY29uZCgpXCIgKGV2ZXJ5LWZpdmUtc2Vjb25kcyk9XCJldmVyeUZpdmVTZWNvbmRzKClcIj5cclxuICogICAgIDwvaW50ZXJ2YWwtZGlyPlxyXG4gKiAgIGAsXHJcbiAqICAgZGlyZWN0aXZlczogW0ludGVydmFsRGlyXVxyXG4gKiB9KVxyXG4gKiBjbGFzcyBBcHAge1xyXG4gKiAgIGV2ZXJ5U2Vjb25kKCkgeyBjb25zb2xlLmxvZygnc2Vjb25kJyk7IH1cclxuICogICBldmVyeUZpdmVTZWNvbmRzKCkgeyBjb25zb2xlLmxvZygnZml2ZSBzZWNvbmRzJyk7IH1cclxuICogfVxyXG4gKiBib290c3RyYXAoQXBwKTtcclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnRzLk91dHB1dCA9IGRlY29yYXRvcnNfMS5tYWtlUHJvcERlY29yYXRvcihkaXJlY3RpdmVzXzIuT3V0cHV0TWV0YWRhdGEpO1xyXG4vLyBUT0RPKGFsZXhlYWdsZSk6IHJlbW92ZSB0aGUgZHVwbGljYXRpb24gb2YgdGhpcyBkb2MuIEl0IGlzIGNvcGllZCBmcm9tIEhvc3RCaW5kaW5nTWV0YWRhdGEuXHJcbi8qKlxyXG4gKiBEZWNsYXJlcyBhIGhvc3QgcHJvcGVydHkgYmluZGluZy5cclxuICpcclxuICogQW5ndWxhciBhdXRvbWF0aWNhbGx5IGNoZWNrcyBob3N0IHByb3BlcnR5IGJpbmRpbmdzIGR1cmluZyBjaGFuZ2UgZGV0ZWN0aW9uLlxyXG4gKiBJZiBhIGJpbmRpbmcgY2hhbmdlcywgaXQgd2lsbCB1cGRhdGUgdGhlIGhvc3QgZWxlbWVudCBvZiB0aGUgZGlyZWN0aXZlLlxyXG4gKlxyXG4gKiBgSG9zdEJpbmRpbmdNZXRhZGF0YWAgdGFrZXMgYW4gb3B0aW9uYWwgcGFyYW1ldGVyIHRoYXQgc3BlY2lmaWVzIHRoZSBwcm9wZXJ0eVxyXG4gKiBuYW1lIG9mIHRoZSBob3N0IGVsZW1lbnQgdGhhdCB3aWxsIGJlIHVwZGF0ZWQuIFdoZW4gbm90IHByb3ZpZGVkLFxyXG4gKiB0aGUgY2xhc3MgcHJvcGVydHkgbmFtZSBpcyB1c2VkLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZVxyXG4gKlxyXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgY3JlYXRlcyBhIGRpcmVjdGl2ZSB0aGF0IHNldHMgdGhlIGB2YWxpZGAgYW5kIGBpbnZhbGlkYCBjbGFzc2VzXHJcbiAqIG9uIHRoZSBET00gZWxlbWVudCB0aGF0IGhhcyBuZy1tb2RlbCBkaXJlY3RpdmUgb24gaXQuXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdbbmctbW9kZWxdJ30pXHJcbiAqIGNsYXNzIE5nTW9kZWxTdGF0dXMge1xyXG4gKiAgIGNvbnN0cnVjdG9yKHB1YmxpYyBjb250cm9sOk5nTW9kZWwpIHt9XHJcbiAqICAgQEhvc3RCaW5kaW5nKCdbY2xhc3MudmFsaWRdJykgZ2V0IHZhbGlkIHsgcmV0dXJuIHRoaXMuY29udHJvbC52YWxpZDsgfVxyXG4gKiAgIEBIb3N0QmluZGluZygnW2NsYXNzLmludmFsaWRdJykgZ2V0IGludmFsaWQgeyByZXR1cm4gdGhpcy5jb250cm9sLmludmFsaWQ7IH1cclxuICogfVxyXG4gKlxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ2FwcCcsXHJcbiAqICAgdGVtcGxhdGU6IGA8aW5wdXQgWyhuZy1tb2RlbCldPVwicHJvcFwiPmAsXHJcbiAqICAgZGlyZWN0aXZlczogW0ZPUk1fRElSRUNUSVZFUywgTmdNb2RlbFN0YXR1c11cclxuICogfSlcclxuICogY2xhc3MgQXBwIHtcclxuICogICBwcm9wO1xyXG4gKiB9XHJcbiAqXHJcbiAqIGJvb3RzdHJhcChBcHApO1xyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydHMuSG9zdEJpbmRpbmcgPSBkZWNvcmF0b3JzXzEubWFrZVByb3BEZWNvcmF0b3IoZGlyZWN0aXZlc18yLkhvc3RCaW5kaW5nTWV0YWRhdGEpO1xyXG4vLyBUT0RPKGFsZXhlYWdsZSk6IHJlbW92ZSB0aGUgZHVwbGljYXRpb24gb2YgdGhpcyBkb2MuIEl0IGlzIGNvcGllZCBmcm9tIEhvc3RMaXN0ZW5lck1ldGFkYXRhLlxyXG4vKipcclxuICogRGVjbGFyZXMgYSBob3N0IGxpc3RlbmVyLlxyXG4gKlxyXG4gKiBBbmd1bGFyIHdpbGwgaW52b2tlIHRoZSBkZWNvcmF0ZWQgbWV0aG9kIHdoZW4gdGhlIGhvc3QgZWxlbWVudCBlbWl0cyB0aGUgc3BlY2lmaWVkIGV2ZW50LlxyXG4gKlxyXG4gKiBJZiB0aGUgZGVjb3JhdGVkIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAsIHRoZW4gYHByZXZlbnREZWZhdWx0YCBpcyBhcHBsaWVkIG9uIHRoZSBET01cclxuICogZXZlbnQuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlXHJcbiAqXHJcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBkZWNsYXJlcyBhIGRpcmVjdGl2ZSB0aGF0IGF0dGFjaGVzIGEgY2xpY2sgbGlzdGVuZXIgdG8gdGhlIGJ1dHRvbiBhbmRcclxuICogY291bnRzIGNsaWNrcy5cclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBARGlyZWN0aXZlKHtzZWxlY3RvcjogJ2J1dHRvbltjb3VudGluZ10nfSlcclxuICogY2xhc3MgQ291bnRDbGlja3Mge1xyXG4gKiAgIG51bWJlck9mQ2xpY2tzID0gMDtcclxuICpcclxuICogICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50LnRhcmdldCddKVxyXG4gKiAgIG9uQ2xpY2soYnRuKSB7XHJcbiAqICAgICBjb25zb2xlLmxvZyhcImJ1dHRvblwiLCBidG4sIFwibnVtYmVyIG9mIGNsaWNrczpcIiwgdGhpcy5udW1iZXJPZkNsaWNrcysrKTtcclxuICogICB9XHJcbiAqIH1cclxuICpcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgc2VsZWN0b3I6ICdhcHAnLFxyXG4gKiAgIHRlbXBsYXRlOiBgPGJ1dHRvbiBjb3VudGluZz5JbmNyZW1lbnQ8L2J1dHRvbj5gLFxyXG4gKiAgIGRpcmVjdGl2ZXM6IFtDb3VudENsaWNrc11cclxuICogfSlcclxuICogY2xhc3MgQXBwIHt9XHJcbiAqXHJcbiAqIGJvb3RzdHJhcChBcHApO1xyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydHMuSG9zdExpc3RlbmVyID0gZGVjb3JhdG9yc18xLm1ha2VQcm9wRGVjb3JhdG9yKGRpcmVjdGl2ZXNfMi5Ib3N0TGlzdGVuZXJNZXRhZGF0YSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldGFkYXRhLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgbWV0YWRhdGFfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpL21ldGFkYXRhJyk7XHJcbi8qKlxyXG4gKiBTcGVjaWZpZXMgdGhhdCBhIGNvbnN0YW50IGF0dHJpYnV0ZSB2YWx1ZSBzaG91bGQgYmUgaW5qZWN0ZWQuXHJcbiAqXHJcbiAqIFRoZSBkaXJlY3RpdmUgY2FuIGluamVjdCBjb25zdGFudCBzdHJpbmcgbGl0ZXJhbHMgb2YgaG9zdCBlbGVtZW50IGF0dHJpYnV0ZXMuXHJcbiAqXHJcbiAqICMjIEV4YW1wbGVcclxuICpcclxuICogU3VwcG9zZSB3ZSBoYXZlIGFuIGA8aW5wdXQ+YCBlbGVtZW50IGFuZCB3YW50IHRvIGtub3cgaXRzIGB0eXBlYC5cclxuICpcclxuICogYGBgaHRtbFxyXG4gKiA8aW5wdXQgdHlwZT1cInRleHRcIj5cclxuICogYGBgXHJcbiAqXHJcbiAqIEEgZGVjb3JhdG9yIGNhbiBpbmplY3Qgc3RyaW5nIGxpdGVyYWwgYHRleHRgIGxpa2Ugc286XHJcbiAqXHJcbiAqIGBgYGphdmFzY3JpcHRcclxuICogQERpcmVjdGl2ZSh7XHJcbiAqICAgc2VsZWN0b3I6IGBpbnB1dCdcclxuICogfSlcclxuICogY2xhc3MgSW5wdXREaXJlY3RpdmUge1xyXG4gKiAgIGNvbnN0cnVjdG9yKEBBdHRyaWJ1dGUoJ3R5cGUnKSB0eXBlKSB7XHJcbiAqICAgICAvLyB0eXBlIHdvdWxkIGJlIGB0ZXh0YCBpbiB0aGlzIGV4YW1wbGVcclxuICogICB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG52YXIgQXR0cmlidXRlTWV0YWRhdGEgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEF0dHJpYnV0ZU1ldGFkYXRhLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQXR0cmlidXRlTWV0YWRhdGEoYXR0cmlidXRlTmFtZSkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWU7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXR0cmlidXRlTWV0YWRhdGEucHJvdG90eXBlLCBcInRva2VuXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gTm9ybWFsbHkgb25lIHdvdWxkIGRlZmF1bHQgYSB0b2tlbiB0byBhIHR5cGUgb2YgYW4gaW5qZWN0ZWQgdmFsdWUgYnV0IGhlcmVcclxuICAgICAgICAgICAgLy8gdGhlIHR5cGUgb2YgYSB2YXJpYWJsZSBpcyBcInN0cmluZ1wiIGFuZCB3ZSBjYW4ndCB1c2UgcHJpbWl0aXZlIHR5cGUgYXMgYSByZXR1cm4gdmFsdWVcclxuICAgICAgICAgICAgLy8gc28gd2UgdXNlIGluc3RhbmNlIG9mIEF0dHJpYnV0ZSBpbnN0ZWFkLiBUaGlzIGRvZXNuJ3QgbWF0dGVyIG11Y2ggaW4gcHJhY3RpY2UgYXMgYXJndW1lbnRzXHJcbiAgICAgICAgICAgIC8vIHdpdGggQEF0dHJpYnV0ZSBhbm5vdGF0aW9uIGFyZSBpbmplY3RlZCBieSBFbGVtZW50SW5qZWN0b3IgdGhhdCBkb2Vzbid0IHRha2UgdG9rZW5zIGludG9cclxuICAgICAgICAgICAgLy8gYWNjb3VudC5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBBdHRyaWJ1dGVNZXRhZGF0YS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIkBBdHRyaWJ1dGUoXCIgKyBsYW5nXzEuc3RyaW5naWZ5KHRoaXMuYXR0cmlidXRlTmFtZSkgKyBcIilcIjsgfTtcclxuICAgIEF0dHJpYnV0ZU1ldGFkYXRhID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW1N0cmluZ10pXHJcbiAgICBdLCBBdHRyaWJ1dGVNZXRhZGF0YSk7XHJcbiAgICByZXR1cm4gQXR0cmlidXRlTWV0YWRhdGE7XHJcbn0pKG1ldGFkYXRhXzEuRGVwZW5kZW5jeU1ldGFkYXRhKTtcclxuZXhwb3J0cy5BdHRyaWJ1dGVNZXRhZGF0YSA9IEF0dHJpYnV0ZU1ldGFkYXRhO1xyXG4vKipcclxuICogRGVjbGFyZXMgYW4gaW5qZWN0YWJsZSBwYXJhbWV0ZXIgdG8gYmUgYSBsaXZlIGxpc3Qgb2YgZGlyZWN0aXZlcyBvciB2YXJpYWJsZVxyXG4gKiBiaW5kaW5ncyBmcm9tIHRoZSBjb250ZW50IGNoaWxkcmVuIG9mIGEgZGlyZWN0aXZlLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvbFk5bThITHk3ejA2dkRvVWFTTjI/cD1wcmV2aWV3KSlcclxuICpcclxuICogQXNzdW1lIHRoYXQgYDx0YWJzPmAgY29tcG9uZW50IHdvdWxkIGxpa2UgdG8gZ2V0IGEgbGlzdCBpdHMgY2hpbGRyZW4gYDxwYW5lPmBcclxuICogY29tcG9uZW50cyBhcyBzaG93biBpbiB0aGlzIGV4YW1wbGU6XHJcbiAqXHJcbiAqIGBgYGh0bWxcclxuICogPHRhYnM+XHJcbiAqICAgPHBhbmUgdGl0bGU9XCJPdmVydmlld1wiPi4uLjwvcGFuZT5cclxuICogICA8cGFuZSAqbmctZm9yPVwiI28gb2Ygb2JqZWN0c1wiIFt0aXRsZV09XCJvLnRpdGxlXCI+e3tvLnRleHR9fTwvcGFuZT5cclxuICogPC90YWJzPlxyXG4gKiBgYGBcclxuICpcclxuICogVGhlIHByZWZlcnJlZCBzb2x1dGlvbiBpcyB0byBxdWVyeSBmb3IgYFBhbmVgIGRpcmVjdGl2ZXMgdXNpbmcgdGhpcyBkZWNvcmF0b3IuXHJcbiAqXHJcbiAqIGBgYGphdmFzY3JpcHRcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgc2VsZWN0b3I6ICdwYW5lJyxcclxuICogICBpbnB1dHM6IFsndGl0bGUnXVxyXG4gKiB9KVxyXG4gKiBjbGFzcyBQYW5lIHtcclxuICogICB0aXRsZTpzdHJpbmc7XHJcbiAqIH1cclxuICpcclxuICogQENvbXBvbmVudCh7XHJcbiAqICBzZWxlY3RvcjogJ3RhYnMnLFxyXG4gKiAgdGVtcGxhdGU6IGBcclxuICogICAgPHVsPlxyXG4gKiAgICAgIDxsaSAqbmctZm9yPVwiI3BhbmUgb2YgcGFuZXNcIj57e3BhbmUudGl0bGV9fTwvbGk+XHJcbiAqICAgIDwvdWw+XHJcbiAqICAgIDxjb250ZW50PjwvY29udGVudD5cclxuICogIGBcclxuICogfSlcclxuICogY2xhc3MgVGFicyB7XHJcbiAqICAgcGFuZXM6IFF1ZXJ5TGlzdDxQYW5lPjtcclxuICogICBjb25zdHJ1Y3RvcihAUXVlcnkoUGFuZSkgcGFuZXM6UXVlcnlMaXN0PFBhbmU+KSB7XHJcbiAgKiAgICB0aGlzLnBhbmVzID0gcGFuZXM7XHJcbiAgKiAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBBIHF1ZXJ5IGNhbiBsb29rIGZvciB2YXJpYWJsZSBiaW5kaW5ncyBieSBwYXNzaW5nIGluIGEgc3RyaW5nIHdpdGggZGVzaXJlZCBiaW5kaW5nIHN5bWJvbC5cclxuICpcclxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L3NUMmoyNWNIMWRVUkF5QlJDS3gxP3A9cHJldmlldykpXHJcbiAqIGBgYGh0bWxcclxuICogPHNlZWtlcj5cclxuICogICA8ZGl2ICNmaW5kbWU+Li4uPC9kaXY+XHJcbiAqIDwvc2Vla2VyPlxyXG4gKlxyXG4gKiBAQ29tcG9uZW50KHsgc2VsZWN0b3I6ICdmb28nIH0pXHJcbiAqIGNsYXNzIHNlZWtlciB7XHJcbiAqICAgY29uc3RydWN0b3IoQFF1ZXJ5KCdmaW5kbWUnKSBlbExpc3Q6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPikgey4uLn1cclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogSW4gdGhpcyBjYXNlIHRoZSBvYmplY3QgdGhhdCBpcyBpbmplY3RlZCBkZXBlbmQgb24gdGhlIHR5cGUgb2YgdGhlIHZhcmlhYmxlXHJcbiAqIGJpbmRpbmcuIEl0IGNhbiBiZSBhbiBFbGVtZW50UmVmLCBhIGRpcmVjdGl2ZSBvciBhIGNvbXBvbmVudC5cclxuICpcclxuICogUGFzc2luZyBpbiBhIGNvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIHZhcmlhYmxlIGJpbmRpbmdzIHdpbGwgcXVlcnkgZm9yIGFsbCBvZiB0aGVtLlxyXG4gKlxyXG4gKiBgYGBodG1sXHJcbiAqIDxzZWVrZXI+XHJcbiAqICAgPGRpdiAjZmluZC1tZT4uLi48L2Rpdj5cclxuICogICA8ZGl2ICNmaW5kLW1lLXRvbz4uLi48L2Rpdj5cclxuICogPC9zZWVrZXI+XHJcbiAqXHJcbiAqICBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ2ZvbydcclxuICogfSlcclxuICogY2xhc3MgU2Vla2VyIHtcclxuICogICBjb25zdHJ1Y3RvcihAUXVlcnkoJ2ZpbmRNZSwgZmluZE1lVG9vJykgZWxMaXN0OiBRdWVyeUxpc3Q8RWxlbWVudFJlZj4pIHsuLi59XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIENvbmZpZ3VyZSB3aGV0aGVyIHF1ZXJ5IGxvb2tzIGZvciBkaXJlY3QgY2hpbGRyZW4gb3IgYWxsIGRlc2NlbmRhbnRzXHJcbiAqIG9mIHRoZSBxdWVyeWluZyBlbGVtZW50LCBieSB1c2luZyB0aGUgYGRlc2NlbmRhbnRzYCBwYXJhbWV0ZXIuXHJcbiAqIEl0IGlzIHNldCB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC93dEdlQjk3N2J2N3F2QTVGVFlsOT9wPXByZXZpZXcpKVxyXG4gKiBgYGBodG1sXHJcbiAqIDxjb250YWluZXIgI2ZpcnN0PlxyXG4gKiAgIDxpdGVtPmE8L2l0ZW0+XHJcbiAqICAgPGl0ZW0+YjwvaXRlbT5cclxuICogICA8Y29udGFpbmVyICNzZWNvbmQ+XHJcbiAqICAgICA8aXRlbT5jPC9pdGVtPlxyXG4gKiAgIDwvY29udGFpbmVyPlxyXG4gKiA8L2NvbnRhaW5lcj5cclxuICogYGBgXHJcbiAqXHJcbiAqIFdoZW4gcXVlcnlpbmcgZm9yIGl0ZW1zLCB0aGUgZmlyc3QgY29udGFpbmVyIHdpbGwgc2VlIG9ubHkgYGFgIGFuZCBgYmAgYnkgZGVmYXVsdCxcclxuICogYnV0IHdpdGggYFF1ZXJ5KFRleHREaXJlY3RpdmUsIHtkZXNjZW5kYW50czogdHJ1ZX0pYCBpdCB3aWxsIHNlZSBgY2AgdG9vLlxyXG4gKlxyXG4gKiBUaGUgcXVlcmllZCBkaXJlY3RpdmVzIGFyZSBrZXB0IGluIGEgZGVwdGgtZmlyc3QgcHJlLW9yZGVyIHdpdGggcmVzcGVjdCB0byB0aGVpclxyXG4gKiBwb3NpdGlvbnMgaW4gdGhlIERPTS5cclxuICpcclxuICogUXVlcnkgZG9lcyBub3QgbG9vayBkZWVwIGludG8gYW55IHN1YmNvbXBvbmVudCB2aWV3cy5cclxuICpcclxuICogUXVlcnkgaXMgdXBkYXRlZCBhcyBwYXJ0IG9mIHRoZSBjaGFuZ2UtZGV0ZWN0aW9uIGN5Y2xlLiBTaW5jZSBjaGFuZ2UgZGV0ZWN0aW9uXHJcbiAqIGhhcHBlbnMgYWZ0ZXIgY29uc3RydWN0aW9uIG9mIGEgZGlyZWN0aXZlLCBRdWVyeUxpc3Qgd2lsbCBhbHdheXMgYmUgZW1wdHkgd2hlbiBvYnNlcnZlZCBpbiB0aGVcclxuICogY29uc3RydWN0b3IuXHJcbiAqXHJcbiAqIFRoZSBpbmplY3RlZCBvYmplY3QgaXMgYW4gdW5tb2RpZmlhYmxlIGxpdmUgbGlzdC5cclxuICogU2VlIHtAbGluayBRdWVyeUxpc3R9IGZvciBtb3JlIGRldGFpbHMuXHJcbiAqL1xyXG52YXIgUXVlcnlNZXRhZGF0YSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUXVlcnlNZXRhZGF0YSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFF1ZXJ5TWV0YWRhdGEoX3NlbGVjdG9yLCBfYSkge1xyXG4gICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBfYyA9IF9iLmRlc2NlbmRhbnRzLCBkZXNjZW5kYW50cyA9IF9jID09PSB2b2lkIDAgPyBmYWxzZSA6IF9jLCBfZCA9IF9iLmZpcnN0LCBmaXJzdCA9IF9kID09PSB2b2lkIDAgPyBmYWxzZSA6IF9kO1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX3NlbGVjdG9yID0gX3NlbGVjdG9yO1xyXG4gICAgICAgIHRoaXMuZGVzY2VuZGFudHMgPSBkZXNjZW5kYW50cztcclxuICAgICAgICB0aGlzLmZpcnN0ID0gZmlyc3Q7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUXVlcnlNZXRhZGF0YS5wcm90b3R5cGUsIFwiaXNWaWV3UXVlcnlcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGFsd2F5cyBgZmFsc2VgIHRvIGRpZmZlcmVudGlhdGUgaXQgd2l0aCB7QGxpbmsgVmlld1F1ZXJ5TWV0YWRhdGF9LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFF1ZXJ5TWV0YWRhdGEucHJvdG90eXBlLCBcInNlbGVjdG9yXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiB3aGF0IHRoaXMgaXMgcXVlcnlpbmcgZm9yLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlfMS5yZXNvbHZlRm9yd2FyZFJlZih0aGlzLl9zZWxlY3Rvcik7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFF1ZXJ5TWV0YWRhdGEucHJvdG90eXBlLCBcImlzVmFyQmluZGluZ1F1ZXJ5XCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiB3aGV0aGVyIHRoaXMgaXMgcXVlcnlpbmcgZm9yIGEgdmFyaWFibGUgYmluZGluZyBvciBhIGRpcmVjdGl2ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxhbmdfMS5pc1N0cmluZyh0aGlzLnNlbGVjdG9yKTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUXVlcnlNZXRhZGF0YS5wcm90b3R5cGUsIFwidmFyQmluZGluZ3NcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHJldHVybnMgYSBsaXN0IG9mIHZhcmlhYmxlIGJpbmRpbmdzIHRoaXMgaXMgcXVlcnlpbmcgZm9yLlxyXG4gICAgICAgICAqIE9ubHkgYXBwbGljYWJsZSBpZiB0aGlzIGlzIGEgdmFyaWFibGUgYmluZGluZ3MgcXVlcnkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsYW5nXzEuU3RyaW5nV3JhcHBlci5zcGxpdCh0aGlzLnNlbGVjdG9yLCBuZXcgUmVnRXhwKFwiLFwiKSk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgUXVlcnlNZXRhZGF0YS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIkBRdWVyeShcIiArIGxhbmdfMS5zdHJpbmdpZnkodGhpcy5zZWxlY3RvcikgKyBcIilcIjsgfTtcclxuICAgIFF1ZXJ5TWV0YWRhdGEgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBsYW5nXzEuQ09OU1QoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbT2JqZWN0LCBPYmplY3RdKVxyXG4gICAgXSwgUXVlcnlNZXRhZGF0YSk7XHJcbiAgICByZXR1cm4gUXVlcnlNZXRhZGF0YTtcclxufSkobWV0YWRhdGFfMS5EZXBlbmRlbmN5TWV0YWRhdGEpO1xyXG5leHBvcnRzLlF1ZXJ5TWV0YWRhdGEgPSBRdWVyeU1ldGFkYXRhO1xyXG4vLyBUT0RPOiBhZGQgYW4gZXhhbXBsZSBhZnRlciBDb250ZW50Q2hpbGRyZW4gYW5kIFZpZXdDaGlsZHJlbiBhcmUgaW4gbWFzdGVyXHJcbi8qKlxyXG4gKiBDb25maWd1cmVzIGEgY29udGVudCBxdWVyeS5cclxuICpcclxuICogQ29udGVudCBxdWVyaWVzIGFyZSBzZXQgYmVmb3JlIHRoZSBgYWZ0ZXJDb250ZW50SW5pdGAgY2FsbGJhY2sgaXMgY2FsbGVkLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZVxyXG4gKlxyXG4gKiBgYGBcclxuICogQERpcmVjdGl2ZSh7XHJcbiAqICAgc2VsZWN0b3I6ICdzb21lRGlyJ1xyXG4gKiB9KVxyXG4gKiBjbGFzcyBTb21lRGlyIHtcclxuICogICBAQ29udGVudENoaWxkcmVuKENoaWxkRGlyZWN0aXZlKSBjb250ZW50Q2hpbGRyZW46IFF1ZXJ5TGlzdDxDaGlsZERpcmVjdGl2ZT47XHJcbiAqXHJcbiAqICAgYWZ0ZXJDb250ZW50SW5pdCgpIHtcclxuICogICAgIC8vIGNvbnRlbnRDaGlsZHJlbiBpcyBzZXRcclxuICogICB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG52YXIgQ29udGVudENoaWxkcmVuTWV0YWRhdGEgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKENvbnRlbnRDaGlsZHJlbk1ldGFkYXRhLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ29udGVudENoaWxkcmVuTWV0YWRhdGEoX3NlbGVjdG9yLCBfYSkge1xyXG4gICAgICAgIHZhciBfYiA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkuZGVzY2VuZGFudHMsIGRlc2NlbmRhbnRzID0gX2IgPT09IHZvaWQgMCA/IGZhbHNlIDogX2I7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgX3NlbGVjdG9yLCB7IGRlc2NlbmRhbnRzOiBkZXNjZW5kYW50cyB9KTtcclxuICAgIH1cclxuICAgIENvbnRlbnRDaGlsZHJlbk1ldGFkYXRhID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW09iamVjdCwgT2JqZWN0XSlcclxuICAgIF0sIENvbnRlbnRDaGlsZHJlbk1ldGFkYXRhKTtcclxuICAgIHJldHVybiBDb250ZW50Q2hpbGRyZW5NZXRhZGF0YTtcclxufSkoUXVlcnlNZXRhZGF0YSk7XHJcbmV4cG9ydHMuQ29udGVudENoaWxkcmVuTWV0YWRhdGEgPSBDb250ZW50Q2hpbGRyZW5NZXRhZGF0YTtcclxuLy8gVE9ETzogYWRkIGFuIGV4YW1wbGUgYWZ0ZXIgQ29udGVudENoaWxkIGFuZCBWaWV3Q2hpbGQgYXJlIGluIG1hc3RlclxyXG4vKipcclxuICogQ29uZmlndXJlcyBhIGNvbnRlbnQgcXVlcnkuXHJcbiAqXHJcbiAqIENvbnRlbnQgcXVlcmllcyBhcmUgc2V0IGJlZm9yZSB0aGUgYGFmdGVyQ29udGVudEluaXRgIGNhbGxiYWNrIGlzIGNhbGxlZC5cclxuICpcclxuICogIyMjIEV4YW1wbGVcclxuICpcclxuICogYGBgXHJcbiAqIEBEaXJlY3RpdmUoe1xyXG4gKiAgIHNlbGVjdG9yOiAnc29tZURpcidcclxuICogfSlcclxuICogY2xhc3MgU29tZURpciB7XHJcbiAqICAgQENvbnRlbnRDaGlsZChDaGlsZERpcmVjdGl2ZSkgY29udGVudENoaWxkO1xyXG4gKlxyXG4gKiAgIGFmdGVyQ29udGVudEluaXQoKSB7XHJcbiAqICAgICAvLyBjb250ZW50Q2hpbGQgaXMgc2V0XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIENvbnRlbnRDaGlsZE1ldGFkYXRhID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhDb250ZW50Q2hpbGRNZXRhZGF0YSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIENvbnRlbnRDaGlsZE1ldGFkYXRhKF9zZWxlY3Rvcikge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIF9zZWxlY3RvciwgeyBkZXNjZW5kYW50czogdHJ1ZSwgZmlyc3Q6IHRydWUgfSk7XHJcbiAgICB9XHJcbiAgICBDb250ZW50Q2hpbGRNZXRhZGF0YSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGxhbmdfMS5DT05TVCgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtPYmplY3RdKVxyXG4gICAgXSwgQ29udGVudENoaWxkTWV0YWRhdGEpO1xyXG4gICAgcmV0dXJuIENvbnRlbnRDaGlsZE1ldGFkYXRhO1xyXG59KShRdWVyeU1ldGFkYXRhKTtcclxuZXhwb3J0cy5Db250ZW50Q2hpbGRNZXRhZGF0YSA9IENvbnRlbnRDaGlsZE1ldGFkYXRhO1xyXG4vKipcclxuICogU2ltaWxhciB0byB7QGxpbmsgUXVlcnlNZXRhZGF0YX0sIGJ1dCBxdWVyeWluZyB0aGUgY29tcG9uZW50IHZpZXcsIGluc3RlYWQgb2ZcclxuICogdGhlIGNvbnRlbnQgY2hpbGRyZW4uXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9lTnNGSERmN1lqeU02SXpLeE0xaj9wPXByZXZpZXcpKVxyXG4gKlxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIEBDb21wb25lbnQoey4uLn0pXHJcbiAqIEBWaWV3KHtcclxuICogICB0ZW1wbGF0ZTogYFxyXG4gKiAgICAgPGl0ZW0+IGEgPC9pdGVtPlxyXG4gKiAgICAgPGl0ZW0+IGIgPC9pdGVtPlxyXG4gKiAgICAgPGl0ZW0+IGMgPC9pdGVtPlxyXG4gKiAgIGBcclxuICogfSlcclxuICogY2xhc3MgTXlDb21wb25lbnQge1xyXG4gKiAgIHNob3duOiBib29sZWFuO1xyXG4gKlxyXG4gKiAgIGNvbnN0cnVjdG9yKHByaXZhdGUgQFF1ZXJ5KEl0ZW0pIGl0ZW1zOlF1ZXJ5TGlzdDxJdGVtPikge1xyXG4gKiAgICAgaXRlbXMub25DaGFuZ2UoKCkgPT4gY29uc29sZS5sb2coaXRlbXMubGVuZ3RoKSk7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBTdXBwb3J0cyB0aGUgc2FtZSBxdWVyeWluZyBwYXJhbWV0ZXJzIGFzIHtAbGluayBRdWVyeU1ldGFkYXRhfSwgZXhjZXB0XHJcbiAqIGBkZXNjZW5kYW50c2AuIFRoaXMgYWx3YXlzIHF1ZXJpZXMgdGhlIHdob2xlIHZpZXcuXHJcbiAqXHJcbiAqIEFzIGBzaG93bmAgaXMgZmxpcHBlZCBiZXR3ZWVuIHRydWUgYW5kIGZhbHNlLCBpdGVtcyB3aWxsIGNvbnRhaW4gemVybyBvZiBvbmVcclxuICogaXRlbXMuXHJcbiAqXHJcbiAqIFNwZWNpZmllcyB0aGF0IGEge0BsaW5rIFF1ZXJ5TGlzdH0gc2hvdWxkIGJlIGluamVjdGVkLlxyXG4gKlxyXG4gKiBUaGUgaW5qZWN0ZWQgb2JqZWN0IGlzIGFuIGl0ZXJhYmxlIGFuZCBvYnNlcnZhYmxlIGxpdmUgbGlzdC5cclxuICogU2VlIHtAbGluayBRdWVyeUxpc3R9IGZvciBtb3JlIGRldGFpbHMuXHJcbiAqL1xyXG52YXIgVmlld1F1ZXJ5TWV0YWRhdGEgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFZpZXdRdWVyeU1ldGFkYXRhLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gVmlld1F1ZXJ5TWV0YWRhdGEoX3NlbGVjdG9yLCBfYSkge1xyXG4gICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBfYyA9IF9iLmRlc2NlbmRhbnRzLCBkZXNjZW5kYW50cyA9IF9jID09PSB2b2lkIDAgPyBmYWxzZSA6IF9jLCBfZCA9IF9iLmZpcnN0LCBmaXJzdCA9IF9kID09PSB2b2lkIDAgPyBmYWxzZSA6IF9kO1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIF9zZWxlY3RvciwgeyBkZXNjZW5kYW50czogZGVzY2VuZGFudHMsIGZpcnN0OiBmaXJzdCB9KTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaWV3UXVlcnlNZXRhZGF0YS5wcm90b3R5cGUsIFwiaXNWaWV3UXVlcnlcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGFsd2F5cyBgdHJ1ZWAgdG8gZGlmZmVyZW50aWF0ZSBpdCB3aXRoIHtAbGluayBRdWVyeU1ldGFkYXRhfS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgVmlld1F1ZXJ5TWV0YWRhdGEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJAVmlld1F1ZXJ5KFwiICsgbGFuZ18xLnN0cmluZ2lmeSh0aGlzLnNlbGVjdG9yKSArIFwiKVwiOyB9O1xyXG4gICAgVmlld1F1ZXJ5TWV0YWRhdGEgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBsYW5nXzEuQ09OU1QoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbT2JqZWN0LCBPYmplY3RdKVxyXG4gICAgXSwgVmlld1F1ZXJ5TWV0YWRhdGEpO1xyXG4gICAgcmV0dXJuIFZpZXdRdWVyeU1ldGFkYXRhO1xyXG59KShRdWVyeU1ldGFkYXRhKTtcclxuZXhwb3J0cy5WaWV3UXVlcnlNZXRhZGF0YSA9IFZpZXdRdWVyeU1ldGFkYXRhO1xyXG4vKipcclxuICogQ29uZmlndXJlcyBhIHZpZXcgcXVlcnkuXHJcbiAqXHJcbiAqIFZpZXcgcXVlcmllcyBhcmUgc2V0IGJlZm9yZSB0aGUgYGFmdGVyVmlld0luaXRgIGNhbGxiYWNrIGlzIGNhbGxlZC5cclxuICpcclxuICogIyMjIEV4YW1wbGVcclxuICpcclxuICogYGBgXHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgIHNlbGVjdG9yOiAnc29tZURpcicsXHJcbiAqICAgdGVtcGxhdGVVcmw6ICdzb21lVGVtcGxhdGUnLFxyXG4gKiAgIGRpcmVjdGl2ZXM6IFtJdGVtRGlyZWN0aXZlXVxyXG4gKiB9KVxyXG4gKiBjbGFzcyBTb21lRGlyIHtcclxuICogICBAVmlld0NoaWxkcmVuKEl0ZW1EaXJlY3RpdmUpIHZpZXdDaGlsZHJlbjogUXVlcnlMaXN0PEl0ZW1EaXJlY3RpdmU+O1xyXG4gKlxyXG4gKiAgIGFmdGVyVmlld0luaXQoKSB7XHJcbiAqICAgICAvLyB2aWV3Q2hpbGRyZW4gaXMgc2V0XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIFZpZXdDaGlsZHJlbk1ldGFkYXRhID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhWaWV3Q2hpbGRyZW5NZXRhZGF0YSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFZpZXdDaGlsZHJlbk1ldGFkYXRhKF9zZWxlY3Rvcikge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIF9zZWxlY3RvciwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KTtcclxuICAgIH1cclxuICAgIFZpZXdDaGlsZHJlbk1ldGFkYXRhID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW09iamVjdF0pXHJcbiAgICBdLCBWaWV3Q2hpbGRyZW5NZXRhZGF0YSk7XHJcbiAgICByZXR1cm4gVmlld0NoaWxkcmVuTWV0YWRhdGE7XHJcbn0pKFZpZXdRdWVyeU1ldGFkYXRhKTtcclxuZXhwb3J0cy5WaWV3Q2hpbGRyZW5NZXRhZGF0YSA9IFZpZXdDaGlsZHJlbk1ldGFkYXRhO1xyXG4vKipcclxuICogQ29uZmlndXJlcyBhIHZpZXcgcXVlcnkuXHJcbiAqXHJcbiAqIFZpZXcgcXVlcmllcyBhcmUgc2V0IGJlZm9yZSB0aGUgYGFmdGVyVmlld0luaXRgIGNhbGxiYWNrIGlzIGNhbGxlZC5cclxuICpcclxuICogIyMjIEV4YW1wbGVcclxuICpcclxuICogYGBgXHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgIHNlbGVjdG9yOiAnc29tZURpcicsXHJcbiAqICAgdGVtcGxhdGVVcmw6ICdzb21lVGVtcGxhdGUnLFxyXG4gKiAgIGRpcmVjdGl2ZXM6IFtJdGVtRGlyZWN0aXZlXVxyXG4gKiB9KVxyXG4gKiBjbGFzcyBTb21lRGlyIHtcclxuICogICBAVmlld0NoaWxkKEl0ZW1EaXJlY3RpdmUpIHZpZXdDaGlsZDpJdGVtRGlyZWN0aXZlO1xyXG4gKlxyXG4gKiAgIGFmdGVyVmlld0luaXQoKSB7XHJcbiAqICAgICAvLyB2aWV3Q2hpbGQgaXMgc2V0XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIFZpZXdDaGlsZE1ldGFkYXRhID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhWaWV3Q2hpbGRNZXRhZGF0YSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFZpZXdDaGlsZE1ldGFkYXRhKF9zZWxlY3Rvcikge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIF9zZWxlY3RvciwgeyBkZXNjZW5kYW50czogdHJ1ZSwgZmlyc3Q6IHRydWUgfSk7XHJcbiAgICB9XHJcbiAgICBWaWV3Q2hpbGRNZXRhZGF0YSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGxhbmdfMS5DT05TVCgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtPYmplY3RdKVxyXG4gICAgXSwgVmlld0NoaWxkTWV0YWRhdGEpO1xyXG4gICAgcmV0dXJuIFZpZXdDaGlsZE1ldGFkYXRhO1xyXG59KShWaWV3UXVlcnlNZXRhZGF0YSk7XHJcbmV4cG9ydHMuVmlld0NoaWxkTWV0YWRhdGEgPSBWaWV3Q2hpbGRNZXRhZGF0YTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGkuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgbWV0YWRhdGFfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpL21ldGFkYXRhJyk7XHJcbnZhciBjaGFuZ2VfZGV0ZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9jaGFuZ2VfZGV0ZWN0aW9uJyk7XHJcbi8qKlxyXG4gKiBEaXJlY3RpdmVzIGFsbG93IHlvdSB0byBhdHRhY2ggYmVoYXZpb3IgdG8gZWxlbWVudHMgaW4gdGhlIERPTS5cclxuICpcclxuICoge0BsaW5rIERpcmVjdGl2ZU1ldGFkYXRhfXMgd2l0aCBhbiBlbWJlZGRlZCB2aWV3IGFyZSBjYWxsZWQge0BsaW5rIENvbXBvbmVudE1ldGFkYXRhfXMuXHJcbiAqXHJcbiAqIEEgZGlyZWN0aXZlIGNvbnNpc3RzIG9mIGEgc2luZ2xlIGRpcmVjdGl2ZSBhbm5vdGF0aW9uIGFuZCBhIGNvbnRyb2xsZXIgY2xhc3MuIFdoZW4gdGhlXHJcbiAqIGRpcmVjdGl2ZSdzIGBzZWxlY3RvcmAgbWF0Y2hlc1xyXG4gKiBlbGVtZW50cyBpbiB0aGUgRE9NLCB0aGUgZm9sbG93aW5nIHN0ZXBzIG9jY3VyOlxyXG4gKlxyXG4gKiAxLiBGb3IgZWFjaCBkaXJlY3RpdmUsIHRoZSBgRWxlbWVudEluamVjdG9yYCBhdHRlbXB0cyB0byByZXNvbHZlIHRoZSBkaXJlY3RpdmUncyBjb25zdHJ1Y3RvclxyXG4gKiBhcmd1bWVudHMuXHJcbiAqIDIuIEFuZ3VsYXIgaW5zdGFudGlhdGVzIGRpcmVjdGl2ZXMgZm9yIGVhY2ggbWF0Y2hlZCBlbGVtZW50IHVzaW5nIGBFbGVtZW50SW5qZWN0b3JgIGluIGFcclxuICogZGVwdGgtZmlyc3Qgb3JkZXIsXHJcbiAqICAgIGFzIGRlY2xhcmVkIGluIHRoZSBIVE1MLlxyXG4gKlxyXG4gKiAjIyBVbmRlcnN0YW5kaW5nIEhvdyBJbmplY3Rpb24gV29ya3NcclxuICpcclxuICogVGhlcmUgYXJlIHRocmVlIHN0YWdlcyBvZiBpbmplY3Rpb24gcmVzb2x1dGlvbi5cclxuICogLSAqUHJlLWV4aXN0aW5nIEluamVjdG9ycyo6XHJcbiAqICAgLSBUaGUgdGVybWluYWwge0BsaW5rIEluamVjdG9yfSBjYW5ub3QgcmVzb2x2ZSBkZXBlbmRlbmNpZXMuIEl0IGVpdGhlciB0aHJvd3MgYW4gZXJyb3Igb3IsIGlmXHJcbiAqIHRoZSBkZXBlbmRlbmN5IHdhc1xyXG4gKiAgICAgc3BlY2lmaWVkIGFzIGBAT3B0aW9uYWxgLCByZXR1cm5zIGBudWxsYC5cclxuICogICAtIFRoZSBwbGF0Zm9ybSBpbmplY3RvciByZXNvbHZlcyBicm93c2VyIHNpbmdsZXRvbiByZXNvdXJjZXMsIHN1Y2ggYXM6IGNvb2tpZXMsIHRpdGxlLFxyXG4gKiBsb2NhdGlvbiwgYW5kIG90aGVycy5cclxuICogLSAqQ29tcG9uZW50IEluamVjdG9ycyo6IEVhY2ggY29tcG9uZW50IGluc3RhbmNlIGhhcyBpdHMgb3duIHtAbGluayBJbmplY3Rvcn0sIGFuZCB0aGV5IGZvbGxvd1xyXG4gKiB0aGUgc2FtZSBwYXJlbnQtY2hpbGQgaGllcmFyY2h5XHJcbiAqICAgICBhcyB0aGUgY29tcG9uZW50IGluc3RhbmNlcyBpbiB0aGUgRE9NLlxyXG4gKiAtICpFbGVtZW50IEluamVjdG9ycyo6IEVhY2ggY29tcG9uZW50IGluc3RhbmNlIGhhcyBhIFNoYWRvdyBET00uIFdpdGhpbiB0aGUgU2hhZG93IERPTSBlYWNoXHJcbiAqIGVsZW1lbnQgaGFzIGFuIGBFbGVtZW50SW5qZWN0b3JgXHJcbiAqICAgICB3aGljaCBmb2xsb3cgdGhlIHNhbWUgcGFyZW50LWNoaWxkIGhpZXJhcmNoeSBhcyB0aGUgRE9NIGVsZW1lbnRzIHRoZW1zZWx2ZXMuXHJcbiAqXHJcbiAqIFdoZW4gYSB0ZW1wbGF0ZSBpcyBpbnN0YW50aWF0ZWQsIGl0IGFsc28gbXVzdCBpbnN0YW50aWF0ZSB0aGUgY29ycmVzcG9uZGluZyBkaXJlY3RpdmVzIGluIGFcclxuICogZGVwdGgtZmlyc3Qgb3JkZXIuIFRoZVxyXG4gKiBjdXJyZW50IGBFbGVtZW50SW5qZWN0b3JgIHJlc29sdmVzIHRoZSBjb25zdHJ1Y3RvciBkZXBlbmRlbmNpZXMgZm9yIGVhY2ggZGlyZWN0aXZlLlxyXG4gKlxyXG4gKiBBbmd1bGFyIHRoZW4gcmVzb2x2ZXMgZGVwZW5kZW5jaWVzIGFzIGZvbGxvd3MsIGFjY29yZGluZyB0byB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcHBlYXIgaW4gdGhlXHJcbiAqIHtAbGluayBWaWV3TWV0YWRhdGF9OlxyXG4gKlxyXG4gKiAxLiBEZXBlbmRlbmNpZXMgb24gdGhlIGN1cnJlbnQgZWxlbWVudFxyXG4gKiAyLiBEZXBlbmRlbmNpZXMgb24gZWxlbWVudCBpbmplY3RvcnMgYW5kIHRoZWlyIHBhcmVudHMgdW50aWwgaXQgZW5jb3VudGVycyBhIFNoYWRvdyBET00gYm91bmRhcnlcclxuICogMy4gRGVwZW5kZW5jaWVzIG9uIGNvbXBvbmVudCBpbmplY3RvcnMgYW5kIHRoZWlyIHBhcmVudHMgdW50aWwgaXQgZW5jb3VudGVycyB0aGUgcm9vdCBjb21wb25lbnRcclxuICogNC4gRGVwZW5kZW5jaWVzIG9uIHByZS1leGlzdGluZyBpbmplY3RvcnNcclxuICpcclxuICpcclxuICogVGhlIGBFbGVtZW50SW5qZWN0b3JgIGNhbiBpbmplY3Qgb3RoZXIgZGlyZWN0aXZlcywgZWxlbWVudC1zcGVjaWZpYyBzcGVjaWFsIG9iamVjdHMsIG9yIGl0IGNhblxyXG4gKiBkZWxlZ2F0ZSB0byB0aGUgcGFyZW50XHJcbiAqIGluamVjdG9yLlxyXG4gKlxyXG4gKiBUbyBpbmplY3Qgb3RoZXIgZGlyZWN0aXZlcywgZGVjbGFyZSB0aGUgY29uc3RydWN0b3IgcGFyYW1ldGVyIGFzOlxyXG4gKiAtIGBkaXJlY3RpdmU6RGlyZWN0aXZlVHlwZWA6IGEgZGlyZWN0aXZlIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQgb25seVxyXG4gKiAtIGBASG9zdCgpIGRpcmVjdGl2ZTpEaXJlY3RpdmVUeXBlYDogYW55IGRpcmVjdGl2ZSB0aGF0IG1hdGNoZXMgdGhlIHR5cGUgYmV0d2VlbiB0aGUgY3VycmVudFxyXG4gKiBlbGVtZW50IGFuZCB0aGVcclxuICogICAgU2hhZG93IERPTSByb290LlxyXG4gKiAtIGBAUXVlcnkoRGlyZWN0aXZlVHlwZSkgcXVlcnk6UXVlcnlMaXN0PERpcmVjdGl2ZVR5cGU+YDogQSBsaXZlIGNvbGxlY3Rpb24gb2YgZGlyZWN0IGNoaWxkXHJcbiAqIGRpcmVjdGl2ZXMuXHJcbiAqIC0gYEBRdWVyeURlc2NlbmRhbnRzKERpcmVjdGl2ZVR5cGUpIHF1ZXJ5OlF1ZXJ5TGlzdDxEaXJlY3RpdmVUeXBlPmA6IEEgbGl2ZSBjb2xsZWN0aW9uIG9mIGFueVxyXG4gKiBjaGlsZCBkaXJlY3RpdmVzLlxyXG4gKlxyXG4gKiBUbyBpbmplY3QgZWxlbWVudC1zcGVjaWZpYyBzcGVjaWFsIG9iamVjdHMsIGRlY2xhcmUgdGhlIGNvbnN0cnVjdG9yIHBhcmFtZXRlciBhczpcclxuICogLSBgZWxlbWVudDogRWxlbWVudFJlZmAgdG8gb2J0YWluIGEgcmVmZXJlbmNlIHRvIGxvZ2ljYWwgZWxlbWVudCBpbiB0aGUgdmlldy5cclxuICogLSBgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZmAgdG8gY29udHJvbCBjaGlsZCB0ZW1wbGF0ZSBpbnN0YW50aWF0aW9uLCBmb3JcclxuICoge0BsaW5rIERpcmVjdGl2ZU1ldGFkYXRhfSBkaXJlY3RpdmVzIG9ubHlcclxuICogLSBgYmluZGluZ1Byb3BhZ2F0aW9uOiBCaW5kaW5nUHJvcGFnYXRpb25gIHRvIGNvbnRyb2wgY2hhbmdlIGRldGVjdGlvbiBpbiBhIG1vcmUgZ3JhbnVsYXIgd2F5LlxyXG4gKlxyXG4gKiAjIyBFeGFtcGxlXHJcbiAqXHJcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgaG93IGRlcGVuZGVuY3kgaW5qZWN0aW9uIHJlc29sdmVzIGNvbnN0cnVjdG9yIGFyZ3VtZW50cyBpblxyXG4gKiBwcmFjdGljZS5cclxuICpcclxuICpcclxuICogQXNzdW1lIHRoaXMgSFRNTCB0ZW1wbGF0ZTpcclxuICpcclxuICogYGBgXHJcbiAqIDxkaXYgZGVwZW5kZW5jeT1cIjFcIj5cclxuICogICA8ZGl2IGRlcGVuZGVuY3k9XCIyXCI+XHJcbiAqICAgICA8ZGl2IGRlcGVuZGVuY3k9XCIzXCIgbXktZGlyZWN0aXZlPlxyXG4gKiAgICAgICA8ZGl2IGRlcGVuZGVuY3k9XCI0XCI+XHJcbiAqICAgICAgICAgPGRpdiBkZXBlbmRlbmN5PVwiNVwiPjwvZGl2PlxyXG4gKiAgICAgICA8L2Rpdj5cclxuICogICAgICAgPGRpdiBkZXBlbmRlbmN5PVwiNlwiPjwvZGl2PlxyXG4gKiAgICAgPC9kaXY+XHJcbiAqICAgPC9kaXY+XHJcbiAqIDwvZGl2PlxyXG4gKiBgYGBcclxuICpcclxuICogV2l0aCB0aGUgZm9sbG93aW5nIGBkZXBlbmRlbmN5YCBkZWNvcmF0b3IgYW5kIGBTb21lU2VydmljZWAgaW5qZWN0YWJsZSBjbGFzcy5cclxuICpcclxuICogYGBgXHJcbiAqIEBJbmplY3RhYmxlKClcclxuICogY2xhc3MgU29tZVNlcnZpY2Uge1xyXG4gKiB9XHJcbiAqXHJcbiAqIEBEaXJlY3RpdmUoe1xyXG4gKiAgIHNlbGVjdG9yOiAnW2RlcGVuZGVuY3ldJyxcclxuICogICBpbnB1dHM6IFtcclxuICogICAgICdpZDogZGVwZW5kZW5jeSdcclxuICogICBdXHJcbiAqIH0pXHJcbiAqIGNsYXNzIERlcGVuZGVuY3kge1xyXG4gKiAgIGlkOnN0cmluZztcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogTGV0J3Mgc3RlcCB0aHJvdWdoIHRoZSBkaWZmZXJlbnQgd2F5cyBpbiB3aGljaCBgTXlEaXJlY3RpdmVgIGNvdWxkIGJlIGRlY2xhcmVkLi4uXHJcbiAqXHJcbiAqXHJcbiAqICMjIyBObyBpbmplY3Rpb25cclxuICpcclxuICogSGVyZSB0aGUgY29uc3RydWN0b3IgaXMgZGVjbGFyZWQgd2l0aCBubyBhcmd1bWVudHMsIHRoZXJlZm9yZSBub3RoaW5nIGlzIGluamVjdGVkIGludG9cclxuICogYE15RGlyZWN0aXZlYC5cclxuICpcclxuICogYGBgXHJcbiAqIEBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tteS1kaXJlY3RpdmVdJyB9KVxyXG4gKiBjbGFzcyBNeURpcmVjdGl2ZSB7XHJcbiAqICAgY29uc3RydWN0b3IoKSB7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBUaGlzIGRpcmVjdGl2ZSB3b3VsZCBiZSBpbnN0YW50aWF0ZWQgd2l0aCBubyBkZXBlbmRlbmNpZXMuXHJcbiAqXHJcbiAqXHJcbiAqICMjIyBDb21wb25lbnQtbGV2ZWwgaW5qZWN0aW9uXHJcbiAqXHJcbiAqIERpcmVjdGl2ZXMgY2FuIGluamVjdCBhbnkgaW5qZWN0YWJsZSBpbnN0YW5jZSBmcm9tIHRoZSBjbG9zZXN0IGNvbXBvbmVudCBpbmplY3RvciBvciBhbnkgb2YgaXRzXHJcbiAqIHBhcmVudHMuXHJcbiAqXHJcbiAqIEhlcmUsIHRoZSBjb25zdHJ1Y3RvciBkZWNsYXJlcyBhIHBhcmFtZXRlciwgYHNvbWVTZXJ2aWNlYCwgYW5kIGluamVjdHMgdGhlIGBTb21lU2VydmljZWAgdHlwZVxyXG4gKiBmcm9tIHRoZSBwYXJlbnRcclxuICogY29tcG9uZW50J3MgaW5qZWN0b3IuXHJcbiAqIGBgYFxyXG4gKiBARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbXktZGlyZWN0aXZlXScgfSlcclxuICogY2xhc3MgTXlEaXJlY3RpdmUge1xyXG4gKiAgIGNvbnN0cnVjdG9yKHNvbWVTZXJ2aWNlOiBTb21lU2VydmljZSkge1xyXG4gKiAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogVGhpcyBkaXJlY3RpdmUgd291bGQgYmUgaW5zdGFudGlhdGVkIHdpdGggYSBkZXBlbmRlbmN5IG9uIGBTb21lU2VydmljZWAuXHJcbiAqXHJcbiAqXHJcbiAqICMjIyBJbmplY3RpbmcgYSBkaXJlY3RpdmUgZnJvbSB0aGUgY3VycmVudCBlbGVtZW50XHJcbiAqXHJcbiAqIERpcmVjdGl2ZXMgY2FuIGluamVjdCBvdGhlciBkaXJlY3RpdmVzIGRlY2xhcmVkIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQuXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbXktZGlyZWN0aXZlXScgfSlcclxuICogY2xhc3MgTXlEaXJlY3RpdmUge1xyXG4gKiAgIGNvbnN0cnVjdG9yKGRlcGVuZGVuY3k6IERlcGVuZGVuY3kpIHtcclxuICogICAgIGV4cGVjdChkZXBlbmRlbmN5LmlkKS50b0VxdWFsKDMpO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICogVGhpcyBkaXJlY3RpdmUgd291bGQgYmUgaW5zdGFudGlhdGVkIHdpdGggYERlcGVuZGVuY3lgIGRlY2xhcmVkIGF0IHRoZSBzYW1lIGVsZW1lbnQsIGluIHRoaXMgY2FzZVxyXG4gKiBgZGVwZW5kZW5jeT1cIjNcImAuXHJcbiAqXHJcbiAqICMjIyBJbmplY3RpbmcgYSBkaXJlY3RpdmUgZnJvbSBhbnkgYW5jZXN0b3IgZWxlbWVudHNcclxuICpcclxuICogRGlyZWN0aXZlcyBjYW4gaW5qZWN0IG90aGVyIGRpcmVjdGl2ZXMgZGVjbGFyZWQgb24gYW55IGFuY2VzdG9yIGVsZW1lbnQgKGluIHRoZSBjdXJyZW50IFNoYWRvd1xyXG4gKiBET00pLCBpLmUuIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQsIHRoZVxyXG4gKiBwYXJlbnQgZWxlbWVudCwgb3IgaXRzIHBhcmVudHMuXHJcbiAqIGBgYFxyXG4gKiBARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbXktZGlyZWN0aXZlXScgfSlcclxuICogY2xhc3MgTXlEaXJlY3RpdmUge1xyXG4gKiAgIGNvbnN0cnVjdG9yKEBIb3N0KCkgZGVwZW5kZW5jeTogRGVwZW5kZW5jeSkge1xyXG4gKiAgICAgZXhwZWN0KGRlcGVuZGVuY3kuaWQpLnRvRXF1YWwoMik7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBgQEhvc3RgIGNoZWNrcyB0aGUgY3VycmVudCBlbGVtZW50LCB0aGUgcGFyZW50LCBhcyB3ZWxsIGFzIGl0cyBwYXJlbnRzIHJlY3Vyc2l2ZWx5LiBJZlxyXG4gKiBgZGVwZW5kZW5jeT1cIjJcImAgZGlkbid0XHJcbiAqIGV4aXN0IG9uIHRoZSBkaXJlY3QgcGFyZW50LCB0aGlzIGluamVjdGlvbiB3b3VsZFxyXG4gKiBoYXZlIHJldHVybmVkXHJcbiAqIGBkZXBlbmRlbmN5PVwiMVwiYC5cclxuICpcclxuICpcclxuICogIyMjIEluamVjdGluZyBhIGxpdmUgY29sbGVjdGlvbiBvZiBkaXJlY3QgY2hpbGQgZGlyZWN0aXZlc1xyXG4gKlxyXG4gKlxyXG4gKiBBIGRpcmVjdGl2ZSBjYW4gYWxzbyBxdWVyeSBmb3Igb3RoZXIgY2hpbGQgZGlyZWN0aXZlcy4gU2luY2UgcGFyZW50IGRpcmVjdGl2ZXMgYXJlIGluc3RhbnRpYXRlZFxyXG4gKiBiZWZvcmUgY2hpbGQgZGlyZWN0aXZlcywgYSBkaXJlY3RpdmUgY2FuJ3Qgc2ltcGx5IGluamVjdCB0aGUgbGlzdCBvZiBjaGlsZCBkaXJlY3RpdmVzLiBJbnN0ZWFkLFxyXG4gKiB0aGUgZGlyZWN0aXZlIGluamVjdHMgYSB7QGxpbmsgUXVlcnlMaXN0fSwgd2hpY2ggdXBkYXRlcyBpdHMgY29udGVudHMgYXMgY2hpbGRyZW4gYXJlIGFkZGVkLFxyXG4gKiByZW1vdmVkLCBvciBtb3ZlZCBieSBhIGRpcmVjdGl2ZSB0aGF0IHVzZXMgYSB7QGxpbmsgVmlld0NvbnRhaW5lclJlZn0gc3VjaCBhcyBhIGBuZy1mb3JgLCBhblxyXG4gKiBgbmctaWZgLCBvciBhbiBgbmctc3dpdGNoYC5cclxuICpcclxuICogYGBgXHJcbiAqIEBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tteS1kaXJlY3RpdmVdJyB9KVxyXG4gKiBjbGFzcyBNeURpcmVjdGl2ZSB7XHJcbiAqICAgY29uc3RydWN0b3IoQFF1ZXJ5KERlcGVuZGVuY3kpIGRlcGVuZGVuY2llczpRdWVyeUxpc3Q8RGVwZW5kZW5jeT4pIHtcclxuICogICB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIFRoaXMgZGlyZWN0aXZlIHdvdWxkIGJlIGluc3RhbnRpYXRlZCB3aXRoIGEge0BsaW5rIFF1ZXJ5TGlzdH0gd2hpY2ggY29udGFpbnMgYERlcGVuZGVuY3lgIDQgYW5kXHJcbiAqIDYuIEhlcmUsIGBEZXBlbmRlbmN5YCA1IHdvdWxkIG5vdCBiZSBpbmNsdWRlZCwgYmVjYXVzZSBpdCBpcyBub3QgYSBkaXJlY3QgY2hpbGQuXHJcbiAqXHJcbiAqICMjIyBJbmplY3RpbmcgYSBsaXZlIGNvbGxlY3Rpb24gb2YgZGVzY2VuZGFudCBkaXJlY3RpdmVzXHJcbiAqXHJcbiAqIEJ5IHBhc3NpbmcgdGhlIGRlc2NlbmRhbnQgZmxhZyB0byBgQFF1ZXJ5YCBhYm92ZSwgd2UgY2FuIGluY2x1ZGUgdGhlIGNoaWxkcmVuIG9mIHRoZSBjaGlsZFxyXG4gKiBlbGVtZW50cy5cclxuICpcclxuICogYGBgXHJcbiAqIEBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tteS1kaXJlY3RpdmVdJyB9KVxyXG4gKiBjbGFzcyBNeURpcmVjdGl2ZSB7XHJcbiAqICAgY29uc3RydWN0b3IoQFF1ZXJ5KERlcGVuZGVuY3ksIHtkZXNjZW5kYW50czogdHJ1ZX0pIGRlcGVuZGVuY2llczpRdWVyeUxpc3Q8RGVwZW5kZW5jeT4pIHtcclxuICogICB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIFRoaXMgZGlyZWN0aXZlIHdvdWxkIGJlIGluc3RhbnRpYXRlZCB3aXRoIGEgUXVlcnkgd2hpY2ggd291bGQgY29udGFpbiBgRGVwZW5kZW5jeWAgNCwgNSBhbmQgNi5cclxuICpcclxuICogIyMjIE9wdGlvbmFsIGluamVjdGlvblxyXG4gKlxyXG4gKiBUaGUgbm9ybWFsIGJlaGF2aW9yIG9mIGRpcmVjdGl2ZXMgaXMgdG8gcmV0dXJuIGFuIGVycm9yIHdoZW4gYSBzcGVjaWZpZWQgZGVwZW5kZW5jeSBjYW5ub3QgYmVcclxuICogcmVzb2x2ZWQuIElmIHlvdVxyXG4gKiB3b3VsZCBsaWtlIHRvIGluamVjdCBgbnVsbGAgb24gdW5yZXNvbHZlZCBkZXBlbmRlbmN5IGluc3RlYWQsIHlvdSBjYW4gYW5ub3RhdGUgdGhhdCBkZXBlbmRlbmN5XHJcbiAqIHdpdGggYEBPcHRpb25hbCgpYC5cclxuICogVGhpcyBleHBsaWNpdGx5IHBlcm1pdHMgdGhlIGF1dGhvciBvZiBhIHRlbXBsYXRlIHRvIHRyZWF0IHNvbWUgb2YgdGhlIHN1cnJvdW5kaW5nIGRpcmVjdGl2ZXMgYXNcclxuICogb3B0aW9uYWwuXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbXktZGlyZWN0aXZlXScgfSlcclxuICogY2xhc3MgTXlEaXJlY3RpdmUge1xyXG4gKiAgIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIGRlcGVuZGVuY3k6RGVwZW5kZW5jeSkge1xyXG4gKiAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogVGhpcyBkaXJlY3RpdmUgd291bGQgYmUgaW5zdGFudGlhdGVkIHdpdGggYSBgRGVwZW5kZW5jeWAgZGlyZWN0aXZlIGZvdW5kIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQuXHJcbiAqIElmIG5vbmUgY2FuIGJlXHJcbiAqIGZvdW5kLCB0aGUgaW5qZWN0b3Igc3VwcGxpZXMgYG51bGxgIGluc3RlYWQgb2YgdGhyb3dpbmcgYW4gZXJyb3IuXHJcbiAqXHJcbiAqICMjIEV4YW1wbGVcclxuICpcclxuICogSGVyZSB3ZSB1c2UgYSBkZWNvcmF0b3IgZGlyZWN0aXZlIHRvIHNpbXBseSBkZWZpbmUgYmFzaWMgdG9vbC10aXAgYmVoYXZpb3IuXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBARGlyZWN0aXZlKHtcclxuICogICBzZWxlY3RvcjogJ1t0b29sdGlwXScsXHJcbiAqICAgaW5wdXRzOiBbXHJcbiAqICAgICAndGV4dDogdG9vbHRpcCdcclxuICogICBdLFxyXG4gKiAgIGhvc3Q6IHtcclxuICogICAgICcobW91c2VlbnRlciknOiAnb25Nb3VzZUVudGVyKCknLFxyXG4gKiAgICAgJyhtb3VzZWxlYXZlKSc6ICdvbk1vdXNlTGVhdmUoKSdcclxuICogICB9XHJcbiAqIH0pXHJcbiAqIGNsYXNzIFRvb2x0aXB7XHJcbiAqICAgdGV4dDpzdHJpbmc7XHJcbiAqICAgb3ZlcmxheTpPdmVybGF5OyAvLyBOT1QgWUVUIElNUExFTUVOVEVEXHJcbiAqICAgb3ZlcmxheU1hbmFnZXI6T3ZlcmxheU1hbmFnZXI7IC8vIE5PVCBZRVQgSU1QTEVNRU5URURcclxuICpcclxuICogICBjb25zdHJ1Y3RvcihvdmVybGF5TWFuYWdlcjpPdmVybGF5TWFuYWdlcikge1xyXG4gKiAgICAgdGhpcy5vdmVybGF5ID0gb3ZlcmxheTtcclxuICogICB9XHJcbiAqXHJcbiAqICAgb25Nb3VzZUVudGVyKCkge1xyXG4gKiAgICAgLy8gZXhhY3Qgc2lnbmF0dXJlIHRvIGJlIGRldGVybWluZWRcclxuICogICAgIHRoaXMub3ZlcmxheSA9IHRoaXMub3ZlcmxheU1hbmFnZXIub3Blbih0ZXh0LCAuLi4pO1xyXG4gKiAgIH1cclxuICpcclxuICogICBvbk1vdXNlTGVhdmUoKSB7XHJcbiAqICAgICB0aGlzLm92ZXJsYXkuY2xvc2UoKTtcclxuICogICAgIHRoaXMub3ZlcmxheSA9IG51bGw7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKiBJbiBvdXIgSFRNTCB0ZW1wbGF0ZSwgd2UgY2FuIHRoZW4gYWRkIHRoaXMgYmVoYXZpb3IgdG8gYSBgPGRpdj5gIG9yIGFueSBvdGhlciBlbGVtZW50IHdpdGggdGhlXHJcbiAqIGB0b29sdGlwYCBzZWxlY3RvcixcclxuICogbGlrZSBzbzpcclxuICpcclxuICogYGBgXHJcbiAqIDxkaXYgdG9vbHRpcD1cInNvbWUgdGV4dCBoZXJlXCI+PC9kaXY+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBEaXJlY3RpdmVzIGNhbiBhbHNvIGNvbnRyb2wgdGhlIGluc3RhbnRpYXRpb24sIGRlc3RydWN0aW9uLCBhbmQgcG9zaXRpb25pbmcgb2YgaW5saW5lIHRlbXBsYXRlXHJcbiAqIGVsZW1lbnRzOlxyXG4gKlxyXG4gKiBBIGRpcmVjdGl2ZSB1c2VzIGEge0BsaW5rIFZpZXdDb250YWluZXJSZWZ9IHRvIGluc3RhbnRpYXRlLCBpbnNlcnQsIG1vdmUsIGFuZCBkZXN0cm95IHZpZXdzIGF0XHJcbiAqIHJ1bnRpbWUuXHJcbiAqIFRoZSB7QGxpbmsgVmlld0NvbnRhaW5lclJlZn0gaXMgY3JlYXRlZCBhcyBhIHJlc3VsdCBvZiBgPHRlbXBsYXRlPmAgZWxlbWVudCwgYW5kIHJlcHJlc2VudHMgYVxyXG4gKiBsb2NhdGlvbiBpbiB0aGUgY3VycmVudCB2aWV3XHJcbiAqIHdoZXJlIHRoZXNlIGFjdGlvbnMgYXJlIHBlcmZvcm1lZC5cclxuICpcclxuICogVmlld3MgYXJlIGFsd2F5cyBjcmVhdGVkIGFzIGNoaWxkcmVuIG9mIHRoZSBjdXJyZW50IHtAbGluayBWaWV3TWV0YWRhdGF9LCBhbmQgYXMgc2libGluZ3Mgb2YgdGhlXHJcbiAqIGA8dGVtcGxhdGU+YCBlbGVtZW50LiBUaHVzIGFcclxuICogZGlyZWN0aXZlIGluIGEgY2hpbGQgdmlldyBjYW5ub3QgaW5qZWN0IHRoZSBkaXJlY3RpdmUgdGhhdCBjcmVhdGVkIGl0LlxyXG4gKlxyXG4gKiBTaW5jZSBkaXJlY3RpdmVzIHRoYXQgY3JlYXRlIHZpZXdzIHZpYSBWaWV3Q29udGFpbmVycyBhcmUgY29tbW9uIGluIEFuZ3VsYXIsIGFuZCB1c2luZyB0aGUgZnVsbFxyXG4gKiBgPHRlbXBsYXRlPmAgZWxlbWVudCBzeW50YXggaXMgd29yZHksIEFuZ3VsYXJcclxuICogYWxzbyBzdXBwb3J0cyBhIHNob3J0aGFuZCBub3RhdGlvbjogYDxsaSAqZm9vPVwiYmFyXCI+YCBhbmQgYDxsaSB0ZW1wbGF0ZT1cImZvbzogYmFyXCI+YCBhcmVcclxuICogZXF1aXZhbGVudC5cclxuICpcclxuICogVGh1cyxcclxuICpcclxuICogYGBgXHJcbiAqIDx1bD5cclxuICogICA8bGkgKmZvbz1cImJhclwiIHRpdGxlPVwidGV4dFwiPjwvbGk+XHJcbiAqIDwvdWw+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBFeHBhbmRzIGluIHVzZSB0bzpcclxuICpcclxuICogYGBgXHJcbiAqIDx1bD5cclxuICogICA8dGVtcGxhdGUgW2Zvb109XCJiYXJcIj5cclxuICogICAgIDxsaSB0aXRsZT1cInRleHRcIj48L2xpPlxyXG4gKiAgIDwvdGVtcGxhdGU+XHJcbiAqIDwvdWw+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBOb3RpY2UgdGhhdCBhbHRob3VnaCB0aGUgc2hvcnRoYW5kIHBsYWNlcyBgKmZvbz1cImJhclwiYCB3aXRoaW4gdGhlIGA8bGk+YCBlbGVtZW50LCB0aGUgYmluZGluZyBmb3JcclxuICogdGhlIGRpcmVjdGl2ZVxyXG4gKiBjb250cm9sbGVyIGlzIGNvcnJlY3RseSBpbnN0YW50aWF0ZWQgb24gdGhlIGA8dGVtcGxhdGU+YCBlbGVtZW50IHJhdGhlciB0aGFuIHRoZSBgPGxpPmAgZWxlbWVudC5cclxuICpcclxuICogIyMgTGlmZWN5Y2xlIGhvb2tzXHJcbiAqXHJcbiAqIFdoZW4gdGhlIGRpcmVjdGl2ZSBjbGFzcyBpbXBsZW1lbnRzIHNvbWUge0BsaW5rIGFuZ3VsYXIyL2xpZmVjeWNsZV9ob29rc30gdGhlIGNhbGxiYWNrcyBhcmVcclxuICogY2FsbGVkIGJ5IHRoZSBjaGFuZ2UgZGV0ZWN0aW9uIGF0IGRlZmluZWQgcG9pbnRzIGluIHRpbWUgZHVyaW5nIHRoZSBsaWZlIG9mIHRoZSBkaXJlY3RpdmUuXHJcbiAqXHJcbiAqICMjIEV4YW1wbGVcclxuICpcclxuICogTGV0J3Mgc3VwcG9zZSB3ZSB3YW50IHRvIGltcGxlbWVudCB0aGUgYHVubGVzc2AgYmVoYXZpb3IsIHRvIGNvbmRpdGlvbmFsbHkgaW5jbHVkZSBhIHRlbXBsYXRlLlxyXG4gKlxyXG4gKiBIZXJlIGlzIGEgc2ltcGxlIGRpcmVjdGl2ZSB0aGF0IHRyaWdnZXJzIG9uIGFuIGB1bmxlc3NgIHNlbGVjdG9yOlxyXG4gKlxyXG4gKiBgYGBcclxuICogQERpcmVjdGl2ZSh7XHJcbiAqICAgc2VsZWN0b3I6ICdbdW5sZXNzXScsXHJcbiAqICAgaW5wdXRzOiBbJ3VubGVzcyddXHJcbiAqIH0pXHJcbiAqIGV4cG9ydCBjbGFzcyBVbmxlc3Mge1xyXG4gKiAgIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWY7XHJcbiAqICAgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmO1xyXG4gKiAgIHByZXZDb25kaXRpb246IGJvb2xlYW47XHJcbiAqXHJcbiAqICAgY29uc3RydWN0b3Iodmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZiwgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmKSB7XHJcbiAqICAgICB0aGlzLnZpZXdDb250YWluZXIgPSB2aWV3Q29udGFpbmVyO1xyXG4gKiAgICAgdGhpcy50ZW1wbGF0ZVJlZiA9IHRlbXBsYXRlUmVmO1xyXG4gKiAgICAgdGhpcy5wcmV2Q29uZGl0aW9uID0gbnVsbDtcclxuICogICB9XHJcbiAqXHJcbiAqICAgc2V0IHVubGVzcyhuZXdDb25kaXRpb24pIHtcclxuICogICAgIGlmIChuZXdDb25kaXRpb24gJiYgKGlzQmxhbmsodGhpcy5wcmV2Q29uZGl0aW9uKSB8fCAhdGhpcy5wcmV2Q29uZGl0aW9uKSkge1xyXG4gKiAgICAgICB0aGlzLnByZXZDb25kaXRpb24gPSB0cnVlO1xyXG4gKiAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcclxuICogICAgIH0gZWxzZSBpZiAoIW5ld0NvbmRpdGlvbiAmJiAoaXNCbGFuayh0aGlzLnByZXZDb25kaXRpb24pIHx8IHRoaXMucHJldkNvbmRpdGlvbikpIHtcclxuICogICAgICAgdGhpcy5wcmV2Q29uZGl0aW9uID0gZmFsc2U7XHJcbiAqICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGUodGhpcy50ZW1wbGF0ZVJlZik7XHJcbiAqICAgICB9XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBXZSBjYW4gdGhlbiB1c2UgdGhpcyBgdW5sZXNzYCBzZWxlY3RvciBpbiBhIHRlbXBsYXRlOlxyXG4gKiBgYGBcclxuICogPHVsPlxyXG4gKiAgIDxsaSAqdW5sZXNzPVwiZXhwclwiPjwvbGk+XHJcbiAqIDwvdWw+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBPbmNlIHRoZSBkaXJlY3RpdmUgaW5zdGFudGlhdGVzIHRoZSBjaGlsZCB2aWV3LCB0aGUgc2hvcnRoYW5kIG5vdGF0aW9uIGZvciB0aGUgdGVtcGxhdGUgZXhwYW5kc1xyXG4gKiBhbmQgdGhlIHJlc3VsdCBpczpcclxuICpcclxuICogYGBgXHJcbiAqIDx1bD5cclxuICogICA8dGVtcGxhdGUgW3VubGVzc109XCJleHBcIj5cclxuICogICAgIDxsaT48L2xpPlxyXG4gKiAgIDwvdGVtcGxhdGU+XHJcbiAqICAgPGxpPjwvbGk+XHJcbiAqIDwvdWw+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBOb3RlIGFsc28gdGhhdCBhbHRob3VnaCB0aGUgYDxsaT48L2xpPmAgdGVtcGxhdGUgc3RpbGwgZXhpc3RzIGluc2lkZSB0aGUgYDx0ZW1wbGF0ZT48L3RlbXBsYXRlPmAsXHJcbiAqIHRoZSBpbnN0YW50aWF0ZWRcclxuICogdmlldyBvY2N1cnMgb24gdGhlIHNlY29uZCBgPGxpPjwvbGk+YCB3aGljaCBpcyBhIHNpYmxpbmcgdG8gdGhlIGA8dGVtcGxhdGU+YCBlbGVtZW50LlxyXG4gKi9cclxudmFyIERpcmVjdGl2ZU1ldGFkYXRhID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhEaXJlY3RpdmVNZXRhZGF0YSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIERpcmVjdGl2ZU1ldGFkYXRhKF9hKSB7XHJcbiAgICAgICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIHNlbGVjdG9yID0gX2Iuc2VsZWN0b3IsIGlucHV0cyA9IF9iLmlucHV0cywgb3V0cHV0cyA9IF9iLm91dHB1dHMsIHByb3BlcnRpZXMgPSBfYi5wcm9wZXJ0aWVzLCBldmVudHMgPSBfYi5ldmVudHMsIGhvc3QgPSBfYi5ob3N0LCBiaW5kaW5ncyA9IF9iLmJpbmRpbmdzLCBwcm92aWRlcnMgPSBfYi5wcm92aWRlcnMsIGV4cG9ydEFzID0gX2IuZXhwb3J0QXMsIG1vZHVsZUlkID0gX2IubW9kdWxlSWQsIHF1ZXJpZXMgPSBfYi5xdWVyaWVzO1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcclxuICAgICAgICB0aGlzLl9pbnB1dHMgPSBpbnB1dHM7XHJcbiAgICAgICAgdGhpcy5fcHJvcGVydGllcyA9IHByb3BlcnRpZXM7XHJcbiAgICAgICAgdGhpcy5fb3V0cHV0cyA9IG91dHB1dHM7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gZXZlbnRzO1xyXG4gICAgICAgIHRoaXMuaG9zdCA9IGhvc3Q7XHJcbiAgICAgICAgdGhpcy5leHBvcnRBcyA9IGV4cG9ydEFzO1xyXG4gICAgICAgIHRoaXMubW9kdWxlSWQgPSBtb2R1bGVJZDtcclxuICAgICAgICB0aGlzLnF1ZXJpZXMgPSBxdWVyaWVzO1xyXG4gICAgICAgIHRoaXMuX3Byb3ZpZGVycyA9IHByb3ZpZGVycztcclxuICAgICAgICB0aGlzLl9iaW5kaW5ncyA9IGJpbmRpbmdzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERpcmVjdGl2ZU1ldGFkYXRhLnByb3RvdHlwZSwgXCJpbnB1dHNcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEVudW1lcmF0ZXMgdGhlIHNldCBvZiBkYXRhLWJvdW5kIGlucHV0IHByb3BlcnRpZXMgZm9yIGEgZGlyZWN0aXZlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBBbmd1bGFyIGF1dG9tYXRpY2FsbHkgdXBkYXRlcyBpbnB1dCBwcm9wZXJ0aWVzIGR1cmluZyBjaGFuZ2UgZGV0ZWN0aW9uLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogVGhlIGBpbnB1dHNgIHByb3BlcnR5IGRlZmluZXMgYSBzZXQgb2YgYGRpcmVjdGl2ZVByb3BlcnR5YCB0byBgYmluZGluZ1Byb3BlcnR5YFxyXG4gICAgICAgICAqIGNvbmZpZ3VyYXRpb246XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiAtIGBkaXJlY3RpdmVQcm9wZXJ0eWAgc3BlY2lmaWVzIHRoZSBjb21wb25lbnQgcHJvcGVydHkgd2hlcmUgdGhlIHZhbHVlIGlzIHdyaXR0ZW4uXHJcbiAgICAgICAgICogLSBgYmluZGluZ1Byb3BlcnR5YCBzcGVjaWZpZXMgdGhlIERPTSBwcm9wZXJ0eSB3aGVyZSB0aGUgdmFsdWUgaXMgcmVhZCBmcm9tLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogV2hlbiBgYmluZGluZ1Byb3BlcnR5YCBpcyBub3QgcHJvdmlkZWQsIGl0IGlzIGFzc3VtZWQgdG8gYmUgZXF1YWwgdG8gYGRpcmVjdGl2ZVByb3BlcnR5YC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9pdmhmWFk/cD1wcmV2aWV3KSlcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBjcmVhdGVzIGEgY29tcG9uZW50IHdpdGggdHdvIGRhdGEtYm91bmQgcHJvcGVydGllcy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAgICAgKiBAQ29tcG9uZW50KHtcclxuICAgICAgICAgKiAgIHNlbGVjdG9yOiAnYmFuay1hY2NvdW50JyxcclxuICAgICAgICAgKiAgIGlucHV0czogWydiYW5rTmFtZScsICdpZDogYWNjb3VudC1pZCddLFxyXG4gICAgICAgICAqICAgdGVtcGxhdGU6IGBcclxuICAgICAgICAgKiAgICAgQmFuayBOYW1lOiB7e2JhbmtOYW1lfX1cclxuICAgICAgICAgKiAgICAgQWNjb3VudCBJZDoge3tpZH19XHJcbiAgICAgICAgICogICBgXHJcbiAgICAgICAgICogfSlcclxuICAgICAgICAgKiBjbGFzcyBCYW5rQWNjb3VudCB7XHJcbiAgICAgICAgICogICBiYW5rTmFtZTogc3RyaW5nO1xyXG4gICAgICAgICAqICAgaWQ6IHN0cmluZztcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqICAgLy8gdGhpcyBwcm9wZXJ0eSBpcyBub3QgYm91bmQsIGFuZCB3b24ndCBiZSBhdXRvbWF0aWNhbGx5IHVwZGF0ZWQgYnkgQW5ndWxhclxyXG4gICAgICAgICAqICAgbm9ybWFsaXplZEJhbmtOYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgICogfVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQENvbXBvbmVudCh7XHJcbiAgICAgICAgICogICBzZWxlY3RvcjogJ2FwcCcsXHJcbiAgICAgICAgICogICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgICAqICAgICA8YmFuay1hY2NvdW50IGJhbmstbmFtZT1cIlJCQ1wiIGFjY291bnQtaWQ9XCI0NzQ3XCI+PC9iYW5rLWFjY291bnQ+XHJcbiAgICAgICAgICogICBgLFxyXG4gICAgICAgICAqICAgZGlyZWN0aXZlczogW0JhbmtBY2NvdW50XVxyXG4gICAgICAgICAqIH0pXHJcbiAgICAgICAgICogY2xhc3MgQXBwIHt9XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBib290c3RyYXAoQXBwKTtcclxuICAgICAgICAgKiBgYGBcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGFuZ18xLmlzUHJlc2VudCh0aGlzLl9wcm9wZXJ0aWVzKSAmJiB0aGlzLl9wcm9wZXJ0aWVzLmxlbmd0aCA+IDAgPyB0aGlzLl9wcm9wZXJ0aWVzIDpcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0cztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaXJlY3RpdmVNZXRhZGF0YS5wcm90b3R5cGUsIFwicHJvcGVydGllc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmlucHV0czsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGlyZWN0aXZlTWV0YWRhdGEucHJvdG90eXBlLCBcIm91dHB1dHNcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEVudW1lcmF0ZXMgdGhlIHNldCBvZiBldmVudC1ib3VuZCBvdXRwdXQgcHJvcGVydGllcy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFdoZW4gYW4gb3V0cHV0IHByb3BlcnR5IGVtaXRzIGFuIGV2ZW50LCBhbiBldmVudCBoYW5kbGVyIGF0dGFjaGVkIHRvIHRoYXQgZXZlbnRcclxuICAgICAgICAgKiB0aGUgdGVtcGxhdGUgaXMgaW52b2tlZC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFRoZSBgb3V0cHV0c2AgcHJvcGVydHkgZGVmaW5lcyBhIHNldCBvZiBgZGlyZWN0aXZlUHJvcGVydHlgIHRvIGBiaW5kaW5nUHJvcGVydHlgXHJcbiAgICAgICAgICogY29uZmlndXJhdGlvbjpcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIC0gYGRpcmVjdGl2ZVByb3BlcnR5YCBzcGVjaWZpZXMgdGhlIGNvbXBvbmVudCBwcm9wZXJ0eSB0aGF0IGVtaXRzIGV2ZW50cy5cclxuICAgICAgICAgKiAtIGBiaW5kaW5nUHJvcGVydHlgIHNwZWNpZmllcyB0aGUgRE9NIHByb3BlcnR5IHRoZSBldmVudCBoYW5kbGVyIGlzIGF0dGFjaGVkIHRvLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L2Q1Q05xNz9wPXByZXZpZXcpKVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICAgICAqIEBEaXJlY3RpdmUoe1xyXG4gICAgICAgICAqICAgc2VsZWN0b3I6ICdpbnRlcnZhbC1kaXInLFxyXG4gICAgICAgICAqICAgb3V0cHV0czogWydldmVyeVNlY29uZCcsICdmaXZlNVNlY3M6IGV2ZXJ5Rml2ZVNlY29uZHMnXVxyXG4gICAgICAgICAqIH0pXHJcbiAgICAgICAgICogY2xhc3MgSW50ZXJ2YWxEaXIge1xyXG4gICAgICAgICAqICAgZXZlcnlTZWNvbmQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgICogICBmaXZlNVNlY3MgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAqICAgICBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLmV2ZXJ5U2Vjb25kLm5leHQoXCJldmVudFwiKSwgMTAwMCk7XHJcbiAgICAgICAgICogICAgIHNldEludGVydmFsKCgpID0+IHRoaXMuZml2ZTVTZWNzLm5leHQoXCJldmVudFwiKSwgNTAwMCk7XHJcbiAgICAgICAgICogICB9XHJcbiAgICAgICAgICogfVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQENvbXBvbmVudCh7XHJcbiAgICAgICAgICogICBzZWxlY3RvcjogJ2FwcCcsXHJcbiAgICAgICAgICogICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgICAqICAgICA8aW50ZXJ2YWwtZGlyIChldmVyeS1zZWNvbmQpPVwiZXZlcnlTZWNvbmQoKVwiIChldmVyeS1maXZlLXNlY29uZHMpPVwiZXZlcnlGaXZlU2Vjb25kcygpXCI+XHJcbiAgICAgICAgICogICAgIDwvaW50ZXJ2YWwtZGlyPlxyXG4gICAgICAgICAqICAgYCxcclxuICAgICAgICAgKiAgIGRpcmVjdGl2ZXM6IFtJbnRlcnZhbERpcl1cclxuICAgICAgICAgKiB9KVxyXG4gICAgICAgICAqIGNsYXNzIEFwcCB7XHJcbiAgICAgICAgICogICBldmVyeVNlY29uZCgpIHsgY29uc29sZS5sb2coJ3NlY29uZCcpOyB9XHJcbiAgICAgICAgICogICBldmVyeUZpdmVTZWNvbmRzKCkgeyBjb25zb2xlLmxvZygnZml2ZSBzZWNvbmRzJyk7IH1cclxuICAgICAgICAgKiB9XHJcbiAgICAgICAgICogYm9vdHN0cmFwKEFwcCk7XHJcbiAgICAgICAgICogYGBgXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQodGhpcy5fZXZlbnRzKSAmJiB0aGlzLl9ldmVudHMubGVuZ3RoID4gMCA/IHRoaXMuX2V2ZW50cyA6IHRoaXMuX291dHB1dHM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGlyZWN0aXZlTWV0YWRhdGEucHJvdG90eXBlLCBcImV2ZW50c1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm91dHB1dHM7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERpcmVjdGl2ZU1ldGFkYXRhLnByb3RvdHlwZSwgXCJwcm92aWRlcnNcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlZmluZXMgdGhlIHNldCBvZiBpbmplY3RhYmxlIG9iamVjdHMgdGhhdCBhcmUgdmlzaWJsZSB0byBhIERpcmVjdGl2ZSBhbmQgaXRzIGxpZ2h0IERPTVxyXG4gICAgICAgICAqIGNoaWxkcmVuLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogIyMgU2ltcGxlIEV4YW1wbGVcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEhlcmUgaXMgYW4gZXhhbXBsZSBvZiBhIGNsYXNzIHRoYXQgY2FuIGJlIGluamVjdGVkOlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogYGBgXHJcbiAgICAgICAgICogY2xhc3MgR3JlZXRlciB7XHJcbiAgICAgICAgICogICAgZ3JlZXQobmFtZTpzdHJpbmcpIHtcclxuICAgICAgICAgKiAgICAgIHJldHVybiAnSGVsbG8gJyArIG5hbWUgKyAnISc7XHJcbiAgICAgICAgICogICAgfVxyXG4gICAgICAgICAqIH1cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBEaXJlY3RpdmUoe1xyXG4gICAgICAgICAqICAgc2VsZWN0b3I6ICdncmVldCcsXHJcbiAgICAgICAgICogICBiaW5kaW5nczogW1xyXG4gICAgICAgICAqICAgICBHcmVldGVyXHJcbiAgICAgICAgICogICBdXHJcbiAgICAgICAgICogfSlcclxuICAgICAgICAgKiBjbGFzcyBIZWxsb1dvcmxkIHtcclxuICAgICAgICAgKiAgIGdyZWV0ZXI6R3JlZXRlcjtcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqICAgY29uc3RydWN0b3IoZ3JlZXRlcjpHcmVldGVyKSB7XHJcbiAgICAgICAgICogICAgIHRoaXMuZ3JlZXRlciA9IGdyZWV0ZXI7XHJcbiAgICAgICAgICogICB9XHJcbiAgICAgICAgICogfVxyXG4gICAgICAgICAqIGBgYFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGFuZ18xLmlzUHJlc2VudCh0aGlzLl9iaW5kaW5ncykgJiYgdGhpcy5fYmluZGluZ3MubGVuZ3RoID4gMCA/IHRoaXMuX2JpbmRpbmdzIDpcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Byb3ZpZGVycztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaXJlY3RpdmVNZXRhZGF0YS5wcm90b3R5cGUsIFwiYmluZGluZ3NcIiwge1xyXG4gICAgICAgIC8qKiBAZGVwcmVjYXRlZCAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5wcm92aWRlcnM7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRGlyZWN0aXZlTWV0YWRhdGEgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBsYW5nXzEuQ09OU1QoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbT2JqZWN0XSlcclxuICAgIF0sIERpcmVjdGl2ZU1ldGFkYXRhKTtcclxuICAgIHJldHVybiBEaXJlY3RpdmVNZXRhZGF0YTtcclxufSkobWV0YWRhdGFfMS5JbmplY3RhYmxlTWV0YWRhdGEpO1xyXG5leHBvcnRzLkRpcmVjdGl2ZU1ldGFkYXRhID0gRGlyZWN0aXZlTWV0YWRhdGE7XHJcbi8qKlxyXG4gKiBEZWNsYXJlIHJldXNhYmxlIFVJIGJ1aWxkaW5nIGJsb2NrcyBmb3IgYW4gYXBwbGljYXRpb24uXHJcbiAqXHJcbiAqIEVhY2ggQW5ndWxhciBjb21wb25lbnQgcmVxdWlyZXMgYSBzaW5nbGUgYEBDb21wb25lbnRgIGFuZCBhdCBsZWFzdCBvbmUgYEBWaWV3YCBhbm5vdGF0aW9uLiBUaGVcclxuICogYEBDb21wb25lbnRgXHJcbiAqIGFubm90YXRpb24gc3BlY2lmaWVzIHdoZW4gYSBjb21wb25lbnQgaXMgaW5zdGFudGlhdGVkLCBhbmQgd2hpY2ggcHJvcGVydGllcyBhbmQgaG9zdExpc3RlbmVycyBpdFxyXG4gKiBiaW5kcyB0by5cclxuICpcclxuICogV2hlbiBhIGNvbXBvbmVudCBpcyBpbnN0YW50aWF0ZWQsIEFuZ3VsYXJcclxuICogLSBjcmVhdGVzIGEgc2hhZG93IERPTSBmb3IgdGhlIGNvbXBvbmVudC5cclxuICogLSBsb2FkcyB0aGUgc2VsZWN0ZWQgdGVtcGxhdGUgaW50byB0aGUgc2hhZG93IERPTS5cclxuICogLSBjcmVhdGVzIGFsbCB0aGUgaW5qZWN0YWJsZSBvYmplY3RzIGNvbmZpZ3VyZWQgd2l0aCBgcHJvdmlkZXJzYCBhbmQgYHZpZXdQcm92aWRlcnNgLlxyXG4gKlxyXG4gKiBBbGwgdGVtcGxhdGUgZXhwcmVzc2lvbnMgYW5kIHN0YXRlbWVudHMgYXJlIHRoZW4gZXZhbHVhdGVkIGFnYWluc3QgdGhlIGNvbXBvbmVudCBpbnN0YW5jZS5cclxuICpcclxuICogRm9yIGRldGFpbHMgb24gdGhlIGBAVmlld2AgYW5ub3RhdGlvbiwgc2VlIHtAbGluayBWaWV3TWV0YWRhdGF9LlxyXG4gKlxyXG4gKiAjIyBMaWZlY3ljbGUgaG9va3NcclxuICpcclxuICogV2hlbiB0aGUgY29tcG9uZW50IGNsYXNzIGltcGxlbWVudHMgc29tZSB7QGxpbmsgYW5ndWxhcjIvbGlmZWN5Y2xlX2hvb2tzfSB0aGUgY2FsbGJhY2tzIGFyZVxyXG4gKiBjYWxsZWQgYnkgdGhlIGNoYW5nZSBkZXRlY3Rpb24gYXQgZGVmaW5lZCBwb2ludHMgaW4gdGltZSBkdXJpbmcgdGhlIGxpZmUgb2YgdGhlIGNvbXBvbmVudC5cclxuICpcclxuICogIyMgRXhhbXBsZVxyXG4gKlxyXG4gKiBgYGBcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgc2VsZWN0b3I6ICdncmVldCcsXHJcbiAqICAgdGVtcGxhdGU6ICdIZWxsbyB7e25hbWV9fSEnXHJcbiAqIH0pXHJcbiAqIGNsYXNzIEdyZWV0IHtcclxuICogICBuYW1lOiBzdHJpbmc7XHJcbiAqXHJcbiAqICAgY29uc3RydWN0b3IoKSB7XHJcbiAqICAgICB0aGlzLm5hbWUgPSAnV29ybGQnO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICovXHJcbnZhciBDb21wb25lbnRNZXRhZGF0YSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQ29tcG9uZW50TWV0YWRhdGEsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBDb21wb25lbnRNZXRhZGF0YShfYSkge1xyXG4gICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBzZWxlY3RvciA9IF9iLnNlbGVjdG9yLCBpbnB1dHMgPSBfYi5pbnB1dHMsIG91dHB1dHMgPSBfYi5vdXRwdXRzLCBwcm9wZXJ0aWVzID0gX2IucHJvcGVydGllcywgZXZlbnRzID0gX2IuZXZlbnRzLCBob3N0ID0gX2IuaG9zdCwgZXhwb3J0QXMgPSBfYi5leHBvcnRBcywgbW9kdWxlSWQgPSBfYi5tb2R1bGVJZCwgYmluZGluZ3MgPSBfYi5iaW5kaW5ncywgcHJvdmlkZXJzID0gX2IucHJvdmlkZXJzLCB2aWV3QmluZGluZ3MgPSBfYi52aWV3QmluZGluZ3MsIHZpZXdQcm92aWRlcnMgPSBfYi52aWV3UHJvdmlkZXJzLCBfYyA9IF9iLmNoYW5nZURldGVjdGlvbiwgY2hhbmdlRGV0ZWN0aW9uID0gX2MgPT09IHZvaWQgMCA/IGNoYW5nZV9kZXRlY3Rpb25fMS5DaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5EZWZhdWx0IDogX2MsIHF1ZXJpZXMgPSBfYi5xdWVyaWVzLCB0ZW1wbGF0ZVVybCA9IF9iLnRlbXBsYXRlVXJsLCB0ZW1wbGF0ZSA9IF9iLnRlbXBsYXRlLCBzdHlsZVVybHMgPSBfYi5zdHlsZVVybHMsIHN0eWxlcyA9IF9iLnN0eWxlcywgZGlyZWN0aXZlcyA9IF9iLmRpcmVjdGl2ZXMsIHBpcGVzID0gX2IucGlwZXMsIGVuY2Fwc3VsYXRpb24gPSBfYi5lbmNhcHN1bGF0aW9uO1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHtcclxuICAgICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxyXG4gICAgICAgICAgICBpbnB1dHM6IGlucHV0cyxcclxuICAgICAgICAgICAgb3V0cHV0czogb3V0cHV0cyxcclxuICAgICAgICAgICAgcHJvcGVydGllczogcHJvcGVydGllcyxcclxuICAgICAgICAgICAgZXZlbnRzOiBldmVudHMsXHJcbiAgICAgICAgICAgIGhvc3Q6IGhvc3QsXHJcbiAgICAgICAgICAgIGV4cG9ydEFzOiBleHBvcnRBcyxcclxuICAgICAgICAgICAgbW9kdWxlSWQ6IG1vZHVsZUlkLFxyXG4gICAgICAgICAgICBiaW5kaW5nczogYmluZGluZ3MsXHJcbiAgICAgICAgICAgIHByb3ZpZGVyczogcHJvdmlkZXJzLFxyXG4gICAgICAgICAgICBxdWVyaWVzOiBxdWVyaWVzXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3Rpb24gPSBjaGFuZ2VEZXRlY3Rpb247XHJcbiAgICAgICAgdGhpcy5fdmlld1Byb3ZpZGVycyA9IHZpZXdQcm92aWRlcnM7XHJcbiAgICAgICAgdGhpcy5fdmlld0JpbmRpbmdzID0gdmlld0JpbmRpbmdzO1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGVVcmwgPSB0ZW1wbGF0ZVVybDtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XHJcbiAgICAgICAgdGhpcy5zdHlsZVVybHMgPSBzdHlsZVVybHM7XHJcbiAgICAgICAgdGhpcy5zdHlsZXMgPSBzdHlsZXM7XHJcbiAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gZGlyZWN0aXZlcztcclxuICAgICAgICB0aGlzLnBpcGVzID0gcGlwZXM7XHJcbiAgICAgICAgdGhpcy5lbmNhcHN1bGF0aW9uID0gZW5jYXBzdWxhdGlvbjtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb21wb25lbnRNZXRhZGF0YS5wcm90b3R5cGUsIFwidmlld1Byb3ZpZGVyc1wiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGVmaW5lcyB0aGUgc2V0IG9mIGluamVjdGFibGUgb2JqZWN0cyB0aGF0IGFyZSB2aXNpYmxlIHRvIGl0cyB2aWV3IERPTSBjaGlsZHJlbi5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqICMjIFNpbXBsZSBFeGFtcGxlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgYSBjbGFzcyB0aGF0IGNhbiBiZSBpbmplY3RlZDpcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIGBgYFxyXG4gICAgICAgICAqIGNsYXNzIEdyZWV0ZXIge1xyXG4gICAgICAgICAqICAgIGdyZWV0KG5hbWU6c3RyaW5nKSB7XHJcbiAgICAgICAgICogICAgICByZXR1cm4gJ0hlbGxvICcgKyBuYW1lICsgJyEnO1xyXG4gICAgICAgICAqICAgIH1cclxuICAgICAgICAgKiB9XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBARGlyZWN0aXZlKHtcclxuICAgICAgICAgKiAgIHNlbGVjdG9yOiAnbmVlZHMtZ3JlZXRlcidcclxuICAgICAgICAgKiB9KVxyXG4gICAgICAgICAqIGNsYXNzIE5lZWRzR3JlZXRlciB7XHJcbiAgICAgICAgICogICBncmVldGVyOkdyZWV0ZXI7XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiAgIGNvbnN0cnVjdG9yKGdyZWV0ZXI6R3JlZXRlcikge1xyXG4gICAgICAgICAqICAgICB0aGlzLmdyZWV0ZXIgPSBncmVldGVyO1xyXG4gICAgICAgICAqICAgfVxyXG4gICAgICAgICAqIH1cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBDb21wb25lbnQoe1xyXG4gICAgICAgICAqICAgc2VsZWN0b3I6ICdncmVldCcsXHJcbiAgICAgICAgICogICB2aWV3UHJvdmlkZXJzOiBbXHJcbiAgICAgICAgICogICAgIEdyZWV0ZXJcclxuICAgICAgICAgKiAgIF0sXHJcbiAgICAgICAgICogICB0ZW1wbGF0ZTogYDxuZWVkcy1ncmVldGVyPjwvbmVlZHMtZ3JlZXRlcj5gLFxyXG4gICAgICAgICAqICAgZGlyZWN0aXZlczogW05lZWRzR3JlZXRlcl1cclxuICAgICAgICAgKiB9KVxyXG4gICAgICAgICAqIGNsYXNzIEhlbGxvV29ybGQge1xyXG4gICAgICAgICAqIH1cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIGBgYFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGFuZ18xLmlzUHJlc2VudCh0aGlzLl92aWV3QmluZGluZ3MpICYmIHRoaXMuX3ZpZXdCaW5kaW5ncy5sZW5ndGggPiAwID8gdGhpcy5fdmlld0JpbmRpbmdzIDpcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdQcm92aWRlcnM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29tcG9uZW50TWV0YWRhdGEucHJvdG90eXBlLCBcInZpZXdCaW5kaW5nc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnZpZXdQcm92aWRlcnM7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgQ29tcG9uZW50TWV0YWRhdGEgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBsYW5nXzEuQ09OU1QoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbT2JqZWN0XSlcclxuICAgIF0sIENvbXBvbmVudE1ldGFkYXRhKTtcclxuICAgIHJldHVybiBDb21wb25lbnRNZXRhZGF0YTtcclxufSkoRGlyZWN0aXZlTWV0YWRhdGEpO1xyXG5leHBvcnRzLkNvbXBvbmVudE1ldGFkYXRhID0gQ29tcG9uZW50TWV0YWRhdGE7XHJcbi8qKlxyXG4gKiBEZWNsYXJlIHJldXNhYmxlIHBpcGUgZnVuY3Rpb24uXHJcbiAqXHJcbiAqICMjIEV4YW1wbGVcclxuICpcclxuICogYGBgXHJcbiAqIEBQaXBlKHtcclxuICogICBuYW1lOiAnbG93ZXJjYXNlJ1xyXG4gKiB9KVxyXG4gKiBjbGFzcyBMb3dlcmNhc2Uge1xyXG4gKiAgIHRyYW5zZm9ybSh2LCBhcmdzKSB7IHJldHVybiB2LnRvTG93ZXJDYXNlKCk7IH1cclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbnZhciBQaXBlTWV0YWRhdGEgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFBpcGVNZXRhZGF0YSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFBpcGVNZXRhZGF0YShfYSkge1xyXG4gICAgICAgIHZhciBuYW1lID0gX2EubmFtZSwgcHVyZSA9IF9hLnB1cmU7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLl9wdXJlID0gcHVyZTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQaXBlTWV0YWRhdGEucHJvdG90eXBlLCBcInB1cmVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGFuZ18xLmlzUHJlc2VudCh0aGlzLl9wdXJlKSA/IHRoaXMuX3B1cmUgOiB0cnVlOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIFBpcGVNZXRhZGF0YSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGxhbmdfMS5DT05TVCgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtPYmplY3RdKVxyXG4gICAgXSwgUGlwZU1ldGFkYXRhKTtcclxuICAgIHJldHVybiBQaXBlTWV0YWRhdGE7XHJcbn0pKG1ldGFkYXRhXzEuSW5qZWN0YWJsZU1ldGFkYXRhKTtcclxuZXhwb3J0cy5QaXBlTWV0YWRhdGEgPSBQaXBlTWV0YWRhdGE7XHJcbi8qKlxyXG4gKiBEZWNsYXJlcyBhIGRhdGEtYm91bmQgaW5wdXQgcHJvcGVydHkuXHJcbiAqXHJcbiAqIEFuZ3VsYXIgYXV0b21hdGljYWxseSB1cGRhdGVzIGRhdGEtYm91bmQgcHJvcGVydGllcyBkdXJpbmcgY2hhbmdlIGRldGVjdGlvbi5cclxuICpcclxuICogYElucHV0TWV0YWRhdGFgIHRha2VzIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB0aGF0IHNwZWNpZmllcyB0aGUgbmFtZVxyXG4gKiB1c2VkIHdoZW4gaW5zdGFudGlhdGluZyBhIGNvbXBvbmVudCBpbiB0aGUgdGVtcGxhdGUuIFdoZW4gbm90IHByb3ZpZGVkLFxyXG4gKiB0aGUgbmFtZSBvZiB0aGUgZGVjb3JhdGVkIHByb3BlcnR5IGlzIHVzZWQuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlXHJcbiAqXHJcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBjcmVhdGVzIGEgY29tcG9uZW50IHdpdGggdHdvIGlucHV0IHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgc2VsZWN0b3I6ICdiYW5rLWFjY291bnQnLFxyXG4gKiAgIHRlbXBsYXRlOiBgXHJcbiAqICAgICBCYW5rIE5hbWU6IHt7YmFua05hbWV9fVxyXG4gKiAgICAgQWNjb3VudCBJZDoge3tpZH19XHJcbiAqICAgYFxyXG4gKiB9KVxyXG4gKiBjbGFzcyBCYW5rQWNjb3VudCB7XHJcbiAqICAgQElucHV0KCkgYmFua05hbWU6IHN0cmluZztcclxuICogICBASW5wdXQoJ2FjY291bnQtaWQnKSBpZDogc3RyaW5nO1xyXG4gKlxyXG4gKiAgIC8vIHRoaXMgcHJvcGVydHkgaXMgbm90IGJvdW5kLCBhbmQgd29uJ3QgYmUgYXV0b21hdGljYWxseSB1cGRhdGVkIGJ5IEFuZ3VsYXJcclxuICogICBub3JtYWxpemVkQmFua05hbWU6IHN0cmluZztcclxuICogfVxyXG4gKlxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ2FwcCcsXHJcbiAqICAgdGVtcGxhdGU6IGBcclxuICogICAgIDxiYW5rLWFjY291bnQgYmFuay1uYW1lPVwiUkJDXCIgYWNjb3VudC1pZD1cIjQ3NDdcIj48L2JhbmstYWNjb3VudD5cclxuICogICBgLFxyXG4gKiAgIGRpcmVjdGl2ZXM6IFtCYW5rQWNjb3VudF1cclxuICogfSlcclxuICogY2xhc3MgQXBwIHt9XHJcbiAqXHJcbiAqIGJvb3RzdHJhcChBcHApO1xyXG4gKiBgYGBcclxuICovXHJcbnZhciBJbnB1dE1ldGFkYXRhID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIElucHV0TWV0YWRhdGEoXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTmFtZSB1c2VkIHdoZW4gaW5zdGFudGlhdGluZyBhIGNvbXBvbmVudCBpbiB0aGUgdGVtbGF0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBiaW5kaW5nUHJvcGVydHlOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5nUHJvcGVydHlOYW1lID0gYmluZGluZ1Byb3BlcnR5TmFtZTtcclxuICAgIH1cclxuICAgIElucHV0TWV0YWRhdGEgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBsYW5nXzEuQ09OU1QoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbU3RyaW5nXSlcclxuICAgIF0sIElucHV0TWV0YWRhdGEpO1xyXG4gICAgcmV0dXJuIElucHV0TWV0YWRhdGE7XHJcbn0pKCk7XHJcbmV4cG9ydHMuSW5wdXRNZXRhZGF0YSA9IElucHV0TWV0YWRhdGE7XHJcbi8qKlxyXG4gKiBEZWNsYXJlcyBhbiBldmVudC1ib3VuZCBvdXRwdXQgcHJvcGVydHkuXHJcbiAqXHJcbiAqIFdoZW4gYW4gb3V0cHV0IHByb3BlcnR5IGVtaXRzIGFuIGV2ZW50LCBhbiBldmVudCBoYW5kbGVyIGF0dGFjaGVkIHRvIHRoYXQgZXZlbnRcclxuICogdGhlIHRlbXBsYXRlIGlzIGludm9rZWQuXHJcbiAqXHJcbiAqIGBPdXRwdXRNZXRhZGF0YWAgdGFrZXMgYW4gb3B0aW9uYWwgcGFyYW1ldGVyIHRoYXQgc3BlY2lmaWVzIHRoZSBuYW1lXHJcbiAqIHVzZWQgd2hlbiBpbnN0YW50aWF0aW5nIGEgY29tcG9uZW50IGluIHRoZSB0ZW1wbGF0ZS4gV2hlbiBub3QgcHJvdmlkZWQsXHJcbiAqIHRoZSBuYW1lIG9mIHRoZSBkZWNvcmF0ZWQgcHJvcGVydHkgaXMgdXNlZC5cclxuICpcclxuICogIyMjIEV4YW1wbGVcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBARGlyZWN0aXZlKHtcclxuICogICBzZWxlY3RvcjogJ2ludGVydmFsLWRpcicsXHJcbiAqIH0pXHJcbiAqIGNsYXNzIEludGVydmFsRGlyIHtcclxuICogICBAT3V0cHV0KCkgZXZlcnlTZWNvbmQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAqICAgQE91dHB1dCgnZXZlcnlGaXZlU2Vjb25kcycpIGZpdmU1U2VjcyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICpcclxuICogICBjb25zdHJ1Y3RvcigpIHtcclxuICogICAgIHNldEludGVydmFsKCgpID0+IHRoaXMuZXZlcnlTZWNvbmQubmV4dChcImV2ZW50XCIpLCAxMDAwKTtcclxuICogICAgIHNldEludGVydmFsKCgpID0+IHRoaXMuZml2ZTVTZWNzLm5leHQoXCJldmVudFwiKSwgNTAwMCk7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqXHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgIHNlbGVjdG9yOiAnYXBwJyxcclxuICogICB0ZW1wbGF0ZTogYFxyXG4gKiAgICAgPGludGVydmFsLWRpciAoZXZlcnktc2Vjb25kKT1cImV2ZXJ5U2Vjb25kKClcIiAoZXZlcnktZml2ZS1zZWNvbmRzKT1cImV2ZXJ5Rml2ZVNlY29uZHMoKVwiPlxyXG4gKiAgICAgPC9pbnRlcnZhbC1kaXI+XHJcbiAqICAgYCxcclxuICogICBkaXJlY3RpdmVzOiBbSW50ZXJ2YWxEaXJdXHJcbiAqIH0pXHJcbiAqIGNsYXNzIEFwcCB7XHJcbiAqICAgZXZlcnlTZWNvbmQoKSB7IGNvbnNvbGUubG9nKCdzZWNvbmQnKTsgfVxyXG4gKiAgIGV2ZXJ5Rml2ZVNlY29uZHMoKSB7IGNvbnNvbGUubG9nKCdmaXZlIHNlY29uZHMnKTsgfVxyXG4gKiB9XHJcbiAqIGJvb3RzdHJhcChBcHApO1xyXG4gKiBgYGBcclxuICovXHJcbnZhciBPdXRwdXRNZXRhZGF0YSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBPdXRwdXRNZXRhZGF0YShiaW5kaW5nUHJvcGVydHlOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5nUHJvcGVydHlOYW1lID0gYmluZGluZ1Byb3BlcnR5TmFtZTtcclxuICAgIH1cclxuICAgIE91dHB1dE1ldGFkYXRhID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW1N0cmluZ10pXHJcbiAgICBdLCBPdXRwdXRNZXRhZGF0YSk7XHJcbiAgICByZXR1cm4gT3V0cHV0TWV0YWRhdGE7XHJcbn0pKCk7XHJcbmV4cG9ydHMuT3V0cHV0TWV0YWRhdGEgPSBPdXRwdXRNZXRhZGF0YTtcclxuLyoqXHJcbiAqIERlY2xhcmVzIGEgaG9zdCBwcm9wZXJ0eSBiaW5kaW5nLlxyXG4gKlxyXG4gKiBBbmd1bGFyIGF1dG9tYXRpY2FsbHkgY2hlY2tzIGhvc3QgcHJvcGVydHkgYmluZGluZ3MgZHVyaW5nIGNoYW5nZSBkZXRlY3Rpb24uXHJcbiAqIElmIGEgYmluZGluZyBjaGFuZ2VzLCBpdCB3aWxsIHVwZGF0ZSB0aGUgaG9zdCBlbGVtZW50IG9mIHRoZSBkaXJlY3RpdmUuXHJcbiAqXHJcbiAqIGBIb3N0QmluZGluZ01ldGFkYXRhYCB0YWtlcyBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgdGhhdCBzcGVjaWZpZXMgdGhlIHByb3BlcnR5XHJcbiAqIG5hbWUgb2YgdGhlIGhvc3QgZWxlbWVudCB0aGF0IHdpbGwgYmUgdXBkYXRlZC4gV2hlbiBub3QgcHJvdmlkZWQsXHJcbiAqIHRoZSBjbGFzcyBwcm9wZXJ0eSBuYW1lIGlzIHVzZWQuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlXHJcbiAqXHJcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBjcmVhdGVzIGEgZGlyZWN0aXZlIHRoYXQgc2V0cyB0aGUgYHZhbGlkYCBhbmQgYGludmFsaWRgIGNsYXNzZXNcclxuICogb24gdGhlIERPTSBlbGVtZW50IHRoYXQgaGFzIG5nLW1vZGVsIGRpcmVjdGl2ZSBvbiBpdC5cclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBARGlyZWN0aXZlKHtzZWxlY3RvcjogJ1tuZy1tb2RlbF0nfSlcclxuICogY2xhc3MgTmdNb2RlbFN0YXR1cyB7XHJcbiAqICAgY29uc3RydWN0b3IocHVibGljIGNvbnRyb2w6TmdNb2RlbCkge31cclxuICogICBASG9zdEJpbmRpbmcoJ1tjbGFzcy52YWxpZF0nKSBnZXQgdmFsaWQgeyByZXR1cm4gdGhpcy5jb250cm9sLnZhbGlkOyB9XHJcbiAqICAgQEhvc3RCaW5kaW5nKCdbY2xhc3MuaW52YWxpZF0nKSBnZXQgaW52YWxpZCB7IHJldHVybiB0aGlzLmNvbnRyb2wuaW52YWxpZDsgfVxyXG4gKiB9XHJcbiAqXHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgIHNlbGVjdG9yOiAnYXBwJyxcclxuICogICB0ZW1wbGF0ZTogYDxpbnB1dCBbKG5nLW1vZGVsKV09XCJwcm9wXCI+YCxcclxuICogICBkaXJlY3RpdmVzOiBbRk9STV9ESVJFQ1RJVkVTLCBOZ01vZGVsU3RhdHVzXVxyXG4gKiB9KVxyXG4gKiBjbGFzcyBBcHAge1xyXG4gKiAgIHByb3A7XHJcbiAqIH1cclxuICpcclxuICogYm9vdHN0cmFwKEFwcCk7XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIEhvc3RCaW5kaW5nTWV0YWRhdGEgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSG9zdEJpbmRpbmdNZXRhZGF0YShob3N0UHJvcGVydHlOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5ob3N0UHJvcGVydHlOYW1lID0gaG9zdFByb3BlcnR5TmFtZTtcclxuICAgIH1cclxuICAgIEhvc3RCaW5kaW5nTWV0YWRhdGEgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBsYW5nXzEuQ09OU1QoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbU3RyaW5nXSlcclxuICAgIF0sIEhvc3RCaW5kaW5nTWV0YWRhdGEpO1xyXG4gICAgcmV0dXJuIEhvc3RCaW5kaW5nTWV0YWRhdGE7XHJcbn0pKCk7XHJcbmV4cG9ydHMuSG9zdEJpbmRpbmdNZXRhZGF0YSA9IEhvc3RCaW5kaW5nTWV0YWRhdGE7XHJcbi8qKlxyXG4gKiBEZWNsYXJlcyBhIGhvc3QgbGlzdGVuZXIuXHJcbiAqXHJcbiAqIEFuZ3VsYXIgd2lsbCBpbnZva2UgdGhlIGRlY29yYXRlZCBtZXRob2Qgd2hlbiB0aGUgaG9zdCBlbGVtZW50IGVtaXRzIHRoZSBzcGVjaWZpZWQgZXZlbnQuXHJcbiAqXHJcbiAqIElmIHRoZSBkZWNvcmF0ZWQgbWV0aG9kIHJldHVybnMgYGZhbHNlYCwgdGhlbiBgcHJldmVudERlZmF1bHRgIGlzIGFwcGxpZWQgb24gdGhlIERPTVxyXG4gKiBldmVudC5cclxuICpcclxuICogIyMjIEV4YW1wbGVcclxuICpcclxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIGRlY2xhcmVzIGEgZGlyZWN0aXZlIHRoYXQgYXR0YWNoZXMgYSBjbGljayBsaXN0ZW5lciB0byB0aGUgYnV0dG9uIGFuZFxyXG4gKiBjb3VudHMgY2xpY2tzLlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIEBEaXJlY3RpdmUoe3NlbGVjdG9yOiAnYnV0dG9uW2NvdW50aW5nXSd9KVxyXG4gKiBjbGFzcyBDb3VudENsaWNrcyB7XHJcbiAqICAgbnVtYmVyT2ZDbGlja3MgPSAwO1xyXG4gKlxyXG4gKiAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQudGFyZ2V0J10pXHJcbiAqICAgb25DbGljayhidG4pIHtcclxuICogICAgIGNvbnNvbGUubG9nKFwiYnV0dG9uXCIsIGJ0biwgXCJudW1iZXIgb2YgY2xpY2tzOlwiLCB0aGlzLm51bWJlck9mQ2xpY2tzKyspO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKlxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ2FwcCcsXHJcbiAqICAgdGVtcGxhdGU6IGA8YnV0dG9uIGNvdW50aW5nPkluY3JlbWVudDwvYnV0dG9uPmAsXHJcbiAqICAgZGlyZWN0aXZlczogW0NvdW50Q2xpY2tzXVxyXG4gKiB9KVxyXG4gKiBjbGFzcyBBcHAge31cclxuICpcclxuICogYm9vdHN0cmFwKEFwcCk7XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIEhvc3RMaXN0ZW5lck1ldGFkYXRhID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEhvc3RMaXN0ZW5lck1ldGFkYXRhKGV2ZW50TmFtZSwgYXJncykge1xyXG4gICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lO1xyXG4gICAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XHJcbiAgICB9XHJcbiAgICBIb3N0TGlzdGVuZXJNZXRhZGF0YSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGxhbmdfMS5DT05TVCgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtTdHJpbmcsIEFycmF5XSlcclxuICAgIF0sIEhvc3RMaXN0ZW5lck1ldGFkYXRhKTtcclxuICAgIHJldHVybiBIb3N0TGlzdGVuZXJNZXRhZGF0YTtcclxufSkoKTtcclxuZXhwb3J0cy5Ib3N0TGlzdGVuZXJNZXRhZGF0YSA9IEhvc3RMaXN0ZW5lck1ldGFkYXRhO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXJlY3RpdmVzLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxuLyoqXHJcbiAqIERlZmluZXMgdGVtcGxhdGUgYW5kIHN0eWxlIGVuY2Fwc3VsYXRpb24gb3B0aW9ucyBhdmFpbGFibGUgZm9yIENvbXBvbmVudCdzIHtAbGluayBWaWV3fS5cclxuICpcclxuICogU2VlIHtAbGluayBWaWV3TWV0YWRhdGEjZW5jYXBzdWxhdGlvbn0uXHJcbiAqL1xyXG4oZnVuY3Rpb24gKFZpZXdFbmNhcHN1bGF0aW9uKSB7XHJcbiAgICAvKipcclxuICAgICAqIEVtdWxhdGUgYE5hdGl2ZWAgc2NvcGluZyBvZiBzdHlsZXMgYnkgYWRkaW5nIGFuIGF0dHJpYnV0ZSBjb250YWluaW5nIHN1cnJvZ2F0ZSBpZCB0byB0aGUgSG9zdFxyXG4gICAgICogRWxlbWVudCBhbmQgcHJlLXByb2Nlc3NpbmcgdGhlIHN0eWxlIHJ1bGVzIHByb3ZpZGVkIHZpYVxyXG4gICAgICoge0BsaW5rIFZpZXdNZXRhZGF0YSNzdHlsZXN9IG9yIHtAbGluayBWaWV3TWV0YWRhdGEjc3R5bGVzVXJsc30sIGFuZCBhZGRpbmcgdGhlIG5ldyBIb3N0IEVsZW1lbnRcclxuICAgICAqIGF0dHJpYnV0ZSB0byBhbGwgc2VsZWN0b3JzLlxyXG4gICAgICpcclxuICAgICAqIFRoaXMgaXMgdGhlIGRlZmF1bHQgb3B0aW9uLlxyXG4gICAgICovXHJcbiAgICBWaWV3RW5jYXBzdWxhdGlvbltWaWV3RW5jYXBzdWxhdGlvbltcIkVtdWxhdGVkXCJdID0gMF0gPSBcIkVtdWxhdGVkXCI7XHJcbiAgICAvKipcclxuICAgICAqIFVzZSB0aGUgbmF0aXZlIGVuY2Fwc3VsYXRpb24gbWVjaGFuaXNtIG9mIHRoZSByZW5kZXJlci5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgdGhlIERPTSB0aGlzIG1lYW5zIHVzaW5nIFtTaGFkb3cgRE9NXShodHRwczovL3czYy5naXRodWIuaW8vd2ViY29tcG9uZW50cy9zcGVjL3NoYWRvdy8pIGFuZFxyXG4gICAgICogY3JlYXRpbmcgYSBTaGFkb3dSb290IGZvciBDb21wb25lbnQncyBIb3N0IEVsZW1lbnQuXHJcbiAgICAgKi9cclxuICAgIFZpZXdFbmNhcHN1bGF0aW9uW1ZpZXdFbmNhcHN1bGF0aW9uW1wiTmF0aXZlXCJdID0gMV0gPSBcIk5hdGl2ZVwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEb24ndCBwcm92aWRlIGFueSB0ZW1wbGF0ZSBvciBzdHlsZSBlbmNhcHN1bGF0aW9uLlxyXG4gICAgICovXHJcbiAgICBWaWV3RW5jYXBzdWxhdGlvbltWaWV3RW5jYXBzdWxhdGlvbltcIk5vbmVcIl0gPSAyXSA9IFwiTm9uZVwiO1xyXG59KShleHBvcnRzLlZpZXdFbmNhcHN1bGF0aW9uIHx8IChleHBvcnRzLlZpZXdFbmNhcHN1bGF0aW9uID0ge30pKTtcclxudmFyIFZpZXdFbmNhcHN1bGF0aW9uID0gZXhwb3J0cy5WaWV3RW5jYXBzdWxhdGlvbjtcclxuZXhwb3J0cy5WSUVXX0VOQ0FQU1VMQVRJT05fVkFMVUVTID0gW1ZpZXdFbmNhcHN1bGF0aW9uLkVtdWxhdGVkLCBWaWV3RW5jYXBzdWxhdGlvbi5OYXRpdmUsIFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVdO1xyXG4vKipcclxuICogTWV0YWRhdGEgcHJvcGVydGllcyBhdmFpbGFibGUgZm9yIGNvbmZpZ3VyaW5nIFZpZXdzLlxyXG4gKlxyXG4gKiBFYWNoIEFuZ3VsYXIgY29tcG9uZW50IHJlcXVpcmVzIGEgc2luZ2xlIGBAQ29tcG9uZW50YCBhbmQgYXQgbGVhc3Qgb25lIGBAVmlld2AgYW5ub3RhdGlvbi4gVGhlXHJcbiAqIGBAVmlld2AgYW5ub3RhdGlvbiBzcGVjaWZpZXMgdGhlIEhUTUwgdGVtcGxhdGUgdG8gdXNlLCBhbmQgbGlzdHMgdGhlIGRpcmVjdGl2ZXMgdGhhdCBhcmUgYWN0aXZlXHJcbiAqIHdpdGhpbiB0aGUgdGVtcGxhdGUuXHJcbiAqXHJcbiAqIFdoZW4gYSBjb21wb25lbnQgaXMgaW5zdGFudGlhdGVkLCB0aGUgdGVtcGxhdGUgaXMgbG9hZGVkIGludG8gdGhlIGNvbXBvbmVudCdzIHNoYWRvdyByb290LCBhbmRcclxuICogdGhlIGV4cHJlc3Npb25zIGFuZCBzdGF0ZW1lbnRzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgZXZhbHVhdGVkIGFnYWluc3QgdGhlIGNvbXBvbmVudC5cclxuICpcclxuICogRm9yIGRldGFpbHMgb24gdGhlIGBAQ29tcG9uZW50YCBhbm5vdGF0aW9uLCBzZWUge0BsaW5rIENvbXBvbmVudE1ldGFkYXRhfS5cclxuICpcclxuICogIyMgRXhhbXBsZVxyXG4gKlxyXG4gKiBgYGBcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgc2VsZWN0b3I6ICdncmVldCcsXHJcbiAqICAgdGVtcGxhdGU6ICdIZWxsbyB7e25hbWV9fSEnLFxyXG4gKiAgIGRpcmVjdGl2ZXM6IFtHcmVldFVzZXIsIEJvbGRdXHJcbiAqIH0pXHJcbiAqIGNsYXNzIEdyZWV0IHtcclxuICogICBuYW1lOiBzdHJpbmc7XHJcbiAqXHJcbiAqICAgY29uc3RydWN0b3IoKSB7XHJcbiAqICAgICB0aGlzLm5hbWUgPSAnV29ybGQnO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbnZhciBWaWV3TWV0YWRhdGEgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVmlld01ldGFkYXRhKF9hKSB7XHJcbiAgICAgICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIHRlbXBsYXRlVXJsID0gX2IudGVtcGxhdGVVcmwsIHRlbXBsYXRlID0gX2IudGVtcGxhdGUsIGRpcmVjdGl2ZXMgPSBfYi5kaXJlY3RpdmVzLCBwaXBlcyA9IF9iLnBpcGVzLCBlbmNhcHN1bGF0aW9uID0gX2IuZW5jYXBzdWxhdGlvbiwgc3R5bGVzID0gX2Iuc3R5bGVzLCBzdHlsZVVybHMgPSBfYi5zdHlsZVVybHM7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVVybCA9IHRlbXBsYXRlVXJsO1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcclxuICAgICAgICB0aGlzLnN0eWxlVXJscyA9IHN0eWxlVXJscztcclxuICAgICAgICB0aGlzLnN0eWxlcyA9IHN0eWxlcztcclxuICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzO1xyXG4gICAgICAgIHRoaXMucGlwZXMgPSBwaXBlcztcclxuICAgICAgICB0aGlzLmVuY2Fwc3VsYXRpb24gPSBlbmNhcHN1bGF0aW9uO1xyXG4gICAgfVxyXG4gICAgVmlld01ldGFkYXRhID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW09iamVjdF0pXHJcbiAgICBdLCBWaWV3TWV0YWRhdGEpO1xyXG4gICAgcmV0dXJuIFZpZXdNZXRhZGF0YTtcclxufSkoKTtcclxuZXhwb3J0cy5WaWV3TWV0YWRhdGEgPSBWaWV3TWV0YWRhdGE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZpZXcuanMubWFwIiwiJ3VzZSBzdHJpY3QnOy8qKlxyXG4gKiBAbW9kdWxlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGlzIG1vZHVsZSBwcm92aWRlcyBhIHNldCBvZiBjb21tb24gUGlwZXMuXHJcbiAqL1xyXG52YXIgYXN5bmNfcGlwZV8xID0gcmVxdWlyZSgnLi9waXBlcy9hc3luY19waXBlJyk7XHJcbmV4cG9ydHMuQXN5bmNQaXBlID0gYXN5bmNfcGlwZV8xLkFzeW5jUGlwZTtcclxudmFyIGRhdGVfcGlwZV8xID0gcmVxdWlyZSgnLi9waXBlcy9kYXRlX3BpcGUnKTtcclxuZXhwb3J0cy5EYXRlUGlwZSA9IGRhdGVfcGlwZV8xLkRhdGVQaXBlO1xyXG52YXIgZGVmYXVsdF9waXBlc18xID0gcmVxdWlyZSgnLi9waXBlcy9kZWZhdWx0X3BpcGVzJyk7XHJcbmV4cG9ydHMuREVGQVVMVF9QSVBFUyA9IGRlZmF1bHRfcGlwZXNfMS5ERUZBVUxUX1BJUEVTO1xyXG5leHBvcnRzLkRFRkFVTFRfUElQRVNfVE9LRU4gPSBkZWZhdWx0X3BpcGVzXzEuREVGQVVMVF9QSVBFU19UT0tFTjtcclxudmFyIGpzb25fcGlwZV8xID0gcmVxdWlyZSgnLi9waXBlcy9qc29uX3BpcGUnKTtcclxuZXhwb3J0cy5Kc29uUGlwZSA9IGpzb25fcGlwZV8xLkpzb25QaXBlO1xyXG52YXIgc2xpY2VfcGlwZV8xID0gcmVxdWlyZSgnLi9waXBlcy9zbGljZV9waXBlJyk7XHJcbmV4cG9ydHMuU2xpY2VQaXBlID0gc2xpY2VfcGlwZV8xLlNsaWNlUGlwZTtcclxudmFyIGxvd2VyY2FzZV9waXBlXzEgPSByZXF1aXJlKCcuL3BpcGVzL2xvd2VyY2FzZV9waXBlJyk7XHJcbmV4cG9ydHMuTG93ZXJDYXNlUGlwZSA9IGxvd2VyY2FzZV9waXBlXzEuTG93ZXJDYXNlUGlwZTtcclxudmFyIG51bWJlcl9waXBlXzEgPSByZXF1aXJlKCcuL3BpcGVzL251bWJlcl9waXBlJyk7XHJcbmV4cG9ydHMuTnVtYmVyUGlwZSA9IG51bWJlcl9waXBlXzEuTnVtYmVyUGlwZTtcclxuZXhwb3J0cy5EZWNpbWFsUGlwZSA9IG51bWJlcl9waXBlXzEuRGVjaW1hbFBpcGU7XHJcbmV4cG9ydHMuUGVyY2VudFBpcGUgPSBudW1iZXJfcGlwZV8xLlBlcmNlbnRQaXBlO1xyXG5leHBvcnRzLkN1cnJlbmN5UGlwZSA9IG51bWJlcl9waXBlXzEuQ3VycmVuY3lQaXBlO1xyXG52YXIgdXBwZXJjYXNlX3BpcGVfMSA9IHJlcXVpcmUoJy4vcGlwZXMvdXBwZXJjYXNlX3BpcGUnKTtcclxuZXhwb3J0cy5VcHBlckNhc2VQaXBlID0gdXBwZXJjYXNlX3BpcGVfMS5VcHBlckNhc2VQaXBlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlcy5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBhc3luY18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2FzeW5jJyk7XHJcbnZhciBtZXRhZGF0YV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbWV0YWRhdGEnKTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgY2hhbmdlX2RldGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvY2hhbmdlX2RldGVjdGlvbicpO1xyXG52YXIgaW52YWxpZF9waXBlX2FyZ3VtZW50X2V4Y2VwdGlvbl8xID0gcmVxdWlyZSgnLi9pbnZhbGlkX3BpcGVfYXJndW1lbnRfZXhjZXB0aW9uJyk7XHJcbnZhciBPYnNlcnZhYmxlU3RyYXRlZ3kgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZVN0cmF0ZWd5KCkge1xyXG4gICAgfVxyXG4gICAgT2JzZXJ2YWJsZVN0cmF0ZWd5LnByb3RvdHlwZS5jcmVhdGVTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoYXN5bmMsIHVwZGF0ZUxhdGVzdFZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIGFzeW5jXzEuT2JzZXJ2YWJsZVdyYXBwZXIuc3Vic2NyaWJlKGFzeW5jLCB1cGRhdGVMYXRlc3RWYWx1ZSwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZVN0cmF0ZWd5LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikgeyBhc3luY18xLk9ic2VydmFibGVXcmFwcGVyLmRpc3Bvc2Uoc3Vic2NyaXB0aW9uKTsgfTtcclxuICAgIE9ic2VydmFibGVTdHJhdGVneS5wcm90b3R5cGUub25EZXN0cm95ID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikgeyBhc3luY18xLk9ic2VydmFibGVXcmFwcGVyLmRpc3Bvc2Uoc3Vic2NyaXB0aW9uKTsgfTtcclxuICAgIHJldHVybiBPYnNlcnZhYmxlU3RyYXRlZ3k7XHJcbn0pKCk7XHJcbnZhciBQcm9taXNlU3RyYXRlZ3kgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUHJvbWlzZVN0cmF0ZWd5KCkge1xyXG4gICAgfVxyXG4gICAgUHJvbWlzZVN0cmF0ZWd5LnByb3RvdHlwZS5jcmVhdGVTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoYXN5bmMsIHVwZGF0ZUxhdGVzdFZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIGFzeW5jLnRoZW4odXBkYXRlTGF0ZXN0VmFsdWUpO1xyXG4gICAgfTtcclxuICAgIFByb21pc2VTdHJhdGVneS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHsgfTtcclxuICAgIFByb21pc2VTdHJhdGVneS5wcm90b3R5cGUub25EZXN0cm95ID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikgeyB9O1xyXG4gICAgcmV0dXJuIFByb21pc2VTdHJhdGVneTtcclxufSkoKTtcclxudmFyIF9wcm9taXNlU3RyYXRlZ3kgPSBuZXcgUHJvbWlzZVN0cmF0ZWd5KCk7XHJcbnZhciBfb2JzZXJ2YWJsZVN0cmF0ZWd5ID0gbmV3IE9ic2VydmFibGVTdHJhdGVneSgpO1xyXG4vKipcclxuICogVGhlIGBhc3luY2AgcGlwZSBzdWJzY3JpYmVzIHRvIGFuIE9ic2VydmFibGUgb3IgUHJvbWlzZSBhbmQgcmV0dXJucyB0aGUgbGF0ZXN0IHZhbHVlIGl0IGhhc1xyXG4gKiBlbWl0dGVkLlxyXG4gKiBXaGVuIGEgbmV3IHZhbHVlIGlzIGVtaXR0ZWQsIHRoZSBgYXN5bmNgIHBpcGUgbWFya3MgdGhlIGNvbXBvbmVudCB0byBiZSBjaGVja2VkIGZvciBjaGFuZ2VzLlxyXG4gKlxyXG4gKiAjIEV4YW1wbGVcclxuICogVGhlIGV4YW1wbGUgYmVsb3cgYmluZHMgdGhlIGB0aW1lYCBPYnNlcnZhYmxlIHRvIHRoZSB2aWV3LiBFdmVyeSA1MDBtcywgdGhlIGB0aW1lYCBPYnNlcnZhYmxlXHJcbiAqIHVwZGF0ZXMgdGhlIHZpZXcgd2l0aCB0aGUgY3VycmVudCB0aW1lLlxyXG4gKlxyXG4gKiBgYGBcclxuICogaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdhbmd1bGFyMi9jb3JlJztcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgc2VsZWN0b3I6IFwidGFzay1jbXBcIixcclxuICogICB0ZW1wbGF0ZTogXCJUaW1lOiB7eyB0aW1lIHwgYXN5bmMgfX1cIlxyXG4gKiB9KVxyXG4gKiBjbGFzcyBUYXNrIHtcclxuICogICB0aW1lID0gbmV3IE9ic2VydmFibGU8bnVtYmVyPihvYnNlcnZlciA9PiB7XHJcbiAqICAgICBzZXRJbnRlcnZhbChfID0+XHJcbiAqICAgICAgIG9ic2VydmVyLm5leHQobmV3IERhdGUoKS5nZXRUaW1lKCkpLCA1MDApO1xyXG4gKiAgIH0pO1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIEFzeW5jUGlwZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBc3luY1BpcGUoX3JlZikge1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9sYXRlc3RWYWx1ZSA9IG51bGw7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX2xhdGVzdFJldHVybmVkVmFsdWUgPSBudWxsO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9vYmogPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3N0cmF0ZWd5ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9yZWYgPSBfcmVmO1xyXG4gICAgfVxyXG4gICAgQXN5bmNQaXBlLnByb3RvdHlwZS5vbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5fc3Vic2NyaXB0aW9uKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFzeW5jUGlwZS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gKG9iaiwgYXJncykge1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayh0aGlzLl9vYmopKSB7XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KG9iaikpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZShvYmopO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JqICE9PSB0aGlzLl9vYmopIHtcclxuICAgICAgICAgICAgdGhpcy5fZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ob2JqKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2xhdGVzdFZhbHVlID09PSB0aGlzLl9sYXRlc3RSZXR1cm5lZFZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sYXRlc3RSZXR1cm5lZFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fbGF0ZXN0UmV0dXJuZWRWYWx1ZSA9IHRoaXMuX2xhdGVzdFZhbHVlO1xyXG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlX2RldGVjdGlvbl8xLldyYXBwZWRWYWx1ZS53cmFwKHRoaXMuX2xhdGVzdFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQXN5bmNQaXBlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5fb2JqID0gb2JqO1xyXG4gICAgICAgIHRoaXMuX3N0cmF0ZWd5ID0gdGhpcy5fc2VsZWN0U3RyYXRlZ3kob2JqKTtcclxuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb24gPVxyXG4gICAgICAgICAgICB0aGlzLl9zdHJhdGVneS5jcmVhdGVTdWJzY3JpcHRpb24ob2JqLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIF90aGlzLl91cGRhdGVMYXRlc3RWYWx1ZShvYmosIHZhbHVlKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQXN5bmNQaXBlLnByb3RvdHlwZS5fc2VsZWN0U3RyYXRlZ3kgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1Byb21pc2Uob2JqKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3Byb21pc2VTdHJhdGVneTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYXN5bmNfMS5PYnNlcnZhYmxlV3JhcHBlci5pc09ic2VydmFibGUob2JqKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gX29ic2VydmFibGVTdHJhdGVneTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBpbnZhbGlkX3BpcGVfYXJndW1lbnRfZXhjZXB0aW9uXzEuSW52YWxpZFBpcGVBcmd1bWVudEV4Y2VwdGlvbihBc3luY1BpcGUsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIEFzeW5jUGlwZS5wcm90b3R5cGUuX2Rpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fc3RyYXRlZ3kuZGlzcG9zZSh0aGlzLl9zdWJzY3JpcHRpb24pO1xyXG4gICAgICAgIHRoaXMuX2xhdGVzdFZhbHVlID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9sYXRlc3RSZXR1cm5lZFZhbHVlID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX29iaiA9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgQXN5bmNQaXBlLnByb3RvdHlwZS5fdXBkYXRlTGF0ZXN0VmFsdWUgPSBmdW5jdGlvbiAoYXN5bmMsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKGFzeW5jID09PSB0aGlzLl9vYmopIHtcclxuICAgICAgICAgICAgdGhpcy5fbGF0ZXN0VmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5fcmVmLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBc3luY1BpcGUgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBtZXRhZGF0YV8xLlBpcGUoeyBuYW1lOiAnYXN5bmMnLCBwdXJlOiBmYWxzZSB9KSxcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbY2hhbmdlX2RldGVjdGlvbl8xLkNoYW5nZURldGVjdG9yUmVmXSlcclxuICAgIF0sIEFzeW5jUGlwZSk7XHJcbiAgICByZXR1cm4gQXN5bmNQaXBlO1xyXG59KSgpO1xyXG5leHBvcnRzLkFzeW5jUGlwZSA9IEFzeW5jUGlwZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmNfcGlwZS5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBpbnRsXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvaW50bCcpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBtZXRhZGF0YV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvbWV0YWRhdGEnKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBpbnZhbGlkX3BpcGVfYXJndW1lbnRfZXhjZXB0aW9uXzEgPSByZXF1aXJlKCcuL2ludmFsaWRfcGlwZV9hcmd1bWVudF9leGNlcHRpb24nKTtcclxuLy8gVE9ETzogbW92ZSB0byBhIGdsb2JhbCBjb25maWd1cmFibGUgbG9jYXRpb24gYWxvbmcgd2l0aCBvdGhlciBpMThuIGNvbXBvbmVudHMuXHJcbnZhciBkZWZhdWx0TG9jYWxlID0gJ2VuLVVTJztcclxuLyoqXHJcbiAqIFdBUk5JTkc6IHRoaXMgcGlwZSB1c2VzIHRoZSBJbnRlcm5hdGlvbmFsaXphdGlvbiBBUEkuXHJcbiAqIFRoZXJlZm9yZSBpdCBpcyBvbmx5IHJlbGlhYmxlIGluIENocm9tZSBhbmQgT3BlcmEgYnJvd3NlcnMuXHJcbiAqXHJcbiAqIEZvcm1hdHMgYSBkYXRlIHZhbHVlIHRvIGEgc3RyaW5nIGJhc2VkIG9uIHRoZSByZXF1ZXN0ZWQgZm9ybWF0LlxyXG4gKlxyXG4gKiAjIFVzYWdlXHJcbiAqXHJcbiAqICAgICBleHByZXNzaW9uIHwgZGF0ZVs6Zm9ybWF0XVxyXG4gKlxyXG4gKiB3aGVyZSBgZXhwcmVzc2lvbmAgaXMgYSBkYXRlIG9iamVjdCBvciBhIG51bWJlciAobWlsbGlzZWNvbmRzIHNpbmNlIFVUQyBlcG9jaCkgYW5kXHJcbiAqIGBmb3JtYXRgIGluZGljYXRlcyB3aGljaCBkYXRlL3RpbWUgY29tcG9uZW50cyB0byBpbmNsdWRlOlxyXG4gKlxyXG4gKiAgfCBDb21wb25lbnQgfCBTeW1ib2wgfCBTaG9ydCBGb3JtICAgfCBMb25nIEZvcm0gICAgICAgICB8IE51bWVyaWMgICB8IDItZGlnaXQgICB8XHJcbiAqICB8LS0tLS0tLS0tLS18Oi0tLS0tLTp8LS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tLXxcclxuICogIHwgZXJhICAgICAgIHwgICBHICAgIHwgRyAoQUQpICAgICAgIHwgR0dHRyAoQW5ubyBEb21pbmkpfCAtICAgICAgICAgfCAtICAgICAgICAgfFxyXG4gKiAgfCB5ZWFyICAgICAgfCAgIHkgICAgfCAtICAgICAgICAgICAgfCAtICAgICAgICAgICAgICAgICB8IHkgKDIwMTUpICB8IHl5ICgxNSkgICB8XHJcbiAqICB8IG1vbnRoICAgICB8ICAgTSAgICB8IE1NTSAoU2VwKSAgICB8IE1NTU0gKFNlcHRlbWJlcikgIHwgTSAoOSkgICAgIHwgTU0gKDA5KSAgIHxcclxuICogIHwgZGF5ICAgICAgIHwgICBkICAgIHwgLSAgICAgICAgICAgIHwgLSAgICAgICAgICAgICAgICAgfCBkICgzKSAgICAgfCBkZCAoMDMpICAgfFxyXG4gKiAgfCB3ZWVrZGF5ICAgfCAgIEUgICAgfCBFRUUgKFN1bikgICAgfCBFRUVFIChTdW5kYXkpICAgICB8IC0gICAgICAgICB8IC0gICAgICAgICB8XHJcbiAqICB8IGhvdXIgICAgICB8ICAgaiAgICB8IC0gICAgICAgICAgICB8IC0gICAgICAgICAgICAgICAgIHwgaiAoMTMpICAgIHwgamogKDEzKSAgIHxcclxuICogIHwgaG91cjEyICAgIHwgICBoICAgIHwgLSAgICAgICAgICAgIHwgLSAgICAgICAgICAgICAgICAgfCBoICgxIFBNKSAgfCBoaCAoMDEgUE0pfFxyXG4gKiAgfCBob3VyMjQgICAgfCAgIEggICAgfCAtICAgICAgICAgICAgfCAtICAgICAgICAgICAgICAgICB8IEggKDEzKSAgICB8IEhIICgxMykgICB8XHJcbiAqICB8IG1pbnV0ZSAgICB8ICAgbSAgICB8IC0gICAgICAgICAgICB8IC0gICAgICAgICAgICAgICAgIHwgbSAoNSkgICAgIHwgbW0gKDA1KSAgIHxcclxuICogIHwgc2Vjb25kICAgIHwgICBzICAgIHwgLSAgICAgICAgICAgIHwgLSAgICAgICAgICAgICAgICAgfCBzICg5KSAgICAgfCBzcyAoMDkpICAgfFxyXG4gKiAgfCB0aW1lem9uZSAgfCAgIHogICAgfCAtICAgICAgICAgICAgfCB6IChQYWNpZmljIFN0YW5kYXJkIFRpbWUpfCAtICB8IC0gICAgICAgICB8XHJcbiAqICB8IHRpbWV6b25lICB8ICAgWiAgICB8IFogKEdNVC04OjAwKSB8IC0gICAgICAgICAgICAgICAgIHwgLSAgICAgICAgIHwgLSAgICAgICAgIHxcclxuICpcclxuICogSW4gamF2YXNjcmlwdCwgb25seSB0aGUgY29tcG9uZW50cyBzcGVjaWZpZWQgd2lsbCBiZSByZXNwZWN0ZWQgKG5vdCB0aGUgb3JkZXJpbmcsXHJcbiAqIHB1bmN0dWF0aW9ucywgLi4uKSBhbmQgZGV0YWlscyBvZiB0aGUgZm9ybWF0dGluZyB3aWxsIGJlIGRlcGVuZGVudCBvbiB0aGUgbG9jYWxlLlxyXG4gKiBPbiB0aGUgb3RoZXIgaGFuZCBpbiBEYXJ0IHZlcnNpb24sIHlvdSBjYW4gYWxzbyBpbmNsdWRlIHF1b3RlZCB0ZXh0IGFzIHdlbGwgYXMgc29tZSBleHRyYVxyXG4gKiBkYXRlL3RpbWUgY29tcG9uZW50cyBzdWNoIGFzIHF1YXJ0ZXIuIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZTpcclxuICogaHR0cHM6Ly9hcGkuZGFydGxhbmcub3JnL2FwaWRvY3MvY2hhbm5lbHMvc3RhYmxlL2RhcnRkb2Mtdmlld2VyL2ludGwvaW50bC5EYXRlRm9ybWF0LlxyXG4gKlxyXG4gKiBgZm9ybWF0YCBjYW4gYWxzbyBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBwcmVkZWZpbmVkIGZvcm1hdHM6XHJcbiAqXHJcbiAqICAtIGAnbWVkaXVtJ2A6IGVxdWl2YWxlbnQgdG8gYCd5TU1NZGptcydgIChlLmcuIFNlcCAzLCAyMDEwLCAxMjowNTowOCBQTSBmb3IgZW4tVVMpXHJcbiAqICAtIGAnc2hvcnQnYDogZXF1aXZhbGVudCB0byBgJ3lNZGptJ2AgKGUuZy4gOS8zLzIwMTAsIDEyOjA1IFBNIGZvciBlbi1VUylcclxuICogIC0gYCdmdWxsRGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAneU1NTU1FRUVFZCdgIChlLmcuIEZyaWRheSwgU2VwdGVtYmVyIDMsIDIwMTAgZm9yIGVuLVVTKVxyXG4gKiAgLSBgJ2xvbmdEYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCd5TU1NTWQnYCAoZS5nLiBTZXB0ZW1iZXIgMywgMjAxMClcclxuICogIC0gYCdtZWRpdW1EYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCd5TU1NZCdgIChlLmcuIFNlcCAzLCAyMDEwIGZvciBlbi1VUylcclxuICogIC0gYCdzaG9ydERhdGUnYDogZXF1aXZhbGVudCB0byBgJ3lNZCdgIChlLmcuIDkvMy8yMDEwIGZvciBlbi1VUylcclxuICogIC0gYCdtZWRpdW1UaW1lJ2A6IGVxdWl2YWxlbnQgdG8gYCdqbXMnYCAoZS5nLiAxMjowNTowOCBQTSBmb3IgZW4tVVMpXHJcbiAqICAtIGAnc2hvcnRUaW1lJ2A6IGVxdWl2YWxlbnQgdG8gYCdqbSdgIChlLmcuIDEyOjA1IFBNIGZvciBlbi1VUylcclxuICpcclxuICogVGltZXpvbmUgb2YgdGhlIGZvcm1hdHRlZCB0ZXh0IHdpbGwgYmUgdGhlIGxvY2FsIHN5c3RlbSB0aW1lem9uZSBvZiB0aGUgZW5kLXVzZXJzIG1hY2hpbmUuXHJcbiAqXHJcbiAqICMgRXhhbXBsZXNcclxuICpcclxuICogQXNzdW1pbmcgYGRhdGVPYmpgIGlzICh5ZWFyOiAyMDE1LCBtb250aDogNiwgZGF5OiAxNSwgaG91cjogMjEsIG1pbnV0ZTogNDMsIHNlY29uZDogMTEpXHJcbiAqIGluIHRoZSBfbG9jYWxfIHRpbWUgYW5kIGxvY2FsZSBpcyAnZW4tVVMnOlxyXG4gKlxyXG4gKiAgICAge3sgZGF0ZU9iaiB8IGRhdGUgfX0gICAgICAgICAgICAgICAvLyBvdXRwdXQgaXMgJ0p1biAxNSwgMjAxNSdcclxuICogICAgIHt7IGRhdGVPYmogfCBkYXRlOidtZWRpdW0nIH19ICAgICAgLy8gb3V0cHV0IGlzICdKdW4gMTUsIDIwMTUsIDk6NDM6MTEgUE0nXHJcbiAqICAgICB7eyBkYXRlT2JqIHwgZGF0ZTonc2hvcnRUaW1lJyB9fSAgIC8vIG91dHB1dCBpcyAnOTo0MyBQTSdcclxuICogICAgIHt7IGRhdGVPYmogfCBkYXRlOidtbXNzJyB9fSAgICAgICAgLy8gb3V0cHV0IGlzICc0MzoxMSdcclxuICovXHJcbnZhciBEYXRlUGlwZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEYXRlUGlwZSgpIHtcclxuICAgIH1cclxuICAgIERhdGVQaXBlLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiAodmFsdWUsIGFyZ3MpIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsodmFsdWUpKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICBpZiAoIXRoaXMuc3VwcG9ydHModmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBpbnZhbGlkX3BpcGVfYXJndW1lbnRfZXhjZXB0aW9uXzEuSW52YWxpZFBpcGVBcmd1bWVudEV4Y2VwdGlvbihEYXRlUGlwZSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcGF0dGVybiA9IGxhbmdfMS5pc1ByZXNlbnQoYXJncykgJiYgYXJncy5sZW5ndGggPiAwID8gYXJnc1swXSA6ICdtZWRpdW1EYXRlJztcclxuICAgICAgICBpZiAobGFuZ18xLmlzTnVtYmVyKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IGxhbmdfMS5EYXRlV3JhcHBlci5mcm9tTWlsbGlzKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLmNvbnRhaW5zKERhdGVQaXBlLl9BTElBU0VTLCBwYXR0ZXJuKSkge1xyXG4gICAgICAgICAgICBwYXR0ZXJuID0gY29sbGVjdGlvbl8xLlN0cmluZ01hcFdyYXBwZXIuZ2V0KERhdGVQaXBlLl9BTElBU0VTLCBwYXR0ZXJuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGludGxfMS5EYXRlRm9ybWF0dGVyLmZvcm1hdCh2YWx1ZSwgZGVmYXVsdExvY2FsZSwgcGF0dGVybik7XHJcbiAgICB9O1xyXG4gICAgRGF0ZVBpcGUucHJvdG90eXBlLnN1cHBvcnRzID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gbGFuZ18xLmlzRGF0ZShvYmopIHx8IGxhbmdfMS5pc051bWJlcihvYmopOyB9O1xyXG4gICAgRGF0ZVBpcGUuX0FMSUFTRVMgPSB7XHJcbiAgICAgICAgJ21lZGl1bSc6ICd5TU1NZGptcycsXHJcbiAgICAgICAgJ3Nob3J0JzogJ3lNZGptJyxcclxuICAgICAgICAnZnVsbERhdGUnOiAneU1NTU1FRUVFZCcsXHJcbiAgICAgICAgJ2xvbmdEYXRlJzogJ3lNTU1NZCcsXHJcbiAgICAgICAgJ21lZGl1bURhdGUnOiAneU1NTWQnLFxyXG4gICAgICAgICdzaG9ydERhdGUnOiAneU1kJyxcclxuICAgICAgICAnbWVkaXVtVGltZSc6ICdqbXMnLFxyXG4gICAgICAgICdzaG9ydFRpbWUnOiAnam0nXHJcbiAgICB9O1xyXG4gICAgRGF0ZVBpcGUgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBsYW5nXzEuQ09OU1QoKSxcclxuICAgICAgICBtZXRhZGF0YV8xLlBpcGUoeyBuYW1lOiAnZGF0ZScgfSksXHJcbiAgICAgICAgZGlfMS5JbmplY3RhYmxlKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXHJcbiAgICBdLCBEYXRlUGlwZSk7XHJcbiAgICByZXR1cm4gRGF0ZVBpcGU7XHJcbn0pKCk7XHJcbmV4cG9ydHMuRGF0ZVBpcGUgPSBEYXRlUGlwZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0ZV9waXBlLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgYXN5bmNfcGlwZV8xID0gcmVxdWlyZSgnLi9hc3luY19waXBlJyk7XHJcbnZhciB1cHBlcmNhc2VfcGlwZV8xID0gcmVxdWlyZSgnLi91cHBlcmNhc2VfcGlwZScpO1xyXG52YXIgbG93ZXJjYXNlX3BpcGVfMSA9IHJlcXVpcmUoJy4vbG93ZXJjYXNlX3BpcGUnKTtcclxudmFyIGpzb25fcGlwZV8xID0gcmVxdWlyZSgnLi9qc29uX3BpcGUnKTtcclxudmFyIHNsaWNlX3BpcGVfMSA9IHJlcXVpcmUoJy4vc2xpY2VfcGlwZScpO1xyXG52YXIgZGF0ZV9waXBlXzEgPSByZXF1aXJlKCcuL2RhdGVfcGlwZScpO1xyXG52YXIgbnVtYmVyX3BpcGVfMSA9IHJlcXVpcmUoJy4vbnVtYmVyX3BpcGUnKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIERFRkFVTFRfUElQRVNfTElTVCA9IGxhbmdfMS5DT05TVF9FWFBSKFtcclxuICAgIGFzeW5jX3BpcGVfMS5Bc3luY1BpcGUsXHJcbiAgICB1cHBlcmNhc2VfcGlwZV8xLlVwcGVyQ2FzZVBpcGUsXHJcbiAgICBsb3dlcmNhc2VfcGlwZV8xLkxvd2VyQ2FzZVBpcGUsXHJcbiAgICBqc29uX3BpcGVfMS5Kc29uUGlwZSxcclxuICAgIHNsaWNlX3BpcGVfMS5TbGljZVBpcGUsXHJcbiAgICBudW1iZXJfcGlwZV8xLkRlY2ltYWxQaXBlLFxyXG4gICAgbnVtYmVyX3BpcGVfMS5QZXJjZW50UGlwZSxcclxuICAgIG51bWJlcl9waXBlXzEuQ3VycmVuY3lQaXBlLFxyXG4gICAgZGF0ZV9waXBlXzEuRGF0ZVBpcGVcclxuXSk7XHJcbmV4cG9ydHMuREVGQVVMVF9QSVBFU19UT0tFTiA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBkaV8xLk9wYXF1ZVRva2VuKFwiRGVmYXVsdCBQaXBlc1wiKSk7XHJcbmV4cG9ydHMuREVGQVVMVF9QSVBFUyA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBkaV8xLlByb3ZpZGVyKGV4cG9ydHMuREVGQVVMVF9QSVBFU19UT0tFTiwgeyB1c2VWYWx1ZTogREVGQVVMVF9QSVBFU19MSVNUIH0pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdF9waXBlcy5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBJbnZhbGlkUGlwZUFyZ3VtZW50RXhjZXB0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhJbnZhbGlkUGlwZUFyZ3VtZW50RXhjZXB0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gSW52YWxpZFBpcGVBcmd1bWVudEV4Y2VwdGlvbih0eXBlLCB2YWx1ZSkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIFwiSW52YWxpZCBhcmd1bWVudCAnXCIgKyB2YWx1ZSArIFwiJyBmb3IgcGlwZSAnXCIgKyB0eXBlICsgXCInXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEludmFsaWRQaXBlQXJndW1lbnRFeGNlcHRpb247XHJcbn0pKGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKTtcclxuZXhwb3J0cy5JbnZhbGlkUGlwZUFyZ3VtZW50RXhjZXB0aW9uID0gSW52YWxpZFBpcGVBcmd1bWVudEV4Y2VwdGlvbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW52YWxpZF9waXBlX2FyZ3VtZW50X2V4Y2VwdGlvbi5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIG1ldGFkYXRhXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YScpO1xyXG4vKipcclxuICogSW1wbGVtZW50cyBqc29uIHRyYW5zZm9ybXMgdG8gYW55IG9iamVjdC5cclxuICpcclxuICogIyBFeGFtcGxlXHJcbiAqXHJcbiAqIEluIHRoaXMgZXhhbXBsZSB3ZSB0cmFuc2Zvcm0gdGhlIHVzZXIgb2JqZWN0IHRvIGpzb24uXHJcbiAqXHJcbiAqICBgYGBcclxuICogQENvbXBvbmVudCh7XHJcbiAqICAgc2VsZWN0b3I6IFwidXNlci1jbXBcIixcclxuICogICB0ZW1wbGF0ZTogXCJVc2VyOiB7eyB1c2VyIHwganNvbiB9fVwiXHJcbiAqIH0pXHJcbiAqIGNsYXNzIFVzZXJuYW1lIHtcclxuICogIHVzZXI6T2JqZWN0XHJcbiAqICBjb25zdHJ1Y3RvcigpIHtcclxuICogICAgdGhpcy51c2VyID0geyBuYW1lOiBcIlBhdHJpY2tKU1wiIH07XHJcbiAqICB9XHJcbiAqIH1cclxuICpcclxuICogYGBgXHJcbiAqL1xyXG52YXIgSnNvblBpcGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSnNvblBpcGUoKSB7XHJcbiAgICB9XHJcbiAgICBKc29uUGlwZS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gKHZhbHVlLCBhcmdzKSB7XHJcbiAgICAgICAgaWYgKGFyZ3MgPT09IHZvaWQgMCkgeyBhcmdzID0gbnVsbDsgfVxyXG4gICAgICAgIHJldHVybiBsYW5nXzEuSnNvbi5zdHJpbmdpZnkodmFsdWUpO1xyXG4gICAgfTtcclxuICAgIEpzb25QaXBlID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksXHJcbiAgICAgICAgbWV0YWRhdGFfMS5QaXBlKHsgbmFtZTogJ2pzb24nIH0pLFxyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgSnNvblBpcGUpO1xyXG4gICAgcmV0dXJuIEpzb25QaXBlO1xyXG59KSgpO1xyXG5leHBvcnRzLkpzb25QaXBlID0gSnNvblBpcGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpzb25fcGlwZS5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIG1ldGFkYXRhXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YScpO1xyXG52YXIgaW52YWxpZF9waXBlX2FyZ3VtZW50X2V4Y2VwdGlvbl8xID0gcmVxdWlyZSgnLi9pbnZhbGlkX3BpcGVfYXJndW1lbnRfZXhjZXB0aW9uJyk7XHJcbi8qKlxyXG4gKiBJbXBsZW1lbnRzIGxvd2VyY2FzZSB0cmFuc2Zvcm1zIHRvIHRleHQuXHJcbiAqXHJcbiAqICMgRXhhbXBsZVxyXG4gKlxyXG4gKiBJbiB0aGlzIGV4YW1wbGUgd2UgdHJhbnNmb3JtIHRoZSB1c2VyIHRleHQgbG93ZXJjYXNlLlxyXG4gKlxyXG4gKiAgYGBgXHJcbiAqIEBDb21wb25lbnQoe1xyXG4gKiAgIHNlbGVjdG9yOiBcInVzZXJuYW1lLWNtcFwiLFxyXG4gKiAgIHRlbXBsYXRlOiBcIlVzZXJuYW1lOiB7eyB1c2VyIHwgbG93ZXJjYXNlIH19XCJcclxuICogfSlcclxuICogY2xhc3MgVXNlcm5hbWUge1xyXG4gKiAgIHVzZXI6c3RyaW5nO1xyXG4gKiB9XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxudmFyIExvd2VyQ2FzZVBpcGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTG93ZXJDYXNlUGlwZSgpIHtcclxuICAgIH1cclxuICAgIExvd2VyQ2FzZVBpcGUucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uICh2YWx1ZSwgYXJncykge1xyXG4gICAgICAgIGlmIChhcmdzID09PSB2b2lkIDApIHsgYXJncyA9IG51bGw7IH1cclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsodmFsdWUpKVxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgaWYgKCFsYW5nXzEuaXNTdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBpbnZhbGlkX3BpcGVfYXJndW1lbnRfZXhjZXB0aW9uXzEuSW52YWxpZFBpcGVBcmd1bWVudEV4Y2VwdGlvbihMb3dlckNhc2VQaXBlLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsYW5nXzEuU3RyaW5nV3JhcHBlci50b0xvd2VyQ2FzZSh2YWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgTG93ZXJDYXNlUGlwZSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGxhbmdfMS5DT05TVCgpLFxyXG4gICAgICAgIG1ldGFkYXRhXzEuUGlwZSh7IG5hbWU6ICdsb3dlcmNhc2UnIH0pLFxyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgTG93ZXJDYXNlUGlwZSk7XHJcbiAgICByZXR1cm4gTG93ZXJDYXNlUGlwZTtcclxufSkoKTtcclxuZXhwb3J0cy5Mb3dlckNhc2VQaXBlID0gTG93ZXJDYXNlUGlwZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG93ZXJjYXNlX3BpcGUuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgZXhjZXB0aW9uc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2V4Y2VwdGlvbnMnKTtcclxudmFyIGludGxfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9pbnRsJyk7XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIG1ldGFkYXRhXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9tZXRhZGF0YScpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIGludmFsaWRfcGlwZV9hcmd1bWVudF9leGNlcHRpb25fMSA9IHJlcXVpcmUoJy4vaW52YWxpZF9waXBlX2FyZ3VtZW50X2V4Y2VwdGlvbicpO1xyXG52YXIgZGVmYXVsdExvY2FsZSA9ICdlbi1VUyc7XHJcbnZhciBfcmUgPSBsYW5nXzEuUmVnRXhwV3JhcHBlci5jcmVhdGUoJ14oXFxcXGQrKT9cXFxcLigoXFxcXGQrKShcXFxcLShcXFxcZCspKT8pPyQnKTtcclxudmFyIE51bWJlclBpcGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTnVtYmVyUGlwZSgpIHtcclxuICAgIH1cclxuICAgIE51bWJlclBpcGUuX2Zvcm1hdCA9IGZ1bmN0aW9uICh2YWx1ZSwgc3R5bGUsIGRpZ2l0cywgY3VycmVuY3ksIGN1cnJlbmN5QXNTeW1ib2wpIHtcclxuICAgICAgICBpZiAoY3VycmVuY3kgPT09IHZvaWQgMCkgeyBjdXJyZW5jeSA9IG51bGw7IH1cclxuICAgICAgICBpZiAoY3VycmVuY3lBc1N5bWJvbCA9PT0gdm9pZCAwKSB7IGN1cnJlbmN5QXNTeW1ib2wgPSBmYWxzZTsgfVxyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayh2YWx1ZSkpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIGlmICghbGFuZ18xLmlzTnVtYmVyKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgaW52YWxpZF9waXBlX2FyZ3VtZW50X2V4Y2VwdGlvbl8xLkludmFsaWRQaXBlQXJndW1lbnRFeGNlcHRpb24oTnVtYmVyUGlwZSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbWluSW50ID0gMSwgbWluRnJhY3Rpb24gPSAwLCBtYXhGcmFjdGlvbiA9IDM7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoZGlnaXRzKSkge1xyXG4gICAgICAgICAgICB2YXIgcGFydHMgPSBsYW5nXzEuUmVnRXhwV3JhcHBlci5maXJzdE1hdGNoKF9yZSwgZGlnaXRzKTtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHBhcnRzKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKGRpZ2l0cyArIFwiIGlzIG5vdCBhIHZhbGlkIGRpZ2l0IGluZm8gZm9yIG51bWJlciBwaXBlc1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwYXJ0c1sxXSkpIHtcclxuICAgICAgICAgICAgICAgIG1pbkludCA9IGxhbmdfMS5OdW1iZXJXcmFwcGVyLnBhcnNlSW50QXV0b1JhZGl4KHBhcnRzWzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwYXJ0c1szXSkpIHtcclxuICAgICAgICAgICAgICAgIG1pbkZyYWN0aW9uID0gbGFuZ18xLk51bWJlcldyYXBwZXIucGFyc2VJbnRBdXRvUmFkaXgocGFydHNbM10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHBhcnRzWzVdKSkge1xyXG4gICAgICAgICAgICAgICAgbWF4RnJhY3Rpb24gPSBsYW5nXzEuTnVtYmVyV3JhcHBlci5wYXJzZUludEF1dG9SYWRpeChwYXJ0c1s1XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGludGxfMS5OdW1iZXJGb3JtYXR0ZXIuZm9ybWF0KHZhbHVlLCBkZWZhdWx0TG9jYWxlLCBzdHlsZSwge1xyXG4gICAgICAgICAgICBtaW5pbXVtSW50ZWdlckRpZ2l0czogbWluSW50LFxyXG4gICAgICAgICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IG1pbkZyYWN0aW9uLFxyXG4gICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IG1heEZyYWN0aW9uLFxyXG4gICAgICAgICAgICBjdXJyZW5jeTogY3VycmVuY3ksXHJcbiAgICAgICAgICAgIGN1cnJlbmN5QXNTeW1ib2w6IGN1cnJlbmN5QXNTeW1ib2xcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBOdW1iZXJQaXBlID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksXHJcbiAgICAgICAgZGlfMS5JbmplY3RhYmxlKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXHJcbiAgICBdLCBOdW1iZXJQaXBlKTtcclxuICAgIHJldHVybiBOdW1iZXJQaXBlO1xyXG59KSgpO1xyXG5leHBvcnRzLk51bWJlclBpcGUgPSBOdW1iZXJQaXBlO1xyXG4vKipcclxuICogV0FSTklORzogdGhpcyBwaXBlIHVzZXMgdGhlIEludGVybmF0aW9uYWxpemF0aW9uIEFQSS5cclxuICogVGhlcmVmb3JlIGl0IGlzIG9ubHkgcmVsaWFibGUgaW4gQ2hyb21lIGFuZCBPcGVyYSBicm93c2Vycy5cclxuICpcclxuICogRm9ybWF0cyBhIG51bWJlciBhcyBsb2NhbCB0ZXh0LiBpLmUuIGdyb3VwIHNpemluZyBhbmQgc2VwYXJhdG9yIGFuZCBvdGhlciBsb2NhbGUtc3BlY2lmaWNcclxuICogY29uZmlndXJhdGlvbnMgYXJlIGJhc2VkIG9uIHRoZSBhY3RpdmUgbG9jYWxlLlxyXG4gKlxyXG4gKiAjIFVzYWdlXHJcbiAqXHJcbiAqICAgICBleHByZXNzaW9uIHwgbnVtYmVyWzpkaWdpdEluZm9dXHJcbiAqXHJcbiAqIHdoZXJlIGBleHByZXNzaW9uYCBpcyBhIG51bWJlciBhbmQgYGRpZ2l0SW5mb2AgaGFzIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxyXG4gKlxyXG4gKiAgICAge21pbkludGVnZXJEaWdpdHN9LnttaW5GcmFjdGlvbkRpZ2l0c30te21heEZyYWN0aW9uRGlnaXRzfVxyXG4gKlxyXG4gKiAtIG1pbkludGVnZXJEaWdpdHMgaXMgdGhlIG1pbmltdW0gbnVtYmVyIG9mIGludGVnZXIgZGlnaXRzIHRvIHVzZS4gRGVmYXVsdHMgdG8gMS5cclxuICogLSBtaW5GcmFjdGlvbkRpZ2l0cyBpcyB0aGUgbWluaW11bSBudW1iZXIgb2YgZGlnaXRzIGFmdGVyIGZyYWN0aW9uLiBEZWZhdWx0cyB0byAwLlxyXG4gKiAtIG1heEZyYWN0aW9uRGlnaXRzIGlzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBkaWdpdHMgYWZ0ZXIgZnJhY3Rpb24uIERlZmF1bHRzIHRvIDMuXHJcbiAqXHJcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZSBhY2NlcHRhYmxlIHJhbmdlIGZvciBlYWNoIG9mIHRoZXNlIG51bWJlcnMgYW5kIG90aGVyXHJcbiAqIGRldGFpbHMgc2VlIHlvdXIgbmF0aXZlIGludGVybmF0aW9uYWxpemF0aW9uIGxpYnJhcnkuXHJcbiAqXHJcbiAqICMgRXhhbXBsZXNcclxuICpcclxuICogICAgIHt7IDEyMyB8IG51bWJlciB9fSAgICAgICAgICAgICAgLy8gb3V0cHV0IGlzIDEyM1xyXG4gKiAgICAge3sgMTIzLjEgfCBudW1iZXI6ICcuMi0zJyB9fSAgICAvLyBvdXRwdXQgaXMgMTIzLjEwXHJcbiAqICAgICB7eyAxIHwgbnVtYmVyOiAnMi4yJyB9fSAgICAgICAgIC8vIG91dHB1dCBpcyAwMS4wMFxyXG4gKi9cclxudmFyIERlY2ltYWxQaXBlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhEZWNpbWFsUGlwZSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIERlY2ltYWxQaXBlKCkge1xyXG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfVxyXG4gICAgRGVjaW1hbFBpcGUucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uICh2YWx1ZSwgYXJncykge1xyXG4gICAgICAgIHZhciBkaWdpdHMgPSBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuZmlyc3QoYXJncyk7XHJcbiAgICAgICAgcmV0dXJuIE51bWJlclBpcGUuX2Zvcm1hdCh2YWx1ZSwgaW50bF8xLk51bWJlckZvcm1hdFN0eWxlLkRlY2ltYWwsIGRpZ2l0cyk7XHJcbiAgICB9O1xyXG4gICAgRGVjaW1hbFBpcGUgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBsYW5nXzEuQ09OU1QoKSxcclxuICAgICAgICBtZXRhZGF0YV8xLlBpcGUoeyBuYW1lOiAnbnVtYmVyJyB9KSxcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcclxuICAgIF0sIERlY2ltYWxQaXBlKTtcclxuICAgIHJldHVybiBEZWNpbWFsUGlwZTtcclxufSkoTnVtYmVyUGlwZSk7XHJcbmV4cG9ydHMuRGVjaW1hbFBpcGUgPSBEZWNpbWFsUGlwZTtcclxuLyoqXHJcbiAqIFdBUk5JTkc6IHRoaXMgcGlwZSB1c2VzIHRoZSBJbnRlcm5hdGlvbmFsaXphdGlvbiBBUEkuXHJcbiAqIFRoZXJlZm9yZSBpdCBpcyBvbmx5IHJlbGlhYmxlIGluIENocm9tZSBhbmQgT3BlcmEgYnJvd3NlcnMuXHJcbiAqXHJcbiAqIEZvcm1hdHMgYSBudW1iZXIgYXMgbG9jYWwgcGVyY2VudC5cclxuICpcclxuICogIyBVc2FnZVxyXG4gKlxyXG4gKiAgICAgZXhwcmVzc2lvbiB8IHBlcmNlbnRbOmRpZ2l0SW5mb11cclxuICpcclxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgYGRpZ2l0SW5mb2Agc2VlIHtAbGluayBEZWNpbWFsUGlwZX1cclxuICovXHJcbnZhciBQZXJjZW50UGlwZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUGVyY2VudFBpcGUsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBQZXJjZW50UGlwZSgpIHtcclxuICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIH1cclxuICAgIFBlcmNlbnRQaXBlLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiAodmFsdWUsIGFyZ3MpIHtcclxuICAgICAgICB2YXIgZGlnaXRzID0gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmZpcnN0KGFyZ3MpO1xyXG4gICAgICAgIHJldHVybiBOdW1iZXJQaXBlLl9mb3JtYXQodmFsdWUsIGludGxfMS5OdW1iZXJGb3JtYXRTdHlsZS5QZXJjZW50LCBkaWdpdHMpO1xyXG4gICAgfTtcclxuICAgIFBlcmNlbnRQaXBlID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbGFuZ18xLkNPTlNUKCksXHJcbiAgICAgICAgbWV0YWRhdGFfMS5QaXBlKHsgbmFtZTogJ3BlcmNlbnQnIH0pLFxyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgUGVyY2VudFBpcGUpO1xyXG4gICAgcmV0dXJuIFBlcmNlbnRQaXBlO1xyXG59KShOdW1iZXJQaXBlKTtcclxuZXhwb3J0cy5QZXJjZW50UGlwZSA9IFBlcmNlbnRQaXBlO1xyXG4vKipcclxuICogV0FSTklORzogdGhpcyBwaXBlIHVzZXMgdGhlIEludGVybmF0aW9uYWxpemF0aW9uIEFQSS5cclxuICogVGhlcmVmb3JlIGl0IGlzIG9ubHkgcmVsaWFibGUgaW4gQ2hyb21lIGFuZCBPcGVyYSBicm93c2Vycy5cclxuICpcclxuICogRm9ybWF0cyBhIG51bWJlciBhcyBsb2NhbCBjdXJyZW5jeS5cclxuICpcclxuICogIyBVc2FnZVxyXG4gKlxyXG4gKiAgICAgZXhwcmVzc2lvbiB8IGN1cnJlbmN5WzpjdXJyZW5jeUNvZGVbOnN5bWJvbERpc3BsYXlbOmRpZ2l0SW5mb11dXVxyXG4gKlxyXG4gKiB3aGVyZSBgY3VycmVuY3lDb2RlYCBpcyB0aGUgSVNPIDQyMTcgY3VycmVuY3kgY29kZSwgc3VjaCBhcyBcIlVTRFwiIGZvciB0aGUgVVMgZG9sbGFyIGFuZFxyXG4gKiBcIkVVUlwiIGZvciB0aGUgZXVyby4gYHN5bWJvbERpc3BsYXlgIGlzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gdXNlIHRoZSBjdXJyZW5jeVxyXG4gKiBzeW1ib2wgKGUuZy4gJCkgb3IgdGhlIGN1cnJlbmN5IGNvZGUgKGUuZy4gVVNEKSBpbiB0aGUgb3V0cHV0LiBUaGUgZGVmYXVsdCBmb3IgdGhpcyB2YWx1ZVxyXG4gKiBpcyBgZmFsc2VgLlxyXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBgZGlnaXRJbmZvYCBzZWUge0BsaW5rIERlY2ltYWxQaXBlfVxyXG4gKi9cclxudmFyIEN1cnJlbmN5UGlwZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQ3VycmVuY3lQaXBlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ3VycmVuY3lQaXBlKCkge1xyXG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfVxyXG4gICAgQ3VycmVuY3lQaXBlLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiAodmFsdWUsIGFyZ3MpIHtcclxuICAgICAgICB2YXIgY3VycmVuY3lDb2RlID0gbGFuZ18xLmlzUHJlc2VudChhcmdzKSAmJiBhcmdzLmxlbmd0aCA+IDAgPyBhcmdzWzBdIDogJ1VTRCc7XHJcbiAgICAgICAgdmFyIHN5bWJvbERpc3BsYXkgPSBsYW5nXzEuaXNQcmVzZW50KGFyZ3MpICYmIGFyZ3MubGVuZ3RoID4gMSA/IGFyZ3NbMV0gOiBmYWxzZTtcclxuICAgICAgICB2YXIgZGlnaXRzID0gbGFuZ18xLmlzUHJlc2VudChhcmdzKSAmJiBhcmdzLmxlbmd0aCA+IDIgPyBhcmdzWzJdIDogbnVsbDtcclxuICAgICAgICByZXR1cm4gTnVtYmVyUGlwZS5fZm9ybWF0KHZhbHVlLCBpbnRsXzEuTnVtYmVyRm9ybWF0U3R5bGUuQ3VycmVuY3ksIGRpZ2l0cywgY3VycmVuY3lDb2RlLCBzeW1ib2xEaXNwbGF5KTtcclxuICAgIH07XHJcbiAgICBDdXJyZW5jeVBpcGUgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBsYW5nXzEuQ09OU1QoKSxcclxuICAgICAgICBtZXRhZGF0YV8xLlBpcGUoeyBuYW1lOiAnY3VycmVuY3knIH0pLFxyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgQ3VycmVuY3lQaXBlKTtcclxuICAgIHJldHVybiBDdXJyZW5jeVBpcGU7XHJcbn0pKE51bWJlclBpcGUpO1xyXG5leHBvcnRzLkN1cnJlbmN5UGlwZSA9IEN1cnJlbmN5UGlwZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bnVtYmVyX3BpcGUuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBwcm92aWRlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGkvcHJvdmlkZXInKTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgUGlwZVByb3ZpZGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhQaXBlUHJvdmlkZXIsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBQaXBlUHJvdmlkZXIobmFtZSwgcHVyZSwga2V5LCByZXNvbHZlZEZhY3RvcmllcywgbXVsdGlCaW5kaW5nKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywga2V5LCByZXNvbHZlZEZhY3RvcmllcywgbXVsdGlCaW5kaW5nKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMucHVyZSA9IHB1cmU7XHJcbiAgICB9XHJcbiAgICBQaXBlUHJvdmlkZXIuY3JlYXRlRnJvbVR5cGUgPSBmdW5jdGlvbiAodHlwZSwgbWV0YWRhdGEpIHtcclxuICAgICAgICB2YXIgcHJvdmlkZXIgPSBuZXcgZGlfMS5Qcm92aWRlcih0eXBlLCB7IHVzZUNsYXNzOiB0eXBlIH0pO1xyXG4gICAgICAgIHZhciByYiA9IHByb3ZpZGVyXzEucmVzb2x2ZVByb3ZpZGVyKHByb3ZpZGVyKTtcclxuICAgICAgICByZXR1cm4gbmV3IFBpcGVQcm92aWRlcihtZXRhZGF0YS5uYW1lLCBtZXRhZGF0YS5wdXJlLCByYi5rZXksIHJiLnJlc29sdmVkRmFjdG9yaWVzLCByYi5tdWx0aVByb3ZpZGVyKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUGlwZVByb3ZpZGVyO1xyXG59KShwcm92aWRlcl8xLlJlc29sdmVkUHJvdmlkZXJfKTtcclxuZXhwb3J0cy5QaXBlUHJvdmlkZXIgPSBQaXBlUHJvdmlkZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGVfcHJvdmlkZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgZXhjZXB0aW9uc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2V4Y2VwdGlvbnMnKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBjZCA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2NoYW5nZV9kZXRlY3Rpb24vcGlwZXMnKTtcclxudmFyIFByb3RvUGlwZXMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUHJvdG9QaXBlcyhcclxuICAgICAgICAvKipcclxuICAgICAgICAqIE1hcCBvZiB7QGxpbmsgUGlwZU1ldGFkYXRhfSBuYW1lcyB0byB7QGxpbmsgUGlwZU1ldGFkYXRhfSBpbXBsZW1lbnRhdGlvbnMuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBjb25maWcpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuICAgIH1cclxuICAgIFByb3RvUGlwZXMuZnJvbVByb3ZpZGVycyA9IGZ1bmN0aW9uIChwcm92aWRlcnMpIHtcclxuICAgICAgICB2YXIgY29uZmlnID0ge307XHJcbiAgICAgICAgcHJvdmlkZXJzLmZvckVhY2goZnVuY3Rpb24gKGIpIHsgcmV0dXJuIGNvbmZpZ1tiLm5hbWVdID0gYjsgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm90b1BpcGVzKGNvbmZpZyk7XHJcbiAgICB9O1xyXG4gICAgUHJvdG9QaXBlcy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICB2YXIgcHJvdmlkZXIgPSB0aGlzLmNvbmZpZ1tuYW1lXTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsocHJvdmlkZXIpKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oXCJDYW5ub3QgZmluZCBwaXBlICdcIiArIG5hbWUgKyBcIicuXCIpO1xyXG4gICAgICAgIHJldHVybiBwcm92aWRlcjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUHJvdG9QaXBlcztcclxufSkoKTtcclxuZXhwb3J0cy5Qcm90b1BpcGVzID0gUHJvdG9QaXBlcztcclxudmFyIFBpcGVzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFBpcGVzKHByb3RvLCBpbmplY3Rvcikge1xyXG4gICAgICAgIHRoaXMucHJvdG8gPSBwcm90bztcclxuICAgICAgICB0aGlzLmluamVjdG9yID0gaW5qZWN0b3I7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IHt9O1xyXG4gICAgfVxyXG4gICAgUGlwZXMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgdmFyIGNhY2hlZCA9IGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLmdldCh0aGlzLl9jb25maWcsIG5hbWUpO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGNhY2hlZCkpXHJcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWQ7XHJcbiAgICAgICAgdmFyIHAgPSB0aGlzLnByb3RvLmdldChuYW1lKTtcclxuICAgICAgICB2YXIgdHJhbnNmb3JtID0gdGhpcy5pbmplY3Rvci5pbnN0YW50aWF0ZVJlc29sdmVkKHApO1xyXG4gICAgICAgIHZhciByZXMgPSBuZXcgY2QuU2VsZWN0ZWRQaXBlKHRyYW5zZm9ybSwgcC5wdXJlKTtcclxuICAgICAgICBpZiAocC5wdXJlKSB7XHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLnNldCh0aGlzLl9jb25maWcsIG5hbWUsIHJlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFBpcGVzO1xyXG59KSgpO1xyXG5leHBvcnRzLlBpcGVzID0gUGlwZXM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGVzLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBpbnZhbGlkX3BpcGVfYXJndW1lbnRfZXhjZXB0aW9uXzEgPSByZXF1aXJlKCcuL2ludmFsaWRfcGlwZV9hcmd1bWVudF9leGNlcHRpb24nKTtcclxudmFyIG1ldGFkYXRhXzEgPSByZXF1aXJlKCcuLi9tZXRhZGF0YScpO1xyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBMaXN0IG9yIFN0cmluZyBjb250YWluaW5nIG9ubHkgYSBzdWJzZXQgKHNsaWNlKSBvZiB0aGVcclxuICogZWxlbWVudHMuXHJcbiAqXHJcbiAqIFRoZSBzdGFydGluZyBpbmRleCBvZiB0aGUgc3Vic2V0IHRvIHJldHVybiBpcyBzcGVjaWZpZWQgYnkgdGhlIGBzdGFydGAgcGFyYW1ldGVyLlxyXG4gKlxyXG4gKiBUaGUgZW5kaW5nIGluZGV4IG9mIHRoZSBzdWJzZXQgdG8gcmV0dXJuIGlzIHNwZWNpZmllZCBieSB0aGUgb3B0aW9uYWwgYGVuZGAgcGFyYW1ldGVyLlxyXG4gKlxyXG4gKiAjIFVzYWdlXHJcbiAqXHJcbiAqICAgICBleHByZXNzaW9uIHwgc2xpY2U6c3RhcnRbOmVuZF1cclxuICpcclxuICogQWxsIGJlaGF2aW9yIGlzIGJhc2VkIG9uIHRoZSBleHBlY3RlZCBiZWhhdmlvciBvZiB0aGUgSmF2YVNjcmlwdCBBUElcclxuICogQXJyYXkucHJvdG90eXBlLnNsaWNlKCkgYW5kIFN0cmluZy5wcm90b3R5cGUuc2xpY2UoKVxyXG4gKlxyXG4gKiBXaGVyZSB0aGUgaW5wdXQgZXhwcmVzc2lvbiBpcyBhIFtMaXN0XSBvciBbU3RyaW5nXSwgYW5kIGBzdGFydGAgaXM6XHJcbiAqXHJcbiAqIC0gKiphIHBvc2l0aXZlIGludGVnZXIqKjogcmV0dXJuIHRoZSBpdGVtIGF0IF9zdGFydF8gaW5kZXggYW5kIGFsbCBpdGVtcyBhZnRlclxyXG4gKiBpbiB0aGUgbGlzdCBvciBzdHJpbmcgZXhwcmVzc2lvbi5cclxuICogLSAqKmEgbmVnYXRpdmUgaW50ZWdlcioqOiByZXR1cm4gdGhlIGl0ZW0gYXQgX3N0YXJ0XyBpbmRleCBmcm9tIHRoZSBlbmQgYW5kIGFsbCBpdGVtcyBhZnRlclxyXG4gKiBpbiB0aGUgbGlzdCBvciBzdHJpbmcgZXhwcmVzc2lvbi5cclxuICogLSAqKmB8c3RhcnR8YCBncmVhdGVyIHRoYW4gdGhlIHNpemUgb2YgdGhlIGV4cHJlc3Npb24qKjogcmV0dXJuIGFuIGVtcHR5IGxpc3Qgb3Igc3RyaW5nLlxyXG4gKiAtICoqYHxzdGFydHxgIG5lZ2F0aXZlIGdyZWF0ZXIgdGhhbiB0aGUgc2l6ZSBvZiB0aGUgZXhwcmVzc2lvbioqOiByZXR1cm4gZW50aXJlIGxpc3Qgb3JcclxuICogc3RyaW5nIGV4cHJlc3Npb24uXHJcbiAqXHJcbiAqIGFuZCB3aGVyZSBgZW5kYCBpczpcclxuICpcclxuICogLSAqKm9taXR0ZWQqKjogcmV0dXJuIGFsbCBpdGVtcyB1bnRpbCB0aGUgZW5kIG9mIHRoZSBpbnB1dFxyXG4gKiAtICoqYSBwb3NpdGl2ZSBpbnRlZ2VyKio6IHJldHVybiBhbGwgaXRlbXMgYmVmb3JlIF9lbmRfIGluZGV4IG9mIHRoZSBsaXN0IG9yIHN0cmluZ1xyXG4gKiBleHByZXNzaW9uLlxyXG4gKiAtICoqYSBuZWdhdGl2ZSBpbnRlZ2VyKio6IHJldHVybiBhbGwgaXRlbXMgYmVmb3JlIF9lbmRfIGluZGV4IGZyb20gdGhlIGVuZCBvZiB0aGUgbGlzdFxyXG4gKiBvciBzdHJpbmcgZXhwcmVzc2lvbi5cclxuICpcclxuICogV2hlbiBvcGVyYXRpbmcgb24gYSBbTGlzdF0sIHRoZSByZXR1cm5lZCBsaXN0IGlzIGFsd2F5cyBhIGNvcHkgZXZlbiB3aGVuIGFsbFxyXG4gKiB0aGUgZWxlbWVudHMgYXJlIGJlaW5nIHJldHVybmVkLlxyXG4gKlxyXG4gKiAjIEV4YW1wbGVzXHJcbiAqXHJcbiAqICMjIExpc3QgRXhhbXBsZVxyXG4gKlxyXG4gKiBBc3N1bWluZyBgdmFyIGNvbGxlY3Rpb24gPSBbJ2EnLCAnYicsICdjJywgJ2QnXWAsIHRoaXMgYG5nLWZvcmAgZGlyZWN0aXZlOlxyXG4gKlxyXG4gKiAgICAgPGxpICpuZy1mb3I9XCJ2YXIgaSBpbiBjb2xsZWN0aW9uIHwgc2xpY2U6MTozXCI+e3tpfX08L2xpPlxyXG4gKlxyXG4gKiBwcm9kdWNlcyB0aGUgZm9sbG93aW5nOlxyXG4gKlxyXG4gKiAgICAgPGxpPmI8L2xpPlxyXG4gKiAgICAgPGxpPmM8L2xpPlxyXG4gKlxyXG4gKiAjIyBTdHJpbmcgRXhhbXBsZXNcclxuICpcclxuICogICAgIHt7ICdhYmNkZWZnaGlqJyB8IHNsaWNlOjA6NCB9fSAgICAgICAvLyBvdXRwdXQgaXMgJ2FiY2QnXHJcbiAqICAgICB7eyAnYWJjZGVmZ2hpaicgfCBzbGljZTo0OjAgfX0gICAgICAgLy8gb3V0cHV0IGlzICcnXHJcbiAqICAgICB7eyAnYWJjZGVmZ2hpaicgfCBzbGljZTotNCB9fSAgICAgIC8vIG91dHB1dCBpcyAnZ2hpaidcclxuICogICAgIHt7ICdhYmNkZWZnaGlqJyB8IHNsaWNlOi00LC0yIH19ICAgICAgLy8gb3V0cHV0IGlzICdnaCdcclxuICogICAgIHt7ICdhYmNkZWZnaGlqJyB8IHNsaWNlOiAtMTAwIH19ICAgIC8vIG91dHB1dCBpcyAnYWJjZGVmZ2hpaidcclxuICogICAgIHt7ICdhYmNkZWZnaGlqJyB8IHNsaWNlOiAxMDAgfX0gICAgLy8gb3V0cHV0IGlzICcnXHJcbiAqL1xyXG52YXIgU2xpY2VQaXBlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNsaWNlUGlwZSgpIHtcclxuICAgIH1cclxuICAgIFNsaWNlUGlwZS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gKHZhbHVlLCBhcmdzKSB7XHJcbiAgICAgICAgaWYgKGFyZ3MgPT09IHZvaWQgMCkgeyBhcmdzID0gbnVsbDsgfVxyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhhcmdzKSB8fCBhcmdzLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbignU2xpY2UgcGlwZSByZXF1aXJlcyBvbmUgYXJndW1lbnQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLnN1cHBvcnRzKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgaW52YWxpZF9waXBlX2FyZ3VtZW50X2V4Y2VwdGlvbl8xLkludmFsaWRQaXBlQXJndW1lbnRFeGNlcHRpb24oU2xpY2VQaXBlLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayh2YWx1ZSkpXHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB2YXIgc3RhcnQgPSBhcmdzWzBdO1xyXG4gICAgICAgIHZhciBlbmQgPSBhcmdzLmxlbmd0aCA+IDEgPyBhcmdzWzFdIDogbnVsbDtcclxuICAgICAgICBpZiAobGFuZ18xLmlzU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGFuZ18xLlN0cmluZ1dyYXBwZXIuc2xpY2UodmFsdWUsIHN0YXJ0LCBlbmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLnNsaWNlKHZhbHVlLCBzdGFydCwgZW5kKTtcclxuICAgIH07XHJcbiAgICBTbGljZVBpcGUucHJvdG90eXBlLnN1cHBvcnRzID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gbGFuZ18xLmlzU3RyaW5nKG9iaikgfHwgbGFuZ18xLmlzQXJyYXkob2JqKTsgfTtcclxuICAgIFNsaWNlUGlwZSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIG1ldGFkYXRhXzEuUGlwZSh7IG5hbWU6ICdzbGljZScgfSksXHJcbiAgICAgICAgZGlfMS5JbmplY3RhYmxlKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXHJcbiAgICBdLCBTbGljZVBpcGUpO1xyXG4gICAgcmV0dXJuIFNsaWNlUGlwZTtcclxufSkoKTtcclxuZXhwb3J0cy5TbGljZVBpcGUgPSBTbGljZVBpcGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNsaWNlX3BpcGUuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgbWV0YWRhdGFfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL21ldGFkYXRhJyk7XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIGludmFsaWRfcGlwZV9hcmd1bWVudF9leGNlcHRpb25fMSA9IHJlcXVpcmUoJy4vaW52YWxpZF9waXBlX2FyZ3VtZW50X2V4Y2VwdGlvbicpO1xyXG4vKipcclxuICogSW1wbGVtZW50cyB1cHBlcmNhc2UgdHJhbnNmb3JtcyB0byB0ZXh0LlxyXG4gKlxyXG4gKiAjIEV4YW1wbGVcclxuICpcclxuICogSW4gdGhpcyBleGFtcGxlIHdlIHRyYW5zZm9ybSB0aGUgdXNlciB0ZXh0IHVwcGVyY2FzZS5cclxuICpcclxuICogIGBgYFxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogXCJ1c2VybmFtZS1jbXBcIixcclxuICogICB0ZW1wbGF0ZTogXCJVc2VybmFtZToge3sgdXNlciB8IHVwcGVyY2FzZSB9fVwiXHJcbiAqIH0pXHJcbiAqIGNsYXNzIFVzZXJuYW1lIHtcclxuICogICB1c2VyOnN0cmluZztcclxuICogfVxyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbnZhciBVcHBlckNhc2VQaXBlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFVwcGVyQ2FzZVBpcGUoKSB7XHJcbiAgICB9XHJcbiAgICBVcHBlckNhc2VQaXBlLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiAodmFsdWUsIGFyZ3MpIHtcclxuICAgICAgICBpZiAoYXJncyA9PT0gdm9pZCAwKSB7IGFyZ3MgPSBudWxsOyB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc0JsYW5rKHZhbHVlKSlcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIGlmICghbGFuZ18xLmlzU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgaW52YWxpZF9waXBlX2FyZ3VtZW50X2V4Y2VwdGlvbl8xLkludmFsaWRQaXBlQXJndW1lbnRFeGNlcHRpb24oVXBwZXJDYXNlUGlwZSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbGFuZ18xLlN0cmluZ1dyYXBwZXIudG9VcHBlckNhc2UodmFsdWUpO1xyXG4gICAgfTtcclxuICAgIFVwcGVyQ2FzZVBpcGUgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBsYW5nXzEuQ09OU1QoKSxcclxuICAgICAgICBtZXRhZGF0YV8xLlBpcGUoeyBuYW1lOiAndXBwZXJjYXNlJyB9KSxcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcclxuICAgIF0sIFVwcGVyQ2FzZVBpcGUpO1xyXG4gICAgcmV0dXJuIFVwcGVyQ2FzZVBpcGU7XHJcbn0pKCk7XHJcbmV4cG9ydHMuVXBwZXJDYXNlUGlwZSA9IFVwcGVyQ2FzZVBpcGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVwcGVyY2FzZV9waXBlLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgZG9tX2FkYXB0ZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RvbS9kb21fYWRhcHRlcicpO1xyXG5leHBvcnRzLkVYQ0VQVElPTl9QUk9WSURFUiA9IGRpXzEucHJvdmlkZShleGNlcHRpb25zXzEuRXhjZXB0aW9uSGFuZGxlciwgeyB1c2VGYWN0b3J5OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgZXhjZXB0aW9uc18xLkV4Y2VwdGlvbkhhbmRsZXIoZG9tX2FkYXB0ZXJfMS5ET00sIGZhbHNlKTsgfSwgZGVwczogW10gfSk7XHJcbmV4cG9ydHMuRVhDRVBUSU9OX0JJTkRJTkcgPSBleHBvcnRzLkVYQ0VQVElPTl9QUk9WSURFUjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGxhdGZvcm1fYmluZGluZ3MuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBpbXBsID0gcmVxdWlyZShcIi4vd3RmX2ltcGxcIik7XHJcbi8vIENoYW5nZSBleHBvcnRzIHRvIGNvbnN0IG9uY2UgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvdHMyZGFydC9pc3N1ZXMvMTUwXHJcbi8qKlxyXG4gKiBUcnVlIGlmIFdURiBpcyBlbmFibGVkLlxyXG4gKi9cclxuZXhwb3J0cy53dGZFbmFibGVkID0gaW1wbC5kZXRlY3RXVEYoKTtcclxuZnVuY3Rpb24gbm9vcFNjb3BlKGFyZzAsIGFyZzEpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGUgdHJhY2Ugc2NvcGUuXHJcbiAqXHJcbiAqIFNjb3BlcyBtdXN0IGJlIHN0cmljdGx5IG5lc3RlZCBhbmQgYXJlIGFuYWxvZ291cyB0byBzdGFjayBmcmFtZXMsIGJ1dFxyXG4gKiBkbyBub3QgaGF2ZSB0byBmb2xsb3cgdGhlIHN0YWNrIGZyYW1lcy4gSW5zdGVhZCBpdCBpcyByZWNvbW1lbmRlZCB0aGF0IHRoZXkgZm9sbG93IGxvZ2ljYWxcclxuICogbmVzdGluZy4gWW91IG1heSB3YW50IHRvIHVzZVxyXG4gKiBbRXZlbnRcclxuICogU2lnbmF0dXJlc10oaHR0cDovL2dvb2dsZS5naXRodWIuaW8vdHJhY2luZy1mcmFtZXdvcmsvaW5zdHJ1bWVudGluZy1jb2RlLmh0bWwjY3VzdG9tLWV2ZW50cylcclxuICogYXMgdGhleSBhcmUgZGVmaW5lZCBpbiBXVEYuXHJcbiAqXHJcbiAqIFVzZWQgdG8gbWFyayBzY29wZSBlbnRyeS4gVGhlIHJldHVybiB2YWx1ZSBpcyB1c2VkIHRvIGxlYXZlIHRoZSBzY29wZS5cclxuICpcclxuICogICAgIHZhciBteVNjb3BlID0gd3RmQ3JlYXRlU2NvcGUoJ015Q2xhc3MjbXlNZXRob2QoYXNjaWkgc29tZVZhbCknKTtcclxuICpcclxuICogICAgIHNvbWVNZXRob2QoKSB7XHJcbiAqICAgICAgICB2YXIgcyA9IG15U2NvcGUoJ0ZvbycpOyAvLyAnRm9vJyBnZXRzIHN0b3JlZCBpbiB0cmFjaW5nIFVJXHJcbiAqICAgICAgICAvLyBETyBTT01FIFdPUksgSEVSRVxyXG4gKiAgICAgICAgcmV0dXJuIHd0ZkxlYXZlKHMsIDEyMyk7IC8vIFJldHVybiB2YWx1ZSAxMjNcclxuICogICAgIH1cclxuICpcclxuICogTm90ZSwgYWRkaW5nIHRyeS1maW5hbGx5IGJsb2NrIGFyb3VuZCB0aGUgd29yayB0byBlbnN1cmUgdGhhdCBgd3RmTGVhdmVgIGdldHMgY2FsbGVkIGNhblxyXG4gKiBuZWdhdGl2ZWx5IGltcGFjdCB0aGUgcGVyZm9ybWFuY2Ugb2YgeW91ciBhcHBsaWNhdGlvbi4gRm9yIHRoaXMgcmVhc29uIHdlIHJlY29tbWVuZCB0aGF0XHJcbiAqIHlvdSBkb24ndCBhZGQgdGhlbSB0byBlbnN1cmUgdGhhdCBgd3RmTGVhdmVgIGdldHMgY2FsbGVkLiBJbiBwcm9kdWN0aW9uIGB3dGZMZWF2ZWAgaXMgYSBub29wIGFuZFxyXG4gKiBzbyB0cnktZmluYWxseSBibG9jayBoYXMgbm8gdmFsdWUuIFdoZW4gZGVidWdnaW5nIHBlcmYgaXNzdWVzLCBza2lwcGluZyBgd3RmTGVhdmVgLCBkbyB0b1xyXG4gKiBleGNlcHRpb24sIHdpbGwgcHJvZHVjZSBpbmNvcnJlY3QgdHJhY2UsIGJ1dCBwcmVzZW5jZSBvZiBleGNlcHRpb24gc2lnbmlmaWVzIGxvZ2ljIGVycm9yIHdoaWNoXHJcbiAqIG5lZWRzIHRvIGJlIGZpeGVkIGJlZm9yZSB0aGUgYXBwIHNob3VsZCBiZSBwcm9maWxlZC4gQWRkIHRyeS1maW5hbGx5IG9ubHkgd2hlbiB5b3UgZXhwZWN0IHRoYXRcclxuICogYW4gZXhjZXB0aW9uIGlzIGV4cGVjdGVkIGR1cmluZyBub3JtYWwgZXhlY3V0aW9uIHdoaWxlIHByb2ZpbGluZy5cclxuICpcclxuICovXHJcbmV4cG9ydHMud3RmQ3JlYXRlU2NvcGUgPSBleHBvcnRzLnd0ZkVuYWJsZWQgPyBpbXBsLmNyZWF0ZVNjb3BlIDogZnVuY3Rpb24gKHNpZ25hdHVyZSwgZmxhZ3MpIHsgcmV0dXJuIG5vb3BTY29wZTsgfTtcclxuLyoqXHJcbiAqIFVzZWQgdG8gbWFyayBlbmQgb2YgU2NvcGUuXHJcbiAqXHJcbiAqIC0gYHNjb3BlYCB0byBlbmQuXHJcbiAqIC0gYHJldHVyblZhbHVlYCAob3B0aW9uYWwpIHRvIGJlIHBhc3NlZCB0byB0aGUgV1RGLlxyXG4gKlxyXG4gKiBSZXR1cm5zIHRoZSBgcmV0dXJuVmFsdWUgZm9yIGVhc3kgY2hhaW5pbmcuXHJcbiAqL1xyXG5leHBvcnRzLnd0ZkxlYXZlID0gZXhwb3J0cy53dGZFbmFibGVkID8gaW1wbC5sZWF2ZSA6IGZ1bmN0aW9uIChzLCByKSB7IHJldHVybiByOyB9O1xyXG4vKipcclxuICogVXNlZCB0byBtYXJrIEFzeW5jIHN0YXJ0LiBBc3luYyBhcmUgc2ltaWxhciB0byBzY29wZSBidXQgdGhleSBkb24ndCBoYXZlIHRvIGJlIHN0cmljdGx5IG5lc3RlZC5cclxuICogVGhlIHJldHVybiB2YWx1ZSBpcyB1c2VkIGluIHRoZSBjYWxsIHRvIFtlbmRBc3luY10uIEFzeW5jIHJhbmdlcyBvbmx5IHdvcmsgaWYgV1RGIGhhcyBiZWVuXHJcbiAqIGVuYWJsZWQuXHJcbiAqXHJcbiAqICAgICBzb21lTWV0aG9kKCkge1xyXG4gKiAgICAgICAgdmFyIHMgPSB3dGZTdGFydFRpbWVSYW5nZSgnSFRUUDpHRVQnLCAnc29tZS51cmwnKTtcclxuICogICAgICAgIHZhciBmdXR1cmUgPSBuZXcgRnV0dXJlLmRlbGF5KDUpLnRoZW4oKF8pIHtcclxuICogICAgICAgICAgd3RmRW5kVGltZVJhbmdlKHMpO1xyXG4gKiAgICAgICAgfSk7XHJcbiAqICAgICB9XHJcbiAqL1xyXG5leHBvcnRzLnd0ZlN0YXJ0VGltZVJhbmdlID0gZXhwb3J0cy53dGZFbmFibGVkID8gaW1wbC5zdGFydFRpbWVSYW5nZSA6IGZ1bmN0aW9uIChyYW5nZVR5cGUsIGFjdGlvbikgeyByZXR1cm4gbnVsbDsgfTtcclxuLyoqXHJcbiAqIEVuZHMgYSBhc3luYyB0aW1lIHJhbmdlIG9wZXJhdGlvbi5cclxuICogW3JhbmdlXSBpcyB0aGUgcmV0dXJuIHZhbHVlIGZyb20gW3d0ZlN0YXJ0VGltZVJhbmdlXSBBc3luYyByYW5nZXMgb25seSB3b3JrIGlmIFdURiBoYXMgYmVlblxyXG4gKiBlbmFibGVkLlxyXG4gKi9cclxuZXhwb3J0cy53dGZFbmRUaW1lUmFuZ2UgPSBleHBvcnRzLnd0ZkVuYWJsZWQgPyBpbXBsLmVuZFRpbWVSYW5nZSA6IGZ1bmN0aW9uIChyKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvZmlsZS5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGxhbmdfMSA9IHJlcXVpcmUoJy4uL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciB0cmFjZTtcclxudmFyIGV2ZW50cztcclxuZnVuY3Rpb24gZGV0ZWN0V1RGKCkge1xyXG4gICAgdmFyIHd0ZiA9IGxhbmdfMS5nbG9iYWxbJ3d0ZiddO1xyXG4gICAgaWYgKHd0Zikge1xyXG4gICAgICAgIHRyYWNlID0gd3RmWyd0cmFjZSddO1xyXG4gICAgICAgIGlmICh0cmFjZSkge1xyXG4gICAgICAgICAgICBldmVudHMgPSB0cmFjZVsnZXZlbnRzJ107XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5leHBvcnRzLmRldGVjdFdURiA9IGRldGVjdFdURjtcclxuZnVuY3Rpb24gY3JlYXRlU2NvcGUoc2lnbmF0dXJlLCBmbGFncykge1xyXG4gICAgaWYgKGZsYWdzID09PSB2b2lkIDApIHsgZmxhZ3MgPSBudWxsOyB9XHJcbiAgICByZXR1cm4gZXZlbnRzLmNyZWF0ZVNjb3BlKHNpZ25hdHVyZSwgZmxhZ3MpO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlU2NvcGUgPSBjcmVhdGVTY29wZTtcclxuZnVuY3Rpb24gbGVhdmUoc2NvcGUsIHJldHVyblZhbHVlKSB7XHJcbiAgICB0cmFjZS5sZWF2ZVNjb3BlKHNjb3BlLCByZXR1cm5WYWx1ZSk7XHJcbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XHJcbn1cclxuZXhwb3J0cy5sZWF2ZSA9IGxlYXZlO1xyXG5mdW5jdGlvbiBzdGFydFRpbWVSYW5nZShyYW5nZVR5cGUsIGFjdGlvbikge1xyXG4gICAgcmV0dXJuIHRyYWNlLmJlZ2luVGltZVJhbmdlKHJhbmdlVHlwZSwgYWN0aW9uKTtcclxufVxyXG5leHBvcnRzLnN0YXJ0VGltZVJhbmdlID0gc3RhcnRUaW1lUmFuZ2U7XHJcbmZ1bmN0aW9uIGVuZFRpbWVSYW5nZShyYW5nZSkge1xyXG4gICAgdHJhY2UuZW5kVGltZVJhbmdlKHJhbmdlKTtcclxufVxyXG5leHBvcnRzLmVuZFRpbWVSYW5nZSA9IGVuZFRpbWVSYW5nZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3RmX2ltcGwuanMubWFwIiwiJ3VzZSBzdHJpY3QnOy8qKlxyXG4gKiBUaGlzIGlzIGhlcmUgYmVjYXVzZSBEQVJUIHJlcXVpcmVzIGl0LiBJdCBpcyBub29wIGluIEpTLlxyXG4gKi9cclxuZnVuY3Rpb24gd3RmSW5pdCgpIHsgfVxyXG5leHBvcnRzLnd0ZkluaXQgPSB3dGZJbml0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD13dGZfaW5pdC5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIHJlZmxlY3Rvcl8xID0gcmVxdWlyZSgnLi9yZWZsZWN0b3InKTtcclxudmFyIHJlZmxlY3Rvcl8yID0gcmVxdWlyZSgnLi9yZWZsZWN0b3InKTtcclxuZXhwb3J0cy5SZWZsZWN0b3IgPSByZWZsZWN0b3JfMi5SZWZsZWN0b3I7XHJcbmV4cG9ydHMuUmVmbGVjdGlvbkluZm8gPSByZWZsZWN0b3JfMi5SZWZsZWN0aW9uSW5mbztcclxudmFyIHJlZmxlY3Rpb25fY2FwYWJpbGl0aWVzXzEgPSByZXF1aXJlKCcuL3JlZmxlY3Rpb25fY2FwYWJpbGl0aWVzJyk7XHJcbmV4cG9ydHMucmVmbGVjdG9yID0gbmV3IHJlZmxlY3Rvcl8xLlJlZmxlY3RvcihuZXcgcmVmbGVjdGlvbl9jYXBhYmlsaXRpZXNfMS5SZWZsZWN0aW9uQ2FwYWJpbGl0aWVzKCkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZsZWN0aW9uLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgUmVmbGVjdGlvbkNhcGFiaWxpdGllcyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzKHJlZmxlY3QpIHtcclxuICAgICAgICB0aGlzLl9yZWZsZWN0ID0gbGFuZ18xLmlzUHJlc2VudChyZWZsZWN0KSA/IHJlZmxlY3QgOiBsYW5nXzEuZ2xvYmFsLlJlZmxlY3Q7XHJcbiAgICB9XHJcbiAgICBSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLnByb3RvdHlwZS5pc1JlZmxlY3Rpb25FbmFibGVkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcclxuICAgIFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucHJvdG90eXBlLmZhY3RvcnkgPSBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgIHN3aXRjaCAodC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyB0KCk7IH07XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEpIHsgcmV0dXJuIG5ldyB0KGExKTsgfTtcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMSwgYTIpIHsgcmV0dXJuIG5ldyB0KGExLCBhMik7IH07XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMykgeyByZXR1cm4gbmV3IHQoYTEsIGEyLCBhMyk7IH07XHJcbiAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQpIHsgcmV0dXJuIG5ldyB0KGExLCBhMiwgYTMsIGE0KTsgfTtcclxuICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMSwgYTIsIGEzLCBhNCwgYTUpIHsgcmV0dXJuIG5ldyB0KGExLCBhMiwgYTMsIGE0LCBhNSk7IH07XHJcbiAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNikgeyByZXR1cm4gbmV3IHQoYTEsIGEyLCBhMywgYTQsIGE1LCBhNik7IH07XHJcbiAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHsgcmV0dXJuIG5ldyB0KGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTsgfTtcclxuICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgpIHsgcmV0dXJuIG5ldyB0KGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCk7IH07XHJcbiAgICAgICAgICAgIGNhc2UgOTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSkgeyByZXR1cm4gbmV3IHQoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSk7IH07XHJcbiAgICAgICAgICAgIGNhc2UgMTA6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTApO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2FzZSAxMTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHQoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2FzZSAxMjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNhc2UgMTM6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExLCBhMTIsIGExMykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2FzZSAxNDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzLCBhMTQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHQoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzLCBhMTQpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2FzZSAxNTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzLCBhMTQsIGExNSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMsIGExNCwgYTE1KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNhc2UgMTY6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExLCBhMTIsIGExMywgYTE0LCBhMTUsIGExNikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMsIGExNCwgYTE1LCBhMTYpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2FzZSAxNzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzLCBhMTQsIGExNSwgYTE2LCBhMTcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHQoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzLCBhMTQsIGExNSwgYTE2LCBhMTcpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2FzZSAxODpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzLCBhMTQsIGExNSwgYTE2LCBhMTcsIGExOCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMsIGExNCwgYTE1LCBhMTYsIGExNywgYTE4KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNhc2UgMTk6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTksIGExMCwgYTExLCBhMTIsIGExMywgYTE0LCBhMTUsIGExNiwgYTE3LCBhMTgsIGExOSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5LCBhMTAsIGExMSwgYTEyLCBhMTMsIGExNCwgYTE1LCBhMTYsIGExNywgYTE4LCBhMTkpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2FzZSAyMDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzLCBhMTQsIGExNSwgYTE2LCBhMTcsIGExOCwgYTE5LCBhMjApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHQoYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4LCBhOSwgYTEwLCBhMTEsIGExMiwgYTEzLCBhMTQsIGExNSwgYTE2LCBhMTcsIGExOCwgYTE5LCBhMjApO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjcmVhdGUgYSBmYWN0b3J5IGZvciAnXCIgKyBsYW5nXzEuc3RyaW5naWZ5KHQpICsgXCInIGJlY2F1c2UgaXRzIGNvbnN0cnVjdG9yIGhhcyBtb3JlIHRoYW4gMjAgYXJndW1lbnRzXCIpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucHJvdG90eXBlLl96aXBUeXBlc0FuZEFubm90YWlvbnMgPSBmdW5jdGlvbiAocGFyYW1UeXBlcywgcGFyYW1Bbm5vdGF0aW9ucykge1xyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbVR5cGVzID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuY3JlYXRlRml4ZWRTaXplKHBhcmFtQW5ub3RhdGlvbnMubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jcmVhdGVGaXhlZFNpemUocGFyYW1UeXBlcy5sZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyBUUyBvdXRwdXRzIE9iamVjdCBmb3IgcGFyYW1ldGVycyB3aXRob3V0IHR5cGVzLCB3aGlsZSBUcmFjZXVyIG9taXRzXHJcbiAgICAgICAgICAgIC8vIHRoZSBhbm5vdGF0aW9ucy4gRm9yIG5vdyB3ZSBwcmVzZXJ2ZSB0aGUgVHJhY2V1ciBiZWhhdmlvciB0byBhaWRcclxuICAgICAgICAgICAgLy8gbWlncmF0aW9uLCBidXQgdGhpcyBjYW4gYmUgcmV2aXNpdGVkLlxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtVHlwZXMgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChwYXJhbVR5cGVzW2ldICE9IE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gW3BhcmFtVHlwZXNbaV1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQocGFyYW1Bbm5vdGF0aW9ucykgJiYgbGFuZ18xLmlzUHJlc2VudChwYXJhbUFubm90YXRpb25zW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gcmVzdWx0W2ldLmNvbmNhdChwYXJhbUFubm90YXRpb25zW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucHJvdG90eXBlLnBhcmFtZXRlcnMgPSBmdW5jdGlvbiAodHlwZU9yRnVuYykge1xyXG4gICAgICAgIC8vIFByZWZlciB0aGUgZGlyZWN0IEFQSS5cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0eXBlT3JGdW5jLnBhcmFtZXRlcnMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlT3JGdW5jLnBhcmFtZXRlcnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRoaXMuX3JlZmxlY3QpICYmIGxhbmdfMS5pc1ByZXNlbnQodGhpcy5fcmVmbGVjdC5nZXRNZXRhZGF0YSkpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmFtQW5ub3RhdGlvbnMgPSB0aGlzLl9yZWZsZWN0LmdldE1ldGFkYXRhKCdwYXJhbWV0ZXJzJywgdHlwZU9yRnVuYyk7XHJcbiAgICAgICAgICAgIHZhciBwYXJhbVR5cGVzID0gdGhpcy5fcmVmbGVjdC5nZXRNZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCB0eXBlT3JGdW5jKTtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQocGFyYW1UeXBlcykgfHwgbGFuZ18xLmlzUHJlc2VudChwYXJhbUFubm90YXRpb25zKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ppcFR5cGVzQW5kQW5ub3RhaW9ucyhwYXJhbVR5cGVzLCBwYXJhbUFubm90YXRpb25zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLmNyZWF0ZUZpeGVkU2l6ZSh0eXBlT3JGdW5jLmxlbmd0aCk7XHJcbiAgICB9O1xyXG4gICAgUmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wcm90b3R5cGUuYW5ub3RhdGlvbnMgPSBmdW5jdGlvbiAodHlwZU9yRnVuYykge1xyXG4gICAgICAgIC8vIFByZWZlciB0aGUgZGlyZWN0IEFQSS5cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0eXBlT3JGdW5jLmFubm90YXRpb25zKSkge1xyXG4gICAgICAgICAgICB2YXIgYW5ub3RhdGlvbnMgPSB0eXBlT3JGdW5jLmFubm90YXRpb25zO1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzRnVuY3Rpb24oYW5ub3RhdGlvbnMpICYmIGFubm90YXRpb25zLmFubm90YXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9ucyA9IGFubm90YXRpb25zLmFubm90YXRpb25zO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhbm5vdGF0aW9ucztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5fcmVmbGVjdCkgJiYgbGFuZ18xLmlzUHJlc2VudCh0aGlzLl9yZWZsZWN0LmdldE1ldGFkYXRhKSkge1xyXG4gICAgICAgICAgICB2YXIgYW5ub3RhdGlvbnMgPSB0aGlzLl9yZWZsZWN0LmdldE1ldGFkYXRhKCdhbm5vdGF0aW9ucycsIHR5cGVPckZ1bmMpO1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChhbm5vdGF0aW9ucykpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5ub3RhdGlvbnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH07XHJcbiAgICBSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLnByb3RvdHlwZS5wcm9wTWV0YWRhdGEgPSBmdW5jdGlvbiAodHlwZU9yRnVuYykge1xyXG4gICAgICAgIC8vIFByZWZlciB0aGUgZGlyZWN0IEFQSS5cclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0eXBlT3JGdW5jLnByb3BNZXRhZGF0YSkpIHtcclxuICAgICAgICAgICAgdmFyIHByb3BNZXRhZGF0YSA9IHR5cGVPckZ1bmMucHJvcE1ldGFkYXRhO1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzRnVuY3Rpb24ocHJvcE1ldGFkYXRhKSAmJiBwcm9wTWV0YWRhdGEucHJvcE1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wTWV0YWRhdGEgPSBwcm9wTWV0YWRhdGEucHJvcE1ldGFkYXRhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9wTWV0YWRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KHRoaXMuX3JlZmxlY3QpICYmIGxhbmdfMS5pc1ByZXNlbnQodGhpcy5fcmVmbGVjdC5nZXRNZXRhZGF0YSkpIHtcclxuICAgICAgICAgICAgdmFyIHByb3BNZXRhZGF0YSA9IHRoaXMuX3JlZmxlY3QuZ2V0TWV0YWRhdGEoJ3Byb3BNZXRhZGF0YScsIHR5cGVPckZ1bmMpO1xyXG4gICAgICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwcm9wTWV0YWRhdGEpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BNZXRhZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfTtcclxuICAgIFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucHJvdG90eXBlLmludGVyZmFjZXMgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbihcIkphdmFTY3JpcHQgZG9lcyBub3Qgc3VwcG9ydCBpbnRlcmZhY2VzXCIpO1xyXG4gICAgfTtcclxuICAgIFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucHJvdG90eXBlLmdldHRlciA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBuZXcgRnVuY3Rpb24oJ28nLCAncmV0dXJuIG8uJyArIG5hbWUgKyAnOycpOyB9O1xyXG4gICAgUmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wcm90b3R5cGUuc2V0dGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdvJywgJ3YnLCAncmV0dXJuIG8uJyArIG5hbWUgKyAnID0gdjsnKTtcclxuICAgIH07XHJcbiAgICBSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLnByb3RvdHlwZS5tZXRob2QgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHZhciBmdW5jdGlvbkJvZHkgPSBcImlmICghby5cIiArIG5hbWUgKyBcIikgdGhyb3cgbmV3IEVycm9yKCdcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGlzIHVuZGVmaW5lZCcpO1xcbiAgICAgICAgcmV0dXJuIG8uXCIgKyBuYW1lICsgXCIuYXBwbHkobywgYXJncyk7XCI7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbignbycsICdhcmdzJywgZnVuY3Rpb25Cb2R5KTtcclxuICAgIH07XHJcbiAgICAvLyBUaGVyZSBpcyBub3QgYSBjb25jZXB0IG9mIGltcG9ydCB1cmkgaW4gSnMsIGJ1dCB0aGlzIGlzIHVzZWZ1bCBpbiBkZXZlbG9waW5nIERhcnQgYXBwbGljYXRpb25zLlxyXG4gICAgUmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wcm90b3R5cGUuaW1wb3J0VXJpID0gZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuICcuLyc7IH07XHJcbiAgICByZXR1cm4gUmVmbGVjdGlvbkNhcGFiaWxpdGllcztcclxufSkoKTtcclxuZXhwb3J0cy5SZWZsZWN0aW9uQ2FwYWJpbGl0aWVzID0gUmVmbGVjdGlvbkNhcGFiaWxpdGllcztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVmbGVjdGlvbl9jYXBhYmlsaXRpZXMuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgZXhjZXB0aW9uc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2V4Y2VwdGlvbnMnKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBSZWZsZWN0aW9uSW5mbyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZWZsZWN0aW9uSW5mbyhhbm5vdGF0aW9ucywgcGFyYW1ldGVycywgZmFjdG9yeSwgaW50ZXJmYWNlcywgcHJvcE1ldGFkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5hbm5vdGF0aW9ucyA9IGFubm90YXRpb25zO1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XHJcbiAgICAgICAgdGhpcy5mYWN0b3J5ID0gZmFjdG9yeTtcclxuICAgICAgICB0aGlzLmludGVyZmFjZXMgPSBpbnRlcmZhY2VzO1xyXG4gICAgICAgIHRoaXMucHJvcE1ldGFkYXRhID0gcHJvcE1ldGFkYXRhO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJlZmxlY3Rpb25JbmZvO1xyXG59KSgpO1xyXG5leHBvcnRzLlJlZmxlY3Rpb25JbmZvID0gUmVmbGVjdGlvbkluZm87XHJcbnZhciBSZWZsZWN0b3IgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVmbGVjdG9yKHJlZmxlY3Rpb25DYXBhYmlsaXRpZXMpIHtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5faW5qZWN0YWJsZUluZm8gPSBuZXcgY29sbGVjdGlvbl8xLk1hcCgpO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9nZXR0ZXJzID0gbmV3IGNvbGxlY3Rpb25fMS5NYXAoKTtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5fc2V0dGVycyA9IG5ldyBjb2xsZWN0aW9uXzEuTWFwKCk7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX21ldGhvZHMgPSBuZXcgY29sbGVjdGlvbl8xLk1hcCgpO1xyXG4gICAgICAgIHRoaXMuX3VzZWRLZXlzID0gbnVsbDtcclxuICAgICAgICB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMgPSByZWZsZWN0aW9uQ2FwYWJpbGl0aWVzO1xyXG4gICAgfVxyXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5pc1JlZmxlY3Rpb25FbmFibGVkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5yZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLmlzUmVmbGVjdGlvbkVuYWJsZWQoKTsgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2F1c2VzIGB0aGlzYCByZWZsZWN0b3IgdG8gdHJhY2sga2V5cyB1c2VkIHRvIGFjY2Vzc1xyXG4gICAgICoge0BsaW5rIFJlZmxlY3Rpb25JbmZvfSBvYmplY3RzLlxyXG4gICAgICovXHJcbiAgICBSZWZsZWN0b3IucHJvdG90eXBlLnRyYWNrVXNhZ2UgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX3VzZWRLZXlzID0gbmV3IGNvbGxlY3Rpb25fMS5TZXQoKTsgfTtcclxuICAgIC8qKlxyXG4gICAgICogTGlzdHMgdHlwZXMgZm9yIHdoaWNoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24gd2FzIG5vdCByZXF1ZXN0ZWQgc2luY2VcclxuICAgICAqIHtAbGluayAjdHJhY2tVc2FnZX0gd2FzIGNhbGxlZC4gVGhpcyBsaXN0IGNvdWxkIGxhdGVyIGJlIGF1ZGl0ZWQgYXNcclxuICAgICAqIHBvdGVudGlhbCBkZWFkIGNvZGUuXHJcbiAgICAgKi9cclxuICAgIFJlZmxlY3Rvci5wcm90b3R5cGUubGlzdFVudXNlZEtleXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5fdXNlZEtleXMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oJ1VzYWdlIHRyYWNraW5nIGlzIGRpc2FibGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBhbGxUeXBlcyA9IGNvbGxlY3Rpb25fMS5NYXBXcmFwcGVyLmtleXModGhpcy5faW5qZWN0YWJsZUluZm8pO1xyXG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuZmlsdGVyKGFsbFR5cGVzLCBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAhY29sbGVjdGlvbl8xLlNldFdyYXBwZXIuaGFzKF90aGlzLl91c2VkS2V5cywga2V5KTsgfSk7XHJcbiAgICB9O1xyXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5yZWdpc3RlckZ1bmN0aW9uID0gZnVuY3Rpb24gKGZ1bmMsIGZ1bmNJbmZvKSB7XHJcbiAgICAgICAgdGhpcy5faW5qZWN0YWJsZUluZm8uc2V0KGZ1bmMsIGZ1bmNJbmZvKTtcclxuICAgIH07XHJcbiAgICBSZWZsZWN0b3IucHJvdG90eXBlLnJlZ2lzdGVyVHlwZSA9IGZ1bmN0aW9uICh0eXBlLCB0eXBlSW5mbykge1xyXG4gICAgICAgIHRoaXMuX2luamVjdGFibGVJbmZvLnNldCh0eXBlLCB0eXBlSW5mbyk7XHJcbiAgICB9O1xyXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5yZWdpc3RlckdldHRlcnMgPSBmdW5jdGlvbiAoZ2V0dGVycykgeyBfbWVyZ2VNYXBzKHRoaXMuX2dldHRlcnMsIGdldHRlcnMpOyB9O1xyXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5yZWdpc3RlclNldHRlcnMgPSBmdW5jdGlvbiAoc2V0dGVycykgeyBfbWVyZ2VNYXBzKHRoaXMuX3NldHRlcnMsIHNldHRlcnMpOyB9O1xyXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5yZWdpc3Rlck1ldGhvZHMgPSBmdW5jdGlvbiAobWV0aG9kcykgeyBfbWVyZ2VNYXBzKHRoaXMuX21ldGhvZHMsIG1ldGhvZHMpOyB9O1xyXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5mYWN0b3J5ID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICBpZiAodGhpcy5fY29udGFpbnNSZWZsZWN0aW9uSW5mbyh0eXBlKSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzID0gdGhpcy5fZ2V0UmVmbGVjdGlvbkluZm8odHlwZSkuZmFjdG9yeTtcclxuICAgICAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQocmVzKSA/IHJlcyA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLmZhY3RvcnkodHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlZmxlY3Rvci5wcm90b3R5cGUucGFyYW1ldGVycyA9IGZ1bmN0aW9uICh0eXBlT3JGdW5jKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2luamVjdGFibGVJbmZvLmhhcyh0eXBlT3JGdW5jKSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzID0gdGhpcy5fZ2V0UmVmbGVjdGlvbkluZm8odHlwZU9yRnVuYykucGFyYW1ldGVycztcclxuICAgICAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQocmVzKSA/IHJlcyA6IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wYXJhbWV0ZXJzKHR5cGVPckZ1bmMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZWZsZWN0b3IucHJvdG90eXBlLmFubm90YXRpb25zID0gZnVuY3Rpb24gKHR5cGVPckZ1bmMpIHtcclxuICAgICAgICBpZiAodGhpcy5faW5qZWN0YWJsZUluZm8uaGFzKHR5cGVPckZ1bmMpKSB7XHJcbiAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLl9nZXRSZWZsZWN0aW9uSW5mbyh0eXBlT3JGdW5jKS5hbm5vdGF0aW9ucztcclxuICAgICAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQocmVzKSA/IHJlcyA6IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmbGVjdGlvbkNhcGFiaWxpdGllcy5hbm5vdGF0aW9ucyh0eXBlT3JGdW5jKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5wcm9wTWV0YWRhdGEgPSBmdW5jdGlvbiAodHlwZU9yRnVuYykge1xyXG4gICAgICAgIGlmICh0aGlzLl9pbmplY3RhYmxlSW5mby5oYXModHlwZU9yRnVuYykpIHtcclxuICAgICAgICAgICAgdmFyIHJlcyA9IHRoaXMuX2dldFJlZmxlY3Rpb25JbmZvKHR5cGVPckZ1bmMpLnByb3BNZXRhZGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQocmVzKSA/IHJlcyA6IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wcm9wTWV0YWRhdGEodHlwZU9yRnVuYyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlZmxlY3Rvci5wcm90b3R5cGUuaW50ZXJmYWNlcyA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2luamVjdGFibGVJbmZvLmhhcyh0eXBlKSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzID0gdGhpcy5fZ2V0UmVmbGVjdGlvbkluZm8odHlwZSkuaW50ZXJmYWNlcztcclxuICAgICAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQocmVzKSA/IHJlcyA6IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmbGVjdGlvbkNhcGFiaWxpdGllcy5pbnRlcmZhY2VzKHR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZWZsZWN0b3IucHJvdG90eXBlLmdldHRlciA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dldHRlcnMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXR0ZXJzLmdldChuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMuZ2V0dGVyKG5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZWZsZWN0b3IucHJvdG90eXBlLnNldHRlciA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NldHRlcnMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZXR0ZXJzLmdldChuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMuc2V0dGVyKG5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZWZsZWN0b3IucHJvdG90eXBlLm1ldGhvZCA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX21ldGhvZHMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tZXRob2RzLmdldChuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMubWV0aG9kKG5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBSZWZsZWN0b3IucHJvdG90eXBlLl9nZXRSZWZsZWN0aW9uSW5mbyA9IGZ1bmN0aW9uICh0eXBlT3JGdW5jKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5fdXNlZEtleXMpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VzZWRLZXlzLmFkZCh0eXBlT3JGdW5jKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luamVjdGFibGVJbmZvLmdldCh0eXBlT3JGdW5jKTtcclxuICAgIH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBSZWZsZWN0b3IucHJvdG90eXBlLl9jb250YWluc1JlZmxlY3Rpb25JbmZvID0gZnVuY3Rpb24gKHR5cGVPckZ1bmMpIHsgcmV0dXJuIHRoaXMuX2luamVjdGFibGVJbmZvLmhhcyh0eXBlT3JGdW5jKTsgfTtcclxuICAgIFJlZmxlY3Rvci5wcm90b3R5cGUuaW1wb3J0VXJpID0gZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIHRoaXMucmVmbGVjdGlvbkNhcGFiaWxpdGllcy5pbXBvcnRVcmkodHlwZSk7IH07XHJcbiAgICByZXR1cm4gUmVmbGVjdG9yO1xyXG59KSgpO1xyXG5leHBvcnRzLlJlZmxlY3RvciA9IFJlZmxlY3RvcjtcclxuZnVuY3Rpb24gX21lcmdlTWFwcyh0YXJnZXQsIGNvbmZpZykge1xyXG4gICAgY29sbGVjdGlvbl8xLlN0cmluZ01hcFdyYXBwZXIuZm9yRWFjaChjb25maWcsIGZ1bmN0aW9uICh2LCBrKSB7IHJldHVybiB0YXJnZXQuc2V0KGssIHYpOyB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZsZWN0b3IuanMubWFwIiwiJ3VzZSBzdHJpY3QnOy8vIFB1YmxpYyBBUEkgZm9yIHJlbmRlclxyXG52YXIgcmVuZGVyXzEgPSByZXF1aXJlKCcuL3JlbmRlci9yZW5kZXInKTtcclxuZXhwb3J0cy5SZW5kZXJlciA9IHJlbmRlcl8xLlJlbmRlcmVyO1xyXG5leHBvcnRzLlJlbmRlclZpZXdSZWYgPSByZW5kZXJfMS5SZW5kZXJWaWV3UmVmO1xyXG5leHBvcnRzLlJlbmRlclByb3RvVmlld1JlZiA9IHJlbmRlcl8xLlJlbmRlclByb3RvVmlld1JlZjtcclxuZXhwb3J0cy5SZW5kZXJGcmFnbWVudFJlZiA9IHJlbmRlcl8xLlJlbmRlckZyYWdtZW50UmVmO1xyXG5leHBvcnRzLlJlbmRlclZpZXdXaXRoRnJhZ21lbnRzID0gcmVuZGVyXzEuUmVuZGVyVmlld1dpdGhGcmFnbWVudHM7XHJcbmV4cG9ydHMuRE9DVU1FTlQgPSByZW5kZXJfMS5ET0NVTUVOVDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVuZGVyLmpzLm1hcCIsIid1c2Ugc3RyaWN0JzsvKipcclxuICogUmVwcmVzZW50cyBhbiBBbmd1bGFyIFByb3RvVmlldyBpbiB0aGUgUmVuZGVyaW5nIENvbnRleHQuXHJcbiAqXHJcbiAqIFdoZW4geW91IGltcGxlbWVudCBhIGN1c3RvbSB7QGxpbmsgUmVuZGVyZXJ9LCBgUmVuZGVyUHJvdG9WaWV3UmVmYCBzcGVjaWZpZXMgd2hhdCBSZW5kZXIgVmlld1xyXG4gKiB5b3VyIHJlbmRlcmVyIHNob3VsZCBjcmVhdGUuXHJcbiAqXHJcbiAqIGBSZW5kZXJQcm90b1ZpZXdSZWZgIGlzIGEgY291bnRlcnBhcnQgdG8ge0BsaW5rIFByb3RvVmlld1JlZn0gYXZhaWxhYmxlIGluIHRoZSBBcHBsaWNhdGlvblxyXG4gKiBDb250ZXh0LiBCdXQgdW5saWtlIGBQcm90b1ZpZXdSZWZgLCBgUmVuZGVyUHJvdG9WaWV3UmVmYCBjb250YWlucyBhbGwgc3RhdGljIG5lc3RlZCBQcm90byBWaWV3c1xyXG4gKiB0aGF0IGFyZSByZWN1cnNpdmVseSBtZXJnZWQgaW50byBhIHNpbmdsZSBSZW5kZXIgUHJvdG8gVmlldy5cclxuXHJcbiAqXHJcbiAqIDwhLS0gVE9ETzogdGhpcyBpcyBjcmVhdGVkIGJ5IFJlbmRlcmVyI2NyZWF0ZVByb3RvVmlldyBpbiB0aGUgbmV3IGNvbXBpbGVyIC0tPlxyXG4gKi9cclxudmFyIFJlbmRlclByb3RvVmlld1JlZiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZW5kZXJQcm90b1ZpZXdSZWYoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVuZGVyUHJvdG9WaWV3UmVmO1xyXG59KSgpO1xyXG5leHBvcnRzLlJlbmRlclByb3RvVmlld1JlZiA9IFJlbmRlclByb3RvVmlld1JlZjtcclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBsaXN0IG9mIHNpYmxpbmcgTm9kZXMgdGhhdCBjYW4gYmUgbW92ZWQgYnkgdGhlIHtAbGluayBSZW5kZXJlcn0gaW5kZXBlbmRlbnRseSBvZlxyXG4gKiBvdGhlciBSZW5kZXIgRnJhZ21lbnRzLlxyXG4gKlxyXG4gKiBBbnkge0BsaW5rIFJlbmRlclZpZXd9IGhhcyBvbmUgUmVuZGVyIEZyYWdtZW50LlxyXG4gKlxyXG4gKiBBZGRpdGlvbmFsbHkgYW55IFZpZXcgd2l0aCBhbiBFbWJlZGRlZCBWaWV3IHRoYXQgY29udGFpbnMgYSB7QGxpbmsgTmdDb250ZW50IFZpZXcgUHJvamVjdGlvbn1cclxuICogcmVzdWx0cyBpbiBhZGRpdGlvbmFsIFJlbmRlciBGcmFnbWVudC5cclxuICovXHJcbi8qXHJcbiAgPGRpdj5mb288L2Rpdj5cclxuICB7e2Jhcn19XHJcblxyXG5cclxuICA8ZGl2PmZvbzwvZGl2PiAtPiB2aWV3IDEgLyBmcmFnbWVudCAxXHJcbiAgPHVsPlxyXG4gICAgPHRlbXBsYXRlIG5nLWZvcj5cclxuICAgICAgPGxpPnt7Zmd9fTwvbGk+IC0+IHZpZXcgMiAvIGZyYWdtZW50IDFcclxuICAgIDwvdGVtcGxhdGU+XHJcbiAgPC91bD5cclxuICB7e2Jhcn19XHJcblxyXG5cclxuICA8ZGl2PmZvbzwvZGl2PiAtPiB2aWV3IDEgLyBmcmFnbWVudCAxXHJcbiAgPHVsPlxyXG4gICAgPHRlbXBsYXRlIG5nLWlmPlxyXG4gICAgICA8bGk+PG5nLWNvbnRlbnQ+PC8+PC9saT4gLT4gdmlldyAxIC8gZnJhZ21lbnQgMlxyXG4gICAgPC90ZW1wbGF0ZT5cclxuICAgIDx0ZW1wbGF0ZSBuZy1mb3I+XHJcbiAgICAgIDxsaT48bmctY29udGVudD48Lz48L2xpPiAtPlxyXG4gICAgICA8bGk+PC9saT4gICAgICAgICAgICAgICAgLT4gdmlldyAxIC8gZnJhZ21lbnQgMiArIHZpZXcgMiAvIGZyYWdtZW50IDEuLm4tMVxyXG4gICAgPC90ZW1wbGF0ZT5cclxuICA8L3VsPlxyXG4gIHt7YmFyfX1cclxuICovXHJcbi8vIFRPRE8oaSk6IHJlZmFjdG9yIGludG8gYW4gaW50ZXJmYWNlXHJcbnZhciBSZW5kZXJGcmFnbWVudFJlZiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZW5kZXJGcmFnbWVudFJlZigpIHtcclxuICAgIH1cclxuICAgIHJldHVybiBSZW5kZXJGcmFnbWVudFJlZjtcclxufSkoKTtcclxuZXhwb3J0cy5SZW5kZXJGcmFnbWVudFJlZiA9IFJlbmRlckZyYWdtZW50UmVmO1xyXG4vKipcclxuICogUmVwcmVzZW50cyBhbiBBbmd1bGFyIFZpZXcgaW4gdGhlIFJlbmRlcmluZyBDb250ZXh0LlxyXG4gKlxyXG4gKiBgUmVuZGVyVmlld1JlZmAgc3BlY2lmaWVzIHRvIHRoZSB7QGxpbmsgUmVuZGVyZXJ9IHdoYXQgVmlldyB0byB1cGRhdGUgb3IgZGVzdHJveS5cclxuICpcclxuICogVW5saWtlIGEge0BsaW5rIFZpZXdSZWZ9IGF2YWlsYWJsZSBpbiB0aGUgQXBwbGljYXRpb24gQ29udGV4dCwgUmVuZGVyIFZpZXcgY29udGFpbnMgYWxsIHRoZVxyXG4gKiBzdGF0aWMgQ29tcG9uZW50IFZpZXdzIHRoYXQgaGF2ZSBiZWVuIHJlY3Vyc2l2ZWx5IG1lcmdlZCBpbnRvIGEgc2luZ2xlIFJlbmRlciBWaWV3LlxyXG4gKlxyXG4gKiBFYWNoIGBSZW5kZXJWaWV3UmVmYCBjb250YWlucyBvbmUgb3IgbW9yZSB7QGxpbmsgUmVuZGVyRnJhZ21lbnRSZWYgUmVuZGVyIEZyYWdtZW50c30sIHRoZXNlXHJcbiAqIEZyYWdtZW50cyBhcmUgY3JlYXRlZCwgaHlkcmF0ZWQsIGRlaHlkcmF0ZWQgYW5kIGRlc3Ryb3llZCBhcyBhIHNpbmdsZSB1bml0IHRvZ2V0aGVyIHdpdGggdGhlXHJcbiAqIFZpZXcuXHJcbiAqL1xyXG4vLyBUT0RPKGkpOiByZWZhY3RvciBpbnRvIGFuIGludGVyZmFjZVxyXG52YXIgUmVuZGVyVmlld1JlZiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZW5kZXJWaWV3UmVmKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJlbmRlclZpZXdSZWY7XHJcbn0pKCk7XHJcbmV4cG9ydHMuUmVuZGVyVmlld1JlZiA9IFJlbmRlclZpZXdSZWY7XHJcbi8qKlxyXG4gKiBDb250YWluZXIgY2xhc3MgcHJvZHVjZWQgYnkgYSB7QGxpbmsgUmVuZGVyZXJ9IHdoZW4gY3JlYXRpbmcgYSBSZW5kZXIgVmlldy5cclxuICpcclxuICogQW4gaW5zdGFuY2Ugb2YgYFJlbmRlclZpZXdXaXRoRnJhZ21lbnRzYCBjb250YWlucyBhIHtAbGluayBSZW5kZXJWaWV3UmVmfSBhbmQgYW4gYXJyYXkgb2ZcclxuICoge0BsaW5rIFJlbmRlckZyYWdtZW50UmVmfXMgYmVsb25naW5nIHRvIHRoaXMgUmVuZGVyIFZpZXcuXHJcbiAqL1xyXG4vLyBUT0RPKGkpOiByZWZhY3RvciB0aGlzIGJ5IFJlbmRlclZpZXdXaXRoRnJhZ21lbnRzIGFuZCBhZGRpbmcgZnJhZ21lbnRzIGRpcmVjdGx5IHRvIFJlbmRlclZpZXdSZWZcclxudmFyIFJlbmRlclZpZXdXaXRoRnJhZ21lbnRzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlbmRlclZpZXdXaXRoRnJhZ21lbnRzKFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlZmVyZW5jZSB0byB0aGUge0BsaW5rIFJlbmRlclZpZXdSZWZ9LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZpZXdSZWYsIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFycmF5IG9mIHtAbGluayBSZW5kZXJGcmFnbWVudFJlZn1zIG9yZGVyZWQgaW4gdGhlIGRlcHRoLWZpcnN0IG9yZGVyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZyYWdtZW50UmVmcykge1xyXG4gICAgICAgIHRoaXMudmlld1JlZiA9IHZpZXdSZWY7XHJcbiAgICAgICAgdGhpcy5mcmFnbWVudFJlZnMgPSBmcmFnbWVudFJlZnM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVuZGVyVmlld1dpdGhGcmFnbWVudHM7XHJcbn0pKCk7XHJcbmV4cG9ydHMuUmVuZGVyVmlld1dpdGhGcmFnbWVudHMgPSBSZW5kZXJWaWV3V2l0aEZyYWdtZW50cztcclxuLyoqXHJcbiAqIEluamVjdGFibGUgc2VydmljZSB0aGF0IHByb3ZpZGVzIGEgbG93LWxldmVsIGludGVyZmFjZSBmb3IgbW9kaWZ5aW5nIHRoZSBVSS5cclxuICpcclxuICogVXNlIHRoaXMgc2VydmljZSB0byBieXBhc3MgQW5ndWxhcidzIHRlbXBsYXRpbmcgYW5kIG1ha2UgY3VzdG9tIFVJIGNoYW5nZXMgdGhhdCBjYW4ndCBiZVxyXG4gKiBleHByZXNzZWQgZGVjbGFyYXRpdmVseS4gRm9yIGV4YW1wbGUgaWYgeW91IG5lZWQgdG8gc2V0IGEgcHJvcGVydHkgb3IgYW4gYXR0cmlidXRlIHdob3NlIG5hbWUgaXNcclxuICogbm90IHN0YXRpY2FsbHkga25vd24sIHVzZSB7QGxpbmsgI3NldEVsZW1lbnRQcm9wZXJ0eX0gb3Ige0BsaW5rICNzZXRFbGVtZW50QXR0cmlidXRlfVxyXG4gKiByZXNwZWN0aXZlbHkuXHJcbiAqXHJcbiAqIElmIHlvdSBhcmUgaW1wbGVtZW50aW5nIGEgY3VzdG9tIHJlbmRlcmVyLCB5b3UgbXVzdCBpbXBsZW1lbnQgdGhpcyBpbnRlcmZhY2UuXHJcbiAqXHJcbiAqIFRoZSBkZWZhdWx0IFJlbmRlcmVyIGltcGxlbWVudGF0aW9uIGlzIHtAbGluayBEb21SZW5kZXJlcn0uIEFsc28gc2VlIHtAbGluayBXZWJXb3JrZXJSZW5kZXJlcn0uXHJcbiAqL1xyXG52YXIgUmVuZGVyZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVuZGVyZXIoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVuZGVyZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuUmVuZGVyZXIgPSBSZW5kZXJlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgX19wYXJhbSA9ICh0aGlzICYmIHRoaXMuX19wYXJhbSkgfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn07XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIGFuaW1hdGlvbl9idWlsZGVyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvYW5pbWF0ZS9hbmltYXRpb25fYnVpbGRlcicpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBkb21fYWRhcHRlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZG9tL2RvbV9hZGFwdGVyJyk7XHJcbnZhciBldmVudF9tYW5hZ2VyXzEgPSByZXF1aXJlKCcuL2V2ZW50cy9ldmVudF9tYW5hZ2VyJyk7XHJcbnZhciBzaGFyZWRfc3R5bGVzX2hvc3RfMSA9IHJlcXVpcmUoJy4vc2hhcmVkX3N0eWxlc19ob3N0Jyk7XHJcbnZhciBwcm9maWxlXzEgPSByZXF1aXJlKCcuLi8uLi9wcm9maWxlL3Byb2ZpbGUnKTtcclxudmFyIGFwaV8xID0gcmVxdWlyZSgnLi4vYXBpJyk7XHJcbnZhciBkb21fdG9rZW5zXzEgPSByZXF1aXJlKCcuL2RvbV90b2tlbnMnKTtcclxudmFyIHZpZXdfZmFjdG9yeV8xID0gcmVxdWlyZSgnLi4vdmlld19mYWN0b3J5Jyk7XHJcbnZhciB2aWV3XzEgPSByZXF1aXJlKCcuLi92aWV3Jyk7XHJcbnZhciB1dGlsXzEgPSByZXF1aXJlKCcuL3V0aWwnKTtcclxudmFyIERvbVJlbmRlcmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhEb21SZW5kZXJlciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIERvbVJlbmRlcmVyKCkge1xyXG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfVxyXG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZVByb3RvVmlldyA9IGZ1bmN0aW9uIChjbWRzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyB2aWV3XzEuRGVmYXVsdFByb3RvVmlld1JlZihjbWRzKTtcclxuICAgIH07XHJcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUuZ2V0TmF0aXZlRWxlbWVudFN5bmMgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcclxuICAgICAgICByZXR1cm4gcmVzb2x2ZUludGVybmFsRG9tVmlldyhsb2NhdGlvbi5yZW5kZXJWaWV3KS5ib3VuZEVsZW1lbnRzW2xvY2F0aW9uLmJvdW5kRWxlbWVudEluZGV4XTtcclxuICAgIH07XHJcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUuZ2V0Um9vdE5vZGVzID0gZnVuY3Rpb24gKGZyYWdtZW50KSB7IHJldHVybiByZXNvbHZlSW50ZXJuYWxEb21GcmFnbWVudChmcmFnbWVudCk7IH07XHJcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUuYXR0YWNoRnJhZ21lbnRBZnRlckZyYWdtZW50ID0gZnVuY3Rpb24gKHByZXZpb3VzRnJhZ21lbnRSZWYsIGZyYWdtZW50UmVmKSB7XHJcbiAgICAgICAgdmFyIHByZXZpb3VzRnJhZ21lbnROb2RlcyA9IHJlc29sdmVJbnRlcm5hbERvbUZyYWdtZW50KHByZXZpb3VzRnJhZ21lbnRSZWYpO1xyXG4gICAgICAgIGlmIChwcmV2aW91c0ZyYWdtZW50Tm9kZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgc2libGluZyA9IHByZXZpb3VzRnJhZ21lbnROb2Rlc1twcmV2aW91c0ZyYWdtZW50Tm9kZXMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIHZhciBub2RlcyA9IHJlc29sdmVJbnRlcm5hbERvbUZyYWdtZW50KGZyYWdtZW50UmVmKTtcclxuICAgICAgICAgICAgbW92ZU5vZGVzQWZ0ZXJTaWJsaW5nKHNpYmxpbmcsIG5vZGVzKTtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRlTm9kZXNFbnRlcihub2Rlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSXRlcmF0ZXMgdGhyb3VnaCBhbGwgbm9kZXMgYmVpbmcgYWRkZWQgdG8gdGhlIERPTSBhbmQgYW5pbWF0ZXMgdGhlbSBpZiBuZWNlc3NhcnlcclxuICAgICAqIEBwYXJhbSBub2Rlc1xyXG4gICAgICovXHJcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUuYW5pbWF0ZU5vZGVzRW50ZXIgPSBmdW5jdGlvbiAobm9kZXMpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGVOb2RlRW50ZXIobm9kZXNbaV0pO1xyXG4gICAgfTtcclxuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5hdHRhY2hGcmFnbWVudEFmdGVyRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50UmVmLCBmcmFnbWVudFJlZikge1xyXG4gICAgICAgIHZhciBwYXJlbnRWaWV3ID0gcmVzb2x2ZUludGVybmFsRG9tVmlldyhlbGVtZW50UmVmLnJlbmRlclZpZXcpO1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gcGFyZW50Vmlldy5ib3VuZEVsZW1lbnRzW2VsZW1lbnRSZWYuYm91bmRFbGVtZW50SW5kZXhdO1xyXG4gICAgICAgIHZhciBub2RlcyA9IHJlc29sdmVJbnRlcm5hbERvbUZyYWdtZW50KGZyYWdtZW50UmVmKTtcclxuICAgICAgICBtb3ZlTm9kZXNBZnRlclNpYmxpbmcoZWxlbWVudCwgbm9kZXMpO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0ZU5vZGVzRW50ZXIobm9kZXMpO1xyXG4gICAgfTtcclxuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5oeWRyYXRlVmlldyA9IGZ1bmN0aW9uICh2aWV3UmVmKSB7IHJlc29sdmVJbnRlcm5hbERvbVZpZXcodmlld1JlZikuaHlkcmF0ZSgpOyB9O1xyXG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLmRlaHlkcmF0ZVZpZXcgPSBmdW5jdGlvbiAodmlld1JlZikgeyByZXNvbHZlSW50ZXJuYWxEb21WaWV3KHZpZXdSZWYpLmRlaHlkcmF0ZSgpOyB9O1xyXG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZVRlbXBsYXRlQW5jaG9yID0gZnVuY3Rpb24gKGF0dHJOYW1lQW5kVmFsdWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRWxlbWVudCgnc2NyaXB0JywgYXR0ck5hbWVBbmRWYWx1ZXMpO1xyXG4gICAgfTtcclxuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBkb21fYWRhcHRlcl8xLkRPTS5jcmVhdGVUZXh0Tm9kZShsYW5nXzEuaXNQcmVzZW50KHZhbHVlKSA/IHZhbHVlIDogJycpOyB9O1xyXG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLmFwcGVuZENoaWxkID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQpIHsgZG9tX2FkYXB0ZXJfMS5ET00uYXBwZW5kQ2hpbGQocGFyZW50LCBjaGlsZCk7IH07XHJcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUuc2V0RWxlbWVudFByb3BlcnR5ID0gZnVuY3Rpb24gKGxvY2F0aW9uLCBwcm9wZXJ0eU5hbWUsIHByb3BlcnR5VmFsdWUpIHtcclxuICAgICAgICB2YXIgdmlldyA9IHJlc29sdmVJbnRlcm5hbERvbVZpZXcobG9jYXRpb24ucmVuZGVyVmlldyk7XHJcbiAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00uc2V0UHJvcGVydHkodmlldy5ib3VuZEVsZW1lbnRzW2xvY2F0aW9uLmJvdW5kRWxlbWVudEluZGV4XSwgcHJvcGVydHlOYW1lLCBwcm9wZXJ0eVZhbHVlKTtcclxuICAgIH07XHJcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUuc2V0RWxlbWVudEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChsb2NhdGlvbiwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVmFsdWUpIHtcclxuICAgICAgICB2YXIgdmlldyA9IHJlc29sdmVJbnRlcm5hbERvbVZpZXcobG9jYXRpb24ucmVuZGVyVmlldyk7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB2aWV3LmJvdW5kRWxlbWVudHNbbG9jYXRpb24uYm91bmRFbGVtZW50SW5kZXhdO1xyXG4gICAgICAgIHZhciBkYXNoQ2FzZWRBdHRyaWJ1dGVOYW1lID0gdXRpbF8xLmNhbWVsQ2FzZVRvRGFzaENhc2UoYXR0cmlidXRlTmFtZSk7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQoYXR0cmlidXRlVmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGRvbV9hZGFwdGVyXzEuRE9NLnNldEF0dHJpYnV0ZShlbGVtZW50LCBkYXNoQ2FzZWRBdHRyaWJ1dGVOYW1lLCBsYW5nXzEuc3RyaW5naWZ5KGF0dHJpYnV0ZVZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkb21fYWRhcHRlcl8xLkRPTS5yZW1vdmVBdHRyaWJ1dGUoZWxlbWVudCwgZGFzaENhc2VkQXR0cmlidXRlTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5zZXRFbGVtZW50Q2xhc3MgPSBmdW5jdGlvbiAobG9jYXRpb24sIGNsYXNzTmFtZSwgaXNBZGQpIHtcclxuICAgICAgICB2YXIgdmlldyA9IHJlc29sdmVJbnRlcm5hbERvbVZpZXcobG9jYXRpb24ucmVuZGVyVmlldyk7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB2aWV3LmJvdW5kRWxlbWVudHNbbG9jYXRpb24uYm91bmRFbGVtZW50SW5kZXhdO1xyXG4gICAgICAgIGlmIChpc0FkZCkge1xyXG4gICAgICAgICAgICBkb21fYWRhcHRlcl8xLkRPTS5hZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00ucmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLnNldEVsZW1lbnRTdHlsZSA9IGZ1bmN0aW9uIChsb2NhdGlvbiwgc3R5bGVOYW1lLCBzdHlsZVZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHZpZXcgPSByZXNvbHZlSW50ZXJuYWxEb21WaWV3KGxvY2F0aW9uLnJlbmRlclZpZXcpO1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gdmlldy5ib3VuZEVsZW1lbnRzW2xvY2F0aW9uLmJvdW5kRWxlbWVudEluZGV4XTtcclxuICAgICAgICB2YXIgZGFzaENhc2VkU3R5bGVOYW1lID0gdXRpbF8xLmNhbWVsQ2FzZVRvRGFzaENhc2Uoc3R5bGVOYW1lKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChzdHlsZVZhbHVlKSkge1xyXG4gICAgICAgICAgICBkb21fYWRhcHRlcl8xLkRPTS5zZXRTdHlsZShlbGVtZW50LCBkYXNoQ2FzZWRTdHlsZU5hbWUsIGxhbmdfMS5zdHJpbmdpZnkoc3R5bGVWYWx1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00ucmVtb3ZlU3R5bGUoZWxlbWVudCwgZGFzaENhc2VkU3R5bGVOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLmludm9rZUVsZW1lbnRNZXRob2QgPSBmdW5jdGlvbiAobG9jYXRpb24sIG1ldGhvZE5hbWUsIGFyZ3MpIHtcclxuICAgICAgICB2YXIgdmlldyA9IHJlc29sdmVJbnRlcm5hbERvbVZpZXcobG9jYXRpb24ucmVuZGVyVmlldyk7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB2aWV3LmJvdW5kRWxlbWVudHNbbG9jYXRpb24uYm91bmRFbGVtZW50SW5kZXhdO1xyXG4gICAgICAgIGRvbV9hZGFwdGVyXzEuRE9NLmludm9rZShlbGVtZW50LCBtZXRob2ROYW1lLCBhcmdzKTtcclxuICAgIH07XHJcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUuc2V0VGV4dCA9IGZ1bmN0aW9uICh2aWV3UmVmLCB0ZXh0Tm9kZUluZGV4LCB0ZXh0KSB7XHJcbiAgICAgICAgdmFyIHZpZXcgPSByZXNvbHZlSW50ZXJuYWxEb21WaWV3KHZpZXdSZWYpO1xyXG4gICAgICAgIGRvbV9hZGFwdGVyXzEuRE9NLnNldFRleHQodmlldy5ib3VuZFRleHROb2Rlc1t0ZXh0Tm9kZUluZGV4XSwgdGV4dCk7XHJcbiAgICB9O1xyXG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLnNldEV2ZW50RGlzcGF0Y2hlciA9IGZ1bmN0aW9uICh2aWV3UmVmLCBkaXNwYXRjaGVyKSB7XHJcbiAgICAgICAgcmVzb2x2ZUludGVybmFsRG9tVmlldyh2aWV3UmVmKS5zZXRFdmVudERpc3BhdGNoZXIoZGlzcGF0Y2hlcik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERvbVJlbmRlcmVyO1xyXG59KShhcGlfMS5SZW5kZXJlcik7XHJcbmV4cG9ydHMuRG9tUmVuZGVyZXIgPSBEb21SZW5kZXJlcjtcclxudmFyIERvbVJlbmRlcmVyXyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRG9tUmVuZGVyZXJfLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRG9tUmVuZGVyZXJfKF9ldmVudE1hbmFnZXIsIF9kb21TaGFyZWRTdHlsZXNIb3N0LCBfYW5pbWF0ZSwgZG9jdW1lbnQpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIgPSBfZXZlbnRNYW5hZ2VyO1xyXG4gICAgICAgIHRoaXMuX2RvbVNoYXJlZFN0eWxlc0hvc3QgPSBfZG9tU2hhcmVkU3R5bGVzSG9zdDtcclxuICAgICAgICB0aGlzLl9hbmltYXRlID0gX2FuaW1hdGU7XHJcbiAgICAgICAgdGhpcy5fY29tcG9uZW50Q21kcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLl9uYXRpdmVTaGFkb3dTdHlsZXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX2NyZWF0ZVJvb3RIb3N0Vmlld1Njb3BlID0gcHJvZmlsZV8xLnd0ZkNyZWF0ZVNjb3BlKCdEb21SZW5kZXJlciNjcmVhdGVSb290SG9zdFZpZXcoKScpO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9jcmVhdGVWaWV3U2NvcGUgPSBwcm9maWxlXzEud3RmQ3JlYXRlU2NvcGUoJ0RvbVJlbmRlcmVyI2NyZWF0ZVZpZXcoKScpO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9kZXRhY2hGcmFnbWVudFNjb3BlID0gcHJvZmlsZV8xLnd0ZkNyZWF0ZVNjb3BlKCdEb21SZW5kZXJlciNkZXRhY2hGcmFnbWVudCgpJyk7XHJcbiAgICAgICAgdGhpcy5fZG9jdW1lbnQgPSBkb2N1bWVudDtcclxuICAgIH1cclxuICAgIERvbVJlbmRlcmVyXy5wcm90b3R5cGUucmVnaXN0ZXJDb21wb25lbnRUZW1wbGF0ZSA9IGZ1bmN0aW9uICh0ZW1wbGF0ZUlkLCBjb21tYW5kcywgc3R5bGVzLCBuYXRpdmVTaGFkb3cpIHtcclxuICAgICAgICB0aGlzLl9jb21wb25lbnRDbWRzLnNldCh0ZW1wbGF0ZUlkLCBjb21tYW5kcyk7XHJcbiAgICAgICAgaWYgKG5hdGl2ZVNoYWRvdykge1xyXG4gICAgICAgICAgICB0aGlzLl9uYXRpdmVTaGFkb3dTdHlsZXMuc2V0KHRlbXBsYXRlSWQsIHN0eWxlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9kb21TaGFyZWRTdHlsZXNIb3N0LmFkZFN0eWxlcyhzdHlsZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEb21SZW5kZXJlcl8ucHJvdG90eXBlLnJlc29sdmVDb21wb25lbnRUZW1wbGF0ZSA9IGZ1bmN0aW9uICh0ZW1wbGF0ZUlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudENtZHMuZ2V0KHRlbXBsYXRlSWQpO1xyXG4gICAgfTtcclxuICAgIERvbVJlbmRlcmVyXy5wcm90b3R5cGUuY3JlYXRlUm9vdEhvc3RWaWV3ID0gZnVuY3Rpb24gKGhvc3RQcm90b1ZpZXdSZWYsIGZyYWdtZW50Q291bnQsIGhvc3RFbGVtZW50U2VsZWN0b3IpIHtcclxuICAgICAgICB2YXIgcyA9IHRoaXMuX2NyZWF0ZVJvb3RIb3N0Vmlld1Njb3BlKCk7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb21fYWRhcHRlcl8xLkRPTS5xdWVyeVNlbGVjdG9yKHRoaXMuX2RvY3VtZW50LCBob3N0RWxlbWVudFNlbGVjdG9yKTtcclxuICAgICAgICBpZiAobGFuZ18xLmlzQmxhbmsoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgcHJvZmlsZV8xLnd0ZkxlYXZlKHMpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oXCJUaGUgc2VsZWN0b3IgXFxcIlwiICsgaG9zdEVsZW1lbnRTZWxlY3RvciArIFwiXFxcIiBkaWQgbm90IG1hdGNoIGFueSBlbGVtZW50c1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb2ZpbGVfMS53dGZMZWF2ZShzLCB0aGlzLl9jcmVhdGVWaWV3KGhvc3RQcm90b1ZpZXdSZWYsIGVsZW1lbnQpKTtcclxuICAgIH07XHJcbiAgICBEb21SZW5kZXJlcl8ucHJvdG90eXBlLmNyZWF0ZVZpZXcgPSBmdW5jdGlvbiAocHJvdG9WaWV3UmVmLCBmcmFnbWVudENvdW50KSB7XHJcbiAgICAgICAgdmFyIHMgPSB0aGlzLl9jcmVhdGVWaWV3U2NvcGUoKTtcclxuICAgICAgICByZXR1cm4gcHJvZmlsZV8xLnd0ZkxlYXZlKHMsIHRoaXMuX2NyZWF0ZVZpZXcocHJvdG9WaWV3UmVmLCBudWxsKSk7XHJcbiAgICB9O1xyXG4gICAgRG9tUmVuZGVyZXJfLnByb3RvdHlwZS5fY3JlYXRlVmlldyA9IGZ1bmN0aW9uIChwcm90b1ZpZXdSZWYsIGlucGxhY2VFbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIHZpZXcgPSB2aWV3X2ZhY3RvcnlfMS5jcmVhdGVSZW5kZXJWaWV3KHByb3RvVmlld1JlZi5jbWRzLCBpbnBsYWNlRWxlbWVudCwgdGhpcyk7XHJcbiAgICAgICAgdmFyIHNkUm9vdHMgPSB2aWV3Lm5hdGl2ZVNoYWRvd1Jvb3RzO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2RSb290cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9kb21TaGFyZWRTdHlsZXNIb3N0LmFkZEhvc3Qoc2RSb290c1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgYXBpXzEuUmVuZGVyVmlld1dpdGhGcmFnbWVudHModmlldywgdmlldy5mcmFnbWVudHMpO1xyXG4gICAgfTtcclxuICAgIERvbVJlbmRlcmVyXy5wcm90b3R5cGUuZGVzdHJveVZpZXcgPSBmdW5jdGlvbiAodmlld1JlZikge1xyXG4gICAgICAgIHZhciB2aWV3ID0gdmlld1JlZjtcclxuICAgICAgICB2YXIgc2RSb290cyA9IHZpZXcubmF0aXZlU2hhZG93Um9vdHM7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZFJvb3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RvbVNoYXJlZFN0eWxlc0hvc3QucmVtb3ZlSG9zdChzZFJvb3RzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRG9tUmVuZGVyZXJfLnByb3RvdHlwZS5hbmltYXRlTm9kZUVudGVyID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICBpZiAoZG9tX2FkYXB0ZXJfMS5ET00uaXNFbGVtZW50Tm9kZShub2RlKSAmJiBkb21fYWRhcHRlcl8xLkRPTS5oYXNDbGFzcyhub2RlLCAnbmctYW5pbWF0ZScpKSB7XHJcbiAgICAgICAgICAgIGRvbV9hZGFwdGVyXzEuRE9NLmFkZENsYXNzKG5vZGUsICduZy1lbnRlcicpO1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRlLmNzcygpXHJcbiAgICAgICAgICAgICAgICAuYWRkQW5pbWF0aW9uQ2xhc3MoJ25nLWVudGVyLWFjdGl2ZScpXHJcbiAgICAgICAgICAgICAgICAuc3RhcnQobm9kZSlcclxuICAgICAgICAgICAgICAgIC5vbkNvbXBsZXRlKGZ1bmN0aW9uICgpIHsgZG9tX2FkYXB0ZXJfMS5ET00ucmVtb3ZlQ2xhc3Mobm9kZSwgJ25nLWVudGVyJyk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEb21SZW5kZXJlcl8ucHJvdG90eXBlLmFuaW1hdGVOb2RlTGVhdmUgPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIGlmIChkb21fYWRhcHRlcl8xLkRPTS5pc0VsZW1lbnROb2RlKG5vZGUpICYmIGRvbV9hZGFwdGVyXzEuRE9NLmhhc0NsYXNzKG5vZGUsICduZy1hbmltYXRlJykpIHtcclxuICAgICAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00uYWRkQ2xhc3Mobm9kZSwgJ25nLWxlYXZlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGUuY3NzKClcclxuICAgICAgICAgICAgICAgIC5hZGRBbmltYXRpb25DbGFzcygnbmctbGVhdmUtYWN0aXZlJylcclxuICAgICAgICAgICAgICAgIC5zdGFydChub2RlKVxyXG4gICAgICAgICAgICAgICAgLm9uQ29tcGxldGUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00ucmVtb3ZlQ2xhc3Mobm9kZSwgJ25nLWxlYXZlJyk7XHJcbiAgICAgICAgICAgICAgICBkb21fYWRhcHRlcl8xLkRPTS5yZW1vdmUobm9kZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00ucmVtb3ZlKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEb21SZW5kZXJlcl8ucHJvdG90eXBlLmRldGFjaEZyYWdtZW50ID0gZnVuY3Rpb24gKGZyYWdtZW50UmVmKSB7XHJcbiAgICAgICAgdmFyIHMgPSB0aGlzLl9kZXRhY2hGcmFnbWVudFNjb3BlKCk7XHJcbiAgICAgICAgdmFyIGZyYWdtZW50Tm9kZXMgPSByZXNvbHZlSW50ZXJuYWxEb21GcmFnbWVudChmcmFnbWVudFJlZik7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmcmFnbWVudE5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZU5vZGVMZWF2ZShmcmFnbWVudE5vZGVzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJvZmlsZV8xLnd0ZkxlYXZlKHMpO1xyXG4gICAgfTtcclxuICAgIERvbVJlbmRlcmVyXy5wcm90b3R5cGUuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChuYW1lLCBhdHRyTmFtZUFuZFZhbHVlcykge1xyXG4gICAgICAgIHZhciBlbCA9IGRvbV9hZGFwdGVyXzEuRE9NLmNyZWF0ZUVsZW1lbnQobmFtZSk7XHJcbiAgICAgICAgdGhpcy5fc2V0QXR0cmlidXRlcyhlbCwgYXR0ck5hbWVBbmRWYWx1ZXMpO1xyXG4gICAgICAgIHJldHVybiBlbDtcclxuICAgIH07XHJcbiAgICBEb21SZW5kZXJlcl8ucHJvdG90eXBlLm1lcmdlRWxlbWVudCA9IGZ1bmN0aW9uIChleGlzdGluZywgYXR0ck5hbWVBbmRWYWx1ZXMpIHtcclxuICAgICAgICBkb21fYWRhcHRlcl8xLkRPTS5jbGVhck5vZGVzKGV4aXN0aW5nKTtcclxuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVzKGV4aXN0aW5nLCBhdHRyTmFtZUFuZFZhbHVlcyk7XHJcbiAgICB9O1xyXG4gICAgRG9tUmVuZGVyZXJfLnByb3RvdHlwZS5fc2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uIChub2RlLCBhdHRyTmFtZUFuZFZhbHVlcykge1xyXG4gICAgICAgIGZvciAodmFyIGF0dHJJZHggPSAwOyBhdHRySWR4IDwgYXR0ck5hbWVBbmRWYWx1ZXMubGVuZ3RoOyBhdHRySWR4ICs9IDIpIHtcclxuICAgICAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00uc2V0QXR0cmlidXRlKG5vZGUsIGF0dHJOYW1lQW5kVmFsdWVzW2F0dHJJZHhdLCBhdHRyTmFtZUFuZFZhbHVlc1thdHRySWR4ICsgMV0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEb21SZW5kZXJlcl8ucHJvdG90eXBlLmNyZWF0ZVJvb3RDb250ZW50SW5zZXJ0aW9uUG9pbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGRvbV9hZGFwdGVyXzEuRE9NLmNyZWF0ZUNvbW1lbnQoJ3Jvb3QtY29udGVudC1pbnNlcnRpb24tcG9pbnQnKTtcclxuICAgIH07XHJcbiAgICBEb21SZW5kZXJlcl8ucHJvdG90eXBlLmNyZWF0ZVNoYWRvd1Jvb3QgPSBmdW5jdGlvbiAoaG9zdCwgdGVtcGxhdGVJZCkge1xyXG4gICAgICAgIHZhciBzciA9IGRvbV9hZGFwdGVyXzEuRE9NLmNyZWF0ZVNoYWRvd1Jvb3QoaG9zdCk7XHJcbiAgICAgICAgdmFyIHN0eWxlcyA9IHRoaXMuX25hdGl2ZVNoYWRvd1N0eWxlcy5nZXQodGVtcGxhdGVJZCk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00uYXBwZW5kQ2hpbGQoc3IsIGRvbV9hZGFwdGVyXzEuRE9NLmNyZWF0ZVN0eWxlRWxlbWVudChzdHlsZXNbaV0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNyO1xyXG4gICAgfTtcclxuICAgIERvbVJlbmRlcmVyXy5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnROYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci5hZGRFdmVudExpc3RlbmVyKGVsZW1lbnQsIGV2ZW50TmFtZSwgZGVjb3JhdGVQcmV2ZW50RGVmYXVsdChjYWxsYmFjaykpO1xyXG4gICAgfTtcclxuICAgIERvbVJlbmRlcmVyXy5wcm90b3R5cGUuZ2xvYmFsT24gPSBmdW5jdGlvbiAodGFyZ2V0LCBldmVudE5hbWUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50TWFuYWdlci5hZGRHbG9iYWxFdmVudExpc3RlbmVyKHRhcmdldCwgZXZlbnROYW1lLCBkZWNvcmF0ZVByZXZlbnREZWZhdWx0KGNhbGxiYWNrKSk7XHJcbiAgICB9O1xyXG4gICAgRG9tUmVuZGVyZXJfID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgZGlfMS5JbmplY3RhYmxlKCksXHJcbiAgICAgICAgX19wYXJhbSgzLCBkaV8xLkluamVjdChkb21fdG9rZW5zXzEuRE9DVU1FTlQpKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbZXZlbnRfbWFuYWdlcl8xLkV2ZW50TWFuYWdlciwgc2hhcmVkX3N0eWxlc19ob3N0XzEuRG9tU2hhcmVkU3R5bGVzSG9zdCwgYW5pbWF0aW9uX2J1aWxkZXJfMS5BbmltYXRpb25CdWlsZGVyLCBPYmplY3RdKVxyXG4gICAgXSwgRG9tUmVuZGVyZXJfKTtcclxuICAgIHJldHVybiBEb21SZW5kZXJlcl87XHJcbn0pKERvbVJlbmRlcmVyKTtcclxuZXhwb3J0cy5Eb21SZW5kZXJlcl8gPSBEb21SZW5kZXJlcl87XHJcbmZ1bmN0aW9uIHJlc29sdmVJbnRlcm5hbERvbVZpZXcodmlld1JlZikge1xyXG4gICAgcmV0dXJuIHZpZXdSZWY7XHJcbn1cclxuZnVuY3Rpb24gcmVzb2x2ZUludGVybmFsRG9tRnJhZ21lbnQoZnJhZ21lbnRSZWYpIHtcclxuICAgIHJldHVybiBmcmFnbWVudFJlZi5ub2RlcztcclxufVxyXG5mdW5jdGlvbiBtb3ZlTm9kZXNBZnRlclNpYmxpbmcoc2libGluZywgbm9kZXMpIHtcclxuICAgIGlmIChub2Rlcy5sZW5ndGggPiAwICYmIGxhbmdfMS5pc1ByZXNlbnQoZG9tX2FkYXB0ZXJfMS5ET00ucGFyZW50RWxlbWVudChzaWJsaW5nKSkpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGRvbV9hZGFwdGVyXzEuRE9NLmluc2VydEJlZm9yZShzaWJsaW5nLCBub2Rlc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRvbV9hZGFwdGVyXzEuRE9NLmluc2VydEJlZm9yZShub2Rlc1swXSwgc2libGluZyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbW92ZUNoaWxkTm9kZXMoc291cmNlLCB0YXJnZXQpIHtcclxuICAgIHZhciBjdXJyQ2hpbGQgPSBkb21fYWRhcHRlcl8xLkRPTS5maXJzdENoaWxkKHNvdXJjZSk7XHJcbiAgICB3aGlsZSAobGFuZ18xLmlzUHJlc2VudChjdXJyQ2hpbGQpKSB7XHJcbiAgICAgICAgdmFyIG5leHRDaGlsZCA9IGRvbV9hZGFwdGVyXzEuRE9NLm5leHRTaWJsaW5nKGN1cnJDaGlsZCk7XHJcbiAgICAgICAgZG9tX2FkYXB0ZXJfMS5ET00uYXBwZW5kQ2hpbGQodGFyZ2V0LCBjdXJyQ2hpbGQpO1xyXG4gICAgICAgIGN1cnJDaGlsZCA9IG5leHRDaGlsZDtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBkZWNvcmF0ZVByZXZlbnREZWZhdWx0KGV2ZW50SGFuZGxlcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHZhciBhbGxvd0RlZmF1bHRCZWhhdmlvciA9IGV2ZW50SGFuZGxlcihldmVudCk7XHJcbiAgICAgICAgaWYgKCFhbGxvd0RlZmF1bHRCZWhhdmlvcikge1xyXG4gICAgICAgICAgICAvLyBUT0RPKHRib3NjaCk6IG1vdmUgcHJldmVudERlZmF1bHQgaW50byBldmVudCBwbHVnaW5zLi4uXHJcbiAgICAgICAgICAgIGRvbV9hZGFwdGVyXzEuRE9NLnByZXZlbnREZWZhdWx0KGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRvbV9yZW5kZXJlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxuLyoqXHJcbiAqIEEgREkgVG9rZW4gcmVwcmVzZW50aW5nIHRoZSBtYWluIHJlbmRlcmluZyBjb250ZXh0LiBJbiBhIGJyb3dzZXIgdGhpcyBpcyB0aGUgRE9NIERvY3VtZW50LlxyXG4gKlxyXG4gKiBOb3RlOiBEb2N1bWVudCBtaWdodCBub3QgYmUgYXZhaWxhYmxlIGluIHRoZSBBcHBsaWNhdGlvbiBDb250ZXh0IHdoZW4gQXBwbGljYXRpb24gYW5kIFJlbmRlcmluZ1xyXG4gKiBDb250ZXh0cyBhcmUgbm90IHRoZSBzYW1lIChlLmcuIHdoZW4gcnVubmluZyB0aGUgYXBwbGljYXRpb24gaW50byBhIFdlYiBXb3JrZXIpLlxyXG4gKi9cclxuZXhwb3J0cy5ET0NVTUVOVCA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBkaV8xLk9wYXF1ZVRva2VuKCdEb2N1bWVudFRva2VuJykpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb21fdG9rZW5zLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKG8pKSB8fCBvOyB9LCB0YXJnZXQpO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSkpLCB2b2lkIDA7IH0sIHZvaWQgMCk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5LCBvKSkgfHwgbzsgfSwgZGVzYyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG52YXIgX19wYXJhbSA9ICh0aGlzICYmIHRoaXMuX19wYXJhbSkgfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn07XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgZXhjZXB0aW9uc18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2V4Y2VwdGlvbnMnKTtcclxudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9jb2xsZWN0aW9uJyk7XHJcbnZhciBkb21fYWRhcHRlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZG9tL2RvbV9hZGFwdGVyJyk7XHJcbnZhciBuZ196b25lXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS96b25lL25nX3pvbmUnKTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG5leHBvcnRzLkVWRU5UX01BTkFHRVJfUExVR0lOUyA9IGxhbmdfMS5DT05TVF9FWFBSKG5ldyBkaV8xLk9wYXF1ZVRva2VuKFwiRXZlbnRNYW5hZ2VyUGx1Z2luc1wiKSk7XHJcbnZhciBFdmVudE1hbmFnZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRXZlbnRNYW5hZ2VyKHBsdWdpbnMsIF96b25lKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl96b25lID0gX3pvbmU7XHJcbiAgICAgICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwLm1hbmFnZXIgPSBfdGhpczsgfSk7XHJcbiAgICAgICAgdGhpcy5fcGx1Z2lucyA9IGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5yZXZlcnNlZChwbHVnaW5zKTtcclxuICAgIH1cclxuICAgIEV2ZW50TWFuYWdlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICB2YXIgcGx1Z2luID0gdGhpcy5fZmluZFBsdWdpbkZvcihldmVudE5hbWUpO1xyXG4gICAgICAgIHBsdWdpbi5hZGRFdmVudExpc3RlbmVyKGVsZW1lbnQsIGV2ZW50TmFtZSwgaGFuZGxlcik7XHJcbiAgICB9O1xyXG4gICAgRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5hZGRHbG9iYWxFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHRhcmdldCwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgdmFyIHBsdWdpbiA9IHRoaXMuX2ZpbmRQbHVnaW5Gb3IoZXZlbnROYW1lKTtcclxuICAgICAgICByZXR1cm4gcGx1Z2luLmFkZEdsb2JhbEV2ZW50TGlzdGVuZXIodGFyZ2V0LCBldmVudE5hbWUsIGhhbmRsZXIpO1xyXG4gICAgfTtcclxuICAgIEV2ZW50TWFuYWdlci5wcm90b3R5cGUuZ2V0Wm9uZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3pvbmU7IH07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBFdmVudE1hbmFnZXIucHJvdG90eXBlLl9maW5kUGx1Z2luRm9yID0gZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xyXG4gICAgICAgIHZhciBwbHVnaW5zID0gdGhpcy5fcGx1Z2lucztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHBsdWdpbiA9IHBsdWdpbnNbaV07XHJcbiAgICAgICAgICAgIGlmIChwbHVnaW4uc3VwcG9ydHMoZXZlbnROYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBsdWdpbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oXCJObyBldmVudCBtYW5hZ2VyIHBsdWdpbiBmb3VuZCBmb3IgZXZlbnQgXCIgKyBldmVudE5hbWUpO1xyXG4gICAgfTtcclxuICAgIEV2ZW50TWFuYWdlciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLFxyXG4gICAgICAgIF9fcGFyYW0oMCwgZGlfMS5JbmplY3QoZXhwb3J0cy5FVkVOVF9NQU5BR0VSX1BMVUdJTlMpKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbQXJyYXksIG5nX3pvbmVfMS5OZ1pvbmVdKVxyXG4gICAgXSwgRXZlbnRNYW5hZ2VyKTtcclxuICAgIHJldHVybiBFdmVudE1hbmFnZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuRXZlbnRNYW5hZ2VyID0gRXZlbnRNYW5hZ2VyO1xyXG52YXIgRXZlbnRNYW5hZ2VyUGx1Z2luID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEV2ZW50TWFuYWdlclBsdWdpbigpIHtcclxuICAgIH1cclxuICAgIC8vIFRoYXQgaXMgZXF1aXZhbGVudCB0byBoYXZpbmcgc3VwcG9ydGluZyAkZXZlbnQudGFyZ2V0XHJcbiAgICBFdmVudE1hbmFnZXJQbHVnaW4ucHJvdG90eXBlLnN1cHBvcnRzID0gZnVuY3Rpb24gKGV2ZW50TmFtZSkgeyByZXR1cm4gZmFsc2U7IH07XHJcbiAgICBFdmVudE1hbmFnZXJQbHVnaW4ucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgdGhyb3cgXCJub3QgaW1wbGVtZW50ZWRcIjtcclxuICAgIH07XHJcbiAgICBFdmVudE1hbmFnZXJQbHVnaW4ucHJvdG90eXBlLmFkZEdsb2JhbEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgdGhyb3cgXCJub3QgaW1wbGVtZW50ZWRcIjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRXZlbnRNYW5hZ2VyUGx1Z2luO1xyXG59KSgpO1xyXG5leHBvcnRzLkV2ZW50TWFuYWdlclBsdWdpbiA9IEV2ZW50TWFuYWdlclBsdWdpbjtcclxudmFyIERvbUV2ZW50c1BsdWdpbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRG9tRXZlbnRzUGx1Z2luLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRG9tRXZlbnRzUGx1Z2luKCkge1xyXG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfVxyXG4gICAgLy8gVGhpcyBwbHVnaW4gc2hvdWxkIGNvbWUgbGFzdCBpbiB0aGUgbGlzdCBvZiBwbHVnaW5zLCBiZWNhdXNlIGl0IGFjY2VwdHMgYWxsXHJcbiAgICAvLyBldmVudHMuXHJcbiAgICBEb21FdmVudHNQbHVnaW4ucHJvdG90eXBlLnN1cHBvcnRzID0gZnVuY3Rpb24gKGV2ZW50TmFtZSkgeyByZXR1cm4gdHJ1ZTsgfTtcclxuICAgIERvbUV2ZW50c1BsdWdpbi5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICB2YXIgem9uZSA9IHRoaXMubWFuYWdlci5nZXRab25lKCk7XHJcbiAgICAgICAgdmFyIG91dHNpZGVIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiB6b25lLnJ1bihmdW5jdGlvbiAoKSB7IHJldHVybiBoYW5kbGVyKGV2ZW50KTsgfSk7IH07XHJcbiAgICAgICAgdGhpcy5tYW5hZ2VyLmdldFpvbmUoKS5ydW5PdXRzaWRlQW5ndWxhcihmdW5jdGlvbiAoKSB7IGRvbV9hZGFwdGVyXzEuRE9NLm9uKGVsZW1lbnQsIGV2ZW50TmFtZSwgb3V0c2lkZUhhbmRsZXIpOyB9KTtcclxuICAgIH07XHJcbiAgICBEb21FdmVudHNQbHVnaW4ucHJvdG90eXBlLmFkZEdsb2JhbEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodGFyZ2V0LCBldmVudE5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvbV9hZGFwdGVyXzEuRE9NLmdldEdsb2JhbEV2ZW50VGFyZ2V0KHRhcmdldCk7XHJcbiAgICAgICAgdmFyIHpvbmUgPSB0aGlzLm1hbmFnZXIuZ2V0Wm9uZSgpO1xyXG4gICAgICAgIHZhciBvdXRzaWRlSGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gem9uZS5ydW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gaGFuZGxlcihldmVudCk7IH0pOyB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXIuZ2V0Wm9uZSgpLnJ1bk91dHNpZGVBbmd1bGFyKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvbV9hZGFwdGVyXzEuRE9NLm9uQW5kQ2FuY2VsKGVsZW1lbnQsIGV2ZW50TmFtZSwgb3V0c2lkZUhhbmRsZXIpOyB9KTtcclxuICAgIH07XHJcbiAgICBEb21FdmVudHNQbHVnaW4gPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcclxuICAgIF0sIERvbUV2ZW50c1BsdWdpbik7XHJcbiAgICByZXR1cm4gRG9tRXZlbnRzUGx1Z2luO1xyXG59KShFdmVudE1hbmFnZXJQbHVnaW4pO1xyXG5leHBvcnRzLkRvbUV2ZW50c1BsdWdpbiA9IERvbUV2ZW50c1BsdWdpbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRfbWFuYWdlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGV2ZW50X21hbmFnZXJfMSA9IHJlcXVpcmUoJy4vZXZlbnRfbWFuYWdlcicpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIF9ldmVudE5hbWVzID0ge1xyXG4gICAgLy8gcGFuXHJcbiAgICAncGFuJzogdHJ1ZSxcclxuICAgICdwYW5zdGFydCc6IHRydWUsXHJcbiAgICAncGFubW92ZSc6IHRydWUsXHJcbiAgICAncGFuZW5kJzogdHJ1ZSxcclxuICAgICdwYW5jYW5jZWwnOiB0cnVlLFxyXG4gICAgJ3BhbmxlZnQnOiB0cnVlLFxyXG4gICAgJ3BhbnJpZ2h0JzogdHJ1ZSxcclxuICAgICdwYW51cCc6IHRydWUsXHJcbiAgICAncGFuZG93bic6IHRydWUsXHJcbiAgICAvLyBwaW5jaFxyXG4gICAgJ3BpbmNoJzogdHJ1ZSxcclxuICAgICdwaW5jaHN0YXJ0JzogdHJ1ZSxcclxuICAgICdwaW5jaG1vdmUnOiB0cnVlLFxyXG4gICAgJ3BpbmNoZW5kJzogdHJ1ZSxcclxuICAgICdwaW5jaGNhbmNlbCc6IHRydWUsXHJcbiAgICAncGluY2hpbic6IHRydWUsXHJcbiAgICAncGluY2hvdXQnOiB0cnVlLFxyXG4gICAgLy8gcHJlc3NcclxuICAgICdwcmVzcyc6IHRydWUsXHJcbiAgICAncHJlc3N1cCc6IHRydWUsXHJcbiAgICAvLyByb3RhdGVcclxuICAgICdyb3RhdGUnOiB0cnVlLFxyXG4gICAgJ3JvdGF0ZXN0YXJ0JzogdHJ1ZSxcclxuICAgICdyb3RhdGVtb3ZlJzogdHJ1ZSxcclxuICAgICdyb3RhdGVlbmQnOiB0cnVlLFxyXG4gICAgJ3JvdGF0ZWNhbmNlbCc6IHRydWUsXHJcbiAgICAvLyBzd2lwZVxyXG4gICAgJ3N3aXBlJzogdHJ1ZSxcclxuICAgICdzd2lwZWxlZnQnOiB0cnVlLFxyXG4gICAgJ3N3aXBlcmlnaHQnOiB0cnVlLFxyXG4gICAgJ3N3aXBldXAnOiB0cnVlLFxyXG4gICAgJ3N3aXBlZG93bic6IHRydWUsXHJcbiAgICAvLyB0YXBcclxuICAgICd0YXAnOiB0cnVlLFxyXG59O1xyXG52YXIgSGFtbWVyR2VzdHVyZXNQbHVnaW5Db21tb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEhhbW1lckdlc3R1cmVzUGx1Z2luQ29tbW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gSGFtbWVyR2VzdHVyZXNQbHVnaW5Db21tb24oKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICB9XHJcbiAgICBIYW1tZXJHZXN0dXJlc1BsdWdpbkNvbW1vbi5wcm90b3R5cGUuc3VwcG9ydHMgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XHJcbiAgICAgICAgZXZlbnROYW1lID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25fMS5TdHJpbmdNYXBXcmFwcGVyLmNvbnRhaW5zKF9ldmVudE5hbWVzLCBldmVudE5hbWUpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBIYW1tZXJHZXN0dXJlc1BsdWdpbkNvbW1vbjtcclxufSkoZXZlbnRfbWFuYWdlcl8xLkV2ZW50TWFuYWdlclBsdWdpbik7XHJcbmV4cG9ydHMuSGFtbWVyR2VzdHVyZXNQbHVnaW5Db21tb24gPSBIYW1tZXJHZXN0dXJlc1BsdWdpbkNvbW1vbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFtbWVyX2NvbW1vbi5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGhhbW1lcl9jb21tb25fMSA9IHJlcXVpcmUoJy4vaGFtbWVyX2NvbW1vbicpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBkaV8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZGknKTtcclxudmFyIEhhbW1lckdlc3R1cmVzUGx1Z2luID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhIYW1tZXJHZXN0dXJlc1BsdWdpbiwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEhhbW1lckdlc3R1cmVzUGx1Z2luKCkge1xyXG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfVxyXG4gICAgSGFtbWVyR2VzdHVyZXNQbHVnaW4ucHJvdG90eXBlLnN1cHBvcnRzID0gZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xyXG4gICAgICAgIGlmICghX3N1cGVyLnByb3RvdHlwZS5zdXBwb3J0cy5jYWxsKHRoaXMsIGV2ZW50TmFtZSkpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoIWxhbmdfMS5pc1ByZXNlbnQod2luZG93WydIYW1tZXInXSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKFwiSGFtbWVyLmpzIGlzIG5vdCBsb2FkZWQsIGNhbiBub3QgYmluZCBcIiArIGV2ZW50TmFtZSArIFwiIGV2ZW50XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbiAgICBIYW1tZXJHZXN0dXJlc1BsdWdpbi5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICB2YXIgem9uZSA9IHRoaXMubWFuYWdlci5nZXRab25lKCk7XHJcbiAgICAgICAgZXZlbnROYW1lID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgem9uZS5ydW5PdXRzaWRlQW5ndWxhcihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIENyZWF0aW5nIHRoZSBtYW5hZ2VyIGJpbmQgZXZlbnRzLCBtdXN0IGJlIGRvbmUgb3V0c2lkZSBvZiBhbmd1bGFyXHJcbiAgICAgICAgICAgIHZhciBtYyA9IG5ldyBIYW1tZXIoZWxlbWVudCk7XHJcbiAgICAgICAgICAgIG1jLmdldCgncGluY2gnKS5zZXQoeyBlbmFibGU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIG1jLmdldCgncm90YXRlJykuc2V0KHsgZW5hYmxlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICBtYy5vbihldmVudE5hbWUsIGZ1bmN0aW9uIChldmVudE9iaikgeyB6b25lLnJ1bihmdW5jdGlvbiAoKSB7IGhhbmRsZXIoZXZlbnRPYmopOyB9KTsgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSGFtbWVyR2VzdHVyZXNQbHVnaW4gPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBkaV8xLkluamVjdGFibGUoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcclxuICAgIF0sIEhhbW1lckdlc3R1cmVzUGx1Z2luKTtcclxuICAgIHJldHVybiBIYW1tZXJHZXN0dXJlc1BsdWdpbjtcclxufSkoaGFtbWVyX2NvbW1vbl8xLkhhbW1lckdlc3R1cmVzUGx1Z2luQ29tbW9uKTtcclxuZXhwb3J0cy5IYW1tZXJHZXN0dXJlc1BsdWdpbiA9IEhhbW1lckdlc3R1cmVzUGx1Z2luO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYW1tZXJfZ2VzdHVyZXMuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQobykpIHx8IG87IH0sIHRhcmdldCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZGVjb3JhdG9ycy5yZWR1Y2VSaWdodChmdW5jdGlvbihvLCBkKSB7IHJldHVybiAoZCAmJiBkKHRhcmdldCwga2V5KSksIHZvaWQgMDsgfSwgdm9pZCAwKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXksIG8pKSB8fCBvOyB9LCBkZXNjKTtcclxuICAgIH1cclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbnZhciBkb21fYWRhcHRlcl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZG9tL2RvbV9hZGFwdGVyJyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIGV2ZW50X21hbmFnZXJfMSA9IHJlcXVpcmUoJy4vZXZlbnRfbWFuYWdlcicpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBtb2RpZmllcktleXMgPSBbJ2FsdCcsICdjb250cm9sJywgJ21ldGEnLCAnc2hpZnQnXTtcclxudmFyIG1vZGlmaWVyS2V5R2V0dGVycyA9IHtcclxuICAgICdhbHQnOiBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50LmFsdEtleTsgfSxcclxuICAgICdjb250cm9sJzogZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBldmVudC5jdHJsS2V5OyB9LFxyXG4gICAgJ21ldGEnOiBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50Lm1ldGFLZXk7IH0sXHJcbiAgICAnc2hpZnQnOiBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50LnNoaWZ0S2V5OyB9XHJcbn07XHJcbnZhciBLZXlFdmVudHNQbHVnaW4gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEtleUV2ZW50c1BsdWdpbiwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEtleUV2ZW50c1BsdWdpbigpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgIH1cclxuICAgIEtleUV2ZW50c1BsdWdpbi5wcm90b3R5cGUuc3VwcG9ydHMgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQoS2V5RXZlbnRzUGx1Z2luLnBhcnNlRXZlbnROYW1lKGV2ZW50TmFtZSkpO1xyXG4gICAgfTtcclxuICAgIEtleUV2ZW50c1BsdWdpbi5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICB2YXIgcGFyc2VkRXZlbnQgPSBLZXlFdmVudHNQbHVnaW4ucGFyc2VFdmVudE5hbWUoZXZlbnROYW1lKTtcclxuICAgICAgICB2YXIgb3V0c2lkZUhhbmRsZXIgPSBLZXlFdmVudHNQbHVnaW4uZXZlbnRDYWxsYmFjayhlbGVtZW50LCBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5nZXQocGFyc2VkRXZlbnQsICdmdWxsS2V5JyksIGhhbmRsZXIsIHRoaXMubWFuYWdlci5nZXRab25lKCkpO1xyXG4gICAgICAgIHRoaXMubWFuYWdlci5nZXRab25lKCkucnVuT3V0c2lkZUFuZ3VsYXIoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBkb21fYWRhcHRlcl8xLkRPTS5vbihlbGVtZW50LCBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5nZXQocGFyc2VkRXZlbnQsICdkb21FdmVudE5hbWUnKSwgb3V0c2lkZUhhbmRsZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtleUV2ZW50c1BsdWdpbi5wYXJzZUV2ZW50TmFtZSA9IGZ1bmN0aW9uIChldmVudE5hbWUpIHtcclxuICAgICAgICB2YXIgcGFydHMgPSBldmVudE5hbWUudG9Mb3dlckNhc2UoKS5zcGxpdCgnLicpO1xyXG4gICAgICAgIHZhciBkb21FdmVudE5hbWUgPSBwYXJ0cy5zaGlmdCgpO1xyXG4gICAgICAgIGlmICgocGFydHMubGVuZ3RoID09PSAwKSB8fFxyXG4gICAgICAgICAgICAhKGxhbmdfMS5TdHJpbmdXcmFwcGVyLmVxdWFscyhkb21FdmVudE5hbWUsICdrZXlkb3duJykgfHxcclxuICAgICAgICAgICAgICAgIGxhbmdfMS5TdHJpbmdXcmFwcGVyLmVxdWFscyhkb21FdmVudE5hbWUsICdrZXl1cCcpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGtleSA9IEtleUV2ZW50c1BsdWdpbi5fbm9ybWFsaXplS2V5KHBhcnRzLnBvcCgpKTtcclxuICAgICAgICB2YXIgZnVsbEtleSA9ICcnO1xyXG4gICAgICAgIG1vZGlmaWVyS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb25fMS5MaXN0V3JhcHBlci5jb250YWlucyhwYXJ0cywgbW9kaWZpZXJOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLnJlbW92ZShwYXJ0cywgbW9kaWZpZXJOYW1lKTtcclxuICAgICAgICAgICAgICAgIGZ1bGxLZXkgKz0gbW9kaWZpZXJOYW1lICsgJy4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZnVsbEtleSArPSBrZXk7XHJcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCAhPSAwIHx8IGtleS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgLy8gcmV0dXJuaW5nIG51bGwgaW5zdGVhZCBvZiB0aHJvd2luZyB0byBsZXQgYW5vdGhlciBwbHVnaW4gcHJvY2VzcyB0aGUgZXZlbnRcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5jcmVhdGUoKTtcclxuICAgICAgICBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5zZXQocmVzdWx0LCAnZG9tRXZlbnROYW1lJywgZG9tRXZlbnROYW1lKTtcclxuICAgICAgICBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5zZXQocmVzdWx0LCAnZnVsbEtleScsIGZ1bGxLZXkpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgS2V5RXZlbnRzUGx1Z2luLmdldEV2ZW50RnVsbEtleSA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHZhciBmdWxsS2V5ID0gJyc7XHJcbiAgICAgICAgdmFyIGtleSA9IGRvbV9hZGFwdGVyXzEuRE9NLmdldEV2ZW50S2V5KGV2ZW50KTtcclxuICAgICAgICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBpZiAobGFuZ18xLlN0cmluZ1dyYXBwZXIuZXF1YWxzKGtleSwgJyAnKSkge1xyXG4gICAgICAgICAgICBrZXkgPSAnc3BhY2UnOyAvLyBmb3IgcmVhZGFiaWxpdHlcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGFuZ18xLlN0cmluZ1dyYXBwZXIuZXF1YWxzKGtleSwgJy4nKSkge1xyXG4gICAgICAgICAgICBrZXkgPSAnZG90JzsgLy8gYmVjYXVzZSAnLicgaXMgdXNlZCBhcyBhIHNlcGFyYXRvciBpbiBldmVudCBuYW1lc1xyXG4gICAgICAgIH1cclxuICAgICAgICBtb2RpZmllcktleXMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXJOYW1lKSB7XHJcbiAgICAgICAgICAgIGlmIChtb2RpZmllck5hbWUgIT0ga2V5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9kaWZpZXJHZXR0ZXIgPSBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5nZXQobW9kaWZpZXJLZXlHZXR0ZXJzLCBtb2RpZmllck5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGlmaWVyR2V0dGVyKGV2ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bGxLZXkgKz0gbW9kaWZpZXJOYW1lICsgJy4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZnVsbEtleSArPSBrZXk7XHJcbiAgICAgICAgcmV0dXJuIGZ1bGxLZXk7XHJcbiAgICB9O1xyXG4gICAgS2V5RXZlbnRzUGx1Z2luLmV2ZW50Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZWxlbWVudCwgZnVsbEtleSwgaGFuZGxlciwgem9uZSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKGxhbmdfMS5TdHJpbmdXcmFwcGVyLmVxdWFscyhLZXlFdmVudHNQbHVnaW4uZ2V0RXZlbnRGdWxsS2V5KGV2ZW50KSwgZnVsbEtleSkpIHtcclxuICAgICAgICAgICAgICAgIHpvbmUucnVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhhbmRsZXIoZXZlbnQpOyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgS2V5RXZlbnRzUGx1Z2luLl9ub3JtYWxpemVLZXkgPSBmdW5jdGlvbiAoa2V5TmFtZSkge1xyXG4gICAgICAgIC8vIFRPRE86IHN3aXRjaCB0byBhIFN0cmluZ01hcCBpZiB0aGUgbWFwcGluZyBncm93cyB0b28gbXVjaFxyXG4gICAgICAgIHN3aXRjaCAoa2V5TmFtZSkge1xyXG4gICAgICAgICAgICBjYXNlICdlc2MnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdlc2NhcGUnO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleU5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEtleUV2ZW50c1BsdWdpbiA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgS2V5RXZlbnRzUGx1Z2luKTtcclxuICAgIHJldHVybiBLZXlFdmVudHNQbHVnaW47XHJcbn0pKGV2ZW50X21hbmFnZXJfMS5FdmVudE1hbmFnZXJQbHVnaW4pO1xyXG5leHBvcnRzLktleUV2ZW50c1BsdWdpbiA9IEtleUV2ZW50c1BsdWdpbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2V5X2V2ZW50cy5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIF9fcGFyYW0gPSAodGhpcyAmJiB0aGlzLl9fcGFyYW0pIHx8IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59O1xyXG52YXIgZG9tX2FkYXB0ZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RvbS9kb21fYWRhcHRlcicpO1xyXG52YXIgZGlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RpJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgZG9tX3Rva2Vuc18xID0gcmVxdWlyZSgnLi9kb21fdG9rZW5zJyk7XHJcbnZhciBTaGFyZWRTdHlsZXNIb3N0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNoYXJlZFN0eWxlc0hvc3QoKSB7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX3N0eWxlcyA9IFtdO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9zdHlsZXNTZXQgPSBuZXcgU2V0KCk7XHJcbiAgICB9XHJcbiAgICBTaGFyZWRTdHlsZXNIb3N0LnByb3RvdHlwZS5hZGRTdHlsZXMgPSBmdW5jdGlvbiAoc3R5bGVzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgYWRkaXRpb25zID0gW107XHJcbiAgICAgICAgc3R5bGVzLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlKSB7XHJcbiAgICAgICAgICAgIGlmICghY29sbGVjdGlvbl8xLlNldFdyYXBwZXIuaGFzKF90aGlzLl9zdHlsZXNTZXQsIHN0eWxlKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3N0eWxlc1NldC5hZGQoc3R5bGUpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX3N0eWxlcy5wdXNoKHN0eWxlKTtcclxuICAgICAgICAgICAgICAgIGFkZGl0aW9ucy5wdXNoKHN0eWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMub25TdHlsZXNBZGRlZChhZGRpdGlvbnMpO1xyXG4gICAgfTtcclxuICAgIFNoYXJlZFN0eWxlc0hvc3QucHJvdG90eXBlLm9uU3R5bGVzQWRkZWQgPSBmdW5jdGlvbiAoYWRkaXRpb25zKSB7IH07XHJcbiAgICBTaGFyZWRTdHlsZXNIb3N0LnByb3RvdHlwZS5nZXRBbGxTdHlsZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9zdHlsZXM7IH07XHJcbiAgICBTaGFyZWRTdHlsZXNIb3N0ID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgZGlfMS5JbmplY3RhYmxlKCksIFxyXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW10pXHJcbiAgICBdLCBTaGFyZWRTdHlsZXNIb3N0KTtcclxuICAgIHJldHVybiBTaGFyZWRTdHlsZXNIb3N0O1xyXG59KSgpO1xyXG5leHBvcnRzLlNoYXJlZFN0eWxlc0hvc3QgPSBTaGFyZWRTdHlsZXNIb3N0O1xyXG52YXIgRG9tU2hhcmVkU3R5bGVzSG9zdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRG9tU2hhcmVkU3R5bGVzSG9zdCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIERvbVNoYXJlZFN0eWxlc0hvc3QoZG9jKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5faG9zdE5vZGVzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIHRoaXMuX2hvc3ROb2Rlcy5hZGQoZG9jLmhlYWQpO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgRG9tU2hhcmVkU3R5bGVzSG9zdC5wcm90b3R5cGUuX2FkZFN0eWxlc1RvSG9zdCA9IGZ1bmN0aW9uIChzdHlsZXMsIGhvc3QpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgc3R5bGUgPSBzdHlsZXNbaV07XHJcbiAgICAgICAgICAgIGRvbV9hZGFwdGVyXzEuRE9NLmFwcGVuZENoaWxkKGhvc3QsIGRvbV9hZGFwdGVyXzEuRE9NLmNyZWF0ZVN0eWxlRWxlbWVudChzdHlsZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEb21TaGFyZWRTdHlsZXNIb3N0LnByb3RvdHlwZS5hZGRIb3N0ID0gZnVuY3Rpb24gKGhvc3ROb2RlKSB7XHJcbiAgICAgICAgdGhpcy5fYWRkU3R5bGVzVG9Ib3N0KHRoaXMuX3N0eWxlcywgaG9zdE5vZGUpO1xyXG4gICAgICAgIHRoaXMuX2hvc3ROb2Rlcy5hZGQoaG9zdE5vZGUpO1xyXG4gICAgfTtcclxuICAgIERvbVNoYXJlZFN0eWxlc0hvc3QucHJvdG90eXBlLnJlbW92ZUhvc3QgPSBmdW5jdGlvbiAoaG9zdE5vZGUpIHsgY29sbGVjdGlvbl8xLlNldFdyYXBwZXIuZGVsZXRlKHRoaXMuX2hvc3ROb2RlcywgaG9zdE5vZGUpOyB9O1xyXG4gICAgRG9tU2hhcmVkU3R5bGVzSG9zdC5wcm90b3R5cGUub25TdHlsZXNBZGRlZCA9IGZ1bmN0aW9uIChhZGRpdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX2hvc3ROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChob3N0Tm9kZSkgeyBfdGhpcy5fYWRkU3R5bGVzVG9Ib3N0KGFkZGl0aW9ucywgaG9zdE5vZGUpOyB9KTtcclxuICAgIH07XHJcbiAgICBEb21TaGFyZWRTdHlsZXNIb3N0ID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgZGlfMS5JbmplY3RhYmxlKCksXHJcbiAgICAgICAgX19wYXJhbSgwLCBkaV8xLkluamVjdChkb21fdG9rZW5zXzEuRE9DVU1FTlQpKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbT2JqZWN0XSlcclxuICAgIF0sIERvbVNoYXJlZFN0eWxlc0hvc3QpO1xyXG4gICAgcmV0dXJuIERvbVNoYXJlZFN0eWxlc0hvc3Q7XHJcbn0pKFNoYXJlZFN0eWxlc0hvc3QpO1xyXG5leHBvcnRzLkRvbVNoYXJlZFN0eWxlc0hvc3QgPSBEb21TaGFyZWRTdHlsZXNIb3N0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZWRfc3R5bGVzX2hvc3QuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgQ0FNRUxfQ0FTRV9SRUdFWFAgPSAvKFtBLVpdKS9nO1xyXG52YXIgREFTSF9DQVNFX1JFR0VYUCA9IC8tKFthLXpdKS9nO1xyXG5mdW5jdGlvbiBjYW1lbENhc2VUb0Rhc2hDYXNlKGlucHV0KSB7XHJcbiAgICByZXR1cm4gbGFuZ18xLlN0cmluZ1dyYXBwZXIucmVwbGFjZUFsbE1hcHBlZChpbnB1dCwgQ0FNRUxfQ0FTRV9SRUdFWFAsIGZ1bmN0aW9uIChtKSB7IHJldHVybiAnLScgKyBtWzFdLnRvTG93ZXJDYXNlKCk7IH0pO1xyXG59XHJcbmV4cG9ydHMuY2FtZWxDYXNlVG9EYXNoQ2FzZSA9IGNhbWVsQ2FzZVRvRGFzaENhc2U7XHJcbmZ1bmN0aW9uIGRhc2hDYXNlVG9DYW1lbENhc2UoaW5wdXQpIHtcclxuICAgIHJldHVybiBsYW5nXzEuU3RyaW5nV3JhcHBlci5yZXBsYWNlQWxsTWFwcGVkKGlucHV0LCBEQVNIX0NBU0VfUkVHRVhQLCBmdW5jdGlvbiAobSkgeyByZXR1cm4gbVsxXS50b1VwcGVyQ2FzZSgpOyB9KTtcclxufVxyXG5leHBvcnRzLmRhc2hDYXNlVG9DYW1lbENhc2UgPSBkYXNoQ2FzZVRvQ2FtZWxDYXNlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCIsIid1c2Ugc3RyaWN0JzsvKipcclxuICogQG1vZHVsZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgYWR2YW5jZWQgc3VwcG9ydCBmb3IgZXh0ZW5kaW5nIGRvbSBzdHJhdGVneS5cclxuICovXHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5fX2V4cG9ydChyZXF1aXJlKCcuL2RvbS9zaGFyZWRfc3R5bGVzX2hvc3QnKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoJy4vZG9tL2RvbV9yZW5kZXJlcicpKTtcclxuX19leHBvcnQocmVxdWlyZSgnLi9kb20vZG9tX3Rva2VucycpKTtcclxuX19leHBvcnQocmVxdWlyZSgnLi9hcGknKSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbmRlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGV4Y2VwdGlvbnNfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9leGNlcHRpb25zJyk7XHJcbnZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIGFwaV8xID0gcmVxdWlyZSgnLi9hcGknKTtcclxudmFyIERlZmF1bHRQcm90b1ZpZXdSZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKERlZmF1bHRQcm90b1ZpZXdSZWYsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBEZWZhdWx0UHJvdG9WaWV3UmVmKGNtZHMpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLmNtZHMgPSBjbWRzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIERlZmF1bHRQcm90b1ZpZXdSZWY7XHJcbn0pKGFwaV8xLlJlbmRlclByb3RvVmlld1JlZik7XHJcbmV4cG9ydHMuRGVmYXVsdFByb3RvVmlld1JlZiA9IERlZmF1bHRQcm90b1ZpZXdSZWY7XHJcbnZhciBEZWZhdWx0UmVuZGVyRnJhZ21lbnRSZWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKERlZmF1bHRSZW5kZXJGcmFnbWVudFJlZiwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIERlZmF1bHRSZW5kZXJGcmFnbWVudFJlZihub2Rlcykge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcclxuICAgIH1cclxuICAgIHJldHVybiBEZWZhdWx0UmVuZGVyRnJhZ21lbnRSZWY7XHJcbn0pKGFwaV8xLlJlbmRlckZyYWdtZW50UmVmKTtcclxuZXhwb3J0cy5EZWZhdWx0UmVuZGVyRnJhZ21lbnRSZWYgPSBEZWZhdWx0UmVuZGVyRnJhZ21lbnRSZWY7XHJcbnZhciBEZWZhdWx0UmVuZGVyVmlldyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRGVmYXVsdFJlbmRlclZpZXcsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBEZWZhdWx0UmVuZGVyVmlldyhmcmFnbWVudHMsIGJvdW5kVGV4dE5vZGVzLCBib3VuZEVsZW1lbnRzLCBuYXRpdmVTaGFkb3dSb290cywgZ2xvYmFsRXZlbnRBZGRlcnMsIHJvb3RDb250ZW50SW5zZXJ0aW9uUG9pbnRzKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5mcmFnbWVudHMgPSBmcmFnbWVudHM7XHJcbiAgICAgICAgdGhpcy5ib3VuZFRleHROb2RlcyA9IGJvdW5kVGV4dE5vZGVzO1xyXG4gICAgICAgIHRoaXMuYm91bmRFbGVtZW50cyA9IGJvdW5kRWxlbWVudHM7XHJcbiAgICAgICAgdGhpcy5uYXRpdmVTaGFkb3dSb290cyA9IG5hdGl2ZVNoYWRvd1Jvb3RzO1xyXG4gICAgICAgIHRoaXMuZ2xvYmFsRXZlbnRBZGRlcnMgPSBnbG9iYWxFdmVudEFkZGVycztcclxuICAgICAgICB0aGlzLnJvb3RDb250ZW50SW5zZXJ0aW9uUG9pbnRzID0gcm9vdENvbnRlbnRJbnNlcnRpb25Qb2ludHM7XHJcbiAgICAgICAgdGhpcy5oeWRyYXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZXZlbnREaXNwYXRjaGVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLmdsb2JhbEV2ZW50UmVtb3ZlcnMgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgRGVmYXVsdFJlbmRlclZpZXcucHJvdG90eXBlLmh5ZHJhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaHlkcmF0ZWQpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBleGNlcHRpb25zXzEuQmFzZUV4Y2VwdGlvbignVGhlIHZpZXcgaXMgYWxyZWFkeSBoeWRyYXRlZC4nKTtcclxuICAgICAgICB0aGlzLmh5ZHJhdGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmdsb2JhbEV2ZW50UmVtb3ZlcnMgPSBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIuY3JlYXRlRml4ZWRTaXplKHRoaXMuZ2xvYmFsRXZlbnRBZGRlcnMubGVuZ3RoKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZ2xvYmFsRXZlbnRBZGRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5nbG9iYWxFdmVudFJlbW92ZXJzW2ldID0gdGhpcy5nbG9iYWxFdmVudEFkZGVyc1tpXSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEZWZhdWx0UmVuZGVyVmlldy5wcm90b3R5cGUuZGVoeWRyYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5oeWRyYXRlZClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbnNfMS5CYXNlRXhjZXB0aW9uKCdUaGUgdmlldyBpcyBhbHJlYWR5IGRlaHlkcmF0ZWQuJyk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmdsb2JhbEV2ZW50UmVtb3ZlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5nbG9iYWxFdmVudFJlbW92ZXJzW2ldKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZ2xvYmFsRXZlbnRSZW1vdmVycyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5oeWRyYXRlZCA9IGZhbHNlO1xyXG4gICAgfTtcclxuICAgIERlZmF1bHRSZW5kZXJWaWV3LnByb3RvdHlwZS5zZXRFdmVudERpc3BhdGNoZXIgPSBmdW5jdGlvbiAoZGlzcGF0Y2hlcikgeyB0aGlzLmV2ZW50RGlzcGF0Y2hlciA9IGRpc3BhdGNoZXI7IH07XHJcbiAgICBEZWZhdWx0UmVuZGVyVmlldy5wcm90b3R5cGUuZGlzcGF0Y2hSZW5kZXJFdmVudCA9IGZ1bmN0aW9uIChib3VuZEVsZW1lbnRJbmRleCwgZXZlbnROYW1lLCBldmVudCkge1xyXG4gICAgICAgIHZhciBhbGxvd0RlZmF1bHRCZWhhdmlvciA9IHRydWU7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5ldmVudERpc3BhdGNoZXIpKSB7XHJcbiAgICAgICAgICAgIHZhciBsb2NhbHMgPSBuZXcgY29sbGVjdGlvbl8xLk1hcCgpO1xyXG4gICAgICAgICAgICBsb2NhbHMuc2V0KCckZXZlbnQnLCBldmVudCk7XHJcbiAgICAgICAgICAgIGFsbG93RGVmYXVsdEJlaGF2aW9yID1cclxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnREaXNwYXRjaGVyLmRpc3BhdGNoUmVuZGVyRXZlbnQoYm91bmRFbGVtZW50SW5kZXgsIGV2ZW50TmFtZSwgbG9jYWxzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFsbG93RGVmYXVsdEJlaGF2aW9yO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEZWZhdWx0UmVuZGVyVmlldztcclxufSkoYXBpXzEuUmVuZGVyVmlld1JlZik7XHJcbmV4cG9ydHMuRGVmYXVsdFJlbmRlclZpZXcgPSBEZWZhdWx0UmVuZGVyVmlldztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmlldy5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciB2aWV3XzEgPSByZXF1aXJlKCcuL3ZpZXcnKTtcclxuZnVuY3Rpb24gY3JlYXRlUmVuZGVyVmlldyhmcmFnbWVudENtZHMsIGlucGxhY2VFbGVtZW50LCBub2RlRmFjdG9yeSkge1xyXG4gICAgdmFyIHZpZXc7XHJcbiAgICB2YXIgZXZlbnREaXNwYXRjaGVyID0gZnVuY3Rpb24gKGJvdW5kRWxlbWVudEluZGV4LCBldmVudE5hbWUsIGV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIHZpZXcuZGlzcGF0Y2hSZW5kZXJFdmVudChib3VuZEVsZW1lbnRJbmRleCwgZXZlbnROYW1lLCBldmVudCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQnVpbGRDb250ZXh0KGV2ZW50RGlzcGF0Y2hlciwgbm9kZUZhY3RvcnksIGlucGxhY2VFbGVtZW50KTtcclxuICAgIGNvbnRleHQuYnVpbGQoZnJhZ21lbnRDbWRzKTtcclxuICAgIHZhciBmcmFnbWVudHMgPSBbXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGV4dC5mcmFnbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBmcmFnbWVudHMucHVzaChuZXcgdmlld18xLkRlZmF1bHRSZW5kZXJGcmFnbWVudFJlZihjb250ZXh0LmZyYWdtZW50c1tpXSkpO1xyXG4gICAgfVxyXG4gICAgdmlldyA9IG5ldyB2aWV3XzEuRGVmYXVsdFJlbmRlclZpZXcoZnJhZ21lbnRzLCBjb250ZXh0LmJvdW5kVGV4dE5vZGVzLCBjb250ZXh0LmJvdW5kRWxlbWVudHMsIGNvbnRleHQubmF0aXZlU2hhZG93Um9vdHMsIGNvbnRleHQuZ2xvYmFsRXZlbnRBZGRlcnMsIGNvbnRleHQucm9vdENvbnRlbnRJbnNlcnRpb25Qb2ludHMpO1xyXG4gICAgcmV0dXJuIHZpZXc7XHJcbn1cclxuZXhwb3J0cy5jcmVhdGVSZW5kZXJWaWV3ID0gY3JlYXRlUmVuZGVyVmlldztcclxudmFyIEJ1aWxkQ29udGV4dCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCdWlsZENvbnRleHQoX2V2ZW50RGlzcGF0Y2hlciwgZmFjdG9yeSwgX2lucGxhY2VFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnREaXNwYXRjaGVyID0gX2V2ZW50RGlzcGF0Y2hlcjtcclxuICAgICAgICB0aGlzLmZhY3RvcnkgPSBmYWN0b3J5O1xyXG4gICAgICAgIHRoaXMuX2lucGxhY2VFbGVtZW50ID0gX2lucGxhY2VFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuX2J1aWxkZXJzID0gW107XHJcbiAgICAgICAgdGhpcy5nbG9iYWxFdmVudEFkZGVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYm91bmRFbGVtZW50cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYm91bmRUZXh0Tm9kZXMgPSBbXTtcclxuICAgICAgICB0aGlzLm5hdGl2ZVNoYWRvd1Jvb3RzID0gW107XHJcbiAgICAgICAgdGhpcy5mcmFnbWVudHMgPSBbXTtcclxuICAgICAgICB0aGlzLnJvb3RDb250ZW50SW5zZXJ0aW9uUG9pbnRzID0gW107XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRDb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy5pc0hvc3QgPSBsYW5nXzEuaXNQcmVzZW50KChfaW5wbGFjZUVsZW1lbnQpKTtcclxuICAgIH1cclxuICAgIEJ1aWxkQ29udGV4dC5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoZnJhZ21lbnRDbWRzKSB7XHJcbiAgICAgICAgdGhpcy5lbnF1ZXVlRnJhZ21lbnRCdWlsZGVyKG51bGwsIGZyYWdtZW50Q21kcyk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGQodGhpcy5fYnVpbGRlcnNbMF0pO1xyXG4gICAgfTtcclxuICAgIEJ1aWxkQ29udGV4dC5wcm90b3R5cGUuX2J1aWxkID0gZnVuY3Rpb24gKGJ1aWxkZXIpIHtcclxuICAgICAgICB0aGlzLl9idWlsZGVycyA9IFtdO1xyXG4gICAgICAgIGJ1aWxkZXIuYnVpbGQodGhpcyk7XHJcbiAgICAgICAgdmFyIGVucXVldWVkQnVpbGRlcnMgPSB0aGlzLl9idWlsZGVycztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVucXVldWVkQnVpbGRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGQoZW5xdWV1ZWRCdWlsZGVyc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEJ1aWxkQ29udGV4dC5wcm90b3R5cGUuZW5xdWV1ZUNvbXBvbmVudEJ1aWxkZXIgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRDb3VudCsrO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkZXJzLnB1c2gobmV3IFJlbmRlclZpZXdCdWlsZGVyKGNvbXBvbmVudCwgbnVsbCwgdGhpcy5mYWN0b3J5LnJlc29sdmVDb21wb25lbnRUZW1wbGF0ZShjb21wb25lbnQuY21kLnRlbXBsYXRlSWQpKSk7XHJcbiAgICB9O1xyXG4gICAgQnVpbGRDb250ZXh0LnByb3RvdHlwZS5lbnF1ZXVlRnJhZ21lbnRCdWlsZGVyID0gZnVuY3Rpb24gKHBhcmVudENvbXBvbmVudCwgY29tbWFuZHMpIHtcclxuICAgICAgICB2YXIgcm9vdE5vZGVzID0gW107XHJcbiAgICAgICAgdGhpcy5mcmFnbWVudHMucHVzaChyb290Tm9kZXMpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkZXJzLnB1c2gobmV3IFJlbmRlclZpZXdCdWlsZGVyKHBhcmVudENvbXBvbmVudCwgcm9vdE5vZGVzLCBjb21tYW5kcykpO1xyXG4gICAgfTtcclxuICAgIEJ1aWxkQ29udGV4dC5wcm90b3R5cGUuY29uc3VtZUlucGxhY2VFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9pbnBsYWNlRWxlbWVudDtcclxuICAgICAgICB0aGlzLl9pbnBsYWNlRWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICBCdWlsZENvbnRleHQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoYm91bmRFbGVtZW50SW5kZXgsIHRhcmdldCwgZXZlbnROYW1lKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9IGNyZWF0ZUV2ZW50SGFuZGxlcihib3VuZEVsZW1lbnRJbmRleCwgdGFyZ2V0ICsgXCI6XCIgKyBldmVudE5hbWUsIHRoaXMuX2V2ZW50RGlzcGF0Y2hlcik7XHJcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsRXZlbnRBZGRlcnMucHVzaChjcmVhdGVHbG9iYWxFdmVudEFkZGVyKHRhcmdldCwgZXZlbnROYW1lLCBoYW5kbGVyLCB0aGlzLmZhY3RvcnkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gY3JlYXRlRXZlbnRIYW5kbGVyKGJvdW5kRWxlbWVudEluZGV4LCBldmVudE5hbWUsIHRoaXMuX2V2ZW50RGlzcGF0Y2hlcik7XHJcbiAgICAgICAgICAgIHRoaXMuZmFjdG9yeS5vbih0aGlzLmJvdW5kRWxlbWVudHNbYm91bmRFbGVtZW50SW5kZXhdLCBldmVudE5hbWUsIGhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQnVpbGRDb250ZXh0O1xyXG59KSgpO1xyXG5mdW5jdGlvbiBjcmVhdGVFdmVudEhhbmRsZXIoYm91bmRFbGVtZW50SW5kZXgsIGV2ZW50TmFtZSwgZXZlbnREaXNwYXRjaGVyKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCRldmVudCkgeyByZXR1cm4gZXZlbnREaXNwYXRjaGVyKGJvdW5kRWxlbWVudEluZGV4LCBldmVudE5hbWUsICRldmVudCk7IH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlR2xvYmFsRXZlbnRBZGRlcih0YXJnZXQsIGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVyLCBub2RlRmFjdG9yeSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5vZGVGYWN0b3J5Lmdsb2JhbE9uKHRhcmdldCwgZXZlbnROYW1lLCBldmVudEhhbmRsZXIpOyB9O1xyXG59XHJcbnZhciBSZW5kZXJWaWV3QnVpbGRlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZW5kZXJWaWV3QnVpbGRlcihwYXJlbnRDb21wb25lbnQsIGZyYWdtZW50Um9vdE5vZGVzLCBjb21tYW5kcykge1xyXG4gICAgICAgIHRoaXMucGFyZW50Q29tcG9uZW50ID0gcGFyZW50Q29tcG9uZW50O1xyXG4gICAgICAgIHRoaXMuZnJhZ21lbnRSb290Tm9kZXMgPSBmcmFnbWVudFJvb3ROb2RlcztcclxuICAgICAgICB0aGlzLmNvbW1hbmRzID0gY29tbWFuZHM7XHJcbiAgICAgICAgdmFyIHJvb3ROb2Rlc1BhcmVudCA9IGxhbmdfMS5pc1ByZXNlbnQoZnJhZ21lbnRSb290Tm9kZXMpID8gbnVsbCA6IHBhcmVudENvbXBvbmVudC5zaGFkb3dSb290O1xyXG4gICAgICAgIHRoaXMucGFyZW50U3RhY2sgPSBbcm9vdE5vZGVzUGFyZW50XTtcclxuICAgIH1cclxuICAgIFJlbmRlclZpZXdCdWlsZGVyLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvbW1hbmRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tbWFuZHNbaV0udmlzaXQodGhpcywgY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZW5kZXJWaWV3QnVpbGRlci5wcm90b3R5cGUsIFwicGFyZW50XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMucGFyZW50U3RhY2tbdGhpcy5wYXJlbnRTdGFjay5sZW5ndGggLSAxXTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBSZW5kZXJWaWV3QnVpbGRlci5wcm90b3R5cGUudmlzaXRUZXh0ID0gZnVuY3Rpb24gKGNtZCwgY29udGV4dCkge1xyXG4gICAgICAgIHZhciB0ZXh0ID0gY29udGV4dC5mYWN0b3J5LmNyZWF0ZVRleHQoY21kLnZhbHVlKTtcclxuICAgICAgICB0aGlzLl9hZGRDaGlsZCh0ZXh0LCBjbWQubmdDb250ZW50SW5kZXgsIGNvbnRleHQpO1xyXG4gICAgICAgIGlmIChjbWQuaXNCb3VuZCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmJvdW5kVGV4dE5vZGVzLnB1c2godGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFJlbmRlclZpZXdCdWlsZGVyLnByb3RvdHlwZS52aXNpdE5nQ29udGVudCA9IGZ1bmN0aW9uIChjbWQsIGNvbnRleHQpIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0aGlzLnBhcmVudENvbXBvbmVudCkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50Q29tcG9uZW50LmlzUm9vdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluc2VydGlvblBvaW50ID0gY29udGV4dC5mYWN0b3J5LmNyZWF0ZVJvb3RDb250ZW50SW5zZXJ0aW9uUG9pbnQoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudCBpbnN0YW5jZW9mIENvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmFjdG9yeS5hcHBlbmRDaGlsZCh0aGlzLnBhcmVudC5zaGFkb3dSb290LCBpbnNlcnRpb25Qb2ludCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZhY3RvcnkuYXBwZW5kQ2hpbGQodGhpcy5wYXJlbnQsIGluc2VydGlvblBvaW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRleHQucm9vdENvbnRlbnRJbnNlcnRpb25Qb2ludHMucHVzaChpbnNlcnRpb25Qb2ludCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvamVjdGVkTm9kZXMgPSB0aGlzLnBhcmVudENvbXBvbmVudC5wcm9qZWN0KGNtZC5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb2plY3RlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBwcm9qZWN0ZWROb2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRDaGlsZChub2RlLCBjbWQubmdDb250ZW50SW5kZXgsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFJlbmRlclZpZXdCdWlsZGVyLnByb3RvdHlwZS52aXNpdEJlZ2luRWxlbWVudCA9IGZ1bmN0aW9uIChjbWQsIGNvbnRleHQpIHtcclxuICAgICAgICB0aGlzLnBhcmVudFN0YWNrLnB1c2godGhpcy5fYmVnaW5FbGVtZW50KGNtZCwgY29udGV4dCkpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFJlbmRlclZpZXdCdWlsZGVyLnByb3RvdHlwZS52aXNpdEVuZEVsZW1lbnQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xyXG4gICAgICAgIHRoaXMuX2VuZEVsZW1lbnQoKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBSZW5kZXJWaWV3QnVpbGRlci5wcm90b3R5cGUudmlzaXRCZWdpbkNvbXBvbmVudCA9IGZ1bmN0aW9uIChjbWQsIGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgZWwgPSB0aGlzLl9iZWdpbkVsZW1lbnQoY21kLCBjb250ZXh0KTtcclxuICAgICAgICB2YXIgcm9vdCA9IGVsO1xyXG4gICAgICAgIGlmIChjbWQubmF0aXZlU2hhZG93KSB7XHJcbiAgICAgICAgICAgIHJvb3QgPSBjb250ZXh0LmZhY3RvcnkuY3JlYXRlU2hhZG93Um9vdChlbCwgY21kLnRlbXBsYXRlSWQpO1xyXG4gICAgICAgICAgICBjb250ZXh0Lm5hdGl2ZVNoYWRvd1Jvb3RzLnB1c2gocm9vdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpc1Jvb3QgPSBjb250ZXh0LmNvbXBvbmVudENvdW50ID09PSAwICYmIGNvbnRleHQuaXNIb3N0O1xyXG4gICAgICAgIHZhciBjb21wb25lbnQgPSBuZXcgQ29tcG9uZW50KGVsLCByb290LCBjbWQsIGlzUm9vdCk7XHJcbiAgICAgICAgY29udGV4dC5lbnF1ZXVlQ29tcG9uZW50QnVpbGRlcihjb21wb25lbnQpO1xyXG4gICAgICAgIHRoaXMucGFyZW50U3RhY2sucHVzaChjb21wb25lbnQpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFJlbmRlclZpZXdCdWlsZGVyLnByb3RvdHlwZS52aXNpdEVuZENvbXBvbmVudCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy5fZW5kRWxlbWVudCgpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFJlbmRlclZpZXdCdWlsZGVyLnByb3RvdHlwZS52aXNpdEVtYmVkZGVkVGVtcGxhdGUgPSBmdW5jdGlvbiAoY21kLCBjb250ZXh0KSB7XHJcbiAgICAgICAgdmFyIGVsID0gY29udGV4dC5mYWN0b3J5LmNyZWF0ZVRlbXBsYXRlQW5jaG9yKGNtZC5hdHRyTmFtZUFuZFZhbHVlcyk7XHJcbiAgICAgICAgdGhpcy5fYWRkQ2hpbGQoZWwsIGNtZC5uZ0NvbnRlbnRJbmRleCwgY29udGV4dCk7XHJcbiAgICAgICAgY29udGV4dC5ib3VuZEVsZW1lbnRzLnB1c2goZWwpO1xyXG4gICAgICAgIGlmIChjbWQuaXNNZXJnZWQpIHtcclxuICAgICAgICAgICAgY29udGV4dC5lbnF1ZXVlRnJhZ21lbnRCdWlsZGVyKHRoaXMucGFyZW50Q29tcG9uZW50LCBjbWQuY2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBSZW5kZXJWaWV3QnVpbGRlci5wcm90b3R5cGUuX2JlZ2luRWxlbWVudCA9IGZ1bmN0aW9uIChjbWQsIGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgZWwgPSBjb250ZXh0LmNvbnN1bWVJbnBsYWNlRWxlbWVudCgpO1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNQcmVzZW50KGVsKSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmZhY3RvcnkubWVyZ2VFbGVtZW50KGVsLCBjbWQuYXR0ck5hbWVBbmRWYWx1ZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmZyYWdtZW50Um9vdE5vZGVzLnB1c2goZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZWwgPSBjb250ZXh0LmZhY3RvcnkuY3JlYXRlRWxlbWVudChjbWQubmFtZSwgY21kLmF0dHJOYW1lQW5kVmFsdWVzKTtcclxuICAgICAgICAgICAgdGhpcy5fYWRkQ2hpbGQoZWwsIGNtZC5uZ0NvbnRlbnRJbmRleCwgY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbWQuaXNCb3VuZCkge1xyXG4gICAgICAgICAgICB2YXIgYm91bmRFbGVtZW50SW5kZXggPSBjb250ZXh0LmJvdW5kRWxlbWVudHMubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb250ZXh0LmJvdW5kRWxlbWVudHMucHVzaChlbCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY21kLmV2ZW50VGFyZ2V0QW5kTmFtZXMubGVuZ3RoOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBjbWQuZXZlbnRUYXJnZXRBbmROYW1lc1tpXTtcclxuICAgICAgICAgICAgICAgIHZhciBldmVudE5hbWUgPSBjbWQuZXZlbnRUYXJnZXRBbmROYW1lc1tpICsgMV07XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmFkZEV2ZW50TGlzdGVuZXIoYm91bmRFbGVtZW50SW5kZXgsIHRhcmdldCwgZXZlbnROYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWw7XHJcbiAgICB9O1xyXG4gICAgUmVuZGVyVmlld0J1aWxkZXIucHJvdG90eXBlLl9lbmRFbGVtZW50ID0gZnVuY3Rpb24gKCkgeyB0aGlzLnBhcmVudFN0YWNrLnBvcCgpOyB9O1xyXG4gICAgUmVuZGVyVmlld0J1aWxkZXIucHJvdG90eXBlLl9hZGRDaGlsZCA9IGZ1bmN0aW9uIChub2RlLCBuZ0NvbnRlbnRJbmRleCwgY29udGV4dCkge1xyXG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudDtcclxuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudChwYXJlbnQpKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDb250ZW50Tm9kZShuZ0NvbnRlbnRJbmRleCwgbm9kZSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZhY3RvcnkuYXBwZW5kQ2hpbGQocGFyZW50LCBub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5mcmFnbWVudFJvb3ROb2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVuZGVyVmlld0J1aWxkZXI7XHJcbn0pKCk7XHJcbnZhciBDb21wb25lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ29tcG9uZW50KGhvc3RFbGVtZW50LCBzaGFkb3dSb290LCBjbWQsIGlzUm9vdCkge1xyXG4gICAgICAgIHRoaXMuaG9zdEVsZW1lbnQgPSBob3N0RWxlbWVudDtcclxuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QgPSBzaGFkb3dSb290O1xyXG4gICAgICAgIHRoaXMuY21kID0gY21kO1xyXG4gICAgICAgIHRoaXMuaXNSb290ID0gaXNSb290O1xyXG4gICAgICAgIHRoaXMuY29udGVudE5vZGVzQnlOZ0NvbnRlbnRJbmRleCA9IFtdO1xyXG4gICAgfVxyXG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5hZGRDb250ZW50Tm9kZSA9IGZ1bmN0aW9uIChuZ0NvbnRlbnRJbmRleCwgbm9kZSwgY29udGV4dCkge1xyXG4gICAgICAgIGlmIChsYW5nXzEuaXNCbGFuayhuZ0NvbnRlbnRJbmRleCkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY21kLm5hdGl2ZVNoYWRvdykge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5mYWN0b3J5LmFwcGVuZENoaWxkKHRoaXMuaG9zdEVsZW1lbnQsIG5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB3aGlsZSAodGhpcy5jb250ZW50Tm9kZXNCeU5nQ29udGVudEluZGV4Lmxlbmd0aCA8PSBuZ0NvbnRlbnRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50Tm9kZXNCeU5nQ29udGVudEluZGV4LnB1c2goW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudE5vZGVzQnlOZ0NvbnRlbnRJbmRleFtuZ0NvbnRlbnRJbmRleF0ucHVzaChub2RlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5wcm9qZWN0ID0gZnVuY3Rpb24gKG5nQ29udGVudEluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIG5nQ29udGVudEluZGV4IDwgdGhpcy5jb250ZW50Tm9kZXNCeU5nQ29udGVudEluZGV4Lmxlbmd0aCA/XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudE5vZGVzQnlOZ0NvbnRlbnRJbmRleFtuZ0NvbnRlbnRJbmRleF0gOlxyXG4gICAgICAgICAgICBbXTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29tcG9uZW50O1xyXG59KSgpO1xyXG5mdW5jdGlvbiBhZGRBbGwoc291cmNlLCB0YXJnZXQpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdGFyZ2V0LnB1c2goc291cmNlW2ldKTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWV3X2ZhY3RvcnkuanMubWFwIiwiJ3VzZSBzdHJpY3QnOy8vIFB1YmxpYyBBUEkgZm9yIFNlcnZpY2VzXHJcbnZhciBhcHBfcm9vdF91cmxfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyL2FwcF9yb290X3VybCcpO1xyXG5leHBvcnRzLkFwcFJvb3RVcmwgPSBhcHBfcm9vdF91cmxfMS5BcHBSb290VXJsO1xyXG52YXIgdXJsX3Jlc29sdmVyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9jb21waWxlci91cmxfcmVzb2x2ZXInKTtcclxuZXhwb3J0cy5VcmxSZXNvbHZlciA9IHVybF9yZXNvbHZlcl8xLlVybFJlc29sdmVyO1xyXG52YXIgdGl0bGVfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL3NlcnZpY2VzL3RpdGxlJyk7XHJcbmV4cG9ydHMuVGl0bGUgPSB0aXRsZV8xLlRpdGxlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXJ2aWNlcy5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIGRvbV9hZGFwdGVyXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kb20vZG9tX2FkYXB0ZXInKTtcclxuLyoqXHJcbiAqIEEgc2VydmljZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGdldCBhbmQgc2V0IHRoZSB0aXRsZSBvZiBhIGN1cnJlbnQgSFRNTCBkb2N1bWVudC5cclxuICpcclxuICogU2luY2UgYW4gQW5ndWxhciAyIGFwcGxpY2F0aW9uIGNhbid0IGJlIGJvb3RzdHJhcHBlZCBvbiB0aGUgZW50aXJlIEhUTUwgZG9jdW1lbnQgKGA8aHRtbD5gIHRhZylcclxuICogaXQgaXMgbm90IHBvc3NpYmxlIHRvIGJpbmQgdG8gdGhlIGB0ZXh0YCBwcm9wZXJ0eSBvZiB0aGUgYEhUTUxUaXRsZUVsZW1lbnRgIGVsZW1lbnRzXHJcbiAqIChyZXByZXNlbnRpbmcgdGhlIGA8dGl0bGU+YCB0YWcpLiBJbnN0ZWFkLCB0aGlzIHNlcnZpY2UgY2FuIGJlIHVzZWQgdG8gc2V0IGFuZCBnZXQgdGhlIGN1cnJlbnRcclxuICogdGl0bGUgdmFsdWUuXHJcbiAqL1xyXG52YXIgVGl0bGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGl0bGUoKSB7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgdGl0bGUgb2YgdGhlIGN1cnJlbnQgSFRNTCBkb2N1bWVudC5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIFRpdGxlLnByb3RvdHlwZS5nZXRUaXRsZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvbV9hZGFwdGVyXzEuRE9NLmdldFRpdGxlKCk7IH07XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgdGl0bGUgb2YgdGhlIGN1cnJlbnQgSFRNTCBkb2N1bWVudC5cclxuICAgICAqIEBwYXJhbSBuZXdUaXRsZVxyXG4gICAgICovXHJcbiAgICBUaXRsZS5wcm90b3R5cGUuc2V0VGl0bGUgPSBmdW5jdGlvbiAobmV3VGl0bGUpIHsgZG9tX2FkYXB0ZXJfMS5ET00uc2V0VGl0bGUobmV3VGl0bGUpOyB9O1xyXG4gICAgcmV0dXJuIFRpdGxlO1xyXG59KSgpO1xyXG5leHBvcnRzLlRpdGxlID0gVGl0bGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpdGxlLmpzLm1hcCIsIid1c2Ugc3RyaWN0Jzt2YXIgdGVzdGFiaWxpdHlfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL3Rlc3RhYmlsaXR5L3Rlc3RhYmlsaXR5Jyk7XHJcbnZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG52YXIgUHVibGljVGVzdGFiaWxpdHkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUHVibGljVGVzdGFiaWxpdHkodGVzdGFiaWxpdHkpIHtcclxuICAgICAgICB0aGlzLl90ZXN0YWJpbGl0eSA9IHRlc3RhYmlsaXR5O1xyXG4gICAgfVxyXG4gICAgUHVibGljVGVzdGFiaWxpdHkucHJvdG90eXBlLmlzU3RhYmxlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fdGVzdGFiaWxpdHkuaXNTdGFibGUoKTsgfTtcclxuICAgIFB1YmxpY1Rlc3RhYmlsaXR5LnByb3RvdHlwZS53aGVuU3RhYmxlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHRoaXMuX3Rlc3RhYmlsaXR5LndoZW5TdGFibGUoY2FsbGJhY2spOyB9O1xyXG4gICAgUHVibGljVGVzdGFiaWxpdHkucHJvdG90eXBlLmZpbmRCaW5kaW5ncyA9IGZ1bmN0aW9uICh1c2luZywgcHJvdmlkZXIsIGV4YWN0TWF0Y2gpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maW5kUHJvdmlkZXJzKHVzaW5nLCBwcm92aWRlciwgZXhhY3RNYXRjaCk7XHJcbiAgICB9O1xyXG4gICAgUHVibGljVGVzdGFiaWxpdHkucHJvdG90eXBlLmZpbmRQcm92aWRlcnMgPSBmdW5jdGlvbiAodXNpbmcsIHByb3ZpZGVyLCBleGFjdE1hdGNoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rlc3RhYmlsaXR5LmZpbmRCaW5kaW5ncyh1c2luZywgcHJvdmlkZXIsIGV4YWN0TWF0Y2gpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQdWJsaWNUZXN0YWJpbGl0eTtcclxufSkoKTtcclxudmFyIEJyb3dzZXJHZXRUZXN0YWJpbGl0eSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCcm93c2VyR2V0VGVzdGFiaWxpdHkoKSB7XHJcbiAgICB9XHJcbiAgICBCcm93c2VyR2V0VGVzdGFiaWxpdHkuaW5pdCA9IGZ1bmN0aW9uICgpIHsgdGVzdGFiaWxpdHlfMS5zZXRUZXN0YWJpbGl0eUdldHRlcihuZXcgQnJvd3NlckdldFRlc3RhYmlsaXR5KCkpOyB9O1xyXG4gICAgQnJvd3NlckdldFRlc3RhYmlsaXR5LnByb3RvdHlwZS5hZGRUb1dpbmRvdyA9IGZ1bmN0aW9uIChyZWdpc3RyeSkge1xyXG4gICAgICAgIGxhbmdfMS5nbG9iYWwuZ2V0QW5ndWxhclRlc3RhYmlsaXR5ID0gZnVuY3Rpb24gKGVsZW0sIGZpbmRJbkFuY2VzdG9ycykge1xyXG4gICAgICAgICAgICBpZiAoZmluZEluQW5jZXN0b3JzID09PSB2b2lkIDApIHsgZmluZEluQW5jZXN0b3JzID0gdHJ1ZTsgfVxyXG4gICAgICAgICAgICB2YXIgdGVzdGFiaWxpdHkgPSByZWdpc3RyeS5maW5kVGVzdGFiaWxpdHlJblRyZWUoZWxlbSwgZmluZEluQW5jZXN0b3JzKTtcclxuICAgICAgICAgICAgaWYgKHRlc3RhYmlsaXR5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgdGVzdGFiaWxpdHkgZm9yIGVsZW1lbnQuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQdWJsaWNUZXN0YWJpbGl0eSh0ZXN0YWJpbGl0eSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsYW5nXzEuZ2xvYmFsLmdldEFsbEFuZ3VsYXJUZXN0YWJpbGl0aWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdGVzdGFiaWxpdGllcyA9IHJlZ2lzdHJ5LmdldEFsbFRlc3RhYmlsaXRpZXMoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRlc3RhYmlsaXRpZXMubWFwKGZ1bmN0aW9uICh0ZXN0YWJpbGl0eSkgeyByZXR1cm4gbmV3IFB1YmxpY1Rlc3RhYmlsaXR5KHRlc3RhYmlsaXR5KTsgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQnJvd3NlckdldFRlc3RhYmlsaXR5O1xyXG59KSgpO1xyXG5leHBvcnRzLkJyb3dzZXJHZXRUZXN0YWJpbGl0eSA9IEJyb3dzZXJHZXRUZXN0YWJpbGl0eTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlcl90ZXN0YWJpbGl0eS5qcy5tYXAiLCIndXNlIHN0cmljdCc7dmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZChvKSkgfHwgbzsgfSwgdGFyZ2V0KTtcclxuICAgICAgICBjYXNlIDM6IHJldHVybiBkZWNvcmF0b3JzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKG8sIGQpIHsgcmV0dXJuIChkICYmIGQodGFyZ2V0LCBrZXkpKSwgdm9pZCAwOyB9LCB2b2lkIDApO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIGRlY29yYXRvcnMucmVkdWNlUmlnaHQoZnVuY3Rpb24obywgZCkgeyByZXR1cm4gKGQgJiYgZCh0YXJnZXQsIGtleSwgbykpIHx8IG87IH0sIGRlc2MpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxudmFyIGRpXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9kaScpO1xyXG52YXIgZG9tX2FkYXB0ZXJfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2RvbS9kb21fYWRhcHRlcicpO1xyXG52YXIgY29sbGVjdGlvbl8xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2NvbGxlY3Rpb24nKTtcclxudmFyIGxhbmdfMSA9IHJlcXVpcmUoJ2FuZ3VsYXIyL3NyYy9jb3JlL2ZhY2FkZS9sYW5nJyk7XHJcbnZhciBleGNlcHRpb25zXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvZXhjZXB0aW9ucycpO1xyXG52YXIgbmdfem9uZV8xID0gcmVxdWlyZSgnLi4vem9uZS9uZ196b25lJyk7XHJcbnZhciBhc3luY18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2FzeW5jJyk7XHJcbi8qKlxyXG4gKiBUaGUgVGVzdGFiaWxpdHkgc2VydmljZSBwcm92aWRlcyB0ZXN0aW5nIGhvb2tzIHRoYXQgY2FuIGJlIGFjY2Vzc2VkIGZyb21cclxuICogdGhlIGJyb3dzZXIgYW5kIGJ5IHNlcnZpY2VzIHN1Y2ggYXMgUHJvdHJhY3Rvci4gRWFjaCBib290c3RyYXBwZWQgQW5ndWxhclxyXG4gKiBhcHBsaWNhdGlvbiBvbiB0aGUgcGFnZSB3aWxsIGhhdmUgYW4gaW5zdGFuY2Ugb2YgVGVzdGFiaWxpdHkuXHJcbiAqL1xyXG52YXIgVGVzdGFiaWxpdHkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGVzdGFiaWxpdHkoX25nWm9uZSkge1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9wZW5kaW5nQ291bnQgPSAwO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSBbXTtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5faXNBbmd1bGFyRXZlbnRQZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fd2F0Y2hBbmd1bGFyRXZlbnRzKF9uZ1pvbmUpO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgVGVzdGFiaWxpdHkucHJvdG90eXBlLl93YXRjaEFuZ3VsYXJFdmVudHMgPSBmdW5jdGlvbiAoX25nWm9uZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgX25nWm9uZS5vdmVycmlkZU9uVHVyblN0YXJ0KGZ1bmN0aW9uICgpIHsgX3RoaXMuX2lzQW5ndWxhckV2ZW50UGVuZGluZyA9IHRydWU7IH0pO1xyXG4gICAgICAgIF9uZ1pvbmUub3ZlcnJpZGVPbkV2ZW50RG9uZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9pc0FuZ3VsYXJFdmVudFBlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgX3RoaXMuX3J1bkNhbGxiYWNrc0lmUmVhZHkoKTtcclxuICAgICAgICB9LCB0cnVlKTtcclxuICAgIH07XHJcbiAgICBUZXN0YWJpbGl0eS5wcm90b3R5cGUuaW5jcmVhc2VQZW5kaW5nUmVxdWVzdENvdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX3BlbmRpbmdDb3VudCArPSAxO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wZW5kaW5nQ291bnQ7XHJcbiAgICB9O1xyXG4gICAgVGVzdGFiaWxpdHkucHJvdG90eXBlLmRlY3JlYXNlUGVuZGluZ1JlcXVlc3RDb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9wZW5kaW5nQ291bnQgLT0gMTtcclxuICAgICAgICBpZiAodGhpcy5fcGVuZGluZ0NvdW50IDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uc18xLkJhc2VFeGNlcHRpb24oJ3BlbmRpbmcgYXN5bmMgcmVxdWVzdHMgYmVsb3cgemVybycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9ydW5DYWxsYmFja3NJZlJlYWR5KCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BlbmRpbmdDb3VudDtcclxuICAgIH07XHJcbiAgICBUZXN0YWJpbGl0eS5wcm90b3R5cGUuaXNTdGFibGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wZW5kaW5nQ291bnQgPT0gMCAmJiAhdGhpcy5faXNBbmd1bGFyRXZlbnRQZW5kaW5nOyB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgVGVzdGFiaWxpdHkucHJvdG90eXBlLl9ydW5DYWxsYmFja3NJZlJlYWR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RhYmxlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuOyAvLyBOb3QgcmVhZHlcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU2NoZWR1bGVzIHRoZSBjYWxsIGJhY2tzIGluIGEgbmV3IGZyYW1lIHNvIHRoYXQgaXQgaXMgYWx3YXlzIGFzeW5jLlxyXG4gICAgICAgIGFzeW5jXzEuUHJvbWlzZVdyYXBwZXIucmVzb2x2ZShudWxsKS50aGVuKGZ1bmN0aW9uIChfKSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChfdGhpcy5fY2FsbGJhY2tzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgKF90aGlzLl9jYWxsYmFja3MucG9wKCkpKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBUZXN0YWJpbGl0eS5wcm90b3R5cGUud2hlblN0YWJsZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICB0aGlzLl9ydW5DYWxsYmFja3NJZlJlYWR5KCk7XHJcbiAgICB9O1xyXG4gICAgVGVzdGFiaWxpdHkucHJvdG90eXBlLmdldFBlbmRpbmdSZXF1ZXN0Q291bnQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wZW5kaW5nQ291bnQ7IH07XHJcbiAgICAvLyBUaGlzIG9ubHkgYWNjb3VudHMgZm9yIG5nWm9uZSwgYW5kIG5vdCBwZW5kaW5nIGNvdW50cy4gVXNlIGB3aGVuU3RhYmxlYCB0b1xyXG4gICAgLy8gY2hlY2sgZm9yIHN0YWJpbGl0eS5cclxuICAgIFRlc3RhYmlsaXR5LnByb3RvdHlwZS5pc0FuZ3VsYXJFdmVudFBlbmRpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9pc0FuZ3VsYXJFdmVudFBlbmRpbmc7IH07XHJcbiAgICBUZXN0YWJpbGl0eS5wcm90b3R5cGUuZmluZEJpbmRpbmdzID0gZnVuY3Rpb24gKHVzaW5nLCBwcm92aWRlciwgZXhhY3RNYXRjaCkge1xyXG4gICAgICAgIC8vIFRPRE8oanVsaWVtcik6IGltcGxlbWVudC5cclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9O1xyXG4gICAgVGVzdGFiaWxpdHkucHJvdG90eXBlLmZpbmRQcm92aWRlcnMgPSBmdW5jdGlvbiAodXNpbmcsIHByb3ZpZGVyLCBleGFjdE1hdGNoKSB7XHJcbiAgICAgICAgLy8gVE9ETyhqdWxpZW1yKTogaW1wbGVtZW50LlxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH07XHJcbiAgICBUZXN0YWJpbGl0eSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtuZ196b25lXzEuTmdab25lXSlcclxuICAgIF0sIFRlc3RhYmlsaXR5KTtcclxuICAgIHJldHVybiBUZXN0YWJpbGl0eTtcclxufSkoKTtcclxuZXhwb3J0cy5UZXN0YWJpbGl0eSA9IFRlc3RhYmlsaXR5O1xyXG52YXIgVGVzdGFiaWxpdHlSZWdpc3RyeSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUZXN0YWJpbGl0eVJlZ2lzdHJ5KCkge1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9hcHBsaWNhdGlvbnMgPSBuZXcgY29sbGVjdGlvbl8xLk1hcCgpO1xyXG4gICAgICAgIHRlc3RhYmlsaXR5R2V0dGVyLmFkZFRvV2luZG93KHRoaXMpO1xyXG4gICAgfVxyXG4gICAgVGVzdGFiaWxpdHlSZWdpc3RyeS5wcm90b3R5cGUucmVnaXN0ZXJBcHBsaWNhdGlvbiA9IGZ1bmN0aW9uICh0b2tlbiwgdGVzdGFiaWxpdHkpIHtcclxuICAgICAgICB0aGlzLl9hcHBsaWNhdGlvbnMuc2V0KHRva2VuLCB0ZXN0YWJpbGl0eSk7XHJcbiAgICB9O1xyXG4gICAgVGVzdGFiaWxpdHlSZWdpc3RyeS5wcm90b3R5cGUuZ2V0QWxsVGVzdGFiaWxpdGllcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbGxlY3Rpb25fMS5NYXBXcmFwcGVyLnZhbHVlcyh0aGlzLl9hcHBsaWNhdGlvbnMpOyB9O1xyXG4gICAgVGVzdGFiaWxpdHlSZWdpc3RyeS5wcm90b3R5cGUuZmluZFRlc3RhYmlsaXR5SW5UcmVlID0gZnVuY3Rpb24gKGVsZW0sIGZpbmRJbkFuY2VzdG9ycykge1xyXG4gICAgICAgIGlmIChmaW5kSW5BbmNlc3RvcnMgPT09IHZvaWQgMCkgeyBmaW5kSW5BbmNlc3RvcnMgPSB0cnVlOyB9XHJcbiAgICAgICAgaWYgKGVsZW0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2FwcGxpY2F0aW9ucy5oYXMoZWxlbSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGxpY2F0aW9ucy5nZXQoZWxlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFmaW5kSW5BbmNlc3RvcnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkb21fYWRhcHRlcl8xLkRPTS5pc1NoYWRvd1Jvb3QoZWxlbSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluZFRlc3RhYmlsaXR5SW5UcmVlKGRvbV9hZGFwdGVyXzEuRE9NLmdldEhvc3QoZWxlbSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5maW5kVGVzdGFiaWxpdHlJblRyZWUoZG9tX2FkYXB0ZXJfMS5ET00ucGFyZW50RWxlbWVudChlbGVtKSk7XHJcbiAgICB9O1xyXG4gICAgVGVzdGFiaWxpdHlSZWdpc3RyeSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGRpXzEuSW5qZWN0YWJsZSgpLCBcclxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxyXG4gICAgXSwgVGVzdGFiaWxpdHlSZWdpc3RyeSk7XHJcbiAgICByZXR1cm4gVGVzdGFiaWxpdHlSZWdpc3RyeTtcclxufSkoKTtcclxuZXhwb3J0cy5UZXN0YWJpbGl0eVJlZ2lzdHJ5ID0gVGVzdGFiaWxpdHlSZWdpc3RyeTtcclxudmFyIE5vb3BHZXRUZXN0YWJpbGl0eSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOb29wR2V0VGVzdGFiaWxpdHkoKSB7XHJcbiAgICB9XHJcbiAgICBOb29wR2V0VGVzdGFiaWxpdHkucHJvdG90eXBlLmFkZFRvV2luZG93ID0gZnVuY3Rpb24gKHJlZ2lzdHJ5KSB7IH07XHJcbiAgICBOb29wR2V0VGVzdGFiaWxpdHkgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBsYW5nXzEuQ09OU1QoKSwgXHJcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbXSlcclxuICAgIF0sIE5vb3BHZXRUZXN0YWJpbGl0eSk7XHJcbiAgICByZXR1cm4gTm9vcEdldFRlc3RhYmlsaXR5O1xyXG59KSgpO1xyXG5mdW5jdGlvbiBzZXRUZXN0YWJpbGl0eUdldHRlcihnZXR0ZXIpIHtcclxuICAgIHRlc3RhYmlsaXR5R2V0dGVyID0gZ2V0dGVyO1xyXG59XHJcbmV4cG9ydHMuc2V0VGVzdGFiaWxpdHlHZXR0ZXIgPSBzZXRUZXN0YWJpbGl0eUdldHRlcjtcclxudmFyIHRlc3RhYmlsaXR5R2V0dGVyID0gbGFuZ18xLkNPTlNUX0VYUFIobmV3IE5vb3BHZXRUZXN0YWJpbGl0eSgpKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVzdGFiaWxpdHkuanMubWFwIiwiJ3VzZSBzdHJpY3QnOy8vIFB1YmxpYyBBUEkgZm9yIHV0aWxcclxudmFyIGRlY29yYXRvcnNfMSA9IHJlcXVpcmUoJy4vdXRpbC9kZWNvcmF0b3JzJyk7XHJcbmV4cG9ydHMuQ2xhc3MgPSBkZWNvcmF0b3JzXzEuQ2xhc3M7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBsYW5nXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvbGFuZycpO1xyXG5mdW5jdGlvbiBleHRyYWN0QW5ub3RhdGlvbihhbm5vdGF0aW9uKSB7XHJcbiAgICBpZiAobGFuZ18xLmlzRnVuY3Rpb24oYW5ub3RhdGlvbikgJiYgYW5ub3RhdGlvbi5oYXNPd25Qcm9wZXJ0eSgnYW5ub3RhdGlvbicpKSB7XHJcbiAgICAgICAgLy8gaXQgaXMgYSBkZWNvcmF0b3IsIGV4dHJhY3QgYW5ub3RhdGlvblxyXG4gICAgICAgIGFubm90YXRpb24gPSBhbm5vdGF0aW9uLmFubm90YXRpb247XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYW5ub3RhdGlvbjtcclxufVxyXG5mdW5jdGlvbiBhcHBseVBhcmFtcyhmbk9yQXJyYXksIGtleSkge1xyXG4gICAgaWYgKGZuT3JBcnJheSA9PT0gT2JqZWN0IHx8IGZuT3JBcnJheSA9PT0gU3RyaW5nIHx8IGZuT3JBcnJheSA9PT0gRnVuY3Rpb24gfHxcclxuICAgICAgICBmbk9yQXJyYXkgPT09IE51bWJlciB8fCBmbk9yQXJyYXkgPT09IEFycmF5KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuIG5vdCB1c2UgbmF0aXZlIFwiICsgbGFuZ18xLnN0cmluZ2lmeShmbk9yQXJyYXkpICsgXCIgYXMgY29uc3RydWN0b3JcIik7XHJcbiAgICB9XHJcbiAgICBpZiAobGFuZ18xLmlzRnVuY3Rpb24oZm5PckFycmF5KSkge1xyXG4gICAgICAgIHJldHVybiBmbk9yQXJyYXk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChmbk9yQXJyYXkgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgIHZhciBhbm5vdGF0aW9ucyA9IGZuT3JBcnJheTtcclxuICAgICAgICB2YXIgZm4gPSBmbk9yQXJyYXlbZm5PckFycmF5Lmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIGlmICghbGFuZ18xLmlzRnVuY3Rpb24oZm4pKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxhc3QgcG9zaXRpb24gb2YgQ2xhc3MgbWV0aG9kIGFycmF5IG11c3QgYmUgRnVuY3Rpb24gaW4ga2V5IFwiICsga2V5ICsgXCIgd2FzICdcIiArIGxhbmdfMS5zdHJpbmdpZnkoZm4pICsgXCInXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYW5ub0xlbmd0aCA9IGFubm90YXRpb25zLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgaWYgKGFubm9MZW5ndGggIT0gZm4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk51bWJlciBvZiBhbm5vdGF0aW9ucyAoXCIgKyBhbm5vTGVuZ3RoICsgXCIpIGRvZXMgbm90IG1hdGNoIG51bWJlciBvZiBhcmd1bWVudHMgKFwiICsgZm4ubGVuZ3RoICsgXCIpIGluIHRoZSBmdW5jdGlvbjogXCIgKyBsYW5nXzEuc3RyaW5naWZ5KGZuKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBwYXJhbXNBbm5vdGF0aW9ucyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGFubm90YXRpb25zLmxlbmd0aCAtIDE7IGkgPCBpaTsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJhbUFubm90YXRpb25zID0gW107XHJcbiAgICAgICAgICAgIHBhcmFtc0Fubm90YXRpb25zLnB1c2gocGFyYW1Bbm5vdGF0aW9ucyk7XHJcbiAgICAgICAgICAgIHZhciBhbm5vdGF0aW9uID0gYW5ub3RhdGlvbnNbaV07XHJcbiAgICAgICAgICAgIGlmIChhbm5vdGF0aW9uIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYW5ub3RhdGlvbi5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtQW5ub3RhdGlvbnMucHVzaChleHRyYWN0QW5ub3RhdGlvbihhbm5vdGF0aW9uW2pdKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobGFuZ18xLmlzRnVuY3Rpb24oYW5ub3RhdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtQW5ub3RhdGlvbnMucHVzaChleHRyYWN0QW5ub3RhdGlvbihhbm5vdGF0aW9uKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbUFubm90YXRpb25zLnB1c2goYW5ub3RhdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YSgncGFyYW1ldGVycycsIHBhcmFtc0Fubm90YXRpb25zLCBmbik7XHJcbiAgICAgICAgcmV0dXJuIGZuO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT25seSBGdW5jdGlvbiBvciBBcnJheSBpcyBzdXBwb3J0ZWQgaW4gQ2xhc3MgZGVmaW5pdGlvbiBmb3Iga2V5ICdcIiArIGtleSArIFwiJyBpcyAnXCIgKyBsYW5nXzEuc3RyaW5naWZ5KGZuT3JBcnJheSkgKyBcIidcIik7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFByb3ZpZGVzIGEgd2F5IGZvciBleHByZXNzaW5nIEVTNiBjbGFzc2VzIHdpdGggcGFyYW1ldGVyIGFubm90YXRpb25zIGluIEVTNS5cclxuICpcclxuICogIyMgQmFzaWMgRXhhbXBsZVxyXG4gKlxyXG4gKiBgYGBcclxuICogdmFyIEdyZWV0ZXIgPSBuZy5DbGFzcyh7XHJcbiAqICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICogICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAqICAgfSxcclxuICpcclxuICogICBncmVldDogZnVuY3Rpb24oKSB7XHJcbiAqICAgICBhbGVydCgnSGVsbG8gJyArIHRoaXMubmFtZSArICchJyk7XHJcbiAqICAgfVxyXG4gKiB9KTtcclxuICogYGBgXHJcbiAqXHJcbiAqIGlzIGVxdWl2YWxlbnQgdG8gRVM2OlxyXG4gKlxyXG4gKiBgYGBcclxuICogY2xhc3MgR3JlZXRlciB7XHJcbiAqICAgY29uc3RydWN0b3IobmFtZSkge1xyXG4gKiAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICogICB9XHJcbiAqXHJcbiAqICAgZ3JlZXQoKSB7XHJcbiAqICAgICBhbGVydCgnSGVsbG8gJyArIHRoaXMubmFtZSArICchJyk7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBvciBlcXVpdmFsZW50IHRvIEVTNTpcclxuICpcclxuICogYGBgXHJcbiAqIHZhciBHcmVldGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICogICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gKiB9XHJcbiAqXHJcbiAqIEdyZWV0ZXIucHJvdG90eXBlLmdyZWV0ID0gZnVuY3Rpb24gKCkge1xyXG4gKiAgIGFsZXJ0KCdIZWxsbyAnICsgdGhpcy5uYW1lICsgJyEnKTtcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogIyMgRXhhbXBsZSB3aXRoIHBhcmFtZXRlciBhbm5vdGF0aW9uc1xyXG4gKlxyXG4gKiBgYGBcclxuICogdmFyIE15U2VydmljZSA9IG5nLkNsYXNzKHtcclxuICogICBjb25zdHJ1Y3RvcjogW1N0cmluZywgW25ldyBRdWVyeSgpLCBRdWVyeUxpc3RdLCBmdW5jdGlvbihuYW1lLCBxdWVyeUxpc3QpIHtcclxuICogICAgIC4uLlxyXG4gKiAgIH1dXHJcbiAqIH0pO1xyXG4gKiBgYGBcclxuICpcclxuICogaXMgZXF1aXZhbGVudCB0byBFUzY6XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBjbGFzcyBNeVNlcnZpY2Uge1xyXG4gKiAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgQFF1ZXJ5KCkgcXVlcnlMaXN0OiBRdWVyeUxpc3QpIHtcclxuICogICAgIC4uLlxyXG4gKiAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogIyMgRXhhbXBsZSB3aXRoIGluaGVyaXRhbmNlXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiB2YXIgU2hhcGUgPSBuZy5DbGFzcyh7XHJcbiAqICAgY29uc3RydWN0b3I6IChjb2xvcikge1xyXG4gKiAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xyXG4gKiAgIH1cclxuICogfSk7XHJcbiAqXHJcbiAqIHZhciBTcXVhcmUgPSBuZy5DbGFzcyh7XHJcbiAqICAgZXh0ZW5kczogU2hhcGUsXHJcbiAqICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uKGNvbG9yLCBzaXplKSB7XHJcbiAqICAgICBTaGFwZS5jYWxsKHRoaXMsIGNvbG9yKTtcclxuICogICAgIHRoaXMuc2l6ZSA9IHNpemU7XHJcbiAqICAgfVxyXG4gKiB9KTtcclxuICogYGBgXHJcbiAqL1xyXG5mdW5jdGlvbiBDbGFzcyhjbHNEZWYpIHtcclxuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFwcGx5UGFyYW1zKGNsc0RlZi5oYXNPd25Qcm9wZXJ0eSgnY29uc3RydWN0b3InKSA/IGNsc0RlZi5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCwgJ2NvbnN0cnVjdG9yJyk7XHJcbiAgICB2YXIgcHJvdG8gPSBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7XHJcbiAgICBpZiAoY2xzRGVmLmhhc093blByb3BlcnR5KCdleHRlbmRzJykpIHtcclxuICAgICAgICBpZiAobGFuZ18xLmlzRnVuY3Rpb24oY2xzRGVmLmV4dGVuZHMpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IHByb3RvID1cclxuICAgICAgICAgICAgICAgIE9iamVjdC5jcmVhdGUoY2xzRGVmLmV4dGVuZHMucHJvdG90eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNsYXNzIGRlZmluaXRpb24gJ2V4dGVuZHMnIHByb3BlcnR5IG11c3QgYmUgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB3YXM6IFwiICsgbGFuZ18xLnN0cmluZ2lmeShjbHNEZWYuZXh0ZW5kcykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAodmFyIGtleSBpbiBjbHNEZWYpIHtcclxuICAgICAgICBpZiAoa2V5ICE9ICdleHRlbmRzJyAmJiBrZXkgIT0gJ3Byb3RvdHlwZScgJiYgY2xzRGVmLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgcHJvdG9ba2V5XSA9IGFwcGx5UGFyYW1zKGNsc0RlZltrZXldLCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0aGlzICYmIHRoaXMuYW5ub3RhdGlvbnMgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoJ2Fubm90YXRpb25zJywgdGhpcy5hbm5vdGF0aW9ucywgY29uc3RydWN0b3IpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbnN0cnVjdG9yO1xyXG59XHJcbmV4cG9ydHMuQ2xhc3MgPSBDbGFzcztcclxudmFyIFJlZmxlY3QgPSBsYW5nXzEuZ2xvYmFsLlJlZmxlY3Q7XHJcbmlmICghKFJlZmxlY3QgJiYgUmVmbGVjdC5nZXRNZXRhZGF0YSkpIHtcclxuICAgIHRocm93ICdyZWZsZWN0LW1ldGFkYXRhIHNoaW0gaXMgcmVxdWlyZWQgd2hlbiB1c2luZyBjbGFzcyBkZWNvcmF0b3JzJztcclxufVxyXG5mdW5jdGlvbiBtYWtlRGVjb3JhdG9yKGFubm90YXRpb25DbHMsIGNoYWluRm4pIHtcclxuICAgIGlmIChjaGFpbkZuID09PSB2b2lkIDApIHsgY2hhaW5GbiA9IG51bGw7IH1cclxuICAgIGZ1bmN0aW9uIERlY29yYXRvckZhY3Rvcnkob2JqT3JUeXBlKSB7XHJcbiAgICAgICAgdmFyIGFubm90YXRpb25JbnN0YW5jZSA9IG5ldyBhbm5vdGF0aW9uQ2xzKG9iak9yVHlwZSk7XHJcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBhbm5vdGF0aW9uQ2xzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhbm5vdGF0aW9uSW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgY2hhaW5Bbm5vdGF0aW9uID0gbGFuZ18xLmlzRnVuY3Rpb24odGhpcykgJiYgdGhpcy5hbm5vdGF0aW9ucyBpbnN0YW5jZW9mIEFycmF5ID8gdGhpcy5hbm5vdGF0aW9ucyA6IFtdO1xyXG4gICAgICAgICAgICBjaGFpbkFubm90YXRpb24ucHVzaChhbm5vdGF0aW9uSW5zdGFuY2UpO1xyXG4gICAgICAgICAgICB2YXIgVHlwZURlY29yYXRvciA9IGZ1bmN0aW9uIFR5cGVEZWNvcmF0b3IoY2xzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYW5ub3RhdGlvbnMgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKCdhbm5vdGF0aW9ucycsIGNscyk7XHJcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9ucyA9IGFubm90YXRpb25zIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbnMucHVzaChhbm5vdGF0aW9uSW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YSgnYW5ub3RhdGlvbnMnLCBhbm5vdGF0aW9ucywgY2xzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjbHM7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFR5cGVEZWNvcmF0b3IuYW5ub3RhdGlvbnMgPSBjaGFpbkFubm90YXRpb247XHJcbiAgICAgICAgICAgIFR5cGVEZWNvcmF0b3IuQ2xhc3MgPSBDbGFzcztcclxuICAgICAgICAgICAgaWYgKGNoYWluRm4pXHJcbiAgICAgICAgICAgICAgICBjaGFpbkZuKFR5cGVEZWNvcmF0b3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gVHlwZURlY29yYXRvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBEZWNvcmF0b3JGYWN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoYW5ub3RhdGlvbkNscy5wcm90b3R5cGUpO1xyXG4gICAgcmV0dXJuIERlY29yYXRvckZhY3Rvcnk7XHJcbn1cclxuZXhwb3J0cy5tYWtlRGVjb3JhdG9yID0gbWFrZURlY29yYXRvcjtcclxuZnVuY3Rpb24gbWFrZVBhcmFtRGVjb3JhdG9yKGFubm90YXRpb25DbHMpIHtcclxuICAgIGZ1bmN0aW9uIFBhcmFtRGVjb3JhdG9yRmFjdG9yeSgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBhbm5vdGF0aW9uSW5zdGFuY2UgPSBPYmplY3QuY3JlYXRlKGFubm90YXRpb25DbHMucHJvdG90eXBlKTtcclxuICAgICAgICBhbm5vdGF0aW9uQ2xzLmFwcGx5KGFubm90YXRpb25JbnN0YW5jZSwgYXJncyk7XHJcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBhbm5vdGF0aW9uQ2xzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhbm5vdGF0aW9uSW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBQYXJhbURlY29yYXRvci5hbm5vdGF0aW9uID0gYW5ub3RhdGlvbkluc3RhbmNlO1xyXG4gICAgICAgICAgICByZXR1cm4gUGFyYW1EZWNvcmF0b3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIFBhcmFtRGVjb3JhdG9yKGNscywgdW51c2VkS2V5LCBpbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyYW1ldGVycyA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoJ3BhcmFtZXRlcnMnLCBjbHMpO1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJzID0gcGFyYW1ldGVycyB8fCBbXTtcclxuICAgICAgICAgICAgLy8gdGhlcmUgbWlnaHQgYmUgZ2FwcyBpZiBzb21lIGluIGJldHdlZW4gcGFyYW1ldGVycyBkbyBub3QgaGF2ZSBhbm5vdGF0aW9ucy5cclxuICAgICAgICAgICAgLy8gd2UgcGFkIHdpdGggbnVsbHMuXHJcbiAgICAgICAgICAgIHdoaWxlIChwYXJhbWV0ZXJzLmxlbmd0aCA8PSBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy5wdXNoKG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBhcmFtZXRlcnNbaW5kZXhdID0gcGFyYW1ldGVyc1tpbmRleF0gfHwgW107XHJcbiAgICAgICAgICAgIHZhciBhbm5vdGF0aW9uc0ZvclBhcmFtID0gcGFyYW1ldGVyc1tpbmRleF07XHJcbiAgICAgICAgICAgIGFubm90YXRpb25zRm9yUGFyYW0ucHVzaChhbm5vdGF0aW9uSW5zdGFuY2UpO1xyXG4gICAgICAgICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKCdwYXJhbWV0ZXJzJywgcGFyYW1ldGVycywgY2xzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNscztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBQYXJhbURlY29yYXRvckZhY3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShhbm5vdGF0aW9uQ2xzLnByb3RvdHlwZSk7XHJcbiAgICByZXR1cm4gUGFyYW1EZWNvcmF0b3JGYWN0b3J5O1xyXG59XHJcbmV4cG9ydHMubWFrZVBhcmFtRGVjb3JhdG9yID0gbWFrZVBhcmFtRGVjb3JhdG9yO1xyXG5mdW5jdGlvbiBtYWtlUHJvcERlY29yYXRvcihkZWNvcmF0b3JDbHMpIHtcclxuICAgIGZ1bmN0aW9uIFByb3BEZWNvcmF0b3JGYWN0b3J5KCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGRlY29yYXRvckluc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShkZWNvcmF0b3JDbHMucHJvdG90eXBlKTtcclxuICAgICAgICBkZWNvcmF0b3JDbHMuYXBwbHkoZGVjb3JhdG9ySW5zdGFuY2UsIGFyZ3MpO1xyXG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgZGVjb3JhdG9yQ2xzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWNvcmF0b3JJbnN0YW5jZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBQcm9wRGVjb3JhdG9yKHRhcmdldCwgbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1ldGEgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKCdwcm9wTWV0YWRhdGEnLCB0YXJnZXQuY29uc3RydWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgbWV0YSA9IG1ldGEgfHwge307XHJcbiAgICAgICAgICAgICAgICBtZXRhW25hbWVdID0gbWV0YVtuYW1lXSB8fCBbXTtcclxuICAgICAgICAgICAgICAgIG1ldGFbbmFtZV0udW5zaGlmdChkZWNvcmF0b3JJbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKCdwcm9wTWV0YWRhdGEnLCBtZXRhLCB0YXJnZXQuY29uc3RydWN0b3IpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFByb3BEZWNvcmF0b3JGYWN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZGVjb3JhdG9yQ2xzLnByb3RvdHlwZSk7XHJcbiAgICByZXR1cm4gUHJvcERlY29yYXRvckZhY3Rvcnk7XHJcbn1cclxuZXhwb3J0cy5tYWtlUHJvcERlY29yYXRvciA9IG1ha2VQcm9wRGVjb3JhdG9yO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvcmF0b3JzLmpzLm1hcCIsIid1c2Ugc3RyaWN0JzsvLyBQdWJsaWMgQVBJIGZvciBab25lXHJcbnZhciBuZ196b25lXzEgPSByZXF1aXJlKCcuL3pvbmUvbmdfem9uZScpO1xyXG5leHBvcnRzLk5nWm9uZSA9IG5nX3pvbmVfMS5OZ1pvbmU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXpvbmUuanMubWFwIiwiJ3VzZSBzdHJpY3QnO3ZhciBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKCdhbmd1bGFyMi9zcmMvY29yZS9mYWNhZGUvY29sbGVjdGlvbicpO1xyXG52YXIgbGFuZ18xID0gcmVxdWlyZSgnYW5ndWxhcjIvc3JjL2NvcmUvZmFjYWRlL2xhbmcnKTtcclxudmFyIHByb2ZpbGVfMSA9IHJlcXVpcmUoJy4uL3Byb2ZpbGUvcHJvZmlsZScpO1xyXG4vKipcclxuICogQW4gaW5qZWN0YWJsZSBzZXJ2aWNlIGZvciBleGVjdXRpbmcgd29yayBpbnNpZGUgb3Igb3V0c2lkZSBvZiB0aGUgQW5ndWxhciB6b25lLlxyXG4gKlxyXG4gKiBUaGUgbW9zdCBjb21tb24gdXNlIG9mIHRoaXMgc2VydmljZSBpcyB0byBvcHRpbWl6ZSBwZXJmb3JtYW5jZSB3aGVuIHN0YXJ0aW5nIGEgd29yayBjb25zaXN0aW5nIG9mXHJcbiAqIG9uZSBvciBtb3JlIGFzeW5jaHJvbm91cyB0YXNrcyB0aGF0IGRvbid0IHJlcXVpcmUgVUkgdXBkYXRlcyBvciBlcnJvciBoYW5kbGluZyB0byBiZSBoYW5kbGVkIGJ5XHJcbiAqIEFuZ3VsYXIuIFN1Y2ggdGFza3MgY2FuIGJlIGtpY2tlZCBvZmYgdmlhIHtAbGluayAjcnVuT3V0c2lkZUFuZ3VsYXJ9IGFuZCBpZiBuZWVkZWQsIHRoZXNlIHRhc2tzXHJcbiAqIGNhbiByZWVudGVyIHRoZSBBbmd1bGFyIHpvbmUgdmlhIHtAbGluayAjcnVufS5cclxuICpcclxuICogPCEtLSBUT0RPOiBhZGQvZml4IGxpbmtzIHRvOlxyXG4gKiAgIC0gZG9jcyBleHBsYWluaW5nIHpvbmVzIGFuZCB0aGUgdXNlIG9mIHpvbmVzIGluIEFuZ3VsYXIgYW5kIGNoYW5nZS1kZXRlY3Rpb25cclxuICogICAtIGxpbmsgdG8gcnVuT3V0c2lkZUFuZ3VsYXIvcnVuICh0aHJvdWdob3V0IHRoaXMgZmlsZSEpXHJcbiAqICAgLS0+XHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9sWTltOEhMeTd6MDZ2RG9VYVNOMj9wPXByZXZpZXcpKVxyXG4gKiBgYGBcclxuICogaW1wb3J0IHtDb21wb25lbnQsIFZpZXcsIE5nSWYsIE5nWm9uZX0gZnJvbSAnYW5ndWxhcjIvYW5ndWxhcjInO1xyXG4gKlxyXG4gKiBAQ29tcG9uZW50KHtcclxuICogICBzZWxlY3RvcjogJ25nLXpvbmUtZGVtbycuXHJcbiAqICAgdGVtcGxhdGU6IGBcclxuICogICAgIDxoMj5EZW1vOiBOZ1pvbmU8L2gyPlxyXG4gKlxyXG4gKiAgICAgPHA+UHJvZ3Jlc3M6IHt7cHJvZ3Jlc3N9fSU8L3A+XHJcbiAqICAgICA8cCAqbmctaWY9XCJwcm9ncmVzcyA+PSAxMDBcIj5Eb25lIHByb2Nlc3Npbmcge3tsYWJlbH19IG9mIEFuZ3VsYXIgem9uZSE8L3A+XHJcbiAqXHJcbiAqICAgICA8YnV0dG9uIChjbGljayk9XCJwcm9jZXNzV2l0aGluQW5ndWxhclpvbmUoKVwiPlByb2Nlc3Mgd2l0aGluIEFuZ3VsYXIgem9uZTwvYnV0dG9uPlxyXG4gKiAgICAgPGJ1dHRvbiAoY2xpY2spPVwicHJvY2Vzc091dHNpZGVPZkFuZ3VsYXJab25lKClcIj5Qcm9jZXNzIG91dHNpZGUgb2YgQW5ndWxhciB6b25lPC9idXR0b24+XHJcbiAqICAgYCxcclxuICogICBkaXJlY3RpdmVzOiBbTmdJZl1cclxuICogfSlcclxuICogZXhwb3J0IGNsYXNzIE5nWm9uZURlbW8ge1xyXG4gKiAgIHByb2dyZXNzOiBudW1iZXIgPSAwO1xyXG4gKiAgIGxhYmVsOiBzdHJpbmc7XHJcbiAqXHJcbiAqICAgY29uc3RydWN0b3IocHJpdmF0ZSBfbmdab25lOiBOZ1pvbmUpIHt9XHJcbiAqXHJcbiAqICAgLy8gTG9vcCBpbnNpZGUgdGhlIEFuZ3VsYXIgem9uZVxyXG4gKiAgIC8vIHNvIHRoZSBVSSBET0VTIHJlZnJlc2ggYWZ0ZXIgZWFjaCBzZXRUaW1lb3V0IGN5Y2xlXHJcbiAqICAgcHJvY2Vzc1dpdGhpbkFuZ3VsYXJab25lKCkge1xyXG4gKiAgICAgdGhpcy5sYWJlbCA9ICdpbnNpZGUnO1xyXG4gKiAgICAgdGhpcy5wcm9ncmVzcyA9IDA7XHJcbiAqICAgICB0aGlzLl9pbmNyZWFzZVByb2dyZXNzKCgpID0+IGNvbnNvbGUubG9nKCdJbnNpZGUgRG9uZSEnKSk7XHJcbiAqICAgfVxyXG4gKlxyXG4gKiAgIC8vIExvb3Agb3V0c2lkZSBvZiB0aGUgQW5ndWxhciB6b25lXHJcbiAqICAgLy8gc28gdGhlIFVJIERPRVMgTk9UIHJlZnJlc2ggYWZ0ZXIgZWFjaCBzZXRUaW1lb3V0IGN5Y2xlXHJcbiAqICAgcHJvY2Vzc091dHNpZGVPZkFuZ3VsYXJab25lKCkge1xyXG4gKiAgICAgdGhpcy5sYWJlbCA9ICdvdXRzaWRlJztcclxuICogICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xyXG4gKiAgICAgdGhpcy5fbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICogICAgICAgdGhpcy5faW5jcmVhc2VQcm9ncmVzcygoKSA9PiB7XHJcbiAqICAgICAgIC8vIHJlZW50ZXIgdGhlIEFuZ3VsYXIgem9uZSBhbmQgZGlzcGxheSBkb25lXHJcbiAqICAgICAgIHRoaXMuX25nWm9uZS5ydW4oKCkgPT4ge2NvbnNvbGUubG9nKCdPdXRzaWRlIERvbmUhJykgfSk7XHJcbiAqICAgICB9fSkpO1xyXG4gKiAgIH1cclxuICpcclxuICpcclxuICogICBfaW5jcmVhc2VQcm9ncmVzcyhkb25lQ2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcclxuICogICAgIHRoaXMucHJvZ3Jlc3MgKz0gMTtcclxuICogICAgIGNvbnNvbGUubG9nKGBDdXJyZW50IHByb2dyZXNzOiAke3RoaXMucHJvZ3Jlc3N9JWApO1xyXG4gKlxyXG4gKiAgICAgaWYgKHRoaXMucHJvZ3Jlc3MgPCAxMDApIHtcclxuICogICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy5faW5jcmVhc2VQcm9ncmVzcyhkb25lQ2FsbGJhY2spKSwgMTApXHJcbiAqICAgICB9IGVsc2Uge1xyXG4gKiAgICAgICBkb25lQ2FsbGJhY2soKTtcclxuICogICAgIH1cclxuICogICB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG52YXIgTmdab25lID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtib29sfSBlbmFibGVMb25nU3RhY2tUcmFjZSB3aGV0aGVyIHRvIGVuYWJsZSBsb25nIHN0YWNrIHRyYWNlLiBUaGV5IHNob3VsZCBvbmx5IGJlXHJcbiAgICAgKiAgICAgICAgICAgICAgIGVuYWJsZWQgaW4gZGV2ZWxvcG1lbnQgbW9kZSBhcyB0aGV5IHNpZ25pZmljYW50bHkgaW1wYWN0IHBlcmYuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIE5nWm9uZShfYSkge1xyXG4gICAgICAgIHZhciBlbmFibGVMb25nU3RhY2tUcmFjZSA9IF9hLmVuYWJsZUxvbmdTdGFja1RyYWNlO1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9ydW5TY29wZSA9IHByb2ZpbGVfMS53dGZDcmVhdGVTY29wZShcIk5nWm9uZSNydW4oKVwiKTtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5fbWljcm90YXNrU2NvcGUgPSBwcm9maWxlXzEud3RmQ3JlYXRlU2NvcGUoXCJOZ1pvbmUjbWljcm90YXNrKClcIik7XHJcbiAgICAgICAgLy8gTnVtYmVyIG9mIG1pY3JvdGFza3MgcGVuZGluZyBmcm9tIF9pbm5lclpvbmUgKCYgZGVzY2VuZGFudHMpXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX3BlbmRpbmdNaWNyb3Rhc2tzID0gMDtcclxuICAgICAgICAvLyBXaGV0aGVyIHNvbWUgY29kZSBoYXMgYmVlbiBleGVjdXRlZCBpbiB0aGUgX2lubmVyWm9uZSAoJiBkZXNjZW5kYW50cykgaW4gdGhlIGN1cnJlbnQgdHVyblxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICB0aGlzLl9oYXNFeGVjdXRlZENvZGVJbklubmVyWm9uZSA9IGZhbHNlO1xyXG4gICAgICAgIC8vIHJ1bigpIGNhbGwgZGVwdGggaW4gX21vdW50Wm9uZS4gMCBhdCB0aGUgZW5kIG9mIGEgbWFjcm90YXNrXHJcbiAgICAgICAgLy8gem9uZS5ydW4oKCkgPT4geyAgICAgICAgIC8vIHRvcC1sZXZlbCBjYWxsXHJcbiAgICAgICAgLy8gICB6b25lLnJ1bigoKSA9PiB7fSk7ICAgIC8vIG5lc3RlZCBjYWxsIC0+IGluLXR1cm5cclxuICAgICAgICAvLyB9KTtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5fbmVzdGVkUnVuID0gMDtcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgdGhpcy5faW5WbVR1cm5Eb25lID0gZmFsc2U7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHRoaXMuX3BlbmRpbmdUaW1lb3V0cyA9IFtdO1xyXG4gICAgICAgIGlmIChsYW5nXzEuZ2xvYmFsLnpvbmUpIHtcclxuICAgICAgICAgICAgdGhpcy5fZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fbW91bnRab25lID0gbGFuZ18xLmdsb2JhbC56b25lO1xyXG4gICAgICAgICAgICB0aGlzLl9pbm5lclpvbmUgPSB0aGlzLl9jcmVhdGVJbm5lclpvbmUodGhpcy5fbW91bnRab25lLCBlbmFibGVMb25nU3RhY2tUcmFjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX21vdW50Wm9uZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSB6b25lIGhvb2sgdGhhdCBpcyBjYWxsZWQganVzdCBiZWZvcmUgYSBicm93c2VyIHRhc2sgdGhhdCBpcyBoYW5kbGVkIGJ5IEFuZ3VsYXJcclxuICAgICAqIGV4ZWN1dGVzLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBob29rIGlzIGNhbGxlZCBvbmNlIHBlciBicm93c2VyIHRhc2sgdGhhdCBpcyBoYW5kbGVkIGJ5IEFuZ3VsYXIuXHJcbiAgICAgKlxyXG4gICAgICogU2V0dGluZyB0aGUgaG9vayBvdmVycmlkZXMgYW55IHByZXZpb3VzbHkgc2V0IGhvb2suXHJcbiAgICAgKi9cclxuICAgIE5nWm9uZS5wcm90b3R5cGUub3ZlcnJpZGVPblR1cm5TdGFydCA9IGZ1bmN0aW9uIChvblR1cm5TdGFydEhvb2spIHtcclxuICAgICAgICB0aGlzLl9vblR1cm5TdGFydCA9IGxhbmdfMS5ub3JtYWxpemVCbGFuayhvblR1cm5TdGFydEhvb2spO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgem9uZSBob29rIHRoYXQgaXMgY2FsbGVkIGltbWVkaWF0ZWx5IGFmdGVyIEFuZ3VsYXIgem9uZSBpcyBkb25lIHByb2Nlc3NpbmcgdGhlIGN1cnJlbnRcclxuICAgICAqIHRhc2sgYW5kIGFueSBtaWNyb3Rhc2tzIHNjaGVkdWxlZCBmcm9tIHRoYXQgdGFzay5cclxuICAgICAqXHJcbiAgICAgKiBUaGlzIGlzIHdoZXJlIHdlIHR5cGljYWxseSBkbyBjaGFuZ2UtZGV0ZWN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBob29rIGlzIGNhbGxlZCBvbmNlIHBlciBicm93c2VyIHRhc2sgdGhhdCBpcyBoYW5kbGVkIGJ5IEFuZ3VsYXIuXHJcbiAgICAgKlxyXG4gICAgICogU2V0dGluZyB0aGUgaG9vayBvdmVycmlkZXMgYW55IHByZXZpb3VzbHkgc2V0IGhvb2suXHJcbiAgICAgKi9cclxuICAgIE5nWm9uZS5wcm90b3R5cGUub3ZlcnJpZGVPblR1cm5Eb25lID0gZnVuY3Rpb24gKG9uVHVybkRvbmVIb29rKSB7XHJcbiAgICAgICAgdGhpcy5fb25UdXJuRG9uZSA9IGxhbmdfMS5ub3JtYWxpemVCbGFuayhvblR1cm5Eb25lSG9vayk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSB6b25lIGhvb2sgdGhhdCBpcyBjYWxsZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGBvblR1cm5Eb25lYCBjYWxsYmFjayBpcyBjYWxsZWQgYW5kIGFueVxyXG4gICAgICogbWljcm9zdGFza3Mgc2NoZWR1bGVkIGZyb20gd2l0aGluIHRoYXQgY2FsbGJhY2sgYXJlIGRyYWluZWQuXHJcbiAgICAgKlxyXG4gICAgICogYG9uRXZlbnREb25lRm5gIGlzIGV4ZWN1dGVkIG91dHNpZGUgQW5ndWxhciB6b25lLCB3aGljaCBtZWFucyB0aGF0IHdlIHdpbGwgbm8gbG9uZ2VyIGF0dGVtcHQgdG9cclxuICAgICAqIHN5bmMgdGhlIFVJIHdpdGggYW55IG1vZGVsIGNoYW5nZXMgdGhhdCBvY2N1ciB3aXRoaW4gdGhpcyBjYWxsYmFjay5cclxuICAgICAqXHJcbiAgICAgKiBUaGlzIGhvb2sgaXMgdXNlZnVsIGZvciB2YWxpZGF0aW5nIGFwcGxpY2F0aW9uIHN0YXRlIChlLmcuIGluIGEgdGVzdCkuXHJcbiAgICAgKlxyXG4gICAgICogU2V0dGluZyB0aGUgaG9vayBvdmVycmlkZXMgYW55IHByZXZpb3VzbHkgc2V0IGhvb2suXHJcbiAgICAgKi9cclxuICAgIE5nWm9uZS5wcm90b3R5cGUub3ZlcnJpZGVPbkV2ZW50RG9uZSA9IGZ1bmN0aW9uIChvbkV2ZW50RG9uZUZuLCBvcHRfd2FpdEZvckFzeW5jKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAob3B0X3dhaXRGb3JBc3luYyA9PT0gdm9pZCAwKSB7IG9wdF93YWl0Rm9yQXN5bmMgPSBmYWxzZTsgfVxyXG4gICAgICAgIHZhciBub3JtYWxpemVkT25FdmVudERvbmUgPSBsYW5nXzEubm9ybWFsaXplQmxhbmsob25FdmVudERvbmVGbik7XHJcbiAgICAgICAgaWYgKG9wdF93YWl0Rm9yQXN5bmMpIHtcclxuICAgICAgICAgICAgdGhpcy5fb25FdmVudERvbmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLl9wZW5kaW5nVGltZW91dHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZE9uRXZlbnREb25lKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9vbkV2ZW50RG9uZSA9IG5vcm1hbGl6ZWRPbkV2ZW50RG9uZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSB6b25lIGhvb2sgdGhhdCBpcyBjYWxsZWQgd2hlbiBhbiBlcnJvciBpcyB0aHJvd24gaW4gdGhlIEFuZ3VsYXIgem9uZS5cclxuICAgICAqXHJcbiAgICAgKiBTZXR0aW5nIHRoZSBob29rIG92ZXJyaWRlcyBhbnkgcHJldmlvdXNseSBzZXQgaG9vay5cclxuICAgICAqL1xyXG4gICAgTmdab25lLnByb3RvdHlwZS5vdmVycmlkZU9uRXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKGVycm9ySGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuX29uRXJyb3JIYW5kbGVyID0gbGFuZ18xLm5vcm1hbGl6ZUJsYW5rKGVycm9ySGFuZGxlcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBFeGVjdXRlcyB0aGUgYGZuYCBmdW5jdGlvbiBzeW5jaHJvbm91c2x5IHdpdGhpbiB0aGUgQW5ndWxhciB6b25lIGFuZCByZXR1cm5zIHZhbHVlIHJldHVybmVkIGJ5XHJcbiAgICAgKiB0aGUgZnVuY3Rpb24uXHJcbiAgICAgKlxyXG4gICAgICogUnVubmluZyBmdW5jdGlvbnMgdmlhIGBydW5gIGFsbG93cyB5b3UgdG8gcmVlbnRlciBBbmd1bGFyIHpvbmUgZnJvbSBhIHRhc2sgdGhhdCB3YXMgZXhlY3V0ZWRcclxuICAgICAqIG91dHNpZGUgb2YgdGhlIEFuZ3VsYXIgem9uZSAodHlwaWNhbGx5IHN0YXJ0ZWQgdmlhIHtAbGluayAjcnVuT3V0c2lkZUFuZ3VsYXJ9KS5cclxuICAgICAqXHJcbiAgICAgKiBBbnkgZnV0dXJlIHRhc2tzIG9yIG1pY3JvdGFza3Mgc2NoZWR1bGVkIGZyb20gd2l0aGluIHRoaXMgZnVuY3Rpb24gd2lsbCBjb250aW51ZSBleGVjdXRpbmcgZnJvbVxyXG4gICAgICogd2l0aGluIHRoZSBBbmd1bGFyIHpvbmUuXHJcbiAgICAgKi9cclxuICAgIE5nWm9uZS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Rpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHMgPSB0aGlzLl9ydW5TY29wZSgpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyWm9uZS5ydW4oZm4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgcHJvZmlsZV8xLnd0ZkxlYXZlKHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24gc3luY2hyb25vdXNseSBpbiBBbmd1bGFyJ3MgcGFyZW50IHpvbmUgYW5kIHJldHVybnMgdmFsdWUgcmV0dXJuZWQgYnlcclxuICAgICAqIHRoZSBmdW5jdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBSdW5uaW5nIGZ1bmN0aW9ucyB2aWEgYHJ1bk91dHNpZGVBbmd1bGFyYCBhbGxvd3MgeW91IHRvIGVzY2FwZSBBbmd1bGFyJ3Mgem9uZSBhbmQgZG8gd29yayB0aGF0XHJcbiAgICAgKiBkb2Vzbid0IHRyaWdnZXIgQW5ndWxhciBjaGFuZ2UtZGV0ZWN0aW9uIG9yIGlzIHN1YmplY3QgdG8gQW5ndWxhcidzIGVycm9yIGhhbmRsaW5nLlxyXG4gICAgICpcclxuICAgICAqIEFueSBmdXR1cmUgdGFza3Mgb3IgbWljcm90YXNrcyBzY2hlZHVsZWQgZnJvbSB3aXRoaW4gdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnRpbnVlIGV4ZWN1dGluZyBmcm9tXHJcbiAgICAgKiBvdXRzaWRlIG9mIHRoZSBBbmd1bGFyIHpvbmUuXHJcbiAgICAgKlxyXG4gICAgICogVXNlIHtAbGluayAjcnVufSB0byByZWVudGVyIHRoZSBBbmd1bGFyIHpvbmUgYW5kIGRvIHdvcmsgdGhhdCB1cGRhdGVzIHRoZSBhcHBsaWNhdGlvbiBtb2RlbC5cclxuICAgICAqL1xyXG4gICAgTmdab25lLnByb3RvdHlwZS5ydW5PdXRzaWRlQW5ndWxhciA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZm4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb3VudFpvbmUucnVuKGZuKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgTmdab25lLnByb3RvdHlwZS5fY3JlYXRlSW5uZXJab25lID0gZnVuY3Rpb24gKHpvbmUsIGVuYWJsZUxvbmdTdGFja1RyYWNlKSB7XHJcbiAgICAgICAgdmFyIG1pY3JvdGFza1Njb3BlID0gdGhpcy5fbWljcm90YXNrU2NvcGU7XHJcbiAgICAgICAgdmFyIG5nWm9uZSA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGVycm9ySGFuZGxpbmc7XHJcbiAgICAgICAgaWYgKGVuYWJsZUxvbmdTdGFja1RyYWNlKSB7XHJcbiAgICAgICAgICAgIGVycm9ySGFuZGxpbmcgPSBjb2xsZWN0aW9uXzEuU3RyaW5nTWFwV3JhcHBlci5tZXJnZShab25lLmxvbmdTdGFja1RyYWNlWm9uZSwgeyBvbkVycm9yOiBmdW5jdGlvbiAoZSkgeyBuZ1pvbmUuX29uRXJyb3IodGhpcywgZSk7IH0gfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlcnJvckhhbmRsaW5nID0geyBvbkVycm9yOiBmdW5jdGlvbiAoZSkgeyBuZ1pvbmUuX29uRXJyb3IodGhpcywgZSk7IH0gfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHpvbmUuZm9yayhlcnJvckhhbmRsaW5nKVxyXG4gICAgICAgICAgICAuZm9yayh7XHJcbiAgICAgICAgICAgICckcnVuJzogZnVuY3Rpb24gKHBhcmVudFJ1bikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZ1pvbmUuX25lc3RlZFJ1bisrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5nWm9uZS5faGFzRXhlY3V0ZWRDb2RlSW5Jbm5lclpvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nWm9uZS5faGFzRXhlY3V0ZWRDb2RlSW5Jbm5lclpvbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5nWm9uZS5fb25UdXJuU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRSdW4uY2FsbChuZ1pvbmUuX2lubmVyWm9uZSwgbmdab25lLl9vblR1cm5TdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudFJ1bi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmdab25lLl9uZXN0ZWRSdW4tLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIG1vcmUgcGVuZGluZyBtaWNyb3Rhc2tzLCB3ZSBhcmUgYXQgdGhlIGVuZCBvZiBhIFZNIHR1cm4gKG9yIGluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uVHVyblN0YXJ0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBfbmVzdGVkUnVuIHdpbGwgYmUgMCBhdCB0aGUgZW5kIG9mIGEgbWFjcm90YXNrcyAoaXQgY291bGQgYmUgPiAwIHdoZW4gdGhlcmUgYXJlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5lc3RlZCBjYWxsc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBydW4oKSkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZ1pvbmUuX3BlbmRpbmdNaWNyb3Rhc2tzID09IDAgJiYgbmdab25lLl9uZXN0ZWRSdW4gPT0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIXRoaXMuX2luVm1UdXJuRG9uZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5nWm9uZS5fb25UdXJuRG9uZSAmJiBuZ1pvbmUuX2hhc0V4ZWN1dGVkQ29kZUluSW5uZXJab25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5WbVR1cm5Eb25lID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50UnVuLmNhbGwobmdab25lLl9pbm5lclpvbmUsIG5nWm9uZS5fb25UdXJuRG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pblZtVHVybkRvbmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmdab25lLl9oYXNFeGVjdXRlZENvZGVJbklubmVyWm9uZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZ1pvbmUuX3BlbmRpbmdNaWNyb3Rhc2tzID09PSAwICYmIGxhbmdfMS5pc1ByZXNlbnQobmdab25lLl9vbkV2ZW50RG9uZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIobmdab25lLl9vbkV2ZW50RG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnJHNjaGVkdWxlTWljcm90YXNrJzogZnVuY3Rpb24gKHBhcmVudFNjaGVkdWxlTWljcm90YXNrKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmdab25lLl9wZW5kaW5nTWljcm90YXNrcysrO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtaWNyb3Rhc2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gbWljcm90YXNrU2NvcGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZ1pvbmUuX3BlbmRpbmdNaWNyb3Rhc2tzLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9maWxlXzEud3RmTGVhdmUocyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudFNjaGVkdWxlTWljcm90YXNrLmNhbGwodGhpcywgbWljcm90YXNrKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICckc2V0VGltZW91dCc6IGZ1bmN0aW9uIChwYXJlbnRTZXRUaW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZuLCBkZWxheSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm4oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbl8xLkxpc3RXcmFwcGVyLnJlbW92ZShuZ1pvbmUuX3BlbmRpbmdUaW1lb3V0cywgaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBwYXJlbnRTZXRUaW1lb3V0KGNiLCBkZWxheSwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmdab25lLl9wZW5kaW5nVGltZW91dHMucHVzaChpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJyRjbGVhclRpbWVvdXQnOiBmdW5jdGlvbiAocGFyZW50Q2xlYXJUaW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q2xlYXJUaW1lb3V0KGlkKTtcclxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uXzEuTGlzdFdyYXBwZXIucmVtb3ZlKG5nWm9uZS5fcGVuZGluZ1RpbWVvdXRzLCBpZCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5uZXJab25lOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgTmdab25lLnByb3RvdHlwZS5fb25FcnJvciA9IGZ1bmN0aW9uICh6b25lLCBlKSB7XHJcbiAgICAgICAgaWYgKGxhbmdfMS5pc1ByZXNlbnQodGhpcy5fb25FcnJvckhhbmRsZXIpKSB7XHJcbiAgICAgICAgICAgIHZhciB0cmFjZSA9IFtsYW5nXzEubm9ybWFsaXplQmxhbmsoZS5zdGFjayldO1xyXG4gICAgICAgICAgICB3aGlsZSAoem9uZSAmJiB6b25lLmNvbnN0cnVjdGVkQXRFeGNlcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRyYWNlLnB1c2goem9uZS5jb25zdHJ1Y3RlZEF0RXhjZXB0aW9uLmdldCgpKTtcclxuICAgICAgICAgICAgICAgIHpvbmUgPSB6b25lLnBhcmVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9vbkVycm9ySGFuZGxlcihlLCB0cmFjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnIyMgX29uRXJyb3IgIyMnKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZS5zdGFjayk7XHJcbiAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBOZ1pvbmU7XHJcbn0pKCk7XHJcbmV4cG9ydHMuTmdab25lID0gTmdab25lO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZ196b25lLmpzLm1hcCIsIid1c2Ugc3RyaWN0JzsvLyBOb3RlOiBUaGlzIGNsYXNzIGlzIG9ubHkgaGVyZSBzbyB0aGF0IHdlIGNhbiByZWZlcmVuY2UgaXQgZnJvbSBUeXBlU2NyaXB0IGNvZGUuXHJcbi8vIFRoZSBhY3R1YWwgaW1wbGVtZW50YXRpb24gbGl2ZXMgdW5kZXIgbW9kdWxlc19kYXJ0LlxyXG4vLyBUT0RPKHRib3NjaCk6IE1vdmUgdGhlIGNvcnJlc3BvbmRpbmcgY29kZSBpbnRvIGFuZ3VsYXIyL3NyYy9jb3JlL2NvbXBpbGVyIG9uY2VcclxuLy8gdGhlIG5ldyBjb21waWxlciBpcyBkb25lLlxyXG52YXIgQ29kZWdlbiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb2RlZ2VuKG1vZHVsZUFsaWFzKSB7XHJcbiAgICB9XHJcbiAgICBDb2RlZ2VuLnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uICh0eXBlTmFtZSwgY2hhbmdlRGV0ZWN0b3JUeXBlTmFtZSwgZGVmKSB7XHJcbiAgICAgICAgdGhyb3cgXCJOb3QgaW1wbGVtZW50ZWQgaW4gSlNcIjtcclxuICAgIH07XHJcbiAgICBDb2RlZ2VuLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgXCJOb3QgaW1wbGVtZW50ZWQgaW4gSlNcIjsgfTtcclxuICAgIHJldHVybiBDb2RlZ2VuO1xyXG59KSgpO1xyXG5leHBvcnRzLkNvZGVnZW4gPSBDb2RlZ2VuO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFuZ2VfZGV0ZWN0b3JfY29kZWdlbi5qcy5tYXAiLCIvLyBUaGlzIGZpbGUgaXMgYXV0b2dlbmVyYXRlZCB2aWEgdGhlIGBjb21tb25qc2AgR3J1bnQgdGFzay4gWW91IGNhbiByZXF1aXJlKCkgdGhpcyBmaWxlIGluIGEgQ29tbW9uSlMgZW52aXJvbm1lbnQuXG5yZXF1aXJlKCcuLi8uLi9qcy90cmFuc2l0aW9uLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL2FsZXJ0LmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL2J1dHRvbi5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9jYXJvdXNlbC5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9jb2xsYXBzZS5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9kcm9wZG93bi5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9tb2RhbC5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy90b29sdGlwLmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL3BvcG92ZXIuanMnKVxucmVxdWlyZSgnLi4vLi4vanMvc2Nyb2xsc3B5LmpzJylcbnJlcXVpcmUoJy4uLy4uL2pzL3RhYi5qcycpXG5yZXF1aXJlKCcuLi8uLi9qcy9hZmZpeC5qcycpIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGFmZml4LmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYWZmaXhcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBBRkZJWCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQWZmaXggPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBZmZpeC5ERUZBVUxUUywgb3B0aW9ucylcblxuICAgIHRoaXMuJHRhcmdldCA9ICQodGhpcy5vcHRpb25zLnRhcmdldClcbiAgICAgIC5vbignc2Nyb2xsLmJzLmFmZml4LmRhdGEtYXBpJywgJC5wcm94eSh0aGlzLmNoZWNrUG9zaXRpb24sIHRoaXMpKVxuICAgICAgLm9uKCdjbGljay5icy5hZmZpeC5kYXRhLWFwaScsICAkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3AsIHRoaXMpKVxuXG4gICAgdGhpcy4kZWxlbWVudCAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5hZmZpeGVkICAgICAgPSBudWxsXG4gICAgdGhpcy51bnBpbiAgICAgICAgPSBudWxsXG4gICAgdGhpcy5waW5uZWRPZmZzZXQgPSBudWxsXG5cbiAgICB0aGlzLmNoZWNrUG9zaXRpb24oKVxuICB9XG5cbiAgQWZmaXguVkVSU0lPTiAgPSAnMy4zLjUnXG5cbiAgQWZmaXguUkVTRVQgICAgPSAnYWZmaXggYWZmaXgtdG9wIGFmZml4LWJvdHRvbSdcblxuICBBZmZpeC5ERUZBVUxUUyA9IHtcbiAgICBvZmZzZXQ6IDAsXG4gICAgdGFyZ2V0OiB3aW5kb3dcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uIChzY3JvbGxIZWlnaHQsIGhlaWdodCwgb2Zmc2V0VG9wLCBvZmZzZXRCb3R0b20pIHtcbiAgICB2YXIgc2Nyb2xsVG9wICAgID0gdGhpcy4kdGFyZ2V0LnNjcm9sbFRvcCgpXG4gICAgdmFyIHBvc2l0aW9uICAgICA9IHRoaXMuJGVsZW1lbnQub2Zmc2V0KClcbiAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gdGhpcy4kdGFyZ2V0LmhlaWdodCgpXG5cbiAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwgJiYgdGhpcy5hZmZpeGVkID09ICd0b3AnKSByZXR1cm4gc2Nyb2xsVG9wIDwgb2Zmc2V0VG9wID8gJ3RvcCcgOiBmYWxzZVxuXG4gICAgaWYgKHRoaXMuYWZmaXhlZCA9PSAnYm90dG9tJykge1xuICAgICAgaWYgKG9mZnNldFRvcCAhPSBudWxsKSByZXR1cm4gKHNjcm9sbFRvcCArIHRoaXMudW5waW4gPD0gcG9zaXRpb24udG9wKSA/IGZhbHNlIDogJ2JvdHRvbSdcbiAgICAgIHJldHVybiAoc2Nyb2xsVG9wICsgdGFyZ2V0SGVpZ2h0IDw9IHNjcm9sbEhlaWdodCAtIG9mZnNldEJvdHRvbSkgPyBmYWxzZSA6ICdib3R0b20nXG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxpemluZyAgID0gdGhpcy5hZmZpeGVkID09IG51bGxcbiAgICB2YXIgY29sbGlkZXJUb3AgICAgPSBpbml0aWFsaXppbmcgPyBzY3JvbGxUb3AgOiBwb3NpdGlvbi50b3BcbiAgICB2YXIgY29sbGlkZXJIZWlnaHQgPSBpbml0aWFsaXppbmcgPyB0YXJnZXRIZWlnaHQgOiBoZWlnaHRcblxuICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiBzY3JvbGxUb3AgPD0gb2Zmc2V0VG9wKSByZXR1cm4gJ3RvcCdcbiAgICBpZiAob2Zmc2V0Qm90dG9tICE9IG51bGwgJiYgKGNvbGxpZGVyVG9wICsgY29sbGlkZXJIZWlnaHQgPj0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKSkgcmV0dXJuICdib3R0b20nXG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5nZXRQaW5uZWRPZmZzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucGlubmVkT2Zmc2V0KSByZXR1cm4gdGhpcy5waW5uZWRPZmZzZXRcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKEFmZml4LlJFU0VUKS5hZGRDbGFzcygnYWZmaXgnKVxuICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKClcbiAgICB2YXIgcG9zaXRpb24gID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVxuICAgIHJldHVybiAodGhpcy5waW5uZWRPZmZzZXQgPSBwb3NpdGlvbi50b3AgLSBzY3JvbGxUb3ApXG4gIH1cblxuICBBZmZpeC5wcm90b3R5cGUuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dCgkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcyksIDEpXG4gIH1cblxuICBBZmZpeC5wcm90b3R5cGUuY2hlY2tQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHJldHVyblxuXG4gICAgdmFyIGhlaWdodCAgICAgICA9IHRoaXMuJGVsZW1lbnQuaGVpZ2h0KClcbiAgICB2YXIgb2Zmc2V0ICAgICAgID0gdGhpcy5vcHRpb25zLm9mZnNldFxuICAgIHZhciBvZmZzZXRUb3AgICAgPSBvZmZzZXQudG9wXG4gICAgdmFyIG9mZnNldEJvdHRvbSA9IG9mZnNldC5ib3R0b21cbiAgICB2YXIgc2Nyb2xsSGVpZ2h0ID0gTWF0aC5tYXgoJChkb2N1bWVudCkuaGVpZ2h0KCksICQoZG9jdW1lbnQuYm9keSkuaGVpZ2h0KCkpXG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCAhPSAnb2JqZWN0JykgICAgICAgICBvZmZzZXRCb3R0b20gPSBvZmZzZXRUb3AgPSBvZmZzZXRcbiAgICBpZiAodHlwZW9mIG9mZnNldFRvcCA9PSAnZnVuY3Rpb24nKSAgICBvZmZzZXRUb3AgICAgPSBvZmZzZXQudG9wKHRoaXMuJGVsZW1lbnQpXG4gICAgaWYgKHR5cGVvZiBvZmZzZXRCb3R0b20gPT0gJ2Z1bmN0aW9uJykgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0LmJvdHRvbSh0aGlzLiRlbGVtZW50KVxuXG4gICAgdmFyIGFmZml4ID0gdGhpcy5nZXRTdGF0ZShzY3JvbGxIZWlnaHQsIGhlaWdodCwgb2Zmc2V0VG9wLCBvZmZzZXRCb3R0b20pXG5cbiAgICBpZiAodGhpcy5hZmZpeGVkICE9IGFmZml4KSB7XG4gICAgICBpZiAodGhpcy51bnBpbiAhPSBudWxsKSB0aGlzLiRlbGVtZW50LmNzcygndG9wJywgJycpXG5cbiAgICAgIHZhciBhZmZpeFR5cGUgPSAnYWZmaXgnICsgKGFmZml4ID8gJy0nICsgYWZmaXggOiAnJylcbiAgICAgIHZhciBlICAgICAgICAgPSAkLkV2ZW50KGFmZml4VHlwZSArICcuYnMuYWZmaXgnKVxuXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgICB0aGlzLmFmZml4ZWQgPSBhZmZpeFxuICAgICAgdGhpcy51bnBpbiA9IGFmZml4ID09ICdib3R0b20nID8gdGhpcy5nZXRQaW5uZWRPZmZzZXQoKSA6IG51bGxcblxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAucmVtb3ZlQ2xhc3MoQWZmaXguUkVTRVQpXG4gICAgICAgIC5hZGRDbGFzcyhhZmZpeFR5cGUpXG4gICAgICAgIC50cmlnZ2VyKGFmZml4VHlwZS5yZXBsYWNlKCdhZmZpeCcsICdhZmZpeGVkJykgKyAnLmJzLmFmZml4JylcbiAgICB9XG5cbiAgICBpZiAoYWZmaXggPT0gJ2JvdHRvbScpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2Zmc2V0KHtcbiAgICAgICAgdG9wOiBzY3JvbGxIZWlnaHQgLSBoZWlnaHQgLSBvZmZzZXRCb3R0b21cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cblxuICAvLyBBRkZJWCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5hZmZpeCcpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYWZmaXgnLCAoZGF0YSA9IG5ldyBBZmZpeCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYWZmaXhcblxuICAkLmZuLmFmZml4ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYWZmaXguQ29uc3RydWN0b3IgPSBBZmZpeFxuXG5cbiAgLy8gQUZGSVggTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmFmZml4Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5hZmZpeCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFGRklYIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXNweT1cImFmZml4XCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhID0gJHNweS5kYXRhKClcblxuICAgICAgZGF0YS5vZmZzZXQgPSBkYXRhLm9mZnNldCB8fCB7fVxuXG4gICAgICBpZiAoZGF0YS5vZmZzZXRCb3R0b20gIT0gbnVsbCkgZGF0YS5vZmZzZXQuYm90dG9tID0gZGF0YS5vZmZzZXRCb3R0b21cbiAgICAgIGlmIChkYXRhLm9mZnNldFRvcCAgICAhPSBudWxsKSBkYXRhLm9mZnNldC50b3AgICAgPSBkYXRhLm9mZnNldFRvcFxuXG4gICAgICBQbHVnaW4uY2FsbCgkc3B5LCBkYXRhKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBhbGVydC5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2FsZXJ0c1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEFMRVJUIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBkaXNtaXNzID0gJ1tkYXRhLWRpc21pc3M9XCJhbGVydFwiXSdcbiAgdmFyIEFsZXJ0ICAgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAkKGVsKS5vbignY2xpY2snLCBkaXNtaXNzLCB0aGlzLmNsb3NlKVxuICB9XG5cbiAgQWxlcnQuVkVSU0lPTiA9ICczLjMuNSdcblxuICBBbGVydC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgQWxlcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgICAgPSAkKHRoaXMpXG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKVxuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgJiYgc2VsZWN0b3IucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB9XG5cbiAgICB2YXIgJHBhcmVudCA9ICQoc2VsZWN0b3IpXG5cbiAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBpZiAoISRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICAkcGFyZW50ID0gJHRoaXMuY2xvc2VzdCgnLmFsZXJ0JylcbiAgICB9XG5cbiAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ2Nsb3NlLmJzLmFsZXJ0JykpXG5cbiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAkcGFyZW50LnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICBmdW5jdGlvbiByZW1vdmVFbGVtZW50KCkge1xuICAgICAgLy8gZGV0YWNoIGZyb20gcGFyZW50LCBmaXJlIGV2ZW50IHRoZW4gY2xlYW4gdXAgZGF0YVxuICAgICAgJHBhcmVudC5kZXRhY2goKS50cmlnZ2VyKCdjbG9zZWQuYnMuYWxlcnQnKS5yZW1vdmUoKVxuICAgIH1cblxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmICRwYXJlbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAkcGFyZW50XG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIHJlbW92ZUVsZW1lbnQpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChBbGVydC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICByZW1vdmVFbGVtZW50KClcbiAgfVxuXG5cbiAgLy8gQUxFUlQgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy5hbGVydCcpXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYWxlcnQnLCAoZGF0YSA9IG5ldyBBbGVydCh0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dLmNhbGwoJHRoaXMpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmFsZXJ0XG5cbiAgJC5mbi5hbGVydCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmFsZXJ0LkNvbnN0cnVjdG9yID0gQWxlcnRcblxuXG4gIC8vIEFMRVJUIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5hbGVydC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uYWxlcnQgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBBTEVSVCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5hbGVydC5kYXRhLWFwaScsIGRpc21pc3MsIEFsZXJ0LnByb3RvdHlwZS5jbG9zZSlcblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGJ1dHRvbi5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2J1dHRvbnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBCVVRUT04gUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIEJ1dHRvbiA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5vcHRpb25zICAgPSAkLmV4dGVuZCh7fSwgQnV0dG9uLkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2VcbiAgfVxuXG4gIEJ1dHRvbi5WRVJTSU9OICA9ICczLjMuNSdcblxuICBCdXR0b24uREVGQVVMVFMgPSB7XG4gICAgbG9hZGluZ1RleHQ6ICdsb2FkaW5nLi4uJ1xuICB9XG5cbiAgQnV0dG9uLnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHZhciBkICAgID0gJ2Rpc2FibGVkJ1xuICAgIHZhciAkZWwgID0gdGhpcy4kZWxlbWVudFxuICAgIHZhciB2YWwgID0gJGVsLmlzKCdpbnB1dCcpID8gJ3ZhbCcgOiAnaHRtbCdcbiAgICB2YXIgZGF0YSA9ICRlbC5kYXRhKClcblxuICAgIHN0YXRlICs9ICdUZXh0J1xuXG4gICAgaWYgKGRhdGEucmVzZXRUZXh0ID09IG51bGwpICRlbC5kYXRhKCdyZXNldFRleHQnLCAkZWxbdmFsXSgpKVxuXG4gICAgLy8gcHVzaCB0byBldmVudCBsb29wIHRvIGFsbG93IGZvcm1zIHRvIHN1Ym1pdFxuICAgIHNldFRpbWVvdXQoJC5wcm94eShmdW5jdGlvbiAoKSB7XG4gICAgICAkZWxbdmFsXShkYXRhW3N0YXRlXSA9PSBudWxsID8gdGhpcy5vcHRpb25zW3N0YXRlXSA6IGRhdGFbc3RhdGVdKVxuXG4gICAgICBpZiAoc3RhdGUgPT0gJ2xvYWRpbmdUZXh0Jykge1xuICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWVcbiAgICAgICAgJGVsLmFkZENsYXNzKGQpLmF0dHIoZCwgZClcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0xvYWRpbmcpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZVxuICAgICAgICAkZWwucmVtb3ZlQ2xhc3MoZCkucmVtb3ZlQXR0cihkKVxuICAgICAgfVxuICAgIH0sIHRoaXMpLCAwKVxuICB9XG5cbiAgQnV0dG9uLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNoYW5nZWQgPSB0cnVlXG4gICAgdmFyICRwYXJlbnQgPSB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nKVxuXG4gICAgaWYgKCRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICB2YXIgJGlucHV0ID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbnB1dCcpXG4gICAgICBpZiAoJGlucHV0LnByb3AoJ3R5cGUnKSA9PSAncmFkaW8nKSB7XG4gICAgICAgIGlmICgkaW5wdXQucHJvcCgnY2hlY2tlZCcpKSBjaGFuZ2VkID0gZmFsc2VcbiAgICAgICAgJHBhcmVudC5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB9IGVsc2UgaWYgKCRpbnB1dC5wcm9wKCd0eXBlJykgPT0gJ2NoZWNrYm94Jykge1xuICAgICAgICBpZiAoKCRpbnB1dC5wcm9wKCdjaGVja2VkJykpICE9PSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSkgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB9XG4gICAgICAkaW5wdXQucHJvcCgnY2hlY2tlZCcsIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2FjdGl2ZScpKVxuICAgICAgaWYgKGNoYW5nZWQpICRpbnB1dC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtcHJlc3NlZCcsICF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSlcbiAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgfVxuICB9XG5cblxuICAvLyBCVVRUT04gUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmJ1dHRvbicpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYnV0dG9uJywgKGRhdGEgPSBuZXcgQnV0dG9uKHRoaXMsIG9wdGlvbnMpKSlcblxuICAgICAgaWYgKG9wdGlvbiA9PSAndG9nZ2xlJykgZGF0YS50b2dnbGUoKVxuICAgICAgZWxzZSBpZiAob3B0aW9uKSBkYXRhLnNldFN0YXRlKG9wdGlvbilcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYnV0dG9uXG5cbiAgJC5mbi5idXR0b24gICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5idXR0b24uQ29uc3RydWN0b3IgPSBCdXR0b25cblxuXG4gIC8vIEJVVFRPTiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmJ1dHRvbi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uYnV0dG9uID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQlVUVE9OIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy5idXR0b24uZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgJGJ0biA9ICQoZS50YXJnZXQpXG4gICAgICBpZiAoISRidG4uaGFzQ2xhc3MoJ2J0bicpKSAkYnRuID0gJGJ0bi5jbG9zZXN0KCcuYnRuJylcbiAgICAgIFBsdWdpbi5jYWxsKCRidG4sICd0b2dnbGUnKVxuICAgICAgaWYgKCEoJChlLnRhcmdldCkuaXMoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScpIHx8ICQoZS50YXJnZXQpLmlzKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKSkpIGUucHJldmVudERlZmF1bHQoKVxuICAgIH0pXG4gICAgLm9uKCdmb2N1cy5icy5idXR0b24uZGF0YS1hcGkgYmx1ci5icy5idXR0b24uZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuYnRuJykudG9nZ2xlQ2xhc3MoJ2ZvY3VzJywgL15mb2N1cyhpbik/JC8udGVzdChlLnR5cGUpKVxuICAgIH0pXG5cbn0oalF1ZXJ5KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBjYXJvdXNlbC5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2Nhcm91c2VsXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQ0FST1VTRUwgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIENhcm91c2VsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICAgID0gJChlbGVtZW50KVxuICAgIHRoaXMuJGluZGljYXRvcnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5jYXJvdXNlbC1pbmRpY2F0b3JzJylcbiAgICB0aGlzLm9wdGlvbnMgICAgID0gb3B0aW9uc1xuICAgIHRoaXMucGF1c2VkICAgICAgPSBudWxsXG4gICAgdGhpcy5zbGlkaW5nICAgICA9IG51bGxcbiAgICB0aGlzLmludGVydmFsICAgID0gbnVsbFxuICAgIHRoaXMuJGFjdGl2ZSAgICAgPSBudWxsXG4gICAgdGhpcy4kaXRlbXMgICAgICA9IG51bGxcblxuICAgIHRoaXMub3B0aW9ucy5rZXlib2FyZCAmJiB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLmtleWRvd24sIHRoaXMpKVxuXG4gICAgdGhpcy5vcHRpb25zLnBhdXNlID09ICdob3ZlcicgJiYgISgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpICYmIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbignbW91c2VlbnRlci5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5wYXVzZSwgdGhpcykpXG4gICAgICAub24oJ21vdXNlbGVhdmUuYnMuY2Fyb3VzZWwnLCAkLnByb3h5KHRoaXMuY3ljbGUsIHRoaXMpKVxuICB9XG5cbiAgQ2Fyb3VzZWwuVkVSU0lPTiAgPSAnMy4zLjUnXG5cbiAgQ2Fyb3VzZWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDYwMFxuXG4gIENhcm91c2VsLkRFRkFVTFRTID0ge1xuICAgIGludGVydmFsOiA1MDAwLFxuICAgIHBhdXNlOiAnaG92ZXInLFxuICAgIHdyYXA6IHRydWUsXG4gICAga2V5Ym9hcmQ6IHRydWVcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSkgcmV0dXJuXG4gICAgc3dpdGNoIChlLndoaWNoKSB7XG4gICAgICBjYXNlIDM3OiB0aGlzLnByZXYoKTsgYnJlYWtcbiAgICAgIGNhc2UgMzk6IHRoaXMubmV4dCgpOyBicmVha1xuICAgICAgZGVmYXVsdDogcmV0dXJuXG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuY3ljbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUgfHwgKHRoaXMucGF1c2VkID0gZmFsc2UpXG5cbiAgICB0aGlzLmludGVydmFsICYmIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbClcblxuICAgIHRoaXMub3B0aW9ucy5pbnRlcnZhbFxuICAgICAgJiYgIXRoaXMucGF1c2VkXG4gICAgICAmJiAodGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCQucHJveHkodGhpcy5uZXh0LCB0aGlzKSwgdGhpcy5vcHRpb25zLmludGVydmFsKSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuZ2V0SXRlbUluZGV4ID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB0aGlzLiRpdGVtcyA9IGl0ZW0ucGFyZW50KCkuY2hpbGRyZW4oJy5pdGVtJylcbiAgICByZXR1cm4gdGhpcy4kaXRlbXMuaW5kZXgoaXRlbSB8fCB0aGlzLiRhY3RpdmUpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuZ2V0SXRlbUZvckRpcmVjdGlvbiA9IGZ1bmN0aW9uIChkaXJlY3Rpb24sIGFjdGl2ZSkge1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuZ2V0SXRlbUluZGV4KGFjdGl2ZSlcbiAgICB2YXIgd2lsbFdyYXAgPSAoZGlyZWN0aW9uID09ICdwcmV2JyAmJiBhY3RpdmVJbmRleCA9PT0gMClcbiAgICAgICAgICAgICAgICB8fCAoZGlyZWN0aW9uID09ICduZXh0JyAmJiBhY3RpdmVJbmRleCA9PSAodGhpcy4kaXRlbXMubGVuZ3RoIC0gMSkpXG4gICAgaWYgKHdpbGxXcmFwICYmICF0aGlzLm9wdGlvbnMud3JhcCkgcmV0dXJuIGFjdGl2ZVxuICAgIHZhciBkZWx0YSA9IGRpcmVjdGlvbiA9PSAncHJldicgPyAtMSA6IDFcbiAgICB2YXIgaXRlbUluZGV4ID0gKGFjdGl2ZUluZGV4ICsgZGVsdGEpICUgdGhpcy4kaXRlbXMubGVuZ3RoXG4gICAgcmV0dXJuIHRoaXMuJGl0ZW1zLmVxKGl0ZW1JbmRleClcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICB2YXIgdGhhdCAgICAgICAgPSB0aGlzXG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgodGhpcy4kYWN0aXZlID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXRlbS5hY3RpdmUnKSlcblxuICAgIGlmIChwb3MgPiAodGhpcy4kaXRlbXMubGVuZ3RoIC0gMSkgfHwgcG9zIDwgMCkgcmV0dXJuXG5cbiAgICBpZiAodGhpcy5zbGlkaW5nKSAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudC5vbmUoJ3NsaWQuYnMuY2Fyb3VzZWwnLCBmdW5jdGlvbiAoKSB7IHRoYXQudG8ocG9zKSB9KSAvLyB5ZXMsIFwic2xpZFwiXG4gICAgaWYgKGFjdGl2ZUluZGV4ID09IHBvcykgcmV0dXJuIHRoaXMucGF1c2UoKS5jeWNsZSgpXG5cbiAgICByZXR1cm4gdGhpcy5zbGlkZShwb3MgPiBhY3RpdmVJbmRleCA/ICduZXh0JyA6ICdwcmV2JywgdGhpcy4kaXRlbXMuZXEocG9zKSlcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZSB8fCAodGhpcy5wYXVzZWQgPSB0cnVlKVxuXG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuZmluZCgnLm5leHQsIC5wcmV2JykubGVuZ3RoICYmICQuc3VwcG9ydC50cmFuc2l0aW9uKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kKVxuICAgICAgdGhpcy5jeWNsZSh0cnVlKVxuICAgIH1cblxuICAgIHRoaXMuaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUoJ25leHQnKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUoJ3ByZXYnKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnNsaWRlID0gZnVuY3Rpb24gKHR5cGUsIG5leHQpIHtcbiAgICB2YXIgJGFjdGl2ZSAgID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXRlbS5hY3RpdmUnKVxuICAgIHZhciAkbmV4dCAgICAgPSBuZXh0IHx8IHRoaXMuZ2V0SXRlbUZvckRpcmVjdGlvbih0eXBlLCAkYWN0aXZlKVxuICAgIHZhciBpc0N5Y2xpbmcgPSB0aGlzLmludGVydmFsXG4gICAgdmFyIGRpcmVjdGlvbiA9IHR5cGUgPT0gJ25leHQnID8gJ2xlZnQnIDogJ3JpZ2h0J1xuICAgIHZhciB0aGF0ICAgICAgPSB0aGlzXG5cbiAgICBpZiAoJG5leHQuaGFzQ2xhc3MoJ2FjdGl2ZScpKSByZXR1cm4gKHRoaXMuc2xpZGluZyA9IGZhbHNlKVxuXG4gICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSAkbmV4dFswXVxuICAgIHZhciBzbGlkZUV2ZW50ID0gJC5FdmVudCgnc2xpZGUuYnMuY2Fyb3VzZWwnLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LFxuICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb25cbiAgICB9KVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzbGlkZUV2ZW50KVxuICAgIGlmIChzbGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuc2xpZGluZyA9IHRydWVcblxuICAgIGlzQ3ljbGluZyAmJiB0aGlzLnBhdXNlKClcblxuICAgIGlmICh0aGlzLiRpbmRpY2F0b3JzLmxlbmd0aCkge1xuICAgICAgdGhpcy4kaW5kaWNhdG9ycy5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB2YXIgJG5leHRJbmRpY2F0b3IgPSAkKHRoaXMuJGluZGljYXRvcnMuY2hpbGRyZW4oKVt0aGlzLmdldEl0ZW1JbmRleCgkbmV4dCldKVxuICAgICAgJG5leHRJbmRpY2F0b3IgJiYgJG5leHRJbmRpY2F0b3IuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgfVxuXG4gICAgdmFyIHNsaWRFdmVudCA9ICQuRXZlbnQoJ3NsaWQuYnMuY2Fyb3VzZWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsIGRpcmVjdGlvbjogZGlyZWN0aW9uIH0pIC8vIHllcywgXCJzbGlkXCJcbiAgICBpZiAoJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnc2xpZGUnKSkge1xuICAgICAgJG5leHQuYWRkQ2xhc3ModHlwZSlcbiAgICAgICRuZXh0WzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuICAgICAgJGFjdGl2ZS5hZGRDbGFzcyhkaXJlY3Rpb24pXG4gICAgICAkbmV4dC5hZGRDbGFzcyhkaXJlY3Rpb24pXG4gICAgICAkYWN0aXZlXG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkbmV4dC5yZW1vdmVDbGFzcyhbdHlwZSwgZGlyZWN0aW9uXS5qb2luKCcgJykpLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoWydhY3RpdmUnLCBkaXJlY3Rpb25dLmpvaW4oJyAnKSlcbiAgICAgICAgICB0aGF0LnNsaWRpbmcgPSBmYWxzZVxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKHNsaWRFdmVudClcbiAgICAgICAgICB9LCAwKVxuICAgICAgICB9KVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ2Fyb3VzZWwuVFJBTlNJVElPTl9EVVJBVElPTilcbiAgICB9IGVsc2Uge1xuICAgICAgJGFjdGl2ZS5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICRuZXh0LmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgdGhpcy5zbGlkaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzbGlkRXZlbnQpXG4gICAgfVxuXG4gICAgaXNDeWNsaW5nICYmIHRoaXMuY3ljbGUoKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ0FST1VTRUwgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuY2Fyb3VzZWwnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQ2Fyb3VzZWwuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG4gICAgICB2YXIgYWN0aW9uICA9IHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycgPyBvcHRpb24gOiBvcHRpb25zLnNsaWRlXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuY2Fyb3VzZWwnLCAoZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnbnVtYmVyJykgZGF0YS50byhvcHRpb24pXG4gICAgICBlbHNlIGlmIChhY3Rpb24pIGRhdGFbYWN0aW9uXSgpXG4gICAgICBlbHNlIGlmIChvcHRpb25zLmludGVydmFsKSBkYXRhLnBhdXNlKCkuY3ljbGUoKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5jYXJvdXNlbFxuXG4gICQuZm4uY2Fyb3VzZWwgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5jYXJvdXNlbC5Db25zdHJ1Y3RvciA9IENhcm91c2VsXG5cblxuICAvLyBDQVJPVVNFTCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uY2Fyb3VzZWwubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmNhcm91c2VsID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQ0FST1VTRUwgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICB2YXIgY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgaHJlZlxuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgIHZhciAkdGFyZ2V0ID0gJCgkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpIHx8IChocmVmID0gJHRoaXMuYXR0cignaHJlZicpKSAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSkgLy8gc3RyaXAgZm9yIGllN1xuICAgIGlmICghJHRhcmdldC5oYXNDbGFzcygnY2Fyb3VzZWwnKSkgcmV0dXJuXG4gICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJHRhcmdldC5kYXRhKCksICR0aGlzLmRhdGEoKSlcbiAgICB2YXIgc2xpZGVJbmRleCA9ICR0aGlzLmF0dHIoJ2RhdGEtc2xpZGUtdG8nKVxuICAgIGlmIChzbGlkZUluZGV4KSBvcHRpb25zLmludGVydmFsID0gZmFsc2VcblxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbnMpXG5cbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgJHRhcmdldC5kYXRhKCdicy5jYXJvdXNlbCcpLnRvKHNsaWRlSW5kZXgpXG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGknLCAnW2RhdGEtc2xpZGVdJywgY2xpY2tIYW5kbGVyKVxuICAgIC5vbignY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGknLCAnW2RhdGEtc2xpZGUtdG9dJywgY2xpY2tIYW5kbGVyKVxuXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAkKCdbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkY2Fyb3VzZWwgPSAkKHRoaXMpXG4gICAgICBQbHVnaW4uY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpXG4gICAgfSlcbiAgfSlcblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGNvbGxhcHNlLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jY29sbGFwc2VcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDT0xMQVBTRSBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBDb2xsYXBzZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCAgICAgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgICAgICA9ICQuZXh0ZW5kKHt9LCBDb2xsYXBzZS5ERUZBVUxUUywgb3B0aW9ucylcbiAgICB0aGlzLiR0cmlnZ2VyICAgICAgPSAkKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtocmVmPVwiIycgKyBlbGVtZW50LmlkICsgJ1wiXSwnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXRhcmdldD1cIiMnICsgZWxlbWVudC5pZCArICdcIl0nKVxuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IG51bGxcblxuICAgIGlmICh0aGlzLm9wdGlvbnMucGFyZW50KSB7XG4gICAgICB0aGlzLiRwYXJlbnQgPSB0aGlzLmdldFBhcmVudCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuJGVsZW1lbnQsIHRoaXMuJHRyaWdnZXIpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy50b2dnbGUpIHRoaXMudG9nZ2xlKClcbiAgfVxuXG4gIENvbGxhcHNlLlZFUlNJT04gID0gJzMuMy41J1xuXG4gIENvbGxhcHNlLlRSQU5TSVRJT05fRFVSQVRJT04gPSAzNTBcblxuICBDb2xsYXBzZS5ERUZBVUxUUyA9IHtcbiAgICB0b2dnbGU6IHRydWVcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5kaW1lbnNpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhc1dpZHRoID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnd2lkdGgnKVxuICAgIHJldHVybiBoYXNXaWR0aCA/ICd3aWR0aCcgOiAnaGVpZ2h0J1xuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudHJhbnNpdGlvbmluZyB8fCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSByZXR1cm5cblxuICAgIHZhciBhY3RpdmVzRGF0YVxuICAgIHZhciBhY3RpdmVzID0gdGhpcy4kcGFyZW50ICYmIHRoaXMuJHBhcmVudC5jaGlsZHJlbignLnBhbmVsJykuY2hpbGRyZW4oJy5pbiwgLmNvbGxhcHNpbmcnKVxuXG4gICAgaWYgKGFjdGl2ZXMgJiYgYWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgIGFjdGl2ZXNEYXRhID0gYWN0aXZlcy5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEudHJhbnNpdGlvbmluZykgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KCdzaG93LmJzLmNvbGxhcHNlJylcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc3RhcnRFdmVudClcbiAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgUGx1Z2luLmNhbGwoYWN0aXZlcywgJ2hpZGUnKVxuICAgICAgYWN0aXZlc0RhdGEgfHwgYWN0aXZlcy5kYXRhKCdicy5jb2xsYXBzZScsIG51bGwpXG4gICAgfVxuXG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuZGltZW5zaW9uKClcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2UnKVxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzaW5nJylbZGltZW5zaW9uXSgwKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgdGhpcy4kdHJpZ2dlclxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZWQnKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMVxuXG4gICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNlIGluJylbZGltZW5zaW9uXSgnJylcbiAgICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDBcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLnRyaWdnZXIoJ3Nob3duLmJzLmNvbGxhcHNlJylcbiAgICB9XG5cbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm4gY29tcGxldGUuY2FsbCh0aGlzKVxuXG4gICAgdmFyIHNjcm9sbFNpemUgPSAkLmNhbWVsQ2FzZShbJ3Njcm9sbCcsIGRpbWVuc2lvbl0uam9pbignLScpKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTilbZGltZW5zaW9uXSh0aGlzLiRlbGVtZW50WzBdW3Njcm9sbFNpemVdKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudHJhbnNpdGlvbmluZyB8fCAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaW4nKSkgcmV0dXJuXG5cbiAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoJ2hpZGUuYnMuY29sbGFwc2UnKVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzdGFydEV2ZW50KVxuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLmRpbWVuc2lvbigpXG5cbiAgICB0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0odGhpcy4kZWxlbWVudFtkaW1lbnNpb25dKCkpWzBdLm9mZnNldEhlaWdodFxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2UgaW4nKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgIHRoaXMuJHRyaWdnZXJcbiAgICAgIC5hZGRDbGFzcygnY29sbGFwc2VkJylcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG5cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxXG5cbiAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAwXG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UnKVxuICAgICAgICAudHJpZ2dlcignaGlkZGVuLmJzLmNvbGxhcHNlJylcbiAgICB9XG5cbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm4gY29tcGxldGUuY2FsbCh0aGlzKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgW2RpbWVuc2lvbl0oMClcbiAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsICQucHJveHkoY29tcGxldGUsIHRoaXMpKVxuICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKENvbGxhcHNlLlRSQU5TSVRJT05fRFVSQVRJT04pXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXNbdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaW4nKSA/ICdoaWRlJyA6ICdzaG93J10oKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmdldFBhcmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJCh0aGlzLm9wdGlvbnMucGFyZW50KVxuICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtcGFyZW50PVwiJyArIHRoaXMub3B0aW9ucy5wYXJlbnQgKyAnXCJdJylcbiAgICAgIC5lYWNoKCQucHJveHkoZnVuY3Rpb24gKGksIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJChlbGVtZW50KVxuICAgICAgICB0aGlzLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhnZXRUYXJnZXRGcm9tVHJpZ2dlcigkZWxlbWVudCksICRlbGVtZW50KVxuICAgICAgfSwgdGhpcykpXG4gICAgICAuZW5kKClcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MgPSBmdW5jdGlvbiAoJGVsZW1lbnQsICR0cmlnZ2VyKSB7XG4gICAgdmFyIGlzT3BlbiA9ICRlbGVtZW50Lmhhc0NsYXNzKCdpbicpXG5cbiAgICAkZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKVxuICAgICR0cmlnZ2VyXG4gICAgICAudG9nZ2xlQ2xhc3MoJ2NvbGxhcHNlZCcsICFpc09wZW4pXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT3BlbilcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhcmdldEZyb21UcmlnZ2VyKCR0cmlnZ2VyKSB7XG4gICAgdmFyIGhyZWZcbiAgICB2YXIgdGFyZ2V0ID0gJHRyaWdnZXIuYXR0cignZGF0YS10YXJnZXQnKVxuICAgICAgfHwgKGhyZWYgPSAkdHJpZ2dlci5hdHRyKCdocmVmJykpICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcblxuICAgIHJldHVybiAkKHRhcmdldClcbiAgfVxuXG5cbiAgLy8gQ09MTEFQU0UgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuY29sbGFwc2UnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQ29sbGFwc2UuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG5cbiAgICAgIGlmICghZGF0YSAmJiBvcHRpb25zLnRvZ2dsZSAmJiAvc2hvd3xoaWRlLy50ZXN0KG9wdGlvbikpIG9wdGlvbnMudG9nZ2xlID0gZmFsc2VcbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuY29sbGFwc2UnLCAoZGF0YSA9IG5ldyBDb2xsYXBzZSh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uY29sbGFwc2VcblxuICAkLmZuLmNvbGxhcHNlICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uY29sbGFwc2UuQ29uc3RydWN0b3IgPSBDb2xsYXBzZVxuXG5cbiAgLy8gQ09MTEFQU0UgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmNvbGxhcHNlLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5jb2xsYXBzZSA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIENPTExBUFNFIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLmNvbGxhcHNlLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcblxuICAgIGlmICghJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICB2YXIgJHRhcmdldCA9IGdldFRhcmdldEZyb21UcmlnZ2VyKCR0aGlzKVxuICAgIHZhciBkYXRhICAgID0gJHRhcmdldC5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgdmFyIG9wdGlvbiAgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdGhpcy5kYXRhKClcblxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbilcbiAgfSlcblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGRyb3Bkb3duLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jZHJvcGRvd25zXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gRFJPUERPV04gQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGJhY2tkcm9wID0gJy5kcm9wZG93bi1iYWNrZHJvcCdcbiAgdmFyIHRvZ2dsZSAgID0gJ1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJ1xuICB2YXIgRHJvcGRvd24gPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICQoZWxlbWVudCkub24oJ2NsaWNrLmJzLmRyb3Bkb3duJywgdGhpcy50b2dnbGUpXG4gIH1cblxuICBEcm9wZG93bi5WRVJTSU9OID0gJzMuMy41J1xuXG4gIGZ1bmN0aW9uIGdldFBhcmVudCgkdGhpcykge1xuICAgIHZhciBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JylcblxuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIHNlbGVjdG9yID0gJHRoaXMuYXR0cignaHJlZicpXG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIC8jW0EtWmEtel0vLnRlc3Qoc2VsZWN0b3IpICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXFxzXSokKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgfVxuXG4gICAgdmFyICRwYXJlbnQgPSBzZWxlY3RvciAmJiAkKHNlbGVjdG9yKVxuXG4gICAgcmV0dXJuICRwYXJlbnQgJiYgJHBhcmVudC5sZW5ndGggPyAkcGFyZW50IDogJHRoaXMucGFyZW50KClcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyTWVudXMoZSkge1xuICAgIGlmIChlICYmIGUud2hpY2ggPT09IDMpIHJldHVyblxuICAgICQoYmFja2Ryb3ApLnJlbW92ZSgpXG4gICAgJCh0b2dnbGUpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgICAgICAgPSAkKHRoaXMpXG4gICAgICB2YXIgJHBhcmVudCAgICAgICA9IGdldFBhcmVudCgkdGhpcylcbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0geyByZWxhdGVkVGFyZ2V0OiB0aGlzIH1cblxuICAgICAgaWYgKCEkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJykpIHJldHVyblxuXG4gICAgICBpZiAoZSAmJiBlLnR5cGUgPT0gJ2NsaWNrJyAmJiAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpICYmICQuY29udGFpbnMoJHBhcmVudFswXSwgZS50YXJnZXQpKSByZXR1cm5cblxuICAgICAgJHBhcmVudC50cmlnZ2VyKGUgPSAkLkV2ZW50KCdoaWRlLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG5cbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICAgJHRoaXMuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpXG4gICAgICAkcGFyZW50LnJlbW92ZUNsYXNzKCdvcGVuJykudHJpZ2dlcignaGlkZGVuLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldClcbiAgICB9KVxuICB9XG5cbiAgRHJvcGRvd24ucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzID0gJCh0aGlzKVxuXG4gICAgaWYgKCR0aGlzLmlzKCcuZGlzYWJsZWQsIDpkaXNhYmxlZCcpKSByZXR1cm5cblxuICAgIHZhciAkcGFyZW50ICA9IGdldFBhcmVudCgkdGhpcylcbiAgICB2YXIgaXNBY3RpdmUgPSAkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJylcblxuICAgIGNsZWFyTWVudXMoKVxuXG4gICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAhJHBhcmVudC5jbG9zZXN0KCcubmF2YmFyLW5hdicpLmxlbmd0aCkge1xuICAgICAgICAvLyBpZiBtb2JpbGUgd2UgdXNlIGEgYmFja2Ryb3AgYmVjYXVzZSBjbGljayBldmVudHMgZG9uJ3QgZGVsZWdhdGVcbiAgICAgICAgJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSlcbiAgICAgICAgICAuYWRkQ2xhc3MoJ2Ryb3Bkb3duLWJhY2tkcm9wJylcbiAgICAgICAgICAuaW5zZXJ0QWZ0ZXIoJCh0aGlzKSlcbiAgICAgICAgICAub24oJ2NsaWNrJywgY2xlYXJNZW51cylcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7IHJlbGF0ZWRUYXJnZXQ6IHRoaXMgfVxuICAgICAgJHBhcmVudC50cmlnZ2VyKGUgPSAkLkV2ZW50KCdzaG93LmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG5cbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICAgJHRoaXNcbiAgICAgICAgLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpXG5cbiAgICAgICRwYXJlbnRcbiAgICAgICAgLnRvZ2dsZUNsYXNzKCdvcGVuJylcbiAgICAgICAgLnRyaWdnZXIoJ3Nob3duLmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldClcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoIS8oMzh8NDB8Mjd8MzIpLy50ZXN0KGUud2hpY2gpIHx8IC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkpIHJldHVyblxuXG4gICAgdmFyICR0aGlzID0gJCh0aGlzKVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuXG4gICAgaWYgKCR0aGlzLmlzKCcuZGlzYWJsZWQsIDpkaXNhYmxlZCcpKSByZXR1cm5cblxuICAgIHZhciAkcGFyZW50ICA9IGdldFBhcmVudCgkdGhpcylcbiAgICB2YXIgaXNBY3RpdmUgPSAkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJylcblxuICAgIGlmICghaXNBY3RpdmUgJiYgZS53aGljaCAhPSAyNyB8fCBpc0FjdGl2ZSAmJiBlLndoaWNoID09IDI3KSB7XG4gICAgICBpZiAoZS53aGljaCA9PSAyNykgJHBhcmVudC5maW5kKHRvZ2dsZSkudHJpZ2dlcignZm9jdXMnKVxuICAgICAgcmV0dXJuICR0aGlzLnRyaWdnZXIoJ2NsaWNrJylcbiAgICB9XG5cbiAgICB2YXIgZGVzYyA9ICcgbGk6bm90KC5kaXNhYmxlZCk6dmlzaWJsZSBhJ1xuICAgIHZhciAkaXRlbXMgPSAkcGFyZW50LmZpbmQoJy5kcm9wZG93bi1tZW51JyArIGRlc2MpXG5cbiAgICBpZiAoISRpdGVtcy5sZW5ndGgpIHJldHVyblxuXG4gICAgdmFyIGluZGV4ID0gJGl0ZW1zLmluZGV4KGUudGFyZ2V0KVxuXG4gICAgaWYgKGUud2hpY2ggPT0gMzggJiYgaW5kZXggPiAwKSAgICAgICAgICAgICAgICAgaW5kZXgtLSAgICAgICAgIC8vIHVwXG4gICAgaWYgKGUud2hpY2ggPT0gNDAgJiYgaW5kZXggPCAkaXRlbXMubGVuZ3RoIC0gMSkgaW5kZXgrKyAgICAgICAgIC8vIGRvd25cbiAgICBpZiAoIX5pbmRleCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IDBcblxuICAgICRpdGVtcy5lcShpbmRleCkudHJpZ2dlcignZm9jdXMnKVxuICB9XG5cblxuICAvLyBEUk9QRE9XTiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICA9ICR0aGlzLmRhdGEoJ2JzLmRyb3Bkb3duJylcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5kcm9wZG93bicsIChkYXRhID0gbmV3IERyb3Bkb3duKHRoaXMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0uY2FsbCgkdGhpcylcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uZHJvcGRvd25cblxuICAkLmZuLmRyb3Bkb3duICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uZHJvcGRvd24uQ29uc3RydWN0b3IgPSBEcm9wZG93blxuXG5cbiAgLy8gRFJPUERPV04gTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmRyb3Bkb3duLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5kcm9wZG93biA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFQUExZIFRPIFNUQU5EQVJEIERST1BET1dOIEVMRU1FTlRTXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudClcbiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgY2xlYXJNZW51cylcbiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgJy5kcm9wZG93biBmb3JtJywgZnVuY3Rpb24gKGUpIHsgZS5zdG9wUHJvcGFnYXRpb24oKSB9KVxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCB0b2dnbGUsIERyb3Bkb3duLnByb3RvdHlwZS50b2dnbGUpXG4gICAgLm9uKCdrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgdG9nZ2xlLCBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93bilcbiAgICAub24oJ2tleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGknLCAnLmRyb3Bkb3duLW1lbnUnLCBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93bilcblxufShqUXVlcnkpO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IG1vZGFsLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jbW9kYWxzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gTU9EQUwgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIE1vZGFsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgICAgICAgPSBvcHRpb25zXG4gICAgdGhpcy4kYm9keSAgICAgICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxuICAgIHRoaXMuJGVsZW1lbnQgICAgICAgICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLiRkaWFsb2cgICAgICAgICAgICAgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5tb2RhbC1kaWFsb2cnKVxuICAgIHRoaXMuJGJhY2tkcm9wICAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLmlzU2hvd24gICAgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5vcmlnaW5hbEJvZHlQYWQgICAgID0gbnVsbFxuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggICAgICA9IDBcbiAgICB0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdGUpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLmZpbmQoJy5tb2RhbC1jb250ZW50JylcbiAgICAgICAgLmxvYWQodGhpcy5vcHRpb25zLnJlbW90ZSwgJC5wcm94eShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdsb2FkZWQuYnMubW9kYWwnKVxuICAgICAgICB9LCB0aGlzKSlcbiAgICB9XG4gIH1cblxuICBNb2RhbC5WRVJTSU9OICA9ICczLjMuNSdcblxuICBNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMzAwXG4gIE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcblxuICBNb2RhbC5ERUZBVUxUUyA9IHtcbiAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBzaG93OiB0cnVlXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KF9yZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB2YXIgZSAgICA9ICQuRXZlbnQoJ3Nob3cuYnMubW9kYWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IF9yZWxhdGVkVGFyZ2V0IH0pXG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgIGlmICh0aGlzLmlzU2hvd24gfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLmlzU2hvd24gPSB0cnVlXG5cbiAgICB0aGlzLmNoZWNrU2Nyb2xsYmFyKClcbiAgICB0aGlzLnNldFNjcm9sbGJhcigpXG4gICAgdGhpcy4kYm9keS5hZGRDbGFzcygnbW9kYWwtb3BlbicpXG5cbiAgICB0aGlzLmVzY2FwZSgpXG4gICAgdGhpcy5yZXNpemUoKVxuXG4gICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcsICdbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLCAkLnByb3h5KHRoaXMuaGlkZSwgdGhpcykpXG5cbiAgICB0aGlzLiRkaWFsb2cub24oJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC5vbmUoJ21vdXNldXAuZGlzbWlzcy5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyh0aGF0LiRlbGVtZW50KSkgdGhhdC5pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy5iYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoYXQuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKVxuXG4gICAgICBpZiAoIXRoYXQuJGVsZW1lbnQucGFyZW50KCkubGVuZ3RoKSB7XG4gICAgICAgIHRoYXQuJGVsZW1lbnQuYXBwZW5kVG8odGhhdC4kYm9keSkgLy8gZG9uJ3QgbW92ZSBtb2RhbHMgZG9tIHBvc2l0aW9uXG4gICAgICB9XG5cbiAgICAgIHRoYXQuJGVsZW1lbnRcbiAgICAgICAgLnNob3coKVxuICAgICAgICAuc2Nyb2xsVG9wKDApXG5cbiAgICAgIHRoYXQuYWRqdXN0RGlhbG9nKClcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdGhhdC4kZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcbiAgICAgIH1cblxuICAgICAgdGhhdC4kZWxlbWVudC5hZGRDbGFzcygnaW4nKVxuXG4gICAgICB0aGF0LmVuZm9yY2VGb2N1cygpXG5cbiAgICAgIHZhciBlID0gJC5FdmVudCgnc2hvd24uYnMubW9kYWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IF9yZWxhdGVkVGFyZ2V0IH0pXG5cbiAgICAgIHRyYW5zaXRpb24gP1xuICAgICAgICB0aGF0LiRkaWFsb2cgLy8gd2FpdCBmb3IgbW9kYWwgdG8gc2xpZGUgaW5cbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJykudHJpZ2dlcihlKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpLnRyaWdnZXIoZSlcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIGUgPSAkLkV2ZW50KCdoaWRlLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKCF0aGlzLmlzU2hvd24gfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLmlzU2hvd24gPSBmYWxzZVxuXG4gICAgdGhpcy5lc2NhcGUoKVxuICAgIHRoaXMucmVzaXplKClcblxuICAgICQoZG9jdW1lbnQpLm9mZignZm9jdXNpbi5icy5tb2RhbCcpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAucmVtb3ZlQ2xhc3MoJ2luJylcbiAgICAgIC5vZmYoJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnKVxuICAgICAgLm9mZignbW91c2V1cC5kaXNtaXNzLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGRpYWxvZy5vZmYoJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJylcblxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsICQucHJveHkodGhpcy5oaWRlTW9kYWwsIHRoaXMpKVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgdGhpcy5oaWRlTW9kYWwoKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmVuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKGRvY3VtZW50KVxuICAgICAgLm9mZignZm9jdXNpbi5icy5tb2RhbCcpIC8vIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgLm9uKCdmb2N1c2luLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAodGhpcy4kZWxlbWVudFswXSAhPT0gZS50YXJnZXQgJiYgIXRoaXMuJGVsZW1lbnQuaGFzKGUudGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcykpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuZXNjYXBlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzU2hvd24gJiYgdGhpcy5vcHRpb25zLmtleWJvYXJkKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLmRpc21pc3MuYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUud2hpY2ggPT0gMjcgJiYgdGhpcy5oaWRlKClcbiAgICAgIH0sIHRoaXMpKVxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTaG93bikge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2tleWRvd24uZGlzbWlzcy5icy5tb2RhbCcpXG4gICAgfVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc1Nob3duKSB7XG4gICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5icy5tb2RhbCcsICQucHJveHkodGhpcy5oYW5kbGVVcGRhdGUsIHRoaXMpKVxuICAgIH0gZWxzZSB7XG4gICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuYnMubW9kYWwnKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5oaWRlTW9kYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgdGhpcy4kZWxlbWVudC5oaWRlKClcbiAgICB0aGlzLmJhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQuJGJvZHkucmVtb3ZlQ2xhc3MoJ21vZGFsLW9wZW4nKVxuICAgICAgdGhhdC5yZXNldEFkanVzdG1lbnRzKClcbiAgICAgIHRoYXQucmVzZXRTY3JvbGxiYXIoKVxuICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdoaWRkZW4uYnMubW9kYWwnKVxuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVtb3ZlQmFja2Ryb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kYmFja2Ryb3AgJiYgdGhpcy4kYmFja2Ryb3AucmVtb3ZlKClcbiAgICB0aGlzLiRiYWNrZHJvcCA9IG51bGxcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5iYWNrZHJvcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciBhbmltYXRlID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID8gJ2ZhZGUnIDogJydcblxuICAgIGlmICh0aGlzLmlzU2hvd24gJiYgdGhpcy5vcHRpb25zLmJhY2tkcm9wKSB7XG4gICAgICB2YXIgZG9BbmltYXRlID0gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgYW5pbWF0ZVxuXG4gICAgICB0aGlzLiRiYWNrZHJvcCA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG4gICAgICAgIC5hZGRDbGFzcygnbW9kYWwtYmFja2Ryb3AgJyArIGFuaW1hdGUpXG4gICAgICAgIC5hcHBlbmRUbyh0aGlzLiRib2R5KVxuXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAodGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrKSB7XG4gICAgICAgICAgdGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2VcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkgcmV0dXJuXG4gICAgICAgIHRoaXMub3B0aW9ucy5iYWNrZHJvcCA9PSAnc3RhdGljJ1xuICAgICAgICAgID8gdGhpcy4kZWxlbWVudFswXS5mb2N1cygpXG4gICAgICAgICAgOiB0aGlzLmhpZGUoKVxuICAgICAgfSwgdGhpcykpXG5cbiAgICAgIGlmIChkb0FuaW1hdGUpIHRoaXMuJGJhY2tkcm9wWzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuXG4gICAgICB0aGlzLiRiYWNrZHJvcC5hZGRDbGFzcygnaW4nKVxuXG4gICAgICBpZiAoIWNhbGxiYWNrKSByZXR1cm5cblxuICAgICAgZG9BbmltYXRlID9cbiAgICAgICAgdGhpcy4kYmFja2Ryb3BcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjYWxsYmFjaylcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjYWxsYmFjaygpXG5cbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24gJiYgdGhpcy4kYmFja2Ryb3ApIHtcbiAgICAgIHRoaXMuJGJhY2tkcm9wLnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICAgIHZhciBjYWxsYmFja1JlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC5yZW1vdmVCYWNrZHJvcCgpXG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICAgIH1cbiAgICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAgIHRoaXMuJGJhY2tkcm9wXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY2FsbGJhY2tSZW1vdmUpXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgY2FsbGJhY2tSZW1vdmUoKVxuXG4gICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIC8vIHRoZXNlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcblxuICBNb2RhbC5wcm90b3R5cGUuaGFuZGxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYWRqdXN0RGlhbG9nKClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5hZGp1c3REaWFsb2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1vZGFsSXNPdmVyZmxvd2luZyA9IHRoaXMuJGVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuXG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgcGFkZGluZ0xlZnQ6ICAhdGhpcy5ib2R5SXNPdmVyZmxvd2luZyAmJiBtb2RhbElzT3ZlcmZsb3dpbmcgPyB0aGlzLnNjcm9sbGJhcldpZHRoIDogJycsXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgJiYgIW1vZGFsSXNPdmVyZmxvd2luZyA/IHRoaXMuc2Nyb2xsYmFyV2lkdGggOiAnJ1xuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVzZXRBZGp1c3RtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmNzcyh7XG4gICAgICBwYWRkaW5nTGVmdDogJycsXG4gICAgICBwYWRkaW5nUmlnaHQ6ICcnXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5jaGVja1Njcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnVsbFdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGhcbiAgICBpZiAoIWZ1bGxXaW5kb3dXaWR0aCkgeyAvLyB3b3JrYXJvdW5kIGZvciBtaXNzaW5nIHdpbmRvdy5pbm5lcldpZHRoIGluIElFOFxuICAgICAgdmFyIGRvY3VtZW50RWxlbWVudFJlY3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIGZ1bGxXaW5kb3dXaWR0aCA9IGRvY3VtZW50RWxlbWVudFJlY3QucmlnaHQgLSBNYXRoLmFicyhkb2N1bWVudEVsZW1lbnRSZWN0LmxlZnQpXG4gICAgfVxuICAgIHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDwgZnVsbFdpbmRvd1dpZHRoXG4gICAgdGhpcy5zY3JvbGxiYXJXaWR0aCA9IHRoaXMubWVhc3VyZVNjcm9sbGJhcigpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBib2R5UGFkID0gcGFyc2VJbnQoKHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgfHwgMCksIDEwKVxuICAgIHRoaXMub3JpZ2luYWxCb2R5UGFkID0gZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgfHwgJydcbiAgICBpZiAodGhpcy5ib2R5SXNPdmVyZmxvd2luZykgdGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBib2R5UGFkICsgdGhpcy5zY3JvbGxiYXJXaWR0aClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNldFNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcsIHRoaXMub3JpZ2luYWxCb2R5UGFkKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm1lYXN1cmVTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7IC8vIHRoeCB3YWxzaFxuICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnXG4gICAgdGhpcy4kYm9keS5hcHBlbmQoc2Nyb2xsRGl2KVxuICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aFxuICAgIHRoaXMuJGJvZHlbMF0ucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KVxuICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aFxuICB9XG5cblxuICAvLyBNT0RBTCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24sIF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMubW9kYWwnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgTW9kYWwuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMubW9kYWwnLCAoZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKF9yZWxhdGVkVGFyZ2V0KVxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5zaG93KSBkYXRhLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLm1vZGFsXG5cbiAgJC5mbi5tb2RhbCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLm1vZGFsLkNvbnN0cnVjdG9yID0gTW9kYWxcblxuXG4gIC8vIE1PREFMIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5tb2RhbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4ubW9kYWwgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBNT0RBTCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5tb2RhbC5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgdmFyIGhyZWYgICAgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICB2YXIgJHRhcmdldCA9ICQoJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSB8fCAoaHJlZiAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSkpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB2YXIgb3B0aW9uICA9ICR0YXJnZXQuZGF0YSgnYnMubW9kYWwnKSA/ICd0b2dnbGUnIDogJC5leHRlbmQoeyByZW1vdGU6ICEvIy8udGVzdChocmVmKSAmJiBocmVmIH0sICR0YXJnZXQuZGF0YSgpLCAkdGhpcy5kYXRhKCkpXG5cbiAgICBpZiAoJHRoaXMuaXMoJ2EnKSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAkdGFyZ2V0Lm9uZSgnc2hvdy5icy5tb2RhbCcsIGZ1bmN0aW9uIChzaG93RXZlbnQpIHtcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybiAvLyBvbmx5IHJlZ2lzdGVyIGZvY3VzIHJlc3RvcmVyIGlmIG1vZGFsIHdpbGwgYWN0dWFsbHkgZ2V0IHNob3duXG4gICAgICAkdGFyZ2V0Lm9uZSgnaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkdGhpcy5pcygnOnZpc2libGUnKSAmJiAkdGhpcy50cmlnZ2VyKCdmb2N1cycpXG4gICAgICB9KVxuICAgIH0pXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uLCB0aGlzKVxuICB9KVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogcG9wb3Zlci5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3BvcG92ZXJzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gUE9QT1ZFUiBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIFBvcG92ZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuaW5pdCgncG9wb3ZlcicsIGVsZW1lbnQsIG9wdGlvbnMpXG4gIH1cblxuICBpZiAoISQuZm4udG9vbHRpcCkgdGhyb3cgbmV3IEVycm9yKCdQb3BvdmVyIHJlcXVpcmVzIHRvb2x0aXAuanMnKVxuXG4gIFBvcG92ZXIuVkVSU0lPTiAgPSAnMy4zLjUnXG5cbiAgUG9wb3Zlci5ERUZBVUxUUyA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IuREVGQVVMVFMsIHtcbiAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICBjb250ZW50OiAnJyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj48aDMgY2xhc3M9XCJwb3BvdmVyLXRpdGxlXCI+PC9oMz48ZGl2IGNsYXNzPVwicG9wb3Zlci1jb250ZW50XCI+PC9kaXY+PC9kaXY+J1xuICB9KVxuXG5cbiAgLy8gTk9URTogUE9QT1ZFUiBFWFRFTkRTIHRvb2x0aXAuanNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBQb3BvdmVyLnByb3RvdHlwZSA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IucHJvdG90eXBlKVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9wb3ZlclxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmdldERlZmF1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBQb3BvdmVyLkRFRkFVTFRTXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGlwICAgID0gdGhpcy50aXAoKVxuICAgIHZhciB0aXRsZSAgID0gdGhpcy5nZXRUaXRsZSgpXG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLmdldENvbnRlbnQoKVxuXG4gICAgJHRpcC5maW5kKCcucG9wb3Zlci10aXRsZScpW3RoaXMub3B0aW9ucy5odG1sID8gJ2h0bWwnIDogJ3RleHQnXSh0aXRsZSlcbiAgICAkdGlwLmZpbmQoJy5wb3BvdmVyLWNvbnRlbnQnKS5jaGlsZHJlbigpLmRldGFjaCgpLmVuZCgpWyAvLyB3ZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXG4gICAgICB0aGlzLm9wdGlvbnMuaHRtbCA/ICh0eXBlb2YgY29udGVudCA9PSAnc3RyaW5nJyA/ICdodG1sJyA6ICdhcHBlbmQnKSA6ICd0ZXh0J1xuICAgIF0oY29udGVudClcblxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2ZhZGUgdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0IGluJylcblxuICAgIC8vIElFOCBkb2Vzbid0IGFjY2VwdCBoaWRpbmcgdmlhIHRoZSBgOmVtcHR5YCBwc2V1ZG8gc2VsZWN0b3IsIHdlIGhhdmUgdG8gZG9cbiAgICAvLyB0aGlzIG1hbnVhbGx5IGJ5IGNoZWNraW5nIHRoZSBjb250ZW50cy5cbiAgICBpZiAoISR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5odG1sKCkpICR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKS5oaWRlKClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmhhc0NvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLmdldENvbnRlbnQoKVxuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuZ2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIG8gID0gdGhpcy5vcHRpb25zXG5cbiAgICByZXR1cm4gJGUuYXR0cignZGF0YS1jb250ZW50JylcbiAgICAgIHx8ICh0eXBlb2Ygby5jb250ZW50ID09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgby5jb250ZW50LmNhbGwoJGVbMF0pIDpcbiAgICAgICAgICAgIG8uY29udGVudClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy5hcnJvdycpKVxuICB9XG5cblxuICAvLyBQT1BPVkVSIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMucG9wb3ZlcicpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSAmJiAvZGVzdHJveXxoaWRlLy50ZXN0KG9wdGlvbikpIHJldHVyblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5wb3BvdmVyJywgKGRhdGEgPSBuZXcgUG9wb3Zlcih0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4ucG9wb3ZlclxuXG4gICQuZm4ucG9wb3ZlciAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnBvcG92ZXIuQ29uc3RydWN0b3IgPSBQb3BvdmVyXG5cblxuICAvLyBQT1BPVkVSIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnBvcG92ZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnBvcG92ZXIgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbn0oalF1ZXJ5KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBzY3JvbGxzcHkuanMgdjMuMy41XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNzY3JvbGxzcHlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBTQ1JPTExTUFkgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFNjcm9sbFNweShlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kYm9keSAgICAgICAgICA9ICQoZG9jdW1lbnQuYm9keSlcbiAgICB0aGlzLiRzY3JvbGxFbGVtZW50ID0gJChlbGVtZW50KS5pcyhkb2N1bWVudC5ib2R5KSA/ICQod2luZG93KSA6ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgID0gJC5leHRlbmQoe30sIFNjcm9sbFNweS5ERUZBVUxUUywgb3B0aW9ucylcbiAgICB0aGlzLnNlbGVjdG9yICAgICAgID0gKHRoaXMub3B0aW9ucy50YXJnZXQgfHwgJycpICsgJyAubmF2IGxpID4gYSdcbiAgICB0aGlzLm9mZnNldHMgICAgICAgID0gW11cbiAgICB0aGlzLnRhcmdldHMgICAgICAgID0gW11cbiAgICB0aGlzLmFjdGl2ZVRhcmdldCAgID0gbnVsbFxuICAgIHRoaXMuc2Nyb2xsSGVpZ2h0ICAgPSAwXG5cbiAgICB0aGlzLiRzY3JvbGxFbGVtZW50Lm9uKCdzY3JvbGwuYnMuc2Nyb2xsc3B5JywgJC5wcm94eSh0aGlzLnByb2Nlc3MsIHRoaXMpKVxuICAgIHRoaXMucmVmcmVzaCgpXG4gICAgdGhpcy5wcm9jZXNzKClcbiAgfVxuXG4gIFNjcm9sbFNweS5WRVJTSU9OICA9ICczLjMuNSdcblxuICBTY3JvbGxTcHkuREVGQVVMVFMgPSB7XG4gICAgb2Zmc2V0OiAxMFxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuJHNjcm9sbEVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KHRoaXMuJGJvZHlbMF0uc2Nyb2xsSGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ICAgICAgICAgID0gdGhpc1xuICAgIHZhciBvZmZzZXRNZXRob2QgID0gJ29mZnNldCdcbiAgICB2YXIgb2Zmc2V0QmFzZSAgICA9IDBcblxuICAgIHRoaXMub2Zmc2V0cyAgICAgID0gW11cbiAgICB0aGlzLnRhcmdldHMgICAgICA9IFtdXG4gICAgdGhpcy5zY3JvbGxIZWlnaHQgPSB0aGlzLmdldFNjcm9sbEhlaWdodCgpXG5cbiAgICBpZiAoISQuaXNXaW5kb3codGhpcy4kc2Nyb2xsRWxlbWVudFswXSkpIHtcbiAgICAgIG9mZnNldE1ldGhvZCA9ICdwb3NpdGlvbidcbiAgICAgIG9mZnNldEJhc2UgICA9IHRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKClcbiAgICB9XG5cbiAgICB0aGlzLiRib2R5XG4gICAgICAuZmluZCh0aGlzLnNlbGVjdG9yKVxuICAgICAgLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkZWwgICA9ICQodGhpcylcbiAgICAgICAgdmFyIGhyZWYgID0gJGVsLmRhdGEoJ3RhcmdldCcpIHx8ICRlbC5hdHRyKCdocmVmJylcbiAgICAgICAgdmFyICRocmVmID0gL14jLi8udGVzdChocmVmKSAmJiAkKGhyZWYpXG5cbiAgICAgICAgcmV0dXJuICgkaHJlZlxuICAgICAgICAgICYmICRocmVmLmxlbmd0aFxuICAgICAgICAgICYmICRocmVmLmlzKCc6dmlzaWJsZScpXG4gICAgICAgICAgJiYgW1skaHJlZltvZmZzZXRNZXRob2RdKCkudG9wICsgb2Zmc2V0QmFzZSwgaHJlZl1dKSB8fCBudWxsXG4gICAgICB9KVxuICAgICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGFbMF0gLSBiWzBdIH0pXG4gICAgICAuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoYXQub2Zmc2V0cy5wdXNoKHRoaXNbMF0pXG4gICAgICAgIHRoYXQudGFyZ2V0cy5wdXNoKHRoaXNbMV0pXG4gICAgICB9KVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGxUb3AgICAgPSB0aGlzLiRzY3JvbGxFbGVtZW50LnNjcm9sbFRvcCgpICsgdGhpcy5vcHRpb25zLm9mZnNldFxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSB0aGlzLmdldFNjcm9sbEhlaWdodCgpXG4gICAgdmFyIG1heFNjcm9sbCAgICA9IHRoaXMub3B0aW9ucy5vZmZzZXQgKyBzY3JvbGxIZWlnaHQgLSB0aGlzLiRzY3JvbGxFbGVtZW50LmhlaWdodCgpXG4gICAgdmFyIG9mZnNldHMgICAgICA9IHRoaXMub2Zmc2V0c1xuICAgIHZhciB0YXJnZXRzICAgICAgPSB0aGlzLnRhcmdldHNcbiAgICB2YXIgYWN0aXZlVGFyZ2V0ID0gdGhpcy5hY3RpdmVUYXJnZXRcbiAgICB2YXIgaVxuXG4gICAgaWYgKHRoaXMuc2Nyb2xsSGVpZ2h0ICE9IHNjcm9sbEhlaWdodCkge1xuICAgICAgdGhpcy5yZWZyZXNoKClcbiAgICB9XG5cbiAgICBpZiAoc2Nyb2xsVG9wID49IG1heFNjcm9sbCkge1xuICAgICAgcmV0dXJuIGFjdGl2ZVRhcmdldCAhPSAoaSA9IHRhcmdldHNbdGFyZ2V0cy5sZW5ndGggLSAxXSkgJiYgdGhpcy5hY3RpdmF0ZShpKVxuICAgIH1cblxuICAgIGlmIChhY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgb2Zmc2V0c1swXSkge1xuICAgICAgdGhpcy5hY3RpdmVUYXJnZXQgPSBudWxsXG4gICAgICByZXR1cm4gdGhpcy5jbGVhcigpXG4gICAgfVxuXG4gICAgZm9yIChpID0gb2Zmc2V0cy5sZW5ndGg7IGktLTspIHtcbiAgICAgIGFjdGl2ZVRhcmdldCAhPSB0YXJnZXRzW2ldXG4gICAgICAgICYmIHNjcm9sbFRvcCA+PSBvZmZzZXRzW2ldXG4gICAgICAgICYmIChvZmZzZXRzW2kgKyAxXSA9PT0gdW5kZWZpbmVkIHx8IHNjcm9sbFRvcCA8IG9mZnNldHNbaSArIDFdKVxuICAgICAgICAmJiB0aGlzLmFjdGl2YXRlKHRhcmdldHNbaV0pXG4gICAgfVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IHRhcmdldFxuXG4gICAgdGhpcy5jbGVhcigpXG5cbiAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yICtcbiAgICAgICdbZGF0YS10YXJnZXQ9XCInICsgdGFyZ2V0ICsgJ1wiXSwnICtcbiAgICAgIHRoaXMuc2VsZWN0b3IgKyAnW2hyZWY9XCInICsgdGFyZ2V0ICsgJ1wiXSdcblxuICAgIHZhciBhY3RpdmUgPSAkKHNlbGVjdG9yKVxuICAgICAgLnBhcmVudHMoJ2xpJylcbiAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcblxuICAgIGlmIChhY3RpdmUucGFyZW50KCcuZHJvcGRvd24tbWVudScpLmxlbmd0aCkge1xuICAgICAgYWN0aXZlID0gYWN0aXZlXG4gICAgICAgIC5jbG9zZXN0KCdsaS5kcm9wZG93bicpXG4gICAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICB9XG5cbiAgICBhY3RpdmUudHJpZ2dlcignYWN0aXZhdGUuYnMuc2Nyb2xsc3B5JylcbiAgfVxuXG4gIFNjcm9sbFNweS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgJCh0aGlzLnNlbGVjdG9yKVxuICAgICAgLnBhcmVudHNVbnRpbCh0aGlzLm9wdGlvbnMudGFyZ2V0LCAnLmFjdGl2ZScpXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gIH1cblxuXG4gIC8vIFNDUk9MTFNQWSBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuc2Nyb2xsc3B5JylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5zY3JvbGxzcHknLCAoZGF0YSA9IG5ldyBTY3JvbGxTcHkodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnNjcm9sbHNweVxuXG4gICQuZm4uc2Nyb2xsc3B5ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uc2Nyb2xsc3B5LkNvbnN0cnVjdG9yID0gU2Nyb2xsU3B5XG5cblxuICAvLyBTQ1JPTExTUFkgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5zY3JvbGxzcHkubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnNjcm9sbHNweSA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIFNDUk9MTFNQWSBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT09PT1cblxuICAkKHdpbmRvdykub24oJ2xvYWQuYnMuc2Nyb2xsc3B5LmRhdGEtYXBpJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXNweT1cInNjcm9sbFwiXScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRzcHkgPSAkKHRoaXMpXG4gICAgICBQbHVnaW4uY2FsbCgkc3B5LCAkc3B5LmRhdGEoKSlcbiAgICB9KVxuICB9KVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogdGFiLmpzIHYzLjMuNVxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdGFic1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFRBQiBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIFRhYiA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgLy8ganNjczpkaXNhYmxlIHJlcXVpcmVEb2xsYXJCZWZvcmVqUXVlcnlBc3NpZ25tZW50XG4gICAgdGhpcy5lbGVtZW50ID0gJChlbGVtZW50KVxuICAgIC8vIGpzY3M6ZW5hYmxlIHJlcXVpcmVEb2xsYXJCZWZvcmVqUXVlcnlBc3NpZ25tZW50XG4gIH1cblxuICBUYWIuVkVSU0lPTiA9ICczLjMuNSdcblxuICBUYWIuVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MFxuXG4gIFRhYi5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHRoaXMgICAgPSB0aGlzLmVsZW1lbnRcbiAgICB2YXIgJHVsICAgICAgPSAkdGhpcy5jbG9zZXN0KCd1bDpub3QoLmRyb3Bkb3duLW1lbnUpJylcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5kYXRhKCd0YXJnZXQnKVxuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgJiYgc2VsZWN0b3IucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB9XG5cbiAgICBpZiAoJHRoaXMucGFyZW50KCdsaScpLmhhc0NsYXNzKCdhY3RpdmUnKSkgcmV0dXJuXG5cbiAgICB2YXIgJHByZXZpb3VzID0gJHVsLmZpbmQoJy5hY3RpdmU6bGFzdCBhJylcbiAgICB2YXIgaGlkZUV2ZW50ID0gJC5FdmVudCgnaGlkZS5icy50YWInLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiAkdGhpc1swXVxuICAgIH0pXG4gICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQoJ3Nob3cuYnMudGFiJywge1xuICAgICAgcmVsYXRlZFRhcmdldDogJHByZXZpb3VzWzBdXG4gICAgfSlcblxuICAgICRwcmV2aW91cy50cmlnZ2VyKGhpZGVFdmVudClcbiAgICAkdGhpcy50cmlnZ2VyKHNob3dFdmVudClcblxuICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHZhciAkdGFyZ2V0ID0gJChzZWxlY3RvcilcblxuICAgIHRoaXMuYWN0aXZhdGUoJHRoaXMuY2xvc2VzdCgnbGknKSwgJHVsKVxuICAgIHRoaXMuYWN0aXZhdGUoJHRhcmdldCwgJHRhcmdldC5wYXJlbnQoKSwgZnVuY3Rpb24gKCkge1xuICAgICAgJHByZXZpb3VzLnRyaWdnZXIoe1xuICAgICAgICB0eXBlOiAnaGlkZGVuLmJzLnRhYicsXG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6ICR0aGlzWzBdXG4gICAgICB9KVxuICAgICAgJHRoaXMudHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICdzaG93bi5icy50YWInLFxuICAgICAgICByZWxhdGVkVGFyZ2V0OiAkcHJldmlvdXNbMF1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIFRhYi5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgIHZhciAkYWN0aXZlICAgID0gY29udGFpbmVyLmZpbmQoJz4gLmFjdGl2ZScpXG4gICAgdmFyIHRyYW5zaXRpb24gPSBjYWxsYmFja1xuICAgICAgJiYgJC5zdXBwb3J0LnRyYW5zaXRpb25cbiAgICAgICYmICgkYWN0aXZlLmxlbmd0aCAmJiAkYWN0aXZlLmhhc0NsYXNzKCdmYWRlJykgfHwgISFjb250YWluZXIuZmluZCgnPiAuZmFkZScpLmxlbmd0aClcblxuICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAkYWN0aXZlXG4gICAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgLmZpbmQoJz4gLmRyb3Bkb3duLW1lbnUgPiAuYWN0aXZlJylcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIC5lbmQoKVxuICAgICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJylcbiAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuXG4gICAgICBlbGVtZW50XG4gICAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScpXG4gICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICBlbGVtZW50WzBdLm9mZnNldFdpZHRoIC8vIHJlZmxvdyBmb3IgdHJhbnNpdGlvblxuICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdpbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdmYWRlJylcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnQucGFyZW50KCcuZHJvcGRvd24tbWVudScpLmxlbmd0aCkge1xuICAgICAgICBlbGVtZW50XG4gICAgICAgICAgLmNsb3Nlc3QoJ2xpLmRyb3Bkb3duJylcbiAgICAgICAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgICAgICAuZW5kKClcbiAgICAgICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgIH1cblxuICAgICRhY3RpdmUubGVuZ3RoICYmIHRyYW5zaXRpb24gP1xuICAgICAgJGFjdGl2ZVxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBuZXh0KVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoVGFiLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIG5leHQoKVxuXG4gICAgJGFjdGl2ZS5yZW1vdmVDbGFzcygnaW4nKVxuICB9XG5cblxuICAvLyBUQUIgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMudGFiJylcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy50YWInLCAoZGF0YSA9IG5ldyBUYWIodGhpcykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnRhYlxuXG4gICQuZm4udGFiICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4udGFiLkNvbnN0cnVjdG9yID0gVGFiXG5cblxuICAvLyBUQUIgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09XG5cbiAgJC5mbi50YWIubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnRhYiA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIFRBQiBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT1cblxuICB2YXIgY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBQbHVnaW4uY2FsbCgkKHRoaXMpLCAnc2hvdycpXG4gIH1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMudGFiLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScsIGNsaWNrSGFuZGxlcilcbiAgICAub24oJ2NsaWNrLmJzLnRhYi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJwaWxsXCJdJywgY2xpY2tIYW5kbGVyKVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogdG9vbHRpcC5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3Rvb2x0aXBcbiAqIEluc3BpcmVkIGJ5IHRoZSBvcmlnaW5hbCBqUXVlcnkudGlwc3kgYnkgSmFzb24gRnJhbWVcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNSBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBUT09MVElQIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgVG9vbHRpcCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlICAgICAgID0gbnVsbFxuICAgIHRoaXMub3B0aW9ucyAgICA9IG51bGxcbiAgICB0aGlzLmVuYWJsZWQgICAgPSBudWxsXG4gICAgdGhpcy50aW1lb3V0ICAgID0gbnVsbFxuICAgIHRoaXMuaG92ZXJTdGF0ZSA9IG51bGxcbiAgICB0aGlzLiRlbGVtZW50ICAgPSBudWxsXG4gICAgdGhpcy5pblN0YXRlICAgID0gbnVsbFxuXG4gICAgdGhpcy5pbml0KCd0b29sdGlwJywgZWxlbWVudCwgb3B0aW9ucylcbiAgfVxuXG4gIFRvb2x0aXAuVkVSU0lPTiAgPSAnMy4zLjUnXG5cbiAgVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgVG9vbHRpcC5ERUZBVUxUUyA9IHtcbiAgICBhbmltYXRpb246IHRydWUsXG4gICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICBzZWxlY3RvcjogZmFsc2UsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj48ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsXG4gICAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJyxcbiAgICB0aXRsZTogJycsXG4gICAgZGVsYXk6IDAsXG4gICAgaHRtbDogZmFsc2UsXG4gICAgY29udGFpbmVyOiBmYWxzZSxcbiAgICB2aWV3cG9ydDoge1xuICAgICAgc2VsZWN0b3I6ICdib2R5JyxcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKHR5cGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmVuYWJsZWQgICA9IHRydWVcbiAgICB0aGlzLnR5cGUgICAgICA9IHR5cGVcbiAgICB0aGlzLiRlbGVtZW50ICA9ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICA9IHRoaXMuZ2V0T3B0aW9ucyhvcHRpb25zKVxuICAgIHRoaXMuJHZpZXdwb3J0ID0gdGhpcy5vcHRpb25zLnZpZXdwb3J0ICYmICQoJC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy52aWV3cG9ydCkgPyB0aGlzLm9wdGlvbnMudmlld3BvcnQuY2FsbCh0aGlzLCB0aGlzLiRlbGVtZW50KSA6ICh0aGlzLm9wdGlvbnMudmlld3BvcnQuc2VsZWN0b3IgfHwgdGhpcy5vcHRpb25zLnZpZXdwb3J0KSlcbiAgICB0aGlzLmluU3RhdGUgICA9IHsgY2xpY2s6IGZhbHNlLCBob3ZlcjogZmFsc2UsIGZvY3VzOiBmYWxzZSB9XG5cbiAgICBpZiAodGhpcy4kZWxlbWVudFswXSBpbnN0YW5jZW9mIGRvY3VtZW50LmNvbnN0cnVjdG9yICYmICF0aGlzLm9wdGlvbnMuc2VsZWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHNlbGVjdG9yYCBvcHRpb24gbXVzdCBiZSBzcGVjaWZpZWQgd2hlbiBpbml0aWFsaXppbmcgJyArIHRoaXMudHlwZSArICcgb24gdGhlIHdpbmRvdy5kb2N1bWVudCBvYmplY3QhJylcbiAgICB9XG5cbiAgICB2YXIgdHJpZ2dlcnMgPSB0aGlzLm9wdGlvbnMudHJpZ2dlci5zcGxpdCgnICcpXG5cbiAgICBmb3IgKHZhciBpID0gdHJpZ2dlcnMubGVuZ3RoOyBpLS07KSB7XG4gICAgICB2YXIgdHJpZ2dlciA9IHRyaWdnZXJzW2ldXG5cbiAgICAgIGlmICh0cmlnZ2VyID09ICdjbGljaycpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMudG9nZ2xlLCB0aGlzKSlcbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPSAnbWFudWFsJykge1xuICAgICAgICB2YXIgZXZlbnRJbiAgPSB0cmlnZ2VyID09ICdob3ZlcicgPyAnbW91c2VlbnRlcicgOiAnZm9jdXNpbidcbiAgICAgICAgdmFyIGV2ZW50T3V0ID0gdHJpZ2dlciA9PSAnaG92ZXInID8gJ21vdXNlbGVhdmUnIDogJ2ZvY3Vzb3V0J1xuXG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oZXZlbnRJbiAgKyAnLicgKyB0aGlzLnR5cGUsIHRoaXMub3B0aW9ucy5zZWxlY3RvciwgJC5wcm94eSh0aGlzLmVudGVyLCB0aGlzKSlcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbihldmVudE91dCArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMubGVhdmUsIHRoaXMpKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucy5zZWxlY3RvciA/XG4gICAgICAodGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIHsgdHJpZ2dlcjogJ21hbnVhbCcsIHNlbGVjdG9yOiAnJyB9KSkgOlxuICAgICAgdGhpcy5maXhUaXRsZSgpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXREZWZhdWx0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gVG9vbHRpcC5ERUZBVUxUU1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLmdldERlZmF1bHRzKCksIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKVxuXG4gICAgaWYgKG9wdGlvbnMuZGVsYXkgJiYgdHlwZW9mIG9wdGlvbnMuZGVsYXkgPT0gJ251bWJlcicpIHtcbiAgICAgIG9wdGlvbnMuZGVsYXkgPSB7XG4gICAgICAgIHNob3c6IG9wdGlvbnMuZGVsYXksXG4gICAgICAgIGhpZGU6IG9wdGlvbnMuZGVsYXlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0RGVsZWdhdGVPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zICA9IHt9XG4gICAgdmFyIGRlZmF1bHRzID0gdGhpcy5nZXREZWZhdWx0cygpXG5cbiAgICB0aGlzLl9vcHRpb25zICYmICQuZWFjaCh0aGlzLl9vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGRlZmF1bHRzW2tleV0gIT0gdmFsdWUpIG9wdGlvbnNba2V5XSA9IHZhbHVlXG4gICAgfSlcblxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5lbnRlciA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgc2VsZiA9IG9iaiBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IgP1xuICAgICAgb2JqIDogJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICghc2VsZikge1xuICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG9iai5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldERlbGVnYXRlT3B0aW9ucygpKVxuICAgICAgJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcbiAgICB9XG5cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xuICAgICAgc2VsZi5pblN0YXRlW29iai50eXBlID09ICdmb2N1c2luJyA/ICdmb2N1cycgOiAnaG92ZXInXSA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoc2VsZi50aXAoKS5oYXNDbGFzcygnaW4nKSB8fCBzZWxmLmhvdmVyU3RhdGUgPT0gJ2luJykge1xuICAgICAgc2VsZi5ob3ZlclN0YXRlID0gJ2luJ1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dClcblxuICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdpbidcblxuICAgIGlmICghc2VsZi5vcHRpb25zLmRlbGF5IHx8ICFzZWxmLm9wdGlvbnMuZGVsYXkuc2hvdykgcmV0dXJuIHNlbGYuc2hvdygpXG5cbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmhvdmVyU3RhdGUgPT0gJ2luJykgc2VsZi5zaG93KClcbiAgICB9LCBzZWxmLm9wdGlvbnMuZGVsYXkuc2hvdylcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmlzSW5TdGF0ZVRydWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuaW5TdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuaW5TdGF0ZVtrZXldKSByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUubGVhdmUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIHNlbGYgPSBvYmogaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yID9cbiAgICAgIG9iaiA6ICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmouY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcbiAgICAgICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXG4gICAgfVxuXG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mICQuRXZlbnQpIHtcbiAgICAgIHNlbGYuaW5TdGF0ZVtvYmoudHlwZSA9PSAnZm9jdXNvdXQnID8gJ2ZvY3VzJyA6ICdob3ZlciddID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5pc0luU3RhdGVUcnVlKCkpIHJldHVyblxuXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dClcblxuICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdvdXQnXG5cbiAgICBpZiAoIXNlbGYub3B0aW9ucy5kZWxheSB8fCAhc2VsZi5vcHRpb25zLmRlbGF5LmhpZGUpIHJldHVybiBzZWxmLmhpZGUoKVxuXG4gICAgc2VsZi50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5ob3ZlclN0YXRlID09ICdvdXQnKSBzZWxmLmhpZGUoKVxuICAgIH0sIHNlbGYub3B0aW9ucy5kZWxheS5oaWRlKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZSA9ICQuRXZlbnQoJ3Nob3cuYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICh0aGlzLmhhc0NvbnRlbnQoKSAmJiB0aGlzLmVuYWJsZWQpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgICB2YXIgaW5Eb20gPSAkLmNvbnRhaW5zKHRoaXMuJGVsZW1lbnRbMF0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuJGVsZW1lbnRbMF0pXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCAhaW5Eb20pIHJldHVyblxuICAgICAgdmFyIHRoYXQgPSB0aGlzXG5cbiAgICAgIHZhciAkdGlwID0gdGhpcy50aXAoKVxuXG4gICAgICB2YXIgdGlwSWQgPSB0aGlzLmdldFVJRCh0aGlzLnR5cGUpXG5cbiAgICAgIHRoaXMuc2V0Q29udGVudCgpXG4gICAgICAkdGlwLmF0dHIoJ2lkJywgdGlwSWQpXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknLCB0aXBJZClcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24pICR0aXAuYWRkQ2xhc3MoJ2ZhZGUnKVxuXG4gICAgICB2YXIgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQgPT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQuY2FsbCh0aGlzLCAkdGlwWzBdLCB0aGlzLiRlbGVtZW50WzBdKSA6XG4gICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnRcblxuICAgICAgdmFyIGF1dG9Ub2tlbiA9IC9cXHM/YXV0bz9cXHM/L2lcbiAgICAgIHZhciBhdXRvUGxhY2UgPSBhdXRvVG9rZW4udGVzdChwbGFjZW1lbnQpXG4gICAgICBpZiAoYXV0b1BsYWNlKSBwbGFjZW1lbnQgPSBwbGFjZW1lbnQucmVwbGFjZShhdXRvVG9rZW4sICcnKSB8fCAndG9wJ1xuXG4gICAgICAkdGlwXG4gICAgICAgIC5kZXRhY2goKVxuICAgICAgICAuY3NzKHsgdG9wOiAwLCBsZWZ0OiAwLCBkaXNwbGF5OiAnYmxvY2snIH0pXG4gICAgICAgIC5hZGRDbGFzcyhwbGFjZW1lbnQpXG4gICAgICAgIC5kYXRhKCdicy4nICsgdGhpcy50eXBlLCB0aGlzKVxuXG4gICAgICB0aGlzLm9wdGlvbnMuY29udGFpbmVyID8gJHRpcC5hcHBlbmRUbyh0aGlzLm9wdGlvbnMuY29udGFpbmVyKSA6ICR0aXAuaW5zZXJ0QWZ0ZXIodGhpcy4kZWxlbWVudClcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignaW5zZXJ0ZWQuYnMuJyArIHRoaXMudHlwZSlcblxuICAgICAgdmFyIHBvcyAgICAgICAgICA9IHRoaXMuZ2V0UG9zaXRpb24oKVxuICAgICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICAgIHZhciBhY3R1YWxIZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodFxuXG4gICAgICBpZiAoYXV0b1BsYWNlKSB7XG4gICAgICAgIHZhciBvcmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRcbiAgICAgICAgdmFyIHZpZXdwb3J0RGltID0gdGhpcy5nZXRQb3NpdGlvbih0aGlzLiR2aWV3cG9ydClcblxuICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgJiYgcG9zLmJvdHRvbSArIGFjdHVhbEhlaWdodCA+IHZpZXdwb3J0RGltLmJvdHRvbSA/ICd0b3AnICAgIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICd0b3AnICAgICYmIHBvcy50b3AgICAgLSBhY3R1YWxIZWlnaHQgPCB2aWV3cG9ydERpbS50b3AgICAgPyAnYm90dG9tJyA6XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAncmlnaHQnICAmJiBwb3MucmlnaHQgICsgYWN0dWFsV2lkdGggID4gdmlld3BvcnREaW0ud2lkdGggID8gJ2xlZnQnICAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgJiYgcG9zLmxlZnQgICAtIGFjdHVhbFdpZHRoICA8IHZpZXdwb3J0RGltLmxlZnQgICA/ICdyaWdodCcgIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50XG5cbiAgICAgICAgJHRpcFxuICAgICAgICAgIC5yZW1vdmVDbGFzcyhvcmdQbGFjZW1lbnQpXG4gICAgICAgICAgLmFkZENsYXNzKHBsYWNlbWVudClcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbGN1bGF0ZWRPZmZzZXQgPSB0aGlzLmdldENhbGN1bGF0ZWRPZmZzZXQocGxhY2VtZW50LCBwb3MsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpXG5cbiAgICAgIHRoaXMuYXBwbHlQbGFjZW1lbnQoY2FsY3VsYXRlZE9mZnNldCwgcGxhY2VtZW50KVxuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcmV2SG92ZXJTdGF0ZSA9IHRoYXQuaG92ZXJTdGF0ZVxuICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ3Nob3duLmJzLicgKyB0aGF0LnR5cGUpXG4gICAgICAgIHRoYXQuaG92ZXJTdGF0ZSA9IG51bGxcblxuICAgICAgICBpZiAocHJldkhvdmVyU3RhdGUgPT0gJ291dCcpIHRoYXQubGVhdmUodGhhdClcbiAgICAgIH1cblxuICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kdGlwLmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgICAkdGlwXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY29tcGxldGUpXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjb21wbGV0ZSgpXG4gICAgfVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuYXBwbHlQbGFjZW1lbnQgPSBmdW5jdGlvbiAob2Zmc2V0LCBwbGFjZW1lbnQpIHtcbiAgICB2YXIgJHRpcCAgID0gdGhpcy50aXAoKVxuICAgIHZhciB3aWR0aCAgPSAkdGlwWzBdLm9mZnNldFdpZHRoXG4gICAgdmFyIGhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICAvLyBtYW51YWxseSByZWFkIG1hcmdpbnMgYmVjYXVzZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaW5jbHVkZXMgZGlmZmVyZW5jZVxuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUludCgkdGlwLmNzcygnbWFyZ2luLXRvcCcpLCAxMClcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlSW50KCR0aXAuY3NzKCdtYXJnaW4tbGVmdCcpLCAxMClcblxuICAgIC8vIHdlIG11c3QgY2hlY2sgZm9yIE5hTiBmb3IgaWUgOC85XG4gICAgaWYgKGlzTmFOKG1hcmdpblRvcCkpICBtYXJnaW5Ub3AgID0gMFxuICAgIGlmIChpc05hTihtYXJnaW5MZWZ0KSkgbWFyZ2luTGVmdCA9IDBcblxuICAgIG9mZnNldC50b3AgICs9IG1hcmdpblRvcFxuICAgIG9mZnNldC5sZWZ0ICs9IG1hcmdpbkxlZnRcblxuICAgIC8vICQuZm4ub2Zmc2V0IGRvZXNuJ3Qgcm91bmQgcGl4ZWwgdmFsdWVzXG4gICAgLy8gc28gd2UgdXNlIHNldE9mZnNldCBkaXJlY3RseSB3aXRoIG91ciBvd24gZnVuY3Rpb24gQi0wXG4gICAgJC5vZmZzZXQuc2V0T2Zmc2V0KCR0aXBbMF0sICQuZXh0ZW5kKHtcbiAgICAgIHVzaW5nOiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgJHRpcC5jc3Moe1xuICAgICAgICAgIHRvcDogTWF0aC5yb3VuZChwcm9wcy50b3ApLFxuICAgICAgICAgIGxlZnQ6IE1hdGgucm91bmQocHJvcHMubGVmdClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LCBvZmZzZXQpLCAwKVxuXG4gICAgJHRpcC5hZGRDbGFzcygnaW4nKVxuXG4gICAgLy8gY2hlY2sgdG8gc2VlIGlmIHBsYWNpbmcgdGlwIGluIG5ldyBvZmZzZXQgY2F1c2VkIHRoZSB0aXAgdG8gcmVzaXplIGl0c2VsZlxuICAgIHZhciBhY3R1YWxXaWR0aCAgPSAkdGlwWzBdLm9mZnNldFdpZHRoXG4gICAgdmFyIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICBpZiAocGxhY2VtZW50ID09ICd0b3AnICYmIGFjdHVhbEhlaWdodCAhPSBoZWlnaHQpIHtcbiAgICAgIG9mZnNldC50b3AgPSBvZmZzZXQudG9wICsgaGVpZ2h0IC0gYWN0dWFsSGVpZ2h0XG4gICAgfVxuXG4gICAgdmFyIGRlbHRhID0gdGhpcy5nZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEocGxhY2VtZW50LCBvZmZzZXQsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpXG5cbiAgICBpZiAoZGVsdGEubGVmdCkgb2Zmc2V0LmxlZnQgKz0gZGVsdGEubGVmdFxuICAgIGVsc2Ugb2Zmc2V0LnRvcCArPSBkZWx0YS50b3BcblxuICAgIHZhciBpc1ZlcnRpY2FsICAgICAgICAgID0gL3RvcHxib3R0b20vLnRlc3QocGxhY2VtZW50KVxuICAgIHZhciBhcnJvd0RlbHRhICAgICAgICAgID0gaXNWZXJ0aWNhbCA/IGRlbHRhLmxlZnQgKiAyIC0gd2lkdGggKyBhY3R1YWxXaWR0aCA6IGRlbHRhLnRvcCAqIDIgLSBoZWlnaHQgKyBhY3R1YWxIZWlnaHRcbiAgICB2YXIgYXJyb3dPZmZzZXRQb3NpdGlvbiA9IGlzVmVydGljYWwgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCdcblxuICAgICR0aXAub2Zmc2V0KG9mZnNldClcbiAgICB0aGlzLnJlcGxhY2VBcnJvdyhhcnJvd0RlbHRhLCAkdGlwWzBdW2Fycm93T2Zmc2V0UG9zaXRpb25dLCBpc1ZlcnRpY2FsKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUucmVwbGFjZUFycm93ID0gZnVuY3Rpb24gKGRlbHRhLCBkaW1lbnNpb24sIGlzVmVydGljYWwpIHtcbiAgICB0aGlzLmFycm93KClcbiAgICAgIC5jc3MoaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnLCA1MCAqICgxIC0gZGVsdGEgLyBkaW1lbnNpb24pICsgJyUnKVxuICAgICAgLmNzcyhpc1ZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCcsICcnKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHRpcCAgPSB0aGlzLnRpcCgpXG4gICAgdmFyIHRpdGxlID0gdGhpcy5nZXRUaXRsZSgpXG5cbiAgICAkdGlwLmZpbmQoJy50b29sdGlwLWlubmVyJylbdGhpcy5vcHRpb25zLmh0bWwgPyAnaHRtbCcgOiAndGV4dCddKHRpdGxlKVxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2ZhZGUgaW4gdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0JylcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB2YXIgJHRpcCA9ICQodGhpcy4kdGlwKVxuICAgIHZhciBlICAgID0gJC5FdmVudCgnaGlkZS5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICBpZiAodGhhdC5ob3ZlclN0YXRlICE9ICdpbicpICR0aXAuZGV0YWNoKClcbiAgICAgIHRoYXQuJGVsZW1lbnRcbiAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknKVxuICAgICAgICAudHJpZ2dlcignaGlkZGVuLmJzLicgKyB0aGF0LnR5cGUpXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAkdGlwLnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiAkdGlwLmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgJHRpcFxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgY29tcGxldGUoKVxuXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbFxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmZpeFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICBpZiAoJGUuYXR0cigndGl0bGUnKSB8fCB0eXBlb2YgJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpICE9ICdzdHJpbmcnKSB7XG4gICAgICAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgJGUuYXR0cigndGl0bGUnKSB8fCAnJykuYXR0cigndGl0bGUnLCAnJylcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5oYXNDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRpdGxlKClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgJGVsZW1lbnQgICA9ICRlbGVtZW50IHx8IHRoaXMuJGVsZW1lbnRcblxuICAgIHZhciBlbCAgICAgPSAkZWxlbWVudFswXVxuICAgIHZhciBpc0JvZHkgPSBlbC50YWdOYW1lID09ICdCT0RZJ1xuXG4gICAgdmFyIGVsUmVjdCAgICA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgaWYgKGVsUmVjdC53aWR0aCA9PSBudWxsKSB7XG4gICAgICAvLyB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBtaXNzaW5nIGluIElFOCwgc28gY29tcHV0ZSB0aGVtIG1hbnVhbGx5OyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8xNDA5M1xuICAgICAgZWxSZWN0ID0gJC5leHRlbmQoe30sIGVsUmVjdCwgeyB3aWR0aDogZWxSZWN0LnJpZ2h0IC0gZWxSZWN0LmxlZnQsIGhlaWdodDogZWxSZWN0LmJvdHRvbSAtIGVsUmVjdC50b3AgfSlcbiAgICB9XG4gICAgdmFyIGVsT2Zmc2V0ICA9IGlzQm9keSA/IHsgdG9wOiAwLCBsZWZ0OiAwIH0gOiAkZWxlbWVudC5vZmZzZXQoKVxuICAgIHZhciBzY3JvbGwgICAgPSB7IHNjcm9sbDogaXNCb2R5ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA6ICRlbGVtZW50LnNjcm9sbFRvcCgpIH1cbiAgICB2YXIgb3V0ZXJEaW1zID0gaXNCb2R5ID8geyB3aWR0aDogJCh3aW5kb3cpLndpZHRoKCksIGhlaWdodDogJCh3aW5kb3cpLmhlaWdodCgpIH0gOiBudWxsXG5cbiAgICByZXR1cm4gJC5leHRlbmQoe30sIGVsUmVjdCwgc2Nyb2xsLCBvdXRlckRpbXMsIGVsT2Zmc2V0KVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Q2FsY3VsYXRlZE9mZnNldCA9IGZ1bmN0aW9uIChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCkge1xuICAgIHJldHVybiBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQsICAgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgPyB7IHRvcDogcG9zLnRvcCAtIGFjdHVhbEhlaWdodCwgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQgLyAyIC0gYWN0dWFsSGVpZ2h0IC8gMiwgbGVmdDogcG9zLmxlZnQgLSBhY3R1YWxXaWR0aCB9IDpcbiAgICAgICAgLyogcGxhY2VtZW50ID09ICdyaWdodCcgKi8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIH1cblxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Vmlld3BvcnRBZGp1c3RlZERlbHRhID0gZnVuY3Rpb24gKHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KSB7XG4gICAgdmFyIGRlbHRhID0geyB0b3A6IDAsIGxlZnQ6IDAgfVxuICAgIGlmICghdGhpcy4kdmlld3BvcnQpIHJldHVybiBkZWx0YVxuXG4gICAgdmFyIHZpZXdwb3J0UGFkZGluZyA9IHRoaXMub3B0aW9ucy52aWV3cG9ydCAmJiB0aGlzLm9wdGlvbnMudmlld3BvcnQucGFkZGluZyB8fCAwXG4gICAgdmFyIHZpZXdwb3J0RGltZW5zaW9ucyA9IHRoaXMuZ2V0UG9zaXRpb24odGhpcy4kdmlld3BvcnQpXG5cbiAgICBpZiAoL3JpZ2h0fGxlZnQvLnRlc3QocGxhY2VtZW50KSkge1xuICAgICAgdmFyIHRvcEVkZ2VPZmZzZXQgICAgPSBwb3MudG9wIC0gdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbFxuICAgICAgdmFyIGJvdHRvbUVkZ2VPZmZzZXQgPSBwb3MudG9wICsgdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbCArIGFjdHVhbEhlaWdodFxuICAgICAgaWYgKHRvcEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMudG9wKSB7IC8vIHRvcCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wIC0gdG9wRWRnZU9mZnNldFxuICAgICAgfSBlbHNlIGlmIChib3R0b21FZGdlT2Zmc2V0ID4gdmlld3BvcnREaW1lbnNpb25zLnRvcCArIHZpZXdwb3J0RGltZW5zaW9ucy5oZWlnaHQpIHsgLy8gYm90dG9tIG92ZXJmbG93XG4gICAgICAgIGRlbHRhLnRvcCA9IHZpZXdwb3J0RGltZW5zaW9ucy50b3AgKyB2aWV3cG9ydERpbWVuc2lvbnMuaGVpZ2h0IC0gYm90dG9tRWRnZU9mZnNldFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVmdEVkZ2VPZmZzZXQgID0gcG9zLmxlZnQgLSB2aWV3cG9ydFBhZGRpbmdcbiAgICAgIHZhciByaWdodEVkZ2VPZmZzZXQgPSBwb3MubGVmdCArIHZpZXdwb3J0UGFkZGluZyArIGFjdHVhbFdpZHRoXG4gICAgICBpZiAobGVmdEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCkgeyAvLyBsZWZ0IG92ZXJmbG93XG4gICAgICAgIGRlbHRhLmxlZnQgPSB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCAtIGxlZnRFZGdlT2Zmc2V0XG4gICAgICB9IGVsc2UgaWYgKHJpZ2h0RWRnZU9mZnNldCA+IHZpZXdwb3J0RGltZW5zaW9ucy5yaWdodCkgeyAvLyByaWdodCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS5sZWZ0ID0gdmlld3BvcnREaW1lbnNpb25zLmxlZnQgKyB2aWV3cG9ydERpbWVuc2lvbnMud2lkdGggLSByaWdodEVkZ2VPZmZzZXRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsdGFcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aXRsZVxuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICB2YXIgbyAgPSB0aGlzLm9wdGlvbnNcblxuICAgIHRpdGxlID0gJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpXG4gICAgICB8fCAodHlwZW9mIG8udGl0bGUgPT0gJ2Z1bmN0aW9uJyA/IG8udGl0bGUuY2FsbCgkZVswXSkgOiAgby50aXRsZSlcblxuICAgIHJldHVybiB0aXRsZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VUlEID0gZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIGRvIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogMTAwMDAwMClcbiAgICB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSlcbiAgICByZXR1cm4gcHJlZml4XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50aXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLiR0aXApIHtcbiAgICAgIHRoaXMuJHRpcCA9ICQodGhpcy5vcHRpb25zLnRlbXBsYXRlKVxuICAgICAgaWYgKHRoaXMuJHRpcC5sZW5ndGggIT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy50eXBlICsgJyBgdGVtcGxhdGVgIG9wdGlvbiBtdXN0IGNvbnNpc3Qgb2YgZXhhY3RseSAxIHRvcC1sZXZlbCBlbGVtZW50IScpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiR0aXBcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmFycm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy50b29sdGlwLWFycm93JykpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSAhdGhpcy5lbmFibGVkXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBzZWxmID0gdGhpc1xuICAgIGlmIChlKSB7XG4gICAgICBzZWxmID0gJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG4gICAgICBpZiAoIXNlbGYpIHtcbiAgICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGUuY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcbiAgICAgICAgJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGUpIHtcbiAgICAgIHNlbGYuaW5TdGF0ZS5jbGljayA9ICFzZWxmLmluU3RhdGUuY2xpY2tcbiAgICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgc2VsZi5lbnRlcihzZWxmKVxuICAgICAgZWxzZSBzZWxmLmxlYXZlKHNlbGYpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYudGlwKCkuaGFzQ2xhc3MoJ2luJykgPyBzZWxmLmxlYXZlKHNlbGYpIDogc2VsZi5lbnRlcihzZWxmKVxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dClcbiAgICB0aGlzLmhpZGUoZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC5vZmYoJy4nICsgdGhhdC50eXBlKS5yZW1vdmVEYXRhKCdicy4nICsgdGhhdC50eXBlKVxuICAgICAgaWYgKHRoYXQuJHRpcCkge1xuICAgICAgICB0aGF0LiR0aXAuZGV0YWNoKClcbiAgICAgIH1cbiAgICAgIHRoYXQuJHRpcCA9IG51bGxcbiAgICAgIHRoYXQuJGFycm93ID0gbnVsbFxuICAgICAgdGhhdC4kdmlld3BvcnQgPSBudWxsXG4gICAgfSlcbiAgfVxuXG5cbiAgLy8gVE9PTFRJUCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLnRvb2x0aXAnKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEgJiYgL2Rlc3Ryb3l8aGlkZS8udGVzdChvcHRpb24pKSByZXR1cm5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMudG9vbHRpcCcsIChkYXRhID0gbmV3IFRvb2x0aXAodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnRvb2x0aXBcblxuICAkLmZuLnRvb2x0aXAgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi50b29sdGlwLkNvbnN0cnVjdG9yID0gVG9vbHRpcFxuXG5cbiAgLy8gVE9PTFRJUCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi50b29sdGlwLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi50b29sdGlwID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG59KGpRdWVyeSk7XG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogdHJhbnNpdGlvbi5qcyB2My4zLjVcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3RyYW5zaXRpb25zXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQ1NTIFRSQU5TSVRJT04gU1VQUE9SVCAoU2hvdXRvdXQ6IGh0dHA6Ly93d3cubW9kZXJuaXpyLmNvbS8pXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYm9vdHN0cmFwJylcblxuICAgIHZhciB0cmFuc0VuZEV2ZW50TmFtZXMgPSB7XG4gICAgICBXZWJraXRUcmFuc2l0aW9uIDogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgTW96VHJhbnNpdGlvbiAgICA6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgIE9UcmFuc2l0aW9uICAgICAgOiAnb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQnLFxuICAgICAgdHJhbnNpdGlvbiAgICAgICA6ICd0cmFuc2l0aW9uZW5kJ1xuICAgIH1cblxuICAgIGZvciAodmFyIG5hbWUgaW4gdHJhbnNFbmRFdmVudE5hbWVzKSB7XG4gICAgICBpZiAoZWwuc3R5bGVbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4geyBlbmQ6IHRyYW5zRW5kRXZlbnROYW1lc1tuYW1lXSB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlIC8vIGV4cGxpY2l0IGZvciBpZTggKCAgLl8uKVxuICB9XG5cbiAgLy8gaHR0cDovL2Jsb2cuYWxleG1hY2Nhdy5jb20vY3NzLXRyYW5zaXRpb25zXG4gICQuZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICB2YXIgY2FsbGVkID0gZmFsc2VcbiAgICB2YXIgJGVsID0gdGhpc1xuICAgICQodGhpcykub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7IGNhbGxlZCA9IHRydWUgfSlcbiAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7IGlmICghY2FsbGVkKSAkKCRlbCkudHJpZ2dlcigkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpIH1cbiAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkdXJhdGlvbilcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgJChmdW5jdGlvbiAoKSB7XG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRW5kKClcblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVyblxuXG4gICAgJC5ldmVudC5zcGVjaWFsLmJzVHJhbnNpdGlvbkVuZCA9IHtcbiAgICAgIGJpbmRUeXBlOiAkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsXG4gICAgICBkZWxlZ2F0ZVR5cGU6ICQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCxcbiAgICAgIGhhbmRsZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKHRoaXMpKSByZXR1cm4gZS5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG59KGpRdWVyeSk7XG4iLCIvKiEgQGxpY2Vuc2UgRmlyZWJhc2UgdjIuMy4xXG4gICAgTGljZW5zZTogaHR0cHM6Ly93d3cuZmlyZWJhc2UuY29tL3Rlcm1zL3Rlcm1zLW9mLXNlcnZpY2UuaHRtbCAqL1xuKGZ1bmN0aW9uKCkge3ZhciBnLGFhPXRoaXM7ZnVuY3Rpb24gbihhKXtyZXR1cm4gdm9pZCAwIT09YX1mdW5jdGlvbiBiYSgpe31mdW5jdGlvbiBjYShhKXthLnViPWZ1bmN0aW9uKCl7cmV0dXJuIGEudWY/YS51ZjphLnVmPW5ldyBhfX1cbmZ1bmN0aW9uIGRhKGEpe3ZhciBiPXR5cGVvZiBhO2lmKFwib2JqZWN0XCI9PWIpaWYoYSl7aWYoYSBpbnN0YW5jZW9mIEFycmF5KXJldHVyblwiYXJyYXlcIjtpZihhIGluc3RhbmNlb2YgT2JqZWN0KXJldHVybiBiO3ZhciBjPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKTtpZihcIltvYmplY3QgV2luZG93XVwiPT1jKXJldHVyblwib2JqZWN0XCI7aWYoXCJbb2JqZWN0IEFycmF5XVwiPT1jfHxcIm51bWJlclwiPT10eXBlb2YgYS5sZW5ndGgmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLnNwbGljZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEucHJvcGVydHlJc0VudW1lcmFibGUmJiFhLnByb3BlcnR5SXNFbnVtZXJhYmxlKFwic3BsaWNlXCIpKXJldHVyblwiYXJyYXlcIjtpZihcIltvYmplY3QgRnVuY3Rpb25dXCI9PWN8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmNhbGwmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLnByb3BlcnR5SXNFbnVtZXJhYmxlJiYhYS5wcm9wZXJ0eUlzRW51bWVyYWJsZShcImNhbGxcIikpcmV0dXJuXCJmdW5jdGlvblwifWVsc2UgcmV0dXJuXCJudWxsXCI7XG5lbHNlIGlmKFwiZnVuY3Rpb25cIj09YiYmXCJ1bmRlZmluZWRcIj09dHlwZW9mIGEuY2FsbClyZXR1cm5cIm9iamVjdFwiO3JldHVybiBifWZ1bmN0aW9uIGVhKGEpe3JldHVyblwiYXJyYXlcIj09ZGEoYSl9ZnVuY3Rpb24gZmEoYSl7dmFyIGI9ZGEoYSk7cmV0dXJuXCJhcnJheVwiPT1ifHxcIm9iamVjdFwiPT1iJiZcIm51bWJlclwiPT10eXBlb2YgYS5sZW5ndGh9ZnVuY3Rpb24gcChhKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgYX1mdW5jdGlvbiBnYShhKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgYX1mdW5jdGlvbiBoYShhKXtyZXR1cm5cImZ1bmN0aW9uXCI9PWRhKGEpfWZ1bmN0aW9uIGlhKGEpe3ZhciBiPXR5cGVvZiBhO3JldHVyblwib2JqZWN0XCI9PWImJm51bGwhPWF8fFwiZnVuY3Rpb25cIj09Yn1mdW5jdGlvbiBqYShhLGIsYyl7cmV0dXJuIGEuY2FsbC5hcHBseShhLmJpbmQsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIGthKGEsYixjKXtpZighYSl0aHJvdyBFcnJvcigpO2lmKDI8YXJndW1lbnRzLmxlbmd0aCl7dmFyIGQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7QXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoYyxkKTtyZXR1cm4gYS5hcHBseShiLGMpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYS5hcHBseShiLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIHEoYSxiLGMpe3E9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQmJi0xIT1GdW5jdGlvbi5wcm90b3R5cGUuYmluZC50b1N0cmluZygpLmluZGV4T2YoXCJuYXRpdmUgY29kZVwiKT9qYTprYTtyZXR1cm4gcS5hcHBseShudWxsLGFyZ3VtZW50cyl9dmFyIGxhPURhdGUubm93fHxmdW5jdGlvbigpe3JldHVybituZXcgRGF0ZX07XG5mdW5jdGlvbiBtYShhLGIpe2Z1bmN0aW9uIGMoKXt9Yy5wcm90b3R5cGU9Yi5wcm90b3R5cGU7YS5iaD1iLnByb3RvdHlwZTthLnByb3RvdHlwZT1uZXcgYzthLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1hO2EuWWc9ZnVuY3Rpb24oYSxjLGYpe2Zvcih2YXIgaD1BcnJheShhcmd1bWVudHMubGVuZ3RoLTIpLGs9MjtrPGFyZ3VtZW50cy5sZW5ndGg7aysrKWhbay0yXT1hcmd1bWVudHNba107cmV0dXJuIGIucHJvdG90eXBlW2NdLmFwcGx5KGEsaCl9fTtmdW5jdGlvbiByKGEsYil7Zm9yKHZhciBjIGluIGEpYi5jYWxsKHZvaWQgMCxhW2NdLGMsYSl9ZnVuY3Rpb24gbmEoYSxiKXt2YXIgYz17fSxkO2ZvcihkIGluIGEpY1tkXT1iLmNhbGwodm9pZCAwLGFbZF0sZCxhKTtyZXR1cm4gY31mdW5jdGlvbiBvYShhLGIpe2Zvcih2YXIgYyBpbiBhKWlmKCFiLmNhbGwodm9pZCAwLGFbY10sYyxhKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBwYShhKXt2YXIgYj0wLGM7Zm9yKGMgaW4gYSliKys7cmV0dXJuIGJ9ZnVuY3Rpb24gcWEoYSl7Zm9yKHZhciBiIGluIGEpcmV0dXJuIGJ9ZnVuY3Rpb24gcmEoYSl7dmFyIGI9W10sYz0wLGQ7Zm9yKGQgaW4gYSliW2MrK109YVtkXTtyZXR1cm4gYn1mdW5jdGlvbiBzYShhKXt2YXIgYj1bXSxjPTAsZDtmb3IoZCBpbiBhKWJbYysrXT1kO3JldHVybiBifWZ1bmN0aW9uIHRhKGEsYil7Zm9yKHZhciBjIGluIGEpaWYoYVtjXT09YilyZXR1cm4hMDtyZXR1cm4hMX1cbmZ1bmN0aW9uIHVhKGEsYixjKXtmb3IodmFyIGQgaW4gYSlpZihiLmNhbGwoYyxhW2RdLGQsYSkpcmV0dXJuIGR9ZnVuY3Rpb24gdmEoYSxiKXt2YXIgYz11YShhLGIsdm9pZCAwKTtyZXR1cm4gYyYmYVtjXX1mdW5jdGlvbiB3YShhKXtmb3IodmFyIGIgaW4gYSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiB4YShhKXt2YXIgYj17fSxjO2ZvcihjIGluIGEpYltjXT1hW2NdO3JldHVybiBifXZhciB5YT1cImNvbnN0cnVjdG9yIGhhc093blByb3BlcnR5IGlzUHJvdG90eXBlT2YgcHJvcGVydHlJc0VudW1lcmFibGUgdG9Mb2NhbGVTdHJpbmcgdG9TdHJpbmcgdmFsdWVPZlwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHphKGEsYil7Zm9yKHZhciBjLGQsZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe2Q9YXJndW1lbnRzW2VdO2ZvcihjIGluIGQpYVtjXT1kW2NdO2Zvcih2YXIgZj0wO2Y8eWEubGVuZ3RoO2YrKyljPXlhW2ZdLE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkLGMpJiYoYVtjXT1kW2NdKX19O2Z1bmN0aW9uIEFhKGEpe2E9U3RyaW5nKGEpO2lmKC9eXFxzKiQvLnRlc3QoYSk/MDovXltcXF0sOnt9XFxzXFx1MjAyOFxcdTIwMjldKiQvLnRlc3QoYS5yZXBsYWNlKC9cXFxcW1wiXFxcXFxcL2JmbnJ0dV0vZyxcIkBcIikucmVwbGFjZSgvXCJbXlwiXFxcXFxcblxcclxcdTIwMjhcXHUyMDI5XFx4MDAtXFx4MDhcXHgwYS1cXHgxZl0qXCJ8dHJ1ZXxmYWxzZXxudWxsfC0/XFxkKyg/OlxcLlxcZCopPyg/OltlRV1bK1xcLV0/XFxkKyk/L2csXCJdXCIpLnJlcGxhY2UoLyg/Ol58OnwsKSg/OltcXHNcXHUyMDI4XFx1MjAyOV0qXFxbKSsvZyxcIlwiKSkpdHJ5e3JldHVybiBldmFsKFwiKFwiK2ErXCIpXCIpfWNhdGNoKGIpe310aHJvdyBFcnJvcihcIkludmFsaWQgSlNPTiBzdHJpbmc6IFwiK2EpO31mdW5jdGlvbiBCYSgpe3RoaXMuU2Q9dm9pZCAwfVxuZnVuY3Rpb24gQ2EoYSxiLGMpe3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcInN0cmluZ1wiOkRhKGIsYyk7YnJlYWs7Y2FzZSBcIm51bWJlclwiOmMucHVzaChpc0Zpbml0ZShiKSYmIWlzTmFOKGIpP2I6XCJudWxsXCIpO2JyZWFrO2Nhc2UgXCJib29sZWFuXCI6Yy5wdXNoKGIpO2JyZWFrO2Nhc2UgXCJ1bmRlZmluZWRcIjpjLnB1c2goXCJudWxsXCIpO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjppZihudWxsPT1iKXtjLnB1c2goXCJudWxsXCIpO2JyZWFrfWlmKGVhKGIpKXt2YXIgZD1iLmxlbmd0aDtjLnB1c2goXCJbXCIpO2Zvcih2YXIgZT1cIlwiLGY9MDtmPGQ7ZisrKWMucHVzaChlKSxlPWJbZl0sQ2EoYSxhLlNkP2EuU2QuY2FsbChiLFN0cmluZyhmKSxlKTplLGMpLGU9XCIsXCI7Yy5wdXNoKFwiXVwiKTticmVha31jLnB1c2goXCJ7XCIpO2Q9XCJcIjtmb3IoZiBpbiBiKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLGYpJiYoZT1iW2ZdLFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJihjLnB1c2goZCksRGEoZixjKSxcbmMucHVzaChcIjpcIiksQ2EoYSxhLlNkP2EuU2QuY2FsbChiLGYsZSk6ZSxjKSxkPVwiLFwiKSk7Yy5wdXNoKFwifVwiKTticmVhaztjYXNlIFwiZnVuY3Rpb25cIjpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKFwiVW5rbm93biB0eXBlOiBcIit0eXBlb2YgYik7fX12YXIgRWE9eydcIic6J1xcXFxcIicsXCJcXFxcXCI6XCJcXFxcXFxcXFwiLFwiL1wiOlwiXFxcXC9cIixcIlxcYlwiOlwiXFxcXGJcIixcIlxcZlwiOlwiXFxcXGZcIixcIlxcblwiOlwiXFxcXG5cIixcIlxcclwiOlwiXFxcXHJcIixcIlxcdFwiOlwiXFxcXHRcIixcIlxceDBCXCI6XCJcXFxcdTAwMGJcIn0sRmE9L1xcdWZmZmYvLnRlc3QoXCJcXHVmZmZmXCIpPy9bXFxcXFxcXCJcXHgwMC1cXHgxZlxceDdmLVxcdWZmZmZdL2c6L1tcXFxcXFxcIlxceDAwLVxceDFmXFx4N2YtXFx4ZmZdL2c7XG5mdW5jdGlvbiBEYShhLGIpe2IucHVzaCgnXCInLGEucmVwbGFjZShGYSxmdW5jdGlvbihhKXtpZihhIGluIEVhKXJldHVybiBFYVthXTt2YXIgYj1hLmNoYXJDb2RlQXQoMCksZT1cIlxcXFx1XCI7MTY+Yj9lKz1cIjAwMFwiOjI1Nj5iP2UrPVwiMDBcIjo0MDk2PmImJihlKz1cIjBcIik7cmV0dXJuIEVhW2FdPWUrYi50b1N0cmluZygxNil9KSwnXCInKX07ZnVuY3Rpb24gR2EoKXtyZXR1cm4gTWF0aC5mbG9vcigyMTQ3NDgzNjQ4Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDM2KStNYXRoLmFicyhNYXRoLmZsb29yKDIxNDc0ODM2NDgqTWF0aC5yYW5kb20oKSlebGEoKSkudG9TdHJpbmcoMzYpfTt2YXIgSGE7YTp7dmFyIElhPWFhLm5hdmlnYXRvcjtpZihJYSl7dmFyIEphPUlhLnVzZXJBZ2VudDtpZihKYSl7SGE9SmE7YnJlYWsgYX19SGE9XCJcIn07ZnVuY3Rpb24gS2EoKXt0aGlzLlZhPS0xfTtmdW5jdGlvbiBMYSgpe3RoaXMuVmE9LTE7dGhpcy5WYT02NDt0aGlzLk49W107dGhpcy5tZT1bXTt0aGlzLldmPVtdO3RoaXMuTGQ9W107dGhpcy5MZFswXT0xMjg7Zm9yKHZhciBhPTE7YTx0aGlzLlZhOysrYSl0aGlzLkxkW2FdPTA7dGhpcy5kZT10aGlzLmFjPTA7dGhpcy5yZXNldCgpfW1hKExhLEthKTtMYS5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLk5bMF09MTczMjU4NDE5Mzt0aGlzLk5bMV09NDAyMzIzMzQxNzt0aGlzLk5bMl09MjU2MjM4MzEwMjt0aGlzLk5bM109MjcxNzMzODc4O3RoaXMuTls0XT0zMjg1Mzc3NTIwO3RoaXMuZGU9dGhpcy5hYz0wfTtcbmZ1bmN0aW9uIE1hKGEsYixjKXtjfHwoYz0wKTt2YXIgZD1hLldmO2lmKHAoYikpZm9yKHZhciBlPTA7MTY+ZTtlKyspZFtlXT1iLmNoYXJDb2RlQXQoYyk8PDI0fGIuY2hhckNvZGVBdChjKzEpPDwxNnxiLmNoYXJDb2RlQXQoYysyKTw8OHxiLmNoYXJDb2RlQXQoYyszKSxjKz00O2Vsc2UgZm9yKGU9MDsxNj5lO2UrKylkW2VdPWJbY108PDI0fGJbYysxXTw8MTZ8YltjKzJdPDw4fGJbYyszXSxjKz00O2ZvcihlPTE2OzgwPmU7ZSsrKXt2YXIgZj1kW2UtM11eZFtlLThdXmRbZS0xNF1eZFtlLTE2XTtkW2VdPShmPDwxfGY+Pj4zMSkmNDI5NDk2NzI5NX1iPWEuTlswXTtjPWEuTlsxXTtmb3IodmFyIGg9YS5OWzJdLGs9YS5OWzNdLGw9YS5OWzRdLG0sZT0wOzgwPmU7ZSsrKTQwPmU/MjA+ZT8oZj1rXmMmKGheayksbT0xNTE4NTAwMjQ5KTooZj1jXmheayxtPTE4NTk3NzUzOTMpOjYwPmU/KGY9YyZofGsmKGN8aCksbT0yNDAwOTU5NzA4KTooZj1jXmheayxtPTMzOTU0Njk3ODIpLGY9KGI8PFxuNXxiPj4+MjcpK2YrbCttK2RbZV0mNDI5NDk2NzI5NSxsPWssaz1oLGg9KGM8PDMwfGM+Pj4yKSY0Mjk0OTY3Mjk1LGM9YixiPWY7YS5OWzBdPWEuTlswXStiJjQyOTQ5NjcyOTU7YS5OWzFdPWEuTlsxXStjJjQyOTQ5NjcyOTU7YS5OWzJdPWEuTlsyXStoJjQyOTQ5NjcyOTU7YS5OWzNdPWEuTlszXStrJjQyOTQ5NjcyOTU7YS5OWzRdPWEuTls0XStsJjQyOTQ5NjcyOTV9XG5MYS5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGEsYil7aWYobnVsbCE9YSl7bihiKXx8KGI9YS5sZW5ndGgpO2Zvcih2YXIgYz1iLXRoaXMuVmEsZD0wLGU9dGhpcy5tZSxmPXRoaXMuYWM7ZDxiOyl7aWYoMD09Zilmb3IoO2Q8PWM7KU1hKHRoaXMsYSxkKSxkKz10aGlzLlZhO2lmKHAoYSkpZm9yKDtkPGI7KXtpZihlW2ZdPWEuY2hhckNvZGVBdChkKSwrK2YsKytkLGY9PXRoaXMuVmEpe01hKHRoaXMsZSk7Zj0wO2JyZWFrfX1lbHNlIGZvcig7ZDxiOylpZihlW2ZdPWFbZF0sKytmLCsrZCxmPT10aGlzLlZhKXtNYSh0aGlzLGUpO2Y9MDticmVha319dGhpcy5hYz1mO3RoaXMuZGUrPWJ9fTt2YXIgdT1BcnJheS5wcm90b3R5cGUsTmE9dS5pbmRleE9mP2Z1bmN0aW9uKGEsYixjKXtyZXR1cm4gdS5pbmRleE9mLmNhbGwoYSxiLGMpfTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsPT1jPzA6MD5jP01hdGgubWF4KDAsYS5sZW5ndGgrYyk6YztpZihwKGEpKXJldHVybiBwKGIpJiYxPT1iLmxlbmd0aD9hLmluZGV4T2YoYixjKTotMTtmb3IoO2M8YS5sZW5ndGg7YysrKWlmKGMgaW4gYSYmYVtjXT09PWIpcmV0dXJuIGM7cmV0dXJuLTF9LE9hPXUuZm9yRWFjaD9mdW5jdGlvbihhLGIsYyl7dS5mb3JFYWNoLmNhbGwoYSxiLGMpfTpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPWEubGVuZ3RoLGU9cChhKT9hLnNwbGl0KFwiXCIpOmEsZj0wO2Y8ZDtmKyspZiBpbiBlJiZiLmNhbGwoYyxlW2ZdLGYsYSl9LFBhPXUuZmlsdGVyP2Z1bmN0aW9uKGEsYixjKXtyZXR1cm4gdS5maWx0ZXIuY2FsbChhLGIsYyl9OmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9YS5sZW5ndGgsZT1bXSxmPTAsaD1wKGEpP1xuYS5zcGxpdChcIlwiKTphLGs9MDtrPGQ7aysrKWlmKGsgaW4gaCl7dmFyIGw9aFtrXTtiLmNhbGwoYyxsLGssYSkmJihlW2YrK109bCl9cmV0dXJuIGV9LFFhPXUubWFwP2Z1bmN0aW9uKGEsYixjKXtyZXR1cm4gdS5tYXAuY2FsbChhLGIsYyl9OmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9YS5sZW5ndGgsZT1BcnJheShkKSxmPXAoYSk/YS5zcGxpdChcIlwiKTphLGg9MDtoPGQ7aCsrKWggaW4gZiYmKGVbaF09Yi5jYWxsKGMsZltoXSxoLGEpKTtyZXR1cm4gZX0sUmE9dS5yZWR1Y2U/ZnVuY3Rpb24oYSxiLGMsZCl7Zm9yKHZhciBlPVtdLGY9MSxoPWFyZ3VtZW50cy5sZW5ndGg7ZjxoO2YrKyllLnB1c2goYXJndW1lbnRzW2ZdKTtkJiYoZVswXT1xKGIsZCkpO3JldHVybiB1LnJlZHVjZS5hcHBseShhLGUpfTpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1jO09hKGEsZnVuY3Rpb24oYyxoKXtlPWIuY2FsbChkLGUsYyxoLGEpfSk7cmV0dXJuIGV9LFNhPXUuZXZlcnk/ZnVuY3Rpb24oYSxiLFxuYyl7cmV0dXJuIHUuZXZlcnkuY2FsbChhLGIsYyl9OmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9YS5sZW5ndGgsZT1wKGEpP2Euc3BsaXQoXCJcIik6YSxmPTA7ZjxkO2YrKylpZihmIGluIGUmJiFiLmNhbGwoYyxlW2ZdLGYsYSkpcmV0dXJuITE7cmV0dXJuITB9O2Z1bmN0aW9uIFRhKGEsYil7dmFyIGM9VWEoYSxiLHZvaWQgMCk7cmV0dXJuIDA+Yz9udWxsOnAoYSk/YS5jaGFyQXQoYyk6YVtjXX1mdW5jdGlvbiBVYShhLGIsYyl7Zm9yKHZhciBkPWEubGVuZ3RoLGU9cChhKT9hLnNwbGl0KFwiXCIpOmEsZj0wO2Y8ZDtmKyspaWYoZiBpbiBlJiZiLmNhbGwoYyxlW2ZdLGYsYSkpcmV0dXJuIGY7cmV0dXJuLTF9ZnVuY3Rpb24gVmEoYSxiKXt2YXIgYz1OYShhLGIpOzA8PWMmJnUuc3BsaWNlLmNhbGwoYSxjLDEpfWZ1bmN0aW9uIFdhKGEsYixjKXtyZXR1cm4gMj49YXJndW1lbnRzLmxlbmd0aD91LnNsaWNlLmNhbGwoYSxiKTp1LnNsaWNlLmNhbGwoYSxiLGMpfVxuZnVuY3Rpb24gWGEoYSxiKXthLnNvcnQoYnx8WWEpfWZ1bmN0aW9uIFlhKGEsYil7cmV0dXJuIGE+Yj8xOmE8Yj8tMTowfTt2YXIgWmE9LTEhPUhhLmluZGV4T2YoXCJPcGVyYVwiKXx8LTEhPUhhLmluZGV4T2YoXCJPUFJcIiksJGE9LTEhPUhhLmluZGV4T2YoXCJUcmlkZW50XCIpfHwtMSE9SGEuaW5kZXhPZihcIk1TSUVcIiksYWI9LTEhPUhhLmluZGV4T2YoXCJHZWNrb1wiKSYmLTE9PUhhLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcIndlYmtpdFwiKSYmISgtMSE9SGEuaW5kZXhPZihcIlRyaWRlbnRcIil8fC0xIT1IYS5pbmRleE9mKFwiTVNJRVwiKSksYmI9LTEhPUhhLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcIndlYmtpdFwiKTtcbihmdW5jdGlvbigpe3ZhciBhPVwiXCIsYjtpZihaYSYmYWEub3BlcmEpcmV0dXJuIGE9YWEub3BlcmEudmVyc2lvbixoYShhKT9hKCk6YTthYj9iPS9ydlxcOihbXlxcKTtdKykoXFwpfDspLzokYT9iPS9cXGIoPzpNU0lFfHJ2KVs6IF0oW15cXCk7XSspKFxcKXw7KS86YmImJihiPS9XZWJLaXRcXC8oXFxTKykvKTtiJiYoYT0oYT1iLmV4ZWMoSGEpKT9hWzFdOlwiXCIpO3JldHVybiAkYSYmKGI9KGI9YWEuZG9jdW1lbnQpP2IuZG9jdW1lbnRNb2RlOnZvaWQgMCxiPnBhcnNlRmxvYXQoYSkpP1N0cmluZyhiKTphfSkoKTt2YXIgY2I9bnVsbCxkYj1udWxsLGViPW51bGw7ZnVuY3Rpb24gZmIoYSxiKXtpZighZmEoYSkpdGhyb3cgRXJyb3IoXCJlbmNvZGVCeXRlQXJyYXkgdGFrZXMgYW4gYXJyYXkgYXMgYSBwYXJhbWV0ZXJcIik7Z2IoKTtmb3IodmFyIGM9Yj9kYjpjYixkPVtdLGU9MDtlPGEubGVuZ3RoO2UrPTMpe3ZhciBmPWFbZV0saD1lKzE8YS5sZW5ndGgsaz1oP2FbZSsxXTowLGw9ZSsyPGEubGVuZ3RoLG09bD9hW2UrMl06MCx0PWY+PjIsZj0oZiYzKTw8NHxrPj40LGs9KGsmMTUpPDwyfG0+PjYsbT1tJjYzO2x8fChtPTY0LGh8fChrPTY0KSk7ZC5wdXNoKGNbdF0sY1tmXSxjW2tdLGNbbV0pfXJldHVybiBkLmpvaW4oXCJcIil9XG5mdW5jdGlvbiBnYigpe2lmKCFjYil7Y2I9e307ZGI9e307ZWI9e307Zm9yKHZhciBhPTA7NjU+YTthKyspY2JbYV09XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiLmNoYXJBdChhKSxkYlthXT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5LV8uXCIuY2hhckF0KGEpLGViW2RiW2FdXT1hLDYyPD1hJiYoZWJbXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiLmNoYXJBdChhKV09YSl9fTt2YXIgaGI9aGJ8fFwiMi4zLjFcIjtmdW5jdGlvbiB2KGEsYil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLGIpfWZ1bmN0aW9uIHcoYSxiKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxiKSlyZXR1cm4gYVtiXX1mdW5jdGlvbiBpYihhLGIpe2Zvcih2YXIgYyBpbiBhKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLGMpJiZiKGMsYVtjXSl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9e307aWIoYSxmdW5jdGlvbihhLGQpe2JbYV09ZH0pO3JldHVybiBifTtmdW5jdGlvbiBrYihhKXt2YXIgYj1bXTtpYihhLGZ1bmN0aW9uKGEsZCl7ZWEoZCk/T2EoZCxmdW5jdGlvbihkKXtiLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGEpK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChkKSl9KTpiLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGEpK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChkKSl9KTtyZXR1cm4gYi5sZW5ndGg/XCImXCIrYi5qb2luKFwiJlwiKTpcIlwifWZ1bmN0aW9uIGxiKGEpe3ZhciBiPXt9O2E9YS5yZXBsYWNlKC9eXFw/LyxcIlwiKS5zcGxpdChcIiZcIik7T2EoYSxmdW5jdGlvbihhKXthJiYoYT1hLnNwbGl0KFwiPVwiKSxiW2FbMF1dPWFbMV0pfSk7cmV0dXJuIGJ9O2Z1bmN0aW9uIHgoYSxiLGMsZCl7dmFyIGU7ZDxiP2U9XCJhdCBsZWFzdCBcIitiOmQ+YyYmKGU9MD09PWM/XCJub25lXCI6XCJubyBtb3JlIHRoYW4gXCIrYyk7aWYoZSl0aHJvdyBFcnJvcihhK1wiIGZhaWxlZDogV2FzIGNhbGxlZCB3aXRoIFwiK2QrKDE9PT1kP1wiIGFyZ3VtZW50LlwiOlwiIGFyZ3VtZW50cy5cIikrXCIgRXhwZWN0cyBcIitlK1wiLlwiKTt9ZnVuY3Rpb24geShhLGIsYyl7dmFyIGQ9XCJcIjtzd2l0Y2goYil7Y2FzZSAxOmQ9Yz9cImZpcnN0XCI6XCJGaXJzdFwiO2JyZWFrO2Nhc2UgMjpkPWM/XCJzZWNvbmRcIjpcIlNlY29uZFwiO2JyZWFrO2Nhc2UgMzpkPWM/XCJ0aGlyZFwiOlwiVGhpcmRcIjticmVhaztjYXNlIDQ6ZD1jP1wiZm91cnRoXCI6XCJGb3VydGhcIjticmVhaztkZWZhdWx0OnRocm93IEVycm9yKFwiZXJyb3JQcmVmaXggY2FsbGVkIHdpdGggYXJndW1lbnROdW1iZXIgPiA0LiAgTmVlZCB0byB1cGRhdGUgaXQ/XCIpO31yZXR1cm4gYT1hK1wiIGZhaWxlZDogXCIrKGQrXCIgYXJndW1lbnQgXCIpfVxuZnVuY3Rpb24gQShhLGIsYyxkKXtpZigoIWR8fG4oYykpJiYhaGEoYykpdGhyb3cgRXJyb3IoeShhLGIsZCkrXCJtdXN0IGJlIGEgdmFsaWQgZnVuY3Rpb24uXCIpO31mdW5jdGlvbiBtYihhLGIsYyl7aWYobihjKSYmKCFpYShjKXx8bnVsbD09PWMpKXRocm93IEVycm9yKHkoYSxiLCEwKStcIm11c3QgYmUgYSB2YWxpZCBjb250ZXh0IG9iamVjdC5cIik7fTtmdW5jdGlvbiBuYihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIEpTT04mJm4oSlNPTi5wYXJzZSk/SlNPTi5wYXJzZShhKTpBYShhKX1mdW5jdGlvbiBCKGEpe2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgSlNPTiYmbihKU09OLnN0cmluZ2lmeSkpYT1KU09OLnN0cmluZ2lmeShhKTtlbHNle3ZhciBiPVtdO0NhKG5ldyBCYSxhLGIpO2E9Yi5qb2luKFwiXCIpfXJldHVybiBhfTtmdW5jdGlvbiBvYigpe3RoaXMuV2Q9Q31vYi5wcm90b3R5cGUuaj1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5XZC5RKGEpfTtvYi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5XZC50b1N0cmluZygpfTtmdW5jdGlvbiBwYigpe31wYi5wcm90b3R5cGUucWY9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH07cGIucHJvdG90eXBlLnllPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9O3ZhciBxYj1uZXcgcGI7ZnVuY3Rpb24gcmIoYSxiLGMpe3RoaXMuVGY9YTt0aGlzLkthPWI7dGhpcy5LZD1jfXJiLnByb3RvdHlwZS5xZj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLkthLk87aWYoc2IoYixhKSlyZXR1cm4gYi5qKCkuUihhKTtiPW51bGwhPXRoaXMuS2Q/bmV3IHRiKHRoaXMuS2QsITAsITEpOnRoaXMuS2EudygpO3JldHVybiB0aGlzLlRmLnhjKGEsYil9O3JiLnByb3RvdHlwZS55ZT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9bnVsbCE9dGhpcy5LZD90aGlzLktkOnViKHRoaXMuS2EpO2E9dGhpcy5UZi5uZShkLGIsMSxjLGEpO3JldHVybiAwPT09YS5sZW5ndGg/bnVsbDphWzBdfTtmdW5jdGlvbiB2Yigpe3RoaXMudGI9W119ZnVuY3Rpb24gd2IoYSxiKXtmb3IodmFyIGM9bnVsbCxkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF0sZj1lLlpiKCk7bnVsbD09PWN8fGYuY2EoYy5aYigpKXx8KGEudGIucHVzaChjKSxjPW51bGwpO251bGw9PT1jJiYoYz1uZXcgeGIoZikpO2MuYWRkKGUpfWMmJmEudGIucHVzaChjKX1mdW5jdGlvbiB5YihhLGIsYyl7d2IoYSxjKTt6YihhLGZ1bmN0aW9uKGEpe3JldHVybiBhLmNhKGIpfSl9ZnVuY3Rpb24gQWIoYSxiLGMpe3diKGEsYyk7emIoYSxmdW5jdGlvbihhKXtyZXR1cm4gYS5jb250YWlucyhiKXx8Yi5jb250YWlucyhhKX0pfVxuZnVuY3Rpb24gemIoYSxiKXtmb3IodmFyIGM9ITAsZD0wO2Q8YS50Yi5sZW5ndGg7ZCsrKXt2YXIgZT1hLnRiW2RdO2lmKGUpaWYoZT1lLlpiKCksYihlKSl7Zm9yKHZhciBlPWEudGJbZF0sZj0wO2Y8ZS52ZC5sZW5ndGg7ZisrKXt2YXIgaD1lLnZkW2ZdO2lmKG51bGwhPT1oKXtlLnZkW2ZdPW51bGw7dmFyIGs9aC5WYigpO0JiJiZDYihcImV2ZW50OiBcIitoLnRvU3RyaW5nKCkpO0RiKGspfX1hLnRiW2RdPW51bGx9ZWxzZSBjPSExfWMmJihhLnRiPVtdKX1mdW5jdGlvbiB4YihhKXt0aGlzLnJhPWE7dGhpcy52ZD1bXX14Yi5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGEpe3RoaXMudmQucHVzaChhKX07eGIucHJvdG90eXBlLlpiPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmF9O2Z1bmN0aW9uIEQoYSxiLGMsZCl7dGhpcy50eXBlPWE7dGhpcy5KYT1iO3RoaXMuV2E9Yzt0aGlzLktlPWQ7dGhpcy5RZD12b2lkIDB9ZnVuY3Rpb24gRWIoYSl7cmV0dXJuIG5ldyBEKEZiLGEpfXZhciBGYj1cInZhbHVlXCI7ZnVuY3Rpb24gR2IoYSxiLGMsZCl7dGhpcy51ZT1iO3RoaXMuWmQ9Yzt0aGlzLlFkPWQ7dGhpcy51ZD1hfUdiLnByb3RvdHlwZS5aYj1mdW5jdGlvbigpe3ZhciBhPXRoaXMuWmQuSWIoKTtyZXR1cm5cInZhbHVlXCI9PT10aGlzLnVkP2EucGF0aDphLnBhcmVudCgpLnBhdGh9O0diLnByb3RvdHlwZS56ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnVkfTtHYi5wcm90b3R5cGUuVmI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51ZS5WYih0aGlzKX07R2IucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuWmIoKS50b1N0cmluZygpK1wiOlwiK3RoaXMudWQrXCI6XCIrQih0aGlzLlpkLm1mKCkpfTtmdW5jdGlvbiBIYihhLGIsYyl7dGhpcy51ZT1hO3RoaXMuZXJyb3I9Yjt0aGlzLnBhdGg9Y31IYi5wcm90b3R5cGUuWmI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXRofTtIYi5wcm90b3R5cGUuemU9ZnVuY3Rpb24oKXtyZXR1cm5cImNhbmNlbFwifTtcbkhiLnByb3RvdHlwZS5WYj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnVlLlZiKHRoaXMpfTtIYi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXRoLnRvU3RyaW5nKCkrXCI6Y2FuY2VsXCJ9O2Z1bmN0aW9uIHRiKGEsYixjKXt0aGlzLkE9YTt0aGlzLmVhPWI7dGhpcy5VYj1jfWZ1bmN0aW9uIEliKGEpe3JldHVybiBhLmVhfWZ1bmN0aW9uIEpiKGEpe3JldHVybiBhLlVifWZ1bmN0aW9uIEtiKGEsYil7cmV0dXJuIGIuZSgpP2EuZWEmJiFhLlViOnNiKGEsRShiKSl9ZnVuY3Rpb24gc2IoYSxiKXtyZXR1cm4gYS5lYSYmIWEuVWJ8fGEuQS5EYShiKX10Yi5wcm90b3R5cGUuaj1mdW5jdGlvbigpe3JldHVybiB0aGlzLkF9O2Z1bmN0aW9uIExiKGEpe3RoaXMuZ2c9YTt0aGlzLkRkPW51bGx9TGIucHJvdG90eXBlLmdldD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuZ2cuZ2V0KCksYj14YShhKTtpZih0aGlzLkRkKWZvcih2YXIgYyBpbiB0aGlzLkRkKWJbY10tPXRoaXMuRGRbY107dGhpcy5EZD1hO3JldHVybiBifTtmdW5jdGlvbiBNYihhLGIpe3RoaXMuT2Y9e307dGhpcy5mZD1uZXcgTGIoYSk7dGhpcy5iYT1iO3ZhciBjPTFFNCsyRTQqTWF0aC5yYW5kb20oKTtzZXRUaW1lb3V0KHEodGhpcy5JZix0aGlzKSxNYXRoLmZsb29yKGMpKX1NYi5wcm90b3R5cGUuSWY9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmZkLmdldCgpLGI9e30sYz0hMSxkO2ZvcihkIGluIGEpMDxhW2RdJiZ2KHRoaXMuT2YsZCkmJihiW2RdPWFbZF0sYz0hMCk7YyYmdGhpcy5iYS5VZShiKTtzZXRUaW1lb3V0KHEodGhpcy5JZix0aGlzKSxNYXRoLmZsb29yKDZFNSpNYXRoLnJhbmRvbSgpKSl9O2Z1bmN0aW9uIE5iKCl7dGhpcy5FYz17fX1mdW5jdGlvbiBPYihhLGIsYyl7bihjKXx8KGM9MSk7dihhLkVjLGIpfHwoYS5FY1tiXT0wKTthLkVjW2JdKz1jfU5iLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4geGEodGhpcy5FYyl9O3ZhciBQYj17fSxRYj17fTtmdW5jdGlvbiBSYihhKXthPWEudG9TdHJpbmcoKTtQYlthXXx8KFBiW2FdPW5ldyBOYik7cmV0dXJuIFBiW2FdfWZ1bmN0aW9uIFNiKGEsYil7dmFyIGM9YS50b1N0cmluZygpO1FiW2NdfHwoUWJbY109YigpKTtyZXR1cm4gUWJbY119O2Z1bmN0aW9uIEYoYSxiKXt0aGlzLm5hbWU9YTt0aGlzLlM9Yn1mdW5jdGlvbiBUYihhLGIpe3JldHVybiBuZXcgRihhLGIpfTtmdW5jdGlvbiBVYihhLGIpe3JldHVybiBWYihhLm5hbWUsYi5uYW1lKX1mdW5jdGlvbiBXYihhLGIpe3JldHVybiBWYihhLGIpfTtmdW5jdGlvbiBYYihhLGIsYyl7dGhpcy50eXBlPVliO3RoaXMuc291cmNlPWE7dGhpcy5wYXRoPWI7dGhpcy5HYT1jfVhiLnByb3RvdHlwZS5YYz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wYXRoLmUoKT9uZXcgWGIodGhpcy5zb3VyY2UsRyx0aGlzLkdhLlIoYSkpOm5ldyBYYih0aGlzLnNvdXJjZSxIKHRoaXMucGF0aCksdGhpcy5HYSl9O1hiLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiT3BlcmF0aW9uKFwiK3RoaXMucGF0aCtcIjogXCIrdGhpcy5zb3VyY2UudG9TdHJpbmcoKStcIiBvdmVyd3JpdGU6IFwiK3RoaXMuR2EudG9TdHJpbmcoKStcIilcIn07ZnVuY3Rpb24gWmIoYSxiKXt0aGlzLnR5cGU9JGI7dGhpcy5zb3VyY2U9YTt0aGlzLnBhdGg9Yn1aYi5wcm90b3R5cGUuWGM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXRoLmUoKT9uZXcgWmIodGhpcy5zb3VyY2UsRyk6bmV3IFpiKHRoaXMuc291cmNlLEgodGhpcy5wYXRoKSl9O1piLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiT3BlcmF0aW9uKFwiK3RoaXMucGF0aCtcIjogXCIrdGhpcy5zb3VyY2UudG9TdHJpbmcoKStcIiBsaXN0ZW5fY29tcGxldGUpXCJ9O2Z1bmN0aW9uIGFjKGEsYil7dGhpcy5MYT1hO3RoaXMud2E9Yj9iOmJjfWc9YWMucHJvdG90eXBlO2cuT2E9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IGFjKHRoaXMuTGEsdGhpcy53YS5PYShhLGIsdGhpcy5MYSkuWShudWxsLG51bGwsITEsbnVsbCxudWxsKSl9O2cucmVtb3ZlPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgYWModGhpcy5MYSx0aGlzLndhLnJlbW92ZShhLHRoaXMuTGEpLlkobnVsbCxudWxsLCExLG51bGwsbnVsbCkpfTtnLmdldD1mdW5jdGlvbihhKXtmb3IodmFyIGIsYz10aGlzLndhOyFjLmUoKTspe2I9dGhpcy5MYShhLGMua2V5KTtpZigwPT09YilyZXR1cm4gYy52YWx1ZTswPmI/Yz1jLmxlZnQ6MDxiJiYoYz1jLnJpZ2h0KX1yZXR1cm4gbnVsbH07XG5mdW5jdGlvbiBjYyhhLGIpe2Zvcih2YXIgYyxkPWEud2EsZT1udWxsOyFkLmUoKTspe2M9YS5MYShiLGQua2V5KTtpZigwPT09Yyl7aWYoZC5sZWZ0LmUoKSlyZXR1cm4gZT9lLmtleTpudWxsO2ZvcihkPWQubGVmdDshZC5yaWdodC5lKCk7KWQ9ZC5yaWdodDtyZXR1cm4gZC5rZXl9MD5jP2Q9ZC5sZWZ0OjA8YyYmKGU9ZCxkPWQucmlnaHQpfXRocm93IEVycm9yKFwiQXR0ZW1wdGVkIHRvIGZpbmQgcHJlZGVjZXNzb3Iga2V5IGZvciBhIG5vbmV4aXN0ZW50IGtleS4gIFdoYXQgZ2l2ZXM/XCIpO31nLmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53YS5lKCl9O2cuY291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53YS5jb3VudCgpfTtnLlNjPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMud2EuU2MoKX07Zy5mYz1mdW5jdGlvbigpe3JldHVybiB0aGlzLndhLmZjKCl9O2cuaWE9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMud2EuaWEoYSl9O1xuZy5YYj1mdW5jdGlvbihhKXtyZXR1cm4gbmV3IGRjKHRoaXMud2EsbnVsbCx0aGlzLkxhLCExLGEpfTtnLlliPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBkYyh0aGlzLndhLGEsdGhpcy5MYSwhMSxiKX07Zy4kYj1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgZGModGhpcy53YSxhLHRoaXMuTGEsITAsYil9O2cuc2Y9ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBkYyh0aGlzLndhLG51bGwsdGhpcy5MYSwhMCxhKX07ZnVuY3Rpb24gZGMoYSxiLGMsZCxlKXt0aGlzLlVkPWV8fG51bGw7dGhpcy5GZT1kO3RoaXMuUGE9W107Zm9yKGU9MTshYS5lKCk7KWlmKGU9Yj9jKGEua2V5LGIpOjEsZCYmKGUqPS0xKSwwPmUpYT10aGlzLkZlP2EubGVmdDphLnJpZ2h0O2Vsc2UgaWYoMD09PWUpe3RoaXMuUGEucHVzaChhKTticmVha31lbHNlIHRoaXMuUGEucHVzaChhKSxhPXRoaXMuRmU/YS5yaWdodDphLmxlZnR9XG5mdW5jdGlvbiBKKGEpe2lmKDA9PT1hLlBhLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hLlBhLnBvcCgpLGM7Yz1hLlVkP2EuVWQoYi5rZXksYi52YWx1ZSk6e2tleTpiLmtleSx2YWx1ZTpiLnZhbHVlfTtpZihhLkZlKWZvcihiPWIubGVmdDshYi5lKCk7KWEuUGEucHVzaChiKSxiPWIucmlnaHQ7ZWxzZSBmb3IoYj1iLnJpZ2h0OyFiLmUoKTspYS5QYS5wdXNoKGIpLGI9Yi5sZWZ0O3JldHVybiBjfWZ1bmN0aW9uIGVjKGEpe2lmKDA9PT1hLlBhLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYjtiPWEuUGE7Yj1iW2IubGVuZ3RoLTFdO3JldHVybiBhLlVkP2EuVWQoYi5rZXksYi52YWx1ZSk6e2tleTpiLmtleSx2YWx1ZTpiLnZhbHVlfX1mdW5jdGlvbiBmYyhhLGIsYyxkLGUpe3RoaXMua2V5PWE7dGhpcy52YWx1ZT1iO3RoaXMuY29sb3I9bnVsbCE9Yz9jOiEwO3RoaXMubGVmdD1udWxsIT1kP2Q6YmM7dGhpcy5yaWdodD1udWxsIT1lP2U6YmN9Zz1mYy5wcm90b3R5cGU7XG5nLlk9ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gbmV3IGZjKG51bGwhPWE/YTp0aGlzLmtleSxudWxsIT1iP2I6dGhpcy52YWx1ZSxudWxsIT1jP2M6dGhpcy5jb2xvcixudWxsIT1kP2Q6dGhpcy5sZWZ0LG51bGwhPWU/ZTp0aGlzLnJpZ2h0KX07Zy5jb3VudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmxlZnQuY291bnQoKSsxK3RoaXMucmlnaHQuY291bnQoKX07Zy5lPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2cuaWE9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubGVmdC5pYShhKXx8YSh0aGlzLmtleSx0aGlzLnZhbHVlKXx8dGhpcy5yaWdodC5pYShhKX07ZnVuY3Rpb24gZ2MoYSl7cmV0dXJuIGEubGVmdC5lKCk/YTpnYyhhLmxlZnQpfWcuU2M9ZnVuY3Rpb24oKXtyZXR1cm4gZ2ModGhpcykua2V5fTtnLmZjPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmlnaHQuZSgpP3RoaXMua2V5OnRoaXMucmlnaHQuZmMoKX07XG5nLk9hPWZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlO2U9dGhpcztkPWMoYSxlLmtleSk7ZT0wPmQ/ZS5ZKG51bGwsbnVsbCxudWxsLGUubGVmdC5PYShhLGIsYyksbnVsbCk6MD09PWQ/ZS5ZKG51bGwsYixudWxsLG51bGwsbnVsbCk6ZS5ZKG51bGwsbnVsbCxudWxsLG51bGwsZS5yaWdodC5PYShhLGIsYykpO3JldHVybiBoYyhlKX07ZnVuY3Rpb24gaWMoYSl7aWYoYS5sZWZ0LmUoKSlyZXR1cm4gYmM7YS5sZWZ0LmZhKCl8fGEubGVmdC5sZWZ0LmZhKCl8fChhPWpjKGEpKTthPWEuWShudWxsLG51bGwsbnVsbCxpYyhhLmxlZnQpLG51bGwpO3JldHVybiBoYyhhKX1cbmcucmVtb3ZlPWZ1bmN0aW9uKGEsYil7dmFyIGMsZDtjPXRoaXM7aWYoMD5iKGEsYy5rZXkpKWMubGVmdC5lKCl8fGMubGVmdC5mYSgpfHxjLmxlZnQubGVmdC5mYSgpfHwoYz1qYyhjKSksYz1jLlkobnVsbCxudWxsLG51bGwsYy5sZWZ0LnJlbW92ZShhLGIpLG51bGwpO2Vsc2V7Yy5sZWZ0LmZhKCkmJihjPWtjKGMpKTtjLnJpZ2h0LmUoKXx8Yy5yaWdodC5mYSgpfHxjLnJpZ2h0LmxlZnQuZmEoKXx8KGM9bGMoYyksYy5sZWZ0LmxlZnQuZmEoKSYmKGM9a2MoYyksYz1sYyhjKSkpO2lmKDA9PT1iKGEsYy5rZXkpKXtpZihjLnJpZ2h0LmUoKSlyZXR1cm4gYmM7ZD1nYyhjLnJpZ2h0KTtjPWMuWShkLmtleSxkLnZhbHVlLG51bGwsbnVsbCxpYyhjLnJpZ2h0KSl9Yz1jLlkobnVsbCxudWxsLG51bGwsbnVsbCxjLnJpZ2h0LnJlbW92ZShhLGIpKX1yZXR1cm4gaGMoYyl9O2cuZmE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb2xvcn07XG5mdW5jdGlvbiBoYyhhKXthLnJpZ2h0LmZhKCkmJiFhLmxlZnQuZmEoKSYmKGE9bWMoYSkpO2EubGVmdC5mYSgpJiZhLmxlZnQubGVmdC5mYSgpJiYoYT1rYyhhKSk7YS5sZWZ0LmZhKCkmJmEucmlnaHQuZmEoKSYmKGE9bGMoYSkpO3JldHVybiBhfWZ1bmN0aW9uIGpjKGEpe2E9bGMoYSk7YS5yaWdodC5sZWZ0LmZhKCkmJihhPWEuWShudWxsLG51bGwsbnVsbCxudWxsLGtjKGEucmlnaHQpKSxhPW1jKGEpLGE9bGMoYSkpO3JldHVybiBhfWZ1bmN0aW9uIG1jKGEpe3JldHVybiBhLnJpZ2h0LlkobnVsbCxudWxsLGEuY29sb3IsYS5ZKG51bGwsbnVsbCwhMCxudWxsLGEucmlnaHQubGVmdCksbnVsbCl9ZnVuY3Rpb24ga2MoYSl7cmV0dXJuIGEubGVmdC5ZKG51bGwsbnVsbCxhLmNvbG9yLG51bGwsYS5ZKG51bGwsbnVsbCwhMCxhLmxlZnQucmlnaHQsbnVsbCkpfVxuZnVuY3Rpb24gbGMoYSl7cmV0dXJuIGEuWShudWxsLG51bGwsIWEuY29sb3IsYS5sZWZ0LlkobnVsbCxudWxsLCFhLmxlZnQuY29sb3IsbnVsbCxudWxsKSxhLnJpZ2h0LlkobnVsbCxudWxsLCFhLnJpZ2h0LmNvbG9yLG51bGwsbnVsbCkpfWZ1bmN0aW9uIG5jKCl7fWc9bmMucHJvdG90eXBlO2cuWT1mdW5jdGlvbigpe3JldHVybiB0aGlzfTtnLk9hPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBmYyhhLGIsbnVsbCl9O2cucmVtb3ZlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O2cuY291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4gMH07Zy5lPWZ1bmN0aW9uKCl7cmV0dXJuITB9O2cuaWE9ZnVuY3Rpb24oKXtyZXR1cm4hMX07Zy5TYz1mdW5jdGlvbigpe3JldHVybiBudWxsfTtnLmZjPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9O2cuZmE9ZnVuY3Rpb24oKXtyZXR1cm4hMX07dmFyIGJjPW5ldyBuYztmdW5jdGlvbiBvYyhhLGIpe3JldHVybiBhJiZcIm9iamVjdFwiPT09dHlwZW9mIGE/KEsoXCIuc3ZcImluIGEsXCJVbmV4cGVjdGVkIGxlYWYgbm9kZSBvciBwcmlvcml0eSBjb250ZW50c1wiKSxiW2FbXCIuc3ZcIl1dKTphfWZ1bmN0aW9uIHBjKGEsYil7dmFyIGM9bmV3IHFjO3JjKGEsbmV3IEwoXCJcIiksZnVuY3Rpb24oYSxlKXtjLm5jKGEsc2MoZSxiKSl9KTtyZXR1cm4gY31mdW5jdGlvbiBzYyhhLGIpe3ZhciBjPWEuQygpLkkoKSxjPW9jKGMsYiksZDtpZihhLksoKSl7dmFyIGU9b2MoYS5DYSgpLGIpO3JldHVybiBlIT09YS5DYSgpfHxjIT09YS5DKCkuSSgpP25ldyB0YyhlLE0oYykpOmF9ZD1hO2MhPT1hLkMoKS5JKCkmJihkPWQuZ2EobmV3IHRjKGMpKSk7YS5QKE4sZnVuY3Rpb24oYSxjKXt2YXIgZT1zYyhjLGIpO2UhPT1jJiYoZD1kLlUoYSxlKSl9KTtyZXR1cm4gZH07ZnVuY3Rpb24gdWMoKXt0aGlzLndjPXt9fXVjLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oYSxiKXtudWxsPT1iP2RlbGV0ZSB0aGlzLndjW2FdOnRoaXMud2NbYV09Yn07dWMucHJvdG90eXBlLmdldD1mdW5jdGlvbihhKXtyZXR1cm4gdih0aGlzLndjLGEpP3RoaXMud2NbYV06bnVsbH07dWMucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbihhKXtkZWxldGUgdGhpcy53Y1thXX07dWMucHJvdG90eXBlLndmPSEwO2Z1bmN0aW9uIHZjKGEpe3RoaXMuRmM9YTt0aGlzLlBkPVwiZmlyZWJhc2U6XCJ9Zz12Yy5wcm90b3R5cGU7Zy5zZXQ9ZnVuY3Rpb24oYSxiKXtudWxsPT1iP3RoaXMuRmMucmVtb3ZlSXRlbSh0aGlzLlBkK2EpOnRoaXMuRmMuc2V0SXRlbSh0aGlzLlBkK2EsQihiKSl9O2cuZ2V0PWZ1bmN0aW9uKGEpe2E9dGhpcy5GYy5nZXRJdGVtKHRoaXMuUGQrYSk7cmV0dXJuIG51bGw9PWE/bnVsbDpuYihhKX07Zy5yZW1vdmU9ZnVuY3Rpb24oYSl7dGhpcy5GYy5yZW1vdmVJdGVtKHRoaXMuUGQrYSl9O2cud2Y9ITE7Zy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLkZjLnRvU3RyaW5nKCl9O2Z1bmN0aW9uIHdjKGEpe3RyeXtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdyYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3dbYV0pe3ZhciBiPXdpbmRvd1thXTtiLnNldEl0ZW0oXCJmaXJlYmFzZTpzZW50aW5lbFwiLFwiY2FjaGVcIik7Yi5yZW1vdmVJdGVtKFwiZmlyZWJhc2U6c2VudGluZWxcIik7cmV0dXJuIG5ldyB2YyhiKX19Y2F0Y2goYyl7fXJldHVybiBuZXcgdWN9dmFyIHhjPXdjKFwibG9jYWxTdG9yYWdlXCIpLHljPXdjKFwic2Vzc2lvblN0b3JhZ2VcIik7ZnVuY3Rpb24gemMoYSxiLGMsZCxlKXt0aGlzLmhvc3Q9YS50b0xvd2VyQ2FzZSgpO3RoaXMuZG9tYWluPXRoaXMuaG9zdC5zdWJzdHIodGhpcy5ob3N0LmluZGV4T2YoXCIuXCIpKzEpO3RoaXMua2I9Yjt0aGlzLmhjPWM7dGhpcy5XZz1kO3RoaXMuT2Q9ZXx8XCJcIjt0aGlzLllhPXhjLmdldChcImhvc3Q6XCIrYSl8fHRoaXMuaG9zdH1mdW5jdGlvbiBBYyhhLGIpe2IhPT1hLllhJiYoYS5ZYT1iLFwicy1cIj09PWEuWWEuc3Vic3RyKDAsMikmJnhjLnNldChcImhvc3Q6XCIrYS5ob3N0LGEuWWEpKX1cbmZ1bmN0aW9uIEJjKGEsYixjKXtLKFwic3RyaW5nXCI9PT10eXBlb2YgYixcInR5cGVvZiB0eXBlIG11c3QgPT0gc3RyaW5nXCIpO0soXCJvYmplY3RcIj09PXR5cGVvZiBjLFwidHlwZW9mIHBhcmFtcyBtdXN0ID09IG9iamVjdFwiKTtpZihiPT09Q2MpYj0oYS5rYj9cIndzczovL1wiOlwid3M6Ly9cIikrYS5ZYStcIi8ud3M/XCI7ZWxzZSBpZihiPT09RGMpYj0oYS5rYj9cImh0dHBzOi8vXCI6XCJodHRwOi8vXCIpK2EuWWErXCIvLmxwP1wiO2Vsc2UgdGhyb3cgRXJyb3IoXCJVbmtub3duIGNvbm5lY3Rpb24gdHlwZTogXCIrYik7YS5ob3N0IT09YS5ZYSYmKGMubnM9YS5oYyk7dmFyIGQ9W107cihjLGZ1bmN0aW9uKGEsYil7ZC5wdXNoKGIrXCI9XCIrYSl9KTtyZXR1cm4gYitkLmpvaW4oXCImXCIpfXpjLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBhPSh0aGlzLmtiP1wiaHR0cHM6Ly9cIjpcImh0dHA6Ly9cIikrdGhpcy5ob3N0O3RoaXMuT2QmJihhKz1cIjxcIit0aGlzLk9kK1wiPlwiKTtyZXR1cm4gYX07dmFyIEVjPWZ1bmN0aW9uKCl7dmFyIGE9MTtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYSsrfX0oKTtmdW5jdGlvbiBLKGEsYil7aWYoIWEpdGhyb3cgRmMoYik7fWZ1bmN0aW9uIEZjKGEpe3JldHVybiBFcnJvcihcIkZpcmViYXNlIChcIitoYitcIikgSU5URVJOQUwgQVNTRVJUIEZBSUxFRDogXCIrYSl9XG5mdW5jdGlvbiBHYyhhKXt0cnl7dmFyIGI7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhdG9iKWI9YXRvYihhKTtlbHNle2diKCk7Zm9yKHZhciBjPWViLGQ9W10sZT0wO2U8YS5sZW5ndGg7KXt2YXIgZj1jW2EuY2hhckF0KGUrKyldLGg9ZTxhLmxlbmd0aD9jW2EuY2hhckF0KGUpXTowOysrZTt2YXIgaz1lPGEubGVuZ3RoP2NbYS5jaGFyQXQoZSldOjY0OysrZTt2YXIgbD1lPGEubGVuZ3RoP2NbYS5jaGFyQXQoZSldOjY0OysrZTtpZihudWxsPT1mfHxudWxsPT1ofHxudWxsPT1rfHxudWxsPT1sKXRocm93IEVycm9yKCk7ZC5wdXNoKGY8PDJ8aD4+NCk7NjQhPWsmJihkLnB1c2goaDw8NCYyNDB8az4+MiksNjQhPWwmJmQucHVzaChrPDw2JjE5MnxsKSl9aWYoODE5Mj5kLmxlbmd0aCliPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxkKTtlbHNle2E9XCJcIjtmb3IoYz0wO2M8ZC5sZW5ndGg7Yys9ODE5MilhKz1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsV2EoZCxjLFxuYys4MTkyKSk7Yj1hfX1yZXR1cm4gYn1jYXRjaChtKXtDYihcImJhc2U2NERlY29kZSBmYWlsZWQ6IFwiLG0pfXJldHVybiBudWxsfWZ1bmN0aW9uIEhjKGEpe3ZhciBiPUljKGEpO2E9bmV3IExhO2EudXBkYXRlKGIpO3ZhciBiPVtdLGM9OCphLmRlOzU2PmEuYWM/YS51cGRhdGUoYS5MZCw1Ni1hLmFjKTphLnVwZGF0ZShhLkxkLGEuVmEtKGEuYWMtNTYpKTtmb3IodmFyIGQ9YS5WYS0xOzU2PD1kO2QtLSlhLm1lW2RdPWMmMjU1LGMvPTI1NjtNYShhLGEubWUpO2ZvcihkPWM9MDs1PmQ7ZCsrKWZvcih2YXIgZT0yNDswPD1lO2UtPTgpYltjXT1hLk5bZF0+PmUmMjU1LCsrYztyZXR1cm4gZmIoYil9XG5mdW5jdGlvbiBKYyhhKXtmb3IodmFyIGI9XCJcIixjPTA7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliPWZhKGFyZ3VtZW50c1tjXSk/YitKYy5hcHBseShudWxsLGFyZ3VtZW50c1tjXSk6XCJvYmplY3RcIj09PXR5cGVvZiBhcmd1bWVudHNbY10/YitCKGFyZ3VtZW50c1tjXSk6Yithcmd1bWVudHNbY10sYis9XCIgXCI7cmV0dXJuIGJ9dmFyIEJiPW51bGwsS2M9ITA7ZnVuY3Rpb24gQ2IoYSl7ITA9PT1LYyYmKEtjPSExLG51bGw9PT1CYiYmITA9PT15Yy5nZXQoXCJsb2dnaW5nX2VuYWJsZWRcIikmJkxjKCEwKSk7aWYoQmIpe3ZhciBiPUpjLmFwcGx5KG51bGwsYXJndW1lbnRzKTtCYihiKX19ZnVuY3Rpb24gTWMoYSl7cmV0dXJuIGZ1bmN0aW9uKCl7Q2IoYSxhcmd1bWVudHMpfX1cbmZ1bmN0aW9uIE5jKGEpe2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIGI9XCJGSVJFQkFTRSBJTlRFUk5BTCBFUlJPUjogXCIrSmMuYXBwbHkobnVsbCxhcmd1bWVudHMpO1widW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZS5lcnJvcj9jb25zb2xlLmVycm9yKGIpOmNvbnNvbGUubG9nKGIpfX1mdW5jdGlvbiBPYyhhKXt2YXIgYj1KYy5hcHBseShudWxsLGFyZ3VtZW50cyk7dGhyb3cgRXJyb3IoXCJGSVJFQkFTRSBGQVRBTCBFUlJPUjogXCIrYik7fWZ1bmN0aW9uIE8oYSl7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgYj1cIkZJUkVCQVNFIFdBUk5JTkc6IFwiK0pjLmFwcGx5KG51bGwsYXJndW1lbnRzKTtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUud2Fybj9jb25zb2xlLndhcm4oYik6Y29uc29sZS5sb2coYil9fVxuZnVuY3Rpb24gUGMoYSl7dmFyIGI9XCJcIixjPVwiXCIsZD1cIlwiLGU9XCJcIixmPSEwLGg9XCJodHRwc1wiLGs9NDQzO2lmKHAoYSkpe3ZhciBsPWEuaW5kZXhPZihcIi8vXCIpOzA8PWwmJihoPWEuc3Vic3RyaW5nKDAsbC0xKSxhPWEuc3Vic3RyaW5nKGwrMikpO2w9YS5pbmRleE9mKFwiL1wiKTstMT09PWwmJihsPWEubGVuZ3RoKTtiPWEuc3Vic3RyaW5nKDAsbCk7ZT1cIlwiO2E9YS5zdWJzdHJpbmcobCkuc3BsaXQoXCIvXCIpO2ZvcihsPTA7bDxhLmxlbmd0aDtsKyspaWYoMDxhW2xdLmxlbmd0aCl7dmFyIG09YVtsXTt0cnl7bT1kZWNvZGVVUklDb21wb25lbnQobS5yZXBsYWNlKC9cXCsvZyxcIiBcIikpfWNhdGNoKHQpe31lKz1cIi9cIittfWE9Yi5zcGxpdChcIi5cIik7Mz09PWEubGVuZ3RoPyhjPWFbMV0sZD1hWzBdLnRvTG93ZXJDYXNlKCkpOjI9PT1hLmxlbmd0aCYmKGM9YVswXSk7bD1iLmluZGV4T2YoXCI6XCIpOzA8PWwmJihmPVwiaHR0cHNcIj09PWh8fFwid3NzXCI9PT1oLGs9Yi5zdWJzdHJpbmcobCsxKSxpc0Zpbml0ZShrKSYmXG4oaz1TdHJpbmcoaykpLGs9cChrKT8vXlxccyotPzB4L2kudGVzdChrKT9wYXJzZUludChrLDE2KTpwYXJzZUludChrLDEwKTpOYU4pfXJldHVybntob3N0OmIscG9ydDprLGRvbWFpbjpjLFRnOmQsa2I6ZixzY2hlbWU6aCwkYzplfX1mdW5jdGlvbiBRYyhhKXtyZXR1cm4gZ2EoYSkmJihhIT1hfHxhPT1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFl8fGE9PU51bWJlci5ORUdBVElWRV9JTkZJTklUWSl9XG5mdW5jdGlvbiBSYyhhKXtpZihcImNvbXBsZXRlXCI9PT1kb2N1bWVudC5yZWFkeVN0YXRlKWEoKTtlbHNle3ZhciBiPSExLGM9ZnVuY3Rpb24oKXtkb2N1bWVudC5ib2R5P2J8fChiPSEwLGEoKSk6c2V0VGltZW91dChjLE1hdGguZmxvb3IoMTApKX07ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcj8oZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixjLCExKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixjLCExKSk6ZG9jdW1lbnQuYXR0YWNoRXZlbnQmJihkb2N1bWVudC5hdHRhY2hFdmVudChcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLGZ1bmN0aW9uKCl7XCJjb21wbGV0ZVwiPT09ZG9jdW1lbnQucmVhZHlTdGF0ZSYmYygpfSksd2luZG93LmF0dGFjaEV2ZW50KFwib25sb2FkXCIsYykpfX1cbmZ1bmN0aW9uIFZiKGEsYil7aWYoYT09PWIpcmV0dXJuIDA7aWYoXCJbTUlOX05BTUVdXCI9PT1hfHxcIltNQVhfTkFNRV1cIj09PWIpcmV0dXJuLTE7aWYoXCJbTUlOX05BTUVdXCI9PT1ifHxcIltNQVhfTkFNRV1cIj09PWEpcmV0dXJuIDE7dmFyIGM9U2MoYSksZD1TYyhiKTtyZXR1cm4gbnVsbCE9PWM/bnVsbCE9PWQ/MD09Yy1kP2EubGVuZ3RoLWIubGVuZ3RoOmMtZDotMTpudWxsIT09ZD8xOmE8Yj8tMToxfWZ1bmN0aW9uIFRjKGEsYil7aWYoYiYmYSBpbiBiKXJldHVybiBiW2FdO3Rocm93IEVycm9yKFwiTWlzc2luZyByZXF1aXJlZCBrZXkgKFwiK2ErXCIpIGluIG9iamVjdDogXCIrQihiKSk7fVxuZnVuY3Rpb24gVWMoYSl7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YSlyZXR1cm4gQihhKTt2YXIgYj1bXSxjO2ZvcihjIGluIGEpYi5wdXNoKGMpO2Iuc29ydCgpO2M9XCJ7XCI7Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspMCE9PWQmJihjKz1cIixcIiksYys9QihiW2RdKSxjKz1cIjpcIixjKz1VYyhhW2JbZF1dKTtyZXR1cm4gYytcIn1cIn1mdW5jdGlvbiBWYyhhLGIpe2lmKGEubGVuZ3RoPD1iKXJldHVyblthXTtmb3IodmFyIGM9W10sZD0wO2Q8YS5sZW5ndGg7ZCs9YilkK2I+YT9jLnB1c2goYS5zdWJzdHJpbmcoZCxhLmxlbmd0aCkpOmMucHVzaChhLnN1YnN0cmluZyhkLGQrYikpO3JldHVybiBjfWZ1bmN0aW9uIFdjKGEsYil7aWYoZWEoYSkpZm9yKHZhciBjPTA7YzxhLmxlbmd0aDsrK2MpYihjLGFbY10pO2Vsc2UgcihhLGIpfVxuZnVuY3Rpb24gWGMoYSl7SyghUWMoYSksXCJJbnZhbGlkIEpTT04gbnVtYmVyXCIpO3ZhciBiLGMsZCxlOzA9PT1hPyhkPWM9MCxiPS1JbmZpbml0eT09PTEvYT8xOjApOihiPTA+YSxhPU1hdGguYWJzKGEpLGE+PU1hdGgucG93KDIsLTEwMjIpPyhkPU1hdGgubWluKE1hdGguZmxvb3IoTWF0aC5sb2coYSkvTWF0aC5MTjIpLDEwMjMpLGM9ZCsxMDIzLGQ9TWF0aC5yb3VuZChhKk1hdGgucG93KDIsNTItZCktTWF0aC5wb3coMiw1MikpKTooYz0wLGQ9TWF0aC5yb3VuZChhL01hdGgucG93KDIsLTEwNzQpKSkpO2U9W107Zm9yKGE9NTI7YTstLWEpZS5wdXNoKGQlMj8xOjApLGQ9TWF0aC5mbG9vcihkLzIpO2ZvcihhPTExO2E7LS1hKWUucHVzaChjJTI/MTowKSxjPU1hdGguZmxvb3IoYy8yKTtlLnB1c2goYj8xOjApO2UucmV2ZXJzZSgpO2I9ZS5qb2luKFwiXCIpO2M9XCJcIjtmb3IoYT0wOzY0PmE7YSs9OClkPXBhcnNlSW50KGIuc3Vic3RyKGEsOCksMikudG9TdHJpbmcoMTYpLDE9PT1kLmxlbmd0aCYmXG4oZD1cIjBcIitkKSxjKz1kO3JldHVybiBjLnRvTG93ZXJDYXNlKCl9dmFyIFljPS9eLT9cXGR7MSwxMH0kLztmdW5jdGlvbiBTYyhhKXtyZXR1cm4gWWMudGVzdChhKSYmKGE9TnVtYmVyKGEpLC0yMTQ3NDgzNjQ4PD1hJiYyMTQ3NDgzNjQ3Pj1hKT9hOm51bGx9ZnVuY3Rpb24gRGIoYSl7dHJ5e2EoKX1jYXRjaChiKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7TyhcIkV4Y2VwdGlvbiB3YXMgdGhyb3duIGJ5IHVzZXIgY2FsbGJhY2suXCIsYi5zdGFja3x8XCJcIik7dGhyb3cgYjt9LE1hdGguZmxvb3IoMCkpfX1mdW5jdGlvbiBQKGEsYil7aWYoaGEoYSkpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKS5zbGljZSgpO0RiKGZ1bmN0aW9uKCl7YS5hcHBseShudWxsLGMpfSl9fTtmdW5jdGlvbiBJYyhhKXtmb3IodmFyIGI9W10sYz0wLGQ9MDtkPGEubGVuZ3RoO2QrKyl7dmFyIGU9YS5jaGFyQ29kZUF0KGQpOzU1Mjk2PD1lJiY1NjMxOT49ZSYmKGUtPTU1Mjk2LGQrKyxLKGQ8YS5sZW5ndGgsXCJTdXJyb2dhdGUgcGFpciBtaXNzaW5nIHRyYWlsIHN1cnJvZ2F0ZS5cIiksZT02NTUzNisoZTw8MTApKyhhLmNoYXJDb2RlQXQoZCktNTYzMjApKTsxMjg+ZT9iW2MrK109ZTooMjA0OD5lP2JbYysrXT1lPj42fDE5MjooNjU1MzY+ZT9iW2MrK109ZT4+MTJ8MjI0OihiW2MrK109ZT4+MTh8MjQwLGJbYysrXT1lPj4xMiY2M3wxMjgpLGJbYysrXT1lPj42JjYzfDEyOCksYltjKytdPWUmNjN8MTI4KX1yZXR1cm4gYn1mdW5jdGlvbiBaYyhhKXtmb3IodmFyIGI9MCxjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWEuY2hhckNvZGVBdChjKTsxMjg+ZD9iKys6MjA0OD5kP2IrPTI6NTUyOTY8PWQmJjU2MzE5Pj1kPyhiKz00LGMrKyk6Yis9M31yZXR1cm4gYn07ZnVuY3Rpb24gJGMoYSl7dmFyIGI9e30sYz17fSxkPXt9LGU9XCJcIjt0cnl7dmFyIGY9YS5zcGxpdChcIi5cIiksYj1uYihHYyhmWzBdKXx8XCJcIiksYz1uYihHYyhmWzFdKXx8XCJcIiksZT1mWzJdLGQ9Yy5kfHx7fTtkZWxldGUgYy5kfWNhdGNoKGgpe31yZXR1cm57Wmc6YixCYzpjLGRhdGE6ZCxRZzplfX1mdW5jdGlvbiBhZChhKXthPSRjKGEpLkJjO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmYS5oYXNPd25Qcm9wZXJ0eShcImlhdFwiKT93KGEsXCJpYXRcIik6bnVsbH1mdW5jdGlvbiBiZChhKXthPSRjKGEpO3ZhciBiPWEuQmM7cmV0dXJuISFhLlFnJiYhIWImJlwib2JqZWN0XCI9PT10eXBlb2YgYiYmYi5oYXNPd25Qcm9wZXJ0eShcImlhdFwiKX07ZnVuY3Rpb24gY2QoYSl7dGhpcy5XPWE7dGhpcy5nPWEubi5nfWZ1bmN0aW9uIGRkKGEsYixjLGQpe3ZhciBlPVtdLGY9W107T2EoYixmdW5jdGlvbihiKXtcImNoaWxkX2NoYW5nZWRcIj09PWIudHlwZSYmYS5nLkFkKGIuS2UsYi5KYSkmJmYucHVzaChuZXcgRChcImNoaWxkX21vdmVkXCIsYi5KYSxiLldhKSl9KTtlZChhLGUsXCJjaGlsZF9yZW1vdmVkXCIsYixkLGMpO2VkKGEsZSxcImNoaWxkX2FkZGVkXCIsYixkLGMpO2VkKGEsZSxcImNoaWxkX21vdmVkXCIsZixkLGMpO2VkKGEsZSxcImNoaWxkX2NoYW5nZWRcIixiLGQsYyk7ZWQoYSxlLEZiLGIsZCxjKTtyZXR1cm4gZX1mdW5jdGlvbiBlZChhLGIsYyxkLGUsZil7ZD1QYShkLGZ1bmN0aW9uKGEpe3JldHVybiBhLnR5cGU9PT1jfSk7WGEoZCxxKGEuaGcsYSkpO09hKGQsZnVuY3Rpb24oYyl7dmFyIGQ9ZmQoYSxjLGYpO09hKGUsZnVuY3Rpb24oZSl7ZS5LZihjLnR5cGUpJiZiLnB1c2goZS5jcmVhdGVFdmVudChkLGEuVykpfSl9KX1cbmZ1bmN0aW9uIGZkKGEsYixjKXtcInZhbHVlXCIhPT1iLnR5cGUmJlwiY2hpbGRfcmVtb3ZlZFwiIT09Yi50eXBlJiYoYi5RZD1jLnJmKGIuV2EsYi5KYSxhLmcpKTtyZXR1cm4gYn1jZC5wcm90b3R5cGUuaGc9ZnVuY3Rpb24oYSxiKXtpZihudWxsPT1hLldhfHxudWxsPT1iLldhKXRocm93IEZjKFwiU2hvdWxkIG9ubHkgY29tcGFyZSBjaGlsZF8gZXZlbnRzLlwiKTtyZXR1cm4gdGhpcy5nLmNvbXBhcmUobmV3IEYoYS5XYSxhLkphKSxuZXcgRihiLldhLGIuSmEpKX07ZnVuY3Rpb24gZ2QoKXt0aGlzLmJiPXt9fVxuZnVuY3Rpb24gaGQoYSxiKXt2YXIgYz1iLnR5cGUsZD1iLldhO0soXCJjaGlsZF9hZGRlZFwiPT1jfHxcImNoaWxkX2NoYW5nZWRcIj09Y3x8XCJjaGlsZF9yZW1vdmVkXCI9PWMsXCJPbmx5IGNoaWxkIGNoYW5nZXMgc3VwcG9ydGVkIGZvciB0cmFja2luZ1wiKTtLKFwiLnByaW9yaXR5XCIhPT1kLFwiT25seSBub24tcHJpb3JpdHkgY2hpbGQgY2hhbmdlcyBjYW4gYmUgdHJhY2tlZC5cIik7dmFyIGU9dyhhLmJiLGQpO2lmKGUpe3ZhciBmPWUudHlwZTtpZihcImNoaWxkX2FkZGVkXCI9PWMmJlwiY2hpbGRfcmVtb3ZlZFwiPT1mKWEuYmJbZF09bmV3IEQoXCJjaGlsZF9jaGFuZ2VkXCIsYi5KYSxkLGUuSmEpO2Vsc2UgaWYoXCJjaGlsZF9yZW1vdmVkXCI9PWMmJlwiY2hpbGRfYWRkZWRcIj09ZilkZWxldGUgYS5iYltkXTtlbHNlIGlmKFwiY2hpbGRfcmVtb3ZlZFwiPT1jJiZcImNoaWxkX2NoYW5nZWRcIj09ZilhLmJiW2RdPW5ldyBEKFwiY2hpbGRfcmVtb3ZlZFwiLGUuS2UsZCk7ZWxzZSBpZihcImNoaWxkX2NoYW5nZWRcIj09YyYmXG5cImNoaWxkX2FkZGVkXCI9PWYpYS5iYltkXT1uZXcgRChcImNoaWxkX2FkZGVkXCIsYi5KYSxkKTtlbHNlIGlmKFwiY2hpbGRfY2hhbmdlZFwiPT1jJiZcImNoaWxkX2NoYW5nZWRcIj09ZilhLmJiW2RdPW5ldyBEKFwiY2hpbGRfY2hhbmdlZFwiLGIuSmEsZCxlLktlKTtlbHNlIHRocm93IEZjKFwiSWxsZWdhbCBjb21iaW5hdGlvbiBvZiBjaGFuZ2VzOiBcIitiK1wiIG9jY3VycmVkIGFmdGVyIFwiK2UpO31lbHNlIGEuYmJbZF09Yn07ZnVuY3Rpb24gaWQoYSxiLGMpe3RoaXMuUmI9YTt0aGlzLnBiPWI7dGhpcy5yYj1jfHxudWxsfWc9aWQucHJvdG90eXBlO2cuS2Y9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ2YWx1ZVwiPT09YX07Zy5jcmVhdGVFdmVudD1mdW5jdGlvbihhLGIpe3ZhciBjPWIubi5nO3JldHVybiBuZXcgR2IoXCJ2YWx1ZVwiLHRoaXMsbmV3IFEoYS5KYSxiLkliKCksYykpfTtnLlZiPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMucmI7aWYoXCJjYW5jZWxcIj09PWEuemUoKSl7Syh0aGlzLnBiLFwiUmFpc2luZyBhIGNhbmNlbCBldmVudCBvbiBhIGxpc3RlbmVyIHdpdGggbm8gY2FuY2VsIGNhbGxiYWNrXCIpO3ZhciBjPXRoaXMucGI7cmV0dXJuIGZ1bmN0aW9uKCl7Yy5jYWxsKGIsYS5lcnJvcil9fXZhciBkPXRoaXMuUmI7cmV0dXJuIGZ1bmN0aW9uKCl7ZC5jYWxsKGIsYS5aZCl9fTtnLmdmPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMucGI/bmV3IEhiKHRoaXMsYSxiKTpudWxsfTtcbmcubWF0Y2hlcz1mdW5jdGlvbihhKXtyZXR1cm4gYSBpbnN0YW5jZW9mIGlkP2EuUmImJnRoaXMuUmI/YS5SYj09PXRoaXMuUmImJmEucmI9PT10aGlzLnJiOiEwOiExfTtnLnRmPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPT10aGlzLlJifTtmdW5jdGlvbiBqZChhLGIsYyl7dGhpcy5oYT1hO3RoaXMucGI9Yjt0aGlzLnJiPWN9Zz1qZC5wcm90b3R5cGU7Zy5LZj1mdW5jdGlvbihhKXthPVwiY2hpbGRyZW5fYWRkZWRcIj09PWE/XCJjaGlsZF9hZGRlZFwiOmE7cmV0dXJuKFwiY2hpbGRyZW5fcmVtb3ZlZFwiPT09YT9cImNoaWxkX3JlbW92ZWRcIjphKWluIHRoaXMuaGF9O2cuZ2Y9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5wYj9uZXcgSGIodGhpcyxhLGIpOm51bGx9O1xuZy5jcmVhdGVFdmVudD1mdW5jdGlvbihhLGIpe0sobnVsbCE9YS5XYSxcIkNoaWxkIGV2ZW50cyBzaG91bGQgaGF2ZSBhIGNoaWxkTmFtZS5cIik7dmFyIGM9Yi5JYigpLnUoYS5XYSk7cmV0dXJuIG5ldyBHYihhLnR5cGUsdGhpcyxuZXcgUShhLkphLGMsYi5uLmcpLGEuUWQpfTtnLlZiPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMucmI7aWYoXCJjYW5jZWxcIj09PWEuemUoKSl7Syh0aGlzLnBiLFwiUmFpc2luZyBhIGNhbmNlbCBldmVudCBvbiBhIGxpc3RlbmVyIHdpdGggbm8gY2FuY2VsIGNhbGxiYWNrXCIpO3ZhciBjPXRoaXMucGI7cmV0dXJuIGZ1bmN0aW9uKCl7Yy5jYWxsKGIsYS5lcnJvcil9fXZhciBkPXRoaXMuaGFbYS51ZF07cmV0dXJuIGZ1bmN0aW9uKCl7ZC5jYWxsKGIsYS5aZCxhLlFkKX19O1xuZy5tYXRjaGVzPWZ1bmN0aW9uKGEpe2lmKGEgaW5zdGFuY2VvZiBqZCl7aWYoIXRoaXMuaGF8fCFhLmhhKXJldHVybiEwO2lmKHRoaXMucmI9PT1hLnJiKXt2YXIgYj1wYShhLmhhKTtpZihiPT09cGEodGhpcy5oYSkpe2lmKDE9PT1iKXt2YXIgYj1xYShhLmhhKSxjPXFhKHRoaXMuaGEpO3JldHVybiBjPT09YiYmKCFhLmhhW2JdfHwhdGhpcy5oYVtjXXx8YS5oYVtiXT09PXRoaXMuaGFbY10pfXJldHVybiBvYSh0aGlzLmhhLGZ1bmN0aW9uKGIsYyl7cmV0dXJuIGEuaGFbY109PT1ifSl9fX1yZXR1cm4hMX07Zy50Zj1mdW5jdGlvbigpe3JldHVybiBudWxsIT09dGhpcy5oYX07ZnVuY3Rpb24ga2QoYSl7dGhpcy5nPWF9Zz1rZC5wcm90b3R5cGU7Zy5HPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXtLKGEuSmModGhpcy5nKSxcIkEgbm9kZSBtdXN0IGJlIGluZGV4ZWQgaWYgb25seSBhIGNoaWxkIGlzIHVwZGF0ZWRcIik7ZT1hLlIoYik7aWYoZS5RKGQpLmNhKGMuUShkKSkmJmUuZSgpPT1jLmUoKSlyZXR1cm4gYTtudWxsIT1mJiYoYy5lKCk/YS5EYShiKT9oZChmLG5ldyBEKFwiY2hpbGRfcmVtb3ZlZFwiLGUsYikpOksoYS5LKCksXCJBIGNoaWxkIHJlbW92ZSB3aXRob3V0IGFuIG9sZCBjaGlsZCBvbmx5IG1ha2VzIHNlbnNlIG9uIGEgbGVhZiBub2RlXCIpOmUuZSgpP2hkKGYsbmV3IEQoXCJjaGlsZF9hZGRlZFwiLGMsYikpOmhkKGYsbmV3IEQoXCJjaGlsZF9jaGFuZ2VkXCIsYyxiLGUpKSk7cmV0dXJuIGEuSygpJiZjLmUoKT9hOmEuVShiLGMpLmxiKHRoaXMuZyl9O1xuZy54YT1mdW5jdGlvbihhLGIsYyl7bnVsbCE9YyYmKGEuSygpfHxhLlAoTixmdW5jdGlvbihhLGUpe2IuRGEoYSl8fGhkKGMsbmV3IEQoXCJjaGlsZF9yZW1vdmVkXCIsZSxhKSl9KSxiLksoKXx8Yi5QKE4sZnVuY3Rpb24oYixlKXtpZihhLkRhKGIpKXt2YXIgZj1hLlIoYik7Zi5jYShlKXx8aGQoYyxuZXcgRChcImNoaWxkX2NoYW5nZWRcIixlLGIsZikpfWVsc2UgaGQoYyxuZXcgRChcImNoaWxkX2FkZGVkXCIsZSxiKSl9KSk7cmV0dXJuIGIubGIodGhpcy5nKX07Zy5nYT1mdW5jdGlvbihhLGIpe3JldHVybiBhLmUoKT9DOmEuZ2EoYil9O2cuTmE9ZnVuY3Rpb24oKXtyZXR1cm4hMX07Zy5XYj1mdW5jdGlvbigpe3JldHVybiB0aGlzfTtmdW5jdGlvbiBsZChhKXt0aGlzLkJlPW5ldyBrZChhLmcpO3RoaXMuZz1hLmc7dmFyIGI7YS5tYT8oYj1tZChhKSxiPWEuZy5QYyhuZChhKSxiKSk6Yj1hLmcuVGMoKTt0aGlzLmVkPWI7YS5wYT8oYj1vZChhKSxhPWEuZy5QYyhwZChhKSxiKSk6YT1hLmcuUWMoKTt0aGlzLkdjPWF9Zz1sZC5wcm90b3R5cGU7Zy5tYXRjaGVzPWZ1bmN0aW9uKGEpe3JldHVybiAwPj10aGlzLmcuY29tcGFyZSh0aGlzLmVkLGEpJiYwPj10aGlzLmcuY29tcGFyZShhLHRoaXMuR2MpfTtnLkc9ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3RoaXMubWF0Y2hlcyhuZXcgRihiLGMpKXx8KGM9Qyk7cmV0dXJuIHRoaXMuQmUuRyhhLGIsYyxkLGUsZil9O1xuZy54YT1mdW5jdGlvbihhLGIsYyl7Yi5LKCkmJihiPUMpO3ZhciBkPWIubGIodGhpcy5nKSxkPWQuZ2EoQyksZT10aGlzO2IuUChOLGZ1bmN0aW9uKGEsYil7ZS5tYXRjaGVzKG5ldyBGKGEsYikpfHwoZD1kLlUoYSxDKSl9KTtyZXR1cm4gdGhpcy5CZS54YShhLGQsYyl9O2cuZ2E9ZnVuY3Rpb24oYSl7cmV0dXJuIGF9O2cuTmE9ZnVuY3Rpb24oKXtyZXR1cm4hMH07Zy5XYj1mdW5jdGlvbigpe3JldHVybiB0aGlzLkJlfTtmdW5jdGlvbiBxZChhKXt0aGlzLnNhPW5ldyBsZChhKTt0aGlzLmc9YS5nO0soYS5qYSxcIk9ubHkgdmFsaWQgaWYgbGltaXQgaGFzIGJlZW4gc2V0XCIpO3RoaXMua2E9YS5rYTt0aGlzLkpiPSFyZChhKX1nPXFkLnByb3RvdHlwZTtnLkc9ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3RoaXMuc2EubWF0Y2hlcyhuZXcgRihiLGMpKXx8KGM9Qyk7cmV0dXJuIGEuUihiKS5jYShjKT9hOmEuRGIoKTx0aGlzLmthP3RoaXMuc2EuV2IoKS5HKGEsYixjLGQsZSxmKTpzZCh0aGlzLGEsYixjLGUsZil9O1xuZy54YT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ7aWYoYi5LKCl8fGIuZSgpKWQ9Qy5sYih0aGlzLmcpO2Vsc2UgaWYoMip0aGlzLmthPGIuRGIoKSYmYi5KYyh0aGlzLmcpKXtkPUMubGIodGhpcy5nKTtiPXRoaXMuSmI/Yi4kYih0aGlzLnNhLkdjLHRoaXMuZyk6Yi5ZYih0aGlzLnNhLmVkLHRoaXMuZyk7Zm9yKHZhciBlPTA7MDxiLlBhLmxlbmd0aCYmZTx0aGlzLmthOyl7dmFyIGY9SihiKSxoO2lmKGg9dGhpcy5KYj8wPj10aGlzLmcuY29tcGFyZSh0aGlzLnNhLmVkLGYpOjA+PXRoaXMuZy5jb21wYXJlKGYsdGhpcy5zYS5HYykpZD1kLlUoZi5uYW1lLGYuUyksZSsrO2Vsc2UgYnJlYWt9fWVsc2V7ZD1iLmxiKHRoaXMuZyk7ZD1kLmdhKEMpO3ZhciBrLGwsbTtpZih0aGlzLkpiKXtiPWQuc2YodGhpcy5nKTtrPXRoaXMuc2EuR2M7bD10aGlzLnNhLmVkO3ZhciB0PXRkKHRoaXMuZyk7bT1mdW5jdGlvbihhLGIpe3JldHVybiB0KGIsYSl9fWVsc2UgYj1kLlhiKHRoaXMuZyksaz10aGlzLnNhLmVkLFxubD10aGlzLnNhLkdjLG09dGQodGhpcy5nKTtmb3IodmFyIGU9MCx6PSExOzA8Yi5QYS5sZW5ndGg7KWY9SihiKSwheiYmMD49bShrLGYpJiYoej0hMCksKGg9eiYmZTx0aGlzLmthJiYwPj1tKGYsbCkpP2UrKzpkPWQuVShmLm5hbWUsQyl9cmV0dXJuIHRoaXMuc2EuV2IoKS54YShhLGQsYyl9O2cuZ2E9ZnVuY3Rpb24oYSl7cmV0dXJuIGF9O2cuTmE9ZnVuY3Rpb24oKXtyZXR1cm4hMH07Zy5XYj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNhLldiKCl9O1xuZnVuY3Rpb24gc2QoYSxiLGMsZCxlLGYpe3ZhciBoO2lmKGEuSmIpe3ZhciBrPXRkKGEuZyk7aD1mdW5jdGlvbihhLGIpe3JldHVybiBrKGIsYSl9fWVsc2UgaD10ZChhLmcpO0soYi5EYigpPT1hLmthLFwiXCIpO3ZhciBsPW5ldyBGKGMsZCksbT1hLkpiP3VkKGIsYS5nKTp2ZChiLGEuZyksdD1hLnNhLm1hdGNoZXMobCk7aWYoYi5EYShjKSl7Zm9yKHZhciB6PWIuUihjKSxtPWUueWUoYS5nLG0sYS5KYik7bnVsbCE9bSYmKG0ubmFtZT09Y3x8Yi5EYShtLm5hbWUpKTspbT1lLnllKGEuZyxtLGEuSmIpO2U9bnVsbD09bT8xOmgobSxsKTtpZih0JiYhZC5lKCkmJjA8PWUpcmV0dXJuIG51bGwhPWYmJmhkKGYsbmV3IEQoXCJjaGlsZF9jaGFuZ2VkXCIsZCxjLHopKSxiLlUoYyxkKTtudWxsIT1mJiZoZChmLG5ldyBEKFwiY2hpbGRfcmVtb3ZlZFwiLHosYykpO2I9Yi5VKGMsQyk7cmV0dXJuIG51bGwhPW0mJmEuc2EubWF0Y2hlcyhtKT8obnVsbCE9ZiYmaGQoZixuZXcgRChcImNoaWxkX2FkZGVkXCIsXG5tLlMsbS5uYW1lKSksYi5VKG0ubmFtZSxtLlMpKTpifXJldHVybiBkLmUoKT9iOnQmJjA8PWgobSxsKT8obnVsbCE9ZiYmKGhkKGYsbmV3IEQoXCJjaGlsZF9yZW1vdmVkXCIsbS5TLG0ubmFtZSkpLGhkKGYsbmV3IEQoXCJjaGlsZF9hZGRlZFwiLGQsYykpKSxiLlUoYyxkKS5VKG0ubmFtZSxDKSk6Yn07ZnVuY3Rpb24gd2QoYSxiKXt0aGlzLmplPWE7dGhpcy5mZz1ifWZ1bmN0aW9uIHhkKGEpe3RoaXMuVj1hfVxueGQucHJvdG90eXBlLmFiPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPW5ldyBnZCxmO2lmKGIudHlwZT09PVliKWIuc291cmNlLndlP2M9eWQodGhpcyxhLGIucGF0aCxiLkdhLGMsZCxlKTooSyhiLnNvdXJjZS5wZixcIlVua25vd24gc291cmNlLlwiKSxmPWIuc291cmNlLmFmfHxKYihhLncoKSkmJiFiLnBhdGguZSgpLGM9QWQodGhpcyxhLGIucGF0aCxiLkdhLGMsZCxmLGUpKTtlbHNlIGlmKGIudHlwZT09PUJkKWIuc291cmNlLndlP2M9Q2QodGhpcyxhLGIucGF0aCxiLmNoaWxkcmVuLGMsZCxlKTooSyhiLnNvdXJjZS5wZixcIlVua25vd24gc291cmNlLlwiKSxmPWIuc291cmNlLmFmfHxKYihhLncoKSksYz1EZCh0aGlzLGEsYi5wYXRoLGIuY2hpbGRyZW4sYyxkLGYsZSkpO2Vsc2UgaWYoYi50eXBlPT09RWQpaWYoYi5WZClpZihiPWIucGF0aCxudWxsIT1jLnRjKGIpKWM9YTtlbHNle2Y9bmV3IHJiKGMsYSxkKTtkPWEuTy5qKCk7aWYoYi5lKCl8fFwiLnByaW9yaXR5XCI9PT1FKGIpKUliKGEudygpKT9cbmI9Yy56YSh1YihhKSk6KGI9YS53KCkuaigpLEsoYiBpbnN0YW5jZW9mIFIsXCJzZXJ2ZXJDaGlsZHJlbiB3b3VsZCBiZSBjb21wbGV0ZSBpZiBsZWFmIG5vZGVcIiksYj1jLnljKGIpKSxiPXRoaXMuVi54YShkLGIsZSk7ZWxzZXt2YXIgaD1FKGIpLGs9Yy54YyhoLGEudygpKTtudWxsPT1rJiZzYihhLncoKSxoKSYmKGs9ZC5SKGgpKTtiPW51bGwhPWs/dGhpcy5WLkcoZCxoLGssSChiKSxmLGUpOmEuTy5qKCkuRGEoaCk/dGhpcy5WLkcoZCxoLEMsSChiKSxmLGUpOmQ7Yi5lKCkmJkliKGEudygpKSYmKGQ9Yy56YSh1YihhKSksZC5LKCkmJihiPXRoaXMuVi54YShiLGQsZSkpKX1kPUliKGEudygpKXx8bnVsbCE9Yy50YyhHKTtjPUZkKGEsYixkLHRoaXMuVi5OYSgpKX1lbHNlIGM9R2QodGhpcyxhLGIucGF0aCxiLlFiLGMsZCxlKTtlbHNlIGlmKGIudHlwZT09PSRiKWQ9Yi5wYXRoLGI9YS53KCksZj1iLmooKSxoPWIuZWF8fGQuZSgpLGM9SGQodGhpcyxuZXcgSWQoYS5PLG5ldyB0YihmLFxuaCxiLlViKSksZCxjLHFiLGUpO2Vsc2UgdGhyb3cgRmMoXCJVbmtub3duIG9wZXJhdGlvbiB0eXBlOiBcIitiLnR5cGUpO2U9cmEoZS5iYik7ZD1jO2I9ZC5PO2IuZWEmJihmPWIuaigpLksoKXx8Yi5qKCkuZSgpLGg9SmQoYSksKDA8ZS5sZW5ndGh8fCFhLk8uZWF8fGYmJiFiLmooKS5jYShoKXx8IWIuaigpLkMoKS5jYShoLkMoKSkpJiZlLnB1c2goRWIoSmQoZCkpKSk7cmV0dXJuIG5ldyB3ZChjLGUpfTtcbmZ1bmN0aW9uIEhkKGEsYixjLGQsZSxmKXt2YXIgaD1iLk87aWYobnVsbCE9ZC50YyhjKSlyZXR1cm4gYjt2YXIgaztpZihjLmUoKSlLKEliKGIudygpKSxcIklmIGNoYW5nZSBwYXRoIGlzIGVtcHR5LCB3ZSBtdXN0IGhhdmUgY29tcGxldGUgc2VydmVyIGRhdGFcIiksSmIoYi53KCkpPyhlPXViKGIpLGQ9ZC55YyhlIGluc3RhbmNlb2YgUj9lOkMpKTpkPWQuemEodWIoYikpLGY9YS5WLnhhKGIuTy5qKCksZCxmKTtlbHNle3ZhciBsPUUoYyk7aWYoXCIucHJpb3JpdHlcIj09bClLKDE9PUtkKGMpLFwiQ2FuJ3QgaGF2ZSBhIHByaW9yaXR5IHdpdGggYWRkaXRpb25hbCBwYXRoIGNvbXBvbmVudHNcIiksZj1oLmooKSxrPWIudygpLmooKSxkPWQubGQoYyxmLGspLGY9bnVsbCE9ZD9hLlYuZ2EoZixkKTpoLmooKTtlbHNle3ZhciBtPUgoYyk7c2IoaCxsKT8oaz1iLncoKS5qKCksZD1kLmxkKGMsaC5qKCksayksZD1udWxsIT1kP2guaigpLlIobCkuRyhtLGQpOmguaigpLlIobCkpOmQ9ZC54YyhsLFxuYi53KCkpO2Y9bnVsbCE9ZD9hLlYuRyhoLmooKSxsLGQsbSxlLGYpOmguaigpfX1yZXR1cm4gRmQoYixmLGguZWF8fGMuZSgpLGEuVi5OYSgpKX1mdW5jdGlvbiBBZChhLGIsYyxkLGUsZixoLGspe3ZhciBsPWIudygpO2g9aD9hLlY6YS5WLldiKCk7aWYoYy5lKCkpZD1oLnhhKGwuaigpLGQsbnVsbCk7ZWxzZSBpZihoLk5hKCkmJiFsLlViKWQ9bC5qKCkuRyhjLGQpLGQ9aC54YShsLmooKSxkLG51bGwpO2Vsc2V7dmFyIG09RShjKTtpZighS2IobCxjKSYmMTxLZChjKSlyZXR1cm4gYjt2YXIgdD1IKGMpO2Q9bC5qKCkuUihtKS5HKHQsZCk7ZD1cIi5wcmlvcml0eVwiPT1tP2guZ2EobC5qKCksZCk6aC5HKGwuaigpLG0sZCx0LHFiLG51bGwpfWw9bC5lYXx8Yy5lKCk7Yj1uZXcgSWQoYi5PLG5ldyB0YihkLGwsaC5OYSgpKSk7cmV0dXJuIEhkKGEsYixjLGUsbmV3IHJiKGUsYixmKSxrKX1cbmZ1bmN0aW9uIHlkKGEsYixjLGQsZSxmLGgpe3ZhciBrPWIuTztlPW5ldyByYihlLGIsZik7aWYoYy5lKCkpaD1hLlYueGEoYi5PLmooKSxkLGgpLGE9RmQoYixoLCEwLGEuVi5OYSgpKTtlbHNlIGlmKGY9RShjKSxcIi5wcmlvcml0eVwiPT09ZiloPWEuVi5nYShiLk8uaigpLGQpLGE9RmQoYixoLGsuZWEsay5VYik7ZWxzZXtjPUgoYyk7dmFyIGw9ay5qKCkuUihmKTtpZighYy5lKCkpe3ZhciBtPWUucWYoZik7ZD1udWxsIT1tP1wiLnByaW9yaXR5XCI9PT1MZChjKSYmbS5RKGMucGFyZW50KCkpLmUoKT9tOm0uRyhjLGQpOkN9bC5jYShkKT9hPWI6KGg9YS5WLkcoay5qKCksZixkLGMsZSxoKSxhPUZkKGIsaCxrLmVhLGEuVi5OYSgpKSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBDZChhLGIsYyxkLGUsZixoKXt2YXIgaz1iO01kKGQsZnVuY3Rpb24oZCxtKXt2YXIgdD1jLnUoZCk7c2IoYi5PLEUodCkpJiYoaz15ZChhLGssdCxtLGUsZixoKSl9KTtNZChkLGZ1bmN0aW9uKGQsbSl7dmFyIHQ9Yy51KGQpO3NiKGIuTyxFKHQpKXx8KGs9eWQoYSxrLHQsbSxlLGYsaCkpfSk7cmV0dXJuIGt9ZnVuY3Rpb24gTmQoYSxiKXtNZChiLGZ1bmN0aW9uKGIsZCl7YT1hLkcoYixkKX0pO3JldHVybiBhfVxuZnVuY3Rpb24gRGQoYSxiLGMsZCxlLGYsaCxrKXtpZihiLncoKS5qKCkuZSgpJiYhSWIoYi53KCkpKXJldHVybiBiO3ZhciBsPWI7Yz1jLmUoKT9kOk9kKFBkLGMsZCk7dmFyIG09Yi53KCkuaigpO2MuY2hpbGRyZW4uaWEoZnVuY3Rpb24oYyxkKXtpZihtLkRhKGMpKXt2YXIgST1iLncoKS5qKCkuUihjKSxJPU5kKEksZCk7bD1BZChhLGwsbmV3IEwoYyksSSxlLGYsaCxrKX19KTtjLmNoaWxkcmVuLmlhKGZ1bmN0aW9uKGMsZCl7dmFyIEk9IXNiKGIudygpLGMpJiZudWxsPT1kLnZhbHVlO20uRGEoYyl8fEl8fChJPWIudygpLmooKS5SKGMpLEk9TmQoSSxkKSxsPUFkKGEsbCxuZXcgTChjKSxJLGUsZixoLGspKX0pO3JldHVybiBsfVxuZnVuY3Rpb24gR2QoYSxiLGMsZCxlLGYsaCl7aWYobnVsbCE9ZS50YyhjKSlyZXR1cm4gYjt2YXIgaz1KYihiLncoKSksbD1iLncoKTtpZihudWxsIT1kLnZhbHVlKXtpZihjLmUoKSYmbC5lYXx8S2IobCxjKSlyZXR1cm4gQWQoYSxiLGMsbC5qKCkuUShjKSxlLGYsayxoKTtpZihjLmUoKSl7dmFyIG09UGQ7bC5qKCkuUChRZCxmdW5jdGlvbihhLGIpe209bS5zZXQobmV3IEwoYSksYil9KTtyZXR1cm4gRGQoYSxiLGMsbSxlLGYsayxoKX1yZXR1cm4gYn1tPVBkO01kKGQsZnVuY3Rpb24oYSl7dmFyIGI9Yy51KGEpO0tiKGwsYikmJihtPW0uc2V0KGEsbC5qKCkuUShiKSkpfSk7cmV0dXJuIERkKGEsYixjLG0sZSxmLGssaCl9O2Z1bmN0aW9uIFJkKCl7fXZhciBTZD17fTtmdW5jdGlvbiB0ZChhKXtyZXR1cm4gcShhLmNvbXBhcmUsYSl9UmQucHJvdG90eXBlLkFkPWZ1bmN0aW9uKGEsYil7cmV0dXJuIDAhPT10aGlzLmNvbXBhcmUobmV3IEYoXCJbTUlOX05BTUVdXCIsYSksbmV3IEYoXCJbTUlOX05BTUVdXCIsYikpfTtSZC5wcm90b3R5cGUuVGM9ZnVuY3Rpb24oKXtyZXR1cm4gVGR9O2Z1bmN0aW9uIFVkKGEpe0soIWEuZSgpJiZcIi5wcmlvcml0eVwiIT09RShhKSxcIkNhbid0IGNyZWF0ZSBQYXRoSW5kZXggd2l0aCBlbXB0eSBwYXRoIG9yIC5wcmlvcml0eSBrZXlcIik7dGhpcy5jYz1hfW1hKFVkLFJkKTtnPVVkLnByb3RvdHlwZTtnLkljPWZ1bmN0aW9uKGEpe3JldHVybiFhLlEodGhpcy5jYykuZSgpfTtnLmNvbXBhcmU9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLlMuUSh0aGlzLmNjKSxkPWIuUy5RKHRoaXMuY2MpLGM9Yy5EYyhkKTtyZXR1cm4gMD09PWM/VmIoYS5uYW1lLGIubmFtZSk6Y307XG5nLlBjPWZ1bmN0aW9uKGEsYil7dmFyIGM9TShhKSxjPUMuRyh0aGlzLmNjLGMpO3JldHVybiBuZXcgRihiLGMpfTtnLlFjPWZ1bmN0aW9uKCl7dmFyIGE9Qy5HKHRoaXMuY2MsVmQpO3JldHVybiBuZXcgRihcIltNQVhfTkFNRV1cIixhKX07Zy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNjLnNsaWNlKCkuam9pbihcIi9cIil9O2Z1bmN0aW9uIFdkKCl7fW1hKFdkLFJkKTtnPVdkLnByb3RvdHlwZTtnLmNvbXBhcmU9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLlMuQygpLGQ9Yi5TLkMoKSxjPWMuRGMoZCk7cmV0dXJuIDA9PT1jP1ZiKGEubmFtZSxiLm5hbWUpOmN9O2cuSWM9ZnVuY3Rpb24oYSl7cmV0dXJuIWEuQygpLmUoKX07Zy5BZD1mdW5jdGlvbihhLGIpe3JldHVybiFhLkMoKS5jYShiLkMoKSl9O2cuVGM9ZnVuY3Rpb24oKXtyZXR1cm4gVGR9O2cuUWM9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEYoXCJbTUFYX05BTUVdXCIsbmV3IHRjKFwiW1BSSU9SSVRZLVBPU1RdXCIsVmQpKX07XG5nLlBjPWZ1bmN0aW9uKGEsYil7dmFyIGM9TShhKTtyZXR1cm4gbmV3IEYoYixuZXcgdGMoXCJbUFJJT1JJVFktUE9TVF1cIixjKSl9O2cudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIi5wcmlvcml0eVwifTt2YXIgTj1uZXcgV2Q7ZnVuY3Rpb24gWGQoKXt9bWEoWGQsUmQpO2c9WGQucHJvdG90eXBlO2cuY29tcGFyZT1mdW5jdGlvbihhLGIpe3JldHVybiBWYihhLm5hbWUsYi5uYW1lKX07Zy5JYz1mdW5jdGlvbigpe3Rocm93IEZjKFwiS2V5SW5kZXguaXNEZWZpbmVkT24gbm90IGV4cGVjdGVkIHRvIGJlIGNhbGxlZC5cIik7fTtnLkFkPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2cuVGM9ZnVuY3Rpb24oKXtyZXR1cm4gVGR9O2cuUWM9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEYoXCJbTUFYX05BTUVdXCIsQyl9O2cuUGM9ZnVuY3Rpb24oYSl7SyhwKGEpLFwiS2V5SW5kZXggaW5kZXhWYWx1ZSBtdXN0IGFsd2F5cyBiZSBhIHN0cmluZy5cIik7cmV0dXJuIG5ldyBGKGEsQyl9O2cudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIi5rZXlcIn07XG52YXIgUWQ9bmV3IFhkO2Z1bmN0aW9uIFlkKCl7fW1hKFlkLFJkKTtnPVlkLnByb3RvdHlwZTtnLmNvbXBhcmU9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLlMuRGMoYi5TKTtyZXR1cm4gMD09PWM/VmIoYS5uYW1lLGIubmFtZSk6Y307Zy5JYz1mdW5jdGlvbigpe3JldHVybiEwfTtnLkFkPWZ1bmN0aW9uKGEsYil7cmV0dXJuIWEuY2EoYil9O2cuVGM9ZnVuY3Rpb24oKXtyZXR1cm4gVGR9O2cuUWM9ZnVuY3Rpb24oKXtyZXR1cm4gWmR9O2cuUGM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1NKGEpO3JldHVybiBuZXcgRihiLGMpfTtnLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCIudmFsdWVcIn07dmFyICRkPW5ldyBZZDtmdW5jdGlvbiBhZSgpe3RoaXMuVGI9dGhpcy5wYT10aGlzLkxiPXRoaXMubWE9dGhpcy5qYT0hMTt0aGlzLmthPTA7dGhpcy5OYj1cIlwiO3RoaXMuZWM9bnVsbDt0aGlzLnhiPVwiXCI7dGhpcy5iYz1udWxsO3RoaXMudmI9XCJcIjt0aGlzLmc9Tn12YXIgYmU9bmV3IGFlO2Z1bmN0aW9uIHJkKGEpe3JldHVyblwiXCI9PT1hLk5iP2EubWE6XCJsXCI9PT1hLk5ifWZ1bmN0aW9uIG5kKGEpe0soYS5tYSxcIk9ubHkgdmFsaWQgaWYgc3RhcnQgaGFzIGJlZW4gc2V0XCIpO3JldHVybiBhLmVjfWZ1bmN0aW9uIG1kKGEpe0soYS5tYSxcIk9ubHkgdmFsaWQgaWYgc3RhcnQgaGFzIGJlZW4gc2V0XCIpO3JldHVybiBhLkxiP2EueGI6XCJbTUlOX05BTUVdXCJ9ZnVuY3Rpb24gcGQoYSl7SyhhLnBhLFwiT25seSB2YWxpZCBpZiBlbmQgaGFzIGJlZW4gc2V0XCIpO3JldHVybiBhLmJjfVxuZnVuY3Rpb24gb2QoYSl7SyhhLnBhLFwiT25seSB2YWxpZCBpZiBlbmQgaGFzIGJlZW4gc2V0XCIpO3JldHVybiBhLlRiP2EudmI6XCJbTUFYX05BTUVdXCJ9ZnVuY3Rpb24gY2UoYSl7dmFyIGI9bmV3IGFlO2IuamE9YS5qYTtiLmthPWEua2E7Yi5tYT1hLm1hO2IuZWM9YS5lYztiLkxiPWEuTGI7Yi54Yj1hLnhiO2IucGE9YS5wYTtiLmJjPWEuYmM7Yi5UYj1hLlRiO2IudmI9YS52YjtiLmc9YS5nO3JldHVybiBifWc9YWUucHJvdG90eXBlO2cuSGU9ZnVuY3Rpb24oYSl7dmFyIGI9Y2UodGhpcyk7Yi5qYT0hMDtiLmthPWE7Yi5OYj1cIlwiO3JldHVybiBifTtnLkllPWZ1bmN0aW9uKGEpe3ZhciBiPWNlKHRoaXMpO2IuamE9ITA7Yi5rYT1hO2IuTmI9XCJsXCI7cmV0dXJuIGJ9O2cuSmU9ZnVuY3Rpb24oYSl7dmFyIGI9Y2UodGhpcyk7Yi5qYT0hMDtiLmthPWE7Yi5OYj1cInJcIjtyZXR1cm4gYn07XG5nLiRkPWZ1bmN0aW9uKGEsYil7dmFyIGM9Y2UodGhpcyk7Yy5tYT0hMDtuKGEpfHwoYT1udWxsKTtjLmVjPWE7bnVsbCE9Yj8oYy5MYj0hMCxjLnhiPWIpOihjLkxiPSExLGMueGI9XCJcIik7cmV0dXJuIGN9O2cudGQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz1jZSh0aGlzKTtjLnBhPSEwO24oYSl8fChhPW51bGwpO2MuYmM9YTtuKGIpPyhjLlRiPSEwLGMudmI9Yik6KGMuYWg9ITEsYy52Yj1cIlwiKTtyZXR1cm4gY307ZnVuY3Rpb24gZGUoYSxiKXt2YXIgYz1jZShhKTtjLmc9YjtyZXR1cm4gY31mdW5jdGlvbiBlZShhKXt2YXIgYj17fTthLm1hJiYoYi5zcD1hLmVjLGEuTGImJihiLnNuPWEueGIpKTthLnBhJiYoYi5lcD1hLmJjLGEuVGImJihiLmVuPWEudmIpKTtpZihhLmphKXtiLmw9YS5rYTt2YXIgYz1hLk5iO1wiXCI9PT1jJiYoYz1yZChhKT9cImxcIjpcInJcIik7Yi52Zj1jfWEuZyE9PU4mJihiLmk9YS5nLnRvU3RyaW5nKCkpO3JldHVybiBifVxuZnVuY3Rpb24gUyhhKXtyZXR1cm4hKGEubWF8fGEucGF8fGEuamEpfWZ1bmN0aW9uIGZlKGEpe3JldHVybiBTKGEpJiZhLmc9PU59ZnVuY3Rpb24gZ2UoYSl7dmFyIGI9e307aWYoZmUoYSkpcmV0dXJuIGI7dmFyIGM7YS5nPT09Tj9jPVwiJHByaW9yaXR5XCI6YS5nPT09JGQ/Yz1cIiR2YWx1ZVwiOmEuZz09PVFkP2M9XCIka2V5XCI6KEsoYS5nIGluc3RhbmNlb2YgVWQsXCJVbnJlY29nbml6ZWQgaW5kZXggdHlwZSFcIiksYz1hLmcudG9TdHJpbmcoKSk7Yi5vcmRlckJ5PUIoYyk7YS5tYSYmKGIuc3RhcnRBdD1CKGEuZWMpLGEuTGImJihiLnN0YXJ0QXQrPVwiLFwiK0IoYS54YikpKTthLnBhJiYoYi5lbmRBdD1CKGEuYmMpLGEuVGImJihiLmVuZEF0Kz1cIixcIitCKGEudmIpKSk7YS5qYSYmKHJkKGEpP2IubGltaXRUb0ZpcnN0PWEua2E6Yi5saW1pdFRvTGFzdD1hLmthKTtyZXR1cm4gYn1nLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIEIoZWUodGhpcykpfTtmdW5jdGlvbiBoZShhLGIpe3RoaXMuQmQ9YTt0aGlzLmRjPWJ9aGUucHJvdG90eXBlLmdldD1mdW5jdGlvbihhKXt2YXIgYj13KHRoaXMuQmQsYSk7aWYoIWIpdGhyb3cgRXJyb3IoXCJObyBpbmRleCBkZWZpbmVkIGZvciBcIithKTtyZXR1cm4gYj09PVNkP251bGw6Yn07ZnVuY3Rpb24gaWUoYSxiLGMpe3ZhciBkPW5hKGEuQmQsZnVuY3Rpb24oZCxmKXt2YXIgaD13KGEuZGMsZik7SyhoLFwiTWlzc2luZyBpbmRleCBpbXBsZW1lbnRhdGlvbiBmb3IgXCIrZik7aWYoZD09PVNkKXtpZihoLkljKGIuUykpe2Zvcih2YXIgaz1bXSxsPWMuWGIoVGIpLG09SihsKTttOyltLm5hbWUhPWIubmFtZSYmay5wdXNoKG0pLG09SihsKTtrLnB1c2goYik7cmV0dXJuIGplKGssdGQoaCkpfXJldHVybiBTZH1oPWMuZ2V0KGIubmFtZSk7az1kO2gmJihrPWsucmVtb3ZlKG5ldyBGKGIubmFtZSxoKSkpO3JldHVybiBrLk9hKGIsYi5TKX0pO3JldHVybiBuZXcgaGUoZCxhLmRjKX1cbmZ1bmN0aW9uIGtlKGEsYixjKXt2YXIgZD1uYShhLkJkLGZ1bmN0aW9uKGEpe2lmKGE9PT1TZClyZXR1cm4gYTt2YXIgZD1jLmdldChiLm5hbWUpO3JldHVybiBkP2EucmVtb3ZlKG5ldyBGKGIubmFtZSxkKSk6YX0pO3JldHVybiBuZXcgaGUoZCxhLmRjKX12YXIgbGU9bmV3IGhlKHtcIi5wcmlvcml0eVwiOlNkfSx7XCIucHJpb3JpdHlcIjpOfSk7ZnVuY3Rpb24gdGMoYSxiKXt0aGlzLkI9YTtLKG4odGhpcy5CKSYmbnVsbCE9PXRoaXMuQixcIkxlYWZOb2RlIHNob3VsZG4ndCBiZSBjcmVhdGVkIHdpdGggbnVsbC91bmRlZmluZWQgdmFsdWUuXCIpO3RoaXMuYWE9Ynx8QzttZSh0aGlzLmFhKTt0aGlzLkNiPW51bGx9dmFyIG5lPVtcIm9iamVjdFwiLFwiYm9vbGVhblwiLFwibnVtYmVyXCIsXCJzdHJpbmdcIl07Zz10Yy5wcm90b3R5cGU7Zy5LPWZ1bmN0aW9uKCl7cmV0dXJuITB9O2cuQz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFhfTtnLmdhPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgdGModGhpcy5CLGEpfTtnLlI9ZnVuY3Rpb24oYSl7cmV0dXJuXCIucHJpb3JpdHlcIj09PWE/dGhpcy5hYTpDfTtnLlE9ZnVuY3Rpb24oYSl7cmV0dXJuIGEuZSgpP3RoaXM6XCIucHJpb3JpdHlcIj09PUUoYSk/dGhpcy5hYTpDfTtnLkRhPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2cucmY9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH07XG5nLlU9ZnVuY3Rpb24oYSxiKXtyZXR1cm5cIi5wcmlvcml0eVwiPT09YT90aGlzLmdhKGIpOmIuZSgpJiZcIi5wcmlvcml0eVwiIT09YT90aGlzOkMuVShhLGIpLmdhKHRoaXMuYWEpfTtnLkc9ZnVuY3Rpb24oYSxiKXt2YXIgYz1FKGEpO2lmKG51bGw9PT1jKXJldHVybiBiO2lmKGIuZSgpJiZcIi5wcmlvcml0eVwiIT09YylyZXR1cm4gdGhpcztLKFwiLnByaW9yaXR5XCIhPT1jfHwxPT09S2QoYSksXCIucHJpb3JpdHkgbXVzdCBiZSB0aGUgbGFzdCB0b2tlbiBpbiBhIHBhdGhcIik7cmV0dXJuIHRoaXMuVShjLEMuRyhIKGEpLGIpKX07Zy5lPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2cuRGI9ZnVuY3Rpb24oKXtyZXR1cm4gMH07Zy5QPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2cuST1mdW5jdGlvbihhKXtyZXR1cm4gYSYmIXRoaXMuQygpLmUoKT97XCIudmFsdWVcIjp0aGlzLkNhKCksXCIucHJpb3JpdHlcIjp0aGlzLkMoKS5JKCl9OnRoaXMuQ2EoKX07XG5nLmhhc2g9ZnVuY3Rpb24oKXtpZihudWxsPT09dGhpcy5DYil7dmFyIGE9XCJcIjt0aGlzLmFhLmUoKXx8KGErPVwicHJpb3JpdHk6XCIrb2UodGhpcy5hYS5JKCkpK1wiOlwiKTt2YXIgYj10eXBlb2YgdGhpcy5CLGE9YSsoYitcIjpcIiksYT1cIm51bWJlclwiPT09Yj9hK1hjKHRoaXMuQik6YSt0aGlzLkI7dGhpcy5DYj1IYyhhKX1yZXR1cm4gdGhpcy5DYn07Zy5DYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLkJ9O2cuRGM9ZnVuY3Rpb24oYSl7aWYoYT09PUMpcmV0dXJuIDE7aWYoYSBpbnN0YW5jZW9mIFIpcmV0dXJuLTE7SyhhLksoKSxcIlVua25vd24gbm9kZSB0eXBlXCIpO3ZhciBiPXR5cGVvZiBhLkIsYz10eXBlb2YgdGhpcy5CLGQ9TmEobmUsYiksZT1OYShuZSxjKTtLKDA8PWQsXCJVbmtub3duIGxlYWYgdHlwZTogXCIrYik7SygwPD1lLFwiVW5rbm93biBsZWFmIHR5cGU6IFwiK2MpO3JldHVybiBkPT09ZT9cIm9iamVjdFwiPT09Yz8wOnRoaXMuQjxhLkI/LTE6dGhpcy5CPT09YS5CPzA6MTplLWR9O1xuZy5sYj1mdW5jdGlvbigpe3JldHVybiB0aGlzfTtnLkpjPWZ1bmN0aW9uKCl7cmV0dXJuITB9O2cuY2E9ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT10aGlzPyEwOmEuSygpP3RoaXMuQj09PWEuQiYmdGhpcy5hYS5jYShhLmFhKTohMX07Zy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBCKHRoaXMuSSghMCkpfTtmdW5jdGlvbiBSKGEsYixjKXt0aGlzLm09YTsodGhpcy5hYT1iKSYmbWUodGhpcy5hYSk7YS5lKCkmJksoIXRoaXMuYWF8fHRoaXMuYWEuZSgpLFwiQW4gZW1wdHkgbm9kZSBjYW5ub3QgaGF2ZSBhIHByaW9yaXR5XCIpO3RoaXMud2I9Yzt0aGlzLkNiPW51bGx9Zz1SLnByb3RvdHlwZTtnLks9ZnVuY3Rpb24oKXtyZXR1cm4hMX07Zy5DPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYWF8fEN9O2cuZ2E9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubS5lKCk/dGhpczpuZXcgUih0aGlzLm0sYSx0aGlzLndiKX07Zy5SPWZ1bmN0aW9uKGEpe2lmKFwiLnByaW9yaXR5XCI9PT1hKXJldHVybiB0aGlzLkMoKTthPXRoaXMubS5nZXQoYSk7cmV0dXJuIG51bGw9PT1hP0M6YX07Zy5RPWZ1bmN0aW9uKGEpe3ZhciBiPUUoYSk7cmV0dXJuIG51bGw9PT1iP3RoaXM6dGhpcy5SKGIpLlEoSChhKSl9O2cuRGE9ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPT10aGlzLm0uZ2V0KGEpfTtcbmcuVT1mdW5jdGlvbihhLGIpe0soYixcIldlIHNob3VsZCBhbHdheXMgYmUgcGFzc2luZyBzbmFwc2hvdCBub2Rlc1wiKTtpZihcIi5wcmlvcml0eVwiPT09YSlyZXR1cm4gdGhpcy5nYShiKTt2YXIgYz1uZXcgRihhLGIpLGQsZTtiLmUoKT8oZD10aGlzLm0ucmVtb3ZlKGEpLGM9a2UodGhpcy53YixjLHRoaXMubSkpOihkPXRoaXMubS5PYShhLGIpLGM9aWUodGhpcy53YixjLHRoaXMubSkpO2U9ZC5lKCk/Qzp0aGlzLmFhO3JldHVybiBuZXcgUihkLGUsYyl9O2cuRz1mdW5jdGlvbihhLGIpe3ZhciBjPUUoYSk7aWYobnVsbD09PWMpcmV0dXJuIGI7SyhcIi5wcmlvcml0eVwiIT09RShhKXx8MT09PUtkKGEpLFwiLnByaW9yaXR5IG11c3QgYmUgdGhlIGxhc3QgdG9rZW4gaW4gYSBwYXRoXCIpO3ZhciBkPXRoaXMuUihjKS5HKEgoYSksYik7cmV0dXJuIHRoaXMuVShjLGQpfTtnLmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tLmUoKX07Zy5EYj1mdW5jdGlvbigpe3JldHVybiB0aGlzLm0uY291bnQoKX07XG52YXIgcGU9L14oMHxbMS05XVxcZCopJC87Zz1SLnByb3RvdHlwZTtnLkk9ZnVuY3Rpb24oYSl7aWYodGhpcy5lKCkpcmV0dXJuIG51bGw7dmFyIGI9e30sYz0wLGQ9MCxlPSEwO3RoaXMuUChOLGZ1bmN0aW9uKGYsaCl7YltmXT1oLkkoYSk7YysrO2UmJnBlLnRlc3QoZik/ZD1NYXRoLm1heChkLE51bWJlcihmKSk6ZT0hMX0pO2lmKCFhJiZlJiZkPDIqYyl7dmFyIGY9W10saDtmb3IoaCBpbiBiKWZbaF09YltoXTtyZXR1cm4gZn1hJiYhdGhpcy5DKCkuZSgpJiYoYltcIi5wcmlvcml0eVwiXT10aGlzLkMoKS5JKCkpO3JldHVybiBifTtnLmhhc2g9ZnVuY3Rpb24oKXtpZihudWxsPT09dGhpcy5DYil7dmFyIGE9XCJcIjt0aGlzLkMoKS5lKCl8fChhKz1cInByaW9yaXR5OlwiK29lKHRoaXMuQygpLkkoKSkrXCI6XCIpO3RoaXMuUChOLGZ1bmN0aW9uKGIsYyl7dmFyIGQ9Yy5oYXNoKCk7XCJcIiE9PWQmJihhKz1cIjpcIitiK1wiOlwiK2QpfSk7dGhpcy5DYj1cIlwiPT09YT9cIlwiOkhjKGEpfXJldHVybiB0aGlzLkNifTtcbmcucmY9ZnVuY3Rpb24oYSxiLGMpe3JldHVybihjPXFlKHRoaXMsYykpPyhhPWNjKGMsbmV3IEYoYSxiKSkpP2EubmFtZTpudWxsOmNjKHRoaXMubSxhKX07ZnVuY3Rpb24gdWQoYSxiKXt2YXIgYztjPShjPXFlKGEsYikpPyhjPWMuU2MoKSkmJmMubmFtZTphLm0uU2MoKTtyZXR1cm4gYz9uZXcgRihjLGEubS5nZXQoYykpOm51bGx9ZnVuY3Rpb24gdmQoYSxiKXt2YXIgYztjPShjPXFlKGEsYikpPyhjPWMuZmMoKSkmJmMubmFtZTphLm0uZmMoKTtyZXR1cm4gYz9uZXcgRihjLGEubS5nZXQoYykpOm51bGx9Zy5QPWZ1bmN0aW9uKGEsYil7dmFyIGM9cWUodGhpcyxhKTtyZXR1cm4gYz9jLmlhKGZ1bmN0aW9uKGEpe3JldHVybiBiKGEubmFtZSxhLlMpfSk6dGhpcy5tLmlhKGIpfTtnLlhiPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLlliKGEuVGMoKSxhKX07XG5nLlliPWZ1bmN0aW9uKGEsYil7dmFyIGM9cWUodGhpcyxiKTtpZihjKXJldHVybiBjLlliKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtmb3IodmFyIGM9dGhpcy5tLlliKGEubmFtZSxUYiksZD1lYyhjKTtudWxsIT1kJiYwPmIuY29tcGFyZShkLGEpOylKKGMpLGQ9ZWMoYyk7cmV0dXJuIGN9O2cuc2Y9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuJGIoYS5RYygpLGEpfTtnLiRiPWZ1bmN0aW9uKGEsYil7dmFyIGM9cWUodGhpcyxiKTtpZihjKXJldHVybiBjLiRiKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtmb3IodmFyIGM9dGhpcy5tLiRiKGEubmFtZSxUYiksZD1lYyhjKTtudWxsIT1kJiYwPGIuY29tcGFyZShkLGEpOylKKGMpLGQ9ZWMoYyk7cmV0dXJuIGN9O2cuRGM9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZSgpP2EuZSgpPzA6LTE6YS5LKCl8fGEuZSgpPzE6YT09PVZkPy0xOjB9O1xuZy5sYj1mdW5jdGlvbihhKXtpZihhPT09UWR8fHRhKHRoaXMud2IuZGMsYS50b1N0cmluZygpKSlyZXR1cm4gdGhpczt2YXIgYj10aGlzLndiLGM9dGhpcy5tO0soYSE9PVFkLFwiS2V5SW5kZXggYWx3YXlzIGV4aXN0cyBhbmQgaXNuJ3QgbWVhbnQgdG8gYmUgYWRkZWQgdG8gdGhlIEluZGV4TWFwLlwiKTtmb3IodmFyIGQ9W10sZT0hMSxjPWMuWGIoVGIpLGY9SihjKTtmOyllPWV8fGEuSWMoZi5TKSxkLnB1c2goZiksZj1KKGMpO2Q9ZT9qZShkLHRkKGEpKTpTZDtlPWEudG9TdHJpbmcoKTtjPXhhKGIuZGMpO2NbZV09YTthPXhhKGIuQmQpO2FbZV09ZDtyZXR1cm4gbmV3IFIodGhpcy5tLHRoaXMuYWEsbmV3IGhlKGEsYykpfTtnLkpjPWZ1bmN0aW9uKGEpe3JldHVybiBhPT09UWR8fHRhKHRoaXMud2IuZGMsYS50b1N0cmluZygpKX07XG5nLmNhPWZ1bmN0aW9uKGEpe2lmKGE9PT10aGlzKXJldHVybiEwO2lmKGEuSygpKXJldHVybiExO2lmKHRoaXMuQygpLmNhKGEuQygpKSYmdGhpcy5tLmNvdW50KCk9PT1hLm0uY291bnQoKSl7dmFyIGI9dGhpcy5YYihOKTthPWEuWGIoTik7Zm9yKHZhciBjPUooYiksZD1KKGEpO2MmJmQ7KXtpZihjLm5hbWUhPT1kLm5hbWV8fCFjLlMuY2EoZC5TKSlyZXR1cm4hMTtjPUooYik7ZD1KKGEpfXJldHVybiBudWxsPT09YyYmbnVsbD09PWR9cmV0dXJuITF9O2Z1bmN0aW9uIHFlKGEsYil7cmV0dXJuIGI9PT1RZD9udWxsOmEud2IuZ2V0KGIudG9TdHJpbmcoKSl9Zy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBCKHRoaXMuSSghMCkpfTtmdW5jdGlvbiBNKGEsYil7aWYobnVsbD09PWEpcmV0dXJuIEM7dmFyIGM9bnVsbDtcIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiLnByaW9yaXR5XCJpbiBhP2M9YVtcIi5wcmlvcml0eVwiXTpcInVuZGVmaW5lZFwiIT09dHlwZW9mIGImJihjPWIpO0sobnVsbD09PWN8fFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjfHxcIm9iamVjdFwiPT09dHlwZW9mIGMmJlwiLnN2XCJpbiBjLFwiSW52YWxpZCBwcmlvcml0eSB0eXBlIGZvdW5kOiBcIit0eXBlb2YgYyk7XCJvYmplY3RcIj09PXR5cGVvZiBhJiZcIi52YWx1ZVwiaW4gYSYmbnVsbCE9PWFbXCIudmFsdWVcIl0mJihhPWFbXCIudmFsdWVcIl0pO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8XCIuc3ZcImluIGEpcmV0dXJuIG5ldyB0YyhhLE0oYykpO2lmKGEgaW5zdGFuY2VvZiBBcnJheSl7dmFyIGQ9QyxlPWE7cihlLGZ1bmN0aW9uKGEsYil7aWYodihlLGIpJiZcIi5cIiE9PWIuc3Vic3RyaW5nKDAsMSkpe3ZhciBjPU0oYSk7aWYoYy5LKCl8fCFjLmUoKSlkPVxuZC5VKGIsYyl9fSk7cmV0dXJuIGQuZ2EoTShjKSl9dmFyIGY9W10saD0hMSxrPWE7aWIoayxmdW5jdGlvbihhKXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGF8fFwiLlwiIT09YS5zdWJzdHJpbmcoMCwxKSl7dmFyIGI9TShrW2FdKTtiLmUoKXx8KGg9aHx8IWIuQygpLmUoKSxmLnB1c2gobmV3IEYoYSxiKSkpfX0pO2lmKDA9PWYubGVuZ3RoKXJldHVybiBDO3ZhciBsPWplKGYsVWIsZnVuY3Rpb24oYSl7cmV0dXJuIGEubmFtZX0sV2IpO2lmKGgpe3ZhciBtPWplKGYsdGQoTikpO3JldHVybiBuZXcgUihsLE0oYyksbmV3IGhlKHtcIi5wcmlvcml0eVwiOm19LHtcIi5wcmlvcml0eVwiOk59KSl9cmV0dXJuIG5ldyBSKGwsTShjKSxsZSl9dmFyIHJlPU1hdGgubG9nKDIpO1xuZnVuY3Rpb24gc2UoYSl7dGhpcy5jb3VudD1wYXJzZUludChNYXRoLmxvZyhhKzEpL3JlLDEwKTt0aGlzLmpmPXRoaXMuY291bnQtMTt0aGlzLmVnPWErMSZwYXJzZUludChBcnJheSh0aGlzLmNvdW50KzEpLmpvaW4oXCIxXCIpLDIpfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPSEoYS5lZyYxPDxhLmpmKTthLmpmLS07cmV0dXJuIGJ9XG5mdW5jdGlvbiBqZShhLGIsYyxkKXtmdW5jdGlvbiBlKGIsZCl7dmFyIGY9ZC1iO2lmKDA9PWYpcmV0dXJuIG51bGw7aWYoMT09Zil7dmFyIG09YVtiXSx0PWM/YyhtKTptO3JldHVybiBuZXcgZmModCxtLlMsITEsbnVsbCxudWxsKX12YXIgbT1wYXJzZUludChmLzIsMTApK2IsZj1lKGIsbSksej1lKG0rMSxkKSxtPWFbbV0sdD1jP2MobSk6bTtyZXR1cm4gbmV3IGZjKHQsbS5TLCExLGYseil9YS5zb3J0KGIpO3ZhciBmPWZ1bmN0aW9uKGIpe2Z1bmN0aW9uIGQoYixoKXt2YXIgaz10LWIsej10O3QtPWI7dmFyIHo9ZShrKzEseiksaz1hW2tdLEk9Yz9jKGspOmssej1uZXcgZmMoSSxrLlMsaCxudWxsLHopO2Y/Zi5sZWZ0PXo6bT16O2Y9en1mb3IodmFyIGY9bnVsbCxtPW51bGwsdD1hLmxlbmd0aCx6PTA7ejxiLmNvdW50Oysreil7dmFyIEk9dGUoYiksemQ9TWF0aC5wb3coMixiLmNvdW50LSh6KzEpKTtJP2QoemQsITEpOihkKHpkLCExKSxkKHpkLCEwKSl9cmV0dXJuIG19KG5ldyBzZShhLmxlbmd0aCkpO1xucmV0dXJuIG51bGwhPT1mP25ldyBhYyhkfHxiLGYpOm5ldyBhYyhkfHxiKX1mdW5jdGlvbiBvZShhKXtyZXR1cm5cIm51bWJlclwiPT09dHlwZW9mIGE/XCJudW1iZXI6XCIrWGMoYSk6XCJzdHJpbmc6XCIrYX1mdW5jdGlvbiBtZShhKXtpZihhLksoKSl7dmFyIGI9YS5JKCk7SyhcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYnx8XCJvYmplY3RcIj09PXR5cGVvZiBiJiZ2KGIsXCIuc3ZcIiksXCJQcmlvcml0eSBtdXN0IGJlIGEgc3RyaW5nIG9yIG51bWJlci5cIil9ZWxzZSBLKGE9PT1WZHx8YS5lKCksXCJwcmlvcml0eSBvZiB1bmV4cGVjdGVkIHR5cGUuXCIpO0soYT09PVZkfHxhLkMoKS5lKCksXCJQcmlvcml0eSBub2RlcyBjYW4ndCBoYXZlIGEgcHJpb3JpdHkgb2YgdGhlaXIgb3duLlwiKX12YXIgQz1uZXcgUihuZXcgYWMoV2IpLG51bGwsbGUpO2Z1bmN0aW9uIHVlKCl7Ui5jYWxsKHRoaXMsbmV3IGFjKFdiKSxDLGxlKX1tYSh1ZSxSKTtnPXVlLnByb3RvdHlwZTtcbmcuRGM9ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT10aGlzPzA6MX07Zy5jYT1mdW5jdGlvbihhKXtyZXR1cm4gYT09PXRoaXN9O2cuQz1mdW5jdGlvbigpe3JldHVybiB0aGlzfTtnLlI9ZnVuY3Rpb24oKXtyZXR1cm4gQ307Zy5lPWZ1bmN0aW9uKCl7cmV0dXJuITF9O3ZhciBWZD1uZXcgdWUsVGQ9bmV3IEYoXCJbTUlOX05BTUVdXCIsQyksWmQ9bmV3IEYoXCJbTUFYX05BTUVdXCIsVmQpO2Z1bmN0aW9uIElkKGEsYil7dGhpcy5PPWE7dGhpcy5ZZD1ifWZ1bmN0aW9uIEZkKGEsYixjLGQpe3JldHVybiBuZXcgSWQobmV3IHRiKGIsYyxkKSxhLllkKX1mdW5jdGlvbiBKZChhKXtyZXR1cm4gYS5PLmVhP2EuTy5qKCk6bnVsbH1JZC5wcm90b3R5cGUudz1mdW5jdGlvbigpe3JldHVybiB0aGlzLllkfTtmdW5jdGlvbiB1YihhKXtyZXR1cm4gYS5ZZC5lYT9hLllkLmooKTpudWxsfTtmdW5jdGlvbiB2ZShhLGIpe3RoaXMuVz1hO3ZhciBjPWEubixkPW5ldyBrZChjLmcpLGM9UyhjKT9uZXcga2QoYy5nKTpjLmphP25ldyBxZChjKTpuZXcgbGQoYyk7dGhpcy5IZj1uZXcgeGQoYyk7dmFyIGU9Yi53KCksZj1iLk8saD1kLnhhKEMsZS5qKCksbnVsbCksaz1jLnhhKEMsZi5qKCksbnVsbCk7dGhpcy5LYT1uZXcgSWQobmV3IHRiKGssZi5lYSxjLk5hKCkpLG5ldyB0YihoLGUuZWEsZC5OYSgpKSk7dGhpcy5YYT1bXTt0aGlzLmxnPW5ldyBjZChhKX1mdW5jdGlvbiB3ZShhKXtyZXR1cm4gYS5XfWc9dmUucHJvdG90eXBlO2cudz1mdW5jdGlvbigpe3JldHVybiB0aGlzLkthLncoKS5qKCl9O2cuZmI9ZnVuY3Rpb24oYSl7dmFyIGI9dWIodGhpcy5LYSk7cmV0dXJuIGImJihTKHRoaXMuVy5uKXx8IWEuZSgpJiYhYi5SKEUoYSkpLmUoKSk/Yi5RKGEpOm51bGx9O2cuZT1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5YYS5sZW5ndGh9O2cuUGI9ZnVuY3Rpb24oYSl7dGhpcy5YYS5wdXNoKGEpfTtcbmcuamI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1bXTtpZihiKXtLKG51bGw9PWEsXCJBIGNhbmNlbCBzaG91bGQgY2FuY2VsIGFsbCBldmVudCByZWdpc3RyYXRpb25zLlwiKTt2YXIgZD10aGlzLlcucGF0aDtPYSh0aGlzLlhhLGZ1bmN0aW9uKGEpeyhhPWEuZ2YoYixkKSkmJmMucHVzaChhKX0pfWlmKGEpe2Zvcih2YXIgZT1bXSxmPTA7Zjx0aGlzLlhhLmxlbmd0aDsrK2Ype3ZhciBoPXRoaXMuWGFbZl07aWYoIWgubWF0Y2hlcyhhKSllLnB1c2goaCk7ZWxzZSBpZihhLnRmKCkpe2U9ZS5jb25jYXQodGhpcy5YYS5zbGljZShmKzEpKTticmVha319dGhpcy5YYT1lfWVsc2UgdGhpcy5YYT1bXTtyZXR1cm4gY307XG5nLmFiPWZ1bmN0aW9uKGEsYixjKXthLnR5cGU9PT1CZCYmbnVsbCE9PWEuc291cmNlLkhiJiYoSyh1Yih0aGlzLkthKSxcIldlIHNob3VsZCBhbHdheXMgaGF2ZSBhIGZ1bGwgY2FjaGUgYmVmb3JlIGhhbmRsaW5nIG1lcmdlc1wiKSxLKEpkKHRoaXMuS2EpLFwiTWlzc2luZyBldmVudCBjYWNoZSwgZXZlbiB0aG91Z2ggd2UgaGF2ZSBhIHNlcnZlciBjYWNoZVwiKSk7dmFyIGQ9dGhpcy5LYTthPXRoaXMuSGYuYWIoZCxhLGIsYyk7Yj10aGlzLkhmO2M9YS5qZTtLKGMuTy5qKCkuSmMoYi5WLmcpLFwiRXZlbnQgc25hcCBub3QgaW5kZXhlZFwiKTtLKGMudygpLmooKS5KYyhiLlYuZyksXCJTZXJ2ZXIgc25hcCBub3QgaW5kZXhlZFwiKTtLKEliKGEuamUudygpKXx8IUliKGQudygpKSxcIk9uY2UgYSBzZXJ2ZXIgc25hcCBpcyBjb21wbGV0ZSwgaXQgc2hvdWxkIG5ldmVyIGdvIGJhY2tcIik7dGhpcy5LYT1hLmplO3JldHVybiB4ZSh0aGlzLGEuZmcsYS5qZS5PLmooKSxudWxsKX07XG5mdW5jdGlvbiB5ZShhLGIpe3ZhciBjPWEuS2EuTyxkPVtdO2MuaigpLksoKXx8Yy5qKCkuUChOLGZ1bmN0aW9uKGEsYil7ZC5wdXNoKG5ldyBEKFwiY2hpbGRfYWRkZWRcIixiLGEpKX0pO2MuZWEmJmQucHVzaChFYihjLmooKSkpO3JldHVybiB4ZShhLGQsYy5qKCksYil9ZnVuY3Rpb24geGUoYSxiLGMsZCl7cmV0dXJuIGRkKGEubGcsYixjLGQ/W2RdOmEuWGEpfTtmdW5jdGlvbiB6ZShhLGIsYyl7dGhpcy50eXBlPUJkO3RoaXMuc291cmNlPWE7dGhpcy5wYXRoPWI7dGhpcy5jaGlsZHJlbj1jfXplLnByb3RvdHlwZS5YYz1mdW5jdGlvbihhKXtpZih0aGlzLnBhdGguZSgpKXJldHVybiBhPXRoaXMuY2hpbGRyZW4uc3VidHJlZShuZXcgTChhKSksYS5lKCk/bnVsbDphLnZhbHVlP25ldyBYYih0aGlzLnNvdXJjZSxHLGEudmFsdWUpOm5ldyB6ZSh0aGlzLnNvdXJjZSxHLGEpO0soRSh0aGlzLnBhdGgpPT09YSxcIkNhbid0IGdldCBhIG1lcmdlIGZvciBhIGNoaWxkIG5vdCBvbiB0aGUgcGF0aCBvZiB0aGUgb3BlcmF0aW9uXCIpO3JldHVybiBuZXcgemUodGhpcy5zb3VyY2UsSCh0aGlzLnBhdGgpLHRoaXMuY2hpbGRyZW4pfTt6ZS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIk9wZXJhdGlvbihcIit0aGlzLnBhdGgrXCI6IFwiK3RoaXMuc291cmNlLnRvU3RyaW5nKCkrXCIgbWVyZ2U6IFwiK3RoaXMuY2hpbGRyZW4udG9TdHJpbmcoKStcIilcIn07ZnVuY3Rpb24gQWUoYSxiKXt0aGlzLmY9TWMoXCJwOnJlc3Q6XCIpO3RoaXMuRj1hO3RoaXMuR2I9Yjt0aGlzLkFhPW51bGw7dGhpcy4kPXt9fWZ1bmN0aW9uIEJlKGEsYil7aWYobihiKSlyZXR1cm5cInRhZyRcIitiO0soZmUoYS5uKSxcInNob3VsZCBoYXZlIGEgdGFnIGlmIGl0J3Mgbm90IGEgZGVmYXVsdCBxdWVyeS5cIik7cmV0dXJuIGEucGF0aC50b1N0cmluZygpfWc9QWUucHJvdG90eXBlO1xuZy55Zj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLnBhdGgudG9TdHJpbmcoKTt0aGlzLmYoXCJMaXN0ZW4gY2FsbGVkIGZvciBcIitlK1wiIFwiK2EudmEoKSk7dmFyIGY9QmUoYSxjKSxoPXt9O3RoaXMuJFtmXT1oO2E9Z2UoYS5uKTt2YXIgaz10aGlzO0NlKHRoaXMsZStcIi5qc29uXCIsYSxmdW5jdGlvbihhLGIpe3ZhciB0PWI7NDA0PT09YSYmKGE9dD1udWxsKTtudWxsPT09YSYmay5HYihlLHQsITEsYyk7dyhrLiQsZik9PT1oJiZkKGE/NDAxPT1hP1wicGVybWlzc2lvbl9kZW5pZWRcIjpcInJlc3RfZXJyb3I6XCIrYTpcIm9rXCIsbnVsbCl9KX07Zy5SZj1mdW5jdGlvbihhLGIpe3ZhciBjPUJlKGEsYik7ZGVsZXRlIHRoaXMuJFtjXX07Zy5NPWZ1bmN0aW9uKGEsYil7dGhpcy5BYT1hO3ZhciBjPSRjKGEpLGQ9Yy5kYXRhLGM9Yy5CYyYmYy5CYy5leHA7YiYmYihcIm9rXCIse2F1dGg6ZCxleHBpcmVzOmN9KX07Zy5nZT1mdW5jdGlvbihhKXt0aGlzLkFhPW51bGw7YShcIm9rXCIsbnVsbCl9O2cuTWU9ZnVuY3Rpb24oKXt9O1xuZy5DZj1mdW5jdGlvbigpe307Zy5KZD1mdW5jdGlvbigpe307Zy5wdXQ9ZnVuY3Rpb24oKXt9O2cuemY9ZnVuY3Rpb24oKXt9O2cuVWU9ZnVuY3Rpb24oKXt9O1xuZnVuY3Rpb24gQ2UoYSxiLGMsZCl7Yz1jfHx7fTtjLmZvcm1hdD1cImV4cG9ydFwiO2EuQWEmJihjLmF1dGg9YS5BYSk7dmFyIGU9KGEuRi5rYj9cImh0dHBzOi8vXCI6XCJodHRwOi8vXCIpK2EuRi5ob3N0K2IrXCI/XCIra2IoYyk7YS5mKFwiU2VuZGluZyBSRVNUIHJlcXVlc3QgZm9yIFwiK2UpO3ZhciBmPW5ldyBYTUxIdHRwUmVxdWVzdDtmLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2lmKGQmJjQ9PT1mLnJlYWR5U3RhdGUpe2EuZihcIlJFU1QgUmVzcG9uc2UgZm9yIFwiK2UrXCIgcmVjZWl2ZWQuIHN0YXR1czpcIixmLnN0YXR1cyxcInJlc3BvbnNlOlwiLGYucmVzcG9uc2VUZXh0KTt2YXIgYj1udWxsO2lmKDIwMDw9Zi5zdGF0dXMmJjMwMD5mLnN0YXR1cyl7dHJ5e2I9bmIoZi5yZXNwb25zZVRleHQpfWNhdGNoKGMpe08oXCJGYWlsZWQgdG8gcGFyc2UgSlNPTiByZXNwb25zZSBmb3IgXCIrZStcIjogXCIrZi5yZXNwb25zZVRleHQpfWQobnVsbCxiKX1lbHNlIDQwMSE9PWYuc3RhdHVzJiY0MDQhPT1cbmYuc3RhdHVzJiZPKFwiR290IHVuc3VjY2Vzc2Z1bCBSRVNUIHJlc3BvbnNlIGZvciBcIitlK1wiIFN0YXR1czogXCIrZi5zdGF0dXMpLGQoZi5zdGF0dXMpO2Q9bnVsbH19O2Yub3BlbihcIkdFVFwiLGUsITApO2Yuc2VuZCgpfTtmdW5jdGlvbiBEZShhKXtLKGVhKGEpJiYwPGEubGVuZ3RoLFwiUmVxdWlyZXMgYSBub24tZW1wdHkgYXJyYXlcIik7dGhpcy5YZj1hO3RoaXMuT2M9e319RGUucHJvdG90eXBlLmZlPWZ1bmN0aW9uKGEsYil7dmFyIGM7Yz10aGlzLk9jW2FdfHxbXTt2YXIgZD1jLmxlbmd0aDtpZigwPGQpe2Zvcih2YXIgZT1BcnJheShkKSxmPTA7ZjxkO2YrKyllW2ZdPWNbZl07Yz1lfWVsc2UgYz1bXTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWNbZF0uemMuYXBwbHkoY1tkXS5NYSxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSkpfTtEZS5wcm90b3R5cGUuRWI9ZnVuY3Rpb24oYSxiLGMpe0VlKHRoaXMsYSk7dGhpcy5PY1thXT10aGlzLk9jW2FdfHxbXTt0aGlzLk9jW2FdLnB1c2goe3pjOmIsTWE6Y30pOyhhPXRoaXMuQWUoYSkpJiZiLmFwcGx5KGMsYSl9O1xuRGUucHJvdG90eXBlLmljPWZ1bmN0aW9uKGEsYixjKXtFZSh0aGlzLGEpO2E9dGhpcy5PY1thXXx8W107Zm9yKHZhciBkPTA7ZDxhLmxlbmd0aDtkKyspaWYoYVtkXS56Yz09PWImJighY3x8Yz09PWFbZF0uTWEpKXthLnNwbGljZShkLDEpO2JyZWFrfX07ZnVuY3Rpb24gRWUoYSxiKXtLKFRhKGEuWGYsZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1ifSksXCJVbmtub3duIGV2ZW50OiBcIitiKX07dmFyIEZlPWZ1bmN0aW9uKCl7dmFyIGE9MCxiPVtdO3JldHVybiBmdW5jdGlvbihjKXt2YXIgZD1jPT09YTthPWM7Zm9yKHZhciBlPUFycmF5KDgpLGY9NzswPD1mO2YtLSllW2ZdPVwiLTAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWl9hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiLmNoYXJBdChjJTY0KSxjPU1hdGguZmxvb3IoYy82NCk7SygwPT09YyxcIkNhbm5vdCBwdXNoIGF0IHRpbWUgPT0gMFwiKTtjPWUuam9pbihcIlwiKTtpZihkKXtmb3IoZj0xMTswPD1mJiY2Mz09PWJbZl07Zi0tKWJbZl09MDtiW2ZdKyt9ZWxzZSBmb3IoZj0wOzEyPmY7ZisrKWJbZl09TWF0aC5mbG9vcig2NCpNYXRoLnJhbmRvbSgpKTtmb3IoZj0wOzEyPmY7ZisrKWMrPVwiLTAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWl9hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiLmNoYXJBdChiW2ZdKTtLKDIwPT09Yy5sZW5ndGgsXCJuZXh0UHVzaElkOiBMZW5ndGggc2hvdWxkIGJlIDIwLlwiKTtcbnJldHVybiBjfX0oKTtmdW5jdGlvbiBHZSgpe0RlLmNhbGwodGhpcyxbXCJvbmxpbmVcIl0pO3RoaXMua2M9ITA7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3cmJlwidW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpe3ZhciBhPXRoaXM7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIixmdW5jdGlvbigpe2Eua2N8fChhLmtjPSEwLGEuZmUoXCJvbmxpbmVcIiwhMCkpfSwhMSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsZnVuY3Rpb24oKXthLmtjJiYoYS5rYz0hMSxhLmZlKFwib25saW5lXCIsITEpKX0sITEpfX1tYShHZSxEZSk7R2UucHJvdG90eXBlLkFlPWZ1bmN0aW9uKGEpe0soXCJvbmxpbmVcIj09PWEsXCJVbmtub3duIGV2ZW50IHR5cGU6IFwiK2EpO3JldHVyblt0aGlzLmtjXX07Y2EoR2UpO2Z1bmN0aW9uIEhlKCl7RGUuY2FsbCh0aGlzLFtcInZpc2libGVcIl0pO3ZhciBhLGI7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudCYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyJiYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudC5oaWRkZW4/KGI9XCJ2aXNpYmlsaXR5Y2hhbmdlXCIsYT1cImhpZGRlblwiKTpcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50Lm1vekhpZGRlbj8oYj1cIm1venZpc2liaWxpdHljaGFuZ2VcIixhPVwibW96SGlkZGVuXCIpOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQubXNIaWRkZW4/KGI9XCJtc3Zpc2liaWxpdHljaGFuZ2VcIixhPVwibXNIaWRkZW5cIik6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4mJihiPVwid2Via2l0dmlzaWJpbGl0eWNoYW5nZVwiLGE9XCJ3ZWJraXRIaWRkZW5cIikpO3RoaXMuT2I9ITA7aWYoYil7dmFyIGM9dGhpcztkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGIsXG5mdW5jdGlvbigpe3ZhciBiPSFkb2N1bWVudFthXTtiIT09Yy5PYiYmKGMuT2I9YixjLmZlKFwidmlzaWJsZVwiLGIpKX0sITEpfX1tYShIZSxEZSk7SGUucHJvdG90eXBlLkFlPWZ1bmN0aW9uKGEpe0soXCJ2aXNpYmxlXCI9PT1hLFwiVW5rbm93biBldmVudCB0eXBlOiBcIithKTtyZXR1cm5bdGhpcy5PYl19O2NhKEhlKTtmdW5jdGlvbiBMKGEsYil7aWYoMT09YXJndW1lbnRzLmxlbmd0aCl7dGhpcy5vPWEuc3BsaXQoXCIvXCIpO2Zvcih2YXIgYz0wLGQ9MDtkPHRoaXMuby5sZW5ndGg7ZCsrKTA8dGhpcy5vW2RdLmxlbmd0aCYmKHRoaXMub1tjXT10aGlzLm9bZF0sYysrKTt0aGlzLm8ubGVuZ3RoPWM7dGhpcy5aPTB9ZWxzZSB0aGlzLm89YSx0aGlzLlo9Yn1mdW5jdGlvbiBUKGEsYil7dmFyIGM9RShhKTtpZihudWxsPT09YylyZXR1cm4gYjtpZihjPT09RShiKSlyZXR1cm4gVChIKGEpLEgoYikpO3Rocm93IEVycm9yKFwiSU5URVJOQUwgRVJST1I6IGlubmVyUGF0aCAoXCIrYitcIikgaXMgbm90IHdpdGhpbiBvdXRlclBhdGggKFwiK2ErXCIpXCIpO31cbmZ1bmN0aW9uIEllKGEsYil7Zm9yKHZhciBjPWEuc2xpY2UoKSxkPWIuc2xpY2UoKSxlPTA7ZTxjLmxlbmd0aCYmZTxkLmxlbmd0aDtlKyspe3ZhciBmPVZiKGNbZV0sZFtlXSk7aWYoMCE9PWYpcmV0dXJuIGZ9cmV0dXJuIGMubGVuZ3RoPT09ZC5sZW5ndGg/MDpjLmxlbmd0aDxkLmxlbmd0aD8tMToxfWZ1bmN0aW9uIEUoYSl7cmV0dXJuIGEuWj49YS5vLmxlbmd0aD9udWxsOmEub1thLlpdfWZ1bmN0aW9uIEtkKGEpe3JldHVybiBhLm8ubGVuZ3RoLWEuWn1mdW5jdGlvbiBIKGEpe3ZhciBiPWEuWjtiPGEuby5sZW5ndGgmJmIrKztyZXR1cm4gbmV3IEwoYS5vLGIpfWZ1bmN0aW9uIExkKGEpe3JldHVybiBhLlo8YS5vLmxlbmd0aD9hLm9bYS5vLmxlbmd0aC0xXTpudWxsfWc9TC5wcm90b3R5cGU7XG5nLnRvU3RyaW5nPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPVwiXCIsYj10aGlzLlo7Yjx0aGlzLm8ubGVuZ3RoO2IrKylcIlwiIT09dGhpcy5vW2JdJiYoYSs9XCIvXCIrdGhpcy5vW2JdKTtyZXR1cm4gYXx8XCIvXCJ9O2cuc2xpY2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuby5zbGljZSh0aGlzLlorKGF8fDApKX07Zy5wYXJlbnQ9ZnVuY3Rpb24oKXtpZih0aGlzLlo+PXRoaXMuby5sZW5ndGgpcmV0dXJuIG51bGw7Zm9yKHZhciBhPVtdLGI9dGhpcy5aO2I8dGhpcy5vLmxlbmd0aC0xO2IrKylhLnB1c2godGhpcy5vW2JdKTtyZXR1cm4gbmV3IEwoYSwwKX07XG5nLnU9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9dGhpcy5aO2M8dGhpcy5vLmxlbmd0aDtjKyspYi5wdXNoKHRoaXMub1tjXSk7aWYoYSBpbnN0YW5jZW9mIEwpZm9yKGM9YS5aO2M8YS5vLmxlbmd0aDtjKyspYi5wdXNoKGEub1tjXSk7ZWxzZSBmb3IoYT1hLnNwbGl0KFwiL1wiKSxjPTA7YzxhLmxlbmd0aDtjKyspMDxhW2NdLmxlbmd0aCYmYi5wdXNoKGFbY10pO3JldHVybiBuZXcgTChiLDApfTtnLmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5aPj10aGlzLm8ubGVuZ3RofTtnLmNhPWZ1bmN0aW9uKGEpe2lmKEtkKHRoaXMpIT09S2QoYSkpcmV0dXJuITE7Zm9yKHZhciBiPXRoaXMuWixjPWEuWjtiPD10aGlzLm8ubGVuZ3RoO2IrKyxjKyspaWYodGhpcy5vW2JdIT09YS5vW2NdKXJldHVybiExO3JldHVybiEwfTtcbmcuY29udGFpbnM9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5aLGM9YS5aO2lmKEtkKHRoaXMpPktkKGEpKXJldHVybiExO2Zvcig7Yjx0aGlzLm8ubGVuZ3RoOyl7aWYodGhpcy5vW2JdIT09YS5vW2NdKXJldHVybiExOysrYjsrK2N9cmV0dXJuITB9O3ZhciBHPW5ldyBMKFwiXCIpO2Z1bmN0aW9uIEplKGEsYil7dGhpcy5RYT1hLnNsaWNlKCk7dGhpcy5IYT1NYXRoLm1heCgxLHRoaXMuUWEubGVuZ3RoKTt0aGlzLmxmPWI7Zm9yKHZhciBjPTA7Yzx0aGlzLlFhLmxlbmd0aDtjKyspdGhpcy5IYSs9WmModGhpcy5RYVtjXSk7S2UodGhpcyl9SmUucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oYSl7MDx0aGlzLlFhLmxlbmd0aCYmKHRoaXMuSGErPTEpO3RoaXMuUWEucHVzaChhKTt0aGlzLkhhKz1aYyhhKTtLZSh0aGlzKX07SmUucHJvdG90eXBlLnBvcD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuUWEucG9wKCk7dGhpcy5IYS09WmMoYSk7MDx0aGlzLlFhLmxlbmd0aCYmLS10aGlzLkhhfTtcbmZ1bmN0aW9uIEtlKGEpe2lmKDc2ODxhLkhhKXRocm93IEVycm9yKGEubGYrXCJoYXMgYSBrZXkgcGF0aCBsb25nZXIgdGhhbiA3NjggYnl0ZXMgKFwiK2EuSGErXCIpLlwiKTtpZigzMjxhLlFhLmxlbmd0aCl0aHJvdyBFcnJvcihhLmxmK1wicGF0aCBzcGVjaWZpZWQgZXhjZWVkcyB0aGUgbWF4aW11bSBkZXB0aCB0aGF0IGNhbiBiZSB3cml0dGVuICgzMikgb3Igb2JqZWN0IGNvbnRhaW5zIGEgY3ljbGUgXCIrTGUoYSkpO31mdW5jdGlvbiBMZShhKXtyZXR1cm4gMD09YS5RYS5sZW5ndGg/XCJcIjpcImluIHByb3BlcnR5ICdcIithLlFhLmpvaW4oXCIuXCIpK1wiJ1wifTtmdW5jdGlvbiBNZShhLGIpe3RoaXMudmFsdWU9YTt0aGlzLmNoaWxkcmVuPWJ8fE5lfXZhciBOZT1uZXcgYWMoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT09PWI/MDphPGI/LTE6MX0pO2Z1bmN0aW9uIE9lKGEpe3ZhciBiPVBkO3IoYSxmdW5jdGlvbihhLGQpe2I9Yi5zZXQobmV3IEwoZCksYSl9KTtyZXR1cm4gYn1nPU1lLnByb3RvdHlwZTtnLmU9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09PXRoaXMudmFsdWUmJnRoaXMuY2hpbGRyZW4uZSgpfTtmdW5jdGlvbiBQZShhLGIsYyl7aWYobnVsbCE9YS52YWx1ZSYmYyhhLnZhbHVlKSlyZXR1cm57cGF0aDpHLHZhbHVlOmEudmFsdWV9O2lmKGIuZSgpKXJldHVybiBudWxsO3ZhciBkPUUoYik7YT1hLmNoaWxkcmVuLmdldChkKTtyZXR1cm4gbnVsbCE9PWE/KGI9UGUoYSxIKGIpLGMpLG51bGwhPWI/e3BhdGg6KG5ldyBMKGQpKS51KGIucGF0aCksdmFsdWU6Yi52YWx1ZX06bnVsbCk6bnVsbH1cbmZ1bmN0aW9uIFFlKGEsYil7cmV0dXJuIFBlKGEsYixmdW5jdGlvbigpe3JldHVybiEwfSl9Zy5zdWJ0cmVlPWZ1bmN0aW9uKGEpe2lmKGEuZSgpKXJldHVybiB0aGlzO3ZhciBiPXRoaXMuY2hpbGRyZW4uZ2V0KEUoYSkpO3JldHVybiBudWxsIT09Yj9iLnN1YnRyZWUoSChhKSk6UGR9O2cuc2V0PWZ1bmN0aW9uKGEsYil7aWYoYS5lKCkpcmV0dXJuIG5ldyBNZShiLHRoaXMuY2hpbGRyZW4pO3ZhciBjPUUoYSksZD0odGhpcy5jaGlsZHJlbi5nZXQoYyl8fFBkKS5zZXQoSChhKSxiKSxjPXRoaXMuY2hpbGRyZW4uT2EoYyxkKTtyZXR1cm4gbmV3IE1lKHRoaXMudmFsdWUsYyl9O1xuZy5yZW1vdmU9ZnVuY3Rpb24oYSl7aWYoYS5lKCkpcmV0dXJuIHRoaXMuY2hpbGRyZW4uZSgpP1BkOm5ldyBNZShudWxsLHRoaXMuY2hpbGRyZW4pO3ZhciBiPUUoYSksYz10aGlzLmNoaWxkcmVuLmdldChiKTtyZXR1cm4gYz8oYT1jLnJlbW92ZShIKGEpKSxiPWEuZSgpP3RoaXMuY2hpbGRyZW4ucmVtb3ZlKGIpOnRoaXMuY2hpbGRyZW4uT2EoYixhKSxudWxsPT09dGhpcy52YWx1ZSYmYi5lKCk/UGQ6bmV3IE1lKHRoaXMudmFsdWUsYikpOnRoaXN9O2cuZ2V0PWZ1bmN0aW9uKGEpe2lmKGEuZSgpKXJldHVybiB0aGlzLnZhbHVlO3ZhciBiPXRoaXMuY2hpbGRyZW4uZ2V0KEUoYSkpO3JldHVybiBiP2IuZ2V0KEgoYSkpOm51bGx9O1xuZnVuY3Rpb24gT2QoYSxiLGMpe2lmKGIuZSgpKXJldHVybiBjO3ZhciBkPUUoYik7Yj1PZChhLmNoaWxkcmVuLmdldChkKXx8UGQsSChiKSxjKTtkPWIuZSgpP2EuY2hpbGRyZW4ucmVtb3ZlKGQpOmEuY2hpbGRyZW4uT2EoZCxiKTtyZXR1cm4gbmV3IE1lKGEudmFsdWUsZCl9ZnVuY3Rpb24gUmUoYSxiKXtyZXR1cm4gU2UoYSxHLGIpfWZ1bmN0aW9uIFNlKGEsYixjKXt2YXIgZD17fTthLmNoaWxkcmVuLmlhKGZ1bmN0aW9uKGEsZil7ZFthXT1TZShmLGIudShhKSxjKX0pO3JldHVybiBjKGIsYS52YWx1ZSxkKX1mdW5jdGlvbiBUZShhLGIsYyl7cmV0dXJuIFVlKGEsYixHLGMpfWZ1bmN0aW9uIFVlKGEsYixjLGQpe3ZhciBlPWEudmFsdWU/ZChjLGEudmFsdWUpOiExO2lmKGUpcmV0dXJuIGU7aWYoYi5lKCkpcmV0dXJuIG51bGw7ZT1FKGIpO3JldHVybihhPWEuY2hpbGRyZW4uZ2V0KGUpKT9VZShhLEgoYiksYy51KGUpLGQpOm51bGx9XG5mdW5jdGlvbiBWZShhLGIsYyl7dmFyIGQ9RztpZighYi5lKCkpe3ZhciBlPSEwO2EudmFsdWUmJihlPWMoZCxhLnZhbHVlKSk7ITA9PT1lJiYoZT1FKGIpLChhPWEuY2hpbGRyZW4uZ2V0KGUpKSYmV2UoYSxIKGIpLGQudShlKSxjKSl9fWZ1bmN0aW9uIFdlKGEsYixjLGQpe2lmKGIuZSgpKXJldHVybiBhO2EudmFsdWUmJmQoYyxhLnZhbHVlKTt2YXIgZT1FKGIpO3JldHVybihhPWEuY2hpbGRyZW4uZ2V0KGUpKT9XZShhLEgoYiksYy51KGUpLGQpOlBkfWZ1bmN0aW9uIE1kKGEsYil7WGUoYSxHLGIpfWZ1bmN0aW9uIFhlKGEsYixjKXthLmNoaWxkcmVuLmlhKGZ1bmN0aW9uKGEsZSl7WGUoZSxiLnUoYSksYyl9KTthLnZhbHVlJiZjKGIsYS52YWx1ZSl9ZnVuY3Rpb24gWWUoYSxiKXthLmNoaWxkcmVuLmlhKGZ1bmN0aW9uKGEsZCl7ZC52YWx1ZSYmYihhLGQudmFsdWUpfSl9dmFyIFBkPW5ldyBNZShudWxsKTtcbk1lLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBhPXt9O01kKHRoaXMsZnVuY3Rpb24oYixjKXthW2IudG9TdHJpbmcoKV09Yy50b1N0cmluZygpfSk7cmV0dXJuIEIoYSl9O2Z1bmN0aW9uIFplKGEsYixjKXt0aGlzLnR5cGU9RWQ7dGhpcy5zb3VyY2U9JGU7dGhpcy5wYXRoPWE7dGhpcy5RYj1iO3RoaXMuVmQ9Y31aZS5wcm90b3R5cGUuWGM9ZnVuY3Rpb24oYSl7aWYodGhpcy5wYXRoLmUoKSl7aWYobnVsbCE9dGhpcy5RYi52YWx1ZSlyZXR1cm4gSyh0aGlzLlFiLmNoaWxkcmVuLmUoKSxcImFmZmVjdGVkVHJlZSBzaG91bGQgbm90IGhhdmUgb3ZlcmxhcHBpbmcgYWZmZWN0ZWQgcGF0aHMuXCIpLHRoaXM7YT10aGlzLlFiLnN1YnRyZWUobmV3IEwoYSkpO3JldHVybiBuZXcgWmUoRyxhLHRoaXMuVmQpfUsoRSh0aGlzLnBhdGgpPT09YSxcIm9wZXJhdGlvbkZvckNoaWxkIGNhbGxlZCBmb3IgdW5yZWxhdGVkIGNoaWxkLlwiKTtyZXR1cm4gbmV3IFplKEgodGhpcy5wYXRoKSx0aGlzLlFiLHRoaXMuVmQpfTtcblplLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiT3BlcmF0aW9uKFwiK3RoaXMucGF0aCtcIjogXCIrdGhpcy5zb3VyY2UudG9TdHJpbmcoKStcIiBhY2sgd3JpdGUgcmV2ZXJ0PVwiK3RoaXMuVmQrXCIgYWZmZWN0ZWRUcmVlPVwiK3RoaXMuUWIrXCIpXCJ9O3ZhciBZYj0wLEJkPTEsRWQ9MiwkYj0zO2Z1bmN0aW9uIGFmKGEsYixjLGQpe3RoaXMud2U9YTt0aGlzLnBmPWI7dGhpcy5IYj1jO3RoaXMuYWY9ZDtLKCFkfHxiLFwiVGFnZ2VkIHF1ZXJpZXMgbXVzdCBiZSBmcm9tIHNlcnZlci5cIil9dmFyICRlPW5ldyBhZighMCwhMSxudWxsLCExKSxiZj1uZXcgYWYoITEsITAsbnVsbCwhMSk7YWYucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMud2U/XCJ1c2VyXCI6dGhpcy5hZj9cInNlcnZlcihxdWVyeUlEPVwiK3RoaXMuSGIrXCIpXCI6XCJzZXJ2ZXJcIn07ZnVuY3Rpb24gY2YoYSl7dGhpcy5YPWF9dmFyIGRmPW5ldyBjZihuZXcgTWUobnVsbCkpO2Z1bmN0aW9uIGVmKGEsYixjKXtpZihiLmUoKSlyZXR1cm4gbmV3IGNmKG5ldyBNZShjKSk7dmFyIGQ9UWUoYS5YLGIpO2lmKG51bGwhPWQpe3ZhciBlPWQucGF0aCxkPWQudmFsdWU7Yj1UKGUsYik7ZD1kLkcoYixjKTtyZXR1cm4gbmV3IGNmKGEuWC5zZXQoZSxkKSl9YT1PZChhLlgsYixuZXcgTWUoYykpO3JldHVybiBuZXcgY2YoYSl9ZnVuY3Rpb24gZmYoYSxiLGMpe3ZhciBkPWE7aWIoYyxmdW5jdGlvbihhLGMpe2Q9ZWYoZCxiLnUoYSksYyl9KTtyZXR1cm4gZH1jZi5wcm90b3R5cGUuUmQ9ZnVuY3Rpb24oYSl7aWYoYS5lKCkpcmV0dXJuIGRmO2E9T2QodGhpcy5YLGEsUGQpO3JldHVybiBuZXcgY2YoYSl9O2Z1bmN0aW9uIGdmKGEsYil7dmFyIGM9UWUoYS5YLGIpO3JldHVybiBudWxsIT1jP2EuWC5nZXQoYy5wYXRoKS5RKFQoYy5wYXRoLGIpKTpudWxsfVxuZnVuY3Rpb24gaGYoYSl7dmFyIGI9W10sYz1hLlgudmFsdWU7bnVsbCE9Yz9jLksoKXx8Yy5QKE4sZnVuY3Rpb24oYSxjKXtiLnB1c2gobmV3IEYoYSxjKSl9KTphLlguY2hpbGRyZW4uaWEoZnVuY3Rpb24oYSxjKXtudWxsIT1jLnZhbHVlJiZiLnB1c2gobmV3IEYoYSxjLnZhbHVlKSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBqZihhLGIpe2lmKGIuZSgpKXJldHVybiBhO3ZhciBjPWdmKGEsYik7cmV0dXJuIG51bGwhPWM/bmV3IGNmKG5ldyBNZShjKSk6bmV3IGNmKGEuWC5zdWJ0cmVlKGIpKX1jZi5wcm90b3R5cGUuZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLlguZSgpfTtjZi5wcm90b3R5cGUuYXBwbHk9ZnVuY3Rpb24oYSl7cmV0dXJuIGtmKEcsdGhpcy5YLGEpfTtcbmZ1bmN0aW9uIGtmKGEsYixjKXtpZihudWxsIT1iLnZhbHVlKXJldHVybiBjLkcoYSxiLnZhbHVlKTt2YXIgZD1udWxsO2IuY2hpbGRyZW4uaWEoZnVuY3Rpb24oYixmKXtcIi5wcmlvcml0eVwiPT09Yj8oSyhudWxsIT09Zi52YWx1ZSxcIlByaW9yaXR5IHdyaXRlcyBtdXN0IGFsd2F5cyBiZSBsZWFmIG5vZGVzXCIpLGQ9Zi52YWx1ZSk6Yz1rZihhLnUoYiksZixjKX0pO2MuUShhKS5lKCl8fG51bGw9PT1kfHwoYz1jLkcoYS51KFwiLnByaW9yaXR5XCIpLGQpKTtyZXR1cm4gY307ZnVuY3Rpb24gbGYoKXt0aGlzLlQ9ZGY7dGhpcy5uYT1bXTt0aGlzLk1jPS0xfWZ1bmN0aW9uIG1mKGEsYil7Zm9yKHZhciBjPTA7YzxhLm5hLmxlbmd0aDtjKyspe3ZhciBkPWEubmFbY107aWYoZC5rZD09PWIpcmV0dXJuIGR9cmV0dXJuIG51bGx9Zz1sZi5wcm90b3R5cGU7XG5nLlJkPWZ1bmN0aW9uKGEpe3ZhciBiPVVhKHRoaXMubmEsZnVuY3Rpb24oYil7cmV0dXJuIGIua2Q9PT1hfSk7SygwPD1iLFwicmVtb3ZlV3JpdGUgY2FsbGVkIHdpdGggbm9uZXhpc3RlbnQgd3JpdGVJZC5cIik7dmFyIGM9dGhpcy5uYVtiXTt0aGlzLm5hLnNwbGljZShiLDEpO2Zvcih2YXIgZD1jLnZpc2libGUsZT0hMSxmPXRoaXMubmEubGVuZ3RoLTE7ZCYmMDw9Zjspe3ZhciBoPXRoaXMubmFbZl07aC52aXNpYmxlJiYoZj49YiYmbmYoaCxjLnBhdGgpP2Q9ITE6Yy5wYXRoLmNvbnRhaW5zKGgucGF0aCkmJihlPSEwKSk7Zi0tfWlmKGQpe2lmKGUpdGhpcy5UPW9mKHRoaXMubmEscGYsRyksdGhpcy5NYz0wPHRoaXMubmEubGVuZ3RoP3RoaXMubmFbdGhpcy5uYS5sZW5ndGgtMV0ua2Q6LTE7ZWxzZSBpZihjLkdhKXRoaXMuVD10aGlzLlQuUmQoYy5wYXRoKTtlbHNle3ZhciBrPXRoaXM7cihjLmNoaWxkcmVuLGZ1bmN0aW9uKGEsYil7ay5UPWsuVC5SZChjLnBhdGgudShiKSl9KX1yZXR1cm4hMH1yZXR1cm4hMX07XG5nLnphPWZ1bmN0aW9uKGEsYixjLGQpe2lmKGN8fGQpe3ZhciBlPWpmKHRoaXMuVCxhKTtyZXR1cm4hZCYmZS5lKCk/YjpkfHxudWxsIT1ifHxudWxsIT1nZihlLEcpPyhlPW9mKHRoaXMubmEsZnVuY3Rpb24oYil7cmV0dXJuKGIudmlzaWJsZXx8ZCkmJighY3x8ISgwPD1OYShjLGIua2QpKSkmJihiLnBhdGguY29udGFpbnMoYSl8fGEuY29udGFpbnMoYi5wYXRoKSl9LGEpLGI9Ynx8QyxlLmFwcGx5KGIpKTpudWxsfWU9Z2YodGhpcy5ULGEpO2lmKG51bGwhPWUpcmV0dXJuIGU7ZT1qZih0aGlzLlQsYSk7cmV0dXJuIGUuZSgpP2I6bnVsbCE9Ynx8bnVsbCE9Z2YoZSxHKT8oYj1ifHxDLGUuYXBwbHkoYikpOm51bGx9O1xuZy55Yz1mdW5jdGlvbihhLGIpe3ZhciBjPUMsZD1nZih0aGlzLlQsYSk7aWYoZClkLksoKXx8ZC5QKE4sZnVuY3Rpb24oYSxiKXtjPWMuVShhLGIpfSk7ZWxzZSBpZihiKXt2YXIgZT1qZih0aGlzLlQsYSk7Yi5QKE4sZnVuY3Rpb24oYSxiKXt2YXIgZD1qZihlLG5ldyBMKGEpKS5hcHBseShiKTtjPWMuVShhLGQpfSk7T2EoaGYoZSksZnVuY3Rpb24oYSl7Yz1jLlUoYS5uYW1lLGEuUyl9KX1lbHNlIGU9amYodGhpcy5ULGEpLE9hKGhmKGUpLGZ1bmN0aW9uKGEpe2M9Yy5VKGEubmFtZSxhLlMpfSk7cmV0dXJuIGN9O2cubGQ9ZnVuY3Rpb24oYSxiLGMsZCl7SyhjfHxkLFwiRWl0aGVyIGV4aXN0aW5nRXZlbnRTbmFwIG9yIGV4aXN0aW5nU2VydmVyU25hcCBtdXN0IGV4aXN0XCIpO2E9YS51KGIpO2lmKG51bGwhPWdmKHRoaXMuVCxhKSlyZXR1cm4gbnVsbDthPWpmKHRoaXMuVCxhKTtyZXR1cm4gYS5lKCk/ZC5RKGIpOmEuYXBwbHkoZC5RKGIpKX07XG5nLnhjPWZ1bmN0aW9uKGEsYixjKXthPWEudShiKTt2YXIgZD1nZih0aGlzLlQsYSk7cmV0dXJuIG51bGwhPWQ/ZDpzYihjLGIpP2pmKHRoaXMuVCxhKS5hcHBseShjLmooKS5SKGIpKTpudWxsfTtnLnRjPWZ1bmN0aW9uKGEpe3JldHVybiBnZih0aGlzLlQsYSl9O2cubmU9ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3ZhciBoO2E9amYodGhpcy5ULGEpO2g9Z2YoYSxHKTtpZihudWxsPT1oKWlmKG51bGwhPWIpaD1hLmFwcGx5KGIpO2Vsc2UgcmV0dXJuW107aD1oLmxiKGYpO2lmKGguZSgpfHxoLksoKSlyZXR1cm5bXTtiPVtdO2E9dGQoZik7ZT1lP2guJGIoYyxmKTpoLlliKGMsZik7Zm9yKGY9SihlKTtmJiZiLmxlbmd0aDxkOykwIT09YShmLGMpJiZiLnB1c2goZiksZj1KKGUpO3JldHVybiBifTtcbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuIGEuR2E/YS5wYXRoLmNvbnRhaW5zKGIpOiEhdWEoYS5jaGlsZHJlbixmdW5jdGlvbihjLGQpe3JldHVybiBhLnBhdGgudShkKS5jb250YWlucyhiKX0pfWZ1bmN0aW9uIHBmKGEpe3JldHVybiBhLnZpc2libGV9XG5mdW5jdGlvbiBvZihhLGIsYyl7Zm9yKHZhciBkPWRmLGU9MDtlPGEubGVuZ3RoOysrZSl7dmFyIGY9YVtlXTtpZihiKGYpKXt2YXIgaD1mLnBhdGg7aWYoZi5HYSljLmNvbnRhaW5zKGgpPyhoPVQoYyxoKSxkPWVmKGQsaCxmLkdhKSk6aC5jb250YWlucyhjKSYmKGg9VChoLGMpLGQ9ZWYoZCxHLGYuR2EuUShoKSkpO2Vsc2UgaWYoZi5jaGlsZHJlbilpZihjLmNvbnRhaW5zKGgpKWg9VChjLGgpLGQ9ZmYoZCxoLGYuY2hpbGRyZW4pO2Vsc2V7aWYoaC5jb250YWlucyhjKSlpZihoPVQoaCxjKSxoLmUoKSlkPWZmKGQsRyxmLmNoaWxkcmVuKTtlbHNlIGlmKGY9dyhmLmNoaWxkcmVuLEUoaCkpKWY9Zi5RKEgoaCkpLGQ9ZWYoZCxHLGYpfWVsc2UgdGhyb3cgRmMoXCJXcml0ZVJlY29yZCBzaG91bGQgaGF2ZSAuc25hcCBvciAuY2hpbGRyZW5cIik7fX1yZXR1cm4gZH1mdW5jdGlvbiBxZihhLGIpe3RoaXMuTWI9YTt0aGlzLlg9Yn1nPXFmLnByb3RvdHlwZTtcbmcuemE9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB0aGlzLlguemEodGhpcy5NYixhLGIsYyl9O2cueWM9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuWC55Yyh0aGlzLk1iLGEpfTtnLmxkPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdGhpcy5YLmxkKHRoaXMuTWIsYSxiLGMpfTtnLnRjPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLlgudGModGhpcy5NYi51KGEpKX07Zy5uZT1mdW5jdGlvbihhLGIsYyxkLGUpe3JldHVybiB0aGlzLlgubmUodGhpcy5NYixhLGIsYyxkLGUpfTtnLnhjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuWC54Yyh0aGlzLk1iLGEsYil9O2cudT1mdW5jdGlvbihhKXtyZXR1cm4gbmV3IHFmKHRoaXMuTWIudShhKSx0aGlzLlgpfTtmdW5jdGlvbiByZigpe3RoaXMueWE9e319Zz1yZi5wcm90b3R5cGU7Zy5lPWZ1bmN0aW9uKCl7cmV0dXJuIHdhKHRoaXMueWEpfTtnLmFiPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1hLnNvdXJjZS5IYjtpZihudWxsIT09ZClyZXR1cm4gZD13KHRoaXMueWEsZCksSyhudWxsIT1kLFwiU3luY1RyZWUgZ2F2ZSB1cyBhbiBvcCBmb3IgYW4gaW52YWxpZCBxdWVyeS5cIiksZC5hYihhLGIsYyk7dmFyIGU9W107cih0aGlzLnlhLGZ1bmN0aW9uKGQpe2U9ZS5jb25jYXQoZC5hYihhLGIsYykpfSk7cmV0dXJuIGV9O2cuUGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLnZhKCksaD13KHRoaXMueWEsZik7aWYoIWgpe3ZhciBoPWMuemEoZT9kOm51bGwpLGs9ITE7aD9rPSEwOihoPWQgaW5zdGFuY2VvZiBSP2MueWMoZCk6QyxrPSExKTtoPW5ldyB2ZShhLG5ldyBJZChuZXcgdGIoaCxrLCExKSxuZXcgdGIoZCxlLCExKSkpO3RoaXMueWFbZl09aH1oLlBiKGIpO3JldHVybiB5ZShoLGIpfTtcbmcuamI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWEudmEoKSxlPVtdLGY9W10saD1udWxsIT1zZih0aGlzKTtpZihcImRlZmF1bHRcIj09PWQpe3ZhciBrPXRoaXM7cih0aGlzLnlhLGZ1bmN0aW9uKGEsZCl7Zj1mLmNvbmNhdChhLmpiKGIsYykpO2EuZSgpJiYoZGVsZXRlIGsueWFbZF0sUyhhLlcubil8fGUucHVzaChhLlcpKX0pfWVsc2V7dmFyIGw9dyh0aGlzLnlhLGQpO2wmJihmPWYuY29uY2F0KGwuamIoYixjKSksbC5lKCkmJihkZWxldGUgdGhpcy55YVtkXSxTKGwuVy5uKXx8ZS5wdXNoKGwuVykpKX1oJiZudWxsPT1zZih0aGlzKSYmZS5wdXNoKG5ldyBVKGEuayxhLnBhdGgpKTtyZXR1cm57S2c6ZSxtZzpmfX07ZnVuY3Rpb24gdGYoYSl7cmV0dXJuIFBhKHJhKGEueWEpLGZ1bmN0aW9uKGEpe3JldHVybiFTKGEuVy5uKX0pfWcuZmI9ZnVuY3Rpb24oYSl7dmFyIGI9bnVsbDtyKHRoaXMueWEsZnVuY3Rpb24oYyl7Yj1ifHxjLmZiKGEpfSk7cmV0dXJuIGJ9O1xuZnVuY3Rpb24gdWYoYSxiKXtpZihTKGIubikpcmV0dXJuIHNmKGEpO3ZhciBjPWIudmEoKTtyZXR1cm4gdyhhLnlhLGMpfWZ1bmN0aW9uIHNmKGEpe3JldHVybiB2YShhLnlhLGZ1bmN0aW9uKGEpe3JldHVybiBTKGEuVy5uKX0pfHxudWxsfTtmdW5jdGlvbiB2ZihhKXt0aGlzLnRhPVBkO3RoaXMuaWI9bmV3IGxmO3RoaXMuJGU9e307dGhpcy5tYz17fTt0aGlzLk5jPWF9ZnVuY3Rpb24gd2YoYSxiLGMsZCxlKXt2YXIgZj1hLmliLGg9ZTtLKGQ+Zi5NYyxcIlN0YWNraW5nIGFuIG9sZGVyIHdyaXRlIG9uIHRvcCBvZiBuZXdlciBvbmVzXCIpO24oaCl8fChoPSEwKTtmLm5hLnB1c2goe3BhdGg6YixHYTpjLGtkOmQsdmlzaWJsZTpofSk7aCYmKGYuVD1lZihmLlQsYixjKSk7Zi5NYz1kO3JldHVybiBlP3hmKGEsbmV3IFhiKCRlLGIsYykpOltdfWZ1bmN0aW9uIHlmKGEsYixjLGQpe3ZhciBlPWEuaWI7SyhkPmUuTWMsXCJTdGFja2luZyBhbiBvbGRlciBtZXJnZSBvbiB0b3Agb2YgbmV3ZXIgb25lc1wiKTtlLm5hLnB1c2goe3BhdGg6YixjaGlsZHJlbjpjLGtkOmQsdmlzaWJsZTohMH0pO2UuVD1mZihlLlQsYixjKTtlLk1jPWQ7Yz1PZShjKTtyZXR1cm4geGYoYSxuZXcgemUoJGUsYixjKSl9XG5mdW5jdGlvbiB6ZihhLGIsYyl7Yz1jfHwhMTt2YXIgZD1tZihhLmliLGIpO2lmKGEuaWIuUmQoYikpe3ZhciBlPVBkO251bGwhPWQuR2E/ZT1lLnNldChHLCEwKTppYihkLmNoaWxkcmVuLGZ1bmN0aW9uKGEsYil7ZT1lLnNldChuZXcgTChhKSxiKX0pO3JldHVybiB4ZihhLG5ldyBaZShkLnBhdGgsZSxjKSl9cmV0dXJuW119ZnVuY3Rpb24gQWYoYSxiLGMpe2M9T2UoYyk7cmV0dXJuIHhmKGEsbmV3IHplKGJmLGIsYykpfWZ1bmN0aW9uIEJmKGEsYixjLGQpe2Q9Q2YoYSxkKTtpZihudWxsIT1kKXt2YXIgZT1EZihkKTtkPWUucGF0aDtlPWUuSGI7Yj1UKGQsYik7Yz1uZXcgWGIobmV3IGFmKCExLCEwLGUsITApLGIsYyk7cmV0dXJuIEVmKGEsZCxjKX1yZXR1cm5bXX1cbmZ1bmN0aW9uIEZmKGEsYixjLGQpe2lmKGQ9Q2YoYSxkKSl7dmFyIGU9RGYoZCk7ZD1lLnBhdGg7ZT1lLkhiO2I9VChkLGIpO2M9T2UoYyk7Yz1uZXcgemUobmV3IGFmKCExLCEwLGUsITApLGIsYyk7cmV0dXJuIEVmKGEsZCxjKX1yZXR1cm5bXX1cbnZmLnByb3RvdHlwZS5QYj1mdW5jdGlvbihhLGIpe3ZhciBjPWEucGF0aCxkPW51bGwsZT0hMTtWZSh0aGlzLnRhLGMsZnVuY3Rpb24oYSxiKXt2YXIgZj1UKGEsYyk7ZD1iLmZiKGYpO2U9ZXx8bnVsbCE9c2YoYik7cmV0dXJuIWR9KTt2YXIgZj10aGlzLnRhLmdldChjKTtmPyhlPWV8fG51bGwhPXNmKGYpLGQ9ZHx8Zi5mYihHKSk6KGY9bmV3IHJmLHRoaXMudGE9dGhpcy50YS5zZXQoYyxmKSk7dmFyIGg7bnVsbCE9ZD9oPSEwOihoPSExLGQ9QyxZZSh0aGlzLnRhLnN1YnRyZWUoYyksZnVuY3Rpb24oYSxiKXt2YXIgYz1iLmZiKEcpO2MmJihkPWQuVShhLGMpKX0pKTt2YXIgaz1udWxsIT11ZihmLGEpO2lmKCFrJiYhUyhhLm4pKXt2YXIgbD1HZihhKTtLKCEobCBpbiB0aGlzLm1jKSxcIlZpZXcgZG9lcyBub3QgZXhpc3QsIGJ1dCB3ZSBoYXZlIGEgdGFnXCIpO3ZhciBtPUhmKys7dGhpcy5tY1tsXT1tO3RoaXMuJGVbXCJfXCIrbV09bH1oPWYuUGIoYSxiLG5ldyBxZihjLHRoaXMuaWIpLGQsXG5oKTtrfHxlfHwoZj11ZihmLGEpLGg9aC5jb25jYXQoSWYodGhpcyxhLGYpKSk7cmV0dXJuIGh9O1xudmYucHJvdG90eXBlLmpiPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1hLnBhdGgsZT10aGlzLnRhLmdldChkKSxmPVtdO2lmKGUmJihcImRlZmF1bHRcIj09PWEudmEoKXx8bnVsbCE9dWYoZSxhKSkpe2Y9ZS5qYihhLGIsYyk7ZS5lKCkmJih0aGlzLnRhPXRoaXMudGEucmVtb3ZlKGQpKTtlPWYuS2c7Zj1mLm1nO2I9LTEhPT1VYShlLGZ1bmN0aW9uKGEpe3JldHVybiBTKGEubil9KTt2YXIgaD1UZSh0aGlzLnRhLGQsZnVuY3Rpb24oYSxiKXtyZXR1cm4gbnVsbCE9c2YoYil9KTtpZihiJiYhaCYmKGQ9dGhpcy50YS5zdWJ0cmVlKGQpLCFkLmUoKSkpZm9yKHZhciBkPUpmKGQpLGs9MDtrPGQubGVuZ3RoOysrayl7dmFyIGw9ZFtrXSxtPWwuVyxsPUtmKHRoaXMsbCk7dGhpcy5OYy5YZShMZihtKSxNZih0aGlzLG0pLGwueGQsbC5IKX1pZighaCYmMDxlLmxlbmd0aCYmIWMpaWYoYil0aGlzLk5jLmFlKExmKGEpLG51bGwpO2Vsc2V7dmFyIHQ9dGhpcztPYShlLGZ1bmN0aW9uKGEpe2EudmEoKTtcbnZhciBiPXQubWNbR2YoYSldO3QuTmMuYWUoTGYoYSksYil9KX1OZih0aGlzLGUpfXJldHVybiBmfTt2Zi5wcm90b3R5cGUuemE9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmliLGQ9VGUodGhpcy50YSxhLGZ1bmN0aW9uKGIsYyl7dmFyIGQ9VChiLGEpO2lmKGQ9Yy5mYihkKSlyZXR1cm4gZH0pO3JldHVybiBjLnphKGEsZCxiLCEwKX07ZnVuY3Rpb24gSmYoYSl7cmV0dXJuIFJlKGEsZnVuY3Rpb24oYSxjLGQpe2lmKGMmJm51bGwhPXNmKGMpKXJldHVybltzZihjKV07dmFyIGU9W107YyYmKGU9dGYoYykpO3IoZCxmdW5jdGlvbihhKXtlPWUuY29uY2F0KGEpfSk7cmV0dXJuIGV9KX1mdW5jdGlvbiBOZihhLGIpe2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7KytjKXt2YXIgZD1iW2NdO2lmKCFTKGQubikpe3ZhciBkPUdmKGQpLGU9YS5tY1tkXTtkZWxldGUgYS5tY1tkXTtkZWxldGUgYS4kZVtcIl9cIitlXX19fVxuZnVuY3Rpb24gTGYoYSl7cmV0dXJuIFMoYS5uKSYmIWZlKGEubik/YS5JYigpOmF9ZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWIucGF0aCxlPU1mKGEsYik7Yz1LZihhLGMpO2I9YS5OYy5YZShMZihiKSxlLGMueGQsYy5IKTtkPWEudGEuc3VidHJlZShkKTtpZihlKUsobnVsbD09c2YoZC52YWx1ZSksXCJJZiB3ZSdyZSBhZGRpbmcgYSBxdWVyeSwgaXQgc2hvdWxkbid0IGJlIHNoYWRvd2VkXCIpO2Vsc2UgZm9yKGU9UmUoZCxmdW5jdGlvbihhLGIsYyl7aWYoIWEuZSgpJiZiJiZudWxsIT1zZihiKSlyZXR1cm5bd2Uoc2YoYikpXTt2YXIgZD1bXTtiJiYoZD1kLmNvbmNhdChRYSh0ZihiKSxmdW5jdGlvbihhKXtyZXR1cm4gYS5XfSkpKTtyKGMsZnVuY3Rpb24oYSl7ZD1kLmNvbmNhdChhKX0pO3JldHVybiBkfSksZD0wO2Q8ZS5sZW5ndGg7KytkKWM9ZVtkXSxhLk5jLmFlKExmKGMpLE1mKGEsYykpO3JldHVybiBifVxuZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLlcsZD1NZihhLGMpO3JldHVybnt4ZDpmdW5jdGlvbigpe3JldHVybihiLncoKXx8QykuaGFzaCgpfSxIOmZ1bmN0aW9uKGIpe2lmKFwib2tcIj09PWIpe2lmKGQpe3ZhciBmPWMucGF0aDtpZihiPUNmKGEsZCkpe3ZhciBoPURmKGIpO2I9aC5wYXRoO2g9aC5IYjtmPVQoYixmKTtmPW5ldyBaYihuZXcgYWYoITEsITAsaCwhMCksZik7Yj1FZihhLGIsZil9ZWxzZSBiPVtdfWVsc2UgYj14ZihhLG5ldyBaYihiZixjLnBhdGgpKTtyZXR1cm4gYn1mPVwiVW5rbm93biBFcnJvclwiO1widG9vX2JpZ1wiPT09Yj9mPVwiVGhlIGRhdGEgcmVxdWVzdGVkIGV4Y2VlZHMgdGhlIG1heGltdW0gc2l6ZSB0aGF0IGNhbiBiZSBhY2Nlc3NlZCB3aXRoIGEgc2luZ2xlIHJlcXVlc3QuXCI6XCJwZXJtaXNzaW9uX2RlbmllZFwiPT1iP2Y9XCJDbGllbnQgZG9lc24ndCBoYXZlIHBlcm1pc3Npb24gdG8gYWNjZXNzIHRoZSBkZXNpcmVkIGRhdGEuXCI6XCJ1bmF2YWlsYWJsZVwiPT1iJiZcbihmPVwiVGhlIHNlcnZpY2UgaXMgdW5hdmFpbGFibGVcIik7Zj1FcnJvcihiK1wiOiBcIitmKTtmLmNvZGU9Yi50b1VwcGVyQ2FzZSgpO3JldHVybiBhLmpiKGMsbnVsbCxmKX19fWZ1bmN0aW9uIEdmKGEpe3JldHVybiBhLnBhdGgudG9TdHJpbmcoKStcIiRcIithLnZhKCl9ZnVuY3Rpb24gRGYoYSl7dmFyIGI9YS5pbmRleE9mKFwiJFwiKTtLKC0xIT09YiYmYjxhLmxlbmd0aC0xLFwiQmFkIHF1ZXJ5S2V5LlwiKTtyZXR1cm57SGI6YS5zdWJzdHIoYisxKSxwYXRoOm5ldyBMKGEuc3Vic3RyKDAsYikpfX1mdW5jdGlvbiBDZihhLGIpe3ZhciBjPWEuJGUsZD1cIl9cIitiO3JldHVybiBkIGluIGM/Y1tkXTp2b2lkIDB9ZnVuY3Rpb24gTWYoYSxiKXt2YXIgYz1HZihiKTtyZXR1cm4gdyhhLm1jLGMpfXZhciBIZj0xO1xuZnVuY3Rpb24gRWYoYSxiLGMpe3ZhciBkPWEudGEuZ2V0KGIpO0soZCxcIk1pc3Npbmcgc3luYyBwb2ludCBmb3IgcXVlcnkgdGFnIHRoYXQgd2UncmUgdHJhY2tpbmdcIik7cmV0dXJuIGQuYWIoYyxuZXcgcWYoYixhLmliKSxudWxsKX1mdW5jdGlvbiB4ZihhLGIpe3JldHVybiBPZihhLGIsYS50YSxudWxsLG5ldyBxZihHLGEuaWIpKX1mdW5jdGlvbiBPZihhLGIsYyxkLGUpe2lmKGIucGF0aC5lKCkpcmV0dXJuIFBmKGEsYixjLGQsZSk7dmFyIGY9Yy5nZXQoRyk7bnVsbD09ZCYmbnVsbCE9ZiYmKGQ9Zi5mYihHKSk7dmFyIGg9W10saz1FKGIucGF0aCksbD1iLlhjKGspO2lmKChjPWMuY2hpbGRyZW4uZ2V0KGspKSYmbCl2YXIgbT1kP2QuUihrKTpudWxsLGs9ZS51KGspLGg9aC5jb25jYXQoT2YoYSxsLGMsbSxrKSk7ZiYmKGg9aC5jb25jYXQoZi5hYihiLGUsZCkpKTtyZXR1cm4gaH1cbmZ1bmN0aW9uIFBmKGEsYixjLGQsZSl7dmFyIGY9Yy5nZXQoRyk7bnVsbD09ZCYmbnVsbCE9ZiYmKGQ9Zi5mYihHKSk7dmFyIGg9W107Yy5jaGlsZHJlbi5pYShmdW5jdGlvbihjLGYpe3ZhciBtPWQ/ZC5SKGMpOm51bGwsdD1lLnUoYyksej1iLlhjKGMpO3omJihoPWguY29uY2F0KFBmKGEseixmLG0sdCkpKX0pO2YmJihoPWguY29uY2F0KGYuYWIoYixlLGQpKSk7cmV0dXJuIGh9O2Z1bmN0aW9uIFFmKCl7dGhpcy5jaGlsZHJlbj17fTt0aGlzLm5kPTA7dGhpcy52YWx1ZT1udWxsfWZ1bmN0aW9uIFJmKGEsYixjKXt0aGlzLkdkPWE/YTpcIlwiO3RoaXMuWmM9Yj9iOm51bGw7dGhpcy5BPWM/YzpuZXcgUWZ9ZnVuY3Rpb24gU2YoYSxiKXtmb3IodmFyIGM9YiBpbnN0YW5jZW9mIEw/YjpuZXcgTChiKSxkPWEsZTtudWxsIT09KGU9RShjKSk7KWQ9bmV3IFJmKGUsZCx3KGQuQS5jaGlsZHJlbixlKXx8bmV3IFFmKSxjPUgoYyk7cmV0dXJuIGR9Zz1SZi5wcm90b3R5cGU7Zy5DYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLkEudmFsdWV9O2Z1bmN0aW9uIFRmKGEsYil7SyhcInVuZGVmaW5lZFwiIT09dHlwZW9mIGIsXCJDYW5ub3Qgc2V0IHZhbHVlIHRvIHVuZGVmaW5lZFwiKTthLkEudmFsdWU9YjtVZihhKX1nLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5BLnZhbHVlPW51bGw7dGhpcy5BLmNoaWxkcmVuPXt9O3RoaXMuQS5uZD0wO1VmKHRoaXMpfTtcbmcud2Q9ZnVuY3Rpb24oKXtyZXR1cm4gMDx0aGlzLkEubmR9O2cuZT1mdW5jdGlvbigpe3JldHVybiBudWxsPT09dGhpcy5DYSgpJiYhdGhpcy53ZCgpfTtnLlA9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyKHRoaXMuQS5jaGlsZHJlbixmdW5jdGlvbihjLGQpe2EobmV3IFJmKGQsYixjKSl9KX07ZnVuY3Rpb24gVmYoYSxiLGMsZCl7YyYmIWQmJmIoYSk7YS5QKGZ1bmN0aW9uKGEpe1ZmKGEsYiwhMCxkKX0pO2MmJmQmJmIoYSl9ZnVuY3Rpb24gV2YoYSxiKXtmb3IodmFyIGM9YS5wYXJlbnQoKTtudWxsIT09YyYmIWIoYyk7KWM9Yy5wYXJlbnQoKX1nLnBhdGg9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEwobnVsbD09PXRoaXMuWmM/dGhpcy5HZDp0aGlzLlpjLnBhdGgoKStcIi9cIit0aGlzLkdkKX07Zy5uYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuR2R9O2cucGFyZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuWmN9O1xuZnVuY3Rpb24gVWYoYSl7aWYobnVsbCE9PWEuWmMpe3ZhciBiPWEuWmMsYz1hLkdkLGQ9YS5lKCksZT12KGIuQS5jaGlsZHJlbixjKTtkJiZlPyhkZWxldGUgYi5BLmNoaWxkcmVuW2NdLGIuQS5uZC0tLFVmKGIpKTpkfHxlfHwoYi5BLmNoaWxkcmVuW2NdPWEuQSxiLkEubmQrKyxVZihiKSl9fTt2YXIgWGY9L1tcXFtcXF0uIyRcXC9cXHUwMDAwLVxcdTAwMUZcXHUwMDdGXS8sWWY9L1tcXFtcXF0uIyRcXHUwMDAwLVxcdTAwMUZcXHUwMDdGXS8sWmY9L15bYS16QS1aXVthLXpBLVouX1xcLStdKyQvO2Z1bmN0aW9uICRmKGEpe3JldHVybiBwKGEpJiYwIT09YS5sZW5ndGgmJiFYZi50ZXN0KGEpfWZ1bmN0aW9uIGFnKGEpe3JldHVybiBudWxsPT09YXx8cChhKXx8Z2EoYSkmJiFRYyhhKXx8aWEoYSkmJnYoYSxcIi5zdlwiKX1mdW5jdGlvbiBiZyhhLGIsYyxkKXtkJiYhbihiKXx8Y2coeShhLDEsZCksYixjKX1cbmZ1bmN0aW9uIGNnKGEsYixjKXtjIGluc3RhbmNlb2YgTCYmKGM9bmV3IEplKGMsYSkpO2lmKCFuKGIpKXRocm93IEVycm9yKGErXCJjb250YWlucyB1bmRlZmluZWQgXCIrTGUoYykpO2lmKGhhKGIpKXRocm93IEVycm9yKGErXCJjb250YWlucyBhIGZ1bmN0aW9uIFwiK0xlKGMpK1wiIHdpdGggY29udGVudHM6IFwiK2IudG9TdHJpbmcoKSk7aWYoUWMoYikpdGhyb3cgRXJyb3IoYStcImNvbnRhaW5zIFwiK2IudG9TdHJpbmcoKStcIiBcIitMZShjKSk7aWYocChiKSYmYi5sZW5ndGg+MTA0ODU3NjAvMyYmMTA0ODU3NjA8WmMoYikpdGhyb3cgRXJyb3IoYStcImNvbnRhaW5zIGEgc3RyaW5nIGdyZWF0ZXIgdGhhbiAxMDQ4NTc2MCB1dGY4IGJ5dGVzIFwiK0xlKGMpK1wiICgnXCIrYi5zdWJzdHJpbmcoMCw1MCkrXCIuLi4nKVwiKTtpZihpYShiKSl7dmFyIGQ9ITEsZT0hMTtpYihiLGZ1bmN0aW9uKGIsaCl7aWYoXCIudmFsdWVcIj09PWIpZD0hMDtlbHNlIGlmKFwiLnByaW9yaXR5XCIhPT1iJiZcIi5zdlwiIT09YiYmKGU9XG4hMCwhJGYoYikpKXRocm93IEVycm9yKGErXCIgY29udGFpbnMgYW4gaW52YWxpZCBrZXkgKFwiK2IrXCIpIFwiK0xlKGMpKycuICBLZXlzIG11c3QgYmUgbm9uLWVtcHR5IHN0cmluZ3MgYW5kIGNhblxcJ3QgY29udGFpbiBcIi5cIiwgXCIjXCIsIFwiJFwiLCBcIi9cIiwgXCJbXCIsIG9yIFwiXVwiJyk7Yy5wdXNoKGIpO2NnKGEsaCxjKTtjLnBvcCgpfSk7aWYoZCYmZSl0aHJvdyBFcnJvcihhKycgY29udGFpbnMgXCIudmFsdWVcIiBjaGlsZCAnK0xlKGMpK1wiIGluIGFkZGl0aW9uIHRvIGFjdHVhbCBjaGlsZHJlbi5cIik7fX1cbmZ1bmN0aW9uIGRnKGEsYil7dmFyIGMsZDtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKXtkPWJbY107Zm9yKHZhciBlPWQuc2xpY2UoKSxmPTA7ZjxlLmxlbmd0aDtmKyspaWYoKFwiLnByaW9yaXR5XCIhPT1lW2ZdfHxmIT09ZS5sZW5ndGgtMSkmJiEkZihlW2ZdKSl0aHJvdyBFcnJvcihhK1wiY29udGFpbnMgYW4gaW52YWxpZCBrZXkgKFwiK2VbZl0rXCIpIGluIHBhdGggXCIrZC50b1N0cmluZygpKycuIEtleXMgbXVzdCBiZSBub24tZW1wdHkgc3RyaW5ncyBhbmQgY2FuXFwndCBjb250YWluIFwiLlwiLCBcIiNcIiwgXCIkXCIsIFwiL1wiLCBcIltcIiwgb3IgXCJdXCInKTt9Yi5zb3J0KEllKTtlPW51bGw7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKyl7ZD1iW2NdO2lmKG51bGwhPT1lJiZlLmNvbnRhaW5zKGQpKXRocm93IEVycm9yKGErXCJjb250YWlucyBhIHBhdGggXCIrZS50b1N0cmluZygpK1wiIHRoYXQgaXMgYW5jZXN0b3Igb2YgYW5vdGhlciBwYXRoIFwiK2QudG9TdHJpbmcoKSk7ZT1kfX1cbmZ1bmN0aW9uIGVnKGEsYixjKXt2YXIgZD15KGEsMSwhMSk7aWYoIWlhKGIpfHxlYShiKSl0aHJvdyBFcnJvcihkK1wiIG11c3QgYmUgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGNoaWxkcmVuIHRvIHJlcGxhY2UuXCIpO3ZhciBlPVtdO2liKGIsZnVuY3Rpb24oYSxiKXt2YXIgaz1uZXcgTChhKTtjZyhkLGIsYy51KGspKTtpZihcIi5wcmlvcml0eVwiPT09TGQoaykmJiFhZyhiKSl0aHJvdyBFcnJvcihkK1wiY29udGFpbnMgYW4gaW52YWxpZCB2YWx1ZSBmb3IgJ1wiK2sudG9TdHJpbmcoKStcIicsIHdoaWNoIG11c3QgYmUgYSB2YWxpZCBGaXJlYmFzZSBwcmlvcml0eSAoYSBzdHJpbmcsIGZpbml0ZSBudW1iZXIsIHNlcnZlciB2YWx1ZSwgb3IgbnVsbCkuXCIpO2UucHVzaChrKX0pO2RnKGQsZSl9XG5mdW5jdGlvbiBmZyhhLGIsYyl7aWYoUWMoYykpdGhyb3cgRXJyb3IoeShhLGIsITEpK1wiaXMgXCIrYy50b1N0cmluZygpK1wiLCBidXQgbXVzdCBiZSBhIHZhbGlkIEZpcmViYXNlIHByaW9yaXR5IChhIHN0cmluZywgZmluaXRlIG51bWJlciwgc2VydmVyIHZhbHVlLCBvciBudWxsKS5cIik7aWYoIWFnKGMpKXRocm93IEVycm9yKHkoYSxiLCExKStcIm11c3QgYmUgYSB2YWxpZCBGaXJlYmFzZSBwcmlvcml0eSAoYSBzdHJpbmcsIGZpbml0ZSBudW1iZXIsIHNlcnZlciB2YWx1ZSwgb3IgbnVsbCkuXCIpO31cbmZ1bmN0aW9uIGdnKGEsYixjKXtpZighY3x8bihiKSlzd2l0Y2goYil7Y2FzZSBcInZhbHVlXCI6Y2FzZSBcImNoaWxkX2FkZGVkXCI6Y2FzZSBcImNoaWxkX3JlbW92ZWRcIjpjYXNlIFwiY2hpbGRfY2hhbmdlZFwiOmNhc2UgXCJjaGlsZF9tb3ZlZFwiOmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeShhLDEsYykrJ211c3QgYmUgYSB2YWxpZCBldmVudCB0eXBlOiBcInZhbHVlXCIsIFwiY2hpbGRfYWRkZWRcIiwgXCJjaGlsZF9yZW1vdmVkXCIsIFwiY2hpbGRfY2hhbmdlZFwiLCBvciBcImNoaWxkX21vdmVkXCIuJyk7fX1mdW5jdGlvbiBoZyhhLGIpe2lmKG4oYikmJiEkZihiKSl0aHJvdyBFcnJvcih5KGEsMiwhMCkrJ3dhcyBhbiBpbnZhbGlkIGtleTogXCInK2IrJ1wiLiAgRmlyZWJhc2Uga2V5cyBtdXN0IGJlIG5vbi1lbXB0eSBzdHJpbmdzIGFuZCBjYW5cXCd0IGNvbnRhaW4gXCIuXCIsIFwiI1wiLCBcIiRcIiwgXCIvXCIsIFwiW1wiLCBvciBcIl1cIikuJyk7fVxuZnVuY3Rpb24gaWcoYSxiKXtpZighcChiKXx8MD09PWIubGVuZ3RofHxZZi50ZXN0KGIpKXRocm93IEVycm9yKHkoYSwxLCExKSsnd2FzIGFuIGludmFsaWQgcGF0aDogXCInK2IrJ1wiLiBQYXRocyBtdXN0IGJlIG5vbi1lbXB0eSBzdHJpbmdzIGFuZCBjYW5cXCd0IGNvbnRhaW4gXCIuXCIsIFwiI1wiLCBcIiRcIiwgXCJbXCIsIG9yIFwiXVwiJyk7fWZ1bmN0aW9uIGpnKGEsYil7aWYoXCIuaW5mb1wiPT09RShiKSl0aHJvdyBFcnJvcihhK1wiIGZhaWxlZDogQ2FuJ3QgbW9kaWZ5IGRhdGEgdW5kZXIgLy5pbmZvL1wiKTt9ZnVuY3Rpb24ga2coYSxiKXtpZighcChiKSl0aHJvdyBFcnJvcih5KGEsMSwhMSkrXCJtdXN0IGJlIGEgdmFsaWQgY3JlZGVudGlhbCAoYSBzdHJpbmcpLlwiKTt9ZnVuY3Rpb24gbGcoYSxiLGMpe2lmKCFwKGMpKXRocm93IEVycm9yKHkoYSxiLCExKStcIm11c3QgYmUgYSB2YWxpZCBzdHJpbmcuXCIpO31cbmZ1bmN0aW9uIG1nKGEsYil7bGcoYSwxLGIpO2lmKCFaZi50ZXN0KGIpKXRocm93IEVycm9yKHkoYSwxLCExKStcIidcIitiK1wiJyBpcyBub3QgYSB2YWxpZCBhdXRoZW50aWNhdGlvbiBwcm92aWRlci5cIik7fWZ1bmN0aW9uIG5nKGEsYixjLGQpe2lmKCFkfHxuKGMpKWlmKCFpYShjKXx8bnVsbD09PWMpdGhyb3cgRXJyb3IoeShhLGIsZCkrXCJtdXN0IGJlIGEgdmFsaWQgb2JqZWN0LlwiKTt9ZnVuY3Rpb24gb2coYSxiLGMpe2lmKCFpYShiKXx8IXYoYixjKSl0aHJvdyBFcnJvcih5KGEsMSwhMSkrJ211c3QgY29udGFpbiB0aGUga2V5IFwiJytjKydcIicpO2lmKCFwKHcoYixjKSkpdGhyb3cgRXJyb3IoeShhLDEsITEpKydtdXN0IGNvbnRhaW4gdGhlIGtleSBcIicrYysnXCIgd2l0aCB0eXBlIFwic3RyaW5nXCInKTt9O2Z1bmN0aW9uIHBnKCl7dGhpcy5zZXQ9e319Zz1wZy5wcm90b3R5cGU7Zy5hZGQ9ZnVuY3Rpb24oYSxiKXt0aGlzLnNldFthXT1udWxsIT09Yj9iOiEwfTtnLmNvbnRhaW5zPWZ1bmN0aW9uKGEpe3JldHVybiB2KHRoaXMuc2V0LGEpfTtnLmdldD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5jb250YWlucyhhKT90aGlzLnNldFthXTp2b2lkIDB9O2cucmVtb3ZlPWZ1bmN0aW9uKGEpe2RlbGV0ZSB0aGlzLnNldFthXX07Zy5jbGVhcj1mdW5jdGlvbigpe3RoaXMuc2V0PXt9fTtnLmU9ZnVuY3Rpb24oKXtyZXR1cm4gd2EodGhpcy5zZXQpfTtnLmNvdW50PWZ1bmN0aW9uKCl7cmV0dXJuIHBhKHRoaXMuc2V0KX07ZnVuY3Rpb24gcWcoYSxiKXtyKGEuc2V0LGZ1bmN0aW9uKGEsZCl7YihkLGEpfSl9Zy5rZXlzPWZ1bmN0aW9uKCl7dmFyIGE9W107cih0aGlzLnNldCxmdW5jdGlvbihiLGMpe2EucHVzaChjKX0pO3JldHVybiBhfTtmdW5jdGlvbiBxYygpe3RoaXMubT10aGlzLkI9bnVsbH1xYy5wcm90b3R5cGUuZmluZD1mdW5jdGlvbihhKXtpZihudWxsIT10aGlzLkIpcmV0dXJuIHRoaXMuQi5RKGEpO2lmKGEuZSgpfHxudWxsPT10aGlzLm0pcmV0dXJuIG51bGw7dmFyIGI9RShhKTthPUgoYSk7cmV0dXJuIHRoaXMubS5jb250YWlucyhiKT90aGlzLm0uZ2V0KGIpLmZpbmQoYSk6bnVsbH07cWMucHJvdG90eXBlLm5jPWZ1bmN0aW9uKGEsYil7aWYoYS5lKCkpdGhpcy5CPWIsdGhpcy5tPW51bGw7ZWxzZSBpZihudWxsIT09dGhpcy5CKXRoaXMuQj10aGlzLkIuRyhhLGIpO2Vsc2V7bnVsbD09dGhpcy5tJiYodGhpcy5tPW5ldyBwZyk7dmFyIGM9RShhKTt0aGlzLm0uY29udGFpbnMoYyl8fHRoaXMubS5hZGQoYyxuZXcgcWMpO2M9dGhpcy5tLmdldChjKTthPUgoYSk7Yy5uYyhhLGIpfX07XG5mdW5jdGlvbiByZyhhLGIpe2lmKGIuZSgpKXJldHVybiBhLkI9bnVsbCxhLm09bnVsbCwhMDtpZihudWxsIT09YS5CKXtpZihhLkIuSygpKXJldHVybiExO3ZhciBjPWEuQjthLkI9bnVsbDtjLlAoTixmdW5jdGlvbihiLGMpe2EubmMobmV3IEwoYiksYyl9KTtyZXR1cm4gcmcoYSxiKX1yZXR1cm4gbnVsbCE9PWEubT8oYz1FKGIpLGI9SChiKSxhLm0uY29udGFpbnMoYykmJnJnKGEubS5nZXQoYyksYikmJmEubS5yZW1vdmUoYyksYS5tLmUoKT8oYS5tPW51bGwsITApOiExKTohMH1mdW5jdGlvbiByYyhhLGIsYyl7bnVsbCE9PWEuQj9jKGIsYS5CKTphLlAoZnVuY3Rpb24oYSxlKXt2YXIgZj1uZXcgTChiLnRvU3RyaW5nKCkrXCIvXCIrYSk7cmMoZSxmLGMpfSl9cWMucHJvdG90eXBlLlA9ZnVuY3Rpb24oYSl7bnVsbCE9PXRoaXMubSYmcWcodGhpcy5tLGZ1bmN0aW9uKGIsYyl7YShiLGMpfSl9O3ZhciBzZz1cImF1dGguZmlyZWJhc2UuY29tXCI7ZnVuY3Rpb24gdGcoYSxiLGMpe3RoaXMub2Q9YXx8e307dGhpcy5lZT1ifHx7fTt0aGlzLiRhPWN8fHt9O3RoaXMub2QucmVtZW1iZXJ8fCh0aGlzLm9kLnJlbWVtYmVyPVwiZGVmYXVsdFwiKX12YXIgdWc9W1wicmVtZW1iZXJcIixcInJlZGlyZWN0VG9cIl07ZnVuY3Rpb24gdmcoYSl7dmFyIGI9e30sYz17fTtpYihhfHx7fSxmdW5jdGlvbihhLGUpezA8PU5hKHVnLGEpP2JbYV09ZTpjW2FdPWV9KTtyZXR1cm4gbmV3IHRnKGIse30sYyl9O2Z1bmN0aW9uIHdnKGEsYil7dGhpcy5RZT1bXCJzZXNzaW9uXCIsYS5PZCxhLmhjXS5qb2luKFwiOlwiKTt0aGlzLmJlPWJ9d2cucHJvdG90eXBlLnNldD1mdW5jdGlvbihhLGIpe2lmKCFiKWlmKHRoaXMuYmUubGVuZ3RoKWI9dGhpcy5iZVswXTtlbHNlIHRocm93IEVycm9yKFwiZmIubG9naW4uU2Vzc2lvbk1hbmFnZXIgOiBObyBzdG9yYWdlIG9wdGlvbnMgYXZhaWxhYmxlIVwiKTtiLnNldCh0aGlzLlFlLGEpfTt3Zy5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKCl7dmFyIGE9UWEodGhpcy5iZSxxKHRoaXMucWcsdGhpcykpLGE9UGEoYSxmdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9PWF9KTtYYShhLGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGFkKGMudG9rZW4pLWFkKGEudG9rZW4pfSk7cmV0dXJuIDA8YS5sZW5ndGg/YS5zaGlmdCgpOm51bGx9O3dnLnByb3RvdHlwZS5xZz1mdW5jdGlvbihhKXt0cnl7dmFyIGI9YS5nZXQodGhpcy5RZSk7aWYoYiYmYi50b2tlbilyZXR1cm4gYn1jYXRjaChjKXt9cmV0dXJuIG51bGx9O1xud2cucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztPYSh0aGlzLmJlLGZ1bmN0aW9uKGIpe2IucmVtb3ZlKGEuUWUpfSl9O2Z1bmN0aW9uIHhnKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBuYXZpZ2F0b3ImJlwic3RyaW5nXCI9PT10eXBlb2YgbmF2aWdhdG9yLnVzZXJBZ2VudD9uYXZpZ2F0b3IudXNlckFnZW50OlwiXCJ9ZnVuY3Rpb24geWcoKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdyYmISEod2luZG93LmNvcmRvdmF8fHdpbmRvdy5waG9uZWdhcHx8d2luZG93LlBob25lR2FwKSYmL2lvc3xpcGhvbmV8aXBvZHxpcGFkfGFuZHJvaWR8YmxhY2tiZXJyeXxpZW1vYmlsZS9pLnRlc3QoeGcoKSl9ZnVuY3Rpb24gemcoKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIGxvY2F0aW9uJiYvXmZpbGU6XFwvLy50ZXN0KGxvY2F0aW9uLmhyZWYpfVxuZnVuY3Rpb24gQWcoYSl7dmFyIGI9eGcoKTtpZihcIlwiPT09YilyZXR1cm4hMTtpZihcIk1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlclwiPT09bmF2aWdhdG9yLmFwcE5hbWUpe2lmKChiPWIubWF0Y2goL01TSUUgKFswLTldezEsfVtcXC4wLTldezAsfSkvKSkmJjE8Yi5sZW5ndGgpcmV0dXJuIHBhcnNlRmxvYXQoYlsxXSk+PWF9ZWxzZSBpZigtMTxiLmluZGV4T2YoXCJUcmlkZW50XCIpJiYoYj1iLm1hdGNoKC9ydjooWzAtOV17MiwyfVtcXC4wLTldezAsfSkvKSkmJjE8Yi5sZW5ndGgpcmV0dXJuIHBhcnNlRmxvYXQoYlsxXSk+PWE7cmV0dXJuITF9O2Z1bmN0aW9uIEJnKCl7dmFyIGE9d2luZG93Lm9wZW5lci5mcmFtZXMsYjtmb3IoYj1hLmxlbmd0aC0xOzA8PWI7Yi0tKXRyeXtpZihhW2JdLmxvY2F0aW9uLnByb3RvY29sPT09d2luZG93LmxvY2F0aW9uLnByb3RvY29sJiZhW2JdLmxvY2F0aW9uLmhvc3Q9PT13aW5kb3cubG9jYXRpb24uaG9zdCYmXCJfX3dpbmNoYW5fcmVsYXlfZnJhbWVcIj09PWFbYl0ubmFtZSlyZXR1cm4gYVtiXX1jYXRjaChjKXt9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2coYSxiLGMpe2EuYXR0YWNoRXZlbnQ/YS5hdHRhY2hFdmVudChcIm9uXCIrYixjKTphLmFkZEV2ZW50TGlzdGVuZXImJmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfWZ1bmN0aW9uIERnKGEsYixjKXthLmRldGFjaEV2ZW50P2EuZGV0YWNoRXZlbnQoXCJvblwiK2IsYyk6YS5yZW1vdmVFdmVudExpc3RlbmVyJiZhLnJlbW92ZUV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIEVnKGEpey9eaHR0cHM/OlxcL1xcLy8udGVzdChhKXx8KGE9d2luZG93LmxvY2F0aW9uLmhyZWYpO3ZhciBiPS9eKGh0dHBzPzpcXC9cXC9bXFwtX2EtekEtWlxcLjAtOTpdKykvLmV4ZWMoYSk7cmV0dXJuIGI/YlsxXTphfWZ1bmN0aW9uIEZnKGEpe3ZhciBiPVwiXCI7dHJ5e2E9YS5yZXBsYWNlKFwiI1wiLFwiXCIpO3ZhciBjPWxiKGEpO2MmJnYoYyxcIl9fZmlyZWJhc2VfcmVxdWVzdF9rZXlcIikmJihiPXcoYyxcIl9fZmlyZWJhc2VfcmVxdWVzdF9rZXlcIikpfWNhdGNoKGQpe31yZXR1cm4gYn1mdW5jdGlvbiBHZygpe3ZhciBhPVBjKHNnKTtyZXR1cm4gYS5zY2hlbWUrXCI6Ly9cIithLmhvc3QrXCIvdjJcIn1mdW5jdGlvbiBIZyhhKXtyZXR1cm4gR2coKStcIi9cIithK1wiL2F1dGgvY2hhbm5lbFwifTtmdW5jdGlvbiBJZyhhKXt2YXIgYj10aGlzO3RoaXMuQWM9YTt0aGlzLmNlPVwiKlwiO0FnKDgpP3RoaXMuUmM9dGhpcy56ZD1CZygpOih0aGlzLlJjPXdpbmRvdy5vcGVuZXIsdGhpcy56ZD13aW5kb3cpO2lmKCFiLlJjKXRocm93XCJVbmFibGUgdG8gZmluZCByZWxheSBmcmFtZVwiO0NnKHRoaXMuemQsXCJtZXNzYWdlXCIscSh0aGlzLmpjLHRoaXMpKTtDZyh0aGlzLnpkLFwibWVzc2FnZVwiLHEodGhpcy5CZix0aGlzKSk7dHJ5e0pnKHRoaXMse2E6XCJyZWFkeVwifSl9Y2F0Y2goYyl7Q2codGhpcy5SYyxcImxvYWRcIixmdW5jdGlvbigpe0pnKGIse2E6XCJyZWFkeVwifSl9KX1DZyh3aW5kb3csXCJ1bmxvYWRcIixxKHRoaXMuQmcsdGhpcykpfWZ1bmN0aW9uIEpnKGEsYil7Yj1CKGIpO0FnKDgpP2EuUmMuZG9Qb3N0KGIsYS5jZSk6YS5SYy5wb3N0TWVzc2FnZShiLGEuY2UpfVxuSWcucHJvdG90eXBlLmpjPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYzt0cnl7Yz1uYihhLmRhdGEpfWNhdGNoKGQpe31jJiZcInJlcXVlc3RcIj09PWMuYSYmKERnKHdpbmRvdyxcIm1lc3NhZ2VcIix0aGlzLmpjKSx0aGlzLmNlPWEub3JpZ2luLHRoaXMuQWMmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXtiLkFjKGIuY2UsYy5kLGZ1bmN0aW9uKGEsYyl7Yi5kZz0hYztiLkFjPXZvaWQgMDtKZyhiLHthOlwicmVzcG9uc2VcIixkOmEsZm9yY2VLZWVwV2luZG93T3BlbjpjfSl9KX0sMCkpfTtJZy5wcm90b3R5cGUuQmc9ZnVuY3Rpb24oKXt0cnl7RGcodGhpcy56ZCxcIm1lc3NhZ2VcIix0aGlzLkJmKX1jYXRjaChhKXt9dGhpcy5BYyYmKEpnKHRoaXMse2E6XCJlcnJvclwiLGQ6XCJ1bmtub3duIGNsb3NlZCB3aW5kb3dcIn0pLHRoaXMuQWM9dm9pZCAwKTt0cnl7d2luZG93LmNsb3NlKCl9Y2F0Y2goYil7fX07SWcucHJvdG90eXBlLkJmPWZ1bmN0aW9uKGEpe2lmKHRoaXMuZGcmJlwiZGllXCI9PT1hLmRhdGEpdHJ5e3dpbmRvdy5jbG9zZSgpfWNhdGNoKGIpe319O2Z1bmN0aW9uIEtnKGEpe3RoaXMucGM9R2EoKStHYSgpK0dhKCk7dGhpcy5FZj1hfUtnLnByb3RvdHlwZS5vcGVuPWZ1bmN0aW9uKGEsYil7eWMuc2V0KFwicmVkaXJlY3RfcmVxdWVzdF9pZFwiLHRoaXMucGMpO3ljLnNldChcInJlZGlyZWN0X3JlcXVlc3RfaWRcIix0aGlzLnBjKTtiLnJlcXVlc3RJZD10aGlzLnBjO2IucmVkaXJlY3RUbz1iLnJlZGlyZWN0VG98fHdpbmRvdy5sb2NhdGlvbi5ocmVmO2ErPSgvXFw/Ly50ZXN0KGEpP1wiXCI6XCI/XCIpK2tiKGIpO3dpbmRvdy5sb2NhdGlvbj1hfTtLZy5pc0F2YWlsYWJsZT1mdW5jdGlvbigpe3JldHVybiF6ZygpJiYheWcoKX07S2cucHJvdG90eXBlLkNjPWZ1bmN0aW9uKCl7cmV0dXJuXCJyZWRpcmVjdFwifTt2YXIgTGc9e05FVFdPUktfRVJST1I6XCJVbmFibGUgdG8gY29udGFjdCB0aGUgRmlyZWJhc2Ugc2VydmVyLlwiLFNFUlZFUl9FUlJPUjpcIkFuIHVua25vd24gc2VydmVyIGVycm9yIG9jY3VycmVkLlwiLFRSQU5TUE9SVF9VTkFWQUlMQUJMRTpcIlRoZXJlIGFyZSBubyBsb2dpbiB0cmFuc3BvcnRzIGF2YWlsYWJsZSBmb3IgdGhlIHJlcXVlc3RlZCBtZXRob2QuXCIsUkVRVUVTVF9JTlRFUlJVUFRFRDpcIlRoZSBicm93c2VyIHJlZGlyZWN0ZWQgdGhlIHBhZ2UgYmVmb3JlIHRoZSBsb2dpbiByZXF1ZXN0IGNvdWxkIGNvbXBsZXRlLlwiLFVTRVJfQ0FOQ0VMTEVEOlwiVGhlIHVzZXIgY2FuY2VsbGVkIGF1dGhlbnRpY2F0aW9uLlwifTtmdW5jdGlvbiBNZyhhKXt2YXIgYj1FcnJvcih3KExnLGEpLGEpO2IuY29kZT1hO3JldHVybiBifTtmdW5jdGlvbiBOZyhhKXt2YXIgYjsoYj0hYS53aW5kb3dfZmVhdHVyZXMpfHwoYj14ZygpLGI9LTEhPT1iLmluZGV4T2YoXCJGZW5uZWMvXCIpfHwtMSE9PWIuaW5kZXhPZihcIkZpcmVmb3gvXCIpJiYtMSE9PWIuaW5kZXhPZihcIkFuZHJvaWRcIikpO2ImJihhLndpbmRvd19mZWF0dXJlcz12b2lkIDApO2Eud2luZG93X25hbWV8fChhLndpbmRvd19uYW1lPVwiX2JsYW5rXCIpO3RoaXMub3B0aW9ucz1hfVxuTmcucHJvdG90eXBlLm9wZW49ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQoYSl7aCYmKGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaCksaD12b2lkIDApO3QmJih0PWNsZWFySW50ZXJ2YWwodCkpO0RnKHdpbmRvdyxcIm1lc3NhZ2VcIixlKTtEZyh3aW5kb3csXCJ1bmxvYWRcIixkKTtpZihtJiYhYSl0cnl7bS5jbG9zZSgpfWNhdGNoKGIpe2sucG9zdE1lc3NhZ2UoXCJkaWVcIixsKX1tPWs9dm9pZCAwfWZ1bmN0aW9uIGUoYSl7aWYoYS5vcmlnaW49PT1sKXRyeXt2YXIgYj1uYihhLmRhdGEpO1wicmVhZHlcIj09PWIuYT9rLnBvc3RNZXNzYWdlKHosbCk6XCJlcnJvclwiPT09Yi5hPyhkKCExKSxjJiYoYyhiLmQpLGM9bnVsbCkpOlwicmVzcG9uc2VcIj09PWIuYSYmKGQoYi5mb3JjZUtlZXBXaW5kb3dPcGVuKSxjJiYoYyhudWxsLGIuZCksYz1udWxsKSl9Y2F0Y2goZSl7fX12YXIgZj1BZyg4KSxoLGs7aWYoIXRoaXMub3B0aW9ucy5yZWxheV91cmwpcmV0dXJuIGMoRXJyb3IoXCJpbnZhbGlkIGFyZ3VtZW50czogb3JpZ2luIG9mIHVybCBhbmQgcmVsYXlfdXJsIG11c3QgbWF0Y2hcIikpO1xudmFyIGw9RWcoYSk7aWYobCE9PUVnKHRoaXMub3B0aW9ucy5yZWxheV91cmwpKWMmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXtjKEVycm9yKFwiaW52YWxpZCBhcmd1bWVudHM6IG9yaWdpbiBvZiB1cmwgYW5kIHJlbGF5X3VybCBtdXN0IG1hdGNoXCIpKX0sMCk7ZWxzZXtmJiYoaD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpLGguc2V0QXR0cmlidXRlKFwic3JjXCIsdGhpcy5vcHRpb25zLnJlbGF5X3VybCksaC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLGguc2V0QXR0cmlidXRlKFwibmFtZVwiLFwiX193aW5jaGFuX3JlbGF5X2ZyYW1lXCIpLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaCksaz1oLmNvbnRlbnRXaW5kb3cpO2ErPSgvXFw/Ly50ZXN0KGEpP1wiXCI6XCI/XCIpK2tiKGIpO3ZhciBtPXdpbmRvdy5vcGVuKGEsdGhpcy5vcHRpb25zLndpbmRvd19uYW1lLHRoaXMub3B0aW9ucy53aW5kb3dfZmVhdHVyZXMpO2t8fChrPW0pO3ZhciB0PXNldEludGVydmFsKGZ1bmN0aW9uKCl7bSYmbS5jbG9zZWQmJlxuKGQoITEpLGMmJihjKE1nKFwiVVNFUl9DQU5DRUxMRURcIikpLGM9bnVsbCkpfSw1MDApLHo9Qih7YTpcInJlcXVlc3RcIixkOmJ9KTtDZyh3aW5kb3csXCJ1bmxvYWRcIixkKTtDZyh3aW5kb3csXCJtZXNzYWdlXCIsZSl9fTtcbk5nLmlzQXZhaWxhYmxlPWZ1bmN0aW9uKCl7dmFyIGE7aWYoYT1cInBvc3RNZXNzYWdlXCJpbiB3aW5kb3cmJiF6ZygpKShhPXlnKCl8fFwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiYoISF4ZygpLm1hdGNoKC9XaW5kb3dzIFBob25lLyl8fCEhd2luZG93LldpbmRvd3MmJi9ebXMtYXBweDovLnRlc3QobG9jYXRpb24uaHJlZikpKXx8KGE9eGcoKSxhPVwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdyYmISEoYS5tYXRjaCgvKGlQaG9uZXxpUG9kfGlQYWQpLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pKXx8YS5tYXRjaCgvQ3JpT1MvKXx8YS5tYXRjaCgvVHdpdHRlciBmb3IgaVBob25lLyl8fGEubWF0Y2goL0ZCQU5cXC9GQklPUy8pfHx3aW5kb3cubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSxhPSFhO3JldHVybiBhJiYheGcoKS5tYXRjaCgvUGhhbnRvbUpTLyl9O05nLnByb3RvdHlwZS5DYz1mdW5jdGlvbigpe3JldHVyblwicG9wdXBcIn07ZnVuY3Rpb24gT2coYSl7YS5tZXRob2R8fChhLm1ldGhvZD1cIkdFVFwiKTthLmhlYWRlcnN8fChhLmhlYWRlcnM9e30pO2EuaGVhZGVycy5jb250ZW50X3R5cGV8fChhLmhlYWRlcnMuY29udGVudF90eXBlPVwiYXBwbGljYXRpb24vanNvblwiKTthLmhlYWRlcnMuY29udGVudF90eXBlPWEuaGVhZGVycy5jb250ZW50X3R5cGUudG9Mb3dlckNhc2UoKTt0aGlzLm9wdGlvbnM9YX1cbk9nLnByb3RvdHlwZS5vcGVuPWZ1bmN0aW9uKGEsYixjKXtmdW5jdGlvbiBkKCl7YyYmKGMoTWcoXCJSRVFVRVNUX0lOVEVSUlVQVEVEXCIpKSxjPW51bGwpfXZhciBlPW5ldyBYTUxIdHRwUmVxdWVzdCxmPXRoaXMub3B0aW9ucy5tZXRob2QudG9VcHBlckNhc2UoKSxoO0NnKHdpbmRvdyxcImJlZm9yZXVubG9hZFwiLGQpO2Uub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7aWYoYyYmND09PWUucmVhZHlTdGF0ZSl7dmFyIGE7aWYoMjAwPD1lLnN0YXR1cyYmMzAwPmUuc3RhdHVzKXt0cnl7YT1uYihlLnJlc3BvbnNlVGV4dCl9Y2F0Y2goYil7fWMobnVsbCxhKX1lbHNlIDUwMDw9ZS5zdGF0dXMmJjYwMD5lLnN0YXR1cz9jKE1nKFwiU0VSVkVSX0VSUk9SXCIpKTpjKE1nKFwiTkVUV09SS19FUlJPUlwiKSk7Yz1udWxsO0RnKHdpbmRvdyxcImJlZm9yZXVubG9hZFwiLGQpfX07aWYoXCJHRVRcIj09PWYpYSs9KC9cXD8vLnRlc3QoYSk/XCJcIjpcIj9cIikra2IoYiksaD1udWxsO2Vsc2V7dmFyIGs9dGhpcy5vcHRpb25zLmhlYWRlcnMuY29udGVudF90eXBlO1xuXCJhcHBsaWNhdGlvbi9qc29uXCI9PT1rJiYoaD1CKGIpKTtcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiPT09ayYmKGg9a2IoYikpfWUub3BlbihmLGEsITApO2E9e1wiWC1SZXF1ZXN0ZWQtV2l0aFwiOlwiWE1MSHR0cFJlcXVlc3RcIixBY2NlcHQ6XCJhcHBsaWNhdGlvbi9qc29uO3RleHQvcGxhaW5cIn07emEoYSx0aGlzLm9wdGlvbnMuaGVhZGVycyk7Zm9yKHZhciBsIGluIGEpZS5zZXRSZXF1ZXN0SGVhZGVyKGwsYVtsXSk7ZS5zZW5kKGgpfTtPZy5pc0F2YWlsYWJsZT1mdW5jdGlvbigpe3ZhciBhO2lmKGE9ISF3aW5kb3cuWE1MSHR0cFJlcXVlc3QpYT14ZygpLGE9IShhLm1hdGNoKC9NU0lFLyl8fGEubWF0Y2goL1RyaWRlbnQvKSl8fEFnKDEwKTtyZXR1cm4gYX07T2cucHJvdG90eXBlLkNjPWZ1bmN0aW9uKCl7cmV0dXJuXCJqc29uXCJ9O2Z1bmN0aW9uIFBnKGEpe3RoaXMucGM9R2EoKStHYSgpK0dhKCk7dGhpcy5FZj1hfVxuUGcucHJvdG90eXBlLm9wZW49ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQoKXtjJiYoYyhNZyhcIlVTRVJfQ0FOQ0VMTEVEXCIpKSxjPW51bGwpfXZhciBlPXRoaXMsZj1QYyhzZyksaDtiLnJlcXVlc3RJZD10aGlzLnBjO2IucmVkaXJlY3RUbz1mLnNjaGVtZStcIjovL1wiK2YuaG9zdCtcIi9ibGFuay9wYWdlLmh0bWxcIjthKz0vXFw/Ly50ZXN0KGEpP1wiXCI6XCI/XCI7YSs9a2IoYik7KGg9d2luZG93Lm9wZW4oYSxcIl9ibGFua1wiLFwibG9jYXRpb249bm9cIikpJiZoYShoLmFkZEV2ZW50TGlzdGVuZXIpPyhoLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2Fkc3RhcnRcIixmdW5jdGlvbihhKXt2YXIgYjtpZihiPWEmJmEudXJsKWE6e3RyeXt2YXIgbT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTttLmhyZWY9YS51cmw7Yj1tLmhvc3Q9PT1mLmhvc3QmJlwiL2JsYW5rL3BhZ2UuaHRtbFwiPT09bS5wYXRobmFtZTticmVhayBhfWNhdGNoKHQpe31iPSExfWImJihhPUZnKGEudXJsKSxoLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJleGl0XCIsXG5kKSxoLmNsb3NlKCksYT1uZXcgdGcobnVsbCxudWxsLHtyZXF1ZXN0SWQ6ZS5wYyxyZXF1ZXN0S2V5OmF9KSxlLkVmLnJlcXVlc3RXaXRoQ3JlZGVudGlhbChcIi9hdXRoL3Nlc3Npb25cIixhLGMpLGM9bnVsbCl9KSxoLmFkZEV2ZW50TGlzdGVuZXIoXCJleGl0XCIsZCkpOmMoTWcoXCJUUkFOU1BPUlRfVU5BVkFJTEFCTEVcIikpfTtQZy5pc0F2YWlsYWJsZT1mdW5jdGlvbigpe3JldHVybiB5ZygpfTtQZy5wcm90b3R5cGUuQ2M9ZnVuY3Rpb24oKXtyZXR1cm5cInJlZGlyZWN0XCJ9O2Z1bmN0aW9uIFFnKGEpe2EuY2FsbGJhY2tfcGFyYW1ldGVyfHwoYS5jYWxsYmFja19wYXJhbWV0ZXI9XCJjYWxsYmFja1wiKTt0aGlzLm9wdGlvbnM9YTt3aW5kb3cuX19maXJlYmFzZV9hdXRoX2pzb25wPXdpbmRvdy5fX2ZpcmViYXNlX2F1dGhfanNvbnB8fHt9fVxuUWcucHJvdG90eXBlLm9wZW49ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQoKXtjJiYoYyhNZyhcIlJFUVVFU1RfSU5URVJSVVBURURcIikpLGM9bnVsbCl9ZnVuY3Rpb24gZSgpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt3aW5kb3cuX19maXJlYmFzZV9hdXRoX2pzb25wW2ZdPXZvaWQgMDt3YSh3aW5kb3cuX19maXJlYmFzZV9hdXRoX2pzb25wKSYmKHdpbmRvdy5fX2ZpcmViYXNlX2F1dGhfanNvbnA9dm9pZCAwKTt0cnl7dmFyIGE9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZik7YSYmYS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGEpfWNhdGNoKGIpe319LDEpO0RnKHdpbmRvdyxcImJlZm9yZXVubG9hZFwiLGQpfXZhciBmPVwiZm5cIisobmV3IERhdGUpLmdldFRpbWUoKStNYXRoLmZsb29yKDk5OTk5Kk1hdGgucmFuZG9tKCkpO2JbdGhpcy5vcHRpb25zLmNhbGxiYWNrX3BhcmFtZXRlcl09XCJfX2ZpcmViYXNlX2F1dGhfanNvbnAuXCIrZjthKz0oL1xcPy8udGVzdChhKT9cIlwiOlwiP1wiKStrYihiKTtcbkNnKHdpbmRvdyxcImJlZm9yZXVubG9hZFwiLGQpO3dpbmRvdy5fX2ZpcmViYXNlX2F1dGhfanNvbnBbZl09ZnVuY3Rpb24oYSl7YyYmKGMobnVsbCxhKSxjPW51bGwpO2UoKX07UmcoZixhLGMpfTtcbmZ1bmN0aW9uIFJnKGEsYixjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dHJ5e3ZhciBkPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7ZC50eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI7ZC5pZD1hO2QuYXN5bmM9ITA7ZC5zcmM9YjtkLm9uZXJyb3I9ZnVuY3Rpb24oKXt2YXIgYj1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChhKTtudWxsIT09YiYmYi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpO2MmJmMoTWcoXCJORVRXT1JLX0VSUk9SXCIpKX07dmFyIGU9ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpOyhlJiYwIT1lLmxlbmd0aD9lWzBdOmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQoZCl9Y2F0Y2goZil7YyYmYyhNZyhcIk5FVFdPUktfRVJST1JcIikpfX0sMCl9UWcuaXNBdmFpbGFibGU9ZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50JiZudWxsIT1kb2N1bWVudC5jcmVhdGVFbGVtZW50fTtcblFnLnByb3RvdHlwZS5DYz1mdW5jdGlvbigpe3JldHVyblwianNvblwifTtmdW5jdGlvbiBTZyhhLGIsYyxkKXtEZS5jYWxsKHRoaXMsW1wiYXV0aF9zdGF0dXNcIl0pO3RoaXMuRj1hO3RoaXMuZGY9Yjt0aGlzLlZnPWM7dGhpcy5MZT1kO3RoaXMuc2M9bmV3IHdnKGEsW3hjLHljXSk7dGhpcy5tYj1udWxsO3RoaXMuU2U9ITE7VGcodGhpcyl9bWEoU2csRGUpO2c9U2cucHJvdG90eXBlO2cueGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYnx8bnVsbH07ZnVuY3Rpb24gVGcoYSl7eWMuZ2V0KFwicmVkaXJlY3RfcmVxdWVzdF9pZFwiKSYmVWcoYSk7dmFyIGI9YS5zYy5nZXQoKTtiJiZiLnRva2VuPyhWZyhhLGIpLGEuZGYoYi50b2tlbixmdW5jdGlvbihjLGQpe1dnKGEsYyxkLCExLGIudG9rZW4sYil9LGZ1bmN0aW9uKGIsZCl7WGcoYSxcInJlc3VtZVNlc3Npb24oKVwiLGIsZCl9KSk6VmcoYSxudWxsKX1cbmZ1bmN0aW9uIFlnKGEsYixjLGQsZSxmKXtcImZpcmViYXNlaW8tZGVtby5jb21cIj09PWEuRi5kb21haW4mJk8oXCJGaXJlYmFzZSBhdXRoZW50aWNhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIG9uIGRlbW8gRmlyZWJhc2VzICgqLmZpcmViYXNlaW8tZGVtby5jb20pLiBUbyBzZWN1cmUgeW91ciBGaXJlYmFzZSwgY3JlYXRlIGEgcHJvZHVjdGlvbiBGaXJlYmFzZSBhdCBodHRwczovL3d3dy5maXJlYmFzZS5jb20uXCIpO2EuZGYoYixmdW5jdGlvbihmLGspe1dnKGEsZixrLCEwLGIsYyxkfHx7fSxlKX0sZnVuY3Rpb24oYixjKXtYZyhhLFwiYXV0aCgpXCIsYixjLGYpfSl9ZnVuY3Rpb24gWmcoYSxiKXthLnNjLmNsZWFyKCk7VmcoYSxudWxsKTthLlZnKGZ1bmN0aW9uKGEsZCl7aWYoXCJva1wiPT09YSlQKGIsbnVsbCk7ZWxzZXt2YXIgZT0oYXx8XCJlcnJvclwiKS50b1VwcGVyQ2FzZSgpLGY9ZTtkJiYoZis9XCI6IFwiK2QpO2Y9RXJyb3IoZik7Zi5jb2RlPWU7UChiLGYpfX0pfVxuZnVuY3Rpb24gV2coYSxiLGMsZCxlLGYsaCxrKXtcIm9rXCI9PT1iPyhkJiYoYj1jLmF1dGgsZi5hdXRoPWIsZi5leHBpcmVzPWMuZXhwaXJlcyxmLnRva2VuPWJkKGUpP2U6XCJcIixjPW51bGwsYiYmdihiLFwidWlkXCIpP2M9dyhiLFwidWlkXCIpOnYoZixcInVpZFwiKSYmKGM9dyhmLFwidWlkXCIpKSxmLnVpZD1jLGM9XCJjdXN0b21cIixiJiZ2KGIsXCJwcm92aWRlclwiKT9jPXcoYixcInByb3ZpZGVyXCIpOnYoZixcInByb3ZpZGVyXCIpJiYoYz13KGYsXCJwcm92aWRlclwiKSksZi5wcm92aWRlcj1jLGEuc2MuY2xlYXIoKSxiZChlKSYmKGg9aHx8e30sYz14YyxcInNlc3Npb25Pbmx5XCI9PT1oLnJlbWVtYmVyJiYoYz15YyksXCJub25lXCIhPT1oLnJlbWVtYmVyJiZhLnNjLnNldChmLGMpKSxWZyhhLGYpKSxQKGssbnVsbCxmKSk6KGEuc2MuY2xlYXIoKSxWZyhhLG51bGwpLGY9YT0oYnx8XCJlcnJvclwiKS50b1VwcGVyQ2FzZSgpLGMmJihmKz1cIjogXCIrYyksZj1FcnJvcihmKSxmLmNvZGU9YSxQKGssZikpfVxuZnVuY3Rpb24gWGcoYSxiLGMsZCxlKXtPKGIrXCIgd2FzIGNhbmNlbGVkOiBcIitkKTthLnNjLmNsZWFyKCk7VmcoYSxudWxsKTthPUVycm9yKGQpO2EuY29kZT1jLnRvVXBwZXJDYXNlKCk7UChlLGEpfWZ1bmN0aW9uICRnKGEsYixjLGQsZSl7YWgoYSk7Yz1uZXcgdGcoZHx8e30se30sY3x8e30pO2JoKGEsW09nLFFnXSxcIi9hdXRoL1wiK2IsYyxlKX1cbmZ1bmN0aW9uIGNoKGEsYixjLGQpe2FoKGEpO3ZhciBlPVtOZyxQZ107Yz12ZyhjKTtcImFub255bW91c1wiPT09Ynx8XCJwYXNzd29yZFwiPT09Yj9zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7UChkLE1nKFwiVFJBTlNQT1JUX1VOQVZBSUxBQkxFXCIpKX0sMCk6KGMuZWUud2luZG93X2ZlYXR1cmVzPVwibWVudWJhcj15ZXMsbW9kYWw9eWVzLGFsd2F5c1JhaXNlZD15ZXNsb2NhdGlvbj15ZXMscmVzaXphYmxlPXllcyxzY3JvbGxiYXJzPXllcyxzdGF0dXM9eWVzLGhlaWdodD02MjUsd2lkdGg9NjI1LHRvcD1cIisoXCJvYmplY3RcIj09PXR5cGVvZiBzY3JlZW4/LjUqKHNjcmVlbi5oZWlnaHQtNjI1KTowKStcIixsZWZ0PVwiKyhcIm9iamVjdFwiPT09dHlwZW9mIHNjcmVlbj8uNSooc2NyZWVuLndpZHRoLTYyNSk6MCksYy5lZS5yZWxheV91cmw9SGcoYS5GLmhjKSxjLmVlLnJlcXVlc3RXaXRoQ3JlZGVudGlhbD1xKGEucWMsYSksYmgoYSxlLFwiL2F1dGgvXCIrYixjLGQpKX1cbmZ1bmN0aW9uIFVnKGEpe3ZhciBiPXljLmdldChcInJlZGlyZWN0X3JlcXVlc3RfaWRcIik7aWYoYil7dmFyIGM9eWMuZ2V0KFwicmVkaXJlY3RfY2xpZW50X29wdGlvbnNcIik7eWMucmVtb3ZlKFwicmVkaXJlY3RfcmVxdWVzdF9pZFwiKTt5Yy5yZW1vdmUoXCJyZWRpcmVjdF9jbGllbnRfb3B0aW9uc1wiKTt2YXIgZD1bT2csUWddLGI9e3JlcXVlc3RJZDpiLHJlcXVlc3RLZXk6RmcoZG9jdW1lbnQubG9jYXRpb24uaGFzaCl9LGM9bmV3IHRnKGMse30sYik7YS5TZT0hMDt0cnl7ZG9jdW1lbnQubG9jYXRpb24uaGFzaD1kb2N1bWVudC5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoLyZfX2ZpcmViYXNlX3JlcXVlc3Rfa2V5PShbYS16QS16MC05XSopLyxcIlwiKX1jYXRjaChlKXt9YmgoYSxkLFwiL2F1dGgvc2Vzc2lvblwiLGMsZnVuY3Rpb24oKXt0aGlzLlNlPSExfS5iaW5kKGEpKX19XG5nLnNlPWZ1bmN0aW9uKGEsYil7YWgodGhpcyk7dmFyIGM9dmcoYSk7Yy4kYS5fbWV0aG9kPVwiUE9TVFwiO3RoaXMucWMoXCIvdXNlcnNcIixjLGZ1bmN0aW9uKGEsYyl7YT9QKGIsYSk6UChiLGEsYyl9KX07Zy5UZT1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7YWgodGhpcyk7dmFyIGQ9XCIvdXNlcnMvXCIrZW5jb2RlVVJJQ29tcG9uZW50KGEuZW1haWwpLGU9dmcoYSk7ZS4kYS5fbWV0aG9kPVwiREVMRVRFXCI7dGhpcy5xYyhkLGUsZnVuY3Rpb24oYSxkKXshYSYmZCYmZC51aWQmJmMubWImJmMubWIudWlkJiZjLm1iLnVpZD09PWQudWlkJiZaZyhjKTtQKGIsYSl9KX07Zy5wZT1mdW5jdGlvbihhLGIpe2FoKHRoaXMpO3ZhciBjPVwiL3VzZXJzL1wiK2VuY29kZVVSSUNvbXBvbmVudChhLmVtYWlsKStcIi9wYXNzd29yZFwiLGQ9dmcoYSk7ZC4kYS5fbWV0aG9kPVwiUFVUXCI7ZC4kYS5wYXNzd29yZD1hLm5ld1Bhc3N3b3JkO3RoaXMucWMoYyxkLGZ1bmN0aW9uKGEpe1AoYixhKX0pfTtcbmcub2U9ZnVuY3Rpb24oYSxiKXthaCh0aGlzKTt2YXIgYz1cIi91c2Vycy9cIitlbmNvZGVVUklDb21wb25lbnQoYS5vbGRFbWFpbCkrXCIvZW1haWxcIixkPXZnKGEpO2QuJGEuX21ldGhvZD1cIlBVVFwiO2QuJGEuZW1haWw9YS5uZXdFbWFpbDtkLiRhLnBhc3N3b3JkPWEucGFzc3dvcmQ7dGhpcy5xYyhjLGQsZnVuY3Rpb24oYSl7UChiLGEpfSl9O2cuVmU9ZnVuY3Rpb24oYSxiKXthaCh0aGlzKTt2YXIgYz1cIi91c2Vycy9cIitlbmNvZGVVUklDb21wb25lbnQoYS5lbWFpbCkrXCIvcGFzc3dvcmRcIixkPXZnKGEpO2QuJGEuX21ldGhvZD1cIlBPU1RcIjt0aGlzLnFjKGMsZCxmdW5jdGlvbihhKXtQKGIsYSl9KX07Zy5xYz1mdW5jdGlvbihhLGIsYyl7ZGgodGhpcyxbT2csUWddLGEsYixjKX07XG5mdW5jdGlvbiBiaChhLGIsYyxkLGUpe2RoKGEsYixjLGQsZnVuY3Rpb24oYixjKXshYiYmYyYmYy50b2tlbiYmYy51aWQ/WWcoYSxjLnRva2VuLGMsZC5vZCxmdW5jdGlvbihhLGIpe2E/UChlLGEpOlAoZSxudWxsLGIpfSk6UChlLGJ8fE1nKFwiVU5LTk9XTl9FUlJPUlwiKSl9KX1cbmZ1bmN0aW9uIGRoKGEsYixjLGQsZSl7Yj1QYShiLGZ1bmN0aW9uKGEpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmlzQXZhaWxhYmxlJiZhLmlzQXZhaWxhYmxlKCl9KTswPT09Yi5sZW5ndGg/c2V0VGltZW91dChmdW5jdGlvbigpe1AoZSxNZyhcIlRSQU5TUE9SVF9VTkFWQUlMQUJMRVwiKSl9LDApOihiPW5ldyAoYi5zaGlmdCgpKShkLmVlKSxkPWpiKGQuJGEpLGQudj1cImpzLVwiK2hiLGQudHJhbnNwb3J0PWIuQ2MoKSxkLnN1cHByZXNzX3N0YXR1c19jb2Rlcz0hMCxhPUdnKCkrXCIvXCIrYS5GLmhjK2MsYi5vcGVuKGEsZCxmdW5jdGlvbihhLGIpe2lmKGEpUChlLGEpO2Vsc2UgaWYoYiYmYi5lcnJvcil7dmFyIGM9RXJyb3IoYi5lcnJvci5tZXNzYWdlKTtjLmNvZGU9Yi5lcnJvci5jb2RlO2MuZGV0YWlscz1iLmVycm9yLmRldGFpbHM7UChlLGMpfWVsc2UgUChlLG51bGwsYil9KSl9XG5mdW5jdGlvbiBWZyhhLGIpe3ZhciBjPW51bGwhPT1hLm1ifHxudWxsIT09YjthLm1iPWI7YyYmYS5mZShcImF1dGhfc3RhdHVzXCIsYik7YS5MZShudWxsIT09Yil9Zy5BZT1mdW5jdGlvbihhKXtLKFwiYXV0aF9zdGF0dXNcIj09PWEsJ2luaXRpYWwgZXZlbnQgbXVzdCBiZSBvZiB0eXBlIFwiYXV0aF9zdGF0dXNcIicpO3JldHVybiB0aGlzLlNlP251bGw6W3RoaXMubWJdfTtmdW5jdGlvbiBhaChhKXt2YXIgYj1hLkY7aWYoXCJmaXJlYmFzZWlvLmNvbVwiIT09Yi5kb21haW4mJlwiZmlyZWJhc2Vpby1kZW1vLmNvbVwiIT09Yi5kb21haW4mJlwiYXV0aC5maXJlYmFzZS5jb21cIj09PXNnKXRocm93IEVycm9yKFwiVGhpcyBjdXN0b20gRmlyZWJhc2Ugc2VydmVyICgnXCIrYS5GLmRvbWFpbitcIicpIGRvZXMgbm90IHN1cHBvcnQgZGVsZWdhdGVkIGxvZ2luLlwiKTt9O3ZhciBDYz1cIndlYnNvY2tldFwiLERjPVwibG9uZ19wb2xsaW5nXCI7ZnVuY3Rpb24gZWgoYSl7dGhpcy5qYz1hO3RoaXMuTmQ9W107dGhpcy5TYj0wO3RoaXMucWU9LTE7dGhpcy5GYj1udWxsfWZ1bmN0aW9uIGZoKGEsYixjKXthLnFlPWI7YS5GYj1jO2EucWU8YS5TYiYmKGEuRmIoKSxhLkZiPW51bGwpfWZ1bmN0aW9uIGdoKGEsYixjKXtmb3IoYS5OZFtiXT1jO2EuTmRbYS5TYl07KXt2YXIgZD1hLk5kW2EuU2JdO2RlbGV0ZSBhLk5kW2EuU2JdO2Zvcih2YXIgZT0wO2U8ZC5sZW5ndGg7KytlKWlmKGRbZV0pe3ZhciBmPWE7RGIoZnVuY3Rpb24oKXtmLmpjKGRbZV0pfSl9aWYoYS5TYj09PWEucWUpe2EuRmImJihjbGVhclRpbWVvdXQoYS5GYiksYS5GYigpLGEuRmI9bnVsbCk7YnJlYWt9YS5TYisrfX07ZnVuY3Rpb24gaGgoYSxiLGMsZCl7dGhpcy5yZT1hO3RoaXMuZj1NYyhhKTt0aGlzLm5iPXRoaXMub2I9MDt0aGlzLlVhPVJiKGIpO3RoaXMuUWY9Yzt0aGlzLkhjPSExO3RoaXMuQmI9ZDt0aGlzLmpkPWZ1bmN0aW9uKGEpe3JldHVybiBCYyhiLERjLGEpfX12YXIgaWgsamg7XG5oaC5wcm90b3R5cGUub3Blbj1mdW5jdGlvbihhLGIpe3RoaXMuaGY9MDt0aGlzLmxhPWI7dGhpcy5BZj1uZXcgZWgoYSk7dGhpcy56Yj0hMTt2YXIgYz10aGlzO3RoaXMucWI9c2V0VGltZW91dChmdW5jdGlvbigpe2MuZihcIlRpbWVkIG91dCB0cnlpbmcgdG8gY29ubmVjdC5cIik7Yy5nYigpO2MucWI9bnVsbH0sTWF0aC5mbG9vcigzRTQpKTtSYyhmdW5jdGlvbigpe2lmKCFjLnpiKXtjLlNhPW5ldyBraChmdW5jdGlvbihhLGIsZCxrLGwpe2xoKGMsYXJndW1lbnRzKTtpZihjLlNhKWlmKGMucWImJihjbGVhclRpbWVvdXQoYy5xYiksYy5xYj1udWxsKSxjLkhjPSEwLFwic3RhcnRcIj09YSljLmlkPWIsYy5HZj1kO2Vsc2UgaWYoXCJjbG9zZVwiPT09YSliPyhjLlNhLlhkPSExLGZoKGMuQWYsYixmdW5jdGlvbigpe2MuZ2IoKX0pKTpjLmdiKCk7ZWxzZSB0aHJvdyBFcnJvcihcIlVucmVjb2duaXplZCBjb21tYW5kIHJlY2VpdmVkOiBcIithKTt9LGZ1bmN0aW9uKGEsYil7bGgoYyxhcmd1bWVudHMpO1xuZ2goYy5BZixhLGIpfSxmdW5jdGlvbigpe2MuZ2IoKX0sYy5qZCk7dmFyIGE9e3N0YXJ0OlwidFwifTthLnNlcj1NYXRoLmZsb29yKDFFOCpNYXRoLnJhbmRvbSgpKTtjLlNhLmhlJiYoYS5jYj1jLlNhLmhlKTthLnY9XCI1XCI7Yy5RZiYmKGEucz1jLlFmKTtjLkJiJiYoYS5scz1jLkJiKTtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGxvY2F0aW9uJiZsb2NhdGlvbi5ocmVmJiYtMSE9PWxvY2F0aW9uLmhyZWYuaW5kZXhPZihcImZpcmViYXNlaW8uY29tXCIpJiYoYS5yPVwiZlwiKTthPWMuamQoYSk7Yy5mKFwiQ29ubmVjdGluZyB2aWEgbG9uZy1wb2xsIHRvIFwiK2EpO21oKGMuU2EsYSxmdW5jdGlvbigpe30pfX0pfTtcbmhoLnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuU2EsYj10aGlzLkdmO2EudWc9dGhpcy5pZDthLnZnPWI7Zm9yKGEubGU9ITA7bmgoYSk7KTthPXRoaXMuaWQ7Yj10aGlzLkdmO3RoaXMuZ2M9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTt2YXIgYz17ZGZyYW1lOlwidFwifTtjLmlkPWE7Yy5wdz1iO3RoaXMuZ2Muc3JjPXRoaXMuamQoYyk7dGhpcy5nYy5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5nYyl9O1xuaGguaXNBdmFpbGFibGU9ZnVuY3Rpb24oKXtyZXR1cm4gaWh8fCFqaCYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudCYmbnVsbCE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCYmIShcIm9iamVjdFwiPT09dHlwZW9mIHdpbmRvdyYmd2luZG93LmNocm9tZSYmd2luZG93LmNocm9tZS5leHRlbnNpb24mJiEvXmNocm9tZS8udGVzdCh3aW5kb3cubG9jYXRpb24uaHJlZikpJiYhKFwib2JqZWN0XCI9PT10eXBlb2YgV2luZG93cyYmXCJvYmplY3RcIj09PXR5cGVvZiBXaW5kb3dzLlhnKSYmITB9O2c9aGgucHJvdG90eXBlO2cuRWQ9ZnVuY3Rpb24oKXt9O2cuZGQ9ZnVuY3Rpb24oKXt0aGlzLnpiPSEwO3RoaXMuU2EmJih0aGlzLlNhLmNsb3NlKCksdGhpcy5TYT1udWxsKTt0aGlzLmdjJiYoZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmdjKSx0aGlzLmdjPW51bGwpO3RoaXMucWImJihjbGVhclRpbWVvdXQodGhpcy5xYiksdGhpcy5xYj1udWxsKX07XG5nLmdiPWZ1bmN0aW9uKCl7dGhpcy56Ynx8KHRoaXMuZihcIkxvbmdwb2xsIGlzIGNsb3NpbmcgaXRzZWxmXCIpLHRoaXMuZGQoKSx0aGlzLmxhJiYodGhpcy5sYSh0aGlzLkhjKSx0aGlzLmxhPW51bGwpKX07Zy5jbG9zZT1mdW5jdGlvbigpe3RoaXMuemJ8fCh0aGlzLmYoXCJMb25ncG9sbCBpcyBiZWluZyBjbG9zZWQuXCIpLHRoaXMuZGQoKSl9O2cuc2VuZD1mdW5jdGlvbihhKXthPUIoYSk7dGhpcy5vYis9YS5sZW5ndGg7T2IodGhpcy5VYSxcImJ5dGVzX3NlbnRcIixhLmxlbmd0aCk7YT1JYyhhKTthPWZiKGEsITApO2E9VmMoYSwxODQwKTtmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9dGhpcy5TYTtjLmFkLnB1c2goe01nOnRoaXMuaGYsVWc6YS5sZW5ndGgsa2Y6YVtiXX0pO2MubGUmJm5oKGMpO3RoaXMuaGYrK319O2Z1bmN0aW9uIGxoKGEsYil7dmFyIGM9QihiKS5sZW5ndGg7YS5uYis9YztPYihhLlVhLFwiYnl0ZXNfcmVjZWl2ZWRcIixjKX1cbmZ1bmN0aW9uIGtoKGEsYixjLGQpe3RoaXMuamQ9ZDt0aGlzLmhiPWM7dGhpcy5QZT1uZXcgcGc7dGhpcy5hZD1bXTt0aGlzLnRlPU1hdGguZmxvb3IoMUU4Kk1hdGgucmFuZG9tKCkpO3RoaXMuWGQ9ITA7dGhpcy5oZT1FYygpO3dpbmRvd1tcInBMUENvbW1hbmRcIit0aGlzLmhlXT1hO3dpbmRvd1tcInBSVExQQ0JcIit0aGlzLmhlXT1iO2E9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTthLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7aWYoZG9jdW1lbnQuYm9keSl7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTt0cnl7YS5jb250ZW50V2luZG93LmRvY3VtZW50fHxDYihcIk5vIElFIGRvbWFpbiBzZXR0aW5nIHJlcXVpcmVkXCIpfWNhdGNoKGUpe2Euc3JjPVwiamF2YXNjcmlwdDp2b2lkKChmdW5jdGlvbigpe2RvY3VtZW50Lm9wZW4oKTtkb2N1bWVudC5kb21haW49J1wiK2RvY3VtZW50LmRvbWFpbitcIic7ZG9jdW1lbnQuY2xvc2UoKTt9KSgpKVwifX1lbHNlIHRocm93XCJEb2N1bWVudCBib2R5IGhhcyBub3QgaW5pdGlhbGl6ZWQuIFdhaXQgdG8gaW5pdGlhbGl6ZSBGaXJlYmFzZSB1bnRpbCBhZnRlciB0aGUgZG9jdW1lbnQgaXMgcmVhZHkuXCI7XG5hLmNvbnRlbnREb2N1bWVudD9hLmViPWEuY29udGVudERvY3VtZW50OmEuY29udGVudFdpbmRvdz9hLmViPWEuY29udGVudFdpbmRvdy5kb2N1bWVudDphLmRvY3VtZW50JiYoYS5lYj1hLmRvY3VtZW50KTt0aGlzLkVhPWE7YT1cIlwiO3RoaXMuRWEuc3JjJiZcImphdmFzY3JpcHQ6XCI9PT10aGlzLkVhLnNyYy5zdWJzdHIoMCwxMSkmJihhPSc8c2NyaXB0PmRvY3VtZW50LmRvbWFpbj1cIicrZG9jdW1lbnQuZG9tYWluKydcIjtcXHgzYy9zY3JpcHQ+Jyk7YT1cIjxodG1sPjxib2R5PlwiK2ErXCI8L2JvZHk+PC9odG1sPlwiO3RyeXt0aGlzLkVhLmViLm9wZW4oKSx0aGlzLkVhLmViLndyaXRlKGEpLHRoaXMuRWEuZWIuY2xvc2UoKX1jYXRjaChmKXtDYihcImZyYW1lIHdyaXRpbmcgZXhjZXB0aW9uXCIpLGYuc3RhY2smJkNiKGYuc3RhY2spLENiKGYpfX1cbmtoLnByb3RvdHlwZS5jbG9zZT1mdW5jdGlvbigpe3RoaXMubGU9ITE7aWYodGhpcy5FYSl7dGhpcy5FYS5lYi5ib2R5LmlubmVySFRNTD1cIlwiO3ZhciBhPXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe251bGwhPT1hLkVhJiYoZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhLkVhKSxhLkVhPW51bGwpfSxNYXRoLmZsb29yKDApKX12YXIgYj10aGlzLmhiO2ImJih0aGlzLmhiPW51bGwsYigpKX07XG5mdW5jdGlvbiBuaChhKXtpZihhLmxlJiZhLlhkJiZhLlBlLmNvdW50KCk8KDA8YS5hZC5sZW5ndGg/MjoxKSl7YS50ZSsrO3ZhciBiPXt9O2IuaWQ9YS51ZztiLnB3PWEudmc7Yi5zZXI9YS50ZTtmb3IodmFyIGI9YS5qZChiKSxjPVwiXCIsZD0wOzA8YS5hZC5sZW5ndGg7KWlmKDE4NzA+PWEuYWRbMF0ua2YubGVuZ3RoKzMwK2MubGVuZ3RoKXt2YXIgZT1hLmFkLnNoaWZ0KCksYz1jK1wiJnNlZ1wiK2QrXCI9XCIrZS5NZytcIiZ0c1wiK2QrXCI9XCIrZS5VZytcIiZkXCIrZCtcIj1cIitlLmtmO2QrK31lbHNlIGJyZWFrO29oKGEsYitjLGEudGUpO3JldHVybiEwfXJldHVybiExfWZ1bmN0aW9uIG9oKGEsYixjKXtmdW5jdGlvbiBkKCl7YS5QZS5yZW1vdmUoYyk7bmgoYSl9YS5QZS5hZGQoYywxKTt2YXIgZT1zZXRUaW1lb3V0KGQsTWF0aC5mbG9vcigyNUUzKSk7bWgoYSxiLGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KGUpO2QoKX0pfVxuZnVuY3Rpb24gbWgoYSxiLGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0cnl7aWYoYS5YZCl7dmFyIGQ9YS5FYS5lYi5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO2QudHlwZT1cInRleHQvamF2YXNjcmlwdFwiO2QuYXN5bmM9ITA7ZC5zcmM9YjtkLm9ubG9hZD1kLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe3ZhciBhPWQucmVhZHlTdGF0ZTthJiZcImxvYWRlZFwiIT09YSYmXCJjb21wbGV0ZVwiIT09YXx8KGQub25sb2FkPWQub25yZWFkeXN0YXRlY2hhbmdlPW51bGwsZC5wYXJlbnROb2RlJiZkLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZCksYygpKX07ZC5vbmVycm9yPWZ1bmN0aW9uKCl7Q2IoXCJMb25nLXBvbGwgc2NyaXB0IGZhaWxlZCB0byBsb2FkOiBcIitiKTthLlhkPSExO2EuY2xvc2UoKX07YS5FYS5lYi5ib2R5LmFwcGVuZENoaWxkKGQpfX1jYXRjaChlKXt9fSxNYXRoLmZsb29yKDEpKX07dmFyIHBoPW51bGw7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNb3pXZWJTb2NrZXQ/cGg9TW96V2ViU29ja2V0OlwidW5kZWZpbmVkXCIhPT10eXBlb2YgV2ViU29ja2V0JiYocGg9V2ViU29ja2V0KTtmdW5jdGlvbiBxaChhLGIsYyxkKXt0aGlzLnJlPWE7dGhpcy5mPU1jKHRoaXMucmUpO3RoaXMuZnJhbWVzPXRoaXMuS2M9bnVsbDt0aGlzLm5iPXRoaXMub2I9dGhpcy5iZj0wO3RoaXMuVWE9UmIoYik7YT17djpcIjVcIn07XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBsb2NhdGlvbiYmbG9jYXRpb24uaHJlZiYmLTEhPT1sb2NhdGlvbi5ocmVmLmluZGV4T2YoXCJmaXJlYmFzZWlvLmNvbVwiKSYmKGEucj1cImZcIik7YyYmKGEucz1jKTtkJiYoYS5scz1kKTt0aGlzLmVmPUJjKGIsQ2MsYSl9dmFyIHJoO1xucWgucHJvdG90eXBlLm9wZW49ZnVuY3Rpb24oYSxiKXt0aGlzLmhiPWI7dGhpcy56Zz1hO3RoaXMuZihcIldlYnNvY2tldCBjb25uZWN0aW5nIHRvIFwiK3RoaXMuZWYpO3RoaXMuSGM9ITE7eGMuc2V0KFwicHJldmlvdXNfd2Vic29ja2V0X2ZhaWx1cmVcIiwhMCk7dHJ5e3RoaXMudWE9bmV3IHBoKHRoaXMuZWYpfWNhdGNoKGMpe3RoaXMuZihcIkVycm9yIGluc3RhbnRpYXRpbmcgV2ViU29ja2V0LlwiKTt2YXIgZD1jLm1lc3NhZ2V8fGMuZGF0YTtkJiZ0aGlzLmYoZCk7dGhpcy5nYigpO3JldHVybn12YXIgZT10aGlzO3RoaXMudWEub25vcGVuPWZ1bmN0aW9uKCl7ZS5mKFwiV2Vic29ja2V0IGNvbm5lY3RlZC5cIik7ZS5IYz0hMH07dGhpcy51YS5vbmNsb3NlPWZ1bmN0aW9uKCl7ZS5mKFwiV2Vic29ja2V0IGNvbm5lY3Rpb24gd2FzIGRpc2Nvbm5lY3RlZC5cIik7ZS51YT1udWxsO2UuZ2IoKX07dGhpcy51YS5vbm1lc3NhZ2U9ZnVuY3Rpb24oYSl7aWYobnVsbCE9PWUudWEpaWYoYT1hLmRhdGEsZS5uYis9XG5hLmxlbmd0aCxPYihlLlVhLFwiYnl0ZXNfcmVjZWl2ZWRcIixhLmxlbmd0aCksc2goZSksbnVsbCE9PWUuZnJhbWVzKXRoKGUsYSk7ZWxzZXthOntLKG51bGw9PT1lLmZyYW1lcyxcIldlIGFscmVhZHkgaGF2ZSBhIGZyYW1lIGJ1ZmZlclwiKTtpZig2Pj1hLmxlbmd0aCl7dmFyIGI9TnVtYmVyKGEpO2lmKCFpc05hTihiKSl7ZS5iZj1iO2UuZnJhbWVzPVtdO2E9bnVsbDticmVhayBhfX1lLmJmPTE7ZS5mcmFtZXM9W119bnVsbCE9PWEmJnRoKGUsYSl9fTt0aGlzLnVhLm9uZXJyb3I9ZnVuY3Rpb24oYSl7ZS5mKFwiV2ViU29ja2V0IGVycm9yLiAgQ2xvc2luZyBjb25uZWN0aW9uLlwiKTsoYT1hLm1lc3NhZ2V8fGEuZGF0YSkmJmUuZihhKTtlLmdiKCl9fTtxaC5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oKXt9O1xucWguaXNBdmFpbGFibGU9ZnVuY3Rpb24oKXt2YXIgYT0hMTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmbmF2aWdhdG9yLnVzZXJBZ2VudCl7dmFyIGI9bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQW5kcm9pZCAoWzAtOV17MCx9XFwuWzAtOV17MCx9KS8pO2ImJjE8Yi5sZW5ndGgmJjQuND5wYXJzZUZsb2F0KGJbMV0pJiYoYT0hMCl9cmV0dXJuIWEmJm51bGwhPT1waCYmIXJofTtxaC5yZXNwb25zZXNSZXF1aXJlZFRvQmVIZWFsdGh5PTI7cWguaGVhbHRoeVRpbWVvdXQ9M0U0O2c9cWgucHJvdG90eXBlO2cuRWQ9ZnVuY3Rpb24oKXt4Yy5yZW1vdmUoXCJwcmV2aW91c193ZWJzb2NrZXRfZmFpbHVyZVwiKX07ZnVuY3Rpb24gdGgoYSxiKXthLmZyYW1lcy5wdXNoKGIpO2lmKGEuZnJhbWVzLmxlbmd0aD09YS5iZil7dmFyIGM9YS5mcmFtZXMuam9pbihcIlwiKTthLmZyYW1lcz1udWxsO2M9bmIoYyk7YS56ZyhjKX19XG5nLnNlbmQ9ZnVuY3Rpb24oYSl7c2godGhpcyk7YT1CKGEpO3RoaXMub2IrPWEubGVuZ3RoO09iKHRoaXMuVWEsXCJieXRlc19zZW50XCIsYS5sZW5ndGgpO2E9VmMoYSwxNjM4NCk7MTxhLmxlbmd0aCYmdGhpcy51YS5zZW5kKFN0cmluZyhhLmxlbmd0aCkpO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXRoaXMudWEuc2VuZChhW2JdKX07Zy5kZD1mdW5jdGlvbigpe3RoaXMuemI9ITA7dGhpcy5LYyYmKGNsZWFySW50ZXJ2YWwodGhpcy5LYyksdGhpcy5LYz1udWxsKTt0aGlzLnVhJiYodGhpcy51YS5jbG9zZSgpLHRoaXMudWE9bnVsbCl9O2cuZ2I9ZnVuY3Rpb24oKXt0aGlzLnpifHwodGhpcy5mKFwiV2ViU29ja2V0IGlzIGNsb3NpbmcgaXRzZWxmXCIpLHRoaXMuZGQoKSx0aGlzLmhiJiYodGhpcy5oYih0aGlzLkhjKSx0aGlzLmhiPW51bGwpKX07Zy5jbG9zZT1mdW5jdGlvbigpe3RoaXMuemJ8fCh0aGlzLmYoXCJXZWJTb2NrZXQgaXMgYmVpbmcgY2xvc2VkXCIpLHRoaXMuZGQoKSl9O1xuZnVuY3Rpb24gc2goYSl7Y2xlYXJJbnRlcnZhbChhLktjKTthLktjPXNldEludGVydmFsKGZ1bmN0aW9uKCl7YS51YSYmYS51YS5zZW5kKFwiMFwiKTtzaChhKX0sTWF0aC5mbG9vcig0NUUzKSl9O2Z1bmN0aW9uIHVoKGEpe3ZoKHRoaXMsYSl9dmFyIHdoPVtoaCxxaF07ZnVuY3Rpb24gdmgoYSxiKXt2YXIgYz1xaCYmcWguaXNBdmFpbGFibGUoKSxkPWMmJiEoeGMud2Z8fCEwPT09eGMuZ2V0KFwicHJldmlvdXNfd2Vic29ja2V0X2ZhaWx1cmVcIikpO2IuV2cmJihjfHxPKFwid3NzOi8vIFVSTCB1c2VkLCBidXQgYnJvd3NlciBpc24ndCBrbm93biB0byBzdXBwb3J0IHdlYnNvY2tldHMuICBUcnlpbmcgYW55d2F5LlwiKSxkPSEwKTtpZihkKWEuZ2Q9W3FoXTtlbHNle3ZhciBlPWEuZ2Q9W107V2Mod2gsZnVuY3Rpb24oYSxiKXtiJiZiLmlzQXZhaWxhYmxlKCkmJmUucHVzaChiKX0pfX1mdW5jdGlvbiB4aChhKXtpZigwPGEuZ2QubGVuZ3RoKXJldHVybiBhLmdkWzBdO3Rocm93IEVycm9yKFwiTm8gdHJhbnNwb3J0cyBhdmFpbGFibGVcIik7fTtmdW5jdGlvbiB5aChhLGIsYyxkLGUsZixoKXt0aGlzLmlkPWE7dGhpcy5mPU1jKFwiYzpcIit0aGlzLmlkK1wiOlwiKTt0aGlzLmpjPWM7dGhpcy5XYz1kO3RoaXMubGE9ZTt0aGlzLk5lPWY7dGhpcy5GPWI7dGhpcy5NZD1bXTt0aGlzLmZmPTA7dGhpcy5QZj1uZXcgdWgoYik7dGhpcy5UYT0wO3RoaXMuQmI9aDt0aGlzLmYoXCJDb25uZWN0aW9uIGNyZWF0ZWRcIik7emgodGhpcyl9XG5mdW5jdGlvbiB6aChhKXt2YXIgYj14aChhLlBmKTthLko9bmV3IGIoXCJjOlwiK2EuaWQrXCI6XCIrYS5mZisrLGEuRix2b2lkIDAsYS5CYik7YS5SZT1iLnJlc3BvbnNlc1JlcXVpcmVkVG9CZUhlYWx0aHl8fDA7dmFyIGM9QWgoYSxhLkopLGQ9QmgoYSxhLkopO2EuaGQ9YS5KO2EuY2Q9YS5KO2EuRD1udWxsO2EuQWI9ITE7c2V0VGltZW91dChmdW5jdGlvbigpe2EuSiYmYS5KLm9wZW4oYyxkKX0sTWF0aC5mbG9vcigwKSk7Yj1iLmhlYWx0aHlUaW1lb3V0fHwwOzA8YiYmKGEueWQ9c2V0VGltZW91dChmdW5jdGlvbigpe2EueWQ9bnVsbDthLkFifHwoYS5KJiYxMDI0MDA8YS5KLm5iPyhhLmYoXCJDb25uZWN0aW9uIGV4Y2VlZGVkIGhlYWx0aHkgdGltZW91dCBidXQgaGFzIHJlY2VpdmVkIFwiK2EuSi5uYitcIiBieXRlcy4gIE1hcmtpbmcgY29ubmVjdGlvbiBoZWFsdGh5LlwiKSxhLkFiPSEwLGEuSi5FZCgpKTphLkomJjEwMjQwPGEuSi5vYj9hLmYoXCJDb25uZWN0aW9uIGV4Y2VlZGVkIGhlYWx0aHkgdGltZW91dCBidXQgaGFzIHNlbnQgXCIrXG5hLkoub2IrXCIgYnl0ZXMuICBMZWF2aW5nIGNvbm5lY3Rpb24gYWxpdmUuXCIpOihhLmYoXCJDbG9zaW5nIHVuaGVhbHRoeSBjb25uZWN0aW9uIGFmdGVyIHRpbWVvdXQuXCIpLGEuY2xvc2UoKSkpfSxNYXRoLmZsb29yKGIpKSl9ZnVuY3Rpb24gQmgoYSxiKXtyZXR1cm4gZnVuY3Rpb24oYyl7Yj09PWEuSj8oYS5KPW51bGwsY3x8MCE9PWEuVGE/MT09PWEuVGEmJmEuZihcIlJlYWx0aW1lIGNvbm5lY3Rpb24gbG9zdC5cIik6KGEuZihcIlJlYWx0aW1lIGNvbm5lY3Rpb24gZmFpbGVkLlwiKSxcInMtXCI9PT1hLkYuWWEuc3Vic3RyKDAsMikmJih4Yy5yZW1vdmUoXCJob3N0OlwiK2EuRi5ob3N0KSxhLkYuWWE9YS5GLmhvc3QpKSxhLmNsb3NlKCkpOmI9PT1hLkQ/KGEuZihcIlNlY29uZGFyeSBjb25uZWN0aW9uIGxvc3QuXCIpLGM9YS5ELGEuRD1udWxsLGEuaGQhPT1jJiZhLmNkIT09Y3x8YS5jbG9zZSgpKTphLmYoXCJjbG9zaW5nIGFuIG9sZCBjb25uZWN0aW9uXCIpfX1cbmZ1bmN0aW9uIEFoKGEsYil7cmV0dXJuIGZ1bmN0aW9uKGMpe2lmKDIhPWEuVGEpaWYoYj09PWEuY2Qpe3ZhciBkPVRjKFwidFwiLGMpO2M9VGMoXCJkXCIsYyk7aWYoXCJjXCI9PWQpe2lmKGQ9VGMoXCJ0XCIsYyksXCJkXCJpbiBjKWlmKGM9Yy5kLFwiaFwiPT09ZCl7dmFyIGQ9Yy50cyxlPWMudixmPWMuaDthLk5mPWMucztBYyhhLkYsZik7MD09YS5UYSYmKGEuSi5zdGFydCgpLENoKGEsYS5KLGQpLFwiNVwiIT09ZSYmTyhcIlByb3RvY29sIHZlcnNpb24gbWlzbWF0Y2ggZGV0ZWN0ZWRcIiksYz1hLlBmLChjPTE8Yy5nZC5sZW5ndGg/Yy5nZFsxXTpudWxsKSYmRGgoYSxjKSl9ZWxzZSBpZihcIm5cIj09PWQpe2EuZihcInJlY3ZkIGVuZCB0cmFuc21pc3Npb24gb24gcHJpbWFyeVwiKTthLmNkPWEuRDtmb3IoYz0wO2M8YS5NZC5sZW5ndGg7KytjKWEuSWQoYS5NZFtjXSk7YS5NZD1bXTtFaChhKX1lbHNlXCJzXCI9PT1kPyhhLmYoXCJDb25uZWN0aW9uIHNodXRkb3duIGNvbW1hbmQgcmVjZWl2ZWQuIFNodXR0aW5nIGRvd24uLi5cIiksXG5hLk5lJiYoYS5OZShjKSxhLk5lPW51bGwpLGEubGE9bnVsbCxhLmNsb3NlKCkpOlwiclwiPT09ZD8oYS5mKFwiUmVzZXQgcGFja2V0IHJlY2VpdmVkLiAgTmV3IGhvc3Q6IFwiK2MpLEFjKGEuRixjKSwxPT09YS5UYT9hLmNsb3NlKCk6KEZoKGEpLHpoKGEpKSk6XCJlXCI9PT1kP05jKFwiU2VydmVyIEVycm9yOiBcIitjKTpcIm9cIj09PWQ/KGEuZihcImdvdCBwb25nIG9uIHByaW1hcnkuXCIpLEdoKGEpLEhoKGEpKTpOYyhcIlVua25vd24gY29udHJvbCBwYWNrZXQgY29tbWFuZDogXCIrZCl9ZWxzZVwiZFwiPT1kJiZhLklkKGMpfWVsc2UgaWYoYj09PWEuRClpZihkPVRjKFwidFwiLGMpLGM9VGMoXCJkXCIsYyksXCJjXCI9PWQpXCJ0XCJpbiBjJiYoYz1jLnQsXCJhXCI9PT1jP0loKGEpOlwiclwiPT09Yz8oYS5mKFwiR290IGEgcmVzZXQgb24gc2Vjb25kYXJ5LCBjbG9zaW5nIGl0XCIpLGEuRC5jbG9zZSgpLGEuaGQhPT1hLkQmJmEuY2QhPT1hLkR8fGEuY2xvc2UoKSk6XCJvXCI9PT1jJiYoYS5mKFwiZ290IHBvbmcgb24gc2Vjb25kYXJ5LlwiKSxcbmEuTWYtLSxJaChhKSkpO2Vsc2UgaWYoXCJkXCI9PWQpYS5NZC5wdXNoKGMpO2Vsc2UgdGhyb3cgRXJyb3IoXCJVbmtub3duIHByb3RvY29sIGxheWVyOiBcIitkKTtlbHNlIGEuZihcIm1lc3NhZ2Ugb24gb2xkIGNvbm5lY3Rpb25cIil9fXloLnByb3RvdHlwZS5GYT1mdW5jdGlvbihhKXtKaCh0aGlzLHt0OlwiZFwiLGQ6YX0pfTtmdW5jdGlvbiBFaChhKXthLmhkPT09YS5EJiZhLmNkPT09YS5EJiYoYS5mKFwiY2xlYW5pbmcgdXAgYW5kIHByb21vdGluZyBhIGNvbm5lY3Rpb246IFwiK2EuRC5yZSksYS5KPWEuRCxhLkQ9bnVsbCl9XG5mdW5jdGlvbiBJaChhKXswPj1hLk1mPyhhLmYoXCJTZWNvbmRhcnkgY29ubmVjdGlvbiBpcyBoZWFsdGh5LlwiKSxhLkFiPSEwLGEuRC5FZCgpLGEuRC5zdGFydCgpLGEuZihcInNlbmRpbmcgY2xpZW50IGFjayBvbiBzZWNvbmRhcnlcIiksYS5ELnNlbmQoe3Q6XCJjXCIsZDp7dDpcImFcIixkOnt9fX0pLGEuZihcIkVuZGluZyB0cmFuc21pc3Npb24gb24gcHJpbWFyeVwiKSxhLkouc2VuZCh7dDpcImNcIixkOnt0OlwiblwiLGQ6e319fSksYS5oZD1hLkQsRWgoYSkpOihhLmYoXCJzZW5kaW5nIHBpbmcgb24gc2Vjb25kYXJ5LlwiKSxhLkQuc2VuZCh7dDpcImNcIixkOnt0OlwicFwiLGQ6e319fSkpfXloLnByb3RvdHlwZS5JZD1mdW5jdGlvbihhKXtHaCh0aGlzKTt0aGlzLmpjKGEpfTtmdW5jdGlvbiBHaChhKXthLkFifHwoYS5SZS0tLDA+PWEuUmUmJihhLmYoXCJQcmltYXJ5IGNvbm5lY3Rpb24gaXMgaGVhbHRoeS5cIiksYS5BYj0hMCxhLkouRWQoKSkpfVxuZnVuY3Rpb24gRGgoYSxiKXthLkQ9bmV3IGIoXCJjOlwiK2EuaWQrXCI6XCIrYS5mZisrLGEuRixhLk5mKTthLk1mPWIucmVzcG9uc2VzUmVxdWlyZWRUb0JlSGVhbHRoeXx8MDthLkQub3BlbihBaChhLGEuRCksQmgoYSxhLkQpKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YS5EJiYoYS5mKFwiVGltZWQgb3V0IHRyeWluZyB0byB1cGdyYWRlLlwiKSxhLkQuY2xvc2UoKSl9LE1hdGguZmxvb3IoNkU0KSl9ZnVuY3Rpb24gQ2goYSxiLGMpe2EuZihcIlJlYWx0aW1lIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQuXCIpO2EuSj1iO2EuVGE9MTthLldjJiYoYS5XYyhjLGEuTmYpLGEuV2M9bnVsbCk7MD09PWEuUmU/KGEuZihcIlByaW1hcnkgY29ubmVjdGlvbiBpcyBoZWFsdGh5LlwiKSxhLkFiPSEwKTpzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7SGgoYSl9LE1hdGguZmxvb3IoNUUzKSl9XG5mdW5jdGlvbiBIaChhKXthLkFifHwxIT09YS5UYXx8KGEuZihcInNlbmRpbmcgcGluZyBvbiBwcmltYXJ5LlwiKSxKaChhLHt0OlwiY1wiLGQ6e3Q6XCJwXCIsZDp7fX19KSl9ZnVuY3Rpb24gSmgoYSxiKXtpZigxIT09YS5UYSl0aHJvd1wiQ29ubmVjdGlvbiBpcyBub3QgY29ubmVjdGVkXCI7YS5oZC5zZW5kKGIpfXloLnByb3RvdHlwZS5jbG9zZT1mdW5jdGlvbigpezIhPT10aGlzLlRhJiYodGhpcy5mKFwiQ2xvc2luZyByZWFsdGltZSBjb25uZWN0aW9uLlwiKSx0aGlzLlRhPTIsRmgodGhpcyksdGhpcy5sYSYmKHRoaXMubGEoKSx0aGlzLmxhPW51bGwpKX07ZnVuY3Rpb24gRmgoYSl7YS5mKFwiU2h1dHRpbmcgZG93biBhbGwgY29ubmVjdGlvbnNcIik7YS5KJiYoYS5KLmNsb3NlKCksYS5KPW51bGwpO2EuRCYmKGEuRC5jbG9zZSgpLGEuRD1udWxsKTthLnlkJiYoY2xlYXJUaW1lb3V0KGEueWQpLGEueWQ9bnVsbCl9O2Z1bmN0aW9uIEtoKGEsYixjLGQpe3RoaXMuaWQ9TGgrKzt0aGlzLmY9TWMoXCJwOlwiK3RoaXMuaWQrXCI6XCIpO3RoaXMueGY9dGhpcy5FZT0hMTt0aGlzLiQ9e307dGhpcy5xYT1bXTt0aGlzLlljPTA7dGhpcy5WYz1bXTt0aGlzLm9hPSExO3RoaXMuWmE9MUUzO3RoaXMuRmQ9M0U1O3RoaXMuR2I9Yjt0aGlzLlVjPWM7dGhpcy5PZT1kO3RoaXMuRj1hO3RoaXMuc2I9dGhpcy5BYT10aGlzLklhPXRoaXMuQmI9dGhpcy5XZT1udWxsO3RoaXMuT2I9ITE7dGhpcy5UZD17fTt0aGlzLkxnPTA7dGhpcy5uZj0hMDt0aGlzLkxjPXRoaXMuR2U9bnVsbDtNaCh0aGlzLDApO0hlLnViKCkuRWIoXCJ2aXNpYmxlXCIsdGhpcy5DZyx0aGlzKTstMT09PWEuaG9zdC5pbmRleE9mKFwiZmJsb2NhbFwiKSYmR2UudWIoKS5FYihcIm9ubGluZVwiLHRoaXMuQWcsdGhpcyl9dmFyIExoPTAsTmg9MDtnPUtoLnByb3RvdHlwZTtcbmcuRmE9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPSsrdGhpcy5MZzthPXtyOmQsYTphLGI6Yn07dGhpcy5mKEIoYSkpO0sodGhpcy5vYSxcInNlbmRSZXF1ZXN0IGNhbGwgd2hlbiB3ZSdyZSBub3QgY29ubmVjdGVkIG5vdCBhbGxvd2VkLlwiKTt0aGlzLklhLkZhKGEpO2MmJih0aGlzLlRkW2RdPWMpfTtnLnlmPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEudmEoKSxmPWEucGF0aC50b1N0cmluZygpO3RoaXMuZihcIkxpc3RlbiBjYWxsZWQgZm9yIFwiK2YrXCIgXCIrZSk7dGhpcy4kW2ZdPXRoaXMuJFtmXXx8e307SyhmZShhLm4pfHwhUyhhLm4pLFwibGlzdGVuKCkgY2FsbGVkIGZvciBub24tZGVmYXVsdCBidXQgY29tcGxldGUgcXVlcnlcIik7SyghdGhpcy4kW2ZdW2VdLFwibGlzdGVuKCkgY2FsbGVkIHR3aWNlIGZvciBzYW1lIHBhdGgvcXVlcnlJZC5cIik7YT17SDpkLHhkOmIsSWc6YSx0YWc6Y307dGhpcy4kW2ZdW2VdPWE7dGhpcy5vYSYmT2godGhpcyxhKX07XG5mdW5jdGlvbiBPaChhLGIpe3ZhciBjPWIuSWcsZD1jLnBhdGgudG9TdHJpbmcoKSxlPWMudmEoKTthLmYoXCJMaXN0ZW4gb24gXCIrZCtcIiBmb3IgXCIrZSk7dmFyIGY9e3A6ZH07Yi50YWcmJihmLnE9ZWUoYy5uKSxmLnQ9Yi50YWcpO2YuaD1iLnhkKCk7YS5GYShcInFcIixmLGZ1bmN0aW9uKGYpe3ZhciBrPWYuZCxsPWYucztpZihrJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJnYoayxcIndcIikpe3ZhciBtPXcoayxcIndcIik7ZWEobSkmJjA8PU5hKG0sXCJub19pbmRleFwiKSYmTyhcIlVzaW5nIGFuIHVuc3BlY2lmaWVkIGluZGV4LiBDb25zaWRlciBhZGRpbmcgXCIrKCdcIi5pbmRleE9uXCI6IFwiJytjLm4uZy50b1N0cmluZygpKydcIicpK1wiIGF0IFwiK2MucGF0aC50b1N0cmluZygpK1wiIHRvIHlvdXIgc2VjdXJpdHkgcnVsZXMgZm9yIGJldHRlciBwZXJmb3JtYW5jZVwiKX0oYS4kW2RdJiZhLiRbZF1bZV0pPT09YiYmKGEuZihcImxpc3RlbiByZXNwb25zZVwiLGYpLFwib2tcIiE9PWwmJlBoKGEsZCxlKSxiLkgmJmIuSChsLFxuaykpfSl9Zy5NPWZ1bmN0aW9uKGEsYixjKXt0aGlzLkFhPXtpZzphLG9mOiExLHpjOmIsbWQ6Y307dGhpcy5mKFwiQXV0aGVudGljYXRpbmcgdXNpbmcgY3JlZGVudGlhbDogXCIrYSk7UWgodGhpcyk7KGI9NDA9PWEubGVuZ3RoKXx8KGE9JGMoYSkuQmMsYj1cIm9iamVjdFwiPT09dHlwZW9mIGEmJiEwPT09dyhhLFwiYWRtaW5cIikpO2ImJih0aGlzLmYoXCJBZG1pbiBhdXRoIGNyZWRlbnRpYWwgZGV0ZWN0ZWQuICBSZWR1Y2luZyBtYXggcmVjb25uZWN0IHRpbWUuXCIpLHRoaXMuRmQ9M0U0KX07Zy5nZT1mdW5jdGlvbihhKXtkZWxldGUgdGhpcy5BYTt0aGlzLm9hJiZ0aGlzLkZhKFwidW5hdXRoXCIse30sZnVuY3Rpb24oYil7YShiLnMsYi5kKX0pfTtcbmZ1bmN0aW9uIFFoKGEpe3ZhciBiPWEuQWE7YS5vYSYmYiYmYS5GYShcImF1dGhcIix7Y3JlZDpiLmlnfSxmdW5jdGlvbihjKXt2YXIgZD1jLnM7Yz1jLmR8fFwiZXJyb3JcIjtcIm9rXCIhPT1kJiZhLkFhPT09YiYmZGVsZXRlIGEuQWE7Yi5vZj9cIm9rXCIhPT1kJiZiLm1kJiZiLm1kKGQsYyk6KGIub2Y9ITAsYi56YyYmYi56YyhkLGMpKX0pfWcuUmY9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnBhdGgudG9TdHJpbmcoKSxkPWEudmEoKTt0aGlzLmYoXCJVbmxpc3RlbiBjYWxsZWQgZm9yIFwiK2MrXCIgXCIrZCk7SyhmZShhLm4pfHwhUyhhLm4pLFwidW5saXN0ZW4oKSBjYWxsZWQgZm9yIG5vbi1kZWZhdWx0IGJ1dCBjb21wbGV0ZSBxdWVyeVwiKTtpZihQaCh0aGlzLGMsZCkmJnRoaXMub2Epe3ZhciBlPWVlKGEubik7dGhpcy5mKFwiVW5saXN0ZW4gb24gXCIrYytcIiBmb3IgXCIrZCk7Yz17cDpjfTtiJiYoYy5xPWUsYy50PWIpO3RoaXMuRmEoXCJuXCIsYyl9fTtcbmcuTWU9ZnVuY3Rpb24oYSxiLGMpe3RoaXMub2E/UmgodGhpcyxcIm9cIixhLGIsYyk6dGhpcy5WYy5wdXNoKHskYzphLGFjdGlvbjpcIm9cIixkYXRhOmIsSDpjfSl9O2cuQ2Y9ZnVuY3Rpb24oYSxiLGMpe3RoaXMub2E/UmgodGhpcyxcIm9tXCIsYSxiLGMpOnRoaXMuVmMucHVzaCh7JGM6YSxhY3Rpb246XCJvbVwiLGRhdGE6YixIOmN9KX07Zy5KZD1mdW5jdGlvbihhLGIpe3RoaXMub2E/UmgodGhpcyxcIm9jXCIsYSxudWxsLGIpOnRoaXMuVmMucHVzaCh7JGM6YSxhY3Rpb246XCJvY1wiLGRhdGE6bnVsbCxIOmJ9KX07ZnVuY3Rpb24gUmgoYSxiLGMsZCxlKXtjPXtwOmMsZDpkfTthLmYoXCJvbkRpc2Nvbm5lY3QgXCIrYixjKTthLkZhKGIsYyxmdW5jdGlvbihhKXtlJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShhLnMsYS5kKX0sTWF0aC5mbG9vcigwKSl9KX1nLnB1dD1mdW5jdGlvbihhLGIsYyxkKXtTaCh0aGlzLFwicFwiLGEsYixjLGQpfTtcbmcuemY9ZnVuY3Rpb24oYSxiLGMsZCl7U2godGhpcyxcIm1cIixhLGIsYyxkKX07ZnVuY3Rpb24gU2goYSxiLGMsZCxlLGYpe2Q9e3A6YyxkOmR9O24oZikmJihkLmg9Zik7YS5xYS5wdXNoKHthY3Rpb246YixKZjpkLEg6ZX0pO2EuWWMrKztiPWEucWEubGVuZ3RoLTE7YS5vYT9UaChhLGIpOmEuZihcIkJ1ZmZlcmluZyBwdXQ6IFwiK2MpfWZ1bmN0aW9uIFRoKGEsYil7dmFyIGM9YS5xYVtiXS5hY3Rpb24sZD1hLnFhW2JdLkpmLGU9YS5xYVtiXS5IO2EucWFbYl0uSmc9YS5vYTthLkZhKGMsZCxmdW5jdGlvbihkKXthLmYoYytcIiByZXNwb25zZVwiLGQpO2RlbGV0ZSBhLnFhW2JdO2EuWWMtLTswPT09YS5ZYyYmKGEucWE9W10pO2UmJmUoZC5zLGQuZCl9KX1cbmcuVWU9ZnVuY3Rpb24oYSl7dGhpcy5vYSYmKGE9e2M6YX0sdGhpcy5mKFwicmVwb3J0U3RhdHNcIixhKSx0aGlzLkZhKFwic1wiLGEsZnVuY3Rpb24oYSl7XCJva1wiIT09YS5zJiZ0aGlzLmYoXCJyZXBvcnRTdGF0c1wiLFwiRXJyb3Igc2VuZGluZyBzdGF0czogXCIrYS5kKX0pKX07XG5nLklkPWZ1bmN0aW9uKGEpe2lmKFwiclwiaW4gYSl7dGhpcy5mKFwiZnJvbSBzZXJ2ZXI6IFwiK0IoYSkpO3ZhciBiPWEucixjPXRoaXMuVGRbYl07YyYmKGRlbGV0ZSB0aGlzLlRkW2JdLGMoYS5iKSl9ZWxzZXtpZihcImVycm9yXCJpbiBhKXRocm93XCJBIHNlcnZlci1zaWRlIGVycm9yIGhhcyBvY2N1cnJlZDogXCIrYS5lcnJvcjtcImFcImluIGEmJihiPWEuYSxjPWEuYix0aGlzLmYoXCJoYW5kbGVTZXJ2ZXJNZXNzYWdlXCIsYixjKSxcImRcIj09PWI/dGhpcy5HYihjLnAsYy5kLCExLGMudCk6XCJtXCI9PT1iP3RoaXMuR2IoYy5wLGMuZCwhMCxjLnQpOlwiY1wiPT09Yj9VaCh0aGlzLGMucCxjLnEpOlwiYWNcIj09PWI/KGE9Yy5zLGI9Yy5kLGM9dGhpcy5BYSxkZWxldGUgdGhpcy5BYSxjJiZjLm1kJiZjLm1kKGEsYikpOlwic2RcIj09PWI/dGhpcy5XZT90aGlzLldlKGMpOlwibXNnXCJpbiBjJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJmNvbnNvbGUubG9nKFwiRklSRUJBU0U6IFwiK2MubXNnLnJlcGxhY2UoXCJcXG5cIixcblwiXFxuRklSRUJBU0U6IFwiKSk6TmMoXCJVbnJlY29nbml6ZWQgYWN0aW9uIHJlY2VpdmVkIGZyb20gc2VydmVyOiBcIitCKGIpK1wiXFxuQXJlIHlvdSB1c2luZyB0aGUgbGF0ZXN0IGNsaWVudD9cIikpfX07Zy5XYz1mdW5jdGlvbihhLGIpe3RoaXMuZihcImNvbm5lY3Rpb24gcmVhZHlcIik7dGhpcy5vYT0hMDt0aGlzLkxjPShuZXcgRGF0ZSkuZ2V0VGltZSgpO3RoaXMuT2Uoe3NlcnZlclRpbWVPZmZzZXQ6YS0obmV3IERhdGUpLmdldFRpbWUoKX0pO3RoaXMuQmI9YjtpZih0aGlzLm5mKXt2YXIgYz17fTtjW1wic2RrLmpzLlwiK2hiLnJlcGxhY2UoL1xcLi9nLFwiLVwiKV09MTt5ZygpJiYoY1tcImZyYW1ld29yay5jb3Jkb3ZhXCJdPTEpO3RoaXMuVWUoYyl9VmgodGhpcyk7dGhpcy5uZj0hMTt0aGlzLlVjKCEwKX07XG5mdW5jdGlvbiBNaChhLGIpe0soIWEuSWEsXCJTY2hlZHVsaW5nIGEgY29ubmVjdCB3aGVuIHdlJ3JlIGFscmVhZHkgY29ubmVjdGVkL2luZz9cIik7YS5zYiYmY2xlYXJUaW1lb3V0KGEuc2IpO2Euc2I9c2V0VGltZW91dChmdW5jdGlvbigpe2Euc2I9bnVsbDtXaChhKX0sTWF0aC5mbG9vcihiKSl9Zy5DZz1mdW5jdGlvbihhKXthJiYhdGhpcy5PYiYmdGhpcy5aYT09PXRoaXMuRmQmJih0aGlzLmYoXCJXaW5kb3cgYmVjYW1lIHZpc2libGUuICBSZWR1Y2luZyBkZWxheS5cIiksdGhpcy5aYT0xRTMsdGhpcy5JYXx8TWgodGhpcywwKSk7dGhpcy5PYj1hfTtnLkFnPWZ1bmN0aW9uKGEpe2E/KHRoaXMuZihcIkJyb3dzZXIgd2VudCBvbmxpbmUuXCIpLHRoaXMuWmE9MUUzLHRoaXMuSWF8fE1oKHRoaXMsMCkpOih0aGlzLmYoXCJCcm93c2VyIHdlbnQgb2ZmbGluZS4gIEtpbGxpbmcgY29ubmVjdGlvbi5cIiksdGhpcy5JYSYmdGhpcy5JYS5jbG9zZSgpKX07XG5nLkRmPWZ1bmN0aW9uKCl7dGhpcy5mKFwiZGF0YSBjbGllbnQgZGlzY29ubmVjdGVkXCIpO3RoaXMub2E9ITE7dGhpcy5JYT1udWxsO2Zvcih2YXIgYT0wO2E8dGhpcy5xYS5sZW5ndGg7YSsrKXt2YXIgYj10aGlzLnFhW2FdO2ImJlwiaFwiaW4gYi5KZiYmYi5KZyYmKGIuSCYmYi5IKFwiZGlzY29ubmVjdFwiKSxkZWxldGUgdGhpcy5xYVthXSx0aGlzLlljLS0pfTA9PT10aGlzLlljJiYodGhpcy5xYT1bXSk7dGhpcy5UZD17fTtYaCh0aGlzKSYmKHRoaXMuT2I/dGhpcy5MYyYmKDNFNDwobmV3IERhdGUpLmdldFRpbWUoKS10aGlzLkxjJiYodGhpcy5aYT0xRTMpLHRoaXMuTGM9bnVsbCk6KHRoaXMuZihcIldpbmRvdyBpc24ndCB2aXNpYmxlLiAgRGVsYXlpbmcgcmVjb25uZWN0LlwiKSx0aGlzLlphPXRoaXMuRmQsdGhpcy5HZT0obmV3IERhdGUpLmdldFRpbWUoKSksYT1NYXRoLm1heCgwLHRoaXMuWmEtKChuZXcgRGF0ZSkuZ2V0VGltZSgpLXRoaXMuR2UpKSxhKj1NYXRoLnJhbmRvbSgpLHRoaXMuZihcIlRyeWluZyB0byByZWNvbm5lY3QgaW4gXCIrXG5hK1wibXNcIiksTWgodGhpcyxhKSx0aGlzLlphPU1hdGgubWluKHRoaXMuRmQsMS4zKnRoaXMuWmEpKTt0aGlzLlVjKCExKX07ZnVuY3Rpb24gV2goYSl7aWYoWGgoYSkpe2EuZihcIk1ha2luZyBhIGNvbm5lY3Rpb24gYXR0ZW1wdFwiKTthLkdlPShuZXcgRGF0ZSkuZ2V0VGltZSgpO2EuTGM9bnVsbDt2YXIgYj1xKGEuSWQsYSksYz1xKGEuV2MsYSksZD1xKGEuRGYsYSksZT1hLmlkK1wiOlwiK05oKys7YS5JYT1uZXcgeWgoZSxhLkYsYixjLGQsZnVuY3Rpb24oYil7TyhiK1wiIChcIithLkYudG9TdHJpbmcoKStcIilcIik7YS54Zj0hMH0sYS5CYil9fWcueWI9ZnVuY3Rpb24oKXt0aGlzLkVlPSEwO3RoaXMuSWE/dGhpcy5JYS5jbG9zZSgpOih0aGlzLnNiJiYoY2xlYXJUaW1lb3V0KHRoaXMuc2IpLHRoaXMuc2I9bnVsbCksdGhpcy5vYSYmdGhpcy5EZigpKX07Zy5yYz1mdW5jdGlvbigpe3RoaXMuRWU9ITE7dGhpcy5aYT0xRTM7dGhpcy5JYXx8TWgodGhpcywwKX07XG5mdW5jdGlvbiBVaChhLGIsYyl7Yz1jP1FhKGMsZnVuY3Rpb24oYSl7cmV0dXJuIFVjKGEpfSkuam9pbihcIiRcIik6XCJkZWZhdWx0XCI7KGE9UGgoYSxiLGMpKSYmYS5IJiZhLkgoXCJwZXJtaXNzaW9uX2RlbmllZFwiKX1mdW5jdGlvbiBQaChhLGIsYyl7Yj0obmV3IEwoYikpLnRvU3RyaW5nKCk7dmFyIGQ7bihhLiRbYl0pPyhkPWEuJFtiXVtjXSxkZWxldGUgYS4kW2JdW2NdLDA9PT1wYShhLiRbYl0pJiZkZWxldGUgYS4kW2JdKTpkPXZvaWQgMDtyZXR1cm4gZH1mdW5jdGlvbiBWaChhKXtRaChhKTtyKGEuJCxmdW5jdGlvbihiKXtyKGIsZnVuY3Rpb24oYil7T2goYSxiKX0pfSk7Zm9yKHZhciBiPTA7YjxhLnFhLmxlbmd0aDtiKyspYS5xYVtiXSYmVGgoYSxiKTtmb3IoO2EuVmMubGVuZ3RoOyliPWEuVmMuc2hpZnQoKSxSaChhLGIuYWN0aW9uLGIuJGMsYi5kYXRhLGIuSCl9ZnVuY3Rpb24gWGgoYSl7dmFyIGI7Yj1HZS51YigpLmtjO3JldHVybiFhLnhmJiYhYS5FZSYmYn07dmFyIFY9e29nOmZ1bmN0aW9uKCl7aWg9cmg9ITB9fTtWLmZvcmNlTG9uZ1BvbGxpbmc9Vi5vZztWLnBnPWZ1bmN0aW9uKCl7amg9ITB9O1YuZm9yY2VXZWJTb2NrZXRzPVYucGc7Vi5QZz1mdW5jdGlvbihhLGIpe2Euay5SYS5XZT1ifTtWLnNldFNlY3VyaXR5RGVidWdDYWxsYmFjaz1WLlBnO1YuWWU9ZnVuY3Rpb24oYSxiKXthLmsuWWUoYil9O1Yuc3RhdHM9Vi5ZZTtWLlplPWZ1bmN0aW9uKGEsYil7YS5rLlplKGIpfTtWLnN0YXRzSW5jcmVtZW50Q291bnRlcj1WLlplO1Yuc2Q9ZnVuY3Rpb24oYSl7cmV0dXJuIGEuay5zZH07Vi5kYXRhVXBkYXRlQ291bnQ9Vi5zZDtWLnNnPWZ1bmN0aW9uKGEsYil7YS5rLkRlPWJ9O1YuaW50ZXJjZXB0U2VydmVyRGF0YT1WLnNnO1YueWc9ZnVuY3Rpb24oYSl7bmV3IElnKGEpfTtWLm9uUG9wdXBPcGVuPVYueWc7Vi5OZz1mdW5jdGlvbihhKXtzZz1hfTtWLnNldEF1dGhlbnRpY2F0aW9uU2VydmVyPVYuTmc7ZnVuY3Rpb24gUShhLGIsYyl7dGhpcy5BPWE7dGhpcy5XPWI7dGhpcy5nPWN9US5wcm90b3R5cGUuST1mdW5jdGlvbigpe3goXCJGaXJlYmFzZS5EYXRhU25hcHNob3QudmFsXCIsMCwwLGFyZ3VtZW50cy5sZW5ndGgpO3JldHVybiB0aGlzLkEuSSgpfTtRLnByb3RvdHlwZS52YWw9US5wcm90b3R5cGUuSTtRLnByb3RvdHlwZS5tZj1mdW5jdGlvbigpe3goXCJGaXJlYmFzZS5EYXRhU25hcHNob3QuZXhwb3J0VmFsXCIsMCwwLGFyZ3VtZW50cy5sZW5ndGgpO3JldHVybiB0aGlzLkEuSSghMCl9O1EucHJvdG90eXBlLmV4cG9ydFZhbD1RLnByb3RvdHlwZS5tZjtRLnByb3RvdHlwZS5uZz1mdW5jdGlvbigpe3goXCJGaXJlYmFzZS5EYXRhU25hcHNob3QuZXhpc3RzXCIsMCwwLGFyZ3VtZW50cy5sZW5ndGgpO3JldHVybiF0aGlzLkEuZSgpfTtRLnByb3RvdHlwZS5leGlzdHM9US5wcm90b3R5cGUubmc7XG5RLnByb3RvdHlwZS51PWZ1bmN0aW9uKGEpe3goXCJGaXJlYmFzZS5EYXRhU25hcHNob3QuY2hpbGRcIiwwLDEsYXJndW1lbnRzLmxlbmd0aCk7Z2EoYSkmJihhPVN0cmluZyhhKSk7aWcoXCJGaXJlYmFzZS5EYXRhU25hcHNob3QuY2hpbGRcIixhKTt2YXIgYj1uZXcgTChhKSxjPXRoaXMuVy51KGIpO3JldHVybiBuZXcgUSh0aGlzLkEuUShiKSxjLE4pfTtRLnByb3RvdHlwZS5jaGlsZD1RLnByb3RvdHlwZS51O1EucHJvdG90eXBlLkRhPWZ1bmN0aW9uKGEpe3goXCJGaXJlYmFzZS5EYXRhU25hcHNob3QuaGFzQ2hpbGRcIiwxLDEsYXJndW1lbnRzLmxlbmd0aCk7aWcoXCJGaXJlYmFzZS5EYXRhU25hcHNob3QuaGFzQ2hpbGRcIixhKTt2YXIgYj1uZXcgTChhKTtyZXR1cm4hdGhpcy5BLlEoYikuZSgpfTtRLnByb3RvdHlwZS5oYXNDaGlsZD1RLnByb3RvdHlwZS5EYTtcblEucHJvdG90eXBlLkM9ZnVuY3Rpb24oKXt4KFwiRmlyZWJhc2UuRGF0YVNuYXBzaG90LmdldFByaW9yaXR5XCIsMCwwLGFyZ3VtZW50cy5sZW5ndGgpO3JldHVybiB0aGlzLkEuQygpLkkoKX07US5wcm90b3R5cGUuZ2V0UHJpb3JpdHk9US5wcm90b3R5cGUuQztRLnByb3RvdHlwZS5mb3JFYWNoPWZ1bmN0aW9uKGEpe3goXCJGaXJlYmFzZS5EYXRhU25hcHNob3QuZm9yRWFjaFwiLDEsMSxhcmd1bWVudHMubGVuZ3RoKTtBKFwiRmlyZWJhc2UuRGF0YVNuYXBzaG90LmZvckVhY2hcIiwxLGEsITEpO2lmKHRoaXMuQS5LKCkpcmV0dXJuITE7dmFyIGI9dGhpcztyZXR1cm4hIXRoaXMuQS5QKHRoaXMuZyxmdW5jdGlvbihjLGQpe3JldHVybiBhKG5ldyBRKGQsYi5XLnUoYyksTikpfSl9O1EucHJvdG90eXBlLmZvckVhY2g9US5wcm90b3R5cGUuZm9yRWFjaDtcblEucHJvdG90eXBlLndkPWZ1bmN0aW9uKCl7eChcIkZpcmViYXNlLkRhdGFTbmFwc2hvdC5oYXNDaGlsZHJlblwiLDAsMCxhcmd1bWVudHMubGVuZ3RoKTtyZXR1cm4gdGhpcy5BLksoKT8hMTohdGhpcy5BLmUoKX07US5wcm90b3R5cGUuaGFzQ2hpbGRyZW49US5wcm90b3R5cGUud2Q7US5wcm90b3R5cGUubmFtZT1mdW5jdGlvbigpe08oXCJGaXJlYmFzZS5EYXRhU25hcHNob3QubmFtZSgpIGJlaW5nIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgRmlyZWJhc2UuRGF0YVNuYXBzaG90LmtleSgpIGluc3RlYWQuXCIpO3goXCJGaXJlYmFzZS5EYXRhU25hcHNob3QubmFtZVwiLDAsMCxhcmd1bWVudHMubGVuZ3RoKTtyZXR1cm4gdGhpcy5rZXkoKX07US5wcm90b3R5cGUubmFtZT1RLnByb3RvdHlwZS5uYW1lO1EucHJvdG90eXBlLmtleT1mdW5jdGlvbigpe3goXCJGaXJlYmFzZS5EYXRhU25hcHNob3Qua2V5XCIsMCwwLGFyZ3VtZW50cy5sZW5ndGgpO3JldHVybiB0aGlzLlcua2V5KCl9O1xuUS5wcm90b3R5cGUua2V5PVEucHJvdG90eXBlLmtleTtRLnByb3RvdHlwZS5EYj1mdW5jdGlvbigpe3goXCJGaXJlYmFzZS5EYXRhU25hcHNob3QubnVtQ2hpbGRyZW5cIiwwLDAsYXJndW1lbnRzLmxlbmd0aCk7cmV0dXJuIHRoaXMuQS5EYigpfTtRLnByb3RvdHlwZS5udW1DaGlsZHJlbj1RLnByb3RvdHlwZS5EYjtRLnByb3RvdHlwZS5JYj1mdW5jdGlvbigpe3goXCJGaXJlYmFzZS5EYXRhU25hcHNob3QucmVmXCIsMCwwLGFyZ3VtZW50cy5sZW5ndGgpO3JldHVybiB0aGlzLld9O1EucHJvdG90eXBlLnJlZj1RLnByb3RvdHlwZS5JYjtmdW5jdGlvbiBZaChhLGIpe3RoaXMuRj1hO3RoaXMuVWE9UmIoYSk7dGhpcy5mZD1udWxsO3RoaXMuZGE9bmV3IHZiO3RoaXMuSGQ9MTt0aGlzLlJhPW51bGw7Ynx8MDw9KFwib2JqZWN0XCI9PT10eXBlb2Ygd2luZG93JiZ3aW5kb3cubmF2aWdhdG9yJiZ3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudHx8XCJcIikuc2VhcmNoKC9nb29nbGVib3R8Z29vZ2xlIHdlYm1hc3RlciB0b29sc3xiaW5nYm90fHlhaG9vISBzbHVycHxiYWlkdXNwaWRlcnx5YW5kZXhib3R8ZHVja2R1Y2tib3QvaSk/KHRoaXMuYmE9bmV3IEFlKHRoaXMuRixxKHRoaXMuR2IsdGhpcykpLHNldFRpbWVvdXQocSh0aGlzLlVjLHRoaXMsITApLDApKTp0aGlzLmJhPXRoaXMuUmE9bmV3IEtoKHRoaXMuRixxKHRoaXMuR2IsdGhpcykscSh0aGlzLlVjLHRoaXMpLHEodGhpcy5PZSx0aGlzKSk7dGhpcy5TZz1TYihhLHEoZnVuY3Rpb24oKXtyZXR1cm4gbmV3IE1iKHRoaXMuVWEsdGhpcy5iYSl9LHRoaXMpKTt0aGlzLnVjPW5ldyBSZjtcbnRoaXMuQ2U9bmV3IG9iO3ZhciBjPXRoaXM7dGhpcy5DZD1uZXcgdmYoe1hlOmZ1bmN0aW9uKGEsYixmLGgpe2I9W107Zj1jLkNlLmooYS5wYXRoKTtmLmUoKXx8KGI9eGYoYy5DZCxuZXcgWGIoYmYsYS5wYXRoLGYpKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aChcIm9rXCIpfSwwKSk7cmV0dXJuIGJ9LGFlOmJhfSk7WmgodGhpcyxcImNvbm5lY3RlZFwiLCExKTt0aGlzLmxhPW5ldyBxYzt0aGlzLk09bmV3IFNnKGEscSh0aGlzLmJhLk0sdGhpcy5iYSkscSh0aGlzLmJhLmdlLHRoaXMuYmEpLHEodGhpcy5MZSx0aGlzKSk7dGhpcy5zZD0wO3RoaXMuRGU9bnVsbDt0aGlzLkw9bmV3IHZmKHtYZTpmdW5jdGlvbihhLGIsZixoKXtjLmJhLnlmKGEsZixiLGZ1bmN0aW9uKGIsZSl7dmFyIGY9aChiLGUpO0FiKGMuZGEsYS5wYXRoLGYpfSk7cmV0dXJuW119LGFlOmZ1bmN0aW9uKGEsYil7Yy5iYS5SZihhLGIpfX0pfWc9WWgucHJvdG90eXBlO1xuZy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybih0aGlzLkYua2I/XCJodHRwczovL1wiOlwiaHR0cDovL1wiKSt0aGlzLkYuaG9zdH07Zy5uYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuRi5oY307ZnVuY3Rpb24gJGgoYSl7YT1hLkNlLmoobmV3IEwoXCIuaW5mby9zZXJ2ZXJUaW1lT2Zmc2V0XCIpKS5JKCl8fDA7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lKCkrYX1mdW5jdGlvbiBhaShhKXthPWE9e3RpbWVzdGFtcDokaChhKX07YS50aW1lc3RhbXA9YS50aW1lc3RhbXB8fChuZXcgRGF0ZSkuZ2V0VGltZSgpO3JldHVybiBhfVxuZy5HYj1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLnNkKys7dmFyIGU9bmV3IEwoYSk7Yj10aGlzLkRlP3RoaXMuRGUoYSxiKTpiO2E9W107ZD9jPyhiPW5hKGIsZnVuY3Rpb24oYSl7cmV0dXJuIE0oYSl9KSxhPUZmKHRoaXMuTCxlLGIsZCkpOihiPU0oYiksYT1CZih0aGlzLkwsZSxiLGQpKTpjPyhkPW5hKGIsZnVuY3Rpb24oYSl7cmV0dXJuIE0oYSl9KSxhPUFmKHRoaXMuTCxlLGQpKTooZD1NKGIpLGE9eGYodGhpcy5MLG5ldyBYYihiZixlLGQpKSk7ZD1lOzA8YS5sZW5ndGgmJihkPWJpKHRoaXMsZSkpO0FiKHRoaXMuZGEsZCxhKX07Zy5VYz1mdW5jdGlvbihhKXtaaCh0aGlzLFwiY29ubmVjdGVkXCIsYSk7ITE9PT1hJiZjaSh0aGlzKX07Zy5PZT1mdW5jdGlvbihhKXt2YXIgYj10aGlzO1djKGEsZnVuY3Rpb24oYSxkKXtaaChiLGQsYSl9KX07Zy5MZT1mdW5jdGlvbihhKXtaaCh0aGlzLFwiYXV0aGVudGljYXRlZFwiLGEpfTtcbmZ1bmN0aW9uIFpoKGEsYixjKXtiPW5ldyBMKFwiLy5pbmZvL1wiK2IpO2M9TShjKTt2YXIgZD1hLkNlO2QuV2Q9ZC5XZC5HKGIsYyk7Yz14ZihhLkNkLG5ldyBYYihiZixiLGMpKTtBYihhLmRhLGIsYyl9Zy5LYj1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLmYoXCJzZXRcIix7cGF0aDphLnRvU3RyaW5nKCksdmFsdWU6YiwkZzpjfSk7dmFyIGU9YWkodGhpcyk7Yj1NKGIsYyk7dmFyIGU9c2MoYixlKSxmPXRoaXMuSGQrKyxlPXdmKHRoaXMuTCxhLGUsZiwhMCk7d2IodGhpcy5kYSxlKTt2YXIgaD10aGlzO3RoaXMuYmEucHV0KGEudG9TdHJpbmcoKSxiLkkoITApLGZ1bmN0aW9uKGIsYyl7dmFyIGU9XCJva1wiPT09YjtlfHxPKFwic2V0IGF0IFwiK2ErXCIgZmFpbGVkOiBcIitiKTtlPXpmKGguTCxmLCFlKTtBYihoLmRhLGEsZSk7ZGkoZCxiLGMpfSk7ZT1laSh0aGlzLGEpO2JpKHRoaXMsZSk7QWIodGhpcy5kYSxlLFtdKX07XG5nLnVwZGF0ZT1mdW5jdGlvbihhLGIsYyl7dGhpcy5mKFwidXBkYXRlXCIse3BhdGg6YS50b1N0cmluZygpLHZhbHVlOmJ9KTt2YXIgZD0hMCxlPWFpKHRoaXMpLGY9e307cihiLGZ1bmN0aW9uKGEsYil7ZD0hMTt2YXIgYz1NKGEpO2ZbYl09c2MoYyxlKX0pO2lmKGQpQ2IoXCJ1cGRhdGUoKSBjYWxsZWQgd2l0aCBlbXB0eSBkYXRhLiAgRG9uJ3QgZG8gYW55dGhpbmcuXCIpLGRpKGMsXCJva1wiKTtlbHNle3ZhciBoPXRoaXMuSGQrKyxrPXlmKHRoaXMuTCxhLGYsaCk7d2IodGhpcy5kYSxrKTt2YXIgbD10aGlzO3RoaXMuYmEuemYoYS50b1N0cmluZygpLGIsZnVuY3Rpb24oYixkKXt2YXIgZT1cIm9rXCI9PT1iO2V8fE8oXCJ1cGRhdGUgYXQgXCIrYStcIiBmYWlsZWQ6IFwiK2IpO3ZhciBlPXpmKGwuTCxoLCFlKSxmPWE7MDxlLmxlbmd0aCYmKGY9YmkobCxhKSk7QWIobC5kYSxmLGUpO2RpKGMsYixkKX0pO2I9ZWkodGhpcyxhKTtiaSh0aGlzLGIpO0FiKHRoaXMuZGEsYSxbXSl9fTtcbmZ1bmN0aW9uIGNpKGEpe2EuZihcIm9uRGlzY29ubmVjdEV2ZW50c1wiKTt2YXIgYj1haShhKSxjPVtdO3JjKHBjKGEubGEsYiksRyxmdW5jdGlvbihiLGUpe2M9Yy5jb25jYXQoeGYoYS5MLG5ldyBYYihiZixiLGUpKSk7dmFyIGY9ZWkoYSxiKTtiaShhLGYpfSk7YS5sYT1uZXcgcWM7QWIoYS5kYSxHLGMpfWcuSmQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3RoaXMuYmEuSmQoYS50b1N0cmluZygpLGZ1bmN0aW9uKGQsZSl7XCJva1wiPT09ZCYmcmcoYy5sYSxhKTtkaShiLGQsZSl9KX07ZnVuY3Rpb24gZmkoYSxiLGMsZCl7dmFyIGU9TShjKTthLmJhLk1lKGIudG9TdHJpbmcoKSxlLkkoITApLGZ1bmN0aW9uKGMsaCl7XCJva1wiPT09YyYmYS5sYS5uYyhiLGUpO2RpKGQsYyxoKX0pfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7dmFyIGY9TShjLGQpO2EuYmEuTWUoYi50b1N0cmluZygpLGYuSSghMCksZnVuY3Rpb24oYyxkKXtcIm9rXCI9PT1jJiZhLmxhLm5jKGIsZik7ZGkoZSxjLGQpfSl9XG5mdW5jdGlvbiBoaShhLGIsYyxkKXt2YXIgZT0hMCxmO2ZvcihmIGluIGMpZT0hMTtlPyhDYihcIm9uRGlzY29ubmVjdCgpLnVwZGF0ZSgpIGNhbGxlZCB3aXRoIGVtcHR5IGRhdGEuICBEb24ndCBkbyBhbnl0aGluZy5cIiksZGkoZCxcIm9rXCIpKTphLmJhLkNmKGIudG9TdHJpbmcoKSxjLGZ1bmN0aW9uKGUsZil7aWYoXCJva1wiPT09ZSlmb3IodmFyIGwgaW4gYyl7dmFyIG09TShjW2xdKTthLmxhLm5jKGIudShsKSxtKX1kaShkLGUsZil9KX1mdW5jdGlvbiBpaShhLGIsYyl7Yz1cIi5pbmZvXCI9PT1FKGIucGF0aCk/YS5DZC5QYihiLGMpOmEuTC5QYihiLGMpO3liKGEuZGEsYi5wYXRoLGMpfWcueWI9ZnVuY3Rpb24oKXt0aGlzLlJhJiZ0aGlzLlJhLnliKCl9O2cucmM9ZnVuY3Rpb24oKXt0aGlzLlJhJiZ0aGlzLlJhLnJjKCl9O1xuZy5ZZT1mdW5jdGlvbihhKXtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe2E/KHRoaXMuZmR8fCh0aGlzLmZkPW5ldyBMYih0aGlzLlVhKSksYT10aGlzLmZkLmdldCgpKTphPXRoaXMuVWEuZ2V0KCk7dmFyIGI9UmEoc2EoYSksZnVuY3Rpb24oYSxiKXtyZXR1cm4gTWF0aC5tYXgoYi5sZW5ndGgsYSl9LDApLGM7Zm9yKGMgaW4gYSl7Zm9yKHZhciBkPWFbY10sZT1jLmxlbmd0aDtlPGIrMjtlKyspYys9XCIgXCI7Y29uc29sZS5sb2coYytkKX19fTtnLlplPWZ1bmN0aW9uKGEpe09iKHRoaXMuVWEsYSk7dGhpcy5TZy5PZlthXT0hMH07Zy5mPWZ1bmN0aW9uKGEpe3ZhciBiPVwiXCI7dGhpcy5SYSYmKGI9dGhpcy5SYS5pZCtcIjpcIik7Q2IoYixhcmd1bWVudHMpfTtcbmZ1bmN0aW9uIGRpKGEsYixjKXthJiZEYihmdW5jdGlvbigpe2lmKFwib2tcIj09YilhKG51bGwpO2Vsc2V7dmFyIGQ9KGJ8fFwiZXJyb3JcIikudG9VcHBlckNhc2UoKSxlPWQ7YyYmKGUrPVwiOiBcIitjKTtlPUVycm9yKGUpO2UuY29kZT1kO2EoZSl9fSl9O2Z1bmN0aW9uIGppKGEsYixjLGQsZSl7ZnVuY3Rpb24gZigpe31hLmYoXCJ0cmFuc2FjdGlvbiBvbiBcIitiKTt2YXIgaD1uZXcgVShhLGIpO2guRWIoXCJ2YWx1ZVwiLGYpO2M9e3BhdGg6Yix1cGRhdGU6YyxIOmQsc3RhdHVzOm51bGwsRmY6RWMoKSxjZjplLExmOjAsaWU6ZnVuY3Rpb24oKXtoLmljKFwidmFsdWVcIixmKX0sa2U6bnVsbCxCYTpudWxsLHBkOm51bGwscWQ6bnVsbCxyZDpudWxsfTtkPWEuTC56YShiLHZvaWQgMCl8fEM7Yy5wZD1kO2Q9Yy51cGRhdGUoZC5JKCkpO2lmKG4oZCkpe2NnKFwidHJhbnNhY3Rpb24gZmFpbGVkOiBEYXRhIHJldHVybmVkIFwiLGQsYy5wYXRoKTtjLnN0YXR1cz0xO2U9U2YoYS51YyxiKTt2YXIgaz1lLkNhKCl8fFtdO2sucHVzaChjKTtUZihlLGspO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJnYoZCxcIi5wcmlvcml0eVwiKT8oaz13KGQsXCIucHJpb3JpdHlcIiksSyhhZyhrKSxcIkludmFsaWQgcHJpb3JpdHkgcmV0dXJuZWQgYnkgdHJhbnNhY3Rpb24uIFByaW9yaXR5IG11c3QgYmUgYSB2YWxpZCBzdHJpbmcsIGZpbml0ZSBudW1iZXIsIHNlcnZlciB2YWx1ZSwgb3IgbnVsbC5cIikpOlxuaz0oYS5MLnphKGIpfHxDKS5DKCkuSSgpO2U9YWkoYSk7ZD1NKGQsayk7ZT1zYyhkLGUpO2MucWQ9ZDtjLnJkPWU7Yy5CYT1hLkhkKys7Yz13ZihhLkwsYixlLGMuQmEsYy5jZik7QWIoYS5kYSxiLGMpO2tpKGEpfWVsc2UgYy5pZSgpLGMucWQ9bnVsbCxjLnJkPW51bGwsYy5IJiYoYT1uZXcgUShjLnBkLG5ldyBVKGEsYy5wYXRoKSxOKSxjLkgobnVsbCwhMSxhKSl9ZnVuY3Rpb24ga2koYSxiKXt2YXIgYz1ifHxhLnVjO2J8fGxpKGEsYyk7aWYobnVsbCE9PWMuQ2EoKSl7dmFyIGQ9bWkoYSxjKTtLKDA8ZC5sZW5ndGgsXCJTZW5kaW5nIHplcm8gbGVuZ3RoIHRyYW5zYWN0aW9uIHF1ZXVlXCIpO1NhKGQsZnVuY3Rpb24oYSl7cmV0dXJuIDE9PT1hLnN0YXR1c30pJiZuaShhLGMucGF0aCgpLGQpfWVsc2UgYy53ZCgpJiZjLlAoZnVuY3Rpb24oYil7a2koYSxiKX0pfVxuZnVuY3Rpb24gbmkoYSxiLGMpe2Zvcih2YXIgZD1RYShjLGZ1bmN0aW9uKGEpe3JldHVybiBhLkJhfSksZT1hLkwuemEoYixkKXx8QyxkPWUsZT1lLmhhc2goKSxmPTA7ZjxjLmxlbmd0aDtmKyspe3ZhciBoPWNbZl07SygxPT09aC5zdGF0dXMsXCJ0cnlUb1NlbmRUcmFuc2FjdGlvblF1ZXVlXzogaXRlbXMgaW4gcXVldWUgc2hvdWxkIGFsbCBiZSBydW4uXCIpO2guc3RhdHVzPTI7aC5MZisrO3ZhciBrPVQoYixoLnBhdGgpLGQ9ZC5HKGssaC5xZCl9ZD1kLkkoITApO2EuYmEucHV0KGIudG9TdHJpbmcoKSxkLGZ1bmN0aW9uKGQpe2EuZihcInRyYW5zYWN0aW9uIHB1dCByZXNwb25zZVwiLHtwYXRoOmIudG9TdHJpbmcoKSxzdGF0dXM6ZH0pO3ZhciBlPVtdO2lmKFwib2tcIj09PWQpe2Q9W107Zm9yKGY9MDtmPGMubGVuZ3RoO2YrKyl7Y1tmXS5zdGF0dXM9MztlPWUuY29uY2F0KHpmKGEuTCxjW2ZdLkJhKSk7aWYoY1tmXS5IKXt2YXIgaD1jW2ZdLnJkLGs9bmV3IFUoYSxjW2ZdLnBhdGgpO2QucHVzaChxKGNbZl0uSCxcbm51bGwsbnVsbCwhMCxuZXcgUShoLGssTikpKX1jW2ZdLmllKCl9bGkoYSxTZihhLnVjLGIpKTtraShhKTtBYihhLmRhLGIsZSk7Zm9yKGY9MDtmPGQubGVuZ3RoO2YrKylEYihkW2ZdKX1lbHNle2lmKFwiZGF0YXN0YWxlXCI9PT1kKWZvcihmPTA7ZjxjLmxlbmd0aDtmKyspY1tmXS5zdGF0dXM9ND09PWNbZl0uc3RhdHVzPzU6MTtlbHNlIGZvcihPKFwidHJhbnNhY3Rpb24gYXQgXCIrYi50b1N0cmluZygpK1wiIGZhaWxlZDogXCIrZCksZj0wO2Y8Yy5sZW5ndGg7ZisrKWNbZl0uc3RhdHVzPTUsY1tmXS5rZT1kO2JpKGEsYil9fSxlKX1mdW5jdGlvbiBiaShhLGIpe3ZhciBjPW9pKGEsYiksZD1jLnBhdGgoKSxjPW1pKGEsYyk7cGkoYSxjLGQpO3JldHVybiBkfVxuZnVuY3Rpb24gcGkoYSxiLGMpe2lmKDAhPT1iLmxlbmd0aCl7Zm9yKHZhciBkPVtdLGU9W10sZj1RYShiLGZ1bmN0aW9uKGEpe3JldHVybiBhLkJhfSksaD0wO2g8Yi5sZW5ndGg7aCsrKXt2YXIgaz1iW2hdLGw9VChjLGsucGF0aCksbT0hMSx0O0sobnVsbCE9PWwsXCJyZXJ1blRyYW5zYWN0aW9uc1VuZGVyTm9kZV86IHJlbGF0aXZlUGF0aCBzaG91bGQgbm90IGJlIG51bGwuXCIpO2lmKDU9PT1rLnN0YXR1cyltPSEwLHQ9ay5rZSxlPWUuY29uY2F0KHpmKGEuTCxrLkJhLCEwKSk7ZWxzZSBpZigxPT09ay5zdGF0dXMpaWYoMjU8PWsuTGYpbT0hMCx0PVwibWF4cmV0cnlcIixlPWUuY29uY2F0KHpmKGEuTCxrLkJhLCEwKSk7ZWxzZXt2YXIgej1hLkwuemEoay5wYXRoLGYpfHxDO2sucGQ9ejt2YXIgST1iW2hdLnVwZGF0ZSh6LkkoKSk7bihJKT8oY2coXCJ0cmFuc2FjdGlvbiBmYWlsZWQ6IERhdGEgcmV0dXJuZWQgXCIsSSxrLnBhdGgpLGw9TShJKSxcIm9iamVjdFwiPT09dHlwZW9mIEkmJm51bGwhPVxuSSYmdihJLFwiLnByaW9yaXR5XCIpfHwobD1sLmdhKHouQygpKSksej1rLkJhLEk9YWkoYSksST1zYyhsLEkpLGsucWQ9bCxrLnJkPUksay5CYT1hLkhkKyssVmEoZix6KSxlPWUuY29uY2F0KHdmKGEuTCxrLnBhdGgsSSxrLkJhLGsuY2YpKSxlPWUuY29uY2F0KHpmKGEuTCx6LCEwKSkpOihtPSEwLHQ9XCJub2RhdGFcIixlPWUuY29uY2F0KHpmKGEuTCxrLkJhLCEwKSkpfUFiKGEuZGEsYyxlKTtlPVtdO20mJihiW2hdLnN0YXR1cz0zLHNldFRpbWVvdXQoYltoXS5pZSxNYXRoLmZsb29yKDApKSxiW2hdLkgmJihcIm5vZGF0YVwiPT09dD8oaz1uZXcgVShhLGJbaF0ucGF0aCksZC5wdXNoKHEoYltoXS5ILG51bGwsbnVsbCwhMSxuZXcgUShiW2hdLnBkLGssTikpKSk6ZC5wdXNoKHEoYltoXS5ILG51bGwsRXJyb3IodCksITEsbnVsbCkpKSl9bGkoYSxhLnVjKTtmb3IoaD0wO2g8ZC5sZW5ndGg7aCsrKURiKGRbaF0pO2tpKGEpfX1cbmZ1bmN0aW9uIG9pKGEsYil7Zm9yKHZhciBjLGQ9YS51YztudWxsIT09KGM9RShiKSkmJm51bGw9PT1kLkNhKCk7KWQ9U2YoZCxjKSxiPUgoYik7cmV0dXJuIGR9ZnVuY3Rpb24gbWkoYSxiKXt2YXIgYz1bXTtxaShhLGIsYyk7Yy5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuRmYtYi5GZn0pO3JldHVybiBjfWZ1bmN0aW9uIHFpKGEsYixjKXt2YXIgZD1iLkNhKCk7aWYobnVsbCE9PWQpZm9yKHZhciBlPTA7ZTxkLmxlbmd0aDtlKyspYy5wdXNoKGRbZV0pO2IuUChmdW5jdGlvbihiKXtxaShhLGIsYyl9KX1mdW5jdGlvbiBsaShhLGIpe3ZhciBjPWIuQ2EoKTtpZihjKXtmb3IodmFyIGQ9MCxlPTA7ZTxjLmxlbmd0aDtlKyspMyE9PWNbZV0uc3RhdHVzJiYoY1tkXT1jW2VdLGQrKyk7Yy5sZW5ndGg9ZDtUZihiLDA8Yy5sZW5ndGg/YzpudWxsKX1iLlAoZnVuY3Rpb24oYil7bGkoYSxiKX0pfVxuZnVuY3Rpb24gZWkoYSxiKXt2YXIgYz1vaShhLGIpLnBhdGgoKSxkPVNmKGEudWMsYik7V2YoZCxmdW5jdGlvbihiKXtyaShhLGIpfSk7cmkoYSxkKTtWZihkLGZ1bmN0aW9uKGIpe3JpKGEsYil9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIHJpKGEsYil7dmFyIGM9Yi5DYSgpO2lmKG51bGwhPT1jKXtmb3IodmFyIGQ9W10sZT1bXSxmPS0xLGg9MDtoPGMubGVuZ3RoO2grKyk0IT09Y1toXS5zdGF0dXMmJigyPT09Y1toXS5zdGF0dXM/KEsoZj09PWgtMSxcIkFsbCBTRU5UIGl0ZW1zIHNob3VsZCBiZSBhdCBiZWdpbm5pbmcgb2YgcXVldWUuXCIpLGY9aCxjW2hdLnN0YXR1cz00LGNbaF0ua2U9XCJzZXRcIik6KEsoMT09PWNbaF0uc3RhdHVzLFwiVW5leHBlY3RlZCB0cmFuc2FjdGlvbiBzdGF0dXMgaW4gYWJvcnRcIiksY1toXS5pZSgpLGU9ZS5jb25jYXQoemYoYS5MLGNbaF0uQmEsITApKSxjW2hdLkgmJmQucHVzaChxKGNbaF0uSCxudWxsLEVycm9yKFwic2V0XCIpLCExLG51bGwpKSkpOy0xPT09Zj9UZihiLG51bGwpOmMubGVuZ3RoPWYrMTtBYihhLmRhLGIucGF0aCgpLGUpO2ZvcihoPTA7aDxkLmxlbmd0aDtoKyspRGIoZFtoXSl9fTtmdW5jdGlvbiBXKCl7dGhpcy5vYz17fTt0aGlzLlNmPSExfVcucHJvdG90eXBlLnliPWZ1bmN0aW9uKCl7Zm9yKHZhciBhIGluIHRoaXMub2MpdGhpcy5vY1thXS55YigpfTtXLnByb3RvdHlwZS5yYz1mdW5jdGlvbigpe2Zvcih2YXIgYSBpbiB0aGlzLm9jKXRoaXMub2NbYV0ucmMoKX07Vy5wcm90b3R5cGUudmU9ZnVuY3Rpb24oKXt0aGlzLlNmPSEwfTtjYShXKTtXLnByb3RvdHlwZS5pbnRlcnJ1cHQ9Vy5wcm90b3R5cGUueWI7Vy5wcm90b3R5cGUucmVzdW1lPVcucHJvdG90eXBlLnJjO2Z1bmN0aW9uIFgoYSxiKXt0aGlzLmJkPWE7dGhpcy5yYT1ifVgucHJvdG90eXBlLmNhbmNlbD1mdW5jdGlvbihhKXt4KFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkuY2FuY2VsXCIsMCwxLGFyZ3VtZW50cy5sZW5ndGgpO0EoXCJGaXJlYmFzZS5vbkRpc2Nvbm5lY3QoKS5jYW5jZWxcIiwxLGEsITApO3RoaXMuYmQuSmQodGhpcy5yYSxhfHxudWxsKX07WC5wcm90b3R5cGUuY2FuY2VsPVgucHJvdG90eXBlLmNhbmNlbDtYLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oYSl7eChcIkZpcmViYXNlLm9uRGlzY29ubmVjdCgpLnJlbW92ZVwiLDAsMSxhcmd1bWVudHMubGVuZ3RoKTtqZyhcIkZpcmViYXNlLm9uRGlzY29ubmVjdCgpLnJlbW92ZVwiLHRoaXMucmEpO0EoXCJGaXJlYmFzZS5vbkRpc2Nvbm5lY3QoKS5yZW1vdmVcIiwxLGEsITApO2ZpKHRoaXMuYmQsdGhpcy5yYSxudWxsLGEpfTtYLnByb3RvdHlwZS5yZW1vdmU9WC5wcm90b3R5cGUucmVtb3ZlO1xuWC5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGEsYil7eChcIkZpcmViYXNlLm9uRGlzY29ubmVjdCgpLnNldFwiLDEsMixhcmd1bWVudHMubGVuZ3RoKTtqZyhcIkZpcmViYXNlLm9uRGlzY29ubmVjdCgpLnNldFwiLHRoaXMucmEpO2JnKFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkuc2V0XCIsYSx0aGlzLnJhLCExKTtBKFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkuc2V0XCIsMixiLCEwKTtmaSh0aGlzLmJkLHRoaXMucmEsYSxiKX07WC5wcm90b3R5cGUuc2V0PVgucHJvdG90eXBlLnNldDtcblgucHJvdG90eXBlLktiPWZ1bmN0aW9uKGEsYixjKXt4KFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkuc2V0V2l0aFByaW9yaXR5XCIsMiwzLGFyZ3VtZW50cy5sZW5ndGgpO2pnKFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkuc2V0V2l0aFByaW9yaXR5XCIsdGhpcy5yYSk7YmcoXCJGaXJlYmFzZS5vbkRpc2Nvbm5lY3QoKS5zZXRXaXRoUHJpb3JpdHlcIixhLHRoaXMucmEsITEpO2ZnKFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkuc2V0V2l0aFByaW9yaXR5XCIsMixiKTtBKFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkuc2V0V2l0aFByaW9yaXR5XCIsMyxjLCEwKTtnaSh0aGlzLmJkLHRoaXMucmEsYSxiLGMpfTtYLnByb3RvdHlwZS5zZXRXaXRoUHJpb3JpdHk9WC5wcm90b3R5cGUuS2I7XG5YLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oYSxiKXt4KFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkudXBkYXRlXCIsMSwyLGFyZ3VtZW50cy5sZW5ndGgpO2pnKFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkudXBkYXRlXCIsdGhpcy5yYSk7aWYoZWEoYSkpe2Zvcih2YXIgYz17fSxkPTA7ZDxhLmxlbmd0aDsrK2QpY1tcIlwiK2RdPWFbZF07YT1jO08oXCJQYXNzaW5nIGFuIEFycmF5IHRvIEZpcmViYXNlLm9uRGlzY29ubmVjdCgpLnVwZGF0ZSgpIGlzIGRlcHJlY2F0ZWQuIFVzZSBzZXQoKSBpZiB5b3Ugd2FudCB0byBvdmVyd3JpdGUgdGhlIGV4aXN0aW5nIGRhdGEsIG9yIGFuIE9iamVjdCB3aXRoIGludGVnZXIga2V5cyBpZiB5b3UgcmVhbGx5IGRvIHdhbnQgdG8gb25seSB1cGRhdGUgc29tZSBvZiB0aGUgY2hpbGRyZW4uXCIpfWVnKFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkudXBkYXRlXCIsYSx0aGlzLnJhKTtBKFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkudXBkYXRlXCIsMixiLCEwKTtcbmhpKHRoaXMuYmQsdGhpcy5yYSxhLGIpfTtYLnByb3RvdHlwZS51cGRhdGU9WC5wcm90b3R5cGUudXBkYXRlO2Z1bmN0aW9uIFkoYSxiLGMsZCl7dGhpcy5rPWE7dGhpcy5wYXRoPWI7dGhpcy5uPWM7dGhpcy5sYz1kfVxuZnVuY3Rpb24gc2koYSl7dmFyIGI9bnVsbCxjPW51bGw7YS5tYSYmKGI9bmQoYSkpO2EucGEmJihjPXBkKGEpKTtpZihhLmc9PT1RZCl7aWYoYS5tYSl7aWYoXCJbTUlOX05BTUVdXCIhPW1kKGEpKXRocm93IEVycm9yKFwiUXVlcnk6IFdoZW4gb3JkZXJpbmcgYnkga2V5LCB5b3UgbWF5IG9ubHkgcGFzcyBvbmUgYXJndW1lbnQgdG8gc3RhcnRBdCgpLCBlbmRBdCgpLCBvciBlcXVhbFRvKCkuXCIpO2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYil0aHJvdyBFcnJvcihcIlF1ZXJ5OiBXaGVuIG9yZGVyaW5nIGJ5IGtleSwgdGhlIGFyZ3VtZW50IHBhc3NlZCB0byBzdGFydEF0KCksIGVuZEF0KCksb3IgZXF1YWxUbygpIG11c3QgYmUgYSBzdHJpbmcuXCIpO31pZihhLnBhKXtpZihcIltNQVhfTkFNRV1cIiE9b2QoYSkpdGhyb3cgRXJyb3IoXCJRdWVyeTogV2hlbiBvcmRlcmluZyBieSBrZXksIHlvdSBtYXkgb25seSBwYXNzIG9uZSBhcmd1bWVudCB0byBzdGFydEF0KCksIGVuZEF0KCksIG9yIGVxdWFsVG8oKS5cIik7aWYoXCJzdHJpbmdcIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IoXCJRdWVyeTogV2hlbiBvcmRlcmluZyBieSBrZXksIHRoZSBhcmd1bWVudCBwYXNzZWQgdG8gc3RhcnRBdCgpLCBlbmRBdCgpLG9yIGVxdWFsVG8oKSBtdXN0IGJlIGEgc3RyaW5nLlwiKTt9fWVsc2UgaWYoYS5nPT09Til7aWYobnVsbCE9YiYmIWFnKGIpfHxudWxsIT1jJiYhYWcoYykpdGhyb3cgRXJyb3IoXCJRdWVyeTogV2hlbiBvcmRlcmluZyBieSBwcmlvcml0eSwgdGhlIGZpcnN0IGFyZ3VtZW50IHBhc3NlZCB0byBzdGFydEF0KCksIGVuZEF0KCksIG9yIGVxdWFsVG8oKSBtdXN0IGJlIGEgdmFsaWQgcHJpb3JpdHkgdmFsdWUgKG51bGwsIGEgbnVtYmVyLCBvciBhIHN0cmluZykuXCIpO31lbHNlIGlmKEsoYS5nIGluc3RhbmNlb2YgVWR8fGEuZz09PSRkLFwidW5rbm93biBpbmRleCB0eXBlLlwiKSxudWxsIT1iJiZcIm9iamVjdFwiPT09dHlwZW9mIGJ8fG51bGwhPWMmJlwib2JqZWN0XCI9PT10eXBlb2YgYyl0aHJvdyBFcnJvcihcIlF1ZXJ5OiBGaXJzdCBhcmd1bWVudCBwYXNzZWQgdG8gc3RhcnRBdCgpLCBlbmRBdCgpLCBvciBlcXVhbFRvKCkgY2Fubm90IGJlIGFuIG9iamVjdC5cIik7XG59ZnVuY3Rpb24gdGkoYSl7aWYoYS5tYSYmYS5wYSYmYS5qYSYmKCFhLmphfHxcIlwiPT09YS5OYikpdGhyb3cgRXJyb3IoXCJRdWVyeTogQ2FuJ3QgY29tYmluZSBzdGFydEF0KCksIGVuZEF0KCksIGFuZCBsaW1pdCgpLiBVc2UgbGltaXRUb0ZpcnN0KCkgb3IgbGltaXRUb0xhc3QoKSBpbnN0ZWFkLlwiKTt9ZnVuY3Rpb24gdWkoYSxiKXtpZighMD09PWEubGMpdGhyb3cgRXJyb3IoYitcIjogWW91IGNhbid0IGNvbWJpbmUgbXVsdGlwbGUgb3JkZXJCeSBjYWxscy5cIik7fWc9WS5wcm90b3R5cGU7Zy5JYj1mdW5jdGlvbigpe3goXCJRdWVyeS5yZWZcIiwwLDAsYXJndW1lbnRzLmxlbmd0aCk7cmV0dXJuIG5ldyBVKHRoaXMuayx0aGlzLnBhdGgpfTtcbmcuRWI9ZnVuY3Rpb24oYSxiLGMsZCl7eChcIlF1ZXJ5Lm9uXCIsMiw0LGFyZ3VtZW50cy5sZW5ndGgpO2dnKFwiUXVlcnkub25cIixhLCExKTtBKFwiUXVlcnkub25cIiwyLGIsITEpO3ZhciBlPXZpKFwiUXVlcnkub25cIixjLGQpO2lmKFwidmFsdWVcIj09PWEpaWkodGhpcy5rLHRoaXMsbmV3IGlkKGIsZS5jYW5jZWx8fG51bGwsZS5NYXx8bnVsbCkpO2Vsc2V7dmFyIGY9e307ZlthXT1iO2lpKHRoaXMuayx0aGlzLG5ldyBqZChmLGUuY2FuY2VsLGUuTWEpKX1yZXR1cm4gYn07XG5nLmljPWZ1bmN0aW9uKGEsYixjKXt4KFwiUXVlcnkub2ZmXCIsMCwzLGFyZ3VtZW50cy5sZW5ndGgpO2dnKFwiUXVlcnkub2ZmXCIsYSwhMCk7QShcIlF1ZXJ5Lm9mZlwiLDIsYiwhMCk7bWIoXCJRdWVyeS5vZmZcIiwzLGMpO3ZhciBkPW51bGwsZT1udWxsO1widmFsdWVcIj09PWE/ZD1uZXcgaWQoYnx8bnVsbCxudWxsLGN8fG51bGwpOmEmJihiJiYoZT17fSxlW2FdPWIpLGQ9bmV3IGpkKGUsbnVsbCxjfHxudWxsKSk7ZT10aGlzLms7ZD1cIi5pbmZvXCI9PT1FKHRoaXMucGF0aCk/ZS5DZC5qYih0aGlzLGQpOmUuTC5qYih0aGlzLGQpO3liKGUuZGEsdGhpcy5wYXRoLGQpfTtcbmcuRGc9ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGgpe2YmJihmPSExLGUuaWMoYSxjKSxiLmNhbGwoZC5NYSxoKSl9eChcIlF1ZXJ5Lm9uY2VcIiwyLDQsYXJndW1lbnRzLmxlbmd0aCk7Z2coXCJRdWVyeS5vbmNlXCIsYSwhMSk7QShcIlF1ZXJ5Lm9uY2VcIiwyLGIsITEpO3ZhciBkPXZpKFwiUXVlcnkub25jZVwiLGFyZ3VtZW50c1syXSxhcmd1bWVudHNbM10pLGU9dGhpcyxmPSEwO3RoaXMuRWIoYSxjLGZ1bmN0aW9uKGIpe2UuaWMoYSxjKTtkLmNhbmNlbCYmZC5jYW5jZWwuY2FsbChkLk1hLGIpfSl9O1xuZy5IZT1mdW5jdGlvbihhKXtPKFwiUXVlcnkubGltaXQoKSBiZWluZyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFF1ZXJ5LmxpbWl0VG9GaXJzdCgpIG9yIFF1ZXJ5LmxpbWl0VG9MYXN0KCkgaW5zdGVhZC5cIik7eChcIlF1ZXJ5LmxpbWl0XCIsMSwxLGFyZ3VtZW50cy5sZW5ndGgpO2lmKCFnYShhKXx8TWF0aC5mbG9vcihhKSE9PWF8fDA+PWEpdGhyb3cgRXJyb3IoXCJRdWVyeS5saW1pdDogRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIuXCIpO2lmKHRoaXMubi5qYSl0aHJvdyBFcnJvcihcIlF1ZXJ5LmxpbWl0OiBMaW1pdCB3YXMgYWxyZWFkeSBzZXQgKGJ5IGFub3RoZXIgY2FsbCB0byBsaW1pdCwgbGltaXRUb0ZpcnN0LCBvcmxpbWl0VG9MYXN0LlwiKTt2YXIgYj10aGlzLm4uSGUoYSk7dGkoYik7cmV0dXJuIG5ldyBZKHRoaXMuayx0aGlzLnBhdGgsYix0aGlzLmxjKX07XG5nLkllPWZ1bmN0aW9uKGEpe3goXCJRdWVyeS5saW1pdFRvRmlyc3RcIiwxLDEsYXJndW1lbnRzLmxlbmd0aCk7aWYoIWdhKGEpfHxNYXRoLmZsb29yKGEpIT09YXx8MD49YSl0aHJvdyBFcnJvcihcIlF1ZXJ5LmxpbWl0VG9GaXJzdDogRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIuXCIpO2lmKHRoaXMubi5qYSl0aHJvdyBFcnJvcihcIlF1ZXJ5LmxpbWl0VG9GaXJzdDogTGltaXQgd2FzIGFscmVhZHkgc2V0IChieSBhbm90aGVyIGNhbGwgdG8gbGltaXQsIGxpbWl0VG9GaXJzdCwgb3IgbGltaXRUb0xhc3QpLlwiKTtyZXR1cm4gbmV3IFkodGhpcy5rLHRoaXMucGF0aCx0aGlzLm4uSWUoYSksdGhpcy5sYyl9O1xuZy5KZT1mdW5jdGlvbihhKXt4KFwiUXVlcnkubGltaXRUb0xhc3RcIiwxLDEsYXJndW1lbnRzLmxlbmd0aCk7aWYoIWdhKGEpfHxNYXRoLmZsb29yKGEpIT09YXx8MD49YSl0aHJvdyBFcnJvcihcIlF1ZXJ5LmxpbWl0VG9MYXN0OiBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlci5cIik7aWYodGhpcy5uLmphKXRocm93IEVycm9yKFwiUXVlcnkubGltaXRUb0xhc3Q6IExpbWl0IHdhcyBhbHJlYWR5IHNldCAoYnkgYW5vdGhlciBjYWxsIHRvIGxpbWl0LCBsaW1pdFRvRmlyc3QsIG9yIGxpbWl0VG9MYXN0KS5cIik7cmV0dXJuIG5ldyBZKHRoaXMuayx0aGlzLnBhdGgsdGhpcy5uLkplKGEpLHRoaXMubGMpfTtcbmcuRWc9ZnVuY3Rpb24oYSl7eChcIlF1ZXJ5Lm9yZGVyQnlDaGlsZFwiLDEsMSxhcmd1bWVudHMubGVuZ3RoKTtpZihcIiRrZXlcIj09PWEpdGhyb3cgRXJyb3IoJ1F1ZXJ5Lm9yZGVyQnlDaGlsZDogXCIka2V5XCIgaXMgaW52YWxpZC4gIFVzZSBRdWVyeS5vcmRlckJ5S2V5KCkgaW5zdGVhZC4nKTtpZihcIiRwcmlvcml0eVwiPT09YSl0aHJvdyBFcnJvcignUXVlcnkub3JkZXJCeUNoaWxkOiBcIiRwcmlvcml0eVwiIGlzIGludmFsaWQuICBVc2UgUXVlcnkub3JkZXJCeVByaW9yaXR5KCkgaW5zdGVhZC4nKTtpZihcIiR2YWx1ZVwiPT09YSl0aHJvdyBFcnJvcignUXVlcnkub3JkZXJCeUNoaWxkOiBcIiR2YWx1ZVwiIGlzIGludmFsaWQuICBVc2UgUXVlcnkub3JkZXJCeVZhbHVlKCkgaW5zdGVhZC4nKTtpZyhcIlF1ZXJ5Lm9yZGVyQnlDaGlsZFwiLGEpO3VpKHRoaXMsXCJRdWVyeS5vcmRlckJ5Q2hpbGRcIik7dmFyIGI9bmV3IEwoYSk7aWYoYi5lKCkpdGhyb3cgRXJyb3IoXCJRdWVyeS5vcmRlckJ5Q2hpbGQ6IGNhbm5vdCBwYXNzIGluIGVtcHR5IHBhdGguICBVc2UgUXVlcnkub3JkZXJCeVZhbHVlKCkgaW5zdGVhZC5cIik7XG5iPW5ldyBVZChiKTtiPWRlKHRoaXMubixiKTtzaShiKTtyZXR1cm4gbmV3IFkodGhpcy5rLHRoaXMucGF0aCxiLCEwKX07Zy5GZz1mdW5jdGlvbigpe3goXCJRdWVyeS5vcmRlckJ5S2V5XCIsMCwwLGFyZ3VtZW50cy5sZW5ndGgpO3VpKHRoaXMsXCJRdWVyeS5vcmRlckJ5S2V5XCIpO3ZhciBhPWRlKHRoaXMubixRZCk7c2koYSk7cmV0dXJuIG5ldyBZKHRoaXMuayx0aGlzLnBhdGgsYSwhMCl9O2cuR2c9ZnVuY3Rpb24oKXt4KFwiUXVlcnkub3JkZXJCeVByaW9yaXR5XCIsMCwwLGFyZ3VtZW50cy5sZW5ndGgpO3VpKHRoaXMsXCJRdWVyeS5vcmRlckJ5UHJpb3JpdHlcIik7dmFyIGE9ZGUodGhpcy5uLE4pO3NpKGEpO3JldHVybiBuZXcgWSh0aGlzLmssdGhpcy5wYXRoLGEsITApfTtcbmcuSGc9ZnVuY3Rpb24oKXt4KFwiUXVlcnkub3JkZXJCeVZhbHVlXCIsMCwwLGFyZ3VtZW50cy5sZW5ndGgpO3VpKHRoaXMsXCJRdWVyeS5vcmRlckJ5VmFsdWVcIik7dmFyIGE9ZGUodGhpcy5uLCRkKTtzaShhKTtyZXR1cm4gbmV3IFkodGhpcy5rLHRoaXMucGF0aCxhLCEwKX07Zy4kZD1mdW5jdGlvbihhLGIpe3goXCJRdWVyeS5zdGFydEF0XCIsMCwyLGFyZ3VtZW50cy5sZW5ndGgpO2JnKFwiUXVlcnkuc3RhcnRBdFwiLGEsdGhpcy5wYXRoLCEwKTtoZyhcIlF1ZXJ5LnN0YXJ0QXRcIixiKTt2YXIgYz10aGlzLm4uJGQoYSxiKTt0aShjKTtzaShjKTtpZih0aGlzLm4ubWEpdGhyb3cgRXJyb3IoXCJRdWVyeS5zdGFydEF0OiBTdGFydGluZyBwb2ludCB3YXMgYWxyZWFkeSBzZXQgKGJ5IGFub3RoZXIgY2FsbCB0byBzdGFydEF0IG9yIGVxdWFsVG8pLlwiKTtuKGEpfHwoYj1hPW51bGwpO3JldHVybiBuZXcgWSh0aGlzLmssdGhpcy5wYXRoLGMsdGhpcy5sYyl9O1xuZy50ZD1mdW5jdGlvbihhLGIpe3goXCJRdWVyeS5lbmRBdFwiLDAsMixhcmd1bWVudHMubGVuZ3RoKTtiZyhcIlF1ZXJ5LmVuZEF0XCIsYSx0aGlzLnBhdGgsITApO2hnKFwiUXVlcnkuZW5kQXRcIixiKTt2YXIgYz10aGlzLm4udGQoYSxiKTt0aShjKTtzaShjKTtpZih0aGlzLm4ucGEpdGhyb3cgRXJyb3IoXCJRdWVyeS5lbmRBdDogRW5kaW5nIHBvaW50IHdhcyBhbHJlYWR5IHNldCAoYnkgYW5vdGhlciBjYWxsIHRvIGVuZEF0IG9yIGVxdWFsVG8pLlwiKTtyZXR1cm4gbmV3IFkodGhpcy5rLHRoaXMucGF0aCxjLHRoaXMubGMpfTtcbmcua2c9ZnVuY3Rpb24oYSxiKXt4KFwiUXVlcnkuZXF1YWxUb1wiLDEsMixhcmd1bWVudHMubGVuZ3RoKTtiZyhcIlF1ZXJ5LmVxdWFsVG9cIixhLHRoaXMucGF0aCwhMSk7aGcoXCJRdWVyeS5lcXVhbFRvXCIsYik7aWYodGhpcy5uLm1hKXRocm93IEVycm9yKFwiUXVlcnkuZXF1YWxUbzogU3RhcnRpbmcgcG9pbnQgd2FzIGFscmVhZHkgc2V0IChieSBhbm90aGVyIGNhbGwgdG8gZW5kQXQgb3IgZXF1YWxUbykuXCIpO2lmKHRoaXMubi5wYSl0aHJvdyBFcnJvcihcIlF1ZXJ5LmVxdWFsVG86IEVuZGluZyBwb2ludCB3YXMgYWxyZWFkeSBzZXQgKGJ5IGFub3RoZXIgY2FsbCB0byBlbmRBdCBvciBlcXVhbFRvKS5cIik7cmV0dXJuIHRoaXMuJGQoYSxiKS50ZChhLGIpfTtcbmcudG9TdHJpbmc9ZnVuY3Rpb24oKXt4KFwiUXVlcnkudG9TdHJpbmdcIiwwLDAsYXJndW1lbnRzLmxlbmd0aCk7Zm9yKHZhciBhPXRoaXMucGF0aCxiPVwiXCIsYz1hLlo7YzxhLm8ubGVuZ3RoO2MrKylcIlwiIT09YS5vW2NdJiYoYis9XCIvXCIrZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhhLm9bY10pKSk7cmV0dXJuIHRoaXMuay50b1N0cmluZygpKyhifHxcIi9cIil9O2cudmE9ZnVuY3Rpb24oKXt2YXIgYT1VYyhlZSh0aGlzLm4pKTtyZXR1cm5cInt9XCI9PT1hP1wiZGVmYXVsdFwiOmF9O1xuZnVuY3Rpb24gdmkoYSxiLGMpe3ZhciBkPXtjYW5jZWw6bnVsbCxNYTpudWxsfTtpZihiJiZjKWQuY2FuY2VsPWIsQShhLDMsZC5jYW5jZWwsITApLGQuTWE9YyxtYihhLDQsZC5NYSk7ZWxzZSBpZihiKWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpZC5NYT1iO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpZC5jYW5jZWw9YjtlbHNlIHRocm93IEVycm9yKHkoYSwzLCEwKStcIiBtdXN0IGVpdGhlciBiZSBhIGNhbmNlbCBjYWxsYmFjayBvciBhIGNvbnRleHQgb2JqZWN0LlwiKTtyZXR1cm4gZH1ZLnByb3RvdHlwZS5yZWY9WS5wcm90b3R5cGUuSWI7WS5wcm90b3R5cGUub249WS5wcm90b3R5cGUuRWI7WS5wcm90b3R5cGUub2ZmPVkucHJvdG90eXBlLmljO1kucHJvdG90eXBlLm9uY2U9WS5wcm90b3R5cGUuRGc7WS5wcm90b3R5cGUubGltaXQ9WS5wcm90b3R5cGUuSGU7WS5wcm90b3R5cGUubGltaXRUb0ZpcnN0PVkucHJvdG90eXBlLkllO1xuWS5wcm90b3R5cGUubGltaXRUb0xhc3Q9WS5wcm90b3R5cGUuSmU7WS5wcm90b3R5cGUub3JkZXJCeUNoaWxkPVkucHJvdG90eXBlLkVnO1kucHJvdG90eXBlLm9yZGVyQnlLZXk9WS5wcm90b3R5cGUuRmc7WS5wcm90b3R5cGUub3JkZXJCeVByaW9yaXR5PVkucHJvdG90eXBlLkdnO1kucHJvdG90eXBlLm9yZGVyQnlWYWx1ZT1ZLnByb3RvdHlwZS5IZztZLnByb3RvdHlwZS5zdGFydEF0PVkucHJvdG90eXBlLiRkO1kucHJvdG90eXBlLmVuZEF0PVkucHJvdG90eXBlLnRkO1kucHJvdG90eXBlLmVxdWFsVG89WS5wcm90b3R5cGUua2c7WS5wcm90b3R5cGUudG9TdHJpbmc9WS5wcm90b3R5cGUudG9TdHJpbmc7dmFyIFo9e307Wi52Yz1LaDtaLkRhdGFDb25uZWN0aW9uPVoudmM7S2gucHJvdG90eXBlLlJnPWZ1bmN0aW9uKGEsYil7dGhpcy5GYShcInFcIix7cDphfSxiKX07Wi52Yy5wcm90b3R5cGUuc2ltcGxlTGlzdGVuPVoudmMucHJvdG90eXBlLlJnO0toLnByb3RvdHlwZS5qZz1mdW5jdGlvbihhLGIpe3RoaXMuRmEoXCJlY2hvXCIse2Q6YX0sYil9O1oudmMucHJvdG90eXBlLmVjaG89Wi52Yy5wcm90b3R5cGUuamc7S2gucHJvdG90eXBlLmludGVycnVwdD1LaC5wcm90b3R5cGUueWI7Wi5WZj15aDtaLlJlYWxUaW1lQ29ubmVjdGlvbj1aLlZmO3loLnByb3RvdHlwZS5zZW5kUmVxdWVzdD15aC5wcm90b3R5cGUuRmE7eWgucHJvdG90eXBlLmNsb3NlPXloLnByb3RvdHlwZS5jbG9zZTtcbloucmc9ZnVuY3Rpb24oYSl7dmFyIGI9S2gucHJvdG90eXBlLnB1dDtLaC5wcm90b3R5cGUucHV0PWZ1bmN0aW9uKGMsZCxlLGYpe24oZikmJihmPWEoKSk7Yi5jYWxsKHRoaXMsYyxkLGUsZil9O3JldHVybiBmdW5jdGlvbigpe0toLnByb3RvdHlwZS5wdXQ9Yn19O1ouaGlqYWNrSGFzaD1aLnJnO1ouVWY9emM7Wi5Db25uZWN0aW9uVGFyZ2V0PVouVWY7Wi52YT1mdW5jdGlvbihhKXtyZXR1cm4gYS52YSgpfTtaLnF1ZXJ5SWRlbnRpZmllcj1aLnZhO1oudGc9ZnVuY3Rpb24oYSl7cmV0dXJuIGEuay5SYS4kfTtaLmxpc3RlbnM9Wi50ZztaLnZlPWZ1bmN0aW9uKGEpe2EudmUoKX07Wi5mb3JjZVJlc3RDbGllbnQ9Wi52ZTtmdW5jdGlvbiBVKGEsYil7dmFyIGMsZCxlO2lmKGEgaW5zdGFuY2VvZiBZaCljPWEsZD1iO2Vsc2V7eChcIm5ldyBGaXJlYmFzZVwiLDEsMixhcmd1bWVudHMubGVuZ3RoKTtkPVBjKGFyZ3VtZW50c1swXSk7Yz1kLlRnO1wiZmlyZWJhc2VcIj09PWQuZG9tYWluJiZPYyhkLmhvc3QrXCIgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gUGxlYXNlIHVzZSA8WU9VUiBGSVJFQkFTRT4uZmlyZWJhc2Vpby5jb20gaW5zdGVhZFwiKTtjJiZcInVuZGVmaW5lZFwiIT1jfHxPYyhcIkNhbm5vdCBwYXJzZSBGaXJlYmFzZSB1cmwuIFBsZWFzZSB1c2UgaHR0cHM6Ly88WU9VUiBGSVJFQkFTRT4uZmlyZWJhc2Vpby5jb21cIik7ZC5rYnx8XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy5sb2NhdGlvbiYmd2luZG93LmxvY2F0aW9uLnByb3RvY29sJiYtMSE9PXdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbC5pbmRleE9mKFwiaHR0cHM6XCIpJiZPKFwiSW5zZWN1cmUgRmlyZWJhc2UgYWNjZXNzIGZyb20gYSBzZWN1cmUgcGFnZS4gUGxlYXNlIHVzZSBodHRwcyBpbiBjYWxscyB0byBuZXcgRmlyZWJhc2UoKS5cIik7XG5jPW5ldyB6YyhkLmhvc3QsZC5rYixjLFwid3NcIj09PWQuc2NoZW1lfHxcIndzc1wiPT09ZC5zY2hlbWUpO2Q9bmV3IEwoZC4kYyk7ZT1kLnRvU3RyaW5nKCk7dmFyIGY7IShmPSFwKGMuaG9zdCl8fDA9PT1jLmhvc3QubGVuZ3RofHwhJGYoYy5oYykpJiYoZj0wIT09ZS5sZW5ndGgpJiYoZSYmKGU9ZS5yZXBsYWNlKC9eXFwvKlxcLmluZm8oXFwvfCQpLyxcIi9cIikpLGY9IShwKGUpJiYwIT09ZS5sZW5ndGgmJiFZZi50ZXN0KGUpKSk7aWYoZil0aHJvdyBFcnJvcih5KFwibmV3IEZpcmViYXNlXCIsMSwhMSkrJ211c3QgYmUgYSB2YWxpZCBmaXJlYmFzZSBVUkwgYW5kIHRoZSBwYXRoIGNhblxcJ3QgY29udGFpbiBcIi5cIiwgXCIjXCIsIFwiJFwiLCBcIltcIiwgb3IgXCJdXCIuJyk7aWYoYilpZihiIGluc3RhbmNlb2YgVyllPWI7ZWxzZSBpZihwKGIpKWU9Vy51YigpLGMuT2Q9YjtlbHNlIHRocm93IEVycm9yKFwiRXhwZWN0ZWQgYSB2YWxpZCBGaXJlYmFzZS5Db250ZXh0IGZvciBzZWNvbmQgYXJndW1lbnQgdG8gbmV3IEZpcmViYXNlKClcIik7XG5lbHNlIGU9Vy51YigpO2Y9Yy50b1N0cmluZygpO3ZhciBoPXcoZS5vYyxmKTtofHwoaD1uZXcgWWgoYyxlLlNmKSxlLm9jW2ZdPWgpO2M9aH1ZLmNhbGwodGhpcyxjLGQsYmUsITEpfW1hKFUsWSk7dmFyIHdpPVUseGk9W1wiRmlyZWJhc2VcIl0seWk9YWE7eGlbMF1pbiB5aXx8IXlpLmV4ZWNTY3JpcHR8fHlpLmV4ZWNTY3JpcHQoXCJ2YXIgXCIreGlbMF0pO2Zvcih2YXIgemk7eGkubGVuZ3RoJiYoemk9eGkuc2hpZnQoKSk7KSF4aS5sZW5ndGgmJm4od2kpP3lpW3ppXT13aTp5aT15aVt6aV0/eWlbemldOnlpW3ppXT17fTtVLmdvT2ZmbGluZT1mdW5jdGlvbigpe3goXCJGaXJlYmFzZS5nb09mZmxpbmVcIiwwLDAsYXJndW1lbnRzLmxlbmd0aCk7Vy51YigpLnliKCl9O1UuZ29PbmxpbmU9ZnVuY3Rpb24oKXt4KFwiRmlyZWJhc2UuZ29PbmxpbmVcIiwwLDAsYXJndW1lbnRzLmxlbmd0aCk7Vy51YigpLnJjKCl9O1xuZnVuY3Rpb24gTGMoYSxiKXtLKCFifHwhMD09PWF8fCExPT09YSxcIkNhbid0IHR1cm4gb24gY3VzdG9tIGxvZ2dlcnMgcGVyc2lzdGVudGx5LlwiKTshMD09PWE/KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjb25zb2xlLmxvZz9CYj1xKGNvbnNvbGUubG9nLGNvbnNvbGUpOlwib2JqZWN0XCI9PT10eXBlb2YgY29uc29sZS5sb2cmJihCYj1mdW5jdGlvbihhKXtjb25zb2xlLmxvZyhhKX0pKSxiJiZ5Yy5zZXQoXCJsb2dnaW5nX2VuYWJsZWRcIiwhMCkpOmE/QmI9YTooQmI9bnVsbCx5Yy5yZW1vdmUoXCJsb2dnaW5nX2VuYWJsZWRcIikpfVUuZW5hYmxlTG9nZ2luZz1MYztVLlNlcnZlclZhbHVlPXtUSU1FU1RBTVA6e1wiLnN2XCI6XCJ0aW1lc3RhbXBcIn19O1UuU0RLX1ZFUlNJT049aGI7VS5JTlRFUk5BTD1WO1UuQ29udGV4dD1XO1UuVEVTVF9BQ0NFU1M9WjtcblUucHJvdG90eXBlLm5hbWU9ZnVuY3Rpb24oKXtPKFwiRmlyZWJhc2UubmFtZSgpIGJlaW5nIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgRmlyZWJhc2Uua2V5KCkgaW5zdGVhZC5cIik7eChcIkZpcmViYXNlLm5hbWVcIiwwLDAsYXJndW1lbnRzLmxlbmd0aCk7cmV0dXJuIHRoaXMua2V5KCl9O1UucHJvdG90eXBlLm5hbWU9VS5wcm90b3R5cGUubmFtZTtVLnByb3RvdHlwZS5rZXk9ZnVuY3Rpb24oKXt4KFwiRmlyZWJhc2Uua2V5XCIsMCwwLGFyZ3VtZW50cy5sZW5ndGgpO3JldHVybiB0aGlzLnBhdGguZSgpP251bGw6TGQodGhpcy5wYXRoKX07VS5wcm90b3R5cGUua2V5PVUucHJvdG90eXBlLmtleTtcblUucHJvdG90eXBlLnU9ZnVuY3Rpb24oYSl7eChcIkZpcmViYXNlLmNoaWxkXCIsMSwxLGFyZ3VtZW50cy5sZW5ndGgpO2lmKGdhKGEpKWE9U3RyaW5nKGEpO2Vsc2UgaWYoIShhIGluc3RhbmNlb2YgTCkpaWYobnVsbD09PUUodGhpcy5wYXRoKSl7dmFyIGI9YTtiJiYoYj1iLnJlcGxhY2UoL15cXC8qXFwuaW5mbyhcXC98JCkvLFwiL1wiKSk7aWcoXCJGaXJlYmFzZS5jaGlsZFwiLGIpfWVsc2UgaWcoXCJGaXJlYmFzZS5jaGlsZFwiLGEpO3JldHVybiBuZXcgVSh0aGlzLmssdGhpcy5wYXRoLnUoYSkpfTtVLnByb3RvdHlwZS5jaGlsZD1VLnByb3RvdHlwZS51O1UucHJvdG90eXBlLnBhcmVudD1mdW5jdGlvbigpe3goXCJGaXJlYmFzZS5wYXJlbnRcIiwwLDAsYXJndW1lbnRzLmxlbmd0aCk7dmFyIGE9dGhpcy5wYXRoLnBhcmVudCgpO3JldHVybiBudWxsPT09YT9udWxsOm5ldyBVKHRoaXMuayxhKX07VS5wcm90b3R5cGUucGFyZW50PVUucHJvdG90eXBlLnBhcmVudDtcblUucHJvdG90eXBlLnJvb3Q9ZnVuY3Rpb24oKXt4KFwiRmlyZWJhc2UucmVmXCIsMCwwLGFyZ3VtZW50cy5sZW5ndGgpO2Zvcih2YXIgYT10aGlzO251bGwhPT1hLnBhcmVudCgpOylhPWEucGFyZW50KCk7cmV0dXJuIGF9O1UucHJvdG90eXBlLnJvb3Q9VS5wcm90b3R5cGUucm9vdDtVLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oYSxiKXt4KFwiRmlyZWJhc2Uuc2V0XCIsMSwyLGFyZ3VtZW50cy5sZW5ndGgpO2pnKFwiRmlyZWJhc2Uuc2V0XCIsdGhpcy5wYXRoKTtiZyhcIkZpcmViYXNlLnNldFwiLGEsdGhpcy5wYXRoLCExKTtBKFwiRmlyZWJhc2Uuc2V0XCIsMixiLCEwKTt0aGlzLmsuS2IodGhpcy5wYXRoLGEsbnVsbCxifHxudWxsKX07VS5wcm90b3R5cGUuc2V0PVUucHJvdG90eXBlLnNldDtcblUucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihhLGIpe3goXCJGaXJlYmFzZS51cGRhdGVcIiwxLDIsYXJndW1lbnRzLmxlbmd0aCk7amcoXCJGaXJlYmFzZS51cGRhdGVcIix0aGlzLnBhdGgpO2lmKGVhKGEpKXtmb3IodmFyIGM9e30sZD0wO2Q8YS5sZW5ndGg7KytkKWNbXCJcIitkXT1hW2RdO2E9YztPKFwiUGFzc2luZyBhbiBBcnJheSB0byBGaXJlYmFzZS51cGRhdGUoKSBpcyBkZXByZWNhdGVkLiBVc2Ugc2V0KCkgaWYgeW91IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSBleGlzdGluZyBkYXRhLCBvciBhbiBPYmplY3Qgd2l0aCBpbnRlZ2VyIGtleXMgaWYgeW91IHJlYWxseSBkbyB3YW50IHRvIG9ubHkgdXBkYXRlIHNvbWUgb2YgdGhlIGNoaWxkcmVuLlwiKX1lZyhcIkZpcmViYXNlLnVwZGF0ZVwiLGEsdGhpcy5wYXRoKTtBKFwiRmlyZWJhc2UudXBkYXRlXCIsMixiLCEwKTt0aGlzLmsudXBkYXRlKHRoaXMucGF0aCxhLGJ8fG51bGwpfTtVLnByb3RvdHlwZS51cGRhdGU9VS5wcm90b3R5cGUudXBkYXRlO1xuVS5wcm90b3R5cGUuS2I9ZnVuY3Rpb24oYSxiLGMpe3goXCJGaXJlYmFzZS5zZXRXaXRoUHJpb3JpdHlcIiwyLDMsYXJndW1lbnRzLmxlbmd0aCk7amcoXCJGaXJlYmFzZS5zZXRXaXRoUHJpb3JpdHlcIix0aGlzLnBhdGgpO2JnKFwiRmlyZWJhc2Uuc2V0V2l0aFByaW9yaXR5XCIsYSx0aGlzLnBhdGgsITEpO2ZnKFwiRmlyZWJhc2Uuc2V0V2l0aFByaW9yaXR5XCIsMixiKTtBKFwiRmlyZWJhc2Uuc2V0V2l0aFByaW9yaXR5XCIsMyxjLCEwKTtpZihcIi5sZW5ndGhcIj09PXRoaXMua2V5KCl8fFwiLmtleXNcIj09PXRoaXMua2V5KCkpdGhyb3dcIkZpcmViYXNlLnNldFdpdGhQcmlvcml0eSBmYWlsZWQ6IFwiK3RoaXMua2V5KCkrXCIgaXMgYSByZWFkLW9ubHkgb2JqZWN0LlwiO3RoaXMuay5LYih0aGlzLnBhdGgsYSxiLGN8fG51bGwpfTtVLnByb3RvdHlwZS5zZXRXaXRoUHJpb3JpdHk9VS5wcm90b3R5cGUuS2I7XG5VLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oYSl7eChcIkZpcmViYXNlLnJlbW92ZVwiLDAsMSxhcmd1bWVudHMubGVuZ3RoKTtqZyhcIkZpcmViYXNlLnJlbW92ZVwiLHRoaXMucGF0aCk7QShcIkZpcmViYXNlLnJlbW92ZVwiLDEsYSwhMCk7dGhpcy5zZXQobnVsbCxhKX07VS5wcm90b3R5cGUucmVtb3ZlPVUucHJvdG90eXBlLnJlbW92ZTtcblUucHJvdG90eXBlLnRyYW5zYWN0aW9uPWZ1bmN0aW9uKGEsYixjKXt4KFwiRmlyZWJhc2UudHJhbnNhY3Rpb25cIiwxLDMsYXJndW1lbnRzLmxlbmd0aCk7amcoXCJGaXJlYmFzZS50cmFuc2FjdGlvblwiLHRoaXMucGF0aCk7QShcIkZpcmViYXNlLnRyYW5zYWN0aW9uXCIsMSxhLCExKTtBKFwiRmlyZWJhc2UudHJhbnNhY3Rpb25cIiwyLGIsITApO2lmKG4oYykmJlwiYm9vbGVhblwiIT10eXBlb2YgYyl0aHJvdyBFcnJvcih5KFwiRmlyZWJhc2UudHJhbnNhY3Rpb25cIiwzLCEwKStcIm11c3QgYmUgYSBib29sZWFuLlwiKTtpZihcIi5sZW5ndGhcIj09PXRoaXMua2V5KCl8fFwiLmtleXNcIj09PXRoaXMua2V5KCkpdGhyb3dcIkZpcmViYXNlLnRyYW5zYWN0aW9uIGZhaWxlZDogXCIrdGhpcy5rZXkoKStcIiBpcyBhIHJlYWQtb25seSBvYmplY3QuXCI7XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBjJiYoYz0hMCk7amkodGhpcy5rLHRoaXMucGF0aCxhLGJ8fG51bGwsYyl9O1UucHJvdG90eXBlLnRyYW5zYWN0aW9uPVUucHJvdG90eXBlLnRyYW5zYWN0aW9uO1xuVS5wcm90b3R5cGUuT2c9ZnVuY3Rpb24oYSxiKXt4KFwiRmlyZWJhc2Uuc2V0UHJpb3JpdHlcIiwxLDIsYXJndW1lbnRzLmxlbmd0aCk7amcoXCJGaXJlYmFzZS5zZXRQcmlvcml0eVwiLHRoaXMucGF0aCk7ZmcoXCJGaXJlYmFzZS5zZXRQcmlvcml0eVwiLDEsYSk7QShcIkZpcmViYXNlLnNldFByaW9yaXR5XCIsMixiLCEwKTt0aGlzLmsuS2IodGhpcy5wYXRoLnUoXCIucHJpb3JpdHlcIiksYSxudWxsLGIpfTtVLnByb3RvdHlwZS5zZXRQcmlvcml0eT1VLnByb3RvdHlwZS5PZztcblUucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oYSxiKXt4KFwiRmlyZWJhc2UucHVzaFwiLDAsMixhcmd1bWVudHMubGVuZ3RoKTtqZyhcIkZpcmViYXNlLnB1c2hcIix0aGlzLnBhdGgpO2JnKFwiRmlyZWJhc2UucHVzaFwiLGEsdGhpcy5wYXRoLCEwKTtBKFwiRmlyZWJhc2UucHVzaFwiLDIsYiwhMCk7dmFyIGM9JGgodGhpcy5rKSxjPUZlKGMpLGM9dGhpcy51KGMpO1widW5kZWZpbmVkXCIhPT10eXBlb2YgYSYmbnVsbCE9PWEmJmMuc2V0KGEsYik7cmV0dXJuIGN9O1UucHJvdG90eXBlLnB1c2g9VS5wcm90b3R5cGUucHVzaDtVLnByb3RvdHlwZS5oYj1mdW5jdGlvbigpe2pnKFwiRmlyZWJhc2Uub25EaXNjb25uZWN0XCIsdGhpcy5wYXRoKTtyZXR1cm4gbmV3IFgodGhpcy5rLHRoaXMucGF0aCl9O1UucHJvdG90eXBlLm9uRGlzY29ubmVjdD1VLnByb3RvdHlwZS5oYjtcblUucHJvdG90eXBlLk09ZnVuY3Rpb24oYSxiLGMpe08oXCJGaXJlYmFzZVJlZi5hdXRoKCkgYmVpbmcgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBGaXJlYmFzZVJlZi5hdXRoV2l0aEN1c3RvbVRva2VuKCkgaW5zdGVhZC5cIik7eChcIkZpcmViYXNlLmF1dGhcIiwxLDMsYXJndW1lbnRzLmxlbmd0aCk7a2coXCJGaXJlYmFzZS5hdXRoXCIsYSk7QShcIkZpcmViYXNlLmF1dGhcIiwyLGIsITApO0EoXCJGaXJlYmFzZS5hdXRoXCIsMyxiLCEwKTtZZyh0aGlzLmsuTSxhLHt9LHtyZW1lbWJlcjpcIm5vbmVcIn0sYixjKX07VS5wcm90b3R5cGUuYXV0aD1VLnByb3RvdHlwZS5NO1UucHJvdG90eXBlLmdlPWZ1bmN0aW9uKGEpe3goXCJGaXJlYmFzZS51bmF1dGhcIiwwLDEsYXJndW1lbnRzLmxlbmd0aCk7QShcIkZpcmViYXNlLnVuYXV0aFwiLDEsYSwhMCk7WmcodGhpcy5rLk0sYSl9O1UucHJvdG90eXBlLnVuYXV0aD1VLnByb3RvdHlwZS5nZTtcblUucHJvdG90eXBlLnhlPWZ1bmN0aW9uKCl7eChcIkZpcmViYXNlLmdldEF1dGhcIiwwLDAsYXJndW1lbnRzLmxlbmd0aCk7cmV0dXJuIHRoaXMuay5NLnhlKCl9O1UucHJvdG90eXBlLmdldEF1dGg9VS5wcm90b3R5cGUueGU7VS5wcm90b3R5cGUueGc9ZnVuY3Rpb24oYSxiKXt4KFwiRmlyZWJhc2Uub25BdXRoXCIsMSwyLGFyZ3VtZW50cy5sZW5ndGgpO0EoXCJGaXJlYmFzZS5vbkF1dGhcIiwxLGEsITEpO21iKFwiRmlyZWJhc2Uub25BdXRoXCIsMixiKTt0aGlzLmsuTS5FYihcImF1dGhfc3RhdHVzXCIsYSxiKX07VS5wcm90b3R5cGUub25BdXRoPVUucHJvdG90eXBlLnhnO1UucHJvdG90eXBlLndnPWZ1bmN0aW9uKGEsYil7eChcIkZpcmViYXNlLm9mZkF1dGhcIiwxLDIsYXJndW1lbnRzLmxlbmd0aCk7QShcIkZpcmViYXNlLm9mZkF1dGhcIiwxLGEsITEpO21iKFwiRmlyZWJhc2Uub2ZmQXV0aFwiLDIsYik7dGhpcy5rLk0uaWMoXCJhdXRoX3N0YXR1c1wiLGEsYil9O1UucHJvdG90eXBlLm9mZkF1dGg9VS5wcm90b3R5cGUud2c7XG5VLnByb3RvdHlwZS5aZj1mdW5jdGlvbihhLGIsYyl7eChcIkZpcmViYXNlLmF1dGhXaXRoQ3VzdG9tVG9rZW5cIiwyLDMsYXJndW1lbnRzLmxlbmd0aCk7a2coXCJGaXJlYmFzZS5hdXRoV2l0aEN1c3RvbVRva2VuXCIsYSk7QShcIkZpcmViYXNlLmF1dGhXaXRoQ3VzdG9tVG9rZW5cIiwyLGIsITEpO25nKFwiRmlyZWJhc2UuYXV0aFdpdGhDdXN0b21Ub2tlblwiLDMsYywhMCk7WWcodGhpcy5rLk0sYSx7fSxjfHx7fSxiKX07VS5wcm90b3R5cGUuYXV0aFdpdGhDdXN0b21Ub2tlbj1VLnByb3RvdHlwZS5aZjtVLnByb3RvdHlwZS4kZj1mdW5jdGlvbihhLGIsYyl7eChcIkZpcmViYXNlLmF1dGhXaXRoT0F1dGhQb3B1cFwiLDIsMyxhcmd1bWVudHMubGVuZ3RoKTttZyhcIkZpcmViYXNlLmF1dGhXaXRoT0F1dGhQb3B1cFwiLGEpO0EoXCJGaXJlYmFzZS5hdXRoV2l0aE9BdXRoUG9wdXBcIiwyLGIsITEpO25nKFwiRmlyZWJhc2UuYXV0aFdpdGhPQXV0aFBvcHVwXCIsMyxjLCEwKTtjaCh0aGlzLmsuTSxhLGMsYil9O1xuVS5wcm90b3R5cGUuYXV0aFdpdGhPQXV0aFBvcHVwPVUucHJvdG90eXBlLiRmO1UucHJvdG90eXBlLmFnPWZ1bmN0aW9uKGEsYixjKXt4KFwiRmlyZWJhc2UuYXV0aFdpdGhPQXV0aFJlZGlyZWN0XCIsMiwzLGFyZ3VtZW50cy5sZW5ndGgpO21nKFwiRmlyZWJhc2UuYXV0aFdpdGhPQXV0aFJlZGlyZWN0XCIsYSk7QShcIkZpcmViYXNlLmF1dGhXaXRoT0F1dGhSZWRpcmVjdFwiLDIsYiwhMSk7bmcoXCJGaXJlYmFzZS5hdXRoV2l0aE9BdXRoUmVkaXJlY3RcIiwzLGMsITApO3ZhciBkPXRoaXMuay5NO2FoKGQpO3ZhciBlPVtLZ10sZj12ZyhjKTtcImFub255bW91c1wiPT09YXx8XCJmaXJlYmFzZVwiPT09YT9QKGIsTWcoXCJUUkFOU1BPUlRfVU5BVkFJTEFCTEVcIikpOih5Yy5zZXQoXCJyZWRpcmVjdF9jbGllbnRfb3B0aW9uc1wiLGYub2QpLGJoKGQsZSxcIi9hdXRoL1wiK2EsZixiKSl9O1UucHJvdG90eXBlLmF1dGhXaXRoT0F1dGhSZWRpcmVjdD1VLnByb3RvdHlwZS5hZztcblUucHJvdG90eXBlLmJnPWZ1bmN0aW9uKGEsYixjLGQpe3goXCJGaXJlYmFzZS5hdXRoV2l0aE9BdXRoVG9rZW5cIiwzLDQsYXJndW1lbnRzLmxlbmd0aCk7bWcoXCJGaXJlYmFzZS5hdXRoV2l0aE9BdXRoVG9rZW5cIixhKTtBKFwiRmlyZWJhc2UuYXV0aFdpdGhPQXV0aFRva2VuXCIsMyxjLCExKTtuZyhcIkZpcmViYXNlLmF1dGhXaXRoT0F1dGhUb2tlblwiLDQsZCwhMCk7cChiKT8obGcoXCJGaXJlYmFzZS5hdXRoV2l0aE9BdXRoVG9rZW5cIiwyLGIpLCRnKHRoaXMuay5NLGErXCIvdG9rZW5cIix7YWNjZXNzX3Rva2VuOmJ9LGQsYykpOihuZyhcIkZpcmViYXNlLmF1dGhXaXRoT0F1dGhUb2tlblwiLDIsYiwhMSksJGcodGhpcy5rLk0sYStcIi90b2tlblwiLGIsZCxjKSl9O1UucHJvdG90eXBlLmF1dGhXaXRoT0F1dGhUb2tlbj1VLnByb3RvdHlwZS5iZztcblUucHJvdG90eXBlLllmPWZ1bmN0aW9uKGEsYil7eChcIkZpcmViYXNlLmF1dGhBbm9ueW1vdXNseVwiLDEsMixhcmd1bWVudHMubGVuZ3RoKTtBKFwiRmlyZWJhc2UuYXV0aEFub255bW91c2x5XCIsMSxhLCExKTtuZyhcIkZpcmViYXNlLmF1dGhBbm9ueW1vdXNseVwiLDIsYiwhMCk7JGcodGhpcy5rLk0sXCJhbm9ueW1vdXNcIix7fSxiLGEpfTtVLnByb3RvdHlwZS5hdXRoQW5vbnltb3VzbHk9VS5wcm90b3R5cGUuWWY7XG5VLnByb3RvdHlwZS5jZz1mdW5jdGlvbihhLGIsYyl7eChcIkZpcmViYXNlLmF1dGhXaXRoUGFzc3dvcmRcIiwyLDMsYXJndW1lbnRzLmxlbmd0aCk7bmcoXCJGaXJlYmFzZS5hdXRoV2l0aFBhc3N3b3JkXCIsMSxhLCExKTtvZyhcIkZpcmViYXNlLmF1dGhXaXRoUGFzc3dvcmRcIixhLFwiZW1haWxcIik7b2coXCJGaXJlYmFzZS5hdXRoV2l0aFBhc3N3b3JkXCIsYSxcInBhc3N3b3JkXCIpO0EoXCJGaXJlYmFzZS5hdXRoV2l0aFBhc3N3b3JkXCIsMixiLCExKTtuZyhcIkZpcmViYXNlLmF1dGhXaXRoUGFzc3dvcmRcIiwzLGMsITApOyRnKHRoaXMuay5NLFwicGFzc3dvcmRcIixhLGMsYil9O1UucHJvdG90eXBlLmF1dGhXaXRoUGFzc3dvcmQ9VS5wcm90b3R5cGUuY2c7XG5VLnByb3RvdHlwZS5zZT1mdW5jdGlvbihhLGIpe3goXCJGaXJlYmFzZS5jcmVhdGVVc2VyXCIsMiwyLGFyZ3VtZW50cy5sZW5ndGgpO25nKFwiRmlyZWJhc2UuY3JlYXRlVXNlclwiLDEsYSwhMSk7b2coXCJGaXJlYmFzZS5jcmVhdGVVc2VyXCIsYSxcImVtYWlsXCIpO29nKFwiRmlyZWJhc2UuY3JlYXRlVXNlclwiLGEsXCJwYXNzd29yZFwiKTtBKFwiRmlyZWJhc2UuY3JlYXRlVXNlclwiLDIsYiwhMSk7dGhpcy5rLk0uc2UoYSxiKX07VS5wcm90b3R5cGUuY3JlYXRlVXNlcj1VLnByb3RvdHlwZS5zZTtVLnByb3RvdHlwZS5UZT1mdW5jdGlvbihhLGIpe3goXCJGaXJlYmFzZS5yZW1vdmVVc2VyXCIsMiwyLGFyZ3VtZW50cy5sZW5ndGgpO25nKFwiRmlyZWJhc2UucmVtb3ZlVXNlclwiLDEsYSwhMSk7b2coXCJGaXJlYmFzZS5yZW1vdmVVc2VyXCIsYSxcImVtYWlsXCIpO29nKFwiRmlyZWJhc2UucmVtb3ZlVXNlclwiLGEsXCJwYXNzd29yZFwiKTtBKFwiRmlyZWJhc2UucmVtb3ZlVXNlclwiLDIsYiwhMSk7dGhpcy5rLk0uVGUoYSxiKX07XG5VLnByb3RvdHlwZS5yZW1vdmVVc2VyPVUucHJvdG90eXBlLlRlO1UucHJvdG90eXBlLnBlPWZ1bmN0aW9uKGEsYil7eChcIkZpcmViYXNlLmNoYW5nZVBhc3N3b3JkXCIsMiwyLGFyZ3VtZW50cy5sZW5ndGgpO25nKFwiRmlyZWJhc2UuY2hhbmdlUGFzc3dvcmRcIiwxLGEsITEpO29nKFwiRmlyZWJhc2UuY2hhbmdlUGFzc3dvcmRcIixhLFwiZW1haWxcIik7b2coXCJGaXJlYmFzZS5jaGFuZ2VQYXNzd29yZFwiLGEsXCJvbGRQYXNzd29yZFwiKTtvZyhcIkZpcmViYXNlLmNoYW5nZVBhc3N3b3JkXCIsYSxcIm5ld1Bhc3N3b3JkXCIpO0EoXCJGaXJlYmFzZS5jaGFuZ2VQYXNzd29yZFwiLDIsYiwhMSk7dGhpcy5rLk0ucGUoYSxiKX07VS5wcm90b3R5cGUuY2hhbmdlUGFzc3dvcmQ9VS5wcm90b3R5cGUucGU7XG5VLnByb3RvdHlwZS5vZT1mdW5jdGlvbihhLGIpe3goXCJGaXJlYmFzZS5jaGFuZ2VFbWFpbFwiLDIsMixhcmd1bWVudHMubGVuZ3RoKTtuZyhcIkZpcmViYXNlLmNoYW5nZUVtYWlsXCIsMSxhLCExKTtvZyhcIkZpcmViYXNlLmNoYW5nZUVtYWlsXCIsYSxcIm9sZEVtYWlsXCIpO29nKFwiRmlyZWJhc2UuY2hhbmdlRW1haWxcIixhLFwibmV3RW1haWxcIik7b2coXCJGaXJlYmFzZS5jaGFuZ2VFbWFpbFwiLGEsXCJwYXNzd29yZFwiKTtBKFwiRmlyZWJhc2UuY2hhbmdlRW1haWxcIiwyLGIsITEpO3RoaXMuay5NLm9lKGEsYil9O1UucHJvdG90eXBlLmNoYW5nZUVtYWlsPVUucHJvdG90eXBlLm9lO1xuVS5wcm90b3R5cGUuVmU9ZnVuY3Rpb24oYSxiKXt4KFwiRmlyZWJhc2UucmVzZXRQYXNzd29yZFwiLDIsMixhcmd1bWVudHMubGVuZ3RoKTtuZyhcIkZpcmViYXNlLnJlc2V0UGFzc3dvcmRcIiwxLGEsITEpO29nKFwiRmlyZWJhc2UucmVzZXRQYXNzd29yZFwiLGEsXCJlbWFpbFwiKTtBKFwiRmlyZWJhc2UucmVzZXRQYXNzd29yZFwiLDIsYiwhMSk7dGhpcy5rLk0uVmUoYSxiKX07VS5wcm90b3R5cGUucmVzZXRQYXNzd29yZD1VLnByb3RvdHlwZS5WZTt9KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZpcmViYXNlO1xuIl19
